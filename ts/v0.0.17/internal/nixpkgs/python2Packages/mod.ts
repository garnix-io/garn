import { mkPackage } from "../../../package.ts";
import { nixRaw } from "../../../nix.ts";

/**
 * Convert WSGI app to ASGI app or ASGI app to WSGI app
 */
export const a2wsgi = mkPackage(
  nixRaw`pkgs.python2Packages.a2wsgi`,
  "Convert WSGI app to ASGI app or ASGI app to WSGI app",
);

/**
 * An auto-attribute dict (and a couple of other useful dict functions).
 */
export const aadict = mkPackage(
  nixRaw`pkgs.python2Packages.aadict`,
  "An auto-attribute dict (and a couple of other useful dict functions).",
);

/**
 * ASCII art to image converter
 */
export const aafigure = mkPackage(
  nixRaw`pkgs.python2Packages.aafigure`,
  "ASCII art to image converter",
);

/**
 * Asynchronous RDP protocol implementation
 */
export const aardwolf = mkPackage(
  nixRaw`pkgs.python2Packages.aardwolf`,
  "Asynchronous RDP protocol implementation",
);

/**
 * A cool helper for tracking time and throughput of code blocks, with beautiful human friendly renditions
 */
export const about_time = mkPackage(
  nixRaw`pkgs.python2Packages.about-time`,
  "A cool helper for tracking time and throughput of code blocks, with beautiful human friendly renditions",
);

/**
 * Abseil Python Common Libraries
 */
export const absl_py = mkPackage(
  nixRaw`pkgs.python2Packages.absl-py`,
  "Abseil Python Common Libraries",
);

/**
 * A simple way to train and use PyTorch models with multi-GPU, TPU, mixed-precision
 */
export const accelerate = mkPackage(
  nixRaw`pkgs.python2Packages.accelerate`,
  "A simple way to train and use PyTorch models with multi-GPU, TPU, mixed-precision",
);

/**
 * A collection of accessible pygments styles
 */
export const accessible_pygments = mkPackage(
  nixRaw`pkgs.python2Packages.accessible-pygments`,
  "A collection of accessible pygments styles",
);

/**
 * Accurate sums and dot products for Python
 */
export const accupy = mkPackage(
  nixRaw`pkgs.python2Packages.accupy`,
  "Accurate sums and dot products for Python",
);

/**
 * Python wrapper for getting weather data from AccuWeather servers
 */
export const accuweather = mkPackage(
  nixRaw`pkgs.python2Packages.accuweather`,
  "Python wrapper for getting weather data from AccuWeather servers",
);

/**
 * ACME protocol implementation in Python
 */
export const acme = mkPackage(
  nixRaw`pkgs.python2Packages.acme`,
  "ACME protocol implementation in Python",
);

/**
 * A tiny script to issue and renew TLS certs from Let's Encrypt
 */
export const acme_tiny = mkPackage(
  nixRaw`pkgs.python2Packages.acme-tiny`,
  "A tiny script to issue and renew TLS certs from Let's Encrypt",
);

/**
 * Python package for acousticians
 */
export const acoustics = mkPackage(
  nixRaw`pkgs.python2Packages.acoustics`,
  "Python package for acousticians",
);

/**
 * Tool to quickly gather forensic artifacts from disk images or a live system
 */
export const acquire = mkPackage(
  nixRaw`pkgs.python2Packages.acquire`,
  "Tool to quickly gather forensic artifacts from disk images or a live system",
);

/**
 * Generate activity-diagram image from spec-text file (similar to Graphviz)
 */
export const actdiag = mkPackage(
  nixRaw`pkgs.python2Packages.actdiag`,
  "Generate activity-diagram image from spec-text file (similar to Graphviz)",
);

/**
 * Acunetix Web Vulnerability Scanner SDK for Python
 */
export const acunetix = mkPackage(
  nixRaw`pkgs.python2Packages.acunetix`,
  "Acunetix Web Vulnerability Scanner SDK for Python",
);

/**
 * Module for interacting with Adafruit IO
 */
export const adafruit_io = mkPackage(
  nixRaw`pkgs.python2Packages.adafruit-io`,
  "Module for interacting with Adafruit IO",
);

/**
 * Modified version of Nordic's nrfutil 0.5.x for use with the Adafruit Feather nRF52
 */
export const adafruit_nrfutil = mkPackage(
  nixRaw`pkgs.python2Packages.adafruit-nrfutil`,
  "Modified version of Nordic's nrfutil 0.5.x for use with the Adafruit Feather nRF52",
);

/**
 * Platform detection for use by Adafruit libraries
 */
export const adafruit_platformdetect = mkPackage(
  nixRaw`pkgs.python2Packages.adafruit-platformdetect`,
  "Platform detection for use by Adafruit libraries",
);

/**
 * Python interface to Linux IO including I2C and SPI
 */
export const adafruit_pureio = mkPackage(
  nixRaw`pkgs.python2Packages.adafruit-pureio`,
  "Python interface to Linux IO including I2C and SPI",
);

/**
 * Python module to authenticate to Azure Active Directory (AAD) in order to access AAD protected web resources
 */
export const adal = mkPackage(
  nixRaw`pkgs.python2Packages.adal`,
  "Python module to authenticate to Azure Active Directory (AAD) in order to access AAD protected web resources",
);

/**
 * Python module to communicate with Adax
 */
export const adax = mkPackage(
  nixRaw`pkgs.python2Packages.adax`,
  "Python module to communicate with Adax",
);

/**
 * Module for local access to Adax
 */
export const adax_local = mkPackage(
  nixRaw`pkgs.python2Packages.adax-local`,
  "Module for local access to Adax",
);

/**
 * Tool for Android testing and development
 */
export const adb_enhanced = mkPackage(
  nixRaw`pkgs.python2Packages.adb-enhanced`,
  "Tool for Android testing and development",
);

/**
 * A pure python implementation of the Android ADB and Fastboot protocols
 */
export const adb_homeassistant = mkPackage(
  nixRaw`pkgs.python2Packages.adb-homeassistant`,
  "A pure python implementation of the Android ADB and Fastboot protocols",
);

/**
 * Python implementation of ADB with shell and FileSync functionality
 */
export const adb_shell = mkPackage(
  nixRaw`pkgs.python2Packages.adb-shell`,
  "Python implementation of ADB with shell and FileSync functionality",
);

/**
 * Python wrapper for Brave's adblocking library
 */
export const adblock = mkPackage(
  nixRaw`pkgs.python2Packages.adblock`,
  "Python wrapper for Brave's adblocking library",
);

/**
 * A tool (and pre-commit hook) to automatically add trailing commas to calls and literals
 */
export const add_trailing_comma = mkPackage(
  nixRaw`pkgs.python2Packages.add-trailing-comma`,
  "A tool (and pre-commit hook) to automatically add trailing commas to calls and literals",
);

/**
 * Module that exposes a dictionary subclass that allows items to be set like attributes
 */
export const addict = mkPackage(
  nixRaw`pkgs.python2Packages.addict`,
  "Module that exposes a dictionary subclass that allows items to be set like attributes",
);

/**
 * Python extension for AlarmDecoder
 */
export const adext = mkPackage(
  nixRaw`pkgs.python2Packages.adext`,
  "Python extension for AlarmDecoder",
);

/**
 * Python client for the AdGuard Home API
 */
export const adguardhome = mkPackage(
  nixRaw`pkgs.python2Packages.adguardhome`,
  "Python client for the AdGuard Home API",
);

/**
 * Iteratively adjust text position in matplotlib plots to minimize overlaps
 */
export const adjusttext = mkPackage(
  nixRaw`pkgs.python2Packages.adjusttext`,
  "Iteratively adjust text position in matplotlib plots to minimize overlaps",
);

/**
 * Filesystem interface to Azure-Datalake Gen1 and Gen2 Storage
 */
export const adlfs = mkPackage(
  nixRaw`pkgs.python2Packages.adlfs`,
  "Filesystem interface to Azure-Datalake Gen1 and Gen2 Storage",
);

/**
 * API helper for Advantage Air's MyAir and e-zone API
 */
export const advantage_air = mkPackage(
  nixRaw`pkgs.python2Packages.advantage-air`,
  "API helper for Advantage Air's MyAir and e-zone API",
);

/**
 * An SSRF-preventing wrapper around Python's requests library
 */
export const advocate = mkPackage(
  nixRaw`pkgs.python2Packages.advocate`,
  "An SSRF-preventing wrapper around Python's requests library",
);

/**
 * Python client for AEMET OpenData Rest API
 */
export const aemet_opendata = mkPackage(
  nixRaw`pkgs.python2Packages.aemet-opendata`,
  "Python client for AEMET OpenData Rest API",
);

/**
 * Advanced Enumerations (compatible with Python's stdlib Enum), NamedTuples, and NamedConstants
 */
export const aenum = mkPackage(
  nixRaw`pkgs.python2Packages.aenum`,
  "Advanced Enumerations (compatible with Python's stdlib Enum), NamedTuples, and NamedConstants",
);

/**
 * Library for an Aesara-based PPL
 */
export const aeppl = mkPackage(
  nixRaw`pkgs.python2Packages.aeppl`,
  "Library for an Aesara-based PPL",
);

/**
 * Python library to define, optimize, and efficiently evaluate mathematical expressions involving multi-dimensional arrays
 */
export const aesara = mkPackage(
  nixRaw`pkgs.python2Packages.aesara`,
  "Python library to define, optimize, and efficiently evaluate mathematical expressions involving multi-dimensional arrays",
);

/**
 * Parser for JET databases
 */
export const aesedb = mkPackage(
  nixRaw`pkgs.python2Packages.aesedb`,
  "Parser for JET databases",
);

/**
 * Adobe Font Development Kit for OpenType
 */
export const afdko = mkPackage(
  nixRaw`pkgs.python2Packages.afdko`,
  "Adobe Font Development Kit for OpenType",
);

/**
 * Matrices describing affine transformation of the plane
 */
export const affine = mkPackage(
  nixRaw`pkgs.python2Packages.affine`,
  "Matrices describing affine transformation of the plane",
);

/**
 * Python implementation of the Frontier Silicon API
 */
export const afsapi = mkPackage(
  nixRaw`pkgs.python2Packages.afsapi`,
  "Python implementation of the Frontier Silicon API",
);

/**
 * Python data analysis library that is optimized for humans instead of machines
 */
export const agate = mkPackage(
  nixRaw`pkgs.python2Packages.agate`,
  "Python data analysis library that is optimized for humans instead of machines",
);

/**
 * Adds read support for dbf files to agate
 */
export const agate_dbf = mkPackage(
  nixRaw`pkgs.python2Packages.agate-dbf`,
  "Adds read support for dbf files to agate",
);

/**
 * Adds read support for excel files to agate
 */
export const agate_excel = mkPackage(
  nixRaw`pkgs.python2Packages.agate-excel`,
  "Adds read support for excel files to agate",
);

/**
 * Adds SQL read/write support to agate.
 */
export const agate_sql = mkPackage(
  nixRaw`pkgs.python2Packages.agate-sql`,
  "Adds SQL read/write support to agate.",
);

/**
 * A python wrapper around the Agent REST API.
 */
export const agent_py = mkPackage(
  nixRaw`pkgs.python2Packages.agent-py`,
  "A python wrapper around the Agent REST API.",
);

/**
 * High quality drawing interface for PIL
 */
export const aggdraw = mkPackage(
  nixRaw`pkgs.python2Packages.aggdraw`,
  "High quality drawing interface for PIL",
);

/**
 * A python library with miscellaneous tools
 */
export const aigpy = mkPackage(
  nixRaw`pkgs.python2Packages.aigpy`,
  "A python library with miscellaneous tools",
);

/**
 * The angr Intermediate Language
 */
export const ailment = mkPackage(
  nixRaw`pkgs.python2Packages.ailment`,
  "The angr Intermediate Language",
);

/**
 * Python module for accessing GeoJSON feeds
 */
export const aio_geojson_client = mkPackage(
  nixRaw`pkgs.python2Packages.aio-geojson-client`,
  "Python module for accessing GeoJSON feeds",
);

/**
 * Python library for accessing GeoJSON feeds
 */
export const aio_geojson_generic_client = mkPackage(
  nixRaw`pkgs.python2Packages.aio-geojson-generic-client`,
  "Python library for accessing GeoJSON feeds",
);

/**
 * Python module for accessing the GeoNet NZ Quakes GeoJSON feeds
 */
export const aio_geojson_geonetnz_quakes = mkPackage(
  nixRaw`pkgs.python2Packages.aio-geojson-geonetnz-quakes`,
  "Python module for accessing the GeoNet NZ Quakes GeoJSON feeds",
);

/**
 * Python module for accessing the GeoNet NZ Volcanic GeoJSON feeds
 */
export const aio_geojson_geonetnz_volcano = mkPackage(
  nixRaw`pkgs.python2Packages.aio-geojson-geonetnz-volcano`,
  "Python module for accessing the GeoNet NZ Volcanic GeoJSON feeds",
);

/**
 * Python module for accessing the NSW Rural Fire Service incidents feeds
 */
export const aio_geojson_nsw_rfs_incidents = mkPackage(
  nixRaw`pkgs.python2Packages.aio-geojson-nsw-rfs-incidents`,
  "Python module for accessing the NSW Rural Fire Service incidents feeds",
);

/**
 * Python module for accessing the U.S. Geological Survey Earthquake Hazards Program feeds
 */
export const aio_geojson_usgs_earthquakes = mkPackage(
  nixRaw`pkgs.python2Packages.aio-geojson-usgs-earthquakes`,
  "Python module for accessing the U.S. Geological Survey Earthquake Hazards Program feeds",
);

/**
 * Python library for accessing GeoRSS feeds
 */
export const aio_georss_client = mkPackage(
  nixRaw`pkgs.python2Packages.aio-georss-client`,
  "Python library for accessing GeoRSS feeds",
);

/**
 * Python library for accessing GeoRSS feeds
 */
export const aio_georss_gdacs = mkPackage(
  nixRaw`pkgs.python2Packages.aio-georss-gdacs`,
  "Python library for accessing GeoRSS feeds",
);

/**
 * AMQP 0.9 client designed for asyncio and humans
 */
export const aio_pika = mkPackage(
  nixRaw`pkgs.python2Packages.aio-pika`,
  "AMQP 0.9 client designed for asyncio and humans",
);

/**
 * Library to retrieve data from air-Q devices
 */
export const aioairq = mkPackage(
  nixRaw`pkgs.python2Packages.aioairq`,
  "Library to retrieve data from air-Q devices",
);

/**
 * Module to control AirZone devices
 */
export const aioairzone = mkPackage(
  nixRaw`pkgs.python2Packages.aioairzone`,
  "Module to control AirZone devices",
);

/**
 * Library to control Airzone via Cloud API
 */
export const aioairzone_cloud = mkPackage(
  nixRaw`pkgs.python2Packages.aioairzone-cloud`,
  "Library to control Airzone via Cloud API",
);

/**
 * Library for controlling Genie garage doors connected to Aladdin Connect devices
 */
export const aioaladdinconnect = mkPackage(
  nixRaw`pkgs.python2Packages.aioaladdinconnect`,
  "Library for controlling Genie garage doors connected to Aladdin Connect devices",
);

/**
 * Python library for the Ambient Weather API
 */
export const aioambient = mkPackage(
  nixRaw`pkgs.python2Packages.aioambient`,
  "Python library for the Ambient Weather API",
);

/**
 * AMQP implementation using asyncio
 */
export const aioamqp = mkPackage(
  nixRaw`pkgs.python2Packages.aioamqp`,
  "AMQP implementation using asyncio",
);

/**
 * An efficient APNs Client Library
 */
export const aioapns = mkPackage(
  nixRaw`pkgs.python2Packages.aioapns`,
  "An efficient APNs Client Library",
);

/**
 * Module to interact with the Aseko Pool Live API
 */
export const aioaseko = mkPackage(
  nixRaw`pkgs.python2Packages.aioaseko`,
  "Module to interact with the Aseko Pool Live API",
);

/**
 * Python module for Asuswrt
 */
export const aioasuswrt = mkPackage(
  nixRaw`pkgs.python2Packages.aioasuswrt`,
  "Python module for Asuswrt",
);

/**
 * Get data from the Azure DevOps API
 */
export const aioazuredevops = mkPackage(
  nixRaw`pkgs.python2Packages.aioazuredevops`,
  "Get data from the Azure DevOps API",
);

/**
 * Library for communication with the Big Ass Fans i6 firmware
 */
export const aiobafi6 = mkPackage(
  nixRaw`pkgs.python2Packages.aiobafi6`,
  "Library for communication with the Big Ass Fans i6 firmware",
);

/**
 * Library for interacting with the PowUnity BikeTrax GPS tracker
 */
export const aiobiketrax = mkPackage(
  nixRaw`pkgs.python2Packages.aiobiketrax`,
  "Library for interacting with the PowUnity BikeTrax GPS tracker",
);

/**
 * Library to listen for BLE advertized packets
 */
export const aioblescan = mkPackage(
  nixRaw`pkgs.python2Packages.aioblescan`,
  "Library to listen for BLE advertized packets",
);

/**
 * Wrapper to use boto3 resources with the aiobotocore async backend
 */
export const aioboto3 = mkPackage(
  nixRaw`pkgs.python2Packages.aioboto3`,
  "Wrapper to use boto3 resources with the aiobotocore async backend",
);

/**
 * Python client for amazon services
 */
export const aiobotocore = mkPackage(
  nixRaw`pkgs.python2Packages.aiobotocore`,
  "Python client for amazon services",
);

/**
 * Python module to control various Broadlink devices
 */
export const aiobroadlink = mkPackage(
  nixRaw`pkgs.python2Packages.aiobroadlink`,
  "Python module to control various Broadlink devices",
);

/**
 * Python API Rate Limit Decorator
 */
export const aiocache = mkPackage(
  nixRaw`pkgs.python2Packages.aiocache`,
  "Python API Rate Limit Decorator",
);

/**
 * Python CoAP library
 */
export const aiocoap = mkPackage(
  nixRaw`pkgs.python2Packages.aiocoap`,
  "Python CoAP library",
);

/**
 * Library to control Comelit Simplehome
 */
export const aiocomelit = mkPackage(
  nixRaw`pkgs.python2Packages.aiocomelit`,
  "Library to control Comelit Simplehome",
);

/**
 * Asynchronous console and interfaces for asyncio
 */
export const aioconsole = mkPackage(
  nixRaw`pkgs.python2Packages.aioconsole`,
  "Asynchronous console and interfaces for asyncio",
);

/**
 * Asyncio support for PEP-567 contextvars backport
 */
export const aiocontextvars = mkPackage(
  nixRaw`pkgs.python2Packages.aiocontextvars`,
  "Asyncio support for PEP-567 contextvars backport",
);

/**
 * Crontabs for asyncio
 */
export const aiocron = mkPackage(
  nixRaw`pkgs.python2Packages.aiocron`,
  "Crontabs for asyncio",
);

/**
 * Library for for asynchronous CSV reading/writing
 */
export const aiocsv = mkPackage(
  nixRaw`pkgs.python2Packages.aiocsv`,
  "Library for for asynchronous CSV reading/writing",
);

/**
 * Python API for interacting with currencylayer
 */
export const aiocurrencylayer = mkPackage(
  nixRaw`pkgs.python2Packages.aiocurrencylayer`,
  "Python API for interacting with currencylayer",
);

/**
 * Python module to discover hosts via ARP and PTR lookup
 */
export const aiodiscover = mkPackage(
  nixRaw`pkgs.python2Packages.aiodiscover`,
  "Python module to discover hosts via ARP and PTR lookup",
);

/**
 * Simple DNS resolver for asyncio
 */
export const aiodns = mkPackage(
  nixRaw`pkgs.python2Packages.aiodns`,
  "Simple DNS resolver for asyncio",
);

/**
 * Docker API client for asyncio
 */
export const aiodocker = mkPackage(
  nixRaw`pkgs.python2Packages.aiodocker`,
  "Docker API client for asyncio",
);

/**
 * Python client for access the Real Time flood monitoring API
 */
export const aioeafm = mkPackage(
  nixRaw`pkgs.python2Packages.aioeafm`,
  "Python client for access the Real Time flood monitoring API",
);

/**
 * Python library to control EAGLE-200
 */
export const aioeagle = mkPackage(
  nixRaw`pkgs.python2Packages.aioeagle`,
  "Python library to control EAGLE-200",
);

/**
 * Wrapper for the EcoWitt protocol
 */
export const aioecowitt = mkPackage(
  nixRaw`pkgs.python2Packages.aioecowitt`,
  "Wrapper for the EcoWitt protocol",
);

/**
 * Module for interacting with Electricity maps
 */
export const aioelectricitymaps = mkPackage(
  nixRaw`pkgs.python2Packages.aioelectricitymaps`,
  "Module for interacting with Electricity maps",
);

/**
 * Python client for SiteSage Emonitor
 */
export const aioemonitor = mkPackage(
  nixRaw`pkgs.python2Packages.aioemonitor`,
  "Python client for SiteSage Emonitor",
);

/**
 * Python Client for ESPHome native API
 */
export const aioesphomeapi = mkPackage(
  nixRaw`pkgs.python2Packages.aioesphomeapi`,
  "Python Client for ESPHome native API",
);

/**
 * High performance functions to work with the async IO
 */
export const aioextensions = mkPackage(
  nixRaw`pkgs.python2Packages.aioextensions`,
  "High performance functions to work with the async IO",
);

/**
 * File operations with asyncio support
 */
export const aiofile = mkPackage(
  nixRaw`pkgs.python2Packages.aiofile`,
  "File operations with asyncio support",
);

/**
 * File support for asyncio
 */
export const aiofiles = mkPackage(
  nixRaw`pkgs.python2Packages.aiofiles`,
  "File support for asyncio",
);

/**
 * Python library for Flo by Moen Smart Water Detectors
 */
export const aioflo = mkPackage(
  nixRaw`pkgs.python2Packages.aioflo`,
  "Python library for Flo by Moen Smart Water Detectors",
);

/**
 * Python FTP client/server for asyncio
 */
export const aioftp = mkPackage(
  nixRaw`pkgs.python2Packages.aioftp`,
  "Python FTP client/server for asyncio",
);

/**
 * Python client for the GitHub API
 */
export const aiogithubapi = mkPackage(
  nixRaw`pkgs.python2Packages.aiogithubapi`,
  "Python client for the GitHub API",
);

/**
 * Modern and fully asynchronous framework for Telegram Bot API
 */
export const aiogram = mkPackage(
  nixRaw`pkgs.python2Packages.aiogram`,
  "Modern and fully asynchronous framework for Telegram Bot API",
);

/**
 *  Python library to interact with Elexa Guardian devices
 */
export const aioguardian = mkPackage(
  nixRaw`pkgs.python2Packages.aioguardian`,
  " Python library to interact with Elexa Guardian devices",
);

/**
 * Python library for interacting the Logitech Harmony devices
 */
export const aioharmony = mkPackage(
  nixRaw`pkgs.python2Packages.aioharmony`,
  "Python library for interacting the Logitech Harmony devices",
);

/**
 * Python module that implements the HomeKit protocol
 */
export const aiohomekit = mkPackage(
  nixRaw`pkgs.python2Packages.aiohomekit`,
  "Python module that implements the HomeKit protocol",
);

/**
 * Asynchronous HTTP Client/Server for Python and asyncio
 */
export const aiohttp = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp`,
  "Asynchronous HTTP Client/Server for Python and asyncio",
);

/**
 * Build and document REST APIs with aiohttp and apispec
 */
export const aiohttp_apispec = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-apispec`,
  "Build and document REST APIs with aiohttp and apispec",
);

/**
 * HTTP basic authentication middleware for aiohttp 3.0
 */
export const aiohttp_basicauth = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-basicauth`,
  "HTTP basic authentication middleware for aiohttp 3.0",
);

/**
 * CORS support for aiohttp
 */
export const aiohttp_cors = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-cors`,
  "CORS support for aiohttp",
);

/**
 * Jinja2 support for aiohttp
 */
export const aiohttp_jinja2 = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-jinja2`,
  "Jinja2 support for aiohttp",
);

/**
 * oauthlib integration for aiohttp clients
 */
export const aiohttp_oauthlib = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-oauthlib`,
  "oauthlib integration for aiohttp clients",
);

/**
 * OpenMetrics provider for aiohttp
 */
export const aiohttp_openmetrics = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-openmetrics`,
  "OpenMetrics provider for aiohttp",
);

/**
 * Set of useful tools for aiohttp.web server
 */
export const aiohttp_remotes = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-remotes`,
  "Set of useful tools for aiohttp.web server",
);

/**
 * Retry client for aiohttp
 */
export const aiohttp_retry = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-retry`,
  "Retry client for aiohttp",
);

/**
 * SOCKS proxy connector for aiohttp
 */
export const aiohttp_socks = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-socks`,
  "SOCKS proxy connector for aiohttp",
);

/**
 * Swagger API Documentation builder for aiohttp
 */
export const aiohttp_swagger = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-swagger`,
  "Swagger API Documentation builder for aiohttp",
);

/**
 * WSGI adapter for aiohttp
 */
export const aiohttp_wsgi = mkPackage(
  nixRaw`pkgs.python2Packages.aiohttp-wsgi`,
  "WSGI adapter for aiohttp",
);

/**
 * Python package to talk to Philips Hue
 */
export const aiohue = mkPackage(
  nixRaw`pkgs.python2Packages.aiohue`,
  "Python package to talk to Philips Hue",
);

/**
 * Python library to interact with the HomeWizard Energy devices API
 */
export const aiohwenergy = mkPackage(
  nixRaw`pkgs.python2Packages.aiohwenergy`,
  "Python library to interact with the HomeWizard Energy devices API",
);

/**
 * Python asyncio IMAP4rev1 client library
 */
export const aioimaplib = mkPackage(
  nixRaw`pkgs.python2Packages.aioimaplib`,
  "Python asyncio IMAP4rev1 client library",
);

/**
 * Asynchronous Python client for InfluxDB
 */
export const aioinflux = mkPackage(
  nixRaw`pkgs.python2Packages.aioinflux`,
  "Asynchronous Python client for InfluxDB",
);

/**
 * Implementation of itertools, builtins, and more for AsyncIO and mixed-type iterables
 */
export const aioitertools = mkPackage(
  nixRaw`pkgs.python2Packages.aioitertools`,
  "Implementation of itertools, builtins, and more for AsyncIO and mixed-type iterables",
);

/**
 * Jobs scheduler for managing background task (asyncio)
 */
export const aiojobs = mkPackage(
  nixRaw`pkgs.python2Packages.aiojobs`,
  "Jobs scheduler for managing background task (asyncio)",
);

/**
 * Kafka integration with asyncio
 */
export const aiokafka = mkPackage(
  nixRaw`pkgs.python2Packages.aiokafka`,
  "Kafka integration with asyncio",
);

/**
 * Python API for KEF speakers
 */
export const aiokef = mkPackage(
  nixRaw`pkgs.python2Packages.aiokef`,
  "Python API for KEF speakers",
);

/**
 * Module for local communication with LIFX devices over a LAN
 */
export const aiolifx = mkPackage(
  nixRaw`pkgs.python2Packages.aiolifx`,
  "Module for local communication with LIFX devices over a LAN",
);

/**
 * Wrapper for aiolifx to connect to a single LIFX device
 */
export const aiolifx_connection = mkPackage(
  nixRaw`pkgs.python2Packages.aiolifx-connection`,
  "Wrapper for aiolifx to connect to a single LIFX device",
);

/**
 * Light effects (pulse, colorloop ...) for LIFX lights running on aiolifx
 */
export const aiolifx_effects = mkPackage(
  nixRaw`pkgs.python2Packages.aiolifx-effects`,
  "Light effects (pulse, colorloop ...) for LIFX lights running on aiolifx",
);

/**
 * Color themes for LIFX lights running on aiolifx
 */
export const aiolifx_themes = mkPackage(
  nixRaw`pkgs.python2Packages.aiolifx-themes`,
  "Color themes for LIFX lights running on aiolifx",
);

/**
 * Implementation of a rate limiter for asyncio
 */
export const aiolimiter = mkPackage(
  nixRaw`pkgs.python2Packages.aiolimiter`,
  "Implementation of a rate limiter for asyncio",
);

/**
 * Python module for the Lutron Integration Protocol
 */
export const aiolip = mkPackage(
  nixRaw`pkgs.python2Packages.aiolip`,
  "Python module for the Lutron Integration Protocol",
);

/**
 * Module to communicate with LIVISI Smart Home Controller
 */
export const aiolivisi = mkPackage(
  nixRaw`pkgs.python2Packages.aiolivisi`,
  "Module to communicate with LIVISI Smart Home Controller",
);

/**
 * Python client for interacting with LOOKin devices
 */
export const aiolookin = mkPackage(
  nixRaw`pkgs.python2Packages.aiolookin`,
  "Python client for interacting with LOOKin devices",
);

/**
 * Python module for the Honeywell Lyric Platform
 */
export const aiolyric = mkPackage(
  nixRaw`pkgs.python2Packages.aiolyric`,
  "Python module for the Honeywell Lyric Platform",
);

/**
 * Miscellaneous utils for asyncio
 */
export const aiomisc = mkPackage(
  nixRaw`pkgs.python2Packages.aiomisc`,
  "Miscellaneous utils for asyncio",
);

/**
 * Pytest integration for aiomisc
 */
export const aiomisc_pytest = mkPackage(
  nixRaw`pkgs.python2Packages.aiomisc-pytest`,
  "Pytest integration for aiomisc",
);

/**
 * Asynchronous Python client for Modern Forms fans
 */
export const aiomodernforms = mkPackage(
  nixRaw`pkgs.python2Packages.aiomodernforms`,
  "Asynchronous Python client for Modern Forms fans",
);

/**
 * The idiomatic asyncio MQTT client, wrapped around paho-mqtt
 */
export const aiomqtt = mkPackage(
  nixRaw`pkgs.python2Packages.aiomqtt`,
  "The idiomatic asyncio MQTT client, wrapped around paho-mqtt",
);

/**
 * Python module to improve performance
 */
export const aiomultiprocess = mkPackage(
  nixRaw`pkgs.python2Packages.aiomultiprocess`,
  "Python module to improve performance",
);

/**
 * Companion library for musiccast devices intended for the Home Assistant integration
 */
export const aiomusiccast = mkPackage(
  nixRaw`pkgs.python2Packages.aiomusiccast`,
  "Companion library for musiccast devices intended for the Home Assistant integration",
);

/**
 * Library to connect to MySensors gateways
 */
export const aiomysensors = mkPackage(
  nixRaw`pkgs.python2Packages.aiomysensors`,
  "Library to connect to MySensors gateways",
);

/**
 * MySQL driver for asyncio
 */
export const aiomysql = mkPackage(
  nixRaw`pkgs.python2Packages.aiomysql`,
  "MySQL driver for asyncio",
);

/**
 * Python wrapper for the Nanoleaf API
 */
export const aionanoleaf = mkPackage(
  nixRaw`pkgs.python2Packages.aionanoleaf`,
  "Python wrapper for the Nanoleaf API",
);

/**
 * Simple, asyncio-based inotify library for Python
 */
export const aionotify = mkPackage(
  nixRaw`pkgs.python2Packages.aionotify`,
  "Simple, asyncio-based inotify library for Python",
);

/**
 * Python library for Notion Home Monitoring
 */
export const aionotion = mkPackage(
  nixRaw`pkgs.python2Packages.aionotion`,
  "Python library for Notion Home Monitoring",
);

/**
 * Module to interact with the Kohler Oncue API
 */
export const aiooncue = mkPackage(
  nixRaw`pkgs.python2Packages.aiooncue`,
  "Module to interact with the Kohler Oncue API",
);

/**
 * Library for the Openexchangerates API
 */
export const aioopenexchangerates = mkPackage(
  nixRaw`pkgs.python2Packages.aioopenexchangerates`,
  "Library for the Openexchangerates API",
);

/**
 * TLS-capable transport using OpenSSL for asyncio
 */
export const aioopenssl = mkPackage(
  nixRaw`pkgs.python2Packages.aioopenssl`,
  "TLS-capable transport using OpenSSL for asyncio",
);

/**
 * Library for aliyun OSS (Object Storage Service)
 */
export const aiooss2 = mkPackage(
  nixRaw`pkgs.python2Packages.aiooss2`,
  "Library for aliyun OSS (Object Storage Service)",
);

/**
 * Library to retrieve data from PEGELONLINE
 */
export const aiopegelonline = mkPackage(
  nixRaw`pkgs.python2Packages.aiopegelonline`,
  "Library to retrieve data from PEGELONLINE",
);

/**
 * Python library for accessing a PostgreSQL database
 */
export const aiopg = mkPackage(
  nixRaw`pkgs.python2Packages.aiopg`,
  "Python library for accessing a PostgreSQL database",
);

/**
 * Library that integrates the multiprocessing module with asyncio
 */
export const aioprocessing = mkPackage(
  nixRaw`pkgs.python2Packages.aioprocessing`,
  "Library that integrates the multiprocessing module with asyncio",
);

/**
 * A Prometheus Python client library for asyncio-based applications
 */
export const aioprometheus = mkPackage(
  nixRaw`pkgs.python2Packages.aioprometheus`,
  "A Prometheus Python client library for asyncio-based applications",
);

/**
 * Python Rollease Acmeda Automate Pulse hub protocol implementation
 */
export const aiopulse = mkPackage(
  nixRaw`pkgs.python2Packages.aiopulse`,
  "Python Rollease Acmeda Automate Pulse hub protocol implementation",
);

/**
 * Python library for interacting with the PurpleAir API
 */
export const aiopurpleair = mkPackage(
  nixRaw`pkgs.python2Packages.aiopurpleair`,
  "Python library for interacting with the PurpleAir API",
);

/**
 * Python API for the PowerView API
 */
export const aiopvapi = mkPackage(
  nixRaw`pkgs.python2Packages.aiopvapi`,
  "Python API for the PowerView API",
);

/**
 * Python module to download Spanish electricity hourly prices (PVPC)
 */
export const aiopvpc = mkPackage(
  nixRaw`pkgs.python2Packages.aiopvpc`,
  "Python module to download Spanish electricity hourly prices (PVPC)",
);

/**
 * Python API client for Lidarr/Radarr/Readarr/Sonarr
 */
export const aiopyarr = mkPackage(
  nixRaw`pkgs.python2Packages.aiopyarr`,
  "Python API client for Lidarr/Radarr/Readarr/Sonarr",
);

/**
 * Python library to control webOS based LG TV units
 */
export const aiopylgtv = mkPackage(
  nixRaw`pkgs.python2Packages.aiopylgtv`,
  "Python library to control webOS based LG TV units",
);

/**
 * Library to fetch data from QNAP QSW switches
 */
export const aioqsw = mkPackage(
  nixRaw`pkgs.python2Packages.aioqsw`,
  "Library to fetch data from QNAP QSW switches",
);

/**
 * Implementation of QUIC and HTTP/3
 */
export const aioquic = mkPackage(
  nixRaw`pkgs.python2Packages.aioquic`,
  "Implementation of QUIC and HTTP/3",
);

/**
 * QUIC and HTTP/3 implementation in Python
 */
export const aioquic_mitmproxy = mkPackage(
  nixRaw`pkgs.python2Packages.aioquic-mitmproxy`,
  "QUIC and HTTP/3 implementation in Python",
);

/**
 * Python library for the Recollect Waste API
 */
export const aiorecollect = mkPackage(
  nixRaw`pkgs.python2Packages.aiorecollect`,
  "Python library for the Recollect Waste API",
);

/**
 * Asyncio (PEP 3156) Redis client library
 */
export const aioredis = mkPackage(
  nixRaw`pkgs.python2Packages.aioredis`,
  "Asyncio (PEP 3156) Redis client library",
);

/**
 * A helper to mock/fake web requests in python aiohttp package
 */
export const aioresponses = mkPackage(
  nixRaw`pkgs.python2Packages.aioresponses`,
  "A helper to mock/fake web requests in python aiohttp package",
);

/**
 * Python library for interacting with Ridwell waste recycling
 */
export const aioridwell = mkPackage(
  nixRaw`pkgs.python2Packages.aioridwell`,
  "Python library for interacting with Ridwell waste recycling",
);

/**
 * AMQP 0.9.1 asynchronous client library
 */
export const aiormq = mkPackage(
  nixRaw`pkgs.python2Packages.aiormq`,
  "AMQP 0.9.1 asynchronous client library",
);

/**
 * Transport, protocol and framing-independent async RPC client and server implementation
 */
export const aiorpcx = mkPackage(
  nixRaw`pkgs.python2Packages.aiorpcx`,
  "Transport, protocol and framing-independent async RPC client and server implementation",
);

/**
 * Library for the Remember the Milk API
 */
export const aiortm = mkPackage(
  nixRaw`pkgs.python2Packages.aiortm`,
  "Library for the Remember the Milk API",
);

/**
 * Python client for Ruckus Unleashed and Ruckus ZoneDirector
 */
export const aioruckus = mkPackage(
  nixRaw`pkgs.python2Packages.aioruckus`,
  "Python client for Ruckus Unleashed and Ruckus ZoneDirector",
);

/**
 * Boilerplate for asyncio applications
 */
export const aiorun = mkPackage(
  nixRaw`pkgs.python2Packages.aiorun`,
  "Boilerplate for asyncio applications",
);

/**
 * An asyncio-native library for requesting data from a Ruuvi Gateway
 */
export const aioruuvigateway = mkPackage(
  nixRaw`pkgs.python2Packages.aioruuvigateway`,
  "An asyncio-native library for requesting data from a Ruuvi Gateway",
);

/**
 * Read write lock for asyncio
 */
export const aiorwlock = mkPackage(
  nixRaw`pkgs.python2Packages.aiorwlock`,
  "Read write lock for asyncio",
);

/**
 * Asyncio SASL library
 */
export const aiosasl = mkPackage(
  nixRaw`pkgs.python2Packages.aiosasl`,
  "Asyncio SASL library",
);

/**
 * Python wrapper for the nVent Raychem SENZ RestAPI
 */
export const aiosenz = mkPackage(
  nixRaw`pkgs.python2Packages.aiosenz`,
  "Python wrapper for the nVent Raychem SENZ RestAPI",
);

/**
 * Python module for async serial communication
 */
export const aioserial = mkPackage(
  nixRaw`pkgs.python2Packages.aioserial`,
  "Python module for async serial communication",
);

/**
 * Python library to control Shelly
 */
export const aioshelly = mkPackage(
  nixRaw`pkgs.python2Packages.aioshelly`,
  "Python library to control Shelly",
);

/**
 * Asynchronous version of function of shutil module
 */
export const aioshutil = mkPackage(
  nixRaw`pkgs.python2Packages.aioshutil`,
  "Asynchronous version of function of shutil module",
);

/**
 * Python list of registered asynchronous callbacks
 */
export const aiosignal = mkPackage(
  nixRaw`pkgs.python2Packages.aiosignal`,
  "Python list of registered asynchronous callbacks",
);

/**
 * API client for Skybell doorbells
 */
export const aioskybell = mkPackage(
  nixRaw`pkgs.python2Packages.aioskybell`,
  "API client for Skybell doorbells",
);

/**
 * Module to control Squeezebox players
 */
export const aioslimproto = mkPackage(
  nixRaw`pkgs.python2Packages.aioslimproto`,
  "Module to control Squeezebox players",
);

/**
 * Python SMB library
 */
export const aiosmb = mkPackage(
  nixRaw`pkgs.python2Packages.aiosmb`,
  "Python SMB library",
);

/**
 * Asyncio based SMTP server
 */
export const aiosmtpd = mkPackage(
  nixRaw`pkgs.python2Packages.aiosmtpd`,
  "Asyncio based SMTP server",
);

/**
 * Module which provides a SMTP client
 */
export const aiosmtplib = mkPackage(
  nixRaw`pkgs.python2Packages.aiosmtplib`,
  "Module which provides a SMTP client",
);

/**
 * AsyicIO client for US models of Honeywell Thermostats
 */
export const aiosomecomfort = mkPackage(
  nixRaw`pkgs.python2Packages.aiosomecomfort`,
  "AsyicIO client for US models of Honeywell Thermostats",
);

/**
 * Simple SQL in Python
 */
export const aiosql = mkPackage(
  nixRaw`pkgs.python2Packages.aiosql`,
  "Simple SQL in Python",
);

/**
 * Asyncio bridge to the standard sqlite3 module
 */
export const aiosqlite = mkPackage(
  nixRaw`pkgs.python2Packages.aiosqlite`,
  "Asyncio bridge to the standard sqlite3 module",
);

/**
 * Module to control Steamist steam systems
 */
export const aiosteamist = mkPackage(
  nixRaw`pkgs.python2Packages.aiosteamist`,
  "Module to control Steamist steam systems",
);

/**
 * Generator-based operators for asynchronous iteration
 */
export const aiostream = mkPackage(
  nixRaw`pkgs.python2Packages.aiostream`,
  "Generator-based operators for asynchronous iteration",
);

/**
 * Python module to interact with Switcher water heater
 */
export const aioswitcher = mkPackage(
  nixRaw`pkgs.python2Packages.aioswitcher`,
  "Python module to interact with Switcher water heater",
);

/**
 * Python client for the Syncthing REST API
 */
export const aiosyncthing = mkPackage(
  nixRaw`pkgs.python2Packages.aiosyncthing`,
  "Python client for the Syncthing REST API",
);

/**
 * Python client for the Tractive REST API
 */
export const aiotractive = mkPackage(
  nixRaw`pkgs.python2Packages.aiotractive`,
  "Python client for the Tractive REST API",
);

/**
 * Python library for communicating with Unifi Controller API
 */
export const aiounifi = mkPackage(
  nixRaw`pkgs.python2Packages.aiounifi`,
  "Python library for communicating with Unifi Controller API",
);

/**
 * Test asyncio code more easily
 */
export const aiounittest = mkPackage(
  nixRaw`pkgs.python2Packages.aiounittest`,
  "Test asyncio code more easily",
);

/**
 * Python module to control VLC
 */
export const aiovlc = mkPackage(
  nixRaw`pkgs.python2Packages.aiovlc`,
  "Python module to control VLC",
);

/**
 * Library to control Vodafon Station
 */
export const aiovodafone = mkPackage(
  nixRaw`pkgs.python2Packages.aiovodafone`,
  "Library to control Vodafon Station",
);

/**
 * Module to interact with the WAQI API
 */
export const aiowaqi = mkPackage(
  nixRaw`pkgs.python2Packages.aiowaqi`,
  "Module to interact with the WAQI API",
);

/**
 * Python library for interacting with WattTime
 */
export const aiowatttime = mkPackage(
  nixRaw`pkgs.python2Packages.aiowatttime`,
  "Python library for interacting with WattTime",
);

/**
 * Module to interact with LG webOS based TV devices
 */
export const aiowebostv = mkPackage(
  nixRaw`pkgs.python2Packages.aiowebostv`,
  "Module to interact with LG webOS based TV devices",
);

/**
 * Library for the weenect API
 */
export const aioweenect = mkPackage(
  nixRaw`pkgs.python2Packages.aioweenect`,
  "Library for the weenect API",
);

/**
 * Python module to parse the registry hive
 */
export const aiowinreg = mkPackage(
  nixRaw`pkgs.python2Packages.aiowinreg`,
  "Python module to parse the registry hive",
);

/**
 * Module to interact with Withings
 */
export const aiowithings = mkPackage(
  nixRaw`pkgs.python2Packages.aiowithings`,
  "Module to interact with Withings",
);

/**
 * Pure-python XMPP library for asyncio
 */
export const aioxmpp = mkPackage(
  nixRaw`pkgs.python2Packages.aioxmpp`,
  "Pure-python XMPP library for asyncio",
);

/**
 * Python package fetch data from Yandex maps
 */
export const aioymaps = mkPackage(
  nixRaw`pkgs.python2Packages.aioymaps`,
  "Python package fetch data from Yandex maps",
);

/**
 * A pure python implementation of multicast DNS service discovery
 */
export const aiozeroconf = mkPackage(
  nixRaw`pkgs.python2Packages.aiozeroconf`,
  "A pure python implementation of multicast DNS service discovery",
);

/**
 * Python module for getting air quality data from Airly sensors
 */
export const airly = mkPackage(
  nixRaw`pkgs.python2Packages.airly`,
  "Python module for getting air quality data from Airly sensors",
);

/**
 * Library for Airthings BLE devices
 */
export const airthings_ble = mkPackage(
  nixRaw`pkgs.python2Packages.airthings-ble`,
  "Library for Airthings BLE devices",
);

/**
 * Python module for Airthings
 */
export const airthings_cloud = mkPackage(
  nixRaw`pkgs.python2Packages.airthings-cloud`,
  "Python module for Airthings",
);

/**
 * Python API for Airtouch 4 controllers
 */
export const airtouch4pyapi = mkPackage(
  nixRaw`pkgs.python2Packages.airtouch4pyapi`,
  "Python API for Airtouch 4 controllers",
);

/**
 * AJP package crafting library
 */
export const ajpy = mkPackage(
  nixRaw`pkgs.python2Packages.ajpy`,
  "AJP package crafting library",
);

/**
 * Async JSON-RPC 2.0 protocol + asyncio server
 */
export const ajsonrpc = mkPackage(
  nixRaw`pkgs.python2Packages.ajsonrpc`,
  "Async JSON-RPC 2.0 protocol + asyncio server",
);

/**
 * A Sphinx theme
 */
export const alabaster = mkPackage(
  nixRaw`pkgs.python2Packages.alabaster`,
  "A Sphinx theme",
);

/**
 * Python library for interacting with Genie Aladdin Connect devices
 */
export const aladdin_connect = mkPackage(
  nixRaw`pkgs.python2Packages.aladdin-connect`,
  "Python library for interacting with Genie Aladdin Connect devices",
);

/**
 * Python interface for the Alarm Decoder (AD2USB, AD2SERIAL and AD2PI) devices
 */
export const alarmdecoder = mkPackage(
  nixRaw`pkgs.python2Packages.alarmdecoder`,
  "Python interface for the Alarm Decoder (AD2USB, AD2SERIAL and AD2PI) devices",
);

/**
 * Fast image augmentation library and easy to use wrapper around other libraries
 */
export const albumentations = mkPackage(
  nixRaw`pkgs.python2Packages.albumentations`,
  "Fast image augmentation library and easy to use wrapper around other libraries",
);

/**
 * a simple framework that allows researchers and hobbyists to develop AI agents for Atari 2600 games
 */
export const ale_py = mkPackage(
  nixRaw`pkgs.python2Packages.ale-py`,
  "a simple framework that allows researchers and hobbyists to develop AI agents for Atari 2600 games",
);

/**
 * A collection of tools for writing technical documents that mix Coq code and prose
 */
export const alectryon = mkPackage(
  nixRaw`pkgs.python2Packages.alectryon`,
  "A collection of tools for writing technical documents that mix Coq code and prose",
);

/**
 * A database migration tool for SQLAlchemy
 */
export const alembic = mkPackage(
  nixRaw`pkgs.python2Packages.alembic`,
  "A database migration tool for SQLAlchemy",
);

/**
 * Python Package for controlling Alexa devices (echo dot, etc) programmatically
 */
export const alexapy = mkPackage(
  nixRaw`pkgs.python2Packages.alexapy`,
  "Python Package for controlling Alexa devices (echo dot, etc) programmatically",
);

/**
 * Algebraic data types for Python
 */
export const algebraic_data_types = mkPackage(
  nixRaw`pkgs.python2Packages.algebraic-data-types`,
  "Algebraic data types for Python",
);

/**
 * A new kind of Progress Bar, with real-time throughput, ETA, and very cool animations
 */
export const alive_progress = mkPackage(
  nixRaw`pkgs.python2Packages.alive-progress`,
  "A new kind of Progress Bar, with real-time throughput, ETA, and very cool animations",
);

/**
 * CDN module of Aliyun Python SDK
 */
export const aliyun_python_sdk_cdn = mkPackage(
  nixRaw`pkgs.python2Packages.aliyun-python-sdk-cdn`,
  "CDN module of Aliyun Python SDK",
);

/**
 * Configuration module of Aliyun Python SDK
 */
export const aliyun_python_sdk_config = mkPackage(
  nixRaw`pkgs.python2Packages.aliyun-python-sdk-config`,
  "Configuration module of Aliyun Python SDK",
);

/**
 * Core module of Aliyun Python SDK
 */
export const aliyun_python_sdk_core = mkPackage(
  nixRaw`pkgs.python2Packages.aliyun-python-sdk-core`,
  "Core module of Aliyun Python SDK",
);

/**
 * DBFS module of Aliyun Python SDK
 */
export const aliyun_python_sdk_dbfs = mkPackage(
  nixRaw`pkgs.python2Packages.aliyun-python-sdk-dbfs`,
  "DBFS module of Aliyun Python SDK",
);

/**
 * IoT module of Aliyun Python SDK
 */
export const aliyun_python_sdk_iot = mkPackage(
  nixRaw`pkgs.python2Packages.aliyun-python-sdk-iot`,
  "IoT module of Aliyun Python SDK",
);

/**
 * KMS module of Aliyun Python SDK
 */
export const aliyun_python_sdk_kms = mkPackage(
  nixRaw`pkgs.python2Packages.aliyun-python-sdk-kms`,
  "KMS module of Aliyun Python SDK",
);

/**
 * STS module of Aliyun Python SDK
 */
export const aliyun_python_sdk_sts = mkPackage(
  nixRaw`pkgs.python2Packages.aliyun-python-sdk-sts`,
  "STS module of Aliyun Python SDK",
);

/**
 * Pairwise test combinations generator
 */
export const allpairspy = mkPackage(
  nixRaw`pkgs.python2Packages.allpairspy`,
  "Pairwise test combinations generator",
);

/**
 * Allure behave integration.
 */
export const allure_behave = mkPackage(
  nixRaw`pkgs.python2Packages.allure-behave`,
  "Allure behave integration.",
);

/**
 * Allure pytest integration. It's developed as pytest plugin and distributed via pypi
 */
export const allure_pytest = mkPackage(
  nixRaw`pkgs.python2Packages.allure-pytest`,
  "Allure pytest integration. It's developed as pytest plugin and distributed via pypi",
);

/**
 * Common engine for all modules. It is useful for make integration with your homemade frameworks
 */
export const allure_python_commons = mkPackage(
  nixRaw`pkgs.python2Packages.allure-python-commons`,
  "Common engine for all modules. It is useful for make integration with your homemade frameworks",
);

/**
 * Just pack of hamcrest matchers for validation result in allure2 json format
 */
export const allure_python_commons_test = mkPackage(
  nixRaw`pkgs.python2Packages.allure-python-commons-test`,
  "Just pack of hamcrest matchers for validation result in allure2 json format",
);

/**
 * Python module for the Alpha Vantage API
 */
export const alpha_vantage = mkPackage(
  nixRaw`pkgs.python2Packages.alpha-vantage`,
  "Python module for the Alpha Vantage API",
);

/**
 * A declarative statistical visualization library for Python.
 */
export const altair = mkPackage(
  nixRaw`pkgs.python2Packages.altair`,
  "A declarative statistical visualization library for Python.",
);

/**
 * A fork of graphlib: a graph (network) package for constructing graphs
 */
export const altgraph = mkPackage(
  nixRaw`pkgs.python2Packages.altgraph`,
  "A fork of graphlib: a graph (network) package for constructing graphs",
);

/**
 * A modern hardware definition language and toolchain based on Python
 */
export const amaranth = mkPackage(
  nixRaw`pkgs.python2Packages.amaranth`,
  "A modern hardware definition language and toolchain based on Python",
);

/**
 * Board definitions for Amaranth HDL
 */
export const amaranth_boards = mkPackage(
  nixRaw`pkgs.python2Packages.amaranth-boards`,
  "Board definitions for Amaranth HDL",
);

/**
 * System on Chip toolkit for Amaranth HDL
 */
export const amaranth_soc = mkPackage(
  nixRaw`pkgs.python2Packages.amaranth-soc`,
  "System on Chip toolkit for Amaranth HDL",
);

/**
 * Static-analyzer and linter for the Cairo programming language
 */
export const amarna = mkPackage(
  nixRaw`pkgs.python2Packages.amarna`,
  "Static-analyzer and linter for the Cairo programming language",
);

/**
 * Python implementation of Amazon Ion
 */
export const amazon_ion = mkPackage(
  nixRaw`pkgs.python2Packages.amazon-ion`,
  "Python implementation of Amazon Ion",
);

/**
 * Amazon Kinesis Client Library for Python
 */
export const amazon_kclpy = mkPackage(
  nixRaw`pkgs.python2Packages.amazon-kclpy`,
  "Amazon Kinesis Client Library for Python",
);

/**
 * Python client for Ambee API
 */
export const ambee = mkPackage(
  nixRaw`pkgs.python2Packages.ambee`,
  "Python client for Ambee API",
);

/**
 * Python Amber Electric API interface
 */
export const amberelectric = mkPackage(
  nixRaw`pkgs.python2Packages.amberelectric`,
  "Python Amber Electric API interface",
);

/**
 * Python library to communicate with ambiclimate
 */
export const ambiclimate = mkPackage(
  nixRaw`pkgs.python2Packages.ambiclimate`,
  "Python library to communicate with ambiclimate",
);

/**
 * Python module for Amcrest and Dahua Cameras
 */
export const amcrest = mkPackage(
  nixRaw`pkgs.python2Packages.amcrest`,
  "Python module for Amcrest and Dahua Cameras",
);

/**
 * API Wrapper for amiiboapi.com
 */
export const amiibo_py = mkPackage(
  nixRaw`pkgs.python2Packages.amiibo-py`,
  "API Wrapper for amiiboapi.com",
);

/**
 * Allows you to load and manipulate AMPL/GLPK data as Python data structures

 */
export const amply = mkPackage(
  nixRaw`pkgs.python2Packages.amply`,
  "Allows you to load and manipulate AMPL/GLPK data as Python data structures\n",
);

/**
 * Python client for the Advanced Message Queuing Procotol (AMQP). This is a fork of amqplib which is maintained by the Celery project
 */
export const amqp = mkPackage(
  nixRaw`pkgs.python2Packages.amqp`,
  "Python client for the Advanced Message Queuing Procotol (AMQP). This is a fork of amqplib which is maintained by the Celery project",
);

/**
 * Python client for the Advanced Message Queuing Procotol (AMQP)
 */
export const amqplib = mkPackage(
  nixRaw`pkgs.python2Packages.amqplib`,
  "Python client for the Advanced Message Queuing Procotol (AMQP)",
);

/**
 * Python MQTT client and broker implementation
 */
export const amqtt = mkPackage(
  nixRaw`pkgs.python2Packages.amqtt`,
  "Python MQTT client and broker implementation",
);

/**
 * Read/write/validate/query BIDS datasets
 */
export const ancp_bids = mkPackage(
  nixRaw`pkgs.python2Packages.ancp-bids`,
  "Read/write/validate/query BIDS datasets",
);

/**
 * Tool and Python library to interact with Android Files
 */
export const androguard = mkPackage(
  nixRaw`pkgs.python2Packages.androguard`,
  "Tool and Python library to interact with Android Files",
);

/**
 * Unpack and repack android backups
 */
export const android_backup = mkPackage(
  nixRaw`pkgs.python2Packages.android-backup`,
  "Unpack and repack android backups",
);

/**
 * Communicate with an Android TV or Fire TV device via ADB over a network
 */
export const androidtv = mkPackage(
  nixRaw`pkgs.python2Packages.androidtv`,
  "Communicate with an Android TV or Fire TV device via ADB over a network",
);

/**
 * Library to interact with the Android TV Remote protocol v2
 */
export const androidtvremote2 = mkPackage(
  nixRaw`pkgs.python2Packages.androidtvremote2`,
  "Library to interact with the Android TV Remote protocol v2",
);

/**
 * Discover and control ANEL NET-PwrCtrl devices
 */
export const anel_pwrctrl_homeassistant = mkPackage(
  nixRaw`pkgs.python2Packages.anel-pwrctrl-homeassistant`,
  "Discover and control ANEL NET-PwrCtrl devices",
);

/**
 * Powerful and user-friendly binary analysis platform
 */
export const angr = mkPackage(
  nixRaw`pkgs.python2Packages.angr`,
  "Powerful and user-friendly binary analysis platform",
);

/**
 * Python modules to allow easier interactive use of angr
 */
export const angrcli = mkPackage(
  nixRaw`pkgs.python2Packages.angrcli`,
  "Python modules to allow easier interactive use of angr",
);

/**
 * ROP gadget finder and chain builder
 */
export const angrop = mkPackage(
  nixRaw`pkgs.python2Packages.angrop`,
  "ROP gadget finder and chain builder",
);

/**
 * Python Parser for ISO 8601 strings
 */
export const aniso8601 = mkPackage(
  nixRaw`pkgs.python2Packages.aniso8601`,
  "Python Parser for ISO 8601 strings",
);

/**
 * Helper module to easily develop git-annex remotes
 */
export const annexremote = mkPackage(
  nixRaw`pkgs.python2Packages.annexremote`,
  "Helper module to easily develop git-annex remotes",
);

/**
 * Reusable constraint types to use with typing.Annotated
 */
export const annotated_types = mkPackage(
  nixRaw`pkgs.python2Packages.annotated-types`,
  "Reusable constraint types to use with typing.Annotated",
);

/**
 * Approximate Nearest Neighbors in C++/Python optimized for memory usage and loading/saving to disk
 */
export const annoy = mkPackage(
  nixRaw`pkgs.python2Packages.annoy`,
  "Approximate Nearest Neighbors in C++/Python optimized for memory usage and loading/saving to disk",
);

/**
 * Tool to anonymize IP addresses in log files
 */
export const anonip = mkPackage(
  nixRaw`pkgs.python2Packages.anonip`,
  "Tool to anonymize IP addresses in log files",
);

/**
 * ANSI cursor movement and graphics
 */
export const ansi = mkPackage(
  nixRaw`pkgs.python2Packages.ansi`,
  "ANSI cursor movement and graphics",
);

/**
 * Convert text with ANSI color codes to HTML
 */
export const ansi2html = mkPackage(
  nixRaw`pkgs.python2Packages.ansi2html`,
  "Convert text with ANSI color codes to HTML",
);

/**
 * Module to convert ANSI text to an image
 */
export const ansi2image = mkPackage(
  nixRaw`pkgs.python2Packages.ansi2image`,
  "Module to convert ANSI text to an image",
);

/**
 * Radically simple IT automation
 */
export const ansible = mkPackage(
  nixRaw`pkgs.python2Packages.ansible`,
  "Radically simple IT automation",
);

/**
 * Function collection that help interacting with various versions of Ansible
 */
export const ansible_compat = mkPackage(
  nixRaw`pkgs.python2Packages.ansible-compat`,
  "Function collection that help interacting with various versions of Ansible",
);

/**
 * Radically simple IT automation
 */
export const ansible_core = mkPackage(
  nixRaw`pkgs.python2Packages.ansible-core`,
  "Radically simple IT automation",
);

/**
 * An Ansible kernel for Jupyter
 */
export const ansible_kernel = mkPackage(
  nixRaw`pkgs.python2Packages.ansible-kernel`,
  "An Ansible kernel for Jupyter",
);

/**
 * Python bindings to client functionality of libssh specific to Ansible use case
 */
export const ansible_pylibssh = mkPackage(
  nixRaw`pkgs.python2Packages.ansible-pylibssh`,
  "Python bindings to client functionality of libssh specific to Ansible use case",
);

/**
 * Helps when interfacing with Ansible
 */
export const ansible_runner = mkPackage(
  nixRaw`pkgs.python2Packages.ansible-runner`,
  "Helps when interfacing with Ansible",
);

/**
 * This project aim to R/W an ansible-vault yaml file.
 */
export const ansible_vault_rw = mkPackage(
  nixRaw`pkgs.python2Packages.ansible-vault-rw`,
  "This project aim to R/W an ansible-vault yaml file.",
);

/**
 * A library to produce ansi color output and colored highlighting and diffing
 */
export const ansicolor = mkPackage(
  nixRaw`pkgs.python2Packages.ansicolor`,
  "A library to produce ansi color output and colored highlighting and diffing",
);

/**
 * ANSI colors for Python
 */
export const ansicolors = mkPackage(
  nixRaw`pkgs.python2Packages.ansicolors`,
  "ANSI colors for Python",
);

/**
 * A module for converting ANSI coded text and converts it to either plain text or HTML
 */
export const ansiconv = mkPackage(
  nixRaw`pkgs.python2Packages.ansiconv`,
  "A module for converting ANSI coded text and converts it to either plain text or HTML",
);

/**
 * An XML-like markup for producing colored terminal text.
 */
export const ansimarkup = mkPackage(
  nixRaw`pkgs.python2Packages.ansimarkup`,
  "An XML-like markup for producing colored terminal text.",
);

/**
 * Textwrap, but savvy to ANSI colors and styles
 */
export const ansiwrap = mkPackage(
  nixRaw`pkgs.python2Packages.ansiwrap`,
  "Textwrap, but savvy to ANSI colors and styles",
);

/**
 * Python asyncio module to interface with Anthem AVM and MRX receivers
 */
export const anthemav = mkPackage(
  nixRaw`pkgs.python2Packages.anthemav`,
  "Python asyncio module to interface with Anthem AVM and MRX receivers",
);

/**
 * Anthropic's safety-first language model APIs
 */
export const anthropic = mkPackage(
  nixRaw`pkgs.python2Packages.anthropic`,
  "Anthropic's safety-first language model APIs",
);

/**
 * Runtime for ANTLR
 */
export const antlr4_python3_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.antlr4-python3-runtime`,
  "Runtime for ANTLR",
);

/**
 * Unicode to ASCII transliteration
 */
export const anyascii = mkPackage(
  nixRaw`pkgs.python2Packages.anyascii`,
  "Unicode to ASCII transliteration",
);

/**
 * Python tool for generating badges for your projects
 */
export const anybadge = mkPackage(
  nixRaw`pkgs.python2Packages.anybadge`,
  "Python tool for generating badges for your projects",
);

/**
 * Python library provides common APIs to load and dump configuration files in various formats
 */
export const anyconfig = mkPackage(
  nixRaw`pkgs.python2Packages.anyconfig`,
  "Python library provides common APIs to load and dump configuration files in various formats",
);

/**
 * High level compatibility layer for multiple asynchronous event loop implementations on Python
 */
export const anyio = mkPackage(
  nixRaw`pkgs.python2Packages.anyio`,
  "High level compatibility layer for multiple asynchronous event loop implementations on Python",
);

/**
 * PyQt/PySide compatibility layer
 */
export const anyqt = mkPackage(
  nixRaw`pkgs.python2Packages.anyqt`,
  "PyQt/PySide compatibility layer",
);

/**
 * Powerful and Lightweight Python Tree Data Structure
 */
export const anytree = mkPackage(
  nixRaw`pkgs.python2Packages.anytree`,
  "Powerful and Lightweight Python Tree Data Structure",
);

/**
 * Custom jupyter widgets made easy
 */
export const anywidget = mkPackage(
  nixRaw`pkgs.python2Packages.anywidget`,
  "Custom jupyter widgets made easy",
);

/**
 * Get your Advent of Code data with a single import statement
 */
export const aocd = mkPackage(
  nixRaw`pkgs.python2Packages.aocd`,
  "Get your Advent of Code data with a single import statement",
);

/**
 * Library offers programmatic access to the status information provided by apcupsd over its Network Information Server
 */
export const apcaccess = mkPackage(
  nixRaw`pkgs.python2Packages.apcaccess`,
  "Library offers programmatic access to the status information provided by apcupsd over its Network Information Server",
);

/**
 * Namespace control and lazy-import mechanism
 */
export const apipkg = mkPackage(
  nixRaw`pkgs.python2Packages.apipkg`,
  "Namespace control and lazy-import mechanism",
);

/**
 * JSON (de)serialization, GraphQL and JSON schema generation using typing
 */
export const apischema = mkPackage(
  nixRaw`pkgs.python2Packages.apischema`,
  "JSON (de)serialization, GraphQL and JSON schema generation using typing",
);

/**
 * A pluggable API specification generator with support for the OpenAPI Specification
 */
export const apispec = mkPackage(
  nixRaw`pkgs.python2Packages.apispec`,
  "A pluggable API specification generator with support for the OpenAPI Specification",
);

/**
 * Web framework plugins for apispec
 */
export const apispec_webframeworks = mkPackage(
  nixRaw`pkgs.python2Packages.apispec-webframeworks`,
  "Web framework plugins for apispec",
);

/**
 * Audio processing toolkit
 */
export const apkit = mkPackage(
  nixRaw`pkgs.python2Packages.apkit`,
  "Audio processing toolkit",
);

/**
 * The Astronomical Plotting Library in Python
 */
export const aplpy = mkPackage(
  nixRaw`pkgs.python2Packages.aplpy`,
  "The Astronomical Plotting Library in Python",
);

/**
 * Module to implement generic application schema
 */
export const app_model = mkPackage(
  nixRaw`pkgs.python2Packages.app-model`,
  "Module to implement generic application schema",
);

/**
 * A python module for determining appropriate platform-specific dirs
 */
export const appdirs = mkPackage(
  nixRaw`pkgs.python2Packages.appdirs`,
  "A python module for determining appropriate platform-specific dirs",
);

/**
 * Python library for Apple WeatherKit
 */
export const apple_weatherkit = mkPackage(
  nixRaw`pkgs.python2Packages.apple-weatherkit`,
  "Python library for Apple WeatherKit",
);

/**
 * This project extends the Application Insights API surface to support Python
 */
export const applicationinsights = mkPackage(
  nixRaw`pkgs.python2Packages.applicationinsights`,
  "This project extends the Application Insights API surface to support Python",
);

/**
 * Disable App Nap on macOS
 */
export const appnope = mkPackage(
  nixRaw`pkgs.python2Packages.appnope`,
  "Disable App Nap on macOS",
);

/**
 * Push Notifications that work with just about every platform
 */
export const apprise = mkPackage(
  nixRaw`pkgs.python2Packages.apprise`,
  "Push Notifications that work with just about every platform",
);

/**
 * Utilities for your production code that work well with approvaltests
 */
export const approval_utilities = mkPackage(
  nixRaw`pkgs.python2Packages.approval-utilities`,
  "Utilities for your production code that work well with approvaltests",
);

/**
 * Assertion/verification library to aid testing
 */
export const approvaltests = mkPackage(
  nixRaw`pkgs.python2Packages.approvaltests`,
  "Assertion/verification library to aid testing",
);

/**
 * Vulnerability database and package search for sources such as OSV, NVD, GitHub and npm
 */
export const appthreat_vulnerability_db = mkPackage(
  nixRaw`pkgs.python2Packages.appthreat-vulnerability-db`,
  "Vulnerability database and package search for sources such as OSV, NVD, GitHub and npm",
);

/**
 * Set of packages that Enthought has found useful in creating a number of applications
 */
export const apptools = mkPackage(
  nixRaw`pkgs.python2Packages.apptools`,
  "Set of packages that Enthought has found useful in creating a number of applications",
);

/**
 * Module for accessing APRS-IS and parsing APRS packets
 */
export const aprslib = mkPackage(
  nixRaw`pkgs.python2Packages.aprslib`,
  "Module for accessing APRS-IS and parsing APRS packets",
);

/**
 * Library that lets you schedule your Python code to be executed
 */
export const apscheduler = mkPackage(
  nixRaw`pkgs.python2Packages.apscheduler`,
  "Library that lets you schedule your Python code to be executed",
);

/**
 * A Python wrapper for the SQLite embedded relational database engine
 */
export const apsw = mkPackage(
  nixRaw`pkgs.python2Packages.apsw`,
  "A Python wrapper for the SQLite embedded relational database engine",
);

/**
 * Open Source tools for Gowin FPGAs
 */
export const apycula = mkPackage(
  nixRaw`pkgs.python2Packages.apycula`,
  "Open Source tools for Gowin FPGAs",
);

/**
 * Library for AQI calculation
 */
export const aqipy_atmotech = mkPackage(
  nixRaw`pkgs.python2Packages.aqipy-atmotech`,
  "Library for AQI calculation",
);

/**
 * Python library to interface with Hayward/Goldline AquaLogic/ProLogic pool controllers
 */
export const aqualogic = mkPackage(
  nixRaw`pkgs.python2Packages.aqualogic`,
  "Python library to interface with Hayward/Goldline AquaLogic/ProLogic pool controllers",
);

/**
 * Reconstruct Arabic sentences to be used in applications that don't support Arabic
 */
export const arabic_reshaper = mkPackage(
  nixRaw`pkgs.python2Packages.arabic-reshaper`,
  "Reconstruct Arabic sentences to be used in applications that don't support Arabic",
);

/**
 * Module to interact with Aranet4 devices
 */
export const aranet4 = mkPackage(
  nixRaw`pkgs.python2Packages.aranet4`,
  "Module to interact with Aranet4 devices",
);

/**
 * ARCFOUR (RC4) cipher implementation
 */
export const arc4 = mkPackage(
  nixRaw`pkgs.python2Packages.arc4`,
  "ARCFOUR (RC4) cipher implementation",
);

/**
 * Python library for speaking to Arcam receivers
 */
export const arcam_fmj = mkPackage(
  nixRaw`pkgs.python2Packages.arcam-fmj`,
  "Python library for speaking to Arcam receivers",
);

/**
 * Classes with architecture-specific information
 */
export const archinfo = mkPackage(
  nixRaw`pkgs.python2Packages.archinfo`,
  "Classes with architecture-specific information",
);

/**
 * Library for detecting, labeling, and reasoning about microarchitectures
 */
export const archspec = mkPackage(
  nixRaw`pkgs.python2Packages.archspec`,
  "Library for detecting, labeling, and reasoning about microarchitectures",
);

/**
 * Calculate the area inside of any GeoJSON geometry. This is a port of Mapbox’s geojson-area for Python.
 */
export const area = mkPackage(
  nixRaw`pkgs.python2Packages.area`,
  "Calculate the area inside of any GeoJSON geometry. This is a port of Mapbox’s geojson-area for Python.",
);

        /**
         * An open source facility for XBRL, the eXtensible Business Reporting
Language supporting various standards, exposed through a Python or
REST API and a graphical user interface
         */
export const arelle = mkPackage(
  nixRaw`pkgs.python2Packages.arelle`,
  "An open source facility for XBRL, the eXtensible Business Reporting\nLanguage supporting various standards, exposed through a Python or\nREST API and a graphical user interface",
);

        /**
         * An open source facility for XBRL, the eXtensible Business Reporting
Language supporting various standards, exposed through a Python or
REST API
         */
export const arelle_headless = mkPackage(
  nixRaw`pkgs.python2Packages.arelle-headless`,
  "An open source facility for XBRL, the eXtensible Business Reporting\nLanguage supporting various standards, exposed through a Python or\nREST API",
);

/**
 * Asyncio testing server
 */
export const aresponses = mkPackage(
  nixRaw`pkgs.python2Packages.aresponses`,
  "Asyncio testing server",
);

/**
 * Bash tab completion for argparse
 */
export const argcomplete = mkPackage(
  nixRaw`pkgs.python2Packages.argcomplete`,
  "Bash tab completion for argparse",
);

/**
 * An unobtrusive argparse wrapper with natural syntax
 */
export const argh = mkPackage(
  nixRaw`pkgs.python2Packages.argh`,
  "An unobtrusive argparse wrapper with natural syntax",
);

/**
 * Argilla: the open-source data curation platform for LLMs
 */
export const argilla = mkPackage(
  nixRaw`pkgs.python2Packages.argilla`,
  "Argilla: the open-source data curation platform for LLMs",
);

/**
 * Secure Password Hashes for Python
 */
export const argon2_cffi = mkPackage(
  nixRaw`pkgs.python2Packages.argon2-cffi`,
  "Secure Password Hashes for Python",
);

/**
 * Low-level CFFI bindings for Argon2
 */
export const argon2_cffi_bindings = mkPackage(
  nixRaw`pkgs.python2Packages.argon2-cffi-bindings`,
  "Low-level CFFI bindings for Argon2",
);

/**
 * Translate files using Argos Translate
 */
export const argos_translate_files = mkPackage(
  nixRaw`pkgs.python2Packages.argos-translate-files`,
  "Translate files using Argos Translate",
);

/**
 * Open-source offline translation library written in Python
 */
export const argostranslate = mkPackage(
  nixRaw`pkgs.python2Packages.argostranslate`,
  "Open-source offline translation library written in Python",
);

/**
 * Additional Python argparse types and actions
 */
export const argparse_addons = mkPackage(
  nixRaw`pkgs.python2Packages.argparse-addons`,
  "Additional Python argparse types and actions",
);

/**
 * Declarative CLIs with argparse and dataclasses
 */
export const argparse_dataclass = mkPackage(
  nixRaw`pkgs.python2Packages.argparse-dataclass`,
  "Declarative CLIs with argparse and dataclasses",
);

/**
 * Command Arguments for Humans
 */
export const args = mkPackage(
  nixRaw`pkgs.python2Packages.args`,
  "Command Arguments for Humans",
);

/**
 * Command-line tool and library to interact with an aria2c daemon process with JSON-RPC
 */
export const aria2p = mkPackage(
  nixRaw`pkgs.python2Packages.aria2p`,
  "Command-line tool and library to interact with an aria2c daemon process with JSON-RPC",
);

/**
 * Python library for implementing GraphQL servers using schema-first approach
 */
export const ariadne = mkPackage(
  nixRaw`pkgs.python2Packages.ariadne`,
  "Python library for implementing GraphQL servers using schema-first approach",
);

/**
 * Parse ARNs using Python
 */
export const arnparse = mkPackage(
  nixRaw`pkgs.python2Packages.arnparse`,
  "Parse ARNs using Python",
);

/**
 * Recursive descent parser with memoization based on PEG grammars (aka Packrat parser)
 */
export const arpeggio = mkPackage(
  nixRaw`pkgs.python2Packages.arpeggio`,
  "Recursive descent parser with memoization based on PEG grammars (aka Packrat parser)",
);

/**
 * A library for accessing the archive files and reading the contents
 */
export const arpy = mkPackage(
  nixRaw`pkgs.python2Packages.arpy`,
  "A library for accessing the archive files and reading the contents",
);

/**
 * ArrayRecord is a new file format derived from Riegeli, achieving a new frontier of IO efficiency
 */
export const array_record = mkPackage(
  nixRaw`pkgs.python2Packages.array-record`,
  "ArrayRecord is a new file format derived from Riegeli, achieving a new frontier of IO efficiency",
);

/**
 * Multiprocessing queues for numpy arrays using shared memory
 */
export const arrayqueues = mkPackage(
  nixRaw`pkgs.python2Packages.arrayqueues`,
  "Multiprocessing queues for numpy arrays using shared memory",
);

/**
 * Library to connect to an Arris TG2492LG
 */
export const arris_tg2492lg = mkPackage(
  nixRaw`pkgs.python2Packages.arris-tg2492lg`,
  "Library to connect to an Arris TG2492LG",
);

/**
 * Python library for date manipulation
 */
export const arrow = mkPackage(
  nixRaw`pkgs.python2Packages.arrow`,
  "Python library for date manipulation",
);

/**
 * WebDriver implementation for asyncio and asyncio-compatible frameworks
 */
export const arsenic = mkPackage(
  nixRaw`pkgs.python2Packages.arsenic`,
  "WebDriver implementation for asyncio and asyncio-compatible frameworks",
);

/**
 * ASCII art library for Python
 */
export const art = mkPackage(
  nixRaw`pkgs.python2Packages.art`,
  "ASCII art library for Python",
);

/**
 * Library for exploratory analysis of Bayesian models
 */
export const arviz = mkPackage(
  nixRaw`pkgs.python2Packages.arviz`,
  "Library for exploratory analysis of Bayesian models",
);

/**
 * Get a BibTeX entry from an arXiv id number, using the arxiv.org API
 */
export const arxiv2bib = mkPackage(
  nixRaw`pkgs.python2Packages.arxiv2bib`,
  "Get a BibTeX entry from an arXiv id number, using the arxiv.org API",
);

/**
 * Python client library for Asana
 */
export const asana = mkPackage(
  nixRaw`pkgs.python2Packages.asana`,
  "Python client library for Asana",
);

/**
 * Python module to converts pictures into ASCII art
 */
export const ascii_magic = mkPackage(
  nixRaw`pkgs.python2Packages.ascii-magic`,
  "Python module to converts pictures into ASCII art",
);

/**
 * Helps to create full-screen text UIs (from interactive forms to ASCII animations) on any platform
 */
export const asciimatics = mkPackage(
  nixRaw`pkgs.python2Packages.asciimatics`,
  "Helps to create full-screen text UIs (from interactive forms to ASCII animations) on any platform",
);

/**
 * Draws ASCII trees
 */
export const asciitree = mkPackage(
  nixRaw`pkgs.python2Packages.asciitree`,
  "Draws ASCII trees",
);

/**
 * Standards document describing ASDF
 */
export const asdf_standard = mkPackage(
  nixRaw`pkgs.python2Packages.asdf-standard`,
  "Standards document describing ASDF",
);

/**
 * ASDF schemas for validating transform tags
 */
export const asdf_transform_schemas = mkPackage(
  nixRaw`pkgs.python2Packages.asdf-transform-schemas`,
  "ASDF schemas for validating transform tags",
);

/**
 * Atomic Simulation Environment
 */
export const ase = mkPackage(
  nixRaw`pkgs.python2Packages.ase`,
  "Atomic Simulation Environment",
);

/**
 * Python wrapper for the ASF SearchAPI
 */
export const asf_search = mkPackage(
  nixRaw`pkgs.python2Packages.asf-search`,
  "Python wrapper for the ASF SearchAPI",
);

/**
 * ASGI middleware for protecting against CSRF attacks
 */
export const asgi_csrf = mkPackage(
  nixRaw`pkgs.python2Packages.asgi-csrf`,
  "ASGI middleware for protecting against CSRF attacks",
);

/**
 * A really thin ASGI web framework
 */
export const asgineer = mkPackage(
  nixRaw`pkgs.python2Packages.asgineer`,
  "A really thin ASGI web framework",
);

/**
 * Reference ASGI adapters and channel layers
 */
export const asgiref = mkPackage(
  nixRaw`pkgs.python2Packages.asgiref`,
  "Reference ASGI adapters and channel layers",
);

/**
 * Async requests-like HTTP library for Python
 */
export const asks = mkPackage(
  nixRaw`pkgs.python2Packages.asks`,
  "Async requests-like HTTP library for Python",
);

/**
 * Python module for Ampio Smog Sensors
 */
export const asmog = mkPackage(
  nixRaw`pkgs.python2Packages.asmog`,
  "Python module for Ampio Smog Sensors",
);

/**
 * Python ASN.1 encoder and decoder
 */
export const asn1 = mkPackage(
  nixRaw`pkgs.python2Packages.asn1`,
  "Python ASN.1 encoder and decoder",
);

/**
 * Python library for translating ASN.1 into other forms
 */
export const asn1ate = mkPackage(
  nixRaw`pkgs.python2Packages.asn1ate`,
  "Python library for translating ASN.1 into other forms",
);

/**
 * Fast ASN.1 parser and serializer with definitions for private keys, public keys, certificates, CRL, OCSP, CMS, PKCS#3, PKCS#7, PKCS#8, PKCS#12, PKCS#5, X.509 and TSP
 */
export const asn1crypto = mkPackage(
  nixRaw`pkgs.python2Packages.asn1crypto`,
  "Fast ASN.1 parser and serializer with definitions for private keys, public keys, certificates, CRL, OCSP, CMS, PKCS#3, PKCS#7, PKCS#8, PKCS#12, PKCS#5, X.509 and TSP",
);

/**
 * ASN.1 parsing, encoding and decoding
 */
export const asn1tools = mkPackage(
  nixRaw`pkgs.python2Packages.asn1tools`,
  "ASN.1 parsing, encoding and decoding",
);

/**
 * Aspect-oriented programming, monkey-patch and decorators library
 */
export const aspectlib = mkPackage(
  nixRaw`pkgs.python2Packages.aspectlib`,
  "Aspect-oriented programming, monkey-patch and decorators library",
);

/**
 * Python wrapper for aspell (C extension and Python version)
 */
export const aspell_python = mkPackage(
  nixRaw`pkgs.python2Packages.aspell-python`,
  "Python wrapper for aspell (C extension and Python version)",
);

/**
 * Utilities for refactoring imports in python-like syntax.
 */
export const aspy_refactor_imports = mkPackage(
  nixRaw`pkgs.python2Packages.aspy-refactor-imports`,
  "Utilities for refactoring imports in python-like syntax.",
);

/**
 * A few extensions to pyyaml
 */
export const aspy_yaml = mkPackage(
  nixRaw`pkgs.python2Packages.aspy-yaml`,
  "A few extensions to pyyaml",
);

/**
 * Attempt to write a Python testing framework I can actually stand
 */
export const assay = mkPackage(
  nixRaw`pkgs.python2Packages.assay`,
  "Attempt to write a Python testing framework I can actually stand",
);

/**
 * Simple assertion library for unit testing with a fluent API
 */
export const assertpy = mkPackage(
  nixRaw`pkgs.python2Packages.assertpy`,
  "Simple assertion library for unit testing with a fluent API",
);

/**
 * The client side of a client/server to interact with Asterisk voicemail mailboxes
 */
export const asterisk_mbox = mkPackage(
  nixRaw`pkgs.python2Packages.asterisk-mbox`,
  "The client side of a client/server to interact with Asterisk voicemail mailboxes",
);

/**
 * AST evaluator of Python expression using ast module
 */
export const asteval = mkPackage(
  nixRaw`pkgs.python2Packages.asteval`,
  "AST evaluator of Python expression using ast module",
);

/**
 * Library for reading, writing and rewriting python AST
 */
export const astor = mkPackage(
  nixRaw`pkgs.python2Packages.astor`,
  "Library for reading, writing and rewriting python AST",
);

/**
 * Calculations for the position of the sun and the moon
 */
export const astral = mkPackage(
  nixRaw`pkgs.python2Packages.astral`,
  "Calculations for the position of the sun and the moon",
);

/**
 * An abstract syntax tree for Python with inference support
 */
export const astroid = mkPackage(
  nixRaw`pkgs.python2Packages.astroid`,
  "An abstract syntax tree for Python with inference support",
);

/**
 * Astronomy/Astrophysics library for Python
 */
export const astropy = mkPackage(
  nixRaw`pkgs.python2Packages.astropy`,
  "Astronomy/Astrophysics library for Python",
);

/**
 * Utilities for building and installing packages in the Astropy ecosystem
 */
export const astropy_extension_helpers = mkPackage(
  nixRaw`pkgs.python2Packages.astropy-extension-helpers`,
  "Utilities for building and installing packages in the Astropy ecosystem",
);

/**
 * BSD-licensed HEALPix for Astropy
 */
export const astropy_healpix = mkPackage(
  nixRaw`pkgs.python2Packages.astropy-healpix`,
  "BSD-licensed HEALPix for Astropy",
);

/**
 * Utilities for building and installing Astropy, Astropy affiliated packages, and their respective documentation
 */
export const astropy_helpers = mkPackage(
  nixRaw`pkgs.python2Packages.astropy-helpers`,
  "Utilities for building and installing Astropy, Astropy affiliated packages, and their respective documentation",
);

/**
 * Functions and classes to access online data resources
 */
export const astroquery = mkPackage(
  nixRaw`pkgs.python2Packages.astroquery`,
  "Functions and classes to access online data resources",
);

/**
 * Annotate Python AST trees with source text and token information
 */
export const asttokens = mkPackage(
  nixRaw`pkgs.python2Packages.asttokens`,
  "Annotate Python AST trees with source text and token information",
);

/**
 * This is a factored out version of unparse found in the Python source distribution
 */
export const astunparse = mkPackage(
  nixRaw`pkgs.python2Packages.astunparse`,
  "This is a factored out version of unparse found in the Python source distribution",
);

/**
 * Unified authentication library
 */
export const asyauth = mkPackage(
  nixRaw`pkgs.python2Packages.asyauth`,
  "Unified authentication library",
);

/**
 * Python DNS library
 */
export const async_dns = mkPackage(
  nixRaw`pkgs.python2Packages.async-dns`,
  "Python DNS library",
);

/**
 * Async generators and context managers for Python 3.5+
 */
export const async_generator = mkPackage(
  nixRaw`pkgs.python2Packages.async-generator`,
  "Async generators and context managers for Python 3.5+",
);

/**
 * Context manager to raise an exception when a future is done
 */
export const async_interrupt = mkPackage(
  nixRaw`pkgs.python2Packages.async-interrupt`,
  "Context manager to raise an exception when a future is done",
);

/**
 * Simple lru cache for asyncio
 */
export const async_lru = mkPackage(
  nixRaw`pkgs.python2Packages.async-lru`,
  "Simple lru cache for asyncio",
);

/**
 * Library for Modbus communication
 */
export const async_modbus = mkPackage(
  nixRaw`pkgs.python2Packages.async-modbus`,
  "Library for Modbus communication",
);

/**
 * Happy Eyeballs connection algorithm and underlying scheduling logic in asyncio
 */
export const async_stagger = mkPackage(
  nixRaw`pkgs.python2Packages.async-stagger`,
  "Happy Eyeballs connection algorithm and underlying scheduling logic in asyncio",
);

/**
 * Timeout context manager for asyncio programs
 */
export const async_timeout = mkPackage(
  nixRaw`pkgs.python2Packages.async-timeout`,
  "Timeout context manager for asyncio programs",
);

/**
 * Implementation of asynchronous mainloop for tkinter, the use of which allows using async handler functions
 */
export const async_tkinter_loop = mkPackage(
  nixRaw`pkgs.python2Packages.async-tkinter-loop`,
  "Implementation of asynchronous mainloop for tkinter, the use of which allows using async handler functions",
);

/**
 * Asyncio UPnP Client library for Python
 */
export const async_upnp_client = mkPackage(
  nixRaw`pkgs.python2Packages.async-upnp-client`,
  "Asyncio UPnP Client library for Python",
);

/**
 * Python composable command line utility
 */
export const asyncclick = mkPackage(
  nixRaw`pkgs.python2Packages.asyncclick`,
  "Python composable command line utility",
);

/**
 * Asyncio implementation of Cmd Python library
 */
export const asynccmd = mkPackage(
  nixRaw`pkgs.python2Packages.asynccmd`,
  "Asyncio implementation of Cmd Python library",
);

/**
 * A simple optionally-async python inotify library, focused on simplicity of use and operation, and leveraging modern Python features
 */
export const asyncinotify = mkPackage(
  nixRaw`pkgs.python2Packages.asyncinotify`,
  "A simple optionally-async python inotify library, focused on simplicity of use and operation, and leveraging modern Python features",
);

/**
 * Python support for higher level Datagram
 */
export const asyncio_dgram = mkPackage(
  nixRaw`pkgs.python2Packages.asyncio-dgram`,
  "Python support for higher level Datagram",
);

/**
 * Idomatic asyncio wrapper around paho-mqtt
 */
export const asyncio_mqtt = mkPackage(
  nixRaw`pkgs.python2Packages.asyncio-mqtt`,
  "Idomatic asyncio wrapper around paho-mqtt",
);

/**
 * Rlock like in threading module but for asyncio
 */
export const asyncio_rlock = mkPackage(
  nixRaw`pkgs.python2Packages.asyncio-rlock`,
  "Rlock like in threading module but for asyncio",
);

/**
 * Simple, easy-to-use throttler for asyncio
 */
export const asyncio_throttle = mkPackage(
  nixRaw`pkgs.python2Packages.asyncio-throttle`,
  "Simple, easy-to-use throttler for asyncio",
);

/**
 * Python module to interact with MySQL/mariaDB
 */
export const asyncmy = mkPackage(
  nixRaw`pkgs.python2Packages.asyncmy`,
  "Python module to interact with MySQL/mariaDB",
);

/**
 * Asyncio PosgtreSQL driver
 */
export const asyncpg = mkPackage(
  nixRaw`pkgs.python2Packages.asyncpg`,
  "Asyncio PosgtreSQL driver",
);

/**
 * asyncio support for pyserial
 */
export const asyncserial = mkPackage(
  nixRaw`pkgs.python2Packages.asyncserial`,
  "asyncio support for pyserial",
);

/**
 * Async interface to SleepIQ API
 */
export const asyncsleepiq = mkPackage(
  nixRaw`pkgs.python2Packages.asyncsleepiq`,
  "Async interface to SleepIQ API",
);

/**
 * Asynchronous SSHv2 Python client and server library
 */
export const asyncssh = mkPackage(
  nixRaw`pkgs.python2Packages.asyncssh`,
  "Asynchronous SSHv2 Python client and server library",
);

/**
 * Python library that extends the Python asyncio standard library
 */
export const asyncstdlib = mkPackage(
  nixRaw`pkgs.python2Packages.asyncstdlib`,
  "Python library that extends the Python asyncio standard library",
);

/**
 * Enhance the standard unittest package with features for testing asyncio libraries
 */
export const asynctest = mkPackage(
  nixRaw`pkgs.python2Packages.asynctest`,
  "Enhance the standard unittest package with features for testing asyncio libraries",
);

/**
 * OPC UA / IEC 62541 Client and Server for Python
 */
export const asyncua = mkPackage(
  nixRaw`pkgs.python2Packages.asyncua`,
  "OPC UA / IEC 62541 Client and Server for Python",
);

/**
 * Python module for retrieving WHOIS information
 */
export const asyncwhois = mkPackage(
  nixRaw`pkgs.python2Packages.asyncwhois`,
  "Python module for retrieving WHOIS information",
);

/**
 * Python Socks4/5 client and server library
 */
export const asysocks = mkPackage(
  nixRaw`pkgs.python2Packages.asysocks`,
  "Python Socks4/5 client and server library",
);

/**
 * Library for ATC devices with custom firmware
 */
export const atc_ble = mkPackage(
  nixRaw`pkgs.python2Packages.atc-ble`,
  "Library for ATC devices with custom firmware",
);

/**
 * Python interface to control ATEN PE PDUs
 */
export const atenpdu = mkPackage(
  nixRaw`pkgs.python2Packages.atenpdu`,
  "Python interface to control ATEN PE PDUs",
);

/**
 * Python Atlassian REST API Wrapper
 */
export const atlassian_python_api = mkPackage(
  nixRaw`pkgs.python2Packages.atlassian-python-api`,
  "Python Atlassian REST API Wrapper",
);

/**
 * Memory efficient Python objects
 */
export const atom = mkPackage(
  nixRaw`pkgs.python2Packages.atom`,
  "Memory efficient Python objects",
);

/**
 * Long data type with atomic operations using CFFI
 */
export const atomiclong = mkPackage(
  nixRaw`pkgs.python2Packages.atomiclong`,
  "Long data type with atomic operations using CFFI",
);

/**
 * Atomic file writes on POSIX
 */
export const atomicwrites = mkPackage(
  nixRaw`pkgs.python2Packages.atomicwrites`,
  "Atomic file writes on POSIX",
);

/**
 * Atomic file writes
 */
export const atomicwrites_homeassistant = mkPackage(
  nixRaw`pkgs.python2Packages.atomicwrites-homeassistant`,
  "Atomic file writes",
);

/**
 * Atomistic Manipulation Toolkit
 */
export const atomman = mkPackage(
  nixRaw`pkgs.python2Packages.atomman`,
  "Atomistic Manipulation Toolkit",
);

/**
 * Python decorator and function which populates a module's __all__ and globals
 */
export const atpublic = mkPackage(
  nixRaw`pkgs.python2Packages.atpublic`,
  "Python decorator and function which populates a module's __all__ and globals",
);

/**
 * Provides tools for working with pair and embedded atom method potential models including tabulation routines for DL_POLY and LAMMPS
 */
export const atsim_potentials = mkPackage(
  nixRaw`pkgs.python2Packages.atsim-potentials`,
  "Provides tools for working with pair and embedded atom method potential models including tabulation routines for DL_POLY and LAMMPS",
);

/**
 * A dict with attribute-style access
 */
export const attrdict = mkPackage(
  nixRaw`pkgs.python2Packages.attrdict`,
  "A dict with attribute-style access",
);

/**
 * Python attributes without boilerplate
 */
export const attrs = mkPackage(
  nixRaw`pkgs.python2Packages.attrs`,
  "Python attributes without boilerplate",
);

/**
 * a library for audio and music analysis
 */
export const aubio = mkPackage(
  nixRaw`pkgs.python2Packages.aubio`,
  "a library for audio and music analysis",
);

/**
 * A(Sync) Interface for internal Audible API written in pure Python
 */
export const audible = mkPackage(
  nixRaw`pkgs.python2Packages.audible`,
  "A(Sync) Interface for internal Audible API written in pure Python",
);

/**
 * A library for reading and, in the future, writing metadata from audio files
 */
export const audio_metadata = mkPackage(
  nixRaw`pkgs.python2Packages.audio-metadata`,
  "A library for reading and, in the future, writing metadata from audio files",
);

/**
 * Cross-platform audio decoding
 */
export const audioread = mkPackage(
  nixRaw`pkgs.python2Packages.audioread`,
  "Cross-platform audio decoding",
);

/**
 * Utilities and Python modules for handling audio
 */
export const audiotools = mkPackage(
  nixRaw`pkgs.python2Packages.audiotools`,
  "Utilities and Python modules for handling audio",
);

/**
 * Audio Activity Detection tool that can process online data as well as audio files
 */
export const auditok = mkPackage(
  nixRaw`pkgs.python2Packages.auditok`,
  "Audio Activity Detection tool that can process online data as well as audio files",
);

/**
 * Pure python bindings for augeas
 */
export const augeas = mkPackage(
  nixRaw`pkgs.python2Packages.augeas`,
  "Pure python bindings for augeas",
);

/**
 * Efficiently Composable Data Augmentation on the GPU with Jax
 */
export const augmax = mkPackage(
  nixRaw`pkgs.python2Packages.augmax`,
  "Efficiently Composable Data Augmentation on the GPU with Jax",
);

/**
 * Python wrapper for the Aurora API
 */
export const auroranoaa = mkPackage(
  nixRaw`pkgs.python2Packages.auroranoaa`,
  "Python wrapper for the Aurora API",
);

/**
 * Implementation of the communication protocol for Power-One Aurora inverters
 */
export const aurorapy = mkPackage(
  nixRaw`pkgs.python2Packages.aurorapy`,
  "Implementation of the communication protocol for Power-One Aurora inverters",
);

/**
 * Module for the Autarco Inverter
 */
export const autarco = mkPackage(
  nixRaw`pkgs.python2Packages.autarco`,
  "Module for the Autarco Inverter",
);

/**
 * Auth0 Python SDK
 */
export const auth0_python = mkPackage(
  nixRaw`pkgs.python2Packages.auth0-python`,
  "Auth0 Python SDK",
);

/**
 * A proxy to capture authentication information from a webpage
 */
export const authcaptureproxy = mkPackage(
  nixRaw`pkgs.python2Packages.authcaptureproxy`,
  "A proxy to capture authentication information from a webpage",
);

/**
 * Python library for the generation of email authentication headers
 */
export const authheaders = mkPackage(
  nixRaw`pkgs.python2Packages.authheaders`,
  "Python library for the generation of email authentication headers",
);

/**
 * Library for building OAuth and OpenID Connect servers
 */
export const authlib = mkPackage(
  nixRaw`pkgs.python2Packages.authlib`,
  "Library for building OAuth and OpenID Connect servers",
);

/**
 * Email Authentication-Results Headers generation and parsing for Python/Python3
 */
export const authres = mkPackage(
  nixRaw`pkgs.python2Packages.authres`,
  "Email Authentication-Results Headers generation and parsing for Python/Python3",
);

/**
 * WebSocket and WAMP in Python for Twisted and asyncio
 */
export const autobahn = mkPackage(
  nixRaw`pkgs.python2Packages.autobahn`,
  "WebSocket and WAMP in Python for Twisted and asyncio",
);

/**
 * Autocommand turns a python function into a CLI program
 */
export const autocommand = mkPackage(
  nixRaw`pkgs.python2Packages.autocommand`,
  "Autocommand turns a python function into a CLI program",
);

/**
 * Automatically create Faiss knn indices with the most optimal similarity search parameters
 */
export const autofaiss = mkPackage(
  nixRaw`pkgs.python2Packages.autofaiss`,
  "Automatically create Faiss knn indices with the most optimal similarity search parameters",
);

/**
 * Tool to remove unused imports and unused variables
 */
export const autoflake = mkPackage(
  nixRaw`pkgs.python2Packages.autoflake`,
  "Tool to remove unused imports and unused variables",
);

/**
 * Compute derivatives of NumPy code efficiently
 */
export const autograd = mkPackage(
  nixRaw`pkgs.python2Packages.autograd`,
  "Compute derivatives of NumPy code efficiently",
);

/**
 * Autograd compatible approximations to the gamma family of functions
 */
export const autograd_gamma = mkPackage(
  nixRaw`pkgs.python2Packages.autograd-gamma`,
  "Autograd compatible approximations to the gamma family of functions",
);

/**
 * Python module to extract AutoIt scripts embedded in PE binaries
 */
export const autoit_ripper = mkPackage(
  nixRaw`pkgs.python2Packages.autoit-ripper`,
  "Python module to extract AutoIt scripts embedded in PE binaries",
);

/**
 * Easier logging and tracing for Python classes
 */
export const autologging = mkPackage(
  nixRaw`pkgs.python2Packages.autologging`,
  "Easier logging and tracing for Python classes",
);

/**
 * Self-service finite-state machines for the programmer on the go
 */
export const automat = mkPackage(
  nixRaw`pkgs.python2Packages.automat`,
  "Self-service finite-state machines for the programmer on the go",
);

/**
 * Python module to automate (home) devices
 */
export const automate_home = mkPackage(
  nixRaw`pkgs.python2Packages.automate-home`,
  "Python module to automate (home) devices",
);

/**
 * Email client configuration made easy
 */
export const automx2 = mkPackage(
  nixRaw`pkgs.python2Packages.automx2`,
  "Email client configuration made easy",
);

/**
 * A library to provide automatic paging for console output
 */
export const autopage = mkPackage(
  nixRaw`pkgs.python2Packages.autopage`,
  "A library to provide automatic paging for console output",
);

/**
 * A tool that automatically formats Python code to conform to the PEP 8 style guide
 */
export const autopep8 = mkPackage(
  nixRaw`pkgs.python2Packages.autopep8`,
  "A tool that automatically formats Python code to conform to the PEP 8 style guide",
);

/**
 * Automatic __slots__ for your Python classes
 */
export const autoslot = mkPackage(
  nixRaw`pkgs.python2Packages.autoslot`,
  "Automatic __slots__ for your Python classes",
);

/**
 * Pythonic bindings for FFmpeg/Libav
 */
export const av = mkPackage(
  nixRaw`pkgs.python2Packages.av`,
  "Pythonic bindings for FFmpeg/Libav",
);

/**
 * mDNS/DNS-SD implementation
 */
export const avahi = mkPackage(
  nixRaw`pkgs.python2Packages.avahi`,
  "mDNS/DNS-SD implementation",
);

/**
 * Python module for interacting with Elgato's Avea bulb
 */
export const avea = mkPackage(
  nixRaw`pkgs.python2Packages.avea`,
  "Python module for interacting with Elgato's Avea bulb",
);

/**
 * Python API for controlling Avi-on Bluetooth dimmers
 */
export const avion = mkPackage(
  nixRaw`pkgs.python2Packages.avion`,
  "Python API for controlling Avi-on Bluetooth dimmers",
);

/**
 * Python serialization and RPC framework
 */
export const avro = mkPackage(
  nixRaw`pkgs.python2Packages.avro`,
  "Python serialization and RPC framework",
);

/**
 * A serialization and RPC framework
 */
export const avro3k = mkPackage(
  nixRaw`pkgs.python2Packages.avro3k`,
  "A serialization and RPC framework",
);

/**
 * A serialization and RPC framework
 */
export const avro_python3 = mkPackage(
  nixRaw`pkgs.python2Packages.avro-python3`,
  "A serialization and RPC framework",
);

/**
 * Client library for ActivityWatch
 */
export const aw_client = mkPackage(
  nixRaw`pkgs.python2Packages.aw-client`,
  "Client library for ActivityWatch",
);

/**
 * Core library for ActivityWatch
 */
export const aw_core = mkPackage(
  nixRaw`pkgs.python2Packages.aw-core`,
  "Core library for ActivityWatch",
);

/**
 * AWS Access Policy Language creation library
 */
export const awacs = mkPackage(
  nixRaw`pkgs.python2Packages.awacs`,
  "AWS Access Policy Language creation library",
);

/**
 * Python flexible slugify function
 */
export const awesome_slugify = mkPackage(
  nixRaw`pkgs.python2Packages.awesome-slugify`,
  "Python flexible slugify function",
);

/**
 * Python module to deal with versions
 */
export const awesomeversion = mkPackage(
  nixRaw`pkgs.python2Packages.awesomeversion`,
  "Python module to deal with versions",
);

/**
 * Manipulate JSON-like data with NumPy-like idioms
 */
export const awkward = mkPackage(
  nixRaw`pkgs.python2Packages.awkward`,
  "Manipulate JSON-like data with NumPy-like idioms",
);

/**
 * CPU kernels and compiled extensions for Awkward Array
 */
export const awkward_cpp = mkPackage(
  nixRaw`pkgs.python2Packages.awkward-cpp`,
  "CPU kernels and compiled extensions for Awkward Array",
);

/**
 * Command line tool to ease AWS CLI authentication against ADFS
 */
export const aws_adfs = mkPackage(
  nixRaw`pkgs.python2Packages.aws-adfs`,
  "Command line tool to ease AWS CLI authentication against ADFS",
);

/**
 * Fully compliant, native Python implementation of the AWS Encryption SDK.
 */
export const aws_encryption_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.aws-encryption-sdk`,
  "Fully compliant, native Python implementation of the AWS Encryption SDK.",
);

/**
 * Tool to compile, build and package AWS Lambda functions
 */
export const aws_lambda_builders = mkPackage(
  nixRaw`pkgs.python2Packages.aws-lambda-builders`,
  "Tool to compile, build and package AWS Lambda functions",
);

/**
 * Python library to transform SAM templates into AWS CloudFormation templates
 */
export const aws_sam_translator = mkPackage(
  nixRaw`pkgs.python2Packages.aws-sam-translator`,
  "Python library to transform SAM templates into AWS CloudFormation templates",
);

/**
 * Client-side AWS secrets manager caching library
 */
export const aws_secretsmanager_caching = mkPackage(
  nixRaw`pkgs.python2Packages.aws-secretsmanager-caching`,
  "Client-side AWS secrets manager caching library",
);

/**
 * AWS X-Ray SDK for the Python programming language
 */
export const aws_xray_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.aws-xray-sdk`,
  "AWS X-Ray SDK for the Python programming language",
);

/**
 * Python bindings for the AWS Common Runtime
 */
export const awscrt = mkPackage(
  nixRaw`pkgs.python2Packages.awscrt`,
  "Python bindings for the AWS Common Runtime",
);

/**
 * Python SDK for connecting to AWS IoT
 */
export const awsiotpythonsdk = mkPackage(
  nixRaw`pkgs.python2Packages.awsiotpythonsdk`,
  "Python SDK for connecting to AWS IoT",
);

/**
 * AWS Lambda Runtime Interface Client for Python
 */
export const awslambdaric = mkPackage(
  nixRaw`pkgs.python2Packages.awslambdaric`,
  "AWS Lambda Runtime Interface Client for Python",
);

/**
 * Pandas on AWS
 */
export const awswrangler = mkPackage(
  nixRaw`pkgs.python2Packages.awswrangler`,
  "Pandas on AWS",
);

/**
 * Ax is an accessible, general-purpose platform for understanding, managing, deploying, and automating adaptive experiments
 */
export const ax = mkPackage(
  nixRaw`pkgs.python2Packages.ax`,
  "Ax is an accessible, general-purpose platform for understanding, managing, deploying, and automating adaptive experiments",
);

/**
 * Python library for communicating with devices from Axis Communications
 */
export const axis = mkPackage(
  nixRaw`pkgs.python2Packages.axis`,
  "Python library for communicating with devices from Axis Communications",
);

/**
 * Microsoft App Configuration Data Library for Python
 */
export const azure_appconfiguration = mkPackage(
  nixRaw`pkgs.python2Packages.azure-appconfiguration`,
  "Microsoft App Configuration Data Library for Python",
);

/**
 * This is the Microsoft Azure Application Insights Client Library
 */
export const azure_applicationinsights = mkPackage(
  nixRaw`pkgs.python2Packages.azure-applicationinsights`,
  "This is the Microsoft Azure Application Insights Client Library",
);

/**
 * This is the Microsoft Azure Batch Client Library
 */
export const azure_batch = mkPackage(
  nixRaw`pkgs.python2Packages.azure-batch`,
  "This is the Microsoft Azure Batch Client Library",
);

/**
 * This is the Microsoft Azure common code
 */
export const azure_common = mkPackage(
  nixRaw`pkgs.python2Packages.azure-common`,
  "This is the Microsoft Azure common code",
);

/**
 * Microsoft Azure Container Registry client library for Python
 */
export const azure_containerregistry = mkPackage(
  nixRaw`pkgs.python2Packages.azure-containerregistry`,
  "Microsoft Azure Container Registry client library for Python",
);

/**
 * Microsoft Azure Core Library for Python
 */
export const azure_core = mkPackage(
  nixRaw`pkgs.python2Packages.azure-core`,
  "Microsoft Azure Core Library for Python",
);

/**
 * Azure Cosmos DB API
 */
export const azure_cosmos = mkPackage(
  nixRaw`pkgs.python2Packages.azure-cosmos`,
  "Azure Cosmos DB API",
);

/**
 * This is the Microsoft Azure CosmosDB namespace package
 */
export const azure_cosmosdb_nspkg = mkPackage(
  nixRaw`pkgs.python2Packages.azure-cosmosdb-nspkg`,
  "This is the Microsoft Azure CosmosDB namespace package",
);

/**
 * This is the Microsoft Azure Log Analytics Client Library
 */
export const azure_cosmosdb_table = mkPackage(
  nixRaw`pkgs.python2Packages.azure-cosmosdb-table`,
  "This is the Microsoft Azure Log Analytics Client Library",
);

/**
 * NoSQL data storage service that can be accessed from anywhere
 */
export const azure_data_tables = mkPackage(
  nixRaw`pkgs.python2Packages.azure-data-tables`,
  "NoSQL data storage service that can be accessed from anywhere",
);

/**
 * This project is the Python filesystem library for Azure Data Lake Store
 */
export const azure_datalake_store = mkPackage(
  nixRaw`pkgs.python2Packages.azure-datalake-store`,
  "This project is the Python filesystem library for Azure Data Lake Store",
);

/**
 * A fully-managed intelligent event routing service that allows for uniform event consumption using a publish-subscribe model
 */
export const azure_eventgrid = mkPackage(
  nixRaw`pkgs.python2Packages.azure-eventgrid`,
  "A fully-managed intelligent event routing service that allows for uniform event consumption using a publish-subscribe model",
);

/**
 * Microsoft Azure Event Hubs Client Library for Python
 */
export const azure_eventhub = mkPackage(
  nixRaw`pkgs.python2Packages.azure-eventhub`,
  "Microsoft Azure Event Hubs Client Library for Python",
);

/**
 * Integrate Azure Functions with Azure DevOps. Specifically made for the Azure CLI
 */
export const azure_functions_devops_build = mkPackage(
  nixRaw`pkgs.python2Packages.azure-functions-devops-build`,
  "Integrate Azure Functions with Azure DevOps. Specifically made for the Azure CLI",
);

/**
 * This is the Microsoft Azure Graph RBAC Client Library
 */
export const azure_graphrbac = mkPackage(
  nixRaw`pkgs.python2Packages.azure-graphrbac`,
  "This is the Microsoft Azure Graph RBAC Client Library",
);

/**
 * Microsoft Azure Identity Library for Python
 */
export const azure_identity = mkPackage(
  nixRaw`pkgs.python2Packages.azure-identity`,
  "Microsoft Azure Identity Library for Python",
);

/**
 * This is the Microsoft Azure Key Vault Client Library
 */
export const azure_keyvault = mkPackage(
  nixRaw`pkgs.python2Packages.azure-keyvault`,
  "This is the Microsoft Azure Key Vault Client Library",
);

/**
 * Microsoft Azure Key Vault Administration Client Library for Python
 */
export const azure_keyvault_administration = mkPackage(
  nixRaw`pkgs.python2Packages.azure-keyvault-administration`,
  "Microsoft Azure Key Vault Administration Client Library for Python",
);

/**
 * Microsoft Azure Key Vault Certificates Client Library for Python
 */
export const azure_keyvault_certificates = mkPackage(
  nixRaw`pkgs.python2Packages.azure-keyvault-certificates`,
  "Microsoft Azure Key Vault Certificates Client Library for Python",
);

/**
 * Microsoft Azure Key Vault Keys Client Library for Python
 */
export const azure_keyvault_keys = mkPackage(
  nixRaw`pkgs.python2Packages.azure-keyvault-keys`,
  "Microsoft Azure Key Vault Keys Client Library for Python",
);

/**
 * Microsoft Azure Key Vault Namespace Package [Internal]
 */
export const azure_keyvault_nspkg = mkPackage(
  nixRaw`pkgs.python2Packages.azure-keyvault-nspkg`,
  "Microsoft Azure Key Vault Namespace Package [Internal]",
);

/**
 * Microsoft Azure Key Vault Secrets Client Library for Python
 */
export const azure_keyvault_secrets = mkPackage(
  nixRaw`pkgs.python2Packages.azure-keyvault-secrets`,
  "Microsoft Azure Key Vault Secrets Client Library for Python",
);

/**
 * This is the Microsoft Azure Log Analytics Client Library
 */
export const azure_loganalytics = mkPackage(
  nixRaw`pkgs.python2Packages.azure-loganalytics`,
  "This is the Microsoft Azure Log Analytics Client Library",
);

/**
 * This is the Microsoft Azure Advisor Client Library
 */
export const azure_mgmt_advisor = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-advisor`,
  "This is the Microsoft Azure Advisor Client Library",
);

/**
 * Microsoft Azure API Management Client Library for Python
 */
export const azure_mgmt_apimanagement = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-apimanagement`,
  "Microsoft Azure API Management Client Library for Python",
);

/**
 * Microsoft Azure App Configuration Management Client Library for Python
 */
export const azure_mgmt_appconfiguration = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-appconfiguration`,
  "Microsoft Azure App Configuration Management Client Library for Python",
);

/**
 * Microsoft Azure Appcontainers Management Client Library for Python
 */
export const azure_mgmt_appcontainers = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-appcontainers`,
  "Microsoft Azure Appcontainers Management Client Library for Python",
);

/**
 * This is the Microsoft Azure Application Insights Management Client Library
 */
export const azure_mgmt_applicationinsights = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-applicationinsights`,
  "This is the Microsoft Azure Application Insights Management Client Library",
);

/**
 * This is the Microsoft Azure Authorization Management Client Library
 */
export const azure_mgmt_authorization = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-authorization`,
  "This is the Microsoft Azure Authorization Management Client Library",
);

/**
 * This is the Microsoft Azure Batch Management Client Library
 */
export const azure_mgmt_batch = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-batch`,
  "This is the Microsoft Azure Batch Management Client Library",
);

/**
 * This is the Microsoft Azure Batch AI Management Client Library
 */
export const azure_mgmt_batchai = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-batchai`,
  "This is the Microsoft Azure Batch AI Management Client Library",
);

/**
 * This is the Microsoft Azure Billing Client Library
 */
export const azure_mgmt_billing = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-billing`,
  "This is the Microsoft Azure Billing Client Library",
);

/**
 * Microsoft Azure API Management Client Library for Python
 */
export const azure_mgmt_botservice = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-botservice`,
  "Microsoft Azure API Management Client Library for Python",
);

/**
 * This is the Microsoft Azure CDN Management Client Library
 */
export const azure_mgmt_cdn = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-cdn`,
  "This is the Microsoft Azure CDN Management Client Library",
);

/**
 * This is the Microsoft Azure Cognitive Services Management Client Library
 */
export const azure_mgmt_cognitiveservices = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-cognitiveservices`,
  "This is the Microsoft Azure Cognitive Services Management Client Library",
);

/**
 * This is the Microsoft Azure Commerce Management Client Library
 */
export const azure_mgmt_commerce = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-commerce`,
  "This is the Microsoft Azure Commerce Management Client Library",
);

/**
 * This is the Microsoft Azure Resource Management common code
 */
export const azure_mgmt_common = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-common`,
  "This is the Microsoft Azure Resource Management common code",
);

/**
 * This is the Microsoft Azure Compute Management Client Library
 */
export const azure_mgmt_compute = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-compute`,
  "This is the Microsoft Azure Compute Management Client Library",
);

/**
 * This is the Microsoft Azure Consumption Management Client Library
 */
export const azure_mgmt_consumption = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-consumption`,
  "This is the Microsoft Azure Consumption Management Client Library",
);

/**
 * This is the Microsoft Azure Container Instance Client Library
 */
export const azure_mgmt_containerinstance = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-containerinstance`,
  "This is the Microsoft Azure Container Instance Client Library",
);

/**
 * Microsoft Azure Container Registry Client Library for Python
 */
export const azure_mgmt_containerregistry = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-containerregistry`,
  "Microsoft Azure Container Registry Client Library for Python",
);

/**
 * This is the Microsoft Azure Container Service Management Client Library
 */
export const azure_mgmt_containerservice = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-containerservice`,
  "This is the Microsoft Azure Container Service Management Client Library",
);

/**
 * Microsoft Azure Management Core Library for Python
 */
export const azure_mgmt_core = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-core`,
  "Microsoft Azure Management Core Library for Python",
);

/**
 * Module to work with the Microsoft Azure Cosmos DB Management
 */
export const azure_mgmt_cosmosdb = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-cosmosdb`,
  "Module to work with the Microsoft Azure Cosmos DB Management",
);

/**
 * Microsoft Azure Databoxedge Management Client Library for Python
 */
export const azure_mgmt_databoxedge = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-databoxedge`,
  "Microsoft Azure Databoxedge Management Client Library for Python",
);

/**
 * This is the Microsoft Azure Data Factory Management Client Library
 */
export const azure_mgmt_datafactory = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-datafactory`,
  "This is the Microsoft Azure Data Factory Management Client Library",
);

/**
 * This is the Microsoft Azure Data Lake Analytics Management Client Library
 */
export const azure_mgmt_datalake_analytics = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-datalake-analytics`,
  "This is the Microsoft Azure Data Lake Analytics Management Client Library",
);

/**
 * This is the Microsoft Azure Data Lake Management namespace package
 */
export const azure_mgmt_datalake_nspkg = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-datalake-nspkg`,
  "This is the Microsoft Azure Data Lake Management namespace package",
);

/**
 * This is the Microsoft Azure Data Lake Store Management Client Library
 */
export const azure_mgmt_datalake_store = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-datalake-store`,
  "This is the Microsoft Azure Data Lake Store Management Client Library",
);

/**
 * This is the Microsoft Azure Data Migration Client Library
 */
export const azure_mgmt_datamigration = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-datamigration`,
  "This is the Microsoft Azure Data Migration Client Library",
);

/**
 * Microsoft Azure Deployment Manager Client Library for Python
 */
export const azure_mgmt_deploymentmanager = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-deploymentmanager`,
  "Microsoft Azure Deployment Manager Client Library for Python",
);

/**
 * This is the Microsoft Azure Dev Spaces Client Library
 */
export const azure_mgmt_devspaces = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-devspaces`,
  "This is the Microsoft Azure Dev Spaces Client Library",
);

/**
 * This is the Microsoft Azure DevTestLabs Management Client Library
 */
export const azure_mgmt_devtestlabs = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-devtestlabs`,
  "This is the Microsoft Azure DevTestLabs Management Client Library",
);

/**
 * This is the Microsoft Azure DNS Management Client Library
 */
export const azure_mgmt_dns = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-dns`,
  "This is the Microsoft Azure DNS Management Client Library",
);

/**
 * This is the Microsoft Azure EventGrid Management Client Library
 */
export const azure_mgmt_eventgrid = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-eventgrid`,
  "This is the Microsoft Azure EventGrid Management Client Library",
);

/**
 * This is the Microsoft Azure EventHub Management Client Library
 */
export const azure_mgmt_eventhub = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-eventhub`,
  "This is the Microsoft Azure EventHub Management Client Library",
);

/**
 * Microsoft Azure Extendedlocation Management Client Library for Python
 */
export const azure_mgmt_extendedlocation = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-extendedlocation`,
  "Microsoft Azure Extendedlocation Management Client Library for Python",
);

/**
 * Microsoft Azure Front Door Service Client Library for Python
 */
export const azure_mgmt_frontdoor = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-frontdoor`,
  "Microsoft Azure Front Door Service Client Library for Python",
);

/**
 * This is the Microsoft Azure SAP Hana on Azure Management Client Library
 */
export const azure_mgmt_hanaonazure = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-hanaonazure`,
  "This is the Microsoft Azure SAP Hana on Azure Management Client Library",
);

/**
 * Microsoft Azure HDInsight Management Client Library for Python
 */
export const azure_mgmt_hdinsight = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-hdinsight`,
  "Microsoft Azure HDInsight Management Client Library for Python",
);

/**
 * Microsoft Azure Image Builder Client Library for Python
 */
export const azure_mgmt_imagebuilder = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-imagebuilder`,
  "Microsoft Azure Image Builder Client Library for Python",
);

/**
 * This is the Microsoft Azure IoTCentral Management Client Library
 */
export const azure_mgmt_iotcentral = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-iotcentral`,
  "This is the Microsoft Azure IoTCentral Management Client Library",
);

/**
 * This is the Microsoft Azure IoTHub Management Client Library
 */
export const azure_mgmt_iothub = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-iothub`,
  "This is the Microsoft Azure IoTHub Management Client Library",
);

/**
 * This is the Microsoft Azure IoTHub Provisioning Services Client Library
 */
export const azure_mgmt_iothubprovisioningservices = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-iothubprovisioningservices`,
  "This is the Microsoft Azure IoTHub Provisioning Services Client Library",
);

/**
 * This is the Microsoft Azure Key Vault Management Client Library
 */
export const azure_mgmt_keyvault = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-keyvault`,
  "This is the Microsoft Azure Key Vault Management Client Library",
);

/**
 * Microsoft Azure Kusto Management Client Library for Python
 */
export const azure_mgmt_kusto = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-kusto`,
  "Microsoft Azure Kusto Management Client Library for Python",
);

/**
 * This is the Microsoft Azure Log Analytics Management Client Library
 */
export const azure_mgmt_loganalytics = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-loganalytics`,
  "This is the Microsoft Azure Log Analytics Management Client Library",
);

/**
 * This is the Microsoft Azure Logic Apps Management Client Library
 */
export const azure_mgmt_logic = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-logic`,
  "This is the Microsoft Azure Logic Apps Management Client Library",
);

/**
 * This is the Microsoft Azure Machine Learning Compute Management Client Library
 */
export const azure_mgmt_machinelearningcompute = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-machinelearningcompute`,
  "This is the Microsoft Azure Machine Learning Compute Management Client Library",
);

/**
 * Microsoft Azure Managed Services Client Library for Python
 */
export const azure_mgmt_managedservices = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-managedservices`,
  "Microsoft Azure Managed Services Client Library for Python",
);

/**
 * This is the Microsoft Azure Management Groups Client Library
 */
export const azure_mgmt_managementgroups = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-managementgroups`,
  "This is the Microsoft Azure Management Groups Client Library",
);

/**
 * This is the Microsoft Azure ManagementPartner Management Client Library
 */
export const azure_mgmt_managementpartner = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-managementpartner`,
  "This is the Microsoft Azure ManagementPartner Management Client Library",
);

/**
 * This is the Microsoft Azure Maps Client Library
 */
export const azure_mgmt_maps = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-maps`,
  "This is the Microsoft Azure Maps Client Library",
);

/**
 * This is the Microsoft Azure Market Place Ordering Client Library
 */
export const azure_mgmt_marketplaceordering = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-marketplaceordering`,
  "This is the Microsoft Azure Market Place Ordering Client Library",
);

/**
 * This is the Microsoft Azure Media Services Client Library
 */
export const azure_mgmt_media = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-media`,
  "This is the Microsoft Azure Media Services Client Library",
);

/**
 * This is the Microsoft Azure Monitor Client Library
 */
export const azure_mgmt_monitor = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-monitor`,
  "This is the Microsoft Azure Monitor Client Library",
);

/**
 * This is the Microsoft Azure MSI Management Client Library
 */
export const azure_mgmt_msi = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-msi`,
  "This is the Microsoft Azure MSI Management Client Library",
);

/**
 * Microsoft Azure NetApp Files Management Client Library for Python
 */
export const azure_mgmt_netapp = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-netapp`,
  "Microsoft Azure NetApp Files Management Client Library for Python",
);

/**
 * Microsoft Azure SDK for Python
 */
export const azure_mgmt_network = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-network`,
  "Microsoft Azure SDK for Python",
);

/**
 * This is the Microsoft Azure Notification Hubs Management Client Library
 */
export const azure_mgmt_notificationhubs = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-notificationhubs`,
  "This is the Microsoft Azure Notification Hubs Management Client Library",
);

/**
 * Microsoft Azure SDK for Python
 */
export const azure_mgmt_nspkg = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-nspkg`,
  "Microsoft Azure SDK for Python",
);

/**
 * This is the Microsoft Azure Policy Insights Client Library
 */
export const azure_mgmt_policyinsights = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-policyinsights`,
  "This is the Microsoft Azure Policy Insights Client Library",
);

/**
 * This is the Microsoft Azure Power BI Embedded Management Client Library
 */
export const azure_mgmt_powerbiembedded = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-powerbiembedded`,
  "This is the Microsoft Azure Power BI Embedded Management Client Library",
);

/**
 * Microsoft Azure DNS Private Zones Client Library for Python
 */
export const azure_mgmt_privatedns = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-privatedns`,
  "Microsoft Azure DNS Private Zones Client Library for Python",
);

/**
 * This is the Microsoft Azure RDBMS Management Client Library
 */
export const azure_mgmt_rdbms = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-rdbms`,
  "This is the Microsoft Azure RDBMS Management Client Library",
);

/**
 * This is the Microsoft Azure Recovery Services Client Library
 */
export const azure_mgmt_recoveryservices = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-recoveryservices`,
  "This is the Microsoft Azure Recovery Services Client Library",
);

/**
 * This is the Microsoft Azure Recovery Services Backup Management Client Library
 */
export const azure_mgmt_recoveryservicesbackup = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-recoveryservicesbackup`,
  "This is the Microsoft Azure Recovery Services Backup Management Client Library",
);

/**
 * Microsoft Azure Red Hat Openshift Management Client Library for Python
 */
export const azure_mgmt_redhatopenshift = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-redhatopenshift`,
  "Microsoft Azure Red Hat Openshift Management Client Library for Python",
);

/**
 * This is the Microsoft Azure Redis Cache Management Client Library
 */
export const azure_mgmt_redis = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-redis`,
  "This is the Microsoft Azure Redis Cache Management Client Library",
);

/**
 * This is the Microsoft Azure Relay Client Library
 */
export const azure_mgmt_relay = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-relay`,
  "This is the Microsoft Azure Relay Client Library",
);

/**
 * This is the Microsoft Azure Reservations Client Library
 */
export const azure_mgmt_reservations = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-reservations`,
  "This is the Microsoft Azure Reservations Client Library",
);

/**
 * Microsoft Azure SDK for Python
 */
export const azure_mgmt_resource = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-resource`,
  "Microsoft Azure SDK for Python",
);

/**
 * This is the Microsoft Azure Scheduler Management Client Library
 */
export const azure_mgmt_scheduler = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-scheduler`,
  "This is the Microsoft Azure Scheduler Management Client Library",
);

/**
 * This is the Microsoft Azure Search Management Client Library
 */
export const azure_mgmt_search = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-search`,
  "This is the Microsoft Azure Search Management Client Library",
);

/**
 * Microsoft Azure Security Center Management Client Library for Python
 */
export const azure_mgmt_security = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-security`,
  "Microsoft Azure Security Center Management Client Library for Python",
);

/**
 * This is the Microsoft Azure Service Bus Management Client Library
 */
export const azure_mgmt_servicebus = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-servicebus`,
  "This is the Microsoft Azure Service Bus Management Client Library",
);

/**
 * This is the Microsoft Azure Service Fabric Management Client Library
 */
export const azure_mgmt_servicefabric = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-servicefabric`,
  "This is the Microsoft Azure Service Fabric Management Client Library",
);

/**
 * This is the Microsoft Azure Service Fabric Cluster Management Client Library
 */
export const azure_mgmt_servicefabricmanagedclusters = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-servicefabricmanagedclusters`,
  "This is the Microsoft Azure Service Fabric Cluster Management Client Library",
);

/**
 * Microsoft Azure Servicelinker Management Client Library for Python
 */
export const azure_mgmt_servicelinker = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-servicelinker`,
  "Microsoft Azure Servicelinker Management Client Library for Python",
);

/**
 * This is the Microsoft Azure SignalR Client Library
 */
export const azure_mgmt_signalr = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-signalr`,
  "This is the Microsoft Azure SignalR Client Library",
);

/**
 * This is the Microsoft Azure SQL Management Client Library
 */
export const azure_mgmt_sql = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-sql`,
  "This is the Microsoft Azure SQL Management Client Library",
);

/**
 * Microsoft Azure SQL Virtual Machine Management Client Library for Python
 */
export const azure_mgmt_sqlvirtualmachine = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-sqlvirtualmachine`,
  "Microsoft Azure SQL Virtual Machine Management Client Library for Python",
);

/**
 * This is the Microsoft Azure Storage Management Client Library
 */
export const azure_mgmt_storage = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-storage`,
  "This is the Microsoft Azure Storage Management Client Library",
);

/**
 * This is the Microsoft Azure Subscription Management Client Library
 */
export const azure_mgmt_subscription = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-subscription`,
  "This is the Microsoft Azure Subscription Management Client Library",
);

/**
 * Azure python SDK
 */
export const azure_mgmt_synapse = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-synapse`,
  "Azure python SDK",
);

/**
 * This is the Microsoft Azure Traffic Manager Client Library
 */
export const azure_mgmt_trafficmanager = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-trafficmanager`,
  "This is the Microsoft Azure Traffic Manager Client Library",
);

/**
 * This is the Microsoft Azure Web Apps Management Client Library
 */
export const azure_mgmt_web = mkPackage(
  nixRaw`pkgs.python2Packages.azure-mgmt-web`,
  "This is the Microsoft Azure Web Apps Management Client Library",
);

/**
 * Microsoft Azure Storage Client Library for Python with multi API version support.
 */
export const azure_multiapi_storage = mkPackage(
  nixRaw`pkgs.python2Packages.azure-multiapi-storage`,
  "Microsoft Azure Storage Client Library for Python with multi API version support.",
);

/**
 * Microsoft Azure SDK for Python
 */
export const azure_nspkg = mkPackage(
  nixRaw`pkgs.python2Packages.azure-nspkg`,
  "Microsoft Azure SDK for Python",
);

/**
 * Microsoft Azure Service Bus Client Library
 */
export const azure_servicebus = mkPackage(
  nixRaw`pkgs.python2Packages.azure-servicebus`,
  "Microsoft Azure Service Bus Client Library",
);

/**
 * This project provides a client library in Python that makes it easy to consume Microsoft Azure Storage services
 */
export const azure_servicefabric = mkPackage(
  nixRaw`pkgs.python2Packages.azure-servicefabric`,
  "This project provides a client library in Python that makes it easy to consume Microsoft Azure Storage services",
);

/**
 * This is the Microsoft Azure Service Management Legacy Client Library
 */
export const azure_servicemanagement_legacy = mkPackage(
  nixRaw`pkgs.python2Packages.azure-servicemanagement-legacy`,
  "This is the Microsoft Azure Service Management Legacy Client Library",
);

/**
 * Client library for Microsoft Azure Storage services containing the blob service APIs
 */
export const azure_storage_blob = mkPackage(
  nixRaw`pkgs.python2Packages.azure-storage-blob`,
  "Client library for Microsoft Azure Storage services containing the blob service APIs",
);

/**
 * Client library for Microsoft Azure Storage services containing common code shared by blob, file and queue
 */
export const azure_storage_common = mkPackage(
  nixRaw`pkgs.python2Packages.azure-storage-common`,
  "Client library for Microsoft Azure Storage services containing common code shared by blob, file and queue",
);

/**
 * Client library for Microsoft Azure Storage services containing the file service APIs
 */
export const azure_storage_file = mkPackage(
  nixRaw`pkgs.python2Packages.azure-storage-file`,
  "Client library for Microsoft Azure Storage services containing the file service APIs",
);

/**
 * Microsoft Azure File Share Storage Client Library for Python
 */
export const azure_storage_file_share = mkPackage(
  nixRaw`pkgs.python2Packages.azure-storage-file-share`,
  "Microsoft Azure File Share Storage Client Library for Python",
);

/**
 * Client library for Microsoft Azure Storage services owning the azure.storage namespace, user should not use this directly
 */
export const azure_storage_nspkg = mkPackage(
  nixRaw`pkgs.python2Packages.azure-storage-nspkg`,
  "Client library for Microsoft Azure Storage services owning the azure.storage namespace, user should not use this directly",
);

/**
 * Client library for Microsoft Azure Storage services containing the queue service APIs
 */
export const azure_storage_queue = mkPackage(
  nixRaw`pkgs.python2Packages.azure-storage-queue`,
  "Client library for Microsoft Azure Storage services containing the queue service APIs",
);

/**
 * Azure python SDK
 */
export const azure_synapse_accesscontrol = mkPackage(
  nixRaw`pkgs.python2Packages.azure-synapse-accesscontrol`,
  "Azure python SDK",
);

/**
 * Microsoft Azure Synapse Artifacts Client Library for Python
 */
export const azure_synapse_artifacts = mkPackage(
  nixRaw`pkgs.python2Packages.azure-synapse-artifacts`,
  "Microsoft Azure Synapse Artifacts Client Library for Python",
);

/**
 * Microsoft Azure Synapse Managed Private Endpoints Client Library for Python
 */
export const azure_synapse_managedprivateendpoints = mkPackage(
  nixRaw`pkgs.python2Packages.azure-synapse-managedprivateendpoints`,
  "Microsoft Azure Synapse Managed Private Endpoints Client Library for Python",
);

/**
 * Azure python SDK
 */
export const azure_synapse_spark = mkPackage(
  nixRaw`pkgs.python2Packages.azure-synapse-spark`,
  "Azure python SDK",
);

/**
 * Client library and utilities for access to B2 Cloud Storage (backblaze)
 */
export const b2sdk = mkPackage(
  nixRaw`pkgs.python2Packages.b2sdk`,
  "Client library and utilities for access to B2 Cloud Storage (backblaze)",
);

/**
 * Collection of internationalizing tools
 */
export const babel = mkPackage(
  nixRaw`pkgs.python2Packages.babel`,
  "Collection of internationalizing tools",
);

/**
 * A module to work with countries and languages
 */
export const babelfish = mkPackage(
  nixRaw`pkgs.python2Packages.babelfish`,
  "A module to work with countries and languages",
);

/**
 * Babel Glade XML files translatable strings extractor
 */
export const babelgladeextractor = mkPackage(
  nixRaw`pkgs.python2Packages.babelgladeextractor`,
  "Babel Glade XML files translatable strings extractor",
);

/**
 * Specifications for callback functions passed in to an API
 */
export const backcall = mkPackage(
  nixRaw`pkgs.python2Packages.backcall`,
  "Specifications for callback functions passed in to an API",
);

/**
 * Function decoration for backoff and retry
 */
export const backoff = mkPackage(
  nixRaw`pkgs.python2Packages.backoff`,
  "Function decoration for backoff and retry",
);

/**
 * Python 3.8 functools.cached_property backport to python 3.6
 */
export const backports_cached_property = mkPackage(
  nixRaw`pkgs.python2Packages.backports-cached-property`,
  "Python 3.8 functools.cached_property backport to python 3.6",
);

/**
 * Backport of Python 3.11's datetime.fromisoformat
 */
export const backports_datetime_fromisoformat = mkPackage(
  nixRaw`pkgs.python2Packages.backports-datetime-fromisoformat`,
  "Backport of Python 3.11's datetime.fromisoformat",
);

/**
 * Compatibility shim providing selectable entry points for older implementations
 */
export const backports_entry_points_selectable = mkPackage(
  nixRaw`pkgs.python2Packages.backports-entry-points-selectable`,
  "Compatibility shim providing selectable entry points for older implementations",
);

/**
 * Backport of functools.lru_cache
 */
export const backports_functools_lru_cache = mkPackage(
  nixRaw`pkgs.python2Packages.backports-functools-lru-cache`,
  "Backport of functools.lru_cache",
);

/**
 * A backport of the get_terminal_size function from Python 3.3’s shutil.
 */
export const backports_shutil_get_terminal_size = mkPackage(
  nixRaw`pkgs.python2Packages.backports_shutil_get_terminal_size`,
  "A backport of the get_terminal_size function from Python 3.3’s shutil.",
);

/**
 * Backport of shutil.which from Python 3.3
 */
export const backports_shutil_which = mkPackage(
  nixRaw`pkgs.python2Packages.backports-shutil-which`,
  "Backport of shutil.which from Python 3.3",
);

/**
 * Base class for creating enumerated constants that are also subclasses of str
 */
export const backports_strenum = mkPackage(
  nixRaw`pkgs.python2Packages.backports-strenum`,
  "Base class for creating enumerated constants that are also subclasses of str",
);

/**
 * Backport of the standard library module zoneinfo
 */
export const backports_zoneinfo = mkPackage(
  nixRaw`pkgs.python2Packages.backports-zoneinfo`,
  "Backport of the standard library module zoneinfo",
);

/**
 * Module for the BACnet application layer and network layer
 */
export const bacpypes = mkPackage(
  nixRaw`pkgs.python2Packages.bacpypes`,
  "Module for the BACnet application layer and network layer",
);

/**
 * Python library and command line utility for working with BagIt style packages
 */
export const bagit = mkPackage(
  nixRaw`pkgs.python2Packages.bagit`,
  "Python library and command line utility for working with BagIt style packages",
);

/**
 * High-level Bayesian model-building interface
 */
export const bambi = mkPackage(
  nixRaw`pkgs.python2Packages.bambi`,
  "High-level Bayesian model-building interface",
);

/**
 * Commons of banal micro-functions for Python
 */
export const banal = mkPackage(
  nixRaw`pkgs.python2Packages.banal`,
  "Commons of banal micro-functions for Python",
);

/**
 * Obtains information from bandcamp.com
 */
export const bandcamp_api = mkPackage(
  nixRaw`pkgs.python2Packages.bandcamp-api`,
  "Obtains information from bandcamp.com",
);

/**
 * Security oriented static analyser for python code
 */
export const bandit = mkPackage(
  nixRaw`pkgs.python2Packages.bandit`,
  "Security oriented static analyser for python code",
);

/**
 * Bangla is a package for Bangla language users with various functionalities including Bangla date and Bangla numeric conversation
 */
export const bangla = mkPackage(
  nixRaw`pkgs.python2Packages.bangla`,
  "Bangla is a package for Bangla language users with various functionalities including Bangla date and Bangla numeric conversation",
);

/**
 * Platform for binary analysis. It is written in OCaml, but can be used from other languages.
 */
export const bap = mkPackage(
  nixRaw`pkgs.python2Packages.bap`,
  "Platform for binary analysis. It is written in OCaml, but can be used from other languages.",
);

/**
 * Generator of ANSI C tracers which output CTF data streams 
 */
export const barectf = mkPackage(
  nixRaw`pkgs.python2Packages.barectf`,
  "Generator of ANSI C tracers which output CTF data streams ",
);

/**
 * Abstraction on top of baron, a FST for python to make writing refactoring code a realistic task
 */
export const baron = mkPackage(
  nixRaw`pkgs.python2Packages.baron`,
  "Abstraction on top of baron, a FST for python to make writing refactoring code a realistic task",
);

/**
 * Python implementation for the positional numeral system using 36 as the radix
 */
export const base36 = mkPackage(
  nixRaw`pkgs.python2Packages.base36`,
  "Python implementation for the positional numeral system using 36 as the radix",
);

/**
 * Base58 and Base58Check implementation
 */
export const base58 = mkPackage(
  nixRaw`pkgs.python2Packages.base58`,
  "Base58 and Base58Check implementation",
);

/**
 * Implementation of the Base58Check encoding scheme
 */
export const base58check = mkPackage(
  nixRaw`pkgs.python2Packages.base58check`,
  "Implementation of the Base58Check encoding scheme",
);

/**
 * Python stream implementation for base64 encoding/decoding
 */
export const base64io = mkPackage(
  nixRaw`pkgs.python2Packages.base64io`,
  "Python stream implementation for base64 encoding/decoding",
);

/**
 * Easy String Baseline
 */
export const baseline = mkPackage(
  nixRaw`pkgs.python2Packages.baseline`,
  "Easy String Baseline",
);

/**
 * High-quality implementations of reinforcement learning algorithms
 */
export const baselines = mkPackage(
  nixRaw`pkgs.python2Packages.baselines`,
  "High-quality implementations of reinforcement learning algorithms",
);

/**
 * Plot data on map projections with matplotlib
 */
export const basemap = mkPackage(
  nixRaw`pkgs.python2Packages.basemap`,
  "Plot data on map projections with matplotlib",
);

/**
 * Data assets for matplotlib basemap
 */
export const basemap_data = mkPackage(
  nixRaw`pkgs.python2Packages.basemap-data`,
  "Data assets for matplotlib basemap",
);

/**
 * Bash Kernel for Jupyter
 */
export const bash_kernel = mkPackage(
  nixRaw`pkgs.python2Packages.bash_kernel`,
  "Bash Kernel for Jupyter",
);

/**
 * Python parser for bash
 */
export const bashlex = mkPackage(
  nixRaw`pkgs.python2Packages.bashlex`,
  "Python parser for bash",
);

/**
 * Get info about wireless interfaces using libiw
 */
export const basiciw = mkPackage(
  nixRaw`pkgs.python2Packages.basiciw`,
  "Get info about wireless interfaces using libiw",
);

/**
 * 2D and 3D image data augmentation for deep learning
 */
export const batchgenerators = mkPackage(
  nixRaw`pkgs.python2Packages.batchgenerators`,
  "2D and 3D image data augmentation for deep learning",
);

/**
 * A spawner for Jupyterhub to spawn notebooks using batch resource managers
 */
export const batchspawner = mkPackage(
  nixRaw`pkgs.python2Packages.batchspawner`,
  "A spawner for Jupyterhub to spawn notebooks using batch resource managers",
);

/**
 * A simple Python lib to retrieve battery information
 */
export const batinfo = mkPackage(
  nixRaw`pkgs.python2Packages.batinfo`,
  "A simple Python lib to retrieve battery information",
);

/**
 * A library for Bayesian comparison of classifiers
 */
export const baycomp = mkPackage(
  nixRaw`pkgs.python2Packages.baycomp`,
  "A library for Bayesian comparison of classifiers",
);

/**
 * A Python implementation of global optimization with gaussian processes

 */
export const bayesian_optimization = mkPackage(
  nixRaw`pkgs.python2Packages.bayesian-optimization`,
  "A Python implementation of global optimization with gaussian processes\n",
);

/**
 * Variational Bayesian inference tools for Python
 */
export const bayespy = mkPackage(
  nixRaw`pkgs.python2Packages.bayespy`,
  "Variational Bayesian inference tools for Python",
);

/**
 * Python library for 2D/3D bounding boxes
 */
export const bbox = mkPackage(
  nixRaw`pkgs.python2Packages.bbox`,
  "Python library for 2D/3D bounding boxes",
);

/**
 * Tool to detect secrets in the code
 */
export const bc_detect_secrets = mkPackage(
  nixRaw`pkgs.python2Packages.bc-detect-secrets`,
  "Tool to detect secrets in the code",
);

/**
 * JSONPath implementation for Python
 */
export const bc_jsonpath_ng = mkPackage(
  nixRaw`pkgs.python2Packages.bc-jsonpath-ng`,
  "JSONPath implementation for Python",
);

/**
 * Parser for HCL2 written in Python using Lark
 */
export const bc_python_hcl2 = mkPackage(
  nixRaw`pkgs.python2Packages.bc-python-hcl2`,
  "Parser for HCL2 written in Python using Lark",
);

/**
 * ReST document generation tools for botocore
 */
export const bcdoc = mkPackage(
  nixRaw`pkgs.python2Packages.bcdoc`,
  "ReST document generation tools for botocore",
);

/**
 * HARDWARIO Firmware Tool
 */
export const bcf = mkPackage(
  nixRaw`pkgs.python2Packages.bcf`,
  "HARDWARIO Firmware Tool",
);

/**
 * HARDWARIO Gateway (Python Application «bcg»)
 */
export const bcg = mkPackage(
  nixRaw`pkgs.python2Packages.bcg`,
  "HARDWARIO Gateway (Python Application «bcg»)",
);

/**
 * HARDWARIO Hub Control Tool
 */
export const bch = mkPackage(
  nixRaw`pkgs.python2Packages.bch`,
  "HARDWARIO Hub Control Tool",
);

/**
 * Modern password hashing for your software and your servers
 */
export const bcrypt = mkPackage(
  nixRaw`pkgs.python2Packages.bcrypt`,
  "Modern password hashing for your software and your servers",
);

/**
 * A Session and Caching library with WSGI Middleware
 */
export const beaker = mkPackage(
  nixRaw`pkgs.python2Packages.beaker`,
  "A Session and Caching library with WSGI Middleware",
);

/**
 * Double-entry bookkeeping computer language
 */
export const beancount = mkPackage(
  nixRaw`pkgs.python2Packages.beancount`,
  "Double-entry bookkeeping computer language",
);

/**
 * Opinioned code formatter for Beancount
 */
export const beancount_black = mkPackage(
  nixRaw`pkgs.python2Packages.beancount-black`,
  "Opinioned code formatter for Beancount",
);

/**
 * Document verification plugin for Beancount
 */
export const beancount_docverif = mkPackage(
  nixRaw`pkgs.python2Packages.beancount-docverif`,
  "Document verification plugin for Beancount",
);

/**
 * Standalone Lark based Beancount syntax parser
 */
export const beancount_parser = mkPackage(
  nixRaw`pkgs.python2Packages.beancount-parser`,
  "Standalone Lark based Beancount syntax parser",
);

/**
 * A simple beanstalkd client library for Python
 */
export const beanstalkc = mkPackage(
  nixRaw`pkgs.python2Packages.beanstalkc`,
  "A simple beanstalkd client library for Python",
);

/**
 * Fast runtime type checking for Python
 */
export const beartype = mkPackage(
  nixRaw`pkgs.python2Packages.beartype`,
  "Fast runtime type checking for Python",
);

/**
 * Simple and beautiful way to create date and datetime objects
 */
export const beautiful_date = mkPackage(
  nixRaw`pkgs.python2Packages.beautiful-date`,
  "Simple and beautiful way to create date and datetime objects",
);

/**
 * HTML and XML parser
 */
export const beautifulsoup4 = mkPackage(
  nixRaw`pkgs.python2Packages.beautifulsoup4`,
  "HTML and XML parser",
);

/**
 * Python package for printing visually appealing tables
 */
export const beautifultable = mkPackage(
  nixRaw`pkgs.python2Packages.beautifultable`,
  "Python package for printing visually appealing tables",
);

/**
 * Tool for beautifying Bash scripts
 */
export const beautysh = mkPackage(
  nixRaw`pkgs.python2Packages.beautysh`,
  "Tool for beautifying Bash scripts",
);

export const bech32 = mkPackage(
  nixRaw`pkgs.python2Packages.bech32`,
  "",
);

/**
 * sugar over the Mock library to help test race conditions
 */
export const before_after = mkPackage(
  nixRaw`pkgs.python2Packages.before-after`,
  "sugar over the Mock library to help test race conditions",
);

/**
 * behaviour-driven development, Python style
 */
export const behave = mkPackage(
  nixRaw`pkgs.python2Packages.behave`,
  "behaviour-driven development, Python style",
);

/**
 * Python module to implement EZSP for EmberZNet devices
 */
export const bellows = mkPackage(
  nixRaw`pkgs.python2Packages.bellows`,
  "Python module to implement EZSP for EmberZNet devices",
);

/**
 * Simple bencode parser (for Python 2, Python 3 and PyPy)
 */
export const bencode_py = mkPackage(
  nixRaw`pkgs.python2Packages.bencode-py`,
  "Simple bencode parser (for Python 2, Python 3 and PyPy)",
);

/**
 * A simple bencode decoder/encoder library in pure Python
 */
export const bencoder = mkPackage(
  nixRaw`pkgs.python2Packages.bencoder`,
  "A simple bencode decoder/encoder library in pure Python",
);

/**
 * Extract semantic information about static Python code
 */
export const beniget = mkPackage(
  nixRaw`pkgs.python2Packages.beniget`,
  "Extract semantic information about static Python code",
);

/**
 * Build Production-Grade AI Applications
 */
export const bentoml = mkPackage(
  nixRaw`pkgs.python2Packages.bentoml`,
  "Build Production-Grade AI Applications",
);

/**
 * Encodes and decodes data in the BespON format.
 */
export const bespon = mkPackage(
  nixRaw`pkgs.python2Packages.bespon`,
  "Encodes and decodes data in the BespON format.",
);

/**
 * A small python package to flexibly convert from betacode to unicode and back.
 */
export const betacode = mkPackage(
  nixRaw`pkgs.python2Packages.betacode`,
  "A small python package to flexibly convert from betacode to unicode and back.",
);

/**
 * A VCR imitation for requests
 */
export const betamax = mkPackage(
  nixRaw`pkgs.python2Packages.betamax`,
  "A VCR imitation for requests",
);

/**
 * A group of experimental matchers for Betamax
 */
export const betamax_matchers = mkPackage(
  nixRaw`pkgs.python2Packages.betamax-matchers`,
  "A group of experimental matchers for Betamax",
);

/**
 * A set of third-party serializers for Betamax
 */
export const betamax_serializers = mkPackage(
  nixRaw`pkgs.python2Packages.betamax-serializers`,
  "A set of third-party serializers for Betamax",
);

/**
 * Clean, modern, Python 3.6+ code generator & library for Protobuf 3 and async gRPC
 */
export const betterproto = mkPackage(
  nixRaw`pkgs.python2Packages.betterproto`,
  "Clean, modern, Python 3.6+ code generator & library for Protobuf 3 and async gRPC",
);

/**
 * Bibtex parser for Python
 */
export const bibtexparser = mkPackage(
  nixRaw`pkgs.python2Packages.bibtexparser`,
  "Bibtex parser for Python",
);

/**
 * Efficient, Pythonic bidirectional map data structures and related functionality
 */
export const bidict = mkPackage(
  nixRaw`pkgs.python2Packages.bidict`,
  "Efficient, Pythonic bidirectional map data structures and related functionality",
);

/**
 * Validator for the Brain Imaging Data Structure
 */
export const bids_validator = mkPackage(
  nixRaw`pkgs.python2Packages.bids-validator`,
  "Validator for the Brain Imaging Data Structure",
);

/**
 * Convert Bilibili XML/protobuf danmaku to ASS subtitle
 */
export const biliass = mkPackage(
  nixRaw`pkgs.python2Packages.biliass`,
  "Convert Bilibili XML/protobuf danmaku to ASS subtitle",
);

/**
 * Python multiprocessing fork with improvements and bugfixes
 */
export const billiard = mkPackage(
  nixRaw`pkgs.python2Packages.billiard`,
  "Python multiprocessing fork with improvements and bugfixes",
);

/**
 * Library to read data from the BMW Connected Drive portal
 */
export const bimmer_connected = mkPackage(
  nixRaw`pkgs.python2Packages.bimmer-connected`,
  "Library to read data from the BMW Connected Drive portal",
);

/**
 * Easily convert between binary and SI units (kibibyte, kilobyte, etc.)
 */
export const binary = mkPackage(
  nixRaw`pkgs.python2Packages.binary`,
  "Easily convert between binary and SI units (kibibyte, kilobyte, etc.)",
);

/**
 * Ultra-lightweight pure Python package to check if a file is binary or text
 */
export const binaryornot = mkPackage(
  nixRaw`pkgs.python2Packages.binaryornot`,
  "Ultra-lightweight pure Python package to check if a file is binary or text",
);

/**
 * Mangling of various file formats that conveys binary information (Motorola S-Record, Intel HEX, TI-TXT, ELF and binary files)
 */
export const bincopy = mkPackage(
  nixRaw`pkgs.python2Packages.bincopy`,
  "Mangling of various file formats that conveys binary information (Motorola S-Record, Intel HEX, TI-TXT, ELF and binary files)",
);

/**
 * Python library for Binho Multi-Protocol USB Host Adapters
 */
export const binho_host_adapter = mkPackage(
  nixRaw`pkgs.python2Packages.binho-host-adapter`,
  "Python library for Binho Multi-Protocol USB Host Adapters",
);

/**
 * A tool for searching a given binary image for embedded files
 */
export const binwalk = mkPackage(
  nixRaw`pkgs.python2Packages.binwalk`,
  "A tool for searching a given binary image for embedded files",
);

/**
 * A tool for searching a given binary image for embedded files
 */
export const binwalk_full = mkPackage(
  nixRaw`pkgs.python2Packages.binwalk-full`,
  "A tool for searching a given binary image for embedded files",
);

/**
 * Working with molecular structures in pandas DataFrames
 */
export const biopandas = mkPackage(
  nixRaw`pkgs.python2Packages.biopandas`,
  "Working with molecular structures in pandas DataFrames",
);

/**
 * Python library for bioinformatics
 */
export const biopython = mkPackage(
  nixRaw`pkgs.python2Packages.biopython`,
  "Python library for bioinformatics",
);

/**
 * Implementation of BIP39, BIP32, BIP44, BIP49 and BIP84 for wallet seeds, keys and addresses generation
 */
export const bip_utils = mkPackage(
  nixRaw`pkgs.python2Packages.bip-utils`,
  "Implementation of BIP39, BIP32, BIP44, BIP49 and BIP84 for wallet seeds, keys and addresses generation",
);

/**
 * Binary plist parser/generator for Python
 */
export const biplist = mkPackage(
  nixRaw`pkgs.python2Packages.biplist`,
  "Binary plist parser/generator for Python",
);

/**
 * Efficient arrays of booleans
 */
export const bitarray = mkPackage(
  nixRaw`pkgs.python2Packages.bitarray`,
  "Efficient arrays of booleans",
);

/**
 * Firmware code of the BitBox02 hardware wallet
 */
export const bitbox02 = mkPackage(
  nixRaw`pkgs.python2Packages.bitbox02`,
  "Firmware code of the BitBox02 hardware wallet",
);

/**
 * Bitcoin utility functions
 */
export const bitcoin_utils_fork_minimal = mkPackage(
  nixRaw`pkgs.python2Packages.bitcoin-utils-fork-minimal`,
  "Bitcoin utility functions",
);

/**
 * Easy interface to the Bitcoin data structures and protocol
 */
export const bitcoinlib = mkPackage(
  nixRaw`pkgs.python2Packages.bitcoinlib`,
  "Easy interface to the Bitcoin data structures and protocol",
);

/**
 * Bitcoin JSON-RPC client
 */
export const bitcoinrpc = mkPackage(
  nixRaw`pkgs.python2Packages.bitcoinrpc`,
  "Bitcoin JSON-RPC client",
);

/**
 * Asynchronous parser taking incremental bites out of your byte input stream
 */
export const bite_parser = mkPackage(
  nixRaw`pkgs.python2Packages.bite-parser`,
  "Asynchronous parser taking incremental bites out of your byte input stream",
);

/**
 * Python library for working with little-endian list representation of bit strings
 */
export const bitlist = mkPackage(
  nixRaw`pkgs.python2Packages.bitlist`,
  "Python library for working with little-endian list representation of bit strings",
);

/**
 * Module for representing and manipulating file sizes with different prefix
 */
export const bitmath = mkPackage(
  nixRaw`pkgs.python2Packages.bitmath`,
  "Module for representing and manipulating file sizes with different prefix",
);

/**
 * 8-bit CUDA functions for PyTorch
 */
export const bitsandbytes = mkPackage(
  nixRaw`pkgs.python2Packages.bitsandbytes`,
  "8-bit CUDA functions for PyTorch",
);

/**
 * Module for binary data manipulation
 */
export const bitstring = mkPackage(
  nixRaw`pkgs.python2Packages.bitstring`,
  "Module for binary data manipulation",
);

/**
 * Python bit pack/unpack package
 */
export const bitstruct = mkPackage(
  nixRaw`pkgs.python2Packages.bitstruct`,
  "Python bit pack/unpack package",
);

/**
 * Python client for Bitvavo crypto exchange API
 */
export const bitvavo_aio = mkPackage(
  nixRaw`pkgs.python2Packages.bitvavo-aio`,
  "Python client for Bitvavo crypto exchange API",
);

/**
 * Python module to get information about Bizkaibus buses
 */
export const bizkaibus = mkPackage(
  nixRaw`pkgs.python2Packages.bizkaibus`,
  "Python module to get information about Bizkaibus buses",
);

/**
 * A screamingly fast Python 2/3 WSGI server written in C
 */
export const bjoern = mkPackage(
  nixRaw`pkgs.python2Packages.bjoern`,
  "A screamingly fast Python 2/3 WSGI server written in C",
);

/**
 * High level chart types built on top of Bokeh
 */
export const bkcharts = mkPackage(
  nixRaw`pkgs.python2Packages.bkcharts`,
  "High level chart types built on top of Bokeh",
);

/**
 * The uncompromising Python code formatter
 */
export const black = mkPackage(
  nixRaw`pkgs.python2Packages.black`,
  "The uncompromising Python code formatter",
);

/**
 * This is a small utility built on top of the black Python code formatter to enable formatting of partial files
 */
export const black_macchiato = mkPackage(
  nixRaw`pkgs.python2Packages.black-macchiato`,
  "This is a small utility built on top of the black Python code formatter to enable formatting of partial files",
);

/**
 * Sampling library designed for ease of use, speed and modularity
 */
export const blackjax = mkPackage(
  nixRaw`pkgs.python2Packages.blackjax`,
  "Sampling library designed for ease of use, speed and modularity",
);

/**
 * An easy, HTML5, whitelisting HTML sanitizer
 */
export const bleach = mkPackage(
  nixRaw`pkgs.python2Packages.bleach`,
  "An easy, HTML5, whitelisting HTML sanitizer",
);

/**
 * Curated lists of tags and attributes for sanitizing html
 */
export const bleach_allowlist = mkPackage(
  nixRaw`pkgs.python2Packages.bleach-allowlist`,
  "Curated lists of tags and attributes for sanitizing html",
);

/**
 * Bluetooth Low Energy platform agnostic client
 */
export const bleak = mkPackage(
  nixRaw`pkgs.python2Packages.bleak`,
  "Bluetooth Low Energy platform agnostic client",
);

/**
 * Connector for Bleak Clients that handles transient connection failures
 */
export const bleak_retry_connector = mkPackage(
  nixRaw`pkgs.python2Packages.bleak-retry-connector`,
  "Connector for Bleak Clients that handles transient connection failures",
);

/**
 * Python API for accessing BleBox smart home devices
 */
export const blebox_uniapi = mkPackage(
  nixRaw`pkgs.python2Packages.blebox-uniapi`,
  "Python API for accessing BleBox smart home devices",
);

/**
 * Library for creating a BLE Generic Attribute Profile (GATT) server
 */
export const bless = mkPackage(
  nixRaw`pkgs.python2Packages.bless`,
  "Library for creating a BLE Generic Attribute Profile (GATT) server",
);

/**
 * A thin, practical wrapper around terminal capabilities in Python.
 */
export const blessed = mkPackage(
  nixRaw`pkgs.python2Packages.blessed`,
  "A thin, practical wrapper around terminal capabilities in Python.",
);

/**
 * A thin, practical wrapper around terminal coloring, styling, and positioning
 */
export const blessings = mkPackage(
  nixRaw`pkgs.python2Packages.blessings`,
  "A thin, practical wrapper around terminal coloring, styling, and positioning",
);

/**
 * Fast Python in-process signal/event dispatching system
 */
export const blinker = mkPackage(
  nixRaw`pkgs.python2Packages.blinker`,
  "Fast Python in-process signal/event dispatching system",
);

/**
 * Python library for the Blink Camera system
 */
export const blinkpy = mkPackage(
  nixRaw`pkgs.python2Packages.blinkpy`,
  "Python library for the Blink Camera system",
);

/**
 * Python package to control BlinkStick USB devices
 */
export const blinkstick = mkPackage(
  nixRaw`pkgs.python2Packages.blinkstick`,
  "Python package to control BlinkStick USB devices",
);

/**
 * BLAS-like linear algebra library
 */
export const blis = mkPackage(
  nixRaw`pkgs.python2Packages.blis`,
  "BLAS-like linear algebra library",
);

/**
 * Read Google Cloud Storage, Azure Blobs, and local paths with the same interface
 */
export const blobfile = mkPackage(
  nixRaw`pkgs.python2Packages.blobfile`,
  "Read Google Cloud Storage, Azure Blobs, and local paths with the same interface",
);

/**
 * Integrate Bitcoin, Dogecoin and Litecoin in your Python applications using block.io
 */
export const block_io = mkPackage(
  nixRaw`pkgs.python2Packages.block-io`,
  "Integrate Bitcoin, Dogecoin and Litecoin in your Python applications using block.io",
);

/**
 * Python client Blockchain Bitcoin Developer API
 */
export const blockchain = mkPackage(
  nixRaw`pkgs.python2Packages.blockchain`,
  "Python client Blockchain Bitcoin Developer API",
);

/**
 * Generate block-diagram image from spec-text file (similar to Graphviz)
 */
export const blockdiag = mkPackage(
  nixRaw`pkgs.python2Packages.blockdiag`,
  "Generate block-diagram image from spec-text file (similar to Graphviz)",
);

/**
 * Python SDK for the Blockfrost.io API
 */
export const blockfrost_python = mkPackage(
  nixRaw`pkgs.python2Packages.blockfrost-python`,
  "Python SDK for the Blockfrost.io API",
);

/**
 * Blockstream Satellite CLI
 */
export const blocksat_cli = mkPackage(
  nixRaw`pkgs.python2Packages.blocksat-cli`,
  "Blockstream Satellite CLI",
);

/**
 * Python wrapper for the extremely fast Blosc2 compression library
 */
export const blosc2 = mkPackage(
  nixRaw`pkgs.python2Packages.blosc2`,
  "Python wrapper for the extremely fast Blosc2 compression library",
);

/**
 * BLS signatures with aggregation
 */
export const blspy = mkPackage(
  nixRaw`pkgs.python2Packages.blspy`,
  "BLS signatures with aggregation",
);

/**
 * Library for bluemaestro BLE devices
 */
export const bluemaestro_ble = mkPackage(
  nixRaw`pkgs.python2Packages.bluemaestro-ble`,
  "Library for bluemaestro BLE devices",
);

/**
 * Python interface to Bluetooth LE on Linux
 */
export const bluepy = mkPackage(
  nixRaw`pkgs.python2Packages.bluepy`,
  "Python interface to Bluetooth LE on Linux",
);

/**
 * Python BTLE Device Interface for bluepy
 */
export const bluepy_devices = mkPackage(
  nixRaw`pkgs.python2Packages.bluepy-devices`,
  "Python BTLE Device Interface for bluepy",
);

/**
 * Tools to enumerate and find Bluetooth Adapters
 */
export const bluetooth_adapters = mkPackage(
  nixRaw`pkgs.python2Packages.bluetooth-adapters`,
  "Tools to enumerate and find Bluetooth Adapters",
);

/**
 * Library for recovering Bluetooth adapters
 */
export const bluetooth_auto_recovery = mkPackage(
  nixRaw`pkgs.python2Packages.bluetooth-auto-recovery`,
  "Library for recovering Bluetooth adapters",
);

/**
 * Library for converting bluetooth data and packets
 */
export const bluetooth_data_tools = mkPackage(
  nixRaw`pkgs.python2Packages.bluetooth-data-tools`,
  "Library for converting bluetooth data and packets",
);

/**
 * Models for storing and converting Bluetooth Sensor State Data
 */
export const bluetooth_sensor_state_data = mkPackage(
  nixRaw`pkgs.python2Packages.bluetooth-sensor-state-data`,
  "Models for storing and converting Bluetooth Sensor State Data",
);

/**
 * Pure-Python implementation of the blurhash algorithm
 */
export const blurhash = mkPackage(
  nixRaw`pkgs.python2Packages.blurhash`,
  "Pure-Python implementation of the blurhash algorithm",
);

/**
 * Library for BME280 sensor through spidev
 */
export const bme280spi = mkPackage(
  nixRaw`pkgs.python2Packages.bme280spi`,
  "Library for BME280 sensor through spidev",
);

/**
 * Python library for driving the Pimoroni BME680 Breakout
 */
export const bme680 = mkPackage(
  nixRaw`pkgs.python2Packages.bme680`,
  "Python library for driving the Pimoroni BME680 Breakout",
);

/**
 * Bangla Number text to String Converter
 */
export const bnnumerizer = mkPackage(
  nixRaw`pkgs.python2Packages.bnnumerizer`,
  "Bangla Number text to String Converter",
);

/**
 * Bangla Unicode Normalization Toolkit
 */
export const bnunicodenormalizer = mkPackage(
  nixRaw`pkgs.python2Packages.bnunicodenormalizer`,
  "Bangla Unicode Normalization Toolkit",
);

/**
 * Python client API for communicating with Boa's (https://boa.cs.iastate.edu/) XML-RPC based services
 */
export const boa_api = mkPackage(
  nixRaw`pkgs.python2Packages.boa-api`,
  "Python client API for communicating with Boa's (https://boa.cs.iastate.edu/) XML-RPC based services",
);

/**
 * Testing framework for industrial protocols implementations and devices
 */
export const boiboite_opener_framework = mkPackage(
  nixRaw`pkgs.python2Packages.boiboite-opener-framework`,
  "Testing framework for industrial protocols implementations and devices",
);

/**
 * Python port of Boilerpipe library
 */
export const boilerpy3 = mkPackage(
  nixRaw`pkgs.python2Packages.boilerpy3`,
  "Python port of Boilerpipe library",
);

/**
 * Statistical and novel interactive HTML plots for Python
 */
export const bokeh = mkPackage(
  nixRaw`pkgs.python2Packages.bokeh`,
  "Statistical and novel interactive HTML plots for Python",
);

/**
 * Constructs, recipes, and snippets extending the Python standard library
 */
export const boltons = mkPackage(
  nixRaw`pkgs.python2Packages.boltons`,
  "Constructs, recipes, and snippets extending the Python standard library",
);

/**
 * Band-structure interpolator and transport coefficient calculator
 */
export const boltztrap2 = mkPackage(
  nixRaw`pkgs.python2Packages.boltztrap2`,
  "Band-structure interpolator and transport coefficient calculator",
);

/**
 * Asynchronous Python wrapper library over Bond Local API
 */
export const bond_api = mkPackage(
  nixRaw`pkgs.python2Packages.bond-api`,
  "Asynchronous Python wrapper library over Bond Local API",
);

/**
 * Asynchronous Python wrapper library over Bond Local API
 */
export const bond_async = mkPackage(
  nixRaw`pkgs.python2Packages.bond-async`,
  "Asynchronous Python wrapper library over Bond Local API",
);

/**
 * Python 3 module for accessing LDAP directory servers
 */
export const bonsai = mkPackage(
  nixRaw`pkgs.python2Packages.bonsai`,
  "Python 3 module for accessing LDAP directory servers",
);

/**
 * Implements boolean algebra in one module
 */
export const boolean_py = mkPackage(
  nixRaw`pkgs.python2Packages.boolean-py`,
  "Implements boolean algebra in one module",
);

/**
 * Boolean operations on paths
 */
export const booleanoperations = mkPackage(
  nixRaw`pkgs.python2Packages.booleanoperations`,
  "Boolean operations on paths",
);

/**
 * Collection of C++ libraries
 */
export const boost = mkPackage(
  nixRaw`pkgs.python2Packages.boost`,
  "Collection of C++ libraries",
);

/**
 * Python bindings for the C++14 Boost::Histogram library
 */
export const boost_histogram = mkPackage(
  nixRaw`pkgs.python2Packages.boost-histogram`,
  "Python bindings for the C++14 Boost::Histogram library",
);

/**
 * Version of pip used for bootstrapping
 */
export const bootstrapped_pip = mkPackage(
  nixRaw`pkgs.python2Packages.bootstrapped-pip`,
  "Version of pip used for bootstrapping",
);

/**
 * Python module to work with the Bosch Smart Home Controller API
 */
export const boschshcpy = mkPackage(
  nixRaw`pkgs.python2Packages.boschshcpy`,
  "Python module to work with the Bosch Smart Home Controller API",
);

/**
 * Python interface to Amazon Web Services
 */
export const boto = mkPackage(
  nixRaw`pkgs.python2Packages.boto`,
  "Python interface to Amazon Web Services",
);

/**
 * AWS SDK for Python
 */
export const boto3 = mkPackage(
  nixRaw`pkgs.python2Packages.boto3`,
  "AWS SDK for Python",
);

/**
 * Type annotations for boto3
 */
export const boto3_stubs = mkPackage(
  nixRaw`pkgs.python2Packages.boto3-stubs`,
  "Type annotations for boto3",
);

/**
 * A low-level interface to a growing number of Amazon Web Services
 */
export const botocore = mkPackage(
  nixRaw`pkgs.python2Packages.botocore`,
  "A low-level interface to a growing number of Amazon Web Services",
);

/**
 * Type annotations and code completion for botocore
 */
export const botocore_stubs = mkPackage(
  nixRaw`pkgs.python2Packages.botocore-stubs`,
  "Type annotations and code completion for botocore",
);

/**
 * Bayesian Optimization in PyTorch
 */
export const botorch = mkPackage(
  nixRaw`pkgs.python2Packages.botorch`,
  "Bayesian Optimization in PyTorch",
);

/**
 * A fast and simple micro-framework for small web-applications
 */
export const bottle = mkPackage(
  nixRaw`pkgs.python2Packages.bottle`,
  "A fast and simple micro-framework for small web-applications",
);

/**
 * Fast NumPy array functions
 */
export const bottleneck = mkPackage(
  nixRaw`pkgs.python2Packages.bottleneck`,
  "Fast NumPy array functions",
);

/**
 * Context manager that prints a status line at the bottom of a terminal window
 */
export const bottombar = mkPackage(
  nixRaw`pkgs.python2Packages.bottombar`,
  "Context manager that prints a status line at the bottom of a terminal window",
);

/**
 * Tool-box for efficient build and debug for Scientific Computing and Computer Vision
 */
export const boxx = mkPackage(
  nixRaw`pkgs.python2Packages.boxx`,
  "Tool-box for efficient build and debug for Scientific Computing and Computer Vision",
);

/**
 * Computer vision utils for Blender
 */
export const bpycv = mkPackage(
  nixRaw`pkgs.python2Packages.bpycv`,
  "Computer vision utils for Blender",
);

/**
 * A fancy curses interface to the Python interactive interpreter
 */
export const bpython = mkPackage(
  nixRaw`pkgs.python2Packages.bpython`,
  "A fancy curses interface to the Python interactive interpreter",
);

/**
 * 2D plotting library for Jupyter based on Grammar of Graphics
 */
export const bqplot = mkPackage(
  nixRaw`pkgs.python2Packages.bqplot`,
  "2D plotting library for Jupyter based on Grammar of Graphics",
);

/**
 * Grammar of Graphics scales for bqplot and other Jupyter widgets libraries
 */
export const bqscales = mkPackage(
  nixRaw`pkgs.python2Packages.bqscales`,
  "Grammar of Graphics scales for bqplot and other Jupyter widgets libraries",
);

/**
 * Bash-style brace expansion for Python
 */
export const braceexpand = mkPackage(
  nixRaw`pkgs.python2Packages.braceexpand`,
  "Bash-style brace expansion for Python",
);

/**
 * Bash style brace expansion for Python
 */
export const bracex = mkPackage(
  nixRaw`pkgs.python2Packages.bracex`,
  "Bash style brace expansion for Python",
);

/**
 * Python library for integration with Braintree
 */
export const braintree = mkPackage(
  nixRaw`pkgs.python2Packages.braintree`,
  "Python library for integration with Braintree",
);

/**
 * Generate complex HTML+JS pages with Python
 */
export const branca = mkPackage(
  nixRaw`pkgs.python2Packages.branca`,
  "Generate complex HTML+JS pages with Python",
);

/**
 * Library for adding Swagger support to clients and servers
 */
export const bravado_core = mkPackage(
  nixRaw`pkgs.python2Packages.bravado-core`,
  "Library for adding Swagger support to clients and servers",
);

/**
 * Python library for Sony Bravia TV remote control
 */
export const bravia_tv = mkPackage(
  nixRaw`pkgs.python2Packages.bravia-tv`,
  "Python library for Sony Bravia TV remote control",
);

/**
 * Sphinx Doxygen renderer
 */
export const breathe = mkPackage(
  nixRaw`pkgs.python2Packages.breathe`,
  "Sphinx Doxygen renderer",
);

/**
 * Friendly distributed version control system
 */
export const breezy = mkPackage(
  nixRaw`pkgs.python2Packages.breezy`,
  "Friendly distributed version control system",
);

/**
 * Python to communicate with the Brel hubs
 */
export const brelpy = mkPackage(
  nixRaw`pkgs.python2Packages.brelpy`,
  "Python to communicate with the Brel hubs",
);

/**
 * A clock-driven simulator for spiking neural networks
 */
export const brian2 = mkPackage(
  nixRaw`pkgs.python2Packages.brian2`,
  "A clock-driven simulator for spiking neural networks",
);

/**
 * A library for making pulses that can be leveraged with QCoDeS
 */
export const broadbean = mkPackage(
  nixRaw`pkgs.python2Packages.broadbean`,
  "A library for making pulses that can be leveraged with QCoDeS",
);

/**
 * Python API for controlling Broadlink IR controllers
 */
export const broadlink = mkPackage(
  nixRaw`pkgs.python2Packages.broadlink`,
  "Python API for controlling Broadlink IR controllers",
);

/**
 * Python wrapper for getting data from Brother laser and inkjet printers via SNMP
 */
export const brother = mkPackage(
  nixRaw`pkgs.python2Packages.brother`,
  "Python wrapper for getting data from Brother laser and inkjet printers via SNMP",
);

/**
 * Python package for the raster language protocol of the Brother QL series label printers
 */
export const brother_ql = mkPackage(
  nixRaw`pkgs.python2Packages.brother-ql`,
  "Python package for the raster language protocol of the Brother QL series label printers",
);

/**
 * Generic-purpose lossless compression algorithm
 */
export const brotli = mkPackage(
  nixRaw`pkgs.python2Packages.brotli`,
  "Generic-purpose lossless compression algorithm",
);

/**
 * A compression AGSI middleware using brotli
 */
export const brotli_asgi = mkPackage(
  nixRaw`pkgs.python2Packages.brotli-asgi`,
  "A compression AGSI middleware using brotli",
);

/**
 * Python CFFI bindings to the Brotli library
 */
export const brotlicffi = mkPackage(
  nixRaw`pkgs.python2Packages.brotlicffi`,
  "Python CFFI bindings to the Brotli library",
);

/**
 * Python bindings for the reference Brotli encoder/decoder
 */
export const brotlipy = mkPackage(
  nixRaw`pkgs.python2Packages.brotlipy`,
  "Python bindings for the reference Brotli encoder/decoder",
);

/**
 * Python API wrapper for brottsplatskartan.se
 */
export const brottsplatskartan = mkPackage(
  nixRaw`pkgs.python2Packages.brottsplatskartan`,
  "Python API wrapper for brottsplatskartan.se",
);

/**
 * Loads cookies from your browser into a cookiejar object
 */
export const browser_cookie3 = mkPackage(
  nixRaw`pkgs.python2Packages.browser-cookie3`,
  "Loads cookies from your browser into a cookiejar object",
);

/**
 * Unofficial Python SDK for Brunt
 */
export const brunt = mkPackage(
  nixRaw`pkgs.python2Packages.brunt`,
  "Unofficial Python SDK for Brunt",
);

/**
 * Python bindings for Oracle Berkeley DB
 */
export const bsddb3 = mkPackage(
  nixRaw`pkgs.python2Packages.bsddb3`,
  "Python bindings for Oracle Berkeley DB",
);

/**
 * Binary diff and patch using the BSDIFF4-format
 */
export const bsdiff4 = mkPackage(
  nixRaw`pkgs.python2Packages.bsdiff4`,
  "Binary diff and patch using the BSDIFF4-format",
);

/**
 * BSON codec for Python
 */
export const bson = mkPackage(
  nixRaw`pkgs.python2Packages.bson`,
  "BSON codec for Python",
);

        /**
         * Core RL Behaviour Suite. A collection of reinforcement learning
experiments

         */
export const bsuite = mkPackage(
  nixRaw`pkgs.python2Packages.bsuite`,
  "Core RL Behaviour Suite. A collection of reinforcement learning\nexperiments\n",
);

/**
 * Bluetooth Proximity Detection using Python
 */
export const bt_proximity = mkPackage(
  nixRaw`pkgs.python2Packages.bt-proximity`,
  "Bluetooth Proximity Detection using Python",
);

/**
 * Python communication library for Ledger Hardware Wallet products
 */
export const btchip_python = mkPackage(
  nixRaw`pkgs.python2Packages.btchip-python`,
  "Python communication library for Ledger Hardware Wallet products",
);

/**
 * A Generic Driver for Powerful System Tests
 */
export const btest = mkPackage(
  nixRaw`pkgs.python2Packages.btest`,
  "A Generic Driver for Powerful System Tests",
);

/**
 * Library for BThome BLE devices
 */
export const bthome_ble = mkPackage(
  nixRaw`pkgs.python2Packages.bthome-ble`,
  "Library for BThome BLE devices",
);

/**
 * Scalable persistent components
 */
export const btrees = mkPackage(
  nixRaw`pkgs.python2Packages.btrees`,
  "Scalable persistent components",
);

/**
 * Inspect btrfs filesystems
 */
export const btrfs = mkPackage(
  nixRaw`pkgs.python2Packages.btrfs`,
  "Inspect btrfs filesystems",
);

/**
 * Library for managing Btrfs filesystems
 */
export const btrfsutil = mkPackage(
  nixRaw`pkgs.python2Packages.btrfsutil`,
  "Library for managing Btrfs filesystems",
);

/**
 * Retrieve a list of devices from a bt smarthub or bt smarthub 2 on a local network
 */
export const btsmarthub_devicelist = mkPackage(
  nixRaw`pkgs.python2Packages.btsmarthub_devicelist`,
  "Retrieve a list of devices from a bt smarthub or bt smarthub 2 on a local network",
);

/**
 * Library to interact with the Bluez Bluetooth Management API
 */
export const btsocket = mkPackage(
  nixRaw`pkgs.python2Packages.btsocket`,
  "Library to interact with the Bluez Bluetooth Management API",
);

/**
 * Library for interacting with Amazon S3
 */
export const bucketstore = mkPackage(
  nixRaw`pkgs.python2Packages.bucketstore`,
  "Library for interacting with Amazon S3",
);

/**
 * Automatic error monitoring for Python applications
 */
export const bugsnag = mkPackage(
  nixRaw`pkgs.python2Packages.bugsnag`,
  "Automatic error monitoring for Python applications",
);

/**
 * Sync github, bitbucket, bugzilla, and trac issues with taskwarrior
 */
export const bugwarrior = mkPackage(
  nixRaw`pkgs.python2Packages.bugwarrior`,
  "Sync github, bitbucket, bugzilla, and trac issues with taskwarrior",
);

/**
 * Command line interface for Bugzilla
 */
export const bugz = mkPackage(
  nixRaw`pkgs.python2Packages.bugz`,
  "Command line interface for Bugzilla",
);

/**
 * Bugzilla XMLRPC access module
 */
export const bugzilla = mkPackage(
  nixRaw`pkgs.python2Packages.bugzilla`,
  "Bugzilla XMLRPC access module",
);

/**
 * Library and CLI tools for interacting with buienradar
 */
export const buienradar = mkPackage(
  nixRaw`pkgs.python2Packages.buienradar`,
  "Library and CLI tools for interacting with buienradar",
);

/**
 * Simple, correct PEP517 package builder
 */
export const build = mkPackage(
  nixRaw`pkgs.python2Packages.build`,
  "Simple, correct PEP517 package builder",
);

/**
 * Build SSL/TLS trust stores
 */
export const buildcatrust = mkPackage(
  nixRaw`pkgs.python2Packages.buildcatrust`,
  "Build SSL/TLS trust stores",
);

/**
 * Data fitting with bayesian uncertainty analysis
 */
export const bumps = mkPackage(
  nixRaw`pkgs.python2Packages.bumps`,
  "Data fitting with bayesian uncertainty analysis",
);

/**
 * Python dictionary that provides attribute-style access
 */
export const bunch = mkPackage(
  nixRaw`pkgs.python2Packages.bunch`,
  "Python dictionary that provides attribute-style access",
);

/**
 * Easy, Concise and Decentralized Config management with Python
 */
export const bundlewrap = mkPackage(
  nixRaw`pkgs.python2Packages.bundlewrap`,
  "Easy, Concise and Decentralized Config management with Python",
);

/**
 * Expressive busy wait for Python
 */
export const busypie = mkPackage(
  nixRaw`pkgs.python2Packages.busypie`,
  "Expressive busy wait for Python",
);

/**
 * Python bindings to bwa mem aligner
 */
export const bwapy = mkPackage(
  nixRaw`pkgs.python2Packages.bwapy`,
  "Python bindings to bwa mem aligner",
);

/**
 * Various Python utility functions
 */
export const bx_py_utils = mkPackage(
  nixRaw`pkgs.python2Packages.bx-py-utils`,
  "Various Python utility functions",
);

/**
 * Tools for manipulating biological data, particularly multiple sequence alignments
 */
export const bx_python = mkPackage(
  nixRaw`pkgs.python2Packages.bx-python`,
  "Tools for manipulating biological data, particularly multiple sequence alignments",
);

/**
 * Python module to generate and modify bytecode
 */
export const bytecode = mkPackage(
  nixRaw`pkgs.python2Packages.bytecode`,
  "Python module to generate and modify bytecode",
);

/**
 * Python Stream Processing
 */
export const bytewax = mkPackage(
  nixRaw`pkgs.python2Packages.bytewax`,
  "Python Stream Processing",
);

/**
 * Bz2file is a Python library for reading and writing bzip2-compressed files
 */
export const bz2file = mkPackage(
  nixRaw`pkgs.python2Packages.bz2file`,
  "Bz2file is a Python library for reading and writing bzip2-compressed files",
);

/**
 * Httplib2 caching for requests
 */
export const cachecontrol = mkPackage(
  nixRaw`pkgs.python2Packages.cachecontrol`,
  "Httplib2 caching for requests",
);

/**
 * A decorator for caching properties in classes
 */
export const cached_property = mkPackage(
  nixRaw`pkgs.python2Packages.cached-property`,
  "A decorator for caching properties in classes",
);

/**
 * Collection of cache libraries in the same API interface
 */
export const cachelib = mkPackage(
  nixRaw`pkgs.python2Packages.cachelib`,
  "Collection of cache libraries in the same API interface",
);

/**
 * Extensible memoizing collections and decorators
 */
export const cachetools = mkPackage(
  nixRaw`pkgs.python2Packages.cachetools`,
  "Extensible memoizing collections and decorators",
);

/**
 * Caching based on computation time and storage space
 */
export const cachey = mkPackage(
  nixRaw`pkgs.python2Packages.cachey`,
  "Caching based on computation time and storage space",
);

/**
 * The httplib2 caching algorithms packaged up for use with requests
 */
export const cacheyou = mkPackage(
  nixRaw`pkgs.python2Packages.cacheyou`,
  "The httplib2 caching algorithms packaged up for use with requests",
);

/**
 * Persistent, stale-free, local and cross-machine caching for functions
 */
export const cachier = mkPackage(
  nixRaw`pkgs.python2Packages.cachier`,
  "Persistent, stale-free, local and cross-machine caching for functions",
);

/**
 * Cachy provides a simple yet effective caching library
 */
export const cachy = mkPackage(
  nixRaw`pkgs.python2Packages.cachy`,
  "Cachy provides a simple yet effective caching library",
);

/**
 * Deep learning framework
 */
export const caffe = mkPackage(
  nixRaw`pkgs.python2Packages.caffe`,
  "Deep learning framework",
);

/**
 * Deep learning framework
 */
export const caffeWithCuda = mkPackage(
  nixRaw`pkgs.python2Packages.caffeWithCuda`,
  "Deep learning framework",
);

/**
 * File operations with asyncio support
 */
export const caio = mkPackage(
  nixRaw`pkgs.python2Packages.caio`,
  "File operations with asyncio support",
);

/**
 * cffi-based cairo bindings for Python
 */
export const cairocffi = mkPackage(
  nixRaw`pkgs.python2Packages.cairocffi`,
  "cffi-based cairo bindings for Python",
);

/**
 * SVG converter based on Cairo
 */
export const cairosvg = mkPackage(
  nixRaw`pkgs.python2Packages.cairosvg`,
  "SVG converter based on Cairo",
);

/**
 * CalDAV (RFC4791) client library
 */
export const caldav = mkPackage(
  nixRaw`pkgs.python2Packages.caldav`,
  "CalDAV (RFC4791) client library",
);

/**
 * Argument matchers for unittest.mock
 */
export const callee = mkPackage(
  nixRaw`pkgs.python2Packages.callee`,
  "Argument matchers for unittest.mock",
);

/**
 * Framework for building toolchains and utilities for working with the Node.js ecosystem
 */
export const calmjs = mkPackage(
  nixRaw`pkgs.python2Packages.calmjs`,
  "Framework for building toolchains and utilities for working with the Node.js ecosystem",
);

/**
 * Various parsers for ECMA standards
 */
export const calmjs_parse = mkPackage(
  nixRaw`pkgs.python2Packages.calmjs-parse`,
  "Various parsers for ECMA standards",
);

/**
 * Types for the calmjs framework
 */
export const calmjs_types = mkPackage(
  nixRaw`pkgs.python2Packages.calmjs-types`,
  "Types for the calmjs framework",
);

/**
 * Setuptools extension for CalVer package versions
 */
export const calver = mkPackage(
  nixRaw`pkgs.python2Packages.calver`,
  "Setuptools extension for CalVer package versions",
);

/**
 * Tools for Jupyter and Python
 */
export const calysto = mkPackage(
  nixRaw`pkgs.python2Packages.calysto`,
  "Tools for Jupyter and Python",
);

/**
 * A Scheme kernel for Jupyter that can use Python libraries
 */
export const calysto_scheme = mkPackage(
  nixRaw`pkgs.python2Packages.calysto-scheme`,
  "A Scheme kernel for Jupyter that can use Python libraries",
);

/**
 * Client for the Meilisearch API
 */
export const camel_converter = mkPackage(
  nixRaw`pkgs.python2Packages.camel-converter`,
  "Client for the Meilisearch API",
);

/**
 * A Python library to extract tabular data from PDFs
 */
export const camelot = mkPackage(
  nixRaw`pkgs.python2Packages.camelot`,
  "A Python library to extract tabular data from PDFs",
);

/**
 * CAN support for Python
 */
export const can = mkPackage(
  nixRaw`pkgs.python2Packages.can`,
  "CAN support for Python",
);

/**
 * A component orchestration engine
 */
export const canals = mkPackage(
  nixRaw`pkgs.python2Packages.canals`,
  "A component orchestration engine",
);

/**
 * Support and convert several CAN (Controller Area Network) database formats .arxml .dbc .dbf .kcd .sym fibex xls(x)
 */
export const canmatrix = mkPackage(
  nixRaw`pkgs.python2Packages.canmatrix`,
  "Support and convert several CAN (Controller Area Network) database formats .arxml .dbc .dbf .kcd .sym fibex xls(x)",
);

/**
 * Encodes objects and arrays as RFC 7159 JSON
 */
export const canonicaljson = mkPackage(
  nixRaw`pkgs.python2Packages.canonicaljson`,
  "Encodes objects and arrays as RFC 7159 JSON",
);

/**
 * CANopen stack implementation
 */
export const canopen = mkPackage(
  nixRaw`pkgs.python2Packages.canopen`,
  "CANopen stack implementation",
);

/**
 * CAN bus tools.
 */
export const cantools = mkPackage(
  nixRaw`pkgs.python2Packages.cantools`,
  "CAN bus tools.",
);

/**
 * Python bindings for Capstone disassembly engine
 */
export const capstone = mkPackage(
  nixRaw`pkgs.python2Packages.capstone`,
  "Python bindings for Capstone disassembly engine",
);

/**
 * A captcha library that generates audio and image CAPTCHAs
 */
export const captcha = mkPackage(
  nixRaw`pkgs.python2Packages.captcha`,
  "A captcha library that generates audio and image CAPTCHAs",
);

/**
 * Easily capture stdout/stderr of the current process and subprocesses
 */
export const capturer = mkPackage(
  nixRaw`pkgs.python2Packages.capturer`,
  "Easily capture stdout/stderr of the current process and subprocesses",
);

/**
 * Backend data caching and persistence daemon for Graphite
 */
export const carbon = mkPackage(
  nixRaw`pkgs.python2Packages.carbon`,
  "Backend data caching and persistence daemon for Graphite",
);

/**
 * Python module for the CaRT Neutering format
 */
export const cart = mkPackage(
  nixRaw`pkgs.python2Packages.cart`,
  "Python module for the CaRT Neutering format",
);

/**
 * Process geospatial data to create maps and perform analyses
 */
export const cartopy = mkPackage(
  nixRaw`pkgs.python2Packages.cartopy`,
  "Process geospatial data to create maps and perform analyses",
);

/**
 * Dask-based reader for CASA data
 */
export const casa_formats_io = mkPackage(
  nixRaw`pkgs.python2Packages.casa-formats-io`,
  "Dask-based reader for CASA data",
);

/**
 * Authorization library that supports access control models like ACL, RBAC and ABAC
 */
export const casbin = mkPackage(
  nixRaw`pkgs.python2Packages.casbin`,
  "Authorization library that supports access control models like ACL, RBAC and ABAC",
);

/**
 * Utilities for unittests handling
 */
export const case_ = mkPackage(
  nixRaw`pkgs.python2Packages.case`,
  "Utilities for unittests handling",
);

/**
 * A Python client driver for Apache Cassandra
 */
export const cassandra_driver = mkPackage(
  nixRaw`pkgs.python2Packages.cassandra-driver`,
  "A Python client driver for Apache Cassandra",
);

/**
 * A collection of readers for CASTEP binary outputs
 */
export const castepxbin = mkPackage(
  nixRaw`pkgs.python2Packages.castepxbin`,
  "A collection of readers for CASTEP binary outputs",
);

/**
 * Interact with the Youtube Chromecast api
 */
export const casttube = mkPackage(
  nixRaw`pkgs.python2Packages.casttube`,
  "Interact with the Youtube Chromecast api",
);

/**
 * Tiny library for adding function or object registries
 */
export const catalogue = mkPackage(
  nixRaw`pkgs.python2Packages.catalogue`,
  "Tiny library for adding function or object registries",
);

/**
 * High-performance library for gradient boosting on decision trees
 */
export const catboost = mkPackage(
  nixRaw`pkgs.python2Packages.catboost`,
  "High-performance library for gradient boosting on decision trees",
);

/**
 * Soothing pastel theme for Python
 */
export const catppuccin = mkPackage(
  nixRaw`pkgs.python2Packages.catppuccin`,
  "Soothing pastel theme for Python",
);

/**
 * Python custom class converters for attrs
 */
export const cattrs = mkPackage(
  nixRaw`pkgs.python2Packages.cattrs`,
  "Python custom class converters for attrs",
);

/**
 * Command-line program to draw animated colored circles in the terminal
 */
export const cbeams = mkPackage(
  nixRaw`pkgs.python2Packages.cbeams`,
  "Command-line program to draw animated colored circles in the terminal",
);

/**
 * Concise Binary Object Representation (CBOR) library
 */
export const cbor = mkPackage(
  nixRaw`pkgs.python2Packages.cbor`,
  "Concise Binary Object Representation (CBOR) library",
);

/**
 * Python CBOR (de)serializer with extensive tag support
 */
export const cbor2 = mkPackage(
  nixRaw`pkgs.python2Packages.cbor2`,
  "Python CBOR (de)serializer with extensive tag support",
);

/**
 * Python Kerberos 5 Credential Cache Collection Utilities
 */
export const cccolutils = mkPackage(
  nixRaw`pkgs.python2Packages.cccolutils`,
  "Python Kerberos 5 Credential Cache Collection Utilities",
);

/**
 * Python client for performing REST calls to configurable data curation system (CDCS) databases
 */
export const cdcs = mkPackage(
  nixRaw`pkgs.python2Packages.cdcs`,
  "Python client for performing REST calls to configurable data curation system (CDCS) databases",
);

/**
 * Distributed task queue
 */
export const celery = mkPackage(
  nixRaw`pkgs.python2Packages.celery`,
  "Distributed task queue",
);

/**
 * Database-backed Periodic Tasks
 */
export const celery_redbeat = mkPackage(
  nixRaw`pkgs.python2Packages.celery-redbeat`,
  "Database-backed Periodic Tasks",
);

/**
 * Seamlessly prevent duplicate executions of celery tasks
 */
export const celery_singleton = mkPackage(
  nixRaw`pkgs.python2Packages.celery-singleton`,
  "Seamlessly prevent duplicate executions of celery tasks",
);

/**
 * PEP-484 stubs for Celery
 */
export const celery_types = mkPackage(
  nixRaw`pkgs.python2Packages.celery-types`,
  "PEP-484 stubs for Celery",
);

/**
 * CLI Application Framework for Python
 */
export const cement = mkPackage(
  nixRaw`pkgs.python2Packages.cement`,
  "CLI Application Framework for Python",
);

/**
 * Module for interacting with CEMM devices
 */
export const cemm = mkPackage(
  nixRaw`pkgs.python2Packages.cemm`,
  "Module for interacting with CEMM devices",
);

/**
 * Python API wrapper for the Censys Search Engine (censys.io)
 */
export const censys = mkPackage(
  nixRaw`pkgs.python2Packages.censys`,
  "Python API wrapper for the Censys Search Engine (censys.io)",
);

/**
 * Controller library that allows applications to interact with Tor
 */
export const cepa = mkPackage(
  nixRaw`pkgs.python2Packages.cepa`,
  "Controller library that allows applications to interact with Tor",
);

/**
 * Schema and data validation tool for Python dictionaries
 */
export const cerberus = mkPackage(
  nixRaw`pkgs.python2Packages.cerberus`,
  "Schema and data validation tool for Python dictionaries",
);

/**
 * Resolve / obtain the certificate intermediates of a x509 certificate
 */
export const cert_chain_resolver = mkPackage(
  nixRaw`pkgs.python2Packages.cert-chain-resolver`,
  "Resolve / obtain the certificate intermediates of a x509 certificate",
);

/**
 * Simple CertificateAuthority and host certificate creation, useful for man-in-the-middle HTTPS proxy
 */
export const certauth = mkPackage(
  nixRaw`pkgs.python2Packages.certauth`,
  "Simple CertificateAuthority and host certificate creation, useful for man-in-the-middle HTTPS proxy",
);

/**
 * ACME client that can obtain certs and extensibly update server configurations
 */
export const certbot = mkPackage(
  nixRaw`pkgs.python2Packages.certbot`,
  "ACME client that can obtain certs and extensibly update server configurations",
);

/**
 * Cloudflare DNS Authenticator plugin for Certbot
 */
export const certbot_dns_cloudflare = mkPackage(
  nixRaw`pkgs.python2Packages.certbot-dns-cloudflare`,
  "Cloudflare DNS Authenticator plugin for Certbot",
);

/**
 * Google Cloud DNS Authenticator plugin for Certbot
 */
export const certbot_dns_google = mkPackage(
  nixRaw`pkgs.python2Packages.certbot-dns-google`,
  "Google Cloud DNS Authenticator plugin for Certbot",
);

/**
 * INWX DNS Authenticator plugin for Certbot
 */
export const certbot_dns_inwx = mkPackage(
  nixRaw`pkgs.python2Packages.certbot-dns-inwx`,
  "INWX DNS Authenticator plugin for Certbot",
);

/**
 * OVH DNS Authenticator plugin for Certbot
 */
export const certbot_dns_ovh = mkPackage(
  nixRaw`pkgs.python2Packages.certbot-dns-ovh`,
  "OVH DNS Authenticator plugin for Certbot",
);

/**
 * RFC 2136 DNS Authenticator plugin for Certbot
 */
export const certbot_dns_rfc2136 = mkPackage(
  nixRaw`pkgs.python2Packages.certbot-dns-rfc2136`,
  "RFC 2136 DNS Authenticator plugin for Certbot",
);

/**
 * Route53 DNS Authenticator plugin for Certbot
 */
export const certbot_dns_route53 = mkPackage(
  nixRaw`pkgs.python2Packages.certbot-dns-route53`,
  "Route53 DNS Authenticator plugin for Certbot",
);

/**
 * Python package for providing Mozilla's CA Bundle
 */
export const certifi = mkPackage(
  nixRaw`pkgs.python2Packages.certifi`,
  "Python package for providing Mozilla's CA Bundle",
);

/**
 * wrapper for pyOpenSSL
 */
export const certipy = mkPackage(
  nixRaw`pkgs.python2Packages.certipy`,
  "wrapper for pyOpenSSL",
);

/**
 * Library and CLI tool to enumerate and abuse misconfigurations in Active Directory Certificate Services
 */
export const certipy_ad = mkPackage(
  nixRaw`pkgs.python2Packages.certipy-ad`,
  "Library and CLI tool to enumerate and abuse misconfigurations in Active Directory Certificate Services",
);

/**
 * Quickly construct, mock & deploy PKI test configurations using simple declarative configuration
 */
export const certomancer = mkPackage(
  nixRaw`pkgs.python2Packages.certomancer`,
  "Quickly construct, mock & deploy PKI test configurations using simple declarative configuration",
);

/**
 * Validates X.509 certificates and paths
 */
export const certvalidator = mkPackage(
  nixRaw`pkgs.python2Packages.certvalidator`,
  "Validates X.509 certificates and paths",
);

/**
 * Mathematical expression parser, cython wrapper
 */
export const cexprtk = mkPackage(
  nixRaw`pkgs.python2Packages.cexprtk`,
  "Mathematical expression parser, cython wrapper",
);

/**
 * Standalone CFF subroutinizer based on AFDKO tx
 */
export const cffsubr = mkPackage(
  nixRaw`pkgs.python2Packages.cffsubr`,
  "Standalone CFF subroutinizer based on AFDKO tx",
);

/**
 * Validate configuration and produce human readable error messages
 */
export const cfgv = mkPackage(
  nixRaw`pkgs.python2Packages.cfgv`,
  "Validate configuration and produce human readable error messages",
);

/**
 * Tool for converting AWS CloudFormation templates between JSON and YAML formats
 */
export const cfn_flip = mkPackage(
  nixRaw`pkgs.python2Packages.cfn-flip`,
  "Tool for converting AWS CloudFormation templates between JSON and YAML formats",
);

/**
 * Checks cloudformation for practices and behaviour that could potentially be improved
 */
export const cfn_lint = mkPackage(
  nixRaw`pkgs.python2Packages.cfn-lint`,
  "Checks cloudformation for practices and behaviour that could potentially be improved",
);

/**
 * A Python module to bypass Cloudflare's anti-bot page
 */
export const cfscrape = mkPackage(
  nixRaw`pkgs.python2Packages.cfscrape`,
  "A Python module to bypass Cloudflare's anti-bot page",
);

/**
 * Time-handling functionality from netcdf4-python
 */
export const cftime = mkPackage(
  nixRaw`pkgs.python2Packages.cftime`,
  "Time-handling functionality from netcdf4-python",
);

/**
 * C/C++ source generation from an AST
 */
export const cgen = mkPackage(
  nixRaw`pkgs.python2Packages.cgen`,
  "C/C++ source generation from an AST",
);

/**
 * Utility tools for control groups of Linux
 */
export const cgroup_utils = mkPackage(
  nixRaw`pkgs.python2Packages.cgroup-utils`,
  "Utility tools for control groups of Linux",
);

/**
 * Module that implements ChaCha20Poly1305
 */
export const chacha20poly1305 = mkPackage(
  nixRaw`pkgs.python2Packages.chacha20poly1305`,
  "Module that implements ChaCha20Poly1305",
);

/**
 * ChaCha20Poly1305 that is reuseable for asyncio
 */
export const chacha20poly1305_reuseable = mkPackage(
  nixRaw`pkgs.python2Packages.chacha20poly1305-reuseable`,
  "ChaCha20Poly1305 that is reuseable for asyncio",
);

/**
 * Mocking, stubbing and spying framework for python
 */
export const chai = mkPackage(
  nixRaw`pkgs.python2Packages.chai`,
  "Mocking, stubbing and spying framework for python",
);

/**
 * A flexible framework of neural networks for deep learning
 */
export const chainer = mkPackage(
  nixRaw`pkgs.python2Packages.chainer`,
  "A flexible framework of neural networks for deep learning",
);

/**
 * Backport/clone of ChainMap
 */
export const chainmap = mkPackage(
  nixRaw`pkgs.python2Packages.chainmap`,
  "Backport/clone of ChainMap",
);

/**
 * Python Serverless Microframework for AWS
 */
export const chalice = mkPackage(
  nixRaw`pkgs.python2Packages.chalice`,
  "Python Serverless Microframework for AWS",
);

/**
 * Fast HTML/XML Template Compiler
 */
export const chameleon = mkPackage(
  nixRaw`pkgs.python2Packages.chameleon`,
  "Fast HTML/XML Template Compiler",
);

/**
 * Brings event-driven capabilities to Django with a channel system
 */
export const channels = mkPackage(
  nixRaw`pkgs.python2Packages.channels`,
  "Brings event-driven capabilities to Django with a channel system",
);

/**
 * Redis-backed ASGI channel layer implementation
 */
export const channels_redis = mkPackage(
  nixRaw`pkgs.python2Packages.channels-redis`,
  "Redis-backed ASGI channel layer implementation",
);

/**
 * Python attributes without boilerplate
 */
export const characteristic = mkPackage(
  nixRaw`pkgs.python2Packages.characteristic`,
  "Python attributes without boilerplate",
);

/**
 * Universal encoding detector
 */
export const chardet = mkPackage(
  nixRaw`pkgs.python2Packages.chardet`,
  "Universal encoding detector",
);

/**
 * Python module for encoding and language detection
 */
export const charset_normalizer = mkPackage(
  nixRaw`pkgs.python2Packages.charset-normalizer`,
  "Python module for encoding and language detection",
);

/**
 * Utilities for interfacing with Plotly's Chart Studio service
 */
export const chart_studio = mkPackage(
  nixRaw`pkgs.python2Packages.chart-studio`,
  "Utilities for interfacing with Plotly's Chart Studio service",
);

/**
 * A simple tool used to retrieve chat messages from livestreams, videos, clips and past broadcasts
 */
export const chat_downloader = mkPackage(
  nixRaw`pkgs.python2Packages.chat-downloader`,
  "A simple tool used to retrieve chat messages from livestreams, videos, clips and past broadcasts",
);

/**
 * Check MANIFEST.in in a Python source package for completeness
 */
export const check_manifest = mkPackage(
  nixRaw`pkgs.python2Packages.check-manifest`,
  "Check MANIFEST.in in a Python source package for completeness",
);

/**
 * A parser for SPF and DMARC DNS records
 */
export const checkdmarc = mkPackage(
  nixRaw`pkgs.python2Packages.checkdmarc`,
  "A parser for SPF and DMARC DNS records",
);

/**
 * Simple package to compute a single deterministic hash of the file contents of a directory
 */
export const checksumdir = mkPackage(
  nixRaw`pkgs.python2Packages.checksumdir`,
  "Simple package to compute a single deterministic hash of the file contents of a directory",
);

/**
 * A template engine and code generation tool
 */
export const cheetah3 = mkPackage(
  nixRaw`pkgs.python2Packages.cheetah3`,
  "A template engine and code generation tool",
);

/**
 * High-performance, pure-Python HTTP
 */
export const cheroot = mkPackage(
  nixRaw`pkgs.python2Packages.cheroot`,
  "High-performance, pure-Python HTTP",
);

/**
 * Object-oriented HTTP framework
 */
export const cherrypy = mkPackage(
  nixRaw`pkgs.python2Packages.cherrypy`,
  "Object-oriented HTTP framework",
);

/**
 * A chess library with move generation, move validation, and support for common formats
 */
export const chess = mkPackage(
  nixRaw`pkgs.python2Packages.chess`,
  "A chess library with move generation, move validation, and support for common formats",
);

/**
 * A python implementation of the mustache templating language
 */
export const chevron = mkPackage(
  nixRaw`pkgs.python2Packages.chevron`,
  "A python implementation of the mustache templating language",
);

/**
 * Chex is a library of utilities for helping to write reliable JAX code.
 */
export const chex = mkPackage(
  nixRaw`pkgs.python2Packages.chex`,
  "Chex is a library of utilities for helping to write reliable JAX code.",
);

/**
 * Rust crate & wheel with consensus code
 */
export const chia_rs = mkPackage(
  nixRaw`pkgs.python2Packages.chia-rs`,
  "Rust crate & wheel with consensus code",
);

/**
 * Chia's implementation of BIP 158
 */
export const chiabip158 = mkPackage(
  nixRaw`pkgs.python2Packages.chiabip158`,
  "Chia's implementation of BIP 158",
);

/**
 * Chia proof of space library
 */
export const chiapos = mkPackage(
  nixRaw`pkgs.python2Packages.chiapos`,
  "Chia proof of space library",
);

/**
 * Chia verifiable delay function utilities
 */
export const chiavdf = mkPackage(
  nixRaw`pkgs.python2Packages.chiavdf`,
  "Chia verifiable delay function utilities",
);

/**
 * ChirpStack gRPC API message and service wrappers for Python
 */
export const chirpstack_api = mkPackage(
  nixRaw`pkgs.python2Packages.chirpstack-api`,
  "ChirpStack gRPC API message and service wrappers for Python",
);

/**
 * PySpark test helper methods with beautiful error messages
 */
export const chispa = mkPackage(
  nixRaw`pkgs.python2Packages.chispa`,
  "PySpark test helper methods with beautiful error messages",
);

/**
 * Facilitate effortless color terminal output
 */
export const chromaprint = mkPackage(
  nixRaw`pkgs.python2Packages.chromaprint`,
  "Facilitate effortless color terminal output",
);

/**
 * Gather continuous integration information on the fly
 */
export const ci_info = mkPackage(
  nixRaw`pkgs.python2Packages.ci-info`,
  "Gather continuous integration information on the fly",
);

/**
 * Library for working with Continuous Integration services
 */
export const ci_py = mkPackage(
  nixRaw`pkgs.python2Packages.ci-py`,
  "Library for working with Continuous Integration services",
);

/**
 * A Python package for retrieving and managing the data of the IMDb movie database about movies and people
 */
export const cinemagoer = mkPackage(
  nixRaw`pkgs.python2Packages.cinemagoer`,
  "A Python package for retrieving and managing the data of the IMDb movie database about movies and people",
);

/**
 * Module for Unify Circuit API webhooks
 */
export const circuit_webhook = mkPackage(
  nixRaw`pkgs.python2Packages.circuit-webhook`,
  "Module for Unify Circuit API webhooks",
);

/**
 * Python Circuit Breaker implementation
 */
export const circuitbreaker = mkPackage(
  nixRaw`pkgs.python2Packages.circuitbreaker`,
  "Python Circuit Breaker implementation",
);

/**
 * A process and socket manager
 */
export const circus = mkPackage(
  nixRaw`pkgs.python2Packages.circus`,
  "A process and socket manager",
);

/**
 * Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits
 */
export const cirq = mkPackage(
  nixRaw`pkgs.python2Packages.cirq`,
  "Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits",
);

/**
 * Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits
 */
export const cirq_aqt = mkPackage(
  nixRaw`pkgs.python2Packages.cirq-aqt`,
  "Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits",
);

/**
 * Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits
 */
export const cirq_core = mkPackage(
  nixRaw`pkgs.python2Packages.cirq-core`,
  "Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits",
);

/**
 * Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits
 */
export const cirq_ft = mkPackage(
  nixRaw`pkgs.python2Packages.cirq-ft`,
  "Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits",
);

/**
 * Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits
 */
export const cirq_google = mkPackage(
  nixRaw`pkgs.python2Packages.cirq-google`,
  "Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits",
);

/**
 * Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits
 */
export const cirq_ionq = mkPackage(
  nixRaw`pkgs.python2Packages.cirq-ionq`,
  "Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits",
);

/**
 * Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits
 */
export const cirq_pasqal = mkPackage(
  nixRaw`pkgs.python2Packages.cirq-pasqal`,
  "Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits",
);

/**
 * Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits
 */
export const cirq_rigetti = mkPackage(
  nixRaw`pkgs.python2Packages.cirq-rigetti`,
  "Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits",
);

/**
 * Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits
 */
export const cirq_web = mkPackage(
  nixRaw`pkgs.python2Packages.cirq-web`,
  "Framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits",
);

/**
 * Module to parse, audit, query, build, and modify Cisco IOS-style configurations
 */
export const ciscoconfparse = mkPackage(
  nixRaw`pkgs.python2Packages.ciscoconfparse`,
  "Module to parse, audit, query, build, and modify Cisco IOS-style configurations",
);

/**
 * Module to interact with Cisco Mobility Express APIs to fetch connected devices
 */
export const ciscomobilityexpress = mkPackage(
  nixRaw`pkgs.python2Packages.ciscomobilityexpress`,
  "Module to interact with Cisco Mobility Express APIs to fetch connected devices",
);

/**
 * Fast ISO8601 date time parser for Python written in C
 */
export const ciso8601 = mkPackage(
  nixRaw`pkgs.python2Packages.ciso8601`,
  "Fast ISO8601 date time parser for Python written in C",
);

/**
 * Citation Style Language (CSL) parser for Python
 */
export const citeproc_py = mkPackage(
  nixRaw`pkgs.python2Packages.citeproc-py`,
  "Citation Style Language (CSL) parser for Python",
);

/**
 * A library for wrapping and filling CJK text
 */
export const cjkwrap = mkPackage(
  nixRaw`pkgs.python2Packages.cjkwrap`,
  "A library for wrapping and filling CJK text",
);

/**
 * Communicate with your Coldcard using Python
 */
export const ckcc_protocol = mkPackage(
  nixRaw`pkgs.python2Packages.ckcc-protocol`,
  "Communicate with your Coldcard using Python",
);

/**
 * Clarifai Python Utilities
 */
export const clarifai = mkPackage(
  nixRaw`pkgs.python2Packages.clarifai`,
  "Clarifai Python Utilities",
);

/**
 * Clarifai gRPC API Client
 */
export const clarifai_grpc = mkPackage(
  nixRaw`pkgs.python2Packages.clarifai-grpc`,
  "Clarifai gRPC API Client",
);

/**
 * Python abstraction layer for constraint solvers
 */
export const claripy = mkPackage(
  nixRaw`pkgs.python2Packages.claripy`,
  "Python abstraction layer for constraint solvers",
);

/**
 * Extract attributes docstrings defined in various ways
 */
export const class_doc = mkPackage(
  nixRaw`pkgs.python2Packages.class-doc`,
  "Extract attributes docstrings defined in various ways",
);

/**
 * Utilities for refactoring imports in python-like syntax
 */
export const classify_imports = mkPackage(
  nixRaw`pkgs.python2Packages.classify-imports`,
  "Utilities for refactoring imports in python-like syntax",
);

/**
 * CFFI bindings around Google Chromium's embedded compact language detection library (CLD2)
 */
export const cld2_cffi = mkPackage(
  nixRaw`pkgs.python2Packages.cld2-cffi`,
  "CFFI bindings around Google Chromium's embedded compact language detection library (CLD2)",
);

/**
 * Python loader for many binary formats
 */
export const cle = mkPackage(
  nixRaw`pkgs.python2Packages.cle`,
  "Python loader for many binary formats",
);

/**
 * PyTorch - FID calculation with proper image resizing and quantization steps [CVPR 2022]
 */
export const clean_fid = mkPackage(
  nixRaw`pkgs.python2Packages.clean-fid`,
  "PyTorch - FID calculation with proper image resizing and quantization steps [CVPR 2022]",
);

/**
 * The standard data-centric AI package for data quality and machine learning with messy, real-world data and labels.
 */
export const cleanlab = mkPackage(
  nixRaw`pkgs.python2Packages.cleanlab`,
  "The standard data-centric AI package for data quality and machine learning with messy, real-world data and labels.",
);

/**
 * Allows you to create beautiful and testable command-line interfaces
 */
export const cleo = mkPackage(
  nixRaw`pkgs.python2Packages.cleo`,
  "Allows you to create beautiful and testable command-line interfaces",
);

/**
 * CleverCSV is a Python package for handling messy CSV files
 */
export const clevercsv = mkPackage(
  nixRaw`pkgs.python2Packages.clevercsv`,
  "CleverCSV is a Python package for handling messy CSV files",
);

/**
 * Command line tool to search snippets on Commandlinefu.com
 */
export const clf = mkPackage(
  nixRaw`pkgs.python2Packages.clf`,
  "Command line tool to search snippets on Commandlinefu.com",
);

/**
 * Python helpers for common CLI tasks
 */
export const cli_helpers = mkPackage(
  nixRaw`pkgs.python2Packages.cli-helpers`,
  "Python helpers for common CLI tasks",
);

/**
 * Build a simple command-line interface from your functions :computer:
 */
export const cliche = mkPackage(
  nixRaw`pkgs.python2Packages.cliche`,
  "Build a simple command-line interface from your functions :computer:",
);

/**
 * Create beautiful command line interfaces in Python
 */
export const click = mkPackage(
  nixRaw`pkgs.python2Packages.click`,
  "Create beautiful command line interfaces in Python",
);

/**
 * Enable aliases for click
 */
export const click_aliases = mkPackage(
  nixRaw`pkgs.python2Packages.click-aliases`,
  "Enable aliases for click",
);

/**
 * click plugin to show the command tree of your CLI
 */
export const click_command_tree = mkPackage(
  nixRaw`pkgs.python2Packages.click-command-tree`,
  "click plugin to show the command tree of your CLI",
);

/**
 * Add or enhance bash, fish, zsh and powershell completion in Click
 */
export const click_completion = mkPackage(
  nixRaw`pkgs.python2Packages.click-completion`,
  "Add or enhance bash, fish, zsh and powershell completion in Click",
);

/**
 * Add support for commands that use configuration files to Click
 */
export const click_configfile = mkPackage(
  nixRaw`pkgs.python2Packages.click-configfile`,
  "Add support for commands that use configuration files to Click",
);

/**
 * Datetime type support for click.
 */
export const click_datetime = mkPackage(
  nixRaw`pkgs.python2Packages.click-datetime`,
  "Datetime type support for click.",
);

/**
 * Group to invoke a command without explicit subcommand name
 */
export const click_default_group = mkPackage(
  nixRaw`pkgs.python2Packages.click-default-group`,
  "Group to invoke a command without explicit subcommand name",
);

/**
 * Enable git-like did-you-mean feature in click
 */
export const click_didyoumean = mkPackage(
  nixRaw`pkgs.python2Packages.click-didyoumean`,
  "Enable git-like did-you-mean feature in click",
);

/**
 * Colorization of help messages in Click
 */
export const click_help_colors = mkPackage(
  nixRaw`pkgs.python2Packages.click-help-colors`,
  "Colorization of help messages in Click",
);

/**
 * Logging integration for Click
 */
export const click_log = mkPackage(
  nixRaw`pkgs.python2Packages.click-log`,
  "Logging integration for Click",
);

/**
 * Odoo scripting helper library
 */
export const click_odoo = mkPackage(
  nixRaw`pkgs.python2Packages.click-odoo`,
  "Odoo scripting helper library",
);

/**
 * Collection of community-maintained scripts for Odoo maintenance
 */
export const click_odoo_contrib = mkPackage(
  nixRaw`pkgs.python2Packages.click-odoo-contrib`,
  "Collection of community-maintained scripts for Odoo maintenance",
);

/**
 * Option groups missing in Click
 */
export const click_option_group = mkPackage(
  nixRaw`pkgs.python2Packages.click-option-group`,
  "Option groups missing in Click",
);

/**
 * An extension module for click to enable registering CLI commands
 */
export const click_plugins = mkPackage(
  nixRaw`pkgs.python2Packages.click-plugins`,
  "An extension module for click to enable registering CLI commands",
);

/**
 * Subcommand REPL for click apps
 */
export const click_repl = mkPackage(
  nixRaw`pkgs.python2Packages.click-repl`,
  "Subcommand REPL for click apps",
);

/**
 * An extension to click that easily turns your click app into a shell utility
 */
export const click_shell = mkPackage(
  nixRaw`pkgs.python2Packages.click-shell`,
  "An extension to click that easily turns your click app into a shell utility",
);

/**
 * Add support for showwing that command line app is active to Click
 */
export const click_spinner = mkPackage(
  nixRaw`pkgs.python2Packages.click-spinner`,
  "Add support for showwing that command line app is active to Click",
);

/**
 * Multithreaded Click apps made easy
 */
export const click_threading = mkPackage(
  nixRaw`pkgs.python2Packages.click-threading`,
  "Multithreaded Click apps made easy",
);

/**
 * Click command line utilities
 */
export const clickclick = mkPackage(
  nixRaw`pkgs.python2Packages.clickclick`,
  "Click command line utilities",
);

/**
 * The hassle-free cursor building toolbox
 */
export const clickgen = mkPackage(
  nixRaw`pkgs.python2Packages.clickgen`,
  "The hassle-free cursor building toolbox",
);

/**
 * Python-bindings for CityHash, a fast non-cryptographic hash algorithm
 */
export const clickhouse_cityhash = mkPackage(
  nixRaw`pkgs.python2Packages.clickhouse-cityhash`,
  "Python-bindings for CityHash, a fast non-cryptographic hash algorithm",
);

/**
 * A third-party client for the Clickhouse DBMS server
 */
export const clickhouse_cli = mkPackage(
  nixRaw`pkgs.python2Packages.clickhouse-cli`,
  "A third-party client for the Clickhouse DBMS server",
);

/**
 * ClickHouse Database Core Driver for Python, Pandas, and Superset
 */
export const clickhouse_connect = mkPackage(
  nixRaw`pkgs.python2Packages.clickhouse-connect`,
  "ClickHouse Database Core Driver for Python, Pandas, and Superset",
);

/**
 * Python driver with native interface for ClickHouse
 */
export const clickhouse_driver = mkPackage(
  nixRaw`pkgs.python2Packages.clickhouse-driver`,
  "Python driver with native interface for ClickHouse",
);

/**
 * Command Line Interface Formulation Framework
 */
export const cliff = mkPackage(
  nixRaw`pkgs.python2Packages.cliff`,
  "Command Line Interface Formulation Framework",
);

/**
 * Numerical Geometric Algebra Module
 */
export const clifford = mkPackage(
  nixRaw`pkgs.python2Packages.clifford`,
  "Numerical Geometric Algebra Module",
);

/**
 * Click params for command line interfaces to GeoJSON
 */
export const cligj = mkPackage(
  nixRaw`pkgs.python2Packages.cligj`,
  "Click params for command line interfaces to GeoJSON",
);

/**
 * A group of utilities to build beautiful and testable command line interfaces
 */
export const clikit = mkPackage(
  nixRaw`pkgs.python2Packages.clikit`,
  "A group of utilities to build beautiful and testable command line interfaces",
);

/**
 * Python Command Line Interface Tools
 */
export const clint = mkPackage(
  nixRaw`pkgs.python2Packages.clint`,
  "Python Command Line Interface Tools",
);

/**
 * Non-fullscreen command-line selection menu
 */
export const clintermission = mkPackage(
  nixRaw`pkgs.python2Packages.clintermission`,
  "Non-fullscreen command-line selection menu",
);

/**
 * Contrastive Language-Image Pretraining
 */
export const clip = mkPackage(
  nixRaw`pkgs.python2Packages.clip`,
  "Contrastive Language-Image Pretraining",
);

/**
 * Contrastive Language-Image Pretraining
 */
export const clip_anytorch = mkPackage(
  nixRaw`pkgs.python2Packages.clip-anytorch`,
  "Contrastive Language-Image Pretraining",
);

/**
 * Command-line argument parsing for Python
 */
export const clize = mkPackage(
  nixRaw`pkgs.python2Packages.clize`,
  "Command-line argument parsing for Python",
);

/**
 * Utilities for clld apps without the overhead of requiring pyramid, rdflib et al
 */
export const clldutils = mkPackage(
  nixRaw`pkgs.python2Packages.clldutils`,
  "Utilities for clld apps without the overhead of requiring pyramid, rdflib et al",
);

/**
 * Python wrapper for the Cloudflare v4 API
 */
export const cloudflare = mkPackage(
  nixRaw`pkgs.python2Packages.cloudflare`,
  "Python wrapper for the Cloudflare v4 API",
);

/**
 * Python pathlib-style classes for cloud storage services such as Amazon S3, Azure Blob Storage, and Google Cloud Storage
 */
export const cloudpathlib = mkPackage(
  nixRaw`pkgs.python2Packages.cloudpathlib`,
  "Python pathlib-style classes for cloud storage services such as Amazon S3, Azure Blob Storage, and Google Cloud Storage",
);

/**
 * Extended pickling support for Python objects
 */
export const cloudpickle = mkPackage(
  nixRaw`pkgs.python2Packages.cloudpickle`,
  "Extended pickling support for Python objects",
);

/**
 * Python module to bypass Cloudflare's anti-bot page
 */
export const cloudscraper = mkPackage(
  nixRaw`pkgs.python2Packages.cloudscraper`,
  "Python module to bypass Cloudflare's anti-bot page",
);

/**
 * Cloudsmith API Client
 */
export const cloudsmith_api = mkPackage(
  nixRaw`pkgs.python2Packages.cloudsmith-api`,
  "Cloudsmith API Client",
);

/**
 * Python module for AWS IAM security assessment
 */
export const cloudsplaining = mkPackage(
  nixRaw`pkgs.python2Packages.cloudsplaining`,
  "Python module for AWS IAM security assessment",
);

/**
 * Click extended with option groups, constraints, aliases, help themes
 */
export const cloup = mkPackage(
  nixRaw`pkgs.python2Packages.cloup`,
  "Click extended with option groups, constraints, aliases, help themes",
);

/**
 * Generic pure Python loader for .NET runtimes
 */
export const clr_loader = mkPackage(
  nixRaw`pkgs.python2Packages.clr-loader`,
  "Generic pure Python loader for .NET runtimes",
);

/**
 * Scalable Python framework for cluster administration
 */
export const clustershell = mkPackage(
  nixRaw`pkgs.python2Packages.clustershell`,
  "Scalable Python framework for cluster administration",
);

/**
 * Chia Lisp virtual machine
 */
export const clvm = mkPackage(
  nixRaw`pkgs.python2Packages.clvm`,
  "Chia Lisp virtual machine",
);

/**
 * Rust implementation of clvm
 */
export const clvm_rs = mkPackage(
  nixRaw`pkgs.python2Packages.clvm-rs`,
  "Rust implementation of clvm",
);

/**
 * Tools for clvm development
 */
export const clvm_tools = mkPackage(
  nixRaw`pkgs.python2Packages.clvm-tools`,
  "Tools for clvm development",
);

/**
 * Rust port of clvm_tools
 */
export const clvm_tools_rs = mkPackage(
  nixRaw`pkgs.python2Packages.clvm-tools-rs`,
  "Rust port of clvm_tools",
);

/**
 * Library for Covariance Matrix Adaptation Evolution Strategy for non-linear numerical optimization
 */
export const cma = mkPackage(
  nixRaw`pkgs.python2Packages.cma`,
  "Library for Covariance Matrix Adaptation Evolution Strategy for non-linear numerical optimization",
);

/**
 * Python library for CMA evolution strategy
 */
export const cmaes = mkPackage(
  nixRaw`pkgs.python2Packages.cmaes`,
  "Python library for CMA evolution strategy",
);

/**
 * CMake is an open-source, cross-platform family of tools designed to build, test and package software
 */
export const cmake = mkPackage(
  nixRaw`pkgs.python2Packages.cmake`,
  "CMake is an open-source, cross-platform family of tools designed to build, test and package software",
);

/**
 * Minimal bindings to GitHub's fork of cmark
 */
export const cmarkgfm = mkPackage(
  nixRaw`pkgs.python2Packages.cmarkgfm`,
  "Minimal bindings to GitHub's fork of cmark",
);

/**
 * Enhancements for standard library's cmd module
 */
export const cmd2 = mkPackage(
  nixRaw`pkgs.python2Packages.cmd2`,
  "Enhancements for standard library's cmd module",
);

/**
 * Plugin supports testing of a cmd2 application
 */
export const cmd2_ext_test = mkPackage(
  nixRaw`pkgs.python2Packages.cmd2-ext-test`,
  "Plugin supports testing of a cmd2 application",
);

/**
 * Utilities for consistent command line tools
 */
export const cmdline = mkPackage(
  nixRaw`pkgs.python2Packages.cmdline`,
  "Utilities for consistent command line tools",
);

/**
 * A lightweight interface to Stan for Python users
 */
export const cmdstanpy = mkPackage(
  nixRaw`pkgs.python2Packages.cmdstanpy`,
  "A lightweight interface to Stan for Python users",
);

/**
 * A pure python binding for C/Migemo
 */
export const cmigemo = mkPackage(
  nixRaw`pkgs.python2Packages.cmigemo`,
  "A pure python binding for C/Migemo",
);

/**
 * A Rust and Python module for handling CMSIS Pack files
 */
export const cmsis_pack_manager = mkPackage(
  nixRaw`pkgs.python2Packages.cmsis-pack-manager`,
  "A Rust and Python module for handling CMSIS Pack files",
);

/**
 * CMSIS SVD parser
 */
export const cmsis_svd = mkPackage(
  nixRaw`pkgs.python2Packages.cmsis-svd`,
  "CMSIS SVD parser",
);

/**
 * A Python library and command-line software toolkit to infer and visualize copy number from high-throughput DNA sequencing data
 */
export const cnvkit = mkPackage(
  nixRaw`pkgs.python2Packages.cnvkit`,
  "A Python library and command-line software toolkit to infer and visualize copy number from high-throughput DNA sequencing data",
);

/**
 * A package to access the CO2 Signal API 
 */
export const co2signal = mkPackage(
  nixRaw`pkgs.python2Packages.co2signal`,
  "A package to access the CO2 Signal API ",
);

/**
 * Python3 library to the CoAP protocol compliant with the RFC.
 */
export const coapthon3 = mkPackage(
  nixRaw`pkgs.python2Packages.coapthon3`,
  "Python3 library to the CoAP protocol compliant with the RFC.",
);

/**
 * Python functions for encoding and decoding COBS
 */
export const cobs = mkPackage(
  nixRaw`pkgs.python2Packages.cobs`,
  "Python functions for encoding and decoding COBS",
);

/**
 * Configuration file with click
 */
export const cock = mkPackage(
  nixRaw`pkgs.python2Packages.cock`,
  "Configuration file with click",
);

/**
 * Simple, elegant, Pythonic functional programming
 */
export const coconut = mkPackage(
  nixRaw`pkgs.python2Packages.coconut`,
  "Simple, elegant, Pythonic functional programming",
);

/**
 * Coroutine based cosimulation library for writing VHDL and Verilog testbenches in Python
 */
export const cocotb = mkPackage(
  nixRaw`pkgs.python2Packages.cocotb`,
  "Coroutine based cosimulation library for writing VHDL and Verilog testbenches in Python",
);

/**
 * Pre-packaged testbenching tools and reusable bus interfaces for cocotb
 */
export const cocotb_bus = mkPackage(
  nixRaw`pkgs.python2Packages.cocotb-bus`,
  "Pre-packaged testbenching tools and reusable bus interfaces for cocotb",
);

/**
 * Python report uploader for Codecov
 */
export const codecov = mkPackage(
  nixRaw`pkgs.python2Packages.codecov`,
  "Python report uploader for Codecov",
);

/**
 * Generate and execute native code at run time, from Python
 */
export const codepy = mkPackage(
  nixRaw`pkgs.python2Packages.codepy`,
  "Generate and execute native code at run time, from Python",
);

/**
 * Basic tools and wrappers for enabling not-too-alien syntax when running columnar Collider HEP analysis
 */
export const coffea = mkPackage(
  nixRaw`pkgs.python2Packages.coffea`,
  "Basic tools and wrappers for enabling not-too-alien syntax when running columnar Collider HEP analysis",
);

/**
 * A code generator for executing Python snippets in source files
 */
export const cogapp = mkPackage(
  nixRaw`pkgs.python2Packages.cogapp`,
  "A code generator for executing Python snippets in source files",
);

/**
 * Simplify interfacing with the Cohere API
 */
export const cohere = mkPackage(
  nixRaw`pkgs.python2Packages.cohere`,
  "Simplify interfacing with the Cohere API",
);

/**
 * Cross-platform bindings for libsecp256k1
 */
export const coincurve = mkPackage(
  nixRaw`pkgs.python2Packages.coincurve`,
  "Cross-platform bindings for libsecp256k1",
);

/**
 * Coin Metrics API v4 client library
 */
export const coinmetrics_api_client = mkPackage(
  nixRaw`pkgs.python2Packages.coinmetrics-api-client`,
  "Coin Metrics API v4 client library",
);

/**
 * A simple schema-based serialization and deserialization library
 */
export const colander = mkPackage(
  nixRaw`pkgs.python2Packages.colander`,
  "A simple schema-based serialization and deserialization library",
);

/**
 * Autogenerate Colander schemas based on SQLAlchemy models
 */
export const colanderalchemy = mkPackage(
  nixRaw`pkgs.python2Packages.colanderalchemy`,
  "Autogenerate Colander schemas based on SQLAlchemy models",
);

/**
 * Extra Python Collections - bags (multisets), setlists (unique list/indexed set), RangeMap and IndexedDict
 */
export const collections_extended = mkPackage(
  nixRaw`pkgs.python2Packages.collections-extended`,
  "Extra Python Collections - bags (multisets), setlists (unique list/indexed set), RangeMap and IndexedDict",
);

/**
 * Cross-platform colored terminal text
 */
export const colorama = mkPackage(
  nixRaw`pkgs.python2Packages.colorama`,
  "Cross-platform colored terminal text",
);

/**
 * Collection of perceptually uniform colormaps
 */
export const colorcet = mkPackage(
  nixRaw`pkgs.python2Packages.colorcet`,
  "Collection of perceptually uniform colormaps",
);

/**
 * Automatic support for console colors
 */
export const colorclass = mkPackage(
  nixRaw`pkgs.python2Packages.colorclass`,
  "Automatic support for console colors",
);

/**
 * Simple library for color and formatting to terminal
 */
export const colored = mkPackage(
  nixRaw`pkgs.python2Packages.colored`,
  "Simple library for color and formatting to terminal",
);

/**
 * Automatically color Python's uncaught exception tracebacks
 */
export const colored_traceback = mkPackage(
  nixRaw`pkgs.python2Packages.colored-traceback`,
  "Automatically color Python's uncaught exception tracebacks",
);

/**
 * Colored stream handler for Python's logging module
 */
export const coloredlogs = mkPackage(
  nixRaw`pkgs.python2Packages.coloredlogs`,
  "Colored stream handler for Python's logging module",
);

/**
 * Library for terminal string styling
 */
export const colorful = mkPackage(
  nixRaw`pkgs.python2Packages.colorful`,
  "Library for terminal string styling",
);

/**
 * Log formatting with colors
 */
export const colorlog = mkPackage(
  nixRaw`pkgs.python2Packages.colorlog`,
  "Log formatting with colors",
);

/**
 * Color scales in Python for humans
 */
export const colorlover = mkPackage(
  nixRaw`pkgs.python2Packages.colorlover`,
  "Color scales in Python for humans",
);

/**
 * Color math and conversion library
 */
export const colormath = mkPackage(
  nixRaw`pkgs.python2Packages.colormath`,
  "Color math and conversion library",
);

/**
 * A powerful, accurate, and easy-to-use Python library for doing colorspace conversions 
 */
export const colorspacious = mkPackage(
  nixRaw`pkgs.python2Packages.colorspacious`,
  "A powerful, accurate, and easy-to-use Python library for doing colorspace conversions ",
);

/**
 * Python module for grabbing the color palette from an image
 */
export const colorthief = mkPackage(
  nixRaw`pkgs.python2Packages.colorthief`,
  "Python module for grabbing the color palette from an image",
);

/**
 * Yet another Python color library
 */
export const colorzero = mkPackage(
  nixRaw`pkgs.python2Packages.colorzero`,
  "Yet another Python color library",
);

/**
 * Converts and manipulates common color representation (RGB, HSV, web, ...)
 */
export const colour = mkPackage(
  nixRaw`pkgs.python2Packages.colour`,
  "Converts and manipulates common color representation (RGB, HSV, web, ...)",
);

/**
 * Color Up Arbitrary Command Output
 */
export const colout = mkPackage(
  nixRaw`pkgs.python2Packages.colout`,
  "Color Up Arbitrary Command Output",
);

/**
 * Module for Eurotronic Comet Blue thermostats
 */
export const cometblue_lite = mkPackage(
  nixRaw`pkgs.python2Packages.cometblue-lite`,
  "Module for Eurotronic Comet Blue thermostats",
);

/**
 * Lightweight comic converter library between CBZ, PDF, and EPUB
 */
export const comicon = mkPackage(
  nixRaw`pkgs.python2Packages.comicon`,
  "Lightweight comic converter library between CBZ, PDF, and EPUB",
);

/**
 * Jupyter Python Comm implementation, for usage in ipykernel, xeus-python etc
 */
export const comm = mkPackage(
  nixRaw`pkgs.python2Packages.comm`,
  "Jupyter Python Comm implementation, for usage in ipykernel, xeus-python etc",
);

        /**
         * Platform agnostic command execution, timed background jobs with live
stdout/stderr output capture, and UAC/sudo elevation

         */
export const command_runner = mkPackage(
  nixRaw`pkgs.python2Packages.command_runner`,
  "Platform agnostic command execution, timed background jobs with live\nstdout/stderr output capture, and UAC/sudo elevation\n",
);

/**
 * Python module to parse command based CLI application
 */
export const commandparse = mkPackage(
  nixRaw`pkgs.python2Packages.commandparse`,
  "Python module to parse command based CLI application",
);

/**
 * Add JavaScript or Python style comments in JSON
 */
export const commentjson = mkPackage(
  nixRaw`pkgs.python2Packages.commentjson`,
  "Add JavaScript or Python style comments in JSON",
);

/**
 * A set of common utilities, originally split from ScanCode
 */
export const commoncode = mkPackage(
  nixRaw`pkgs.python2Packages.commoncode`,
  "A set of common utilities, originally split from ScanCode",
);

/**
 * Python parser for the CommonMark Markdown spec
 */
export const commonmark = mkPackage(
  nixRaw`pkgs.python2Packages.commonmark`,
  "Python parser for the CommonMark Markdown spec",
);

/**
 * Tool for generating Clang's JSON Compilation Database files
 */
export const compiledb = mkPackage(
  nixRaw`pkgs.python2Packages.compiledb`,
  "Tool for generating Clang's JSON Compilation Database files",
);

/**
 * CFF table subroutinizer for FontTools
 */
export const compreffor = mkPackage(
  nixRaw`pkgs.python2Packages.compreffor`,
  "CFF table subroutinizer for FontTools",
);

/**
 * A PyTorch library and evaluation platform for end-to-end compression research
 */
export const compressai = mkPackage(
  nixRaw`pkgs.python2Packages.compressai`,
  "A PyTorch library and evaluation platform for end-to-end compression research",
);

/**
 * Python logging handler that allows multiple processes to safely write to the same log file concurrently
 */
export const concurrent_log_handler = mkPackage(
  nixRaw`pkgs.python2Packages.concurrent-log-handler`,
  "Python logging handler that allows multiple processes to safely write to the same log file concurrently",
);

/**
 * OS-agnostic, system-level binary package manager
 */
export const conda = mkPackage(
  nixRaw`pkgs.python2Packages.conda`,
  "OS-agnostic, system-level binary package manager",
);

export const condaInstallHook = mkPackage(
  nixRaw`pkgs.python2Packages.condaInstallHook`,
  "",
);

export const condaUnpackHook = mkPackage(
  nixRaw`pkgs.python2Packages.condaUnpackHook`,
  "",
);

/**
 * Library that offers a configuration system
 */
export const confection = mkPackage(
  nixRaw`pkgs.python2Packages.confection`,
  "Library that offers a configuration system",
);

/**
 * A drop-in replacement for argparse
 */
export const configargparse = mkPackage(
  nixRaw`pkgs.python2Packages.configargparse`,
  "A drop-in replacement for argparse",
);

/**
 * A Python to class to hold configuration values
 */
export const configclass = mkPackage(
  nixRaw`pkgs.python2Packages.configclass`,
  "A Python to class to hold configuration values",
);

/**
 * Python context manager for managing pid files
 */
export const confight = mkPackage(
  nixRaw`pkgs.python2Packages.confight`,
  "Python context manager for managing pid files",
);

/**
 * Config file reading, writing and validation
 */
export const configobj = mkPackage(
  nixRaw`pkgs.python2Packages.configobj`,
  "Config file reading, writing and validation",
);

/**
 * Updated configparser from Python 3.7 for Python 2.6+.
 */
export const configparser = mkPackage(
  nixRaw`pkgs.python2Packages.configparser`,
  "Updated configparser from Python 3.7 for Python 2.6+.",
);

/**
 * Python library for building configuration shells
 */
export const configshell = mkPackage(
  nixRaw`pkgs.python2Packages.configshell`,
  "Python library for building configuration shells",
);

/**
 * Parser like ConfigParser but for updating configuration files
 */
export const configupdater = mkPackage(
  nixRaw`pkgs.python2Packages.configupdater`,
  "Parser like ConfigParser but for updating configuration files",
);

/**
 * Confluent's Apache Kafka client for Python
 */
export const confluent_kafka = mkPackage(
  nixRaw`pkgs.python2Packages.confluent-kafka`,
  "Confluent's Apache Kafka client for Python",
);

/**
 * Python configuration library for Python that uses YAML
 */
export const confuse = mkPackage(
  nixRaw`pkgs.python2Packages.confuse`,
  "Python configuration library for Python that uses YAML",
);

/**
 * Interact with a Compal CH7465LG cable modem/router
 */
export const connect_box = mkPackage(
  nixRaw`pkgs.python2Packages.connect-box`,
  "Interact with a Compal CH7465LG cable modem/router",
);

/**
 * Thread-safe connection pool
 */
export const connection_pool = mkPackage(
  nixRaw`pkgs.python2Packages.connection-pool`,
  "Thread-safe connection pool",
);

/**
 * Swagger/OpenAPI First framework on top of Flask
 */
export const connexion = mkPackage(
  nixRaw`pkgs.python2Packages.connexion`,
  "Swagger/OpenAPI First framework on top of Flask",
);

/**
 * Library for concurrency agnostic communication
 */
export const connio = mkPackage(
  nixRaw`pkgs.python2Packages.connio`,
  "Library for concurrency agnostic communication",
);

/**
 * An implementation of Lisp/Scheme-like cons in Python
 */
export const cons = mkPackage(
  nixRaw`pkgs.python2Packages.cons`,
  "An implementation of Lisp/Scheme-like cons in Python",
);

/**
 * WhatsApp's handshake implementation using Noise Protocol
 */
export const consonance = mkPackage(
  nixRaw`pkgs.python2Packages.consonance`,
  "WhatsApp's handshake implementation using Noise Protocol",
);

/**
 * symbolic constant support
 */
export const constantly = mkPackage(
  nixRaw`pkgs.python2Packages.constantly`,
  "symbolic constant support",
);

/**
 * Powerful declarative parser (and builder) for binary data
 */
export const construct = mkPackage(
  nixRaw`pkgs.python2Packages.construct`,
  "Powerful declarative parser (and builder) for binary data",
);

/**
 * Parse your binary data into dataclasses.
 */
export const construct_classes = mkPackage(
  nixRaw`pkgs.python2Packages.construct-classes`,
  "Parse your binary data into dataclasses.",
);

/**
 * Python client for Consul (https://www.consul.io/)
 */
export const consul = mkPackage(
  nixRaw`pkgs.python2Packages.consul`,
  "Python client for Consul (https://www.consul.io/)",
);

/**
 * Suite of analysis utilities and command line tools for container images
 */
export const container_inspector = mkPackage(
  nixRaw`pkgs.python2Packages.container-inspector`,
  "Suite of analysis utilities and command line tools for container images",
);

export const contexter = mkPackage(
  nixRaw`pkgs.python2Packages.contexter`,
  "",
);

/**
 * Backports and enhancements for the contextlib module
 */
export const contextlib2 = mkPackage(
  nixRaw`pkgs.python2Packages.contextlib2`,
  "Backports and enhancements for the contextlib module",
);

/**
 * A timer as a context manager
 */
export const contexttimer = mkPackage(
  nixRaw`pkgs.python2Packages.contexttimer`,
  "A timer as a context manager",
);

/**
 * Python library for calculating contours in 2D quadrilateral grids
 */
export const contourpy = mkPackage(
  nixRaw`pkgs.python2Packages.contourpy`,
  "Python library for calculating contours in 2D quadrilateral grids",
);

/**
 * Control Roku devices from the comfort of your own desktop
 */
export const controku = mkPackage(
  nixRaw`pkgs.python2Packages.controku`,
  "Control Roku devices from the comfort of your own desktop",
);

/**
 * Utils for converting between date formats and calculating holidays
 */
export const convertdate = mkPackage(
  nixRaw`pkgs.python2Packages.convertdate`,
  "Utils for converting between date formats and calculating holidays",
);

/**
 * A command-line utility that creates projects from project templates
 */
export const cookiecutter = mkPackage(
  nixRaw`pkgs.python2Packages.cookiecutter`,
  "A command-line utility that creates projects from project templates",
);

/**
 * Friendlier RFC 6265-compliant cookie parser/renderer
 */
export const cookies = mkPackage(
  nixRaw`pkgs.python2Packages.cookies`,
  "Friendlier RFC 6265-compliant cookie parser/renderer",
);

/**
 * Convenience class for doing maths with explicit coordinates
 */
export const coordinates = mkPackage(
  nixRaw`pkgs.python2Packages.coordinates`,
  "Convenience class for doing maths with explicit coordinates",
);

/**
 * Simple but maybe too simple config management through python data classes
 */
export const coqpit = mkPackage(
  nixRaw`pkgs.python2Packages.coqpit`,
  "Simple but maybe too simple config management through python data classes",
);

/**
 * Python client library for Core API
 */
export const coreapi = mkPackage(
  nixRaw`pkgs.python2Packages.coreapi`,
  "Python client library for Core API",
);

/**
 * An async redis client with support for redis server, cluster & sentinel
 */
export const coredis = mkPackage(
  nixRaw`pkgs.python2Packages.coredis`,
  "An async redis client with support for redis server, cluster & sentinel",
);

/**
 * Python client library for Core Schema
 */
export const coreschema = mkPackage(
  nixRaw`pkgs.python2Packages.coreschema`,
  "Python client library for Core Schema",
);

/**
 * Build Web Services with Pyramid
 */
export const cornice = mkPackage(
  nixRaw`pkgs.python2Packages.cornice`,
  "Build Web Services with Pyramid",
);

/**
 * Provides a well-structured JSON data format for a wide variety of ad-hoc correction factors encountered in a typical HEP analysis
 */
export const correctionlib = mkPackage(
  nixRaw`pkgs.python2Packages.correctionlib`,
  "Provides a well-structured JSON data format for a wide variety of ad-hoc correction factors encountered in a typical HEP analysis",
);

/**
 * Python module to check for Cross-Origin Resource Sharing (CORS) misconfigurations
 */
export const corsair_scan = mkPackage(
  nixRaw`pkgs.python2Packages.corsair-scan`,
  "Python module to check for Cross-Origin Resource Sharing (CORS) misconfigurations",
);

/**
 * A Python implementation of the COSE specification
 */
export const cose = mkPackage(
  nixRaw`pkgs.python2Packages.cose`,
  "A Python implementation of the COSE specification",
);

/**
 * Common OVF Tool
 */
export const cot = mkPackage(
  nixRaw`pkgs.python2Packages.cot`,
  "Common OVF Tool",
);

/**
 * Plugin core for use by pytest-cov, nose-cov and nose2-cov
 */
export const covCore = mkPackage(
  nixRaw`pkgs.python2Packages.covCore`,
  "Plugin core for use by pytest-cov, nose-cov and nose2-cov",
);

/**
 * Code coverage measurement for python
 */
export const coverage = mkPackage(
  nixRaw`pkgs.python2Packages.coverage`,
  "Code coverage measurement for python",
);

/**
 * Show coverage stats online via coveralls.io
 */
export const coveralls = mkPackage(
  nixRaw`pkgs.python2Packages.coveralls`,
  "Show coverage stats online via coveralls.io",
);

/**
 * C++ and Python library for Polarizable Embedding
 */
export const cppe = mkPackage(
  nixRaw`pkgs.python2Packages.cppe`,
  "C++ and Python library for Polarizable Embedding",
);

/**
 * Parse C++ header files using ply.lex to generate navigable class tree representing the class structure
 */
export const cppheaderparser = mkPackage(
  nixRaw`pkgs.python2Packages.cppheaderparser`,
  "Parse C++ header files using ply.lex to generate navigable class tree representing the class structure",
);

/**
 * C++ headers for C extension development
 */
export const cppy = mkPackage(
  nixRaw`pkgs.python2Packages.cppy`,
  "C++ headers for C extension development",
);

/**
 * Cython PyParsing implementation
 */
export const cpyparsing = mkPackage(
  nixRaw`pkgs.python2Packages.cpyparsing`,
  "Cython PyParsing implementation",
);

/**
 * A simple testing framework for command line applications
 */
export const cram = mkPackage(
  nixRaw`pkgs.python2Packages.cram`,
  "A simple testing framework for command line applications",
);

/**
 * Thin Python bindings to de/compression algorithms in Rust
 */
export const cramjam = mkPackage(
  nixRaw`pkgs.python2Packages.cramjam`,
  "Thin Python bindings to de/compression algorithms in Rust",
);

/**
 * Manage Python errors with ease
 */
export const crashtest = mkPackage(
  nixRaw`pkgs.python2Packages.crashtest`,
  "Manage Python errors with ease",
);

/**
 * A Python client library for CrateDB
 */
export const crate = mkPackage(
  nixRaw`pkgs.python2Packages.crate`,
  "A Python client library for CrateDB",
);

/**
 * TextUI colors for Python
 */
export const crayons = mkPackage(
  nixRaw`pkgs.python2Packages.crayons`,
  "TextUI colors for Python",
);

/**
 * Python module for calculating and verifying predefined & custom CRC's
 */
export const crc = mkPackage(
  nixRaw`pkgs.python2Packages.crc`,
  "Python module for calculating and verifying predefined & custom CRC's",
);

/**
 * Python library for calculating CRC16
 */
export const crc16 = mkPackage(
  nixRaw`pkgs.python2Packages.crc16`,
  "Python library for calculating CRC16",
);

/**
 * Python software implementation and hardware API of CRC32C checksum algorithm
 */
export const crc32c = mkPackage(
  nixRaw`pkgs.python2Packages.crc32c`,
  "Python software implementation and hardware API of CRC32C checksum algorithm",
);

/**
 * Python library for CRCs and checksums
 */
export const crccheck = mkPackage(
  nixRaw`pkgs.python2Packages.crccheck`,
  "Python library for CRCs and checksums",
);

/**
 * Python module for generating objects that compute the Cyclic Redundancy Check (CRC)
 */
export const crcmod = mkPackage(
  nixRaw`pkgs.python2Packages.crcmod`,
  "Python module for generating objects that compute the Cyclic Redundancy Check (CRC)",
);

/**
 * A utility for managing secrets in the cloud using AWS KMS and DynamoDB
 */
export const credstash = mkPackage(
  nixRaw`pkgs.python2Packages.credstash`,
  "A utility for managing secrets in the cloud using AWS KMS and DynamoDB",
);

/**
 * Python tool for computing the Open Source Project Criticality Score.
 */
export const criticality_score = mkPackage(
  nixRaw`pkgs.python2Packages.criticality-score`,
  "Python tool for computing the Open Source Project Criticality Score.",
);

/**
 * Crocoddyl optimal control library
 */
export const crocoddyl = mkPackage(
  nixRaw`pkgs.python2Packages.crocoddyl`,
  "Crocoddyl optimal control library",
);

/**
 * Library that converts cron expressions into human readable strings
 */
export const cron_descriptor = mkPackage(
  nixRaw`pkgs.python2Packages.cron-descriptor`,
  "Library that converts cron expressions into human readable strings",
);

/**
 * Library to iterate over datetime object with cron like format
 */
export const croniter = mkPackage(
  nixRaw`pkgs.python2Packages.croniter`,
  "Library to iterate over datetime object with cron like format",
);

/**
 * Cron expression parser and evaluator
 */
export const cronsim = mkPackage(
  nixRaw`pkgs.python2Packages.cronsim`,
  "Cron expression parser and evaluator",
);

/**
 * NGINX configuration file parser and builder
 */
export const crossplane = mkPackage(
  nixRaw`pkgs.python2Packages.crossplane`,
  "NGINX configuration file parser and builder",
);

/**
 * Python module for communicating with Crownstone Cloud and devices
 */
export const crownstone_cloud = mkPackage(
  nixRaw`pkgs.python2Packages.crownstone-cloud`,
  "Python module for communicating with Crownstone Cloud and devices",
);

/**
 * Python module with shared classes, util functions and definition of Crownstone
 */
export const crownstone_core = mkPackage(
  nixRaw`pkgs.python2Packages.crownstone-core`,
  "Python module with shared classes, util functions and definition of Crownstone",
);

/**
 * Python module for listening to Crownstone SSE events
 */
export const crownstone_sse = mkPackage(
  nixRaw`pkgs.python2Packages.crownstone-sse`,
  "Python module for listening to Crownstone SSE events",
);

/**
 * Python module for communicating with Crownstone USB dongles
 */
export const crownstone_uart = mkPackage(
  nixRaw`pkgs.python2Packages.crownstone-uart`,
  "Python module for communicating with Crownstone USB dongles",
);

export const cryptacular = mkPackage(
  nixRaw`pkgs.python2Packages.cryptacular`,
  "",
);

/**
 * Official Telethon extension to provide much faster cryptography for Telegram API requests
 */
export const cryptg = mkPackage(
  nixRaw`pkgs.python2Packages.cryptg`,
  "Official Telethon extension to provide much faster cryptography for Telegram API requests",
);

/**
 * Repository of cryptography-related data
 */
export const cryptodatahub = mkPackage(
  nixRaw`pkgs.python2Packages.cryptodatahub`,
  "Repository of cryptography-related data",
);

/**
 * A package which provides cryptographic recipes and primitives
 */
export const cryptography = mkPackage(
  nixRaw`pkgs.python2Packages.cryptography`,
  "A package which provides cryptographic recipes and primitives",
);

/**
 * Cryptographic protocol analyzer
 */
export const cryptolyzer = mkPackage(
  nixRaw`pkgs.python2Packages.cryptolyzer`,
  "Cryptographic protocol analyzer",
);

/**
 * Security protocol parser and generator
 */
export const cryptoparser = mkPackage(
  nixRaw`pkgs.python2Packages.cryptoparser`,
  "Security protocol parser and generator",
);

/**
 * Module that provides crypto-related facilities
 */
export const crysp = mkPackage(
  nixRaw`pkgs.python2Packages.crysp`,
  "Module that provides crypto-related facilities",
);

/**
 * Abstraction layer for smart contract build systems
 */
export const crytic_compile = mkPackage(
  nixRaw`pkgs.python2Packages.crytic-compile`,
  "Abstraction layer for smart contract build systems",
);

/**
 * A python parser for the Coffeescript Object Notation (CSON)
 */
export const cson = mkPackage(
  nixRaw`pkgs.python2Packages.cson`,
  "A python parser for the Coffeescript Object Notation (CSON)",
);

/**
 * Python implementation of the CSRMesh bridge protocol
 */
export const csrmesh = mkPackage(
  nixRaw`pkgs.python2Packages.csrmesh`,
  "Python implementation of the CSRMesh bridge protocol",
);

/**
 * StandAlone Async cross-platform Minifier for the Web
 */
export const css_html_js_minify = mkPackage(
  nixRaw`pkgs.python2Packages.css-html-js-minify`,
  "StandAlone Async cross-platform Minifier for the Web",
);

/**
 * Inline CSS into style attributes
 */
export const css_inline = mkPackage(
  nixRaw`pkgs.python2Packages.css-inline`,
  "Inline CSS into style attributes",
);

/**
 * A CSS Cascading Style Sheets library for Python
 */
export const css_parser = mkPackage(
  nixRaw`pkgs.python2Packages.css-parser`,
  "A CSS Cascading Style Sheets library for Python",
);

/**
 * CSS unobfuscator and beautifier
 */
export const cssbeautifier = mkPackage(
  nixRaw`pkgs.python2Packages.cssbeautifier`,
  "CSS unobfuscator and beautifier",
);

/**
 * A python port of YUI CSS Compressor
 */
export const csscompressor = mkPackage(
  nixRaw`pkgs.python2Packages.csscompressor`,
  "A python port of YUI CSS Compressor",
);

/**
 * A Python port of the YUI CSS compression algorithm
 */
export const cssmin = mkPackage(
  nixRaw`pkgs.python2Packages.cssmin`,
  "A Python port of the YUI CSS compression algorithm",
);

/**
 * CSS Selectors for Python
 */
export const cssselect = mkPackage(
  nixRaw`pkgs.python2Packages.cssselect`,
  "CSS Selectors for Python",
);

/**
 * CSS selectors for Python ElementTree
 */
export const cssselect2 = mkPackage(
  nixRaw`pkgs.python2Packages.cssselect2`,
  "CSS selectors for Python ElementTree",
);

/**
 * A CSS Cascading Style Sheets library for Python
 */
export const cssutils = mkPackage(
  nixRaw`pkgs.python2Packages.cssutils`,
  "A CSS Cascading Style Sheets library for Python",
);

/**
 * C-style structs for Python
 */
export const cstruct = mkPackage(
  nixRaw`pkgs.python2Packages.cstruct`,
  "C-style structs for Python",
);

/**
 * CSV on the Web
 */
export const csvw = mkPackage(
  nixRaw`pkgs.python2Packages.csvw`,
  "CSV on the Web",
);

/**
 * CTAP (client-to-authenticator-protocol) device backed by python's keyring library
 */
export const ctap_keyring_device = mkPackage(
  nixRaw`pkgs.python2Packages.ctap-keyring-device`,
  "CTAP (client-to-authenticator-protocol) device backed by python's keyring library",
);

/**
 * Fast inference engine for Transformer models
 */
export const ctranslate2 = mkPackage(
  nixRaw`pkgs.python2Packages.ctranslate2`,
  "Fast inference engine for Transformer models",
);

/**
 * Cubic-to-quadratic bezier curve conversion
 */
export const cu2qu = mkPackage(
  nixRaw`pkgs.python2Packages.cu2qu`,
  "Cubic-to-quadratic bezier curve conversion",
);

/**
 * Provides tag-expression parser for cucumber/behave
 */
export const cucumber_tag_expressions = mkPackage(
  nixRaw`pkgs.python2Packages.cucumber-tag-expressions`,
  "Provides tag-expression parser for cucumber/behave",
);

/**
 * Productivity Tools for Plotly + Pandas
 */
export const cufflinks = mkPackage(
  nixRaw`pkgs.python2Packages.cufflinks`,
  "Productivity Tools for Plotly + Pandas",
);

/**
 * A NumPy-compatible matrix library accelerated by CUDA
 */
export const cupy = mkPackage(
  nixRaw`pkgs.python2Packages.cupy`,
  "A NumPy-compatible matrix library accelerated by CUDA",
);

/**
 * Library for performing concurrent I/O with coroutines in Python
 */
export const curio = mkPackage(
  nixRaw`pkgs.python2Packages.curio`,
  "Library for performing concurrent I/O with coroutines in Python",
);

/**
 * Convert python requests request object to cURL command
 */
export const curlify = mkPackage(
  nixRaw`pkgs.python2Packages.curlify`,
  "Convert python requests request object to cURL command",
);

/**
 * Curses-like terminal wrapper, with colored strings!
 */
export const curtsies = mkPackage(
  nixRaw`pkgs.python2Packages.curtsies`,
  "Curses-like terminal wrapper, with colored strings!",
);

/**
 * Python wrapper for the portable curve25519-donna implementation
 */
export const curve25519_donna = mkPackage(
  nixRaw`pkgs.python2Packages.curve25519-donna`,
  "Python wrapper for the portable curve25519-donna implementation",
);

/**
 * Library and a command line interface for the CVE Services API
 */
export const cvelib = mkPackage(
  nixRaw`pkgs.python2Packages.cvelib`,
  "Library and a command line interface for the CVE Services API",
);

/**
 * Library for CVSS2/3
 */
export const cvss = mkPackage(
  nixRaw`pkgs.python2Packages.cvss`,
  "Library for CVSS2/3",
);

/**
 * Python Software for Convex Optimization
 */
export const cvxopt = mkPackage(
  nixRaw`pkgs.python2Packages.cvxopt`,
  "Python Software for Convex Optimization",
);

/**
 * A domain-specific language for modeling convex optimization problems in Python
 */
export const cvxpy = mkPackage(
  nixRaw`pkgs.python2Packages.cvxpy`,
  "A domain-specific language for modeling convex optimization problems in Python",
);

/**
 * Python bindings for wc(s)width
 */
export const cwcwidth = mkPackage(
  nixRaw`pkgs.python2Packages.cwcwidth`,
  "Python bindings for wc(s)width",
);

/**
 * Library to interface with Yolink
 */
export const cwl_upgrader = mkPackage(
  nixRaw`pkgs.python2Packages.cwl-upgrader`,
  "Library to interface with Yolink",
);

/**
 * Utilities for CWL
 */
export const cwl_utils = mkPackage(
  nixRaw`pkgs.python2Packages.cwl-utils`,
  "Utilities for CWL",
);

/**
 * Code formatter for CWL
 */
export const cwlformat = mkPackage(
  nixRaw`pkgs.python2Packages.cwlformat`,
  "Code formatter for CWL",
);

/**
 * A set of scripts and modules for freezing Python scripts into executables
 */
export const cx_freeze = mkPackage(
  nixRaw`pkgs.python2Packages.cx-freeze`,
  "A set of scripts and modules for freezing Python scripts into executables",
);

/**
 * Python interface to Oracle
 */
export const cx_oracle = mkPackage(
  nixRaw`pkgs.python2Packages.cx_oracle`,
  "Python interface to Oracle",
);

/**
 * Demangling C++ symbols in Python / interface to abi::__cxa_demangle 
 */
export const cxxfilt = mkPackage(
  nixRaw`pkgs.python2Packages.cxxfilt`,
  "Demangling C++ symbols in Python / interface to abi::__cxa_demangle ",
);

/**
 * Composable style cycles
 */
export const cycler = mkPackage(
  nixRaw`pkgs.python2Packages.cycler`,
  "Composable style cycles",
);

/**
 * Python library for generating CycloneDX SBOMs
 */
export const cyclonedx_python_lib = mkPackage(
  nixRaw`pkgs.python2Packages.cyclonedx-python-lib`,
  "Python library for generating CycloneDX SBOMs",
);

/**
 * Cython memory pool for RAII-style memory management
 */
export const cymem = mkPackage(
  nixRaw`pkgs.python2Packages.cymem`,
  "Cython memory pool for RAII-style memory management",
);

/**
 * Cython bindings for PARI
 */
export const cypari2 = mkPackage(
  nixRaw`pkgs.python2Packages.cypari2`,
  "Cython bindings for PARI",
);

/**
 * Modern self-hosted software for accepting Bitcoin
 */
export const cypherpunkpay = mkPackage(
  nixRaw`pkgs.python2Packages.cypherpunkpay`,
  "Modern self-hosted software for accepting Bitcoin",
);

/**
 * Interrupt and signal handling for Cython
 */
export const cysignals = mkPackage(
  nixRaw`pkgs.python2Packages.cysignals`,
  "Interrupt and signal handling for Cython",
);

/**
 * An optimising static compiler for both the Python programming language and the extended Cython programming language
 */
export const cython = mkPackage(
  nixRaw`pkgs.python2Packages.cython`,
  "An optimising static compiler for both the Python programming language and the extended Cython programming language",
);

/**
 * An optimising static compiler for both the Python programming language and the extended Cython programming language
 */
export const cython_3 = mkPackage(
  nixRaw`pkgs.python2Packages.cython_3`,
  "An optimising static compiler for both the Python programming language and the extended Cython programming language",
);

/**
 * Testing only. A cython simple extension which is used as helper for twisted/twisted Failure tests
 */
export const cython_test_exception_raiser = mkPackage(
  nixRaw`pkgs.python2Packages.cython-test-exception-raiser`,
  "Testing only. A cython simple extension which is used as helper for twisted/twisted Failure tests",
);

/**
 * Cython implementation of Toolz: High performance functional utilities
 */
export const cytoolz = mkPackage(
  nixRaw`pkgs.python2Packages.cytoolz`,
  "Cython implementation of Toolz: High performance functional utilities",
);

/**
 * Python helper to create data classes from dictionaries
 */
export const dacite = mkPackage(
  nixRaw`pkgs.python2Packages.dacite`,
  "Python helper to create data classes from dictionaries",
);

/**
 * Library to enable your code run as a daemon process on Unix-like systems
 */
export const daemonize = mkPackage(
  nixRaw`pkgs.python2Packages.daemonize`,
  "Library to enable your code run as a daemon process on Unix-like systems",
);

/**
 * A Python library for creating super fancy Unix daemons
 */
export const daemonocle = mkPackage(
  nixRaw`pkgs.python2Packages.daemonocle`,
  "A Python library for creating super fancy Unix daemons",
);

/**
 * Library to configure Python logging easily
 */
export const daiquiri = mkPackage(
  nixRaw`pkgs.python2Packages.daiquiri`,
  "Library to configure Python logging easily",
);

/**
 * Generate images from a text prompt
 */
export const dalle_mini = mkPackage(
  nixRaw`pkgs.python2Packages.dalle-mini`,
  "Generate images from a text prompt",
);

/**
 * Django ASGI (HTTP/WebSocket) server
 */
export const daphne = mkPackage(
  nixRaw`pkgs.python2Packages.daphne`,
  "Django ASGI (HTTP/WebSocket) server",
);

/**
 * A dual active-set algorithm for convex quadratic programming
 */
export const daqp = mkPackage(
  nixRaw`pkgs.python2Packages.daqp`,
  "A dual active-set algorithm for convex quadratic programming",
);

/**
 * Detect OS Dark Mode from Python
 */
export const darkdetect = mkPackage(
  nixRaw`pkgs.python2Packages.darkdetect`,
  "Detect OS Dark Mode from Python",
);

/**
 * DBus library in Python3
 */
export const dasbus = mkPackage(
  nixRaw`pkgs.python2Packages.dasbus`,
  "DBus library in Python3",
);

/**
 * Python framework for building analytical web applications
 */
export const dash = mkPackage(
  nixRaw`pkgs.python2Packages.dash`,
  "Python framework for building analytical web applications",
);

/**
 * A dash component starter pack
 */
export const dash_core_components = mkPackage(
  nixRaw`pkgs.python2Packages.dash-core-components`,
  "A dash component starter pack",
);

/**
 * HTML components for Dash
 */
export const dash_html_components = mkPackage(
  nixRaw`pkgs.python2Packages.dash-html-components`,
  "HTML components for Dash",
);

/**
 * Renderer for the Dash framework
 */
export const dash_renderer = mkPackage(
  nixRaw`pkgs.python2Packages.dash-renderer`,
  "Renderer for the Dash framework",
);

/**
 * A First-Class Interactive DataTable for Dash
 */
export const dash_table = mkPackage(
  nixRaw`pkgs.python2Packages.dash-table`,
  "A First-Class Interactive DataTable for Dash",
);

/**
 * Terminal dashboards for Python
 */
export const dashing = mkPackage(
  nixRaw`pkgs.python2Packages.dashing`,
  "Terminal dashboards for Python",
);

/**
 * Minimal task scheduling abstraction
 */
export const dask = mkPackage(
  nixRaw`pkgs.python2Packages.dask`,
  "Minimal task scheduling abstraction",
);

/**
 * Native Dask collection for awkward arrays, and the library to use it
 */
export const dask_awkward = mkPackage(
  nixRaw`pkgs.python2Packages.dask-awkward`,
  "Native Dask collection for awkward arrays, and the library to use it",
);

/**
 * A client library for interacting with a dask-gateway server
 */
export const dask_gateway = mkPackage(
  nixRaw`pkgs.python2Packages.dask-gateway`,
  "A client library for interacting with a dask-gateway server",
);

/**
 * A multi-tenant server for securely deploying and managing multiple Dask clusters
 */
export const dask_gateway_server = mkPackage(
  nixRaw`pkgs.python2Packages.dask-gateway-server`,
  "A multi-tenant server for securely deploying and managing multiple Dask clusters",
);

/**
 * Generalized Linear Models with Dask
 */
export const dask_glm = mkPackage(
  nixRaw`pkgs.python2Packages.dask-glm`,
  "Generalized Linear Models with Dask",
);

/**
 * Histograms with task scheduling
 */
export const dask_histogram = mkPackage(
  nixRaw`pkgs.python2Packages.dask-histogram`,
  "Histograms with task scheduling",
);

/**
 * Distributed image processing
 */
export const dask_image = mkPackage(
  nixRaw`pkgs.python2Packages.dask-image`,
  "Distributed image processing",
);

/**
 * Deploy Dask on job schedulers like PBS, SLURM, and SGE
 */
export const dask_jobqueue = mkPackage(
  nixRaw`pkgs.python2Packages.dask-jobqueue`,
  "Deploy Dask on job schedulers like PBS, SLURM, and SGE",
);

/**
 * Scalable Machine Learn with Dask
 */
export const dask_ml = mkPackage(
  nixRaw`pkgs.python2Packages.dask-ml`,
  "Scalable Machine Learn with Dask",
);

/**
 * Deploy Dask using mpi4py
 */
export const dask_mpi = mkPackage(
  nixRaw`pkgs.python2Packages.dask-mpi`,
  "Deploy Dask using mpi4py",
);

/**
 * Deploy dask on YARN clusters
 */
export const dask_yarn = mkPackage(
  nixRaw`pkgs.python2Packages.dask-yarn`,
  "Deploy dask on YARN clusters",
);

/**
 * Command line interface for Databricks
 */
export const databricks_cli = mkPackage(
  nixRaw`pkgs.python2Packages.databricks-cli`,
  "Command line interface for Databricks",
);

/**
 * Client for connecting to remote Databricks clusters
 */
export const databricks_connect = mkPackage(
  nixRaw`pkgs.python2Packages.databricks-connect`,
  "Client for connecting to remote Databricks clusters",
);

/**
 * Modern way to convert python dataclasses or other objects to and from more common types like dicts or json-like structures
 */
export const dataclass_factory = mkPackage(
  nixRaw`pkgs.python2Packages.dataclass-factory`,
  "Modern way to convert python dataclasses or other objects to and from more common types like dicts or json-like structures",
);

/**
 * A set of simple, yet elegant wizarding tools for interacting with the Python dataclasses module
 */
export const dataclass_wizard = mkPackage(
  nixRaw`pkgs.python2Packages.dataclass-wizard`,
  "A set of simple, yet elegant wizarding tools for interacting with the Python dataclasses module",
);

/**
 * Simple API for encoding and decoding dataclasses to and from JSON
 */
export const dataclasses_json = mkPackage(
  nixRaw`pkgs.python2Packages.dataclasses-json`,
  "Simple API for encoding and decoding dataclasses to and from JSON",
);

/**
 * Serialize/deserialize Python dataclasses to various other data formats
 */
export const dataclasses_serialization = mkPackage(
  nixRaw`pkgs.python2Packages.dataclasses-serialization`,
  "Serialize/deserialize Python dataclasses to various other data formats",
);

/**
 * Library to provide human-readable diffs of Python data structures
 */
export const datadiff = mkPackage(
  nixRaw`pkgs.python2Packages.datadiff`,
  "Library to provide human-readable diffs of Python data structures",
);

/**
 * The Datadog Python library
 */
export const datadog = mkPackage(
  nixRaw`pkgs.python2Packages.datadog`,
  "The Datadog Python library",
);

/**
 * Extensible query execution framework
 */
export const datafusion = mkPackage(
  nixRaw`pkgs.python2Packages.datafusion`,
  "Extensible query execution framework",
);

/**
 * Class allowing for data models equivalently represented as Python dictionaries, JSON, and XML
 */
export const datamodeldict = mkPackage(
  nixRaw`pkgs.python2Packages.datamodeldict`,
  "Class allowing for data models equivalently represented as Python dictionaries, JSON, and XML",
);

/**
 * Python interface to the Met Office's Datapoint API
 */
export const datapoint = mkPackage(
  nixRaw`pkgs.python2Packages.datapoint`,
  "Python interface to the Met Office's Datapoint API",
);

/**
 * Data utilities for Machine Learning pipelines
 */
export const dataprep_ml = mkPackage(
  nixRaw`pkgs.python2Packages.dataprep-ml`,
  "Data utilities for Machine Learning pipelines",
);

/**
 * Library for extracting properties from data
 */
export const dataproperty = mkPackage(
  nixRaw`pkgs.python2Packages.dataproperty`,
  "Library for extracting properties from data",
);

/**
 * Open-access datasets and evaluation metrics for natural language processing
 */
export const datasets = mkPackage(
  nixRaw`pkgs.python2Packages.datasets`,
  "Open-access datasets and evaluation metrics for natural language processing",
);

/**
 * Multi-tool for exploring and publishing data
 */
export const datasette = mkPackage(
  nixRaw`pkgs.python2Packages.datasette`,
  "Multi-tool for exploring and publishing data",
);

/**
 * Datasette plugin for publishing data using Fly
 */
export const datasette_publish_fly = mkPackage(
  nixRaw`pkgs.python2Packages.datasette-publish-fly`,
  "Datasette plugin for publishing data using Fly",
);

/**
 * Datasette plugin for executing SQL queries from templates
 */
export const datasette_template_sql = mkPackage(
  nixRaw`pkgs.python2Packages.datasette-template-sql`,
  "Datasette plugin for executing SQL queries from templates",
);

/**
 * Data visualization toolchain based on aggregating into a grid
 */
export const datashader = mkPackage(
  nixRaw`pkgs.python2Packages.datashader`,
  "Data visualization toolchain based on aggregating into a grid",
);

/**
 * A data description language
 */
export const datashape = mkPackage(
  nixRaw`pkgs.python2Packages.datashape`,
  "A data description language",
);

/**
 * data.table for Python
 */
export const datatable = mkPackage(
  nixRaw`pkgs.python2Packages.datatable`,
  "data.table for Python",
);

/**
 * Data URI manipulation made easy.
 */
export const datauri = mkPackage(
  nixRaw`pkgs.python2Packages.datauri`,
  "Data URI manipulation made easy.",
);

/**
 * Extract datetime objects from strings
 */
export const datefinder = mkPackage(
  nixRaw`pkgs.python2Packages.datefinder`,
  "Extract datetime objects from strings",
);

/**
 * Date parsing library designed to parse dates from HTML pages
 */
export const dateparser = mkPackage(
  nixRaw`pkgs.python2Packages.dateparser`,
  "Date parsing library designed to parse dates from HTML pages",
);

/**
 * DateTime data type, as known from Zope
 */
export const datetime = mkPackage(
  nixRaw`pkgs.python2Packages.datetime`,
  "DateTime data type, as known from Zope",
);

/**
 * Utilities for working with datetime objects.
 */
export const dateutils = mkPackage(
  nixRaw`pkgs.python2Packages.dateutils`,
  "Utilities for working with datetime objects.",
);

/**
 * Super-fast, efficiently stored Trie for Python
 */
export const datrie = mkPackage(
  nixRaw`pkgs.python2Packages.datrie`,
  "Super-fast, efficiently stored Trie for Python",
);

/**
 * Pure Python reader for DAWGs created by dawgdic C++ library or DAWG Python extension
 */
export const dawg_python = mkPackage(
  nixRaw`pkgs.python2Packages.dawg-python`,
  "Pure Python reader for DAWGs created by dawgdic C++ library or DAWG Python extension",
);

/**
 * Pandas Data Types for SQL systems (BigQuery, Spanner)
 */
export const db_dtypes = mkPackage(
  nixRaw`pkgs.python2Packages.db-dtypes`,
  "Pandas Data Types for SQL systems (BigQuery, Spanner)",
);

/**
 * Module for reading/writing dBase, FoxPro, and Visual FoxPro .dbf files
 */
export const dbf = mkPackage(
  nixRaw`pkgs.python2Packages.dbf`,
  "Module for reading/writing dBase, FoxPro, and Visual FoxPro .dbf files",
);

/**
 * Read DBF Files with Python
 */
export const dbfread = mkPackage(
  nixRaw`pkgs.python2Packages.dbfread`,
  "Read DBF Files with Python",
);

/**
 * Plugin enabling dbt to operate on a BigQuery database
 */
export const dbt_bigquery = mkPackage(
  nixRaw`pkgs.python2Packages.dbt-bigquery`,
  "Plugin enabling dbt to operate on a BigQuery database",
);

/**
 * Enables data analysts and engineers to transform their data using the same practices that software engineers use to build applications
 */
export const dbt_core = mkPackage(
  nixRaw`pkgs.python2Packages.dbt-core`,
  "Enables data analysts and engineers to transform their data using the same practices that software engineers use to build applications",
);

/**
 * A tool that processes the most common jinja value templates in dbt model files
 */
export const dbt_extractor = mkPackage(
  nixRaw`pkgs.python2Packages.dbt-extractor`,
  "A tool that processes the most common jinja value templates in dbt model files",
);

/**
 * Plugin enabling dbt to work with a Postgres database
 */
export const dbt_postgres = mkPackage(
  nixRaw`pkgs.python2Packages.dbt-postgres`,
  "Plugin enabling dbt to work with a Postgres database",
);

/**
 * Plugin enabling dbt to work with Amazon Redshift
 */
export const dbt_redshift = mkPackage(
  nixRaw`pkgs.python2Packages.dbt-redshift`,
  "Plugin enabling dbt to work with Amazon Redshift",
);

/**
 * Plugin enabling dbt to work with Snowflake
 */
export const dbt_snowflake = mkPackage(
  nixRaw`pkgs.python2Packages.dbt-snowflake`,
  "Plugin enabling dbt to work with Snowflake",
);

/**
 * A Python Library for Generating D-Bus Client Code
 */
export const dbus_client_gen = mkPackage(
  nixRaw`pkgs.python2Packages.dbus-client-gen`,
  "A Python Library for Generating D-Bus Client Code",
);

/**
 * A project for parsing D-Bus introspection XML and processing it in various ways
 */
export const dbus_deviation = mkPackage(
  nixRaw`pkgs.python2Packages.dbus-deviation`,
  "A project for parsing D-Bus introspection XML and processing it in various ways",
);

/**
 * Faster version of dbus-next
 */
export const dbus_fast = mkPackage(
  nixRaw`pkgs.python2Packages.dbus-fast`,
  "Faster version of dbus-next",
);

/**
 * A zero-dependency DBus library for Python with asyncio support
 */
export const dbus_next = mkPackage(
  nixRaw`pkgs.python2Packages.dbus-next`,
  "A zero-dependency DBus library for Python with asyncio support",
);

/**
 * Python DBus bindings
 */
export const dbus_python = mkPackage(
  nixRaw`pkgs.python2Packages.dbus-python`,
  "Python DBus bindings",
);

/**
 * A Python library for generating dbus-python client code
 */
export const dbus_python_client_gen = mkPackage(
  nixRaw`pkgs.python2Packages.dbus-python-client-gen`,
  "A Python library for generating dbus-python client code",
);

/**
 * A Parser for a D-Bus Signature
 */
export const dbus_signature_pyparsing = mkPackage(
  nixRaw`pkgs.python2Packages.dbus-signature-pyparsing`,
  "A Parser for a D-Bus Signature",
);

/**
 * Database connections for multi-threaded environments
 */
export const dbutils = mkPackage(
  nixRaw`pkgs.python2Packages.dbutils`,
  "Database connections for multi-threaded environments",
);

/**
 * DICOM to Nifti conversion preserving metadata
 */
export const dcmstack = mkPackage(
  nixRaw`pkgs.python2Packages.dcmstack`,
  "DICOM to Nifti conversion preserving metadata",
);

/**
 * Fast discrete cosine transforms for pytorch
 */
export const dctorch = mkPackage(
  nixRaw`pkgs.python2Packages.dctorch`,
  "Fast discrete cosine transforms for pytorch",
);

/**
 * Data-Driven/Decorated Tests, a library to multiply test cases
 */
export const ddt = mkPackage(
  nixRaw`pkgs.python2Packages.ddt`,
  "Data-Driven/Decorated Tests, a library to multiply test cases",
);

/**
 * Library for design by contract (DbC) and checking values, exceptions, and side-effects
 */
export const deal = mkPackage(
  nixRaw`pkgs.python2Packages.deal`,
  "Library for design by contract (DbC) and checking values, exceptions, and side-effects",
);

/**
 * Z3-powered solver (theorem prover) for deal
 */
export const deal_solver = mkPackage(
  nixRaw`pkgs.python2Packages.deal-solver`,
  "Z3-powered solver (theorem prover) for deal",
);

/**
 * DEAP is a novel evolutionary computation framework for rapid prototyping and testing of ideas.
 */
export const deap = mkPackage(
  nixRaw`pkgs.python2Packages.deap`,
  "DEAP is a novel evolutionary computation framework for rapid prototyping and testing of ideas.",
);

/**
 * Debian package related modules
 */
export const debian = mkPackage(
  nixRaw`pkgs.python2Packages.debian`,
  "Debian package related modules",
);

/**
 * Utilities to parse Debian package, copyright and control files
 */
export const debian_inspector = mkPackage(
  nixRaw`pkgs.python2Packages.debian-inspector`,
  "Utilities to parse Debian package, copyright and control files",
);

/**
 * Python interface to Debian's Bug Tracking System
 */
export const debianbts = mkPackage(
  nixRaw`pkgs.python2Packages.debianbts`,
  "Python interface to Debian's Bug Tracking System",
);

/**
 * A collection of Python deprecation patterns and strategies that help you collect your technical debt in a non-destructive manner
 */
export const debtcollector = mkPackage(
  nixRaw`pkgs.python2Packages.debtcollector`,
  "A collection of Python deprecation patterns and strategies that help you collect your technical debt in a non-destructive manner",
);

/**
 * A simple library and cli-tool to help you solve some debts settlement scenarios
 */
export const debts = mkPackage(
  nixRaw`pkgs.python2Packages.debts`,
  "A simple library and cli-tool to help you solve some debts settlement scenarios",
);

/**
 * Module for post-mortem debugging of Python programs
 */
export const debuglater = mkPackage(
  nixRaw`pkgs.python2Packages.debuglater`,
  "Module for post-mortem debugging of Python programs",
);

/**
 * An implementation of the Debug Adapter Protocol for Python
 */
export const debugpy = mkPackage(
  nixRaw`pkgs.python2Packages.debugpy`,
  "An implementation of the Debug Adapter Protocol for Python",
);

/**
 * Minimal, easy to use, declarative command line interface tool
 */
export const decli = mkPackage(
  nixRaw`pkgs.python2Packages.decli`,
  "Minimal, easy to use, declarative command line interface tool",
);

/**
 * Python helper for decorators
 */
export const decopatch = mkPackage(
  nixRaw`pkgs.python2Packages.decopatch`,
  "Python helper for decorators",
);

/**
 * Better living through Python with decorators
 */
export const decorator = mkPackage(
  nixRaw`pkgs.python2Packages.decorator`,
  "Better living through Python with decorators",
);

/**
 * Deezer downloader built from the ashes of Deezloader Remix
 */
export const deemix = mkPackage(
  nixRaw`pkgs.python2Packages.deemix`,
  "Deezer downloader built from the ashes of Deezloader Remix",
);

/**
 * A recursive subclass of ChainMap
 */
export const deep_chainmap = mkPackage(
  nixRaw`pkgs.python2Packages.deep-chainmap`,
  "A recursive subclass of ChainMap",
);

/**
 * Python tool to translate between different languages by using multiple translators
 */
export const deep_translator = mkPackage(
  nixRaw`pkgs.python2Packages.deep-translator`,
  "Python tool to translate between different languages by using multiple translators",
);

/**
 * Deep Difference and Search of any Python object/data
 */
export const deepdiff = mkPackage(
  nixRaw`pkgs.python2Packages.deepdiff`,
  "Deep Difference and Search of any Python object/data",
);

/**
 * Flexible HDF5 saving/loading and other data science tools from the University of Chicago.
 */
export const deepdish = mkPackage(
  nixRaw`pkgs.python2Packages.deepdish`,
  "Flexible HDF5 saving/loading and other data science tools from the University of Chicago.",
);

/**
 * A language translation API that allows other computer programs to send texts and documents to DeepL's servers and receive high-quality translations
 */
export const deepl = mkPackage(
  nixRaw`pkgs.python2Packages.deepl`,
  "A language translation API that allows other computer programs to send texts and documents to DeepL's servers and receive high-quality translations",
);

/**
 * A toolset to deeply merge python dictionaries.
 */
export const deepmerge = mkPackage(
  nixRaw`pkgs.python2Packages.deepmerge`,
  "A toolset to deeply merge python dictionaries.",
);

/**
 * Helper library for deeptools
 */
export const deeptoolsintervals = mkPackage(
  nixRaw`pkgs.python2Packages.deeptoolsintervals`,
  "Helper library for deeptools",
);

/**
 * Wave propagation modules for PyTorch
 */
export const deepwave = mkPackage(
  nixRaw`pkgs.python2Packages.deepwave`,
  "Wave propagation modules for PyTorch",
);

/**
 * A wrapper for all Deezer's APIs
 */
export const deezer_py = mkPackage(
  nixRaw`pkgs.python2Packages.deezer-py`,
  "A wrapper for all Deezer's APIs",
);

/**
 * Python wrapper around the Deezer API
 */
export const deezer_python = mkPackage(
  nixRaw`pkgs.python2Packages.deezer-python`,
  "Python wrapper around the Deezer API",
);

/**
 * A set of UFO based objects for use in font editing applications
 */
export const defcon = mkPackage(
  nixRaw`pkgs.python2Packages.defcon`,
  "A set of UFO based objects for use in font editing applications",
);

/**
 * Form library with advanced features like nested forms
 */
export const deform = mkPackage(
  nixRaw`pkgs.python2Packages.deform`,
  "Form library with advanced features like nested forms",
);

/**
 * Python library to protect your users from Excel injections in CSV-format exports, drop-in replacement for standard library's csv module
 */
export const defusedcsv = mkPackage(
  nixRaw`pkgs.python2Packages.defusedcsv`,
  "Python library to protect your users from Excel injections in CSV-format exports, drop-in replacement for standard library's csv module",
);

/**
 * Python module to defuse XML issues
 */
export const defusedxml = mkPackage(
  nixRaw`pkgs.python2Packages.defusedxml`,
  "Python module to defuse XML issues",
);

/**
 * Best-effort anonymization for medical images
 */
export const deid = mkPackage(
  nixRaw`pkgs.python2Packages.deid`,
  "Best-effort anonymization for medical images",
);

/**
 * Subprocesses for Humans 2.0
 */
export const delegator_py = mkPackage(
  nixRaw`pkgs.python2Packages.delegator-py`,
  "Subprocesses for Humans 2.0",
);

/**
 * Delorean: Time Travel Made Easy
 */
export const delorean = mkPackage(
  nixRaw`pkgs.python2Packages.delorean`,
  "Delorean: Time Travel Made Easy",
);

/**
 * Python bindings for the Delta Chat Core library
 */
export const deltachat = mkPackage(
  nixRaw`pkgs.python2Packages.deltachat`,
  "Python bindings for the Delta Chat Core library",
);

/**
 * Lightweight pure-python rpc client for deluge
 */
export const deluge_client = mkPackage(
  nixRaw`pkgs.python2Packages.deluge-client`,
  "Lightweight pure-python rpc client for deluge",
);

/**
 * Tools for describing and manipulating demographic models
 */
export const demes = mkPackage(
  nixRaw`pkgs.python2Packages.demes`,
  "Tools for describing and manipulating demographic models",
);

/**
 * Drawing functions for Demes demographic models
 */
export const demesdraw = mkPackage(
  nixRaw`pkgs.python2Packages.demesdraw`,
  "Drawing functions for Demes demographic models",
);

/**
 * Python client for LaMetric TIME devices
 */
export const demetriek = mkPackage(
  nixRaw`pkgs.python2Packages.demetriek`,
  "Python client for LaMetric TIME devices",
);

/**
 * Encoder/decoder and lint/validator for JSON (JavaScript Object Notation)
 */
export const demjson3 = mkPackage(
  nixRaw`pkgs.python2Packages.demjson3`,
  "Encoder/decoder and lint/validator for JSON (JavaScript Object Notation)",
);

/**
 * Python library for phylogenetic computing
 */
export const dendropy = mkPackage(
  nixRaw`pkgs.python2Packages.dendropy`,
  "Python library for phylogenetic computing",
);

/**
 * Automation Library for Denon AVR receivers
 */
export const denonavr = mkPackage(
  nixRaw`pkgs.python2Packages.denonavr`,
  "Automation Library for Denon AVR receivers",
);

/**
 * Dependency injection microframework for Python
 */
export const dependency_injector = mkPackage(
  nixRaw`pkgs.python2Packages.dependency-injector`,
  "Dependency injection microframework for Python",
);

/**
 * Execute commands remote via ssh and locally in parallel with python
 */
export const deploykit = mkPackage(
  nixRaw`pkgs.python2Packages.deploykit`,
  "Execute commands remote via ssh and locally in parallel with python",
);

/**
 * Decorator to deprecate old python classes, functions or methods
 */
export const deprecat = mkPackage(
  nixRaw`pkgs.python2Packages.deprecat`,
  "Decorator to deprecate old python classes, functions or methods",
);

/**
 * Python @deprecated decorator to deprecate old python classes, functions or methods
 */
export const deprecated = mkPackage(
  nixRaw`pkgs.python2Packages.deprecated`,
  "Python @deprecated decorator to deprecate old python classes, functions or methods",
);

/**
 * A library to handle automated deprecations
 */
export const deprecation = mkPackage(
  nixRaw`pkgs.python2Packages.deprecation`,
  "A library to handle automated deprecations",
);

/**
 * derpconf abstracts loading configuration files for your app
 */
export const derpconf = mkPackage(
  nixRaw`pkgs.python2Packages.derpconf`,
  "derpconf abstracts loading configuration files for your app",
);

/**
 * Allows reading and writing .desktop files according to the Desktop Entry Specification
 */
export const desktop_entry_lib = mkPackage(
  nixRaw`pkgs.python2Packages.desktop-entry-lib`,
  "Allows reading and writing .desktop files according to the Desktop Entry Specification",
);

/**
 * Python library for cross-platform desktop notifications
 */
export const desktop_notifier = mkPackage(
  nixRaw`pkgs.python2Packages.desktop-notifier`,
  "Python library for cross-platform desktop notifications",
);

/**
 * An enterprise friendly way of detecting and preventing secrets in code
 */
export const detect_secrets = mkPackage(
  nixRaw`pkgs.python2Packages.detect-secrets`,
  "An enterprise friendly way of detecting and preventing secrets in code",
);

/**
 * Facebooks's next-generation platform for object detection, segmentation and other visual recognition tasks
 */
export const detectron2 = mkPackage(
  nixRaw`pkgs.python2Packages.detectron2`,
  "Facebooks's next-generation platform for object detection, segmentation and other visual recognition tasks",
);

/**
 * Code generation framework for automated finite difference computation
 */
export const devito = mkPackage(
  nixRaw`pkgs.python2Packages.devito`,
  "Code generation framework for automated finite difference computation",
);

/**
 * Python library to work with devolo Home Control
 */
export const devolo_home_control_api = mkPackage(
  nixRaw`pkgs.python2Packages.devolo-home-control-api`,
  "Python library to work with devolo Home Control",
);

/**
 * Module to interact with Devolo PLC devices
 */
export const devolo_plc_api = mkPackage(
  nixRaw`pkgs.python2Packages.devolo-plc-api`,
  "Module to interact with Devolo PLC devices",
);

/**
 * Utilities jointly used by devpi-server and devpi-client
 */
export const devpi_common = mkPackage(
  nixRaw`pkgs.python2Packages.devpi-common`,
  "Utilities jointly used by devpi-server and devpi-client",
);

/**
 * Python's missing debug print command and other development tools
 */
export const devtools = mkPackage(
  nixRaw`pkgs.python2Packages.devtools`,
  "Python's missing debug print command and other development tools",
);

/**
 * Diagram as Code
 */
export const diagrams = mkPackage(
  nixRaw`pkgs.python2Packages.diagrams`,
  "Diagram as Code",
);

/**
 * Generates passphrases by concatenating words randomly picked from wordlists
 */
export const diceware = mkPackage(
  nixRaw`pkgs.python2Packages.diceware`,
  "Generates passphrases by concatenating words randomly picked from wordlists",
);

/**
 * Library for converting dicom files to nifti
 */
export const dicom2nifti = mkPackage(
  nixRaw`pkgs.python2Packages.dicom2nifti`,
  "Library for converting dicom files to nifti",
);

/**
 * Read DICOM files into Numpy arrays
 */
export const dicom_numpy = mkPackage(
  nixRaw`pkgs.python2Packages.dicom-numpy`,
  "Read DICOM files into Numpy arrays",
);

/**
 * Python client for DICOMweb RESTful services
 */
export const dicomweb_client = mkPackage(
  nixRaw`pkgs.python2Packages.dicomweb-client`,
  "Python client for DICOMweb RESTful services",
);

/**
 * Library to convert a Python dictionary into an XML string
 */
export const dict2xml = mkPackage(
  nixRaw`pkgs.python2Packages.dict2xml`,
  "Library to convert a Python dictionary into an XML string",
);

/**
 * Module to diff and patch dictionaries
 */
export const dictdiffer = mkPackage(
  nixRaw`pkgs.python2Packages.dictdiffer`,
  "Module to diff and patch dictionaries",
);

/**
 * Dict implementations with attribute access
 */
export const dictionaries = mkPackage(
  nixRaw`pkgs.python2Packages.dictionaries`,
  "Dict implementations with attribute access",
);

/**
 * Converts a Python dictionary or other native data type into a valid XML string
 */
export const dicttoxml = mkPackage(
  nixRaw`pkgs.python2Packages.dicttoxml`,
  "Converts a Python dictionary or other native data type into a valid XML string",
);

/**
 * Converts a Python dictionary or other native data type into a valid XML string
 */
export const dicttoxml2 = mkPackage(
  nixRaw`pkgs.python2Packages.dicttoxml2`,
  "Converts a Python dictionary or other native data type into a valid XML string",
);

/**
 * Automatically find diff lines that need test coverage
 */
export const diff_cover = mkPackage(
  nixRaw`pkgs.python2Packages.diff-cover`,
  "Automatically find diff lines that need test coverage",
);

/**
 * Diff, Match and Patch libraries for Plain Text
 */
export const diff_match_patch = mkPackage(
  nixRaw`pkgs.python2Packages.diff-match-patch`,
  "Diff, Match and Patch libraries for Plain Text",
);

/**
 * Differentiate images in python - get a ratio or percentage difference, and generate a diff image
 */
export const diffimg = mkPackage(
  nixRaw`pkgs.python2Packages.diffimg`,
  "Differentiate images in python - get a ratio or percentage difference, and generate a diff image",
);

/**
 * Utility library for comparing and synchronizing different datasets
 */
export const diffsync = mkPackage(
  nixRaw`pkgs.python2Packages.diffsync`,
  "Utility library for comparing and synchronizing different datasets",
);

/**
 * Python library to interact with Digi International's XBee radio frequency modules
 */
export const digi_xbee = mkPackage(
  nixRaw`pkgs.python2Packages.digi-xbee`,
  "Python library to interact with Digi International's XBee radio frequency modules",
);

/**
 * Python API to manage Digital Ocean Droplets and Images
 */
export const digital_ocean = mkPackage(
  nixRaw`pkgs.python2Packages.digital-ocean`,
  "Python API to manage Digital Ocean Droplets and Images",
);

/**
 * Serialize all of python (almost)
 */
export const dill = mkPackage(
  nixRaw`pkgs.python2Packages.dill`,
  "Serialize all of python (almost)",
);

/**
 * A GitHub activity digest tool
 */
export const dinghy = mkPackage(
  nixRaw`pkgs.python2Packages.dinghy`,
  "A GitHub activity digest tool",
);

/**
 * Python API for interacting with Dingz devices
 */
export const dingz = mkPackage(
  nixRaw`pkgs.python2Packages.dingz`,
  "Python API for interacting with Dingz devices",
);

/**
 * A Python CAS library
 */
export const diofant = mkPackage(
  nixRaw`pkgs.python2Packages.diofant`,
  "A Python CAS library",
);

/**
 * Diffusion imaging toolkit for Python
 */
export const dipy = mkPackage(
  nixRaw`pkgs.python2Packages.dipy`,
  "Diffusion imaging toolkit for Python",
);

/**
 * Asynchronous Python client for DirecTV (SHEF)
 */
export const directv = mkPackage(
  nixRaw`pkgs.python2Packages.directv`,
  "Asynchronous Python client for DirecTV (SHEF)",
);

/**
 * Module for doing dirty (but extremely useful) things with equals
 */
export const dirty_equals = mkPackage(
  nixRaw`pkgs.python2Packages.dirty-equals`,
  "Module for doing dirty (but extremely useful) things with equals",
);

/**
 * Python binding of libdiscid
 */
export const discid = mkPackage(
  nixRaw`pkgs.python2Packages.discid`,
  "Python binding of libdiscid",
);

/**
 * Unofficial Python API client for Discogs
 */
export const discogs_client = mkPackage(
  nixRaw`pkgs.python2Packages.discogs-client`,
  "Unofficial Python API client for Discogs",
);

/**
 * Python wrapper for the Discord API
 */
export const discordpy = mkPackage(
  nixRaw`pkgs.python2Packages.discordpy`,
  "Python wrapper for the Discord API",
);

/**
 * Module to discover devices that respond on port 30303
 */
export const discovery30303 = mkPackage(
  nixRaw`pkgs.python2Packages.discovery30303`,
  "Module to discover devices that respond on port 30303",
);

/**
 * Disk and file backed persistent cache
 */
export const diskcache = mkPackage(
  nixRaw`pkgs.python2Packages.diskcache`,
  "Disk and file backed persistent cache",
);

/**
 * Dissect meta module
 */
export const dissect = mkPackage(
  nixRaw`pkgs.python2Packages.dissect`,
  "Dissect meta module",
);

/**
 * Dissect module implementing a parser for the Windows Common Information Model (CIM) database
 */
export const dissect_cim = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-cim`,
  "Dissect module implementing a parser for the Windows Common Information Model (CIM) database",
);

/**
 * Dissect module implementing a parser for the CLFS (Common Log File System) file system
 */
export const dissect_clfs = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-clfs`,
  "Dissect module implementing a parser for the CLFS (Common Log File System) file system",
);

/**
 * Dissect module implementing a parser for Cobalt Strike related data
 */
export const dissect_cobaltstrike = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-cobaltstrike`,
  "Dissect module implementing a parser for Cobalt Strike related data",
);

/**
 * Dissect module implementing a parser for C-like structures
 */
export const dissect_cstruct = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-cstruct`,
  "Dissect module implementing a parser for C-like structures",
);

/**
 * Dissect module implementing a parser for Microsofts Extensible Storage Engine Database (ESEDB)
 */
export const dissect_esedb = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-esedb`,
  "Dissect module implementing a parser for Microsofts Extensible Storage Engine Database (ESEDB)",
);

/**
 * Dissect module implementing a parser for Event Trace Log (ETL) files
 */
export const dissect_etl = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-etl`,
  "Dissect module implementing a parser for Event Trace Log (ETL) files",
);

/**
 * Dissect module implementing parsers for the Windows EVT, EVTX and WEVT log file formats
 */
export const dissect_eventlog = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-eventlog`,
  "Dissect module implementing parsers for the Windows EVT, EVTX and WEVT log file formats",
);

/**
 * Dissect module implementing a parsers for various forensic evidence file containers
 */
export const dissect_evidence = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-evidence`,
  "Dissect module implementing a parsers for various forensic evidence file containers",
);

/**
 * Dissect module implementing a parser for various executable formats such as PE, ELF and Macho-O
 */
export const dissect_executable = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-executable`,
  "Dissect module implementing a parser for various executable formats such as PE, ELF and Macho-O",
);

/**
 * Dissect module implementing a parser for the ExtFS file system
 */
export const dissect_extfs = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-extfs`,
  "Dissect module implementing a parser for the ExtFS file system",
);

/**
 * Dissect module implementing a parser for the FAT file system
 */
export const dissect_fat = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-fat`,
  "Dissect module implementing a parser for the FAT file system",
);

/**
 * Dissect module implementing a parser for the FFS file system
 */
export const dissect_ffs = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-ffs`,
  "Dissect module implementing a parser for the FFS file system",
);

/**
 * Dissect module implementing parsers for various hypervisor disk, backup and configuration files
 */
export const dissect_hypervisor = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-hypervisor`,
  "Dissect module implementing parsers for various hypervisor disk, backup and configuration files",
);

/**
 * Dissect module implementing a parser for the NTFS file system
 */
export const dissect_ntfs = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-ntfs`,
  "Dissect module implementing a parser for the NTFS file system",
);

/**
 * Dissect module implementing a parser for the Object Linking & Embedding (OLE) format
 */
export const dissect_ole = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-ole`,
  "Dissect module implementing a parser for the Object Linking & Embedding (OLE) format",
);

/**
 * Dissect module implementing a parser for Windows registry file format
 */
export const dissect_regf = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-regf`,
  "Dissect module implementing a parser for Windows registry file format",
);

/**
 * Dissect module implementing a parser for the Shellitem structures
 */
export const dissect_shellitem = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-shellitem`,
  "Dissect module implementing a parser for the Shellitem structures",
);

/**
 * Dissect module implementing a parsers for the SQLite database file format
 */
export const dissect_sql = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-sql`,
  "Dissect module implementing a parsers for the SQLite database file format",
);

/**
 * Dissect module implementing a parser for the SquashFS file system
 */
export const dissect_squashfs = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-squashfs`,
  "Dissect module implementing a parser for the SquashFS file system",
);

/**
 * Dissect module that provides a programming API and command line tools
 */
export const dissect_target = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-target`,
  "Dissect module that provides a programming API and command line tools",
);

/**
 * Dissect module implementing a parser for the Windows thumbcache
 */
export const dissect_thumbcache = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-thumbcache`,
  "Dissect module implementing a parser for the Windows thumbcache",
);

/**
 * Dissect module implementing various utility functions for the other Dissect modules
 */
export const dissect_util = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-util`,
  "Dissect module implementing various utility functions for the other Dissect modules",
);

/**
 * Dissect module implementing a parser for the VMFS file system
 */
export const dissect_vmfs = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-vmfs`,
  "Dissect module implementing a parser for the VMFS file system",
);

/**
 * Dissect module implementing various utility functions for the other Dissect modules
 */
export const dissect_volume = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-volume`,
  "Dissect module implementing various utility functions for the other Dissect modules",
);

/**
 * Dissect module implementing a parser for the XFS file system
 */
export const dissect_xfs = mkPackage(
  nixRaw`pkgs.python2Packages.dissect-xfs`,
  "Dissect module implementing a parser for the XFS file system",
);

/**
 * A python implementation for Noise Protocol Framework
 */
export const dissononce = mkPackage(
  nixRaw`pkgs.python2Packages.dissononce`,
  "A python implementation for Noise Protocol Framework",
);

/**
 * Low-level components of distutils2/packaging
 */
export const distlib = mkPackage(
  nixRaw`pkgs.python2Packages.distlib`,
  "Low-level components of distutils2/packaging",
);

/**
 * Disassembler library for x86/AMD64
 */
export const distorm3 = mkPackage(
  nixRaw`pkgs.python2Packages.distorm3`,
  "Disassembler library for x86/AMD64",
);

/**
 * Distributed computation in Python
 */
export const distributed = mkPackage(
  nixRaw`pkgs.python2Packages.distributed`,
  "Distributed computation in Python",
);

/**
 * Linux Distribution - a Linux OS platform information API.
 */
export const distro = mkPackage(
  nixRaw`pkgs.python2Packages.distro`,
  "Linux Distribution - a Linux OS platform information API.",
);

/**
 * Enhancements to Python's distutils
 */
export const distutils_extra = mkPackage(
  nixRaw`pkgs.python2Packages.distutils-extra`,
  "Enhancements to Python's distutils",
);

/**
 * Use Database URLs in your Django Application
 */
export const dj_database_url = mkPackage(
  nixRaw`pkgs.python2Packages.dj-database-url`,
  "Use Database URLs in your Django Application",
);

/**
 * Use an URL to configure email backend settings in your Django Application
 */
export const dj_email_url = mkPackage(
  nixRaw`pkgs.python2Packages.dj-email-url`,
  "Use an URL to configure email backend settings in your Django Application",
);

/**
 * Authentication for Django Rest Framework
 */
export const dj_rest_auth = mkPackage(
  nixRaw`pkgs.python2Packages.dj-rest-auth`,
  "Authentication for Django Rest Framework",
);

/**
 * Use Search URLs in your Django Haystack Application
 */
export const dj_search_url = mkPackage(
  nixRaw`pkgs.python2Packages.dj-search-url`,
  "Use Search URLs in your Django Haystack Application",
);

/**
 * Serve production static files with Django
 */
export const dj_static = mkPackage(
  nixRaw`pkgs.python2Packages.dj-static`,
  "Serve production static files with Django",
);

/**
 * A high-level Python Web framework that encourages rapid development and clean, pragmatic design.
 */
export const django = mkPackage(
  nixRaw`pkgs.python2Packages.django`,
  "A high-level Python Web framework that encourages rapid development and clean, pragmatic design.",
);

/**
 * A high-level Python Web framework
 */
export const django_3 = mkPackage(
  nixRaw`pkgs.python2Packages.django_3`,
  "A high-level Python Web framework",
);

/**
 * A high-level Python Web framework that encourages rapid development and clean, pragmatic design.
 */
export const django_4 = mkPackage(
  nixRaw`pkgs.python2Packages.django_4`,
  "A high-level Python Web framework that encourages rapid development and clean, pragmatic design.",
);

/**
 * A high-level Python Web framework that encourages rapid development and clean, pragmatic design.
 */
export const django_5 = mkPackage(
  nixRaw`pkgs.python2Packages.django_5`,
  "A high-level Python Web framework that encourages rapid development and clean, pragmatic design.",
);

/**
 * Modern template for Django that covers Admin Section
 */
export const django_admin_datta = mkPackage(
  nixRaw`pkgs.python2Packages.django-admin-datta`,
  "Modern template for Django that covers Admin Section",
);

/**
 * Generic drag-and-drop ordering for objects in the Django admin interface
 */
export const django_admin_sortable2 = mkPackage(
  nixRaw`pkgs.python2Packages.django-admin-sortable2`,
  "Generic drag-and-drop ordering for objects in the Django admin interface",
);

/**
 * Integrated set of Django applications addressing authentication, registration, account management as well as 3rd party (social) account authentication
 */
export const django_allauth = mkPackage(
  nixRaw`pkgs.python2Packages.django-allauth`,
  "Integrated set of Django applications addressing authentication, registration, account management as well as 3rd party (social) account authentication",
);

/**
 * A django application that tries to eliminate annoying things in the Django framework
 */
export const django_annoying = mkPackage(
  nixRaw`pkgs.python2Packages.django-annoying`,
  "A django application that tries to eliminate annoying things in the Django framework",
);

/**
 * Django email backends and webhooks for Mailgun
 */
export const django_anymail = mkPackage(
  nixRaw`pkgs.python2Packages.django-anymail`,
  "Django email backends and webhooks for Mailgun",
);

/**
 * A helper class for handling configuration defaults of packaged apps gracefully
 */
export const django_appconf = mkPackage(
  nixRaw`pkgs.python2Packages.django-appconf`,
  "A helper class for handling configuration defaults of packaged apps gracefully",
);

/**
 * Django authentication backend that authenticates against an LDAP service
 */
export const django_auth_ldap = mkPackage(
  nixRaw`pkgs.python2Packages.django-auth-ldap`,
  "Django authentication backend that authenticates against an LDAP service",
);

/**
 * A fresh approach to autocomplete implementations, specially for Django
 */
export const django_autocomplete_light = mkPackage(
  nixRaw`pkgs.python2Packages.django-autocomplete-light`,
  "A fresh approach to autocomplete implementations, specially for Django",
);

/**
 * Bootstrap 3 integration for Django
 */
export const django_bootstrap3 = mkPackage(
  nixRaw`pkgs.python2Packages.django-bootstrap3`,
  "Bootstrap 3 integration for Django",
);

/**
 * Bootstrap 4 integration with Django
 */
export const django_bootstrap4 = mkPackage(
  nixRaw`pkgs.python2Packages.django-bootstrap4`,
  "Bootstrap 4 integration with Django",
);

/**
 * Bootstrap 5 integration with Django
 */
export const django_bootstrap5 = mkPackage(
  nixRaw`pkgs.python2Packages.django-bootstrap5`,
  "Bootstrap 5 integration with Django",
);

/**
 * No effort, no worry, maximum performance
 */
export const django_cachalot = mkPackage(
  nixRaw`pkgs.python2Packages.django-cachalot`,
  "No effort, no worry, maximum performance",
);

/**
 * Use Cache URLs in your Django application
 */
export const django_cache_url = mkPackage(
  nixRaw`pkgs.python2Packages.django-cache-url`,
  "Use Cache URLs in your Django application",
);

/**
 * A slick ORM cache with automatic granular event-driven invalidation for Django
 */
export const django_cacheops = mkPackage(
  nixRaw`pkgs.python2Packages.django-cacheops`,
  "A slick ORM cache with automatic granular event-driven invalidation for Django",
);

/**
 * Celery Periodic Tasks backed by the Django ORM
 */
export const django_celery_beat = mkPackage(
  nixRaw`pkgs.python2Packages.django-celery-beat`,
  "Celery Periodic Tasks backed by the Django ORM",
);

/**
 * Django email backend that uses a celery task for sending the email
 */
export const django_celery_email = mkPackage(
  nixRaw`pkgs.python2Packages.django-celery-email`,
  "Django email backend that uses a celery task for sending the email",
);

/**
 * Celery result back end with django
 */
export const django_celery_results = mkPackage(
  nixRaw`pkgs.python2Packages.django-celery-results`,
  "Celery result back end with django",
);

/**
 *  Django admin CKEditor integration
 */
export const django_ckeditor = mkPackage(
  nixRaw`pkgs.python2Packages.django-ckeditor`,
  " Django admin CKEditor integration",
);

/**
 * Class based template tags for Django
 */
export const django_classy_tags = mkPackage(
  nixRaw`pkgs.python2Packages.django-classy-tags`,
  "Class based template tags for Django",
);

/**
 * Automatically deletes old file for FileField and ImageField. It also deletes files on models instance deletion
 */
export const django_cleanup = mkPackage(
  nixRaw`pkgs.python2Packages.django-cleanup`,
  "Automatically deletes old file for FileField and ImageField. It also deletes files on models instance deletion",
);

/**
 * Django extension that provides database and form color fields
 */
export const django_colorful = mkPackage(
  nixRaw`pkgs.python2Packages.django-colorful`,
  "Django extension that provides database and form color fields",
);

/**
 * Django middleware to compress responses using several algorithms
 */
export const django_compression_middleware = mkPackage(
  nixRaw`pkgs.python2Packages.django-compression-middleware`,
  "Django middleware to compress responses using several algorithms",
);

/**
 * Compresses linked and inline JavaScript or CSS into single cached files
 */
export const django_compressor = mkPackage(
  nixRaw`pkgs.python2Packages.django-compressor`,
  "Compresses linked and inline JavaScript or CSS into single cached files",
);

/**
 * A helper for organizing Django settings
 */
export const django_configurations = mkPackage(
  nixRaw`pkgs.python2Packages.django-configurations`,
  "A helper for organizing Django settings",
);

/**
 * Django @context decorator
 */
export const django_context_decorator = mkPackage(
  nixRaw`pkgs.python2Packages.django-context-decorator`,
  "Django @context decorator",
);

/**
 * The code formerly known as django.contrib.comments
 */
export const django_contrib_comments = mkPackage(
  nixRaw`pkgs.python2Packages.django-contrib-comments`,
  "The code formerly known as django.contrib.comments",
);

/**
 * Django app for handling server Cross-Origin Resource Sharing (CORS) headers
 */
export const django_cors_headers = mkPackage(
  nixRaw`pkgs.python2Packages.django-cors-headers`,
  "Django app for handling server Cross-Origin Resource Sharing (CORS) headers",
);

/**
 * Provides a country field for Django models
 */
export const django_countries = mkPackage(
  nixRaw`pkgs.python2Packages.django-countries`,
  "Provides a country field for Django models",
);

/**
 * The best way to have DRY Django forms.
 */
export const django_crispy_forms = mkPackage(
  nixRaw`pkgs.python2Packages.django-crispy-forms`,
  "The best way to have DRY Django forms.",
);

/**
 * A set of primitives for performing cryptography in Django
 */
export const django_cryptography = mkPackage(
  nixRaw`pkgs.python2Packages.django-cryptography`,
  "A set of primitives for performing cryptography in Django",
);

/**
 * Adds Content-Security-Policy headers to Django
 */
export const django_csp = mkPackage(
  nixRaw`pkgs.python2Packages.django-csp`,
  "Adds Content-Security-Policy headers to Django",
);

/**
 * Configurable set of panels that display debug information about the current request/response
 */
export const django_debug_toolbar = mkPackage(
  nixRaw`pkgs.python2Packages.django-debug-toolbar`,
  "Configurable set of panels that display debug information about the current request/response",
);

/**
 * Dynamic global and instance settings for your django project
 */
export const django_dynamic_preferences = mkPackage(
  nixRaw`pkgs.python2Packages.django-dynamic-preferences`,
  "Dynamic global and instance settings for your django project",
);

/**
 * A set of fields that wrap standard Django fields with encryption provided by the python cryptography library
 */
export const django_encrypted_model_fields = mkPackage(
  nixRaw`pkgs.python2Packages.django-encrypted-model-fields`,
  "A set of fields that wrap standard Django fields with encryption provided by the python cryptography library",
);

/**
 * Utilize environment variables to configure your Django application
 */
export const django_environ = mkPackage(
  nixRaw`pkgs.python2Packages.django-environ`,
  "Utilize environment variables to configure your Django application",
);

/**
 * A collection of custom extensions for the Django Framework
 */
export const django_extensions = mkPackage(
  nixRaw`pkgs.python2Packages.django-extensions`,
  "A collection of custom extensions for the Django Framework",
);

/**
 * Reusable Django application for allowing users to filter querysets dynamically
 */
export const django_filter = mkPackage(
  nixRaw`pkgs.python2Packages.django-filter`,
  "Reusable Django application for allowing users to filter querysets dynamically",
);

/**
 * A wrapper for a JavaScript formset helper
 */
export const django_formset_js_improved = mkPackage(
  nixRaw`pkgs.python2Packages.django-formset-js-improved`,
  "A wrapper for a JavaScript formset helper",
);

/**
 * A set of high-level abstractions for Django forms
 */
export const django_formtools = mkPackage(
  nixRaw`pkgs.python2Packages.django-formtools`,
  "A set of high-level abstractions for Django forms",
);

/**
 * Django Google Analytics brings the power of server side/non-js Google Analytics to your Django projects
 */
export const django_google_analytics_app = mkPackage(
  nixRaw`pkgs.python2Packages.django-google-analytics-app`,
  "Django Google Analytics brings the power of server side/non-js Google Analytics to your Django projects",
);

/**
 * Django Debug Toolbar for GraphiQL IDE
 */
export const django_graphiql_debug_toolbar = mkPackage(
  nixRaw`pkgs.python2Packages.django-graphiql-debug-toolbar`,
  "Django Debug Toolbar for GraphiQL IDE",
);

/**
 * Essential Gravatar support for Django
 */
export const django_gravatar2 = mkPackage(
  nixRaw`pkgs.python2Packages.django-gravatar2`,
  "Essential Gravatar support for Django",
);

/**
 * Per object permissions for Django
 */
export const django_guardian = mkPackage(
  nixRaw`pkgs.python2Packages.django-guardian`,
  "Per object permissions for Django",
);

/**
 * Pluggable search for Django
 */
export const django_haystack = mkPackage(
  nixRaw`pkgs.python2Packages.django-haystack`,
  "Pluggable search for Django",
);

/**
 * Django hCaptcha provides a simple way to protect your django forms using hCaptcha
 */
export const django_hcaptcha = mkPackage(
  nixRaw`pkgs.python2Packages.django-hcaptcha`,
  "Django hCaptcha provides a simple way to protect your django forms using hCaptcha",
);

/**
 * Pluggable app that runs a full check on the deployment
 */
export const django_health_check = mkPackage(
  nixRaw`pkgs.python2Packages.django-health-check`,
  "Pluggable app that runs a full check on the deployment",
);

/**
 * Flexible and powerful hierarchical key-value store for your Django models
 */
export const django_hierarkey = mkPackage(
  nixRaw`pkgs.python2Packages.django-hierarkey`,
  "Flexible and powerful hierarchical key-value store for your Django models",
);

/**
 * Allows superusers to hijack (=login as) and work on behalf of another user
 */
export const django_hijack = mkPackage(
  nixRaw`pkgs.python2Packages.django-hijack`,
  "Allows superusers to hijack (=login as) and work on behalf of another user",
);

/**
 * Store internationalized strings in Django models
 */
export const django_i18nfield = mkPackage(
  nixRaw`pkgs.python2Packages.django-i18nfield`,
  "Store internationalized strings in Django models",
);

/**
 * Django application and library for importing and exporting data with admin integration
 */
export const django_import_export = mkPackage(
  nixRaw`pkgs.python2Packages.django-import-export`,
  "Django application and library for importing and exporting data with admin integration",
);

/**
 * A Django application to retrieve user's IP address
 */
export const django_ipware = mkPackage(
  nixRaw`pkgs.python2Packages.django-ipware`,
  "A Django application to retrieve user's IP address",
);

/**
 * Simple and nonobstructive jinja2 integration with Django
 */
export const django_jinja = mkPackage(
  nixRaw`pkgs.python2Packages.django-jinja`,
  "Simple and nonobstructive jinja2 integration with Django",
);

/**
 * jQuery, bundled up so apps can depend upon it
 */
export const django_jquery_js = mkPackage(
  nixRaw`pkgs.python2Packages.django-jquery-js`,
  "jQuery, bundled up so apps can depend upon it",
);

/**
 * Script tag with additional attributes for django.forms.Media
 */
export const django_js_asset = mkPackage(
  nixRaw`pkgs.python2Packages.django-js-asset`,
  "Script tag with additional attributes for django.forms.Media",
);

/**
 * Javascript url handling for Django that doesn't hurt
 */
export const django_js_reverse = mkPackage(
  nixRaw`pkgs.python2Packages.django-js-reverse`,
  "Javascript url handling for Django that doesn't hurt",
);

/**
 * Allows you to use Leaflet in your Django projects
 */
export const django_leaflet = mkPackage(
  nixRaw`pkgs.python2Packages.django-leaflet`,
  "Allows you to use Leaflet in your Django projects",
);

/**
 * A django-compressor filter to compile SASS files using libsass
 */
export const django_libsass = mkPackage(
  nixRaw`pkgs.python2Packages.django-libsass`,
  "A django-compressor filter to compile SASS files using libsass",
);

/**
 * Country-specific Django helpers
 */
export const django_localflavor = mkPackage(
  nixRaw`pkgs.python2Packages.django-localflavor`,
  "Country-specific Django helpers",
);

/**
 * Show all LogEntry objects in the Django admin site
 */
export const django_logentry_admin = mkPackage(
  nixRaw`pkgs.python2Packages.django-logentry-admin`,
  "Show all LogEntry objects in the Django admin site",
);

/**
 * Requires login to all requests through middleware in Django
 */
export const django_login_required_middleware = mkPackage(
  nixRaw`pkgs.python2Packages.django-login-required-middleware`,
  "Requires login to all requests through middleware in Django",
);

/**
 * Django library for Mailman UIs
 */
export const django_mailman3 = mkPackage(
  nixRaw`pkgs.python2Packages.django-mailman3`,
  "Django library for Mailman UIs",
);

/**
 * Shows a 503 error page when maintenance-mode is on
 */
export const django_maintenance_mode = mkPackage(
  nixRaw`pkgs.python2Packages.django-maintenance-mode`,
  "Shows a 503 error page when maintenance-mode is on",
);

/**
 * Generic Django application to convert text with specific markup to html.
 */
export const django_markup = mkPackage(
  nixRaw`pkgs.python2Packages.django-markup`,
  "Generic Django application to convert text with specific markup to html.",
);

/**
 * Django model mixins and utilities
 */
export const django_model_utils = mkPackage(
  nixRaw`pkgs.python2Packages.django-model-utils`,
  "Django model mixins and utilities",
);

/**
 * Django extension to allow working with 'clusters' of models as a single unit, independently of the database
 */
export const django_modelcluster = mkPackage(
  nixRaw`pkgs.python2Packages.django-modelcluster`,
  "Django extension to allow working with 'clusters' of models as a single unit, independently of the database",
);

/**
 * Utilities for implementing a modified pre-order traversal tree in Django
 */
export const django_mptt = mkPackage(
  nixRaw`pkgs.python2Packages.django-mptt`,
  "Utilities for implementing a modified pre-order traversal tree in Django",
);

/**
 * django-multiselectfield
 */
export const django_multiselectfield = mkPackage(
  nixRaw`pkgs.python2Packages.django-multiselectfield`,
  "django-multiselectfield",
);

/**
 * Extensions to Django for use with MySQL/MariaD
 */
export const django_mysql = mkPackage(
  nixRaw`pkgs.python2Packages.django-mysql`,
  "Extensions to Django for use with MySQL/MariaD",
);

/**
 * Web framework for building APIs with Django and Python type hints
 */
export const django_ninja = mkPackage(
  nixRaw`pkgs.python2Packages.django-ninja`,
  "Web framework for building APIs with Django and Python type hints",
);

/**
 * Provides all the goodness of nose in your Django tests
 */
export const django_nose = mkPackage(
  nixRaw`pkgs.python2Packages.django-nose`,
  "Provides all the goodness of nose in your Django tests",
);

/**
 * OAuth2 goodies for the Djangonauts
 */
export const django_oauth_toolkit = mkPackage(
  nixRaw`pkgs.python2Packages.django-oauth-toolkit`,
  "OAuth2 goodies for the Djangonauts",
);

/**
 * Pluggable framework for adding two-factor authentication to Django using one-time passwords
 */
export const django_otp = mkPackage(
  nixRaw`pkgs.python2Packages.django-otp`,
  "Pluggable framework for adding two-factor authentication to Django using one-time passwords",
);

/**
 * Django app that integrates jQuery ColorPicker with the Django admin
 */
export const django_paintstore = mkPackage(
  nixRaw`pkgs.python2Packages.django-paintstore`,
  "Django app that integrates jQuery ColorPicker with the Django admin",
);

/**
 * Simple Django model translations without nasty hacks
 */
export const django_parler = mkPackage(
  nixRaw`pkgs.python2Packages.django-parler`,
  "Simple Django model translations without nasty hacks",
);

/**
 * UI pattern libraries for Django templates
 */
export const django_pattern_library = mkPackage(
  nixRaw`pkgs.python2Packages.django-pattern-library`,
  "UI pattern libraries for Django templates",
);

/**
 * Universal payment handling for Django.
 */
export const django_payments = mkPackage(
  nixRaw`pkgs.python2Packages.django-payments`,
  "Universal payment handling for Django.",
);

/**
 * PostgreSQL locking context managers and functions for Django.
 */
export const django_pglocks = mkPackage(
  nixRaw`pkgs.python2Packages.django-pglocks`,
  "PostgreSQL locking context managers and functions for Django.",
);

/**
 * A django model and form field for normalised phone numbers using python-phonenumbers
 */
export const django_phonenumber_field = mkPackage(
  nixRaw`pkgs.python2Packages.django-phonenumber-field`,
  "A django model and form field for normalised phone numbers using python-phonenumbers",
);

/**
 * A pickled object field for Django
 */
export const django_picklefield = mkPackage(
  nixRaw`pkgs.python2Packages.django-picklefield`,
  "A pickled object field for Django",
);

/**
 * Improved Django model inheritance with automatic downcasting
 */
export const django_polymorphic = mkPackage(
  nixRaw`pkgs.python2Packages.django-polymorphic`,
  "Improved Django model inheritance with automatic downcasting",
);

/**
 * Django PostgreSQL netfields implementation
 */
export const django_postgresql_netfields = mkPackage(
  nixRaw`pkgs.python2Packages.django-postgresql-netfields`,
  "Django PostgreSQL netfields implementation",
);

/**
 * Django middlewares to monitor your application with Prometheus.io
 */
export const django_prometheus = mkPackage(
  nixRaw`pkgs.python2Packages.django-prometheus`,
  "Django middlewares to monitor your application with Prometheus.io",
);

/**
 * A multiprocessing distributed task queue for Django
 */
export const django_q = mkPackage(
  nixRaw`pkgs.python2Packages.django-q`,
  "A multiprocessing distributed task queue for Django",
);

/**
 * A modified FileResponse that returns `Content-Range` headers with the HTTP response, so browsers (read Safari 9+) that request the file, can stream the response properly
 */
export const django_ranged_response = mkPackage(
  nixRaw`pkgs.python2Packages.django-ranged-response`,
  "A modified FileResponse that returns `Content-Range` headers with the HTTP response, so browsers (read Safari 9+) that request the file, can stream the response properly",
);

/**
 * Basic raster data integration for Django
 */
export const django_raster = mkPackage(
  nixRaw`pkgs.python2Packages.django-raster`,
  "Basic raster data integration for Django",
);

/**
 * Full featured redis cache backend for Django
 */
export const django_redis = mkPackage(
  nixRaw`pkgs.python2Packages.django-redis`,
  "Full featured redis cache backend for Django",
);

/**
 * Django app that makes registration and authentication easy
 */
export const django_rest_auth = mkPackage(
  nixRaw`pkgs.python2Packages.django-rest-auth`,
  "Django app that makes registration and authentication easy",
);

/**
 * Polymorphic serializers for Django REST Framework
 */
export const django_rest_polymorphic = mkPackage(
  nixRaw`pkgs.python2Packages.django-rest-polymorphic`,
  "Polymorphic serializers for Django REST Framework",
);

/**
 * User-related REST API based on the awesome Django REST Framework
 */
export const django_rest_registration = mkPackage(
  nixRaw`pkgs.python2Packages.django-rest-registration`,
  "User-related REST API based on the awesome Django REST Framework",
);

/**
 * An extension to the Django web framework that provides comprehensive version control facilities
 */
export const django_reversion = mkPackage(
  nixRaw`pkgs.python2Packages.django-reversion`,
  "An extension to the Django web framework that provides comprehensive version control facilities",
);

/**
 * Rosetta is a Django application that facilitates the translation process of your Django projects
 */
export const django_rosetta = mkPackage(
  nixRaw`pkgs.python2Packages.django-rosetta`,
  "Rosetta is a Django application that facilitates the translation process of your Django projects",
);

/**
 * Simple app that provides django integration for RQ (Redis Queue)
 */
export const django_rq = mkPackage(
  nixRaw`pkgs.python2Packages.django-rq`,
  "Simple app that provides django integration for RQ (Redis Queue)",
);

/**
 * A calendar app for Django
 */
export const django_scheduler = mkPackage(
  nixRaw`pkgs.python2Packages.django-scheduler`,
  "A calendar app for Django",
);

/**
 * A SCIM 2.0 Service Provider Implementation (for Django)
 */
export const django_scim2 = mkPackage(
  nixRaw`pkgs.python2Packages.django-scim2`,
  "A SCIM 2.0 Service Provider Implementation (for Django)",
);

/**
 * Safely separate multiple tenants in a Django database
 */
export const django_scopes = mkPackage(
  nixRaw`pkgs.python2Packages.django-scopes`,
  "Safely separate multiple tenants in a Django database",
);

/**
 * Define placeholders where your blocks get rendered and append to those blocks
 */
export const django_sekizai = mkPackage(
  nixRaw`pkgs.python2Packages.django-sekizai`,
  "Define placeholders where your blocks get rendered and append to those blocks",
);

/**
 * URLs with authentication tokens for automatic login
 */
export const django_sesame = mkPackage(
  nixRaw`pkgs.python2Packages.django-sesame`,
  "URLs with authentication tokens for automatic login",
);

/**
 * Short UUIDField for Django. Good for use in urls & file names
 */
export const django_shortuuidfield = mkPackage(
  nixRaw`pkgs.python2Packages.django-shortuuidfield`,
  "Short UUIDField for Django. Good for use in urls & file names",
);

/**
 * Silky smooth profiling for the Django Framework
 */
export const django_silk = mkPackage(
  nixRaw`pkgs.python2Packages.django-silk`,
  "Silky smooth profiling for the Django Framework",
);

/**
 * Customizable Django application to add captcha images to any Django form
 */
export const django_simple_captcha = mkPackage(
  nixRaw`pkgs.python2Packages.django-simple-captcha`,
  "Customizable Django application to add captcha images to any Django form",
);

/**
 * django-simple-history stores Django model state on every create/update/delete
 */
export const django_simple_history = mkPackage(
  nixRaw`pkgs.python2Packages.django-simple-history`,
  "django-simple-history stores Django model state on every create/update/delete",
);

/**
 * Django settings resolver
 */
export const django_sr = mkPackage(
  nixRaw`pkgs.python2Packages.django-sr`,
  "Django settings resolver",
);

/**
 * Helper for generating Javascript catalog to static files
 */
export const django_statici18n = mkPackage(
  nixRaw`pkgs.python2Packages.django-statici18n`,
  "Helper for generating Javascript catalog to static files",
);

/**
 * Collection of custom storage backends for Django
 */
export const django_storages = mkPackage(
  nixRaw`pkgs.python2Packages.django-storages`,
  "Collection of custom storage backends for Django",
);

/**
 * PEP-484 stubs for Django
 */
export const django_stubs = mkPackage(
  nixRaw`pkgs.python2Packages.django-stubs`,
  "PEP-484 stubs for Django",
);

/**
 * Extensions and monkey-patching for django-stubs
 */
export const django_stubs_ext = mkPackage(
  nixRaw`pkgs.python2Packages.django-stubs-ext`,
  "Extensions and monkey-patching for django-stubs",
);

/**
 * Django app for creating HTML tables
 */
export const django_tables2 = mkPackage(
  nixRaw`pkgs.python2Packages.django-tables2`,
  "Django app for creating HTML tables",
);

/**
 * A generic tagging application for Django projects
 */
export const django_tagging = mkPackage(
  nixRaw`pkgs.python2Packages.django-tagging`,
  "A generic tagging application for Django projects",
);

/**
 * Simple tagging for django
 */
export const django_taggit = mkPackage(
  nixRaw`pkgs.python2Packages.django-taggit`,
  "Simple tagging for django",
);

/**
 * Utilities and helpers for writing Pylint plugins
 */
export const django_tastypie = mkPackage(
  nixRaw`pkgs.python2Packages.django-tastypie`,
  "Utilities and helpers for writing Pylint plugins",
);

/**
 * Django app providing database, form and serializer fields for pytz timezone objects
 */
export const django_timezone_field = mkPackage(
  nixRaw`pkgs.python2Packages.django-timezone-field`,
  "Django app providing database, form and serializer fields for pytz timezone objects",
);

/**
 * Efficient tree implementations for Django
 */
export const django_treebeard = mkPackage(
  nixRaw`pkgs.python2Packages.django-treebeard`,
  "Efficient tree implementations for Django",
);

/**
 * Complete Two-Factor Authentication for Django
 */
export const django_two_factor_auth = mkPackage(
  nixRaw`pkgs.python2Packages.django-two-factor-auth`,
  "Complete Two-Factor Authentication for Django",
);

/**
 * Type stubs for Django
 */
export const django_types = mkPackage(
  nixRaw`pkgs.python2Packages.django-types`,
  "Type stubs for Django",
);

/**
 * Replaces django's ImageField with a more flexible interface
 */
export const django_versatileimagefield = mkPackage(
  nixRaw`pkgs.python2Packages.django-versatileimagefield`,
  "Replaces django's ImageField with a more flexible interface",
);

/**
 * Integration of ViteJS in a Django project
 */
export const django_vite = mkPackage(
  nixRaw`pkgs.python2Packages.django-vite`,
  "Integration of ViteJS in a Django project",
);

/**
 * Use webpack to generate your static bundles
 */
export const django_webpack_loader = mkPackage(
  nixRaw`pkgs.python2Packages.django-webpack-loader`,
  "Use webpack to generate your static bundles",
);

/**
 * A Package made for integrating and sending Web Push Notification in Django Application
 */
export const django_webpush = mkPackage(
  nixRaw`pkgs.python2Packages.django-webpush`,
  "A Package made for integrating and sending Web Push Notification in Django Application",
);

/**
 * Tweak the form field rendering in templates, not in python-level form definitions
 */
export const django_widget_tweaks = mkPackage(
  nixRaw`pkgs.python2Packages.django-widget-tweaks`,
  "Tweak the form field rendering in templates, not in python-level form definitions",
);

/**
 * Advanced search language for Django
 */
export const djangoql = mkPackage(
  nixRaw`pkgs.python2Packages.djangoql`,
  "Advanced search language for Django",
);

/**
 * Web APIs for Django, made easy
 */
export const djangorestframework = mkPackage(
  nixRaw`pkgs.python2Packages.djangorestframework`,
  "Web APIs for Django, made easy",
);

/**
 * Camel case JSON support for Django REST framework
 */
export const djangorestframework_camel_case = mkPackage(
  nixRaw`pkgs.python2Packages.djangorestframework-camel-case`,
  "Camel case JSON support for Django REST framework",
);

/**
 *  Dataclasses serializer for Django REST framework
 */
export const djangorestframework_dataclasses = mkPackage(
  nixRaw`pkgs.python2Packages.djangorestframework-dataclasses`,
  " Dataclasses serializer for Django REST framework",
);

/**
 * Django-guardian support for Django REST Framework
 */
export const djangorestframework_guardian2 = mkPackage(
  nixRaw`pkgs.python2Packages.djangorestframework-guardian2`,
  "Django-guardian support for Django REST Framework",
);

/**
 *  Recursive Serialization for Django REST framework 
 */
export const djangorestframework_recursive = mkPackage(
  nixRaw`pkgs.python2Packages.djangorestframework-recursive`,
  " Recursive Serialization for Django REST framework ",
);

/**
 * JSON Web Token authentication plugin for Django REST Framework
 */
export const djangorestframework_simplejwt = mkPackage(
  nixRaw`pkgs.python2Packages.djangorestframework-simplejwt`,
  "JSON Web Token authentication plugin for Django REST Framework",
);

/**
 * PEP-484 stubs for Django REST Framework
 */
export const djangorestframework_stubs = mkPackage(
  nixRaw`pkgs.python2Packages.djangorestframework-stubs`,
  "PEP-484 stubs for Django REST Framework",
);

/**
 * Simple, powerfull and nonobstructive django email middleware
 */
export const djmail = mkPackage(
  nixRaw`pkgs.python2Packages.djmail`,
  "Simple, powerfull and nonobstructive django email middleware",
);

/**
 * DKIM + ARC email signing/verification tools + Python module
 */
export const dkimpy = mkPackage(
  nixRaw`pkgs.python2Packages.dkimpy`,
  "DKIM + ARC email signing/verification tools + Python module",
);

/**
 * A general purpose cross-platform C++ machine learning library
 */
export const dlib = mkPackage(
  nixRaw`pkgs.python2Packages.dlib`,
  "A general purpose cross-platform C++ machine learning library",
);

/**
 * Python wrapper for libc's dlinfo and dyld_find on Mac
 */
export const dlinfo = mkPackage(
  nixRaw`pkgs.python2Packages.dlinfo`,
  "Python wrapper for libc's dlinfo and dyld_find on Mac",
);

/**
 * A logging tool for deep learning
 */
export const dllogger = mkPackage(
  nixRaw`pkgs.python2Packages.dllogger`,
  "A logging tool for deep learning",
);

/**
 * Python module to parse DLMS/COSEM
 */
export const dlms_cosem = mkPackage(
  nixRaw`pkgs.python2Packages.dlms-cosem`,
  "Python module to parse DLMS/COSEM",
);

/**
 * Implementation of Donald Knuth's Dancing Links algorithm
 */
export const dlx = mkPackage(
  nixRaw`pkgs.python2Packages.dlx`,
  "Implementation of Donald Knuth's Dancing Links algorithm",
);

/**
 * Pure Python client for Apache Kafka
 */
export const dm_env = mkPackage(
  nixRaw`pkgs.python2Packages.dm-env`,
  "Pure Python client for Apache Kafka",
);

/**
 * Haiku is a simple neural network library for JAX developed by some of the authors of Sonnet.
 */
export const dm_haiku = mkPackage(
  nixRaw`pkgs.python2Packages.dm-haiku`,
  "Haiku is a simple neural network library for JAX developed by some of the authors of Sonnet.",
);

/**
 * Library for building neural networks in TensorFlow
 */
export const dm_sonnet = mkPackage(
  nixRaw`pkgs.python2Packages.dm-sonnet`,
  "Library for building neural networks in TensorFlow",
);

/**
 * Tree is a library for working with nested data structures.
 */
export const dm_tree = mkPackage(
  nixRaw`pkgs.python2Packages.dm-tree`,
  "Tree is a library for working with nested data structures.",
);

/**
 * A Python wrapper for dmenu
 */
export const dmenu_python = mkPackage(
  nixRaw`pkgs.python2Packages.dmenu-python`,
  "A Python wrapper for dmenu",
);

/**
 * Optimize DNA sequences under constraints
 */
export const dnachisel = mkPackage(
  nixRaw`pkgs.python2Packages.dnachisel`,
  "Optimize DNA sequences under constraints",
);

/**
 * Module to parse .NET executable files
 */
export const dnfile = mkPackage(
  nixRaw`pkgs.python2Packages.dnfile`,
  "Module to parse .NET executable files",
);

/**
 * Manipulate DNS records on various DNS providers in a standardized way
 */
export const dns_lexicon = mkPackage(
  nixRaw`pkgs.python2Packages.dns-lexicon`,
  "Manipulate DNS records on various DNS providers in a standardized way",
);

/**
 * Simple library to encode/decode DNS wire-format packets
 */
export const dnslib = mkPackage(
  nixRaw`pkgs.python2Packages.dnslib`,
  "Simple library to encode/decode DNS wire-format packets",
);

/**
 * A DNS toolkit for Python
 */
export const dnspython = mkPackage(
  nixRaw`pkgs.python2Packages.dnspython`,
  "A DNS toolkit for Python",
);

/**
 * Style checker for Sphinx (or other) RST documentation
 */
export const doc8 = mkPackage(
  nixRaw`pkgs.python2Packages.doc8`,
  "Style checker for Sphinx (or other) RST documentation",
);

/**
 * Formats docstrings to follow PEP 257
 */
export const docformatter = mkPackage(
  nixRaw`pkgs.python2Packages.docformatter`,
  "Formats docstrings to follow PEP 257",
);

/**
 * An API client for docker written in Python
 */
export const docker = mkPackage(
  nixRaw`pkgs.python2Packages.docker`,
  "An API client for docker written in Python",
);

/**
 * Python library for the Docker Remote API
 */
export const docker_py = mkPackage(
  nixRaw`pkgs.python2Packages.docker-py`,
  "Python library for the Docker Remote API",
);

/**
 * Python bindings for the docker credentials store API.
 */
export const docker_pycreds = mkPackage(
  nixRaw`pkgs.python2Packages.docker_pycreds`,
  "Python bindings for the docker credentials store API.",
);

/**
 * Library for parsing Dockerfile files
 */
export const dockerfile_parse = mkPackage(
  nixRaw`pkgs.python2Packages.dockerfile-parse`,
  "Library for parsing Dockerfile files",
);

/**
 * Functionality needed to operate the pseudo-tty (PTY) allocated to a docker container
 */
export const dockerpty = mkPackage(
  nixRaw`pkgs.python2Packages.dockerpty`,
  "Functionality needed to operate the pseudo-tty (PTY) allocated to a docker container",
);

/**
 * Dockerspawner: A custom spawner for Jupyterhub
 */
export const dockerspawner = mkPackage(
  nixRaw`pkgs.python2Packages.dockerspawner`,
  "Dockerspawner: A custom spawner for Jupyterhub",
);

/**
 * The IBM Decision Optimization on Cloud Python client
 */
export const docloud = mkPackage(
  nixRaw`pkgs.python2Packages.docloud`,
  "The IBM Decision Optimization on Cloud Python client",
);

/**
 * Pythonic argument parser, that will make you smile
 */
export const docopt = mkPackage(
  nixRaw`pkgs.python2Packages.docopt`,
  "Pythonic argument parser, that will make you smile",
);

/**
 * More-magic command line arguments parser. Now with more maintenance!
 */
export const docopt_ng = mkPackage(
  nixRaw`pkgs.python2Packages.docopt-ng`,
  "More-magic command line arguments parser. Now with more maintenance!",
);

/**
 * IBM Decision Optimization CPLEX Modeling for Python
 */
export const docplex = mkPackage(
  nixRaw`pkgs.python2Packages.docplex`,
  "IBM Decision Optimization CPLEX Modeling for Python",
);

/**
 * Python package for docstring repetition
 */
export const docrep = mkPackage(
  nixRaw`pkgs.python2Packages.docrep`,
  "Python package for docstring repetition",
);

/**
 * Parse Python docstrings in various flavors
 */
export const docstring_parser = mkPackage(
  nixRaw`pkgs.python2Packages.docstring-parser`,
  "Parse Python docstrings in various flavors",
);

/**
 * On the fly conversion of Python docstrings to markdown
 */
export const docstring_to_markdown = mkPackage(
  nixRaw`pkgs.python2Packages.docstring-to-markdown`,
  "On the fly conversion of Python docstrings to markdown",
);

/**
 * Add flag to ignore unicode literal prefixes in doctests
 */
export const doctest_ignore_unicode = mkPackage(
  nixRaw`pkgs.python2Packages.doctest-ignore-unicode`,
  "Add flag to ignore unicode literal prefixes in doctests",
);

/**
 * Python Documentation Utilities
 */
export const docutils = mkPackage(
  nixRaw`pkgs.python2Packages.docutils`,
  "Python Documentation Utilities",
);

/**
 * Extract docx headers, footers, (formatted) text, footnotes, endnotes, properties, and images
 */
export const docx2python = mkPackage(
  nixRaw`pkgs.python2Packages.docx2python`,
  "Extract docx headers, footers, (formatted) text, footnotes, endnotes, properties, and images",
);

/**
 * A pure python-based utility to extract text and images from docx files
 */
export const docx2txt = mkPackage(
  nixRaw`pkgs.python2Packages.docx2txt`,
  "A pure python-based utility to extract text and images from docx files",
);

/**
 * Looks at Python code to search for things which look "dodgy" such as passwords or diffs
 */
export const dodgy = mkPackage(
  nixRaw`pkgs.python2Packages.dodgy`,
  "Looks at Python code to search for things which look \"dodgy\" such as passwords or diffs",
);

/**
 * A caching front-end based on the Dogpile lock
 */
export const dogpile_cache = mkPackage(
  nixRaw`pkgs.python2Packages.dogpile-cache`,
  "A caching front-end based on the Dogpile lock",
);

/**
 * An enterprise-class Certificate Authority
 */
export const dogtag_pki = mkPackage(
  nixRaw`pkgs.python2Packages.dogtag-pki`,
  "An enterprise-class Certificate Authority",
);

/**
 * GUI test tool and automation framework that uses Accessibility technologies to communicate with desktop applications
 */
export const dogtail = mkPackage(
  nixRaw`pkgs.python2Packages.dogtail`,
  "GUI test tool and automation framework that uses Accessibility technologies to communicate with desktop applications",
);

/**
 * A task management & automation tool
 */
export const doit = mkPackage(
  nixRaw`pkgs.python2Packages.doit`,
  "A task management & automation tool",
);

/**
 * doit tasks for python stuff
 */
export const doit_py = mkPackage(
  nixRaw`pkgs.python2Packages.doit-py`,
  "doit tasks for python stuff",
);

/**
 * A python module that aims to manage DokuWiki wikis by using the provided XML-RPC API
 */
export const dokuwiki = mkPackage(
  nixRaw`pkgs.python2Packages.dokuwiki`,
  "A python module that aims to manage DokuWiki wikis by using the provided XML-RPC API",
);

/**
 * Python library for working with the Domeneshop API
 */
export const domeneshop = mkPackage(
  nixRaw`pkgs.python2Packages.domeneshop`,
  "Python library for working with the Domeneshop API",
);

/**
 * Library for creating and manipulating HTML documents using an elegant DOM API
 */
export const dominate = mkPackage(
  nixRaw`pkgs.python2Packages.dominate`,
  "Library for creating and manipulating HTML documents using an elegant DOM API",
);

/**
 * Python wrapper for the DoorBird LAN API
 */
export const doorbirdpy = mkPackage(
  nixRaw`pkgs.python2Packages.doorbirdpy`,
  "Python wrapper for the DoorBird LAN API",
);

/**
 * Digital Ocean API python wrapper
 */
export const dopy = mkPackage(
  nixRaw`pkgs.python2Packages.dopy`,
  "Digital Ocean API python wrapper",
);

/**
 * Convert graphs generated by Graphviz to LaTeX friendly formats
 */
export const dot2tex = mkPackage(
  nixRaw`pkgs.python2Packages.dot2tex`,
  "Convert graphs generated by Graphviz to LaTeX friendly formats",
);

/**
 * Python for dot-access dictionaries
 */
export const dotmap = mkPackage(
  nixRaw`pkgs.python2Packages.dotmap`,
  "Python for dot-access dictionaries",
);

/**
 * Dictionary wrapper for quick access to deeply nested keys
 */
export const dotty_dict = mkPackage(
  nixRaw`pkgs.python2Packages.dotty-dict`,
  "Dictionary wrapper for quick access to deeply nested keys",
);

/**
 * Dict subclass that supports dot access notation
 */
export const dotwiz = mkPackage(
  nixRaw`pkgs.python2Packages.dotwiz`,
  "Dict subclass that supports dot access notation",
);

/**
 * Downloader with an awesome customizable progressbar
 */
export const downloader_cli = mkPackage(
  nixRaw`pkgs.python2Packages.downloader-cli`,
  "Downloader with an awesome customizable progressbar",
);

/**
 * A parser for Python dependency files
 */
export const dparse = mkPackage(
  nixRaw`pkgs.python2Packages.dparse`,
  "A parser for Python dependency files",
);

/**
 * Module to parse Python dependency files
 */
export const dparse2 = mkPackage(
  nixRaw`pkgs.python2Packages.dparse2`,
  "Module to parse Python dependency files",
);

/**
 * Python library for accessing and searching dictionaries via /slashed/paths ala xpath
 */
export const dpath = mkPackage(
  nixRaw`pkgs.python2Packages.dpath`,
  "Python library for accessing and searching dictionaries via /slashed/paths ala xpath",
);

/**
 * Provides a collection of decorators that makes it easy to write software using contracts
 */
export const dpcontracts = mkPackage(
  nixRaw`pkgs.python2Packages.dpcontracts`,
  "Provides a collection of decorators that makes it easy to write software using contracts",
);

/**
 * Fast, simple packet creation / parsing, with definitions for the basic TCP/IP protocols
 */
export const dpkt = mkPackage(
  nixRaw`pkgs.python2Packages.dpkt`,
  "Fast, simple packet creation / parsing, with definitions for the basic TCP/IP protocols",
);

/**
 * Library to convert Draft.js ContentState to HTML
 */
export const draftjs_exporter = mkPackage(
  nixRaw`pkgs.python2Packages.draftjs-exporter`,
  "Library to convert Draft.js ContentState to HTML",
);

/**
 * Speech recognition framework allowing powerful Python-based scripting
 */
export const dragonfly = mkPackage(
  nixRaw`pkgs.python2Packages.dragonfly`,
  "Speech recognition framework allowing powerful Python-based scripting",
);

/**
 * Background Processing for Python 3
 */
export const dramatiq = mkPackage(
  nixRaw`pkgs.python2Packages.dramatiq`,
  "Background Processing for Python 3",
);

/**
 * Drawing in terminal with unicode braille characters
 */
export const drawille = mkPackage(
  nixRaw`pkgs.python2Packages.drawille`,
  "Drawing in terminal with unicode braille characters",
);

/**
 * matplotlib backend for graph output in unicode terminals using drawille
 */
export const drawilleplot = mkPackage(
  nixRaw`pkgs.python2Packages.drawilleplot`,
  "matplotlib backend for graph output in unicode terminals using drawille",
);

/**
 * Module for interacting with Dremel 3D printers
 */
export const dremel3dpy = mkPackage(
  nixRaw`pkgs.python2Packages.dremel3dpy`,
  "Module for interacting with Dremel 3D printers",
);

/**
 * JSON Web Token based authentication for Django REST framework
 */
export const drf_jwt = mkPackage(
  nixRaw`pkgs.python2Packages.drf-jwt`,
  "JSON Web Token based authentication for Django REST framework",
);

/**
 * Provides routers and fields to create nested resources in the Django Rest Framework
 */
export const drf_nested_routers = mkPackage(
  nixRaw`pkgs.python2Packages.drf-nested-routers`,
  "Provides routers and fields to create nested resources in the Django Rest Framework",
);

/**
 * Sane and flexible OpenAPI 3 schema generation for Django REST framework
 */
export const drf_spectacular = mkPackage(
  nixRaw`pkgs.python2Packages.drf-spectacular`,
  "Sane and flexible OpenAPI 3 schema generation for Django REST framework",
);

/**
 * Serve self-contained distribution builds of Swagger UI and Redoc with Django
 */
export const drf_spectacular_sidecar = mkPackage(
  nixRaw`pkgs.python2Packages.drf-spectacular-sidecar`,
  "Serve self-contained distribution builds of Swagger UI and Redoc with Django",
);

/**
 * JSON parser and renderer using ujson for Django Rest Framework
 */
export const drf_ujson2 = mkPackage(
  nixRaw`pkgs.python2Packages.drf-ujson2`,
  "JSON parser and renderer using ujson for Django Rest Framework",
);

/**
 * Writable nested model serializer for Django REST Framework
 */
export const drf_writable_nested = mkPackage(
  nixRaw`pkgs.python2Packages.drf-writable-nested`,
  "Writable nested model serializer for Django REST Framework",
);

/**
 * Generation of Swagger/OpenAPI schemas for Django REST Framework
 */
export const drf_yasg = mkPackage(
  nixRaw`pkgs.python2Packages.drf-yasg`,
  "Generation of Swagger/OpenAPI schemas for Django REST Framework",
);

/**
 * Easy access to the most common Google Drive API calls
 */
export const drivelib = mkPackage(
  nixRaw`pkgs.python2Packages.drivelib`,
  "Easy access to the most common Google Drive API calls",
);

/**
 * Access HMI, AIA and MDI data with Python
 */
export const drms = mkPackage(
  nixRaw`pkgs.python2Packages.drms`,
  "Access HMI, AIA and MDI data with Python",
);

/**
 * Python implementation of the DroneCAN v1 protocol stack
 */
export const dronecan = mkPackage(
  nixRaw`pkgs.python2Packages.dronecan`,
  "Python implementation of the DroneCAN v1 protocol stack",
);

/**
 * Python library for Dropbox's HTTP-based Core and Datastore APIs
 */
export const dropbox = mkPackage(
  nixRaw`pkgs.python2Packages.dropbox`,
  "Python library for Dropbox's HTTP-based Core and Datastore APIs",
);

/**
 * Userspace driver for the DualShock 4 controller
 */
export const ds4drv = mkPackage(
  nixRaw`pkgs.python2Packages.ds4drv`,
  "Userspace driver for the DualShock 4 controller",
);

/**
 * Manipulate Finder .DS_Store files from Python
 */
export const ds_store = mkPackage(
  nixRaw`pkgs.python2Packages.ds-store`,
  "Manipulate Finder .DS_Store files from Python",
);

/**
 * Module to interact with Windows Active Directory
 */
export const dsinternals = mkPackage(
  nixRaw`pkgs.python2Packages.dsinternals`,
  "Module to interact with Windows Active Directory",
);

/**
 * Python module to parse Dutch Smart Meter Requirements (DSMR)
 */
export const dsmr_parser = mkPackage(
  nixRaw`pkgs.python2Packages.dsmr-parser`,
  "Python module to parse Dutch Smart Meter Requirements (DSMR)",
);

/**
 * Utility for downloading and mounting EBS snapshots using the EBS Direct API's
 */
export const dsnap = mkPackage(
  nixRaw`pkgs.python2Packages.dsnap`,
  "Utility for downloading and mounting EBS snapshots using the EBS Direct API's",
);

/**
 * Cython wrapper for tinydtls with a Socket like interface
 */
export const dtlssocket = mkPackage(
  nixRaw`pkgs.python2Packages.dtlssocket`,
  "Cython wrapper for tinydtls with a Socket like interface",
);

/**
 * Python port of R's Comprehensive Dynamic Time Warp algorithms package
 */
export const dtw_python = mkPackage(
  nixRaw`pkgs.python2Packages.dtw-python`,
  "Python port of R's Comprehensive Dynamic Time Warp algorithms package",
);

/**
 * Efficient algorithms for Fast Fourier transforms and more
 */
export const ducc0 = mkPackage(
  nixRaw`pkgs.python2Packages.ducc0`,
  "Efficient algorithms for Fast Fourier transforms and more",
);

/**
 * Python binding for DuckDB
 */
export const duckdb = mkPackage(
  nixRaw`pkgs.python2Packages.duckdb`,
  "Python binding for DuckDB",
);

/**
 * SQLAlchemy driver for duckdb
 */
export const duckdb_engine = mkPackage(
  nixRaw`pkgs.python2Packages.duckdb-engine`,
  "SQLAlchemy driver for duckdb",
);

/**
 * A python CLI and library for searching for words, documents, images, videos, news, maps and text translation using the DuckDuckGo.com search engine
 */
export const duckduckgo_search = mkPackage(
  nixRaw`pkgs.python2Packages.duckduckgo-search`,
  "A python CLI and library for searching for words, documents, images, videos, news, maps and text translation using the DuckDuckGo.com search engine",
);

/**
 * A Python library for running child processes
 */
export const duct_py = mkPackage(
  nixRaw`pkgs.python2Packages.duct-py`,
  "A Python library for running child processes",
);

/**
 * Simple framework to embed references in code
 */
export const duecredit = mkPackage(
  nixRaw`pkgs.python2Packages.duecredit`,
  "Simple framework to embed references in code",
);

/**
 * A simple future-based async library for python
 */
export const duet = mkPackage(
  nixRaw`pkgs.python2Packages.duet`,
  "A simple future-based async library for python",
);

/**
 * Clean matplotlib plots
 */
export const dufte = mkPackage(
  nixRaw`pkgs.python2Packages.dufte`,
  "Clean matplotlib plots",
);

/**
 * HTTP 1.1 client designed for REST-ful APIs
 */
export const dugong = mkPackage(
  nixRaw`pkgs.python2Packages.dugong`,
  "HTTP 1.1 client designed for REST-ful APIs",
);

/**
 * Implementation of the Git file formats and protocols
 */
export const dulwich = mkPackage(
  nixRaw`pkgs.python2Packages.dulwich`,
  "Implementation of the Git file formats and protocols",
);

/**
 * Dynamic version generation
 */
export const dunamai = mkPackage(
  nixRaw`pkgs.python2Packages.dunamai`,
  "Dynamic version generation",
);

/**
 * A package that simulates PMD EoS dungeon generation
 */
export const dungeon_eos = mkPackage(
  nixRaw`pkgs.python2Packages.dungeon-eos`,
  "A package that simulates PMD EoS dungeon generation",
);

/**
 * Python library for interacting with the Duo Auth, Admin, and Accounts APIs
 */
export const duo_client = mkPackage(
  nixRaw`pkgs.python2Packages.duo-client`,
  "Python library for interacting with the Duo Auth, Admin, and Accounts APIs",
);

/**
 * Object persistence layer
 */
export const durus = mkPackage(
  nixRaw`pkgs.python2Packages.durus`,
  "Object persistence layer",
);

/**
 * Version Control System for Machine Learning Projects
 */
export const dvc = mkPackage(
  nixRaw`pkgs.python2Packages.dvc`,
  "Version Control System for Machine Learning Projects",
);

/**
 * azure plugin for dvc
 */
export const dvc_azure = mkPackage(
  nixRaw`pkgs.python2Packages.dvc-azure`,
  "azure plugin for dvc",
);

/**
 * DVC's data management subsystem
 */
export const dvc_data = mkPackage(
  nixRaw`pkgs.python2Packages.dvc-data`,
  "DVC's data management subsystem",
);

/**
 * gs plugin for dvc
 */
export const dvc_gs = mkPackage(
  nixRaw`pkgs.python2Packages.dvc-gs`,
  "gs plugin for dvc",
);

/**
 * HTTP plugin for dvc
 */
export const dvc_http = mkPackage(
  nixRaw`pkgs.python2Packages.dvc-http`,
  "HTTP plugin for dvc",
);

/**
 * Library for DVC objects
 */
export const dvc_objects = mkPackage(
  nixRaw`pkgs.python2Packages.dvc-objects`,
  "Library for DVC objects",
);

/**
 * Library for rendering DVC plots
 */
export const dvc_render = mkPackage(
  nixRaw`pkgs.python2Packages.dvc-render`,
  "Library for rendering DVC plots",
);

/**
 * s3 plugin for dvc
 */
export const dvc_s3 = mkPackage(
  nixRaw`pkgs.python2Packages.dvc-s3`,
  "s3 plugin for dvc",
);

/**
 * ssh plugin for dvc
 */
export const dvc_ssh = mkPackage(
  nixRaw`pkgs.python2Packages.dvc-ssh`,
  "ssh plugin for dvc",
);

/**
 * Library to post data from DVC/DVCLive to Iterative Studio
 */
export const dvc_studio_client = mkPackage(
  nixRaw`pkgs.python2Packages.dvc-studio-client`,
  "Library to post data from DVC/DVCLive to Iterative Studio",
);

/**
 * Celery task queue used in DVC
 */
export const dvc_task = mkPackage(
  nixRaw`pkgs.python2Packages.dvc-task`,
  "Celery task queue used in DVC",
);

/**
 * Library for logging machine learning metrics and other metadata in simple file formats
 */
export const dvclive = mkPackage(
  nixRaw`pkgs.python2Packages.dvclive`,
  "Library for logging machine learning metrics and other metadata in simple file formats",
);

/**
 * Python client to retrieve data provided by DWD via their geoserver WFS API
 */
export const dwdwfsapi = mkPackage(
  nixRaw`pkgs.python2Packages.dwdwfsapi`,
  "Python client to retrieve data provided by DWD via their geoserver WFS API",
);

/**
 * Dynect dns lib
 */
export const dyn = mkPackage(
  nixRaw`pkgs.python2Packages.dyn`,
  "Dynect dns lib",
);

/**
 * An unofficial Dynalite DyNET interface creating devices
 */
export const dynalite_devices = mkPackage(
  nixRaw`pkgs.python2Packages.dynalite-devices`,
  "An unofficial Dynalite DyNET interface creating devices",
);

/**
 * Python exposure of dynd
 */
export const dynd = mkPackage(
  nixRaw`pkgs.python2Packages.dynd`,
  "Python exposure of dynd",
);

/**
 * Python library for interacting with Rainforest EAGLE devices
 */
export const eagle100 = mkPackage(
  nixRaw`pkgs.python2Packages.eagle100`,
  "Python library for interacting with Rainforest EAGLE devices",
);

/**
 * Easy thumbnails for Django
 */
export const easy_thumbnails = mkPackage(
  nixRaw`pkgs.python2Packages.easy-thumbnails`,
  "Easy thumbnails for Django",
);

/**
 * Access dict values as attributes (works recursively)
 */
export const easydict = mkPackage(
  nixRaw`pkgs.python2Packages.easydict`,
  "Access dict values as attributes (works recursively)",
);

/**
 * Module for getting energy/gas prices from easyEnergy
 */
export const easyenergy = mkPackage(
  nixRaw`pkgs.python2Packages.easyenergy`,
  "Module for getting energy/gas prices from easyEnergy",
);

/**
 * Very simple, very easy GUI programming in Python
 */
export const easygui = mkPackage(
  nixRaw`pkgs.python2Packages.easygui`,
  "Very simple, very easy GUI programming in Python",
);

/**
 * Ready-to-use OCR with 80+ supported languages and all popular writing scripts
 */
export const easyocr = mkPackage(
  nixRaw`pkgs.python2Packages.easyocr`,
  "Ready-to-use OCR with 80+ supported languages and all popular writing scripts",
);

/**
 * Easy to use python subprocess interface
 */
export const easyprocess = mkPackage(
  nixRaw`pkgs.python2Packages.easyprocess`,
  "Easy to use python subprocess interface",
);

/**
 * Dead-simple way to watch a directory
 */
export const easywatch = mkPackage(
  nixRaw`pkgs.python2Packages.easywatch`,
  "Dead-simple way to watch a directory",
);

/**
 * eBay SDK for Python
 */
export const ebaysdk = mkPackage(
  nixRaw`pkgs.python2Packages.ebaysdk`,
  "eBay SDK for Python",
);

/**
 * Python E-book library for handling books in EPUB2/EPUB3  format
 */
export const ebooklib = mkPackage(
  nixRaw`pkgs.python2Packages.ebooklib`,
  "Python E-book library for handling books in EPUB2/EPUB3  format",
);

/**
 * Command Line Interface for AWS EC2 Instance Connect
 */
export const ec2instanceconnectcli = mkPackage(
  nixRaw`pkgs.python2Packages.ec2instanceconnectcli`,
  "Command Line Interface for AWS EC2 Instance Connect",
);

/**
 * ECMWF library for reading and writing GRIB, BUFR and GTS abbreviated header
 */
export const eccodes = mkPackage(
  nixRaw`pkgs.python2Packages.eccodes`,
  "ECMWF library for reading and writing GRIB, BUFR and GTS abbreviated header",
);

/**
 * ECDSA cryptographic signature library
 */
export const ecdsa = mkPackage(
  nixRaw`pkgs.python2Packages.ecdsa`,
  "ECDSA cryptographic signature library",
);

/**
 * Python library for interacting with eCoal water boiler controllers
 */
export const ecoaliface = mkPackage(
  nixRaw`pkgs.python2Packages.ecoaliface`,
  "Python library for interacting with eCoal water boiler controllers",
);

/**
 * Python interface for ECOS
 */
export const ecos = mkPackage(
  nixRaw`pkgs.python2Packages.ecos`,
  "Python interface for ECOS",
);

/**
 * Pure Pyhton Elliptic Curve Library
 */
export const ecpy = mkPackage(
  nixRaw`pkgs.python2Packages.ecpy`,
  "Pure Pyhton Elliptic Curve Library",
);

/**
 * Logging formatters for the Elastic Common Schema (ECS) in Python
 */
export const ecs_logging = mkPackage(
  nixRaw`pkgs.python2Packages.ecs-logging`,
  "Logging formatters for the Elastic Common Schema (ECS) in Python",
);

/**
 * Ed25519 public-key signatures
 */
export const ed25519 = mkPackage(
  nixRaw`pkgs.python2Packages.ed25519`,
  "Ed25519 public-key signatures",
);

/**
 * Ed25519 public-key signatures (BLAKE2b fork)
 */
export const ed25519_blake2b = mkPackage(
  nixRaw`pkgs.python2Packages.ed25519-blake2b`,
  "Ed25519 public-key signatures (BLAKE2b fork)",
);

/**
 * Abstraction library for interfacing EDA tools
 */
export const edalize = mkPackage(
  nixRaw`pkgs.python2Packages.edalize`,
  "Abstraction library for interfacing EDA tools",
);

/**
 * Editable installations
 */
export const editables = mkPackage(
  nixRaw`pkgs.python2Packages.editables`,
  "Editable installations",
);

/**
 * Python implementation of the edit distance (Levenshtein distance)
 */
export const editdistance = mkPackage(
  nixRaw`pkgs.python2Packages.editdistance`,
  "Python implementation of the edit distance (Levenshtein distance)",
);

/**
 * Fast implementation of the edit distance (Levenshtein distance)
 */
export const editdistance_s = mkPackage(
  nixRaw`pkgs.python2Packages.editdistance-s`,
  "Fast implementation of the edit distance (Levenshtein distance)",
);

/**
 * EditorConfig File Locator and Interpreter for Python
 */
export const editorconfig = mkPackage(
  nixRaw`pkgs.python2Packages.editorconfig`,
  "EditorConfig File Locator and Interpreter for Python",
);

/**
 * Python library package that supports UEFI development
 */
export const edk2_pytool_library = mkPackage(
  nixRaw`pkgs.python2Packages.edk2-pytool-library`,
  "Python library package that supports UEFI development",
);

/**
 * Lightweight, fast C/C++ library for sequence alignment using edit distance
 */
export const edlib = mkPackage(
  nixRaw`pkgs.python2Packages.edlib`,
  "Lightweight, fast C/C++ library for sequence alignment using edit distance",
);

/**
 * Probabilistic programming language using Tensorflow
 */
export const edward = mkPackage(
  nixRaw`pkgs.python2Packages.edward`,
  "Probabilistic programming language using Tensorflow",
);

/**
 * A PyTorch implementation of EfficientDet
 */
export const effdet = mkPackage(
  nixRaw`pkgs.python2Packages.effdet`,
  "A PyTorch implementation of EfficientDet",
);

/**
 * Pure effects for Python
 */
export const effect = mkPackage(
  nixRaw`pkgs.python2Packages.effect`,
  "Pure effects for Python",
);

export const eggBuildHook = mkPackage(
  nixRaw`pkgs.python2Packages.eggBuildHook`,
  "",
);

export const eggInstallHook = mkPackage(
  nixRaw`pkgs.python2Packages.eggInstallHook`,
  "",
);

export const eggUnpackHook = mkPackage(
  nixRaw`pkgs.python2Packages.eggUnpackHook`,
  "",
);

/**
 * A tool which computes a dependency graph between active Python eggs
 */
export const eggdeps = mkPackage(
  nixRaw`pkgs.python2Packages.eggdeps`,
  "A tool which computes a dependency graph between active Python eggs",
);

/**
 * Bindings between Numpy and Eigen using Boost.Python
 */
export const eigenpy = mkPackage(
  nixRaw`pkgs.python2Packages.eigenpy`,
  "Bindings between Numpy and Eigen using Boost.Python",
);

/**
 * Flexible and powerful tensor operations for readable and reliable code
 */
export const einops = mkPackage(
  nixRaw`pkgs.python2Packages.einops`,
  "Flexible and powerful tensor operations for readable and reliable code",
);

/**
 * Module for getting Eiswarning API forecasts
 */
export const eiswarnung = mkPackage(
  nixRaw`pkgs.python2Packages.eiswarnung`,
  "Module for getting Eiswarning API forecasts",
);

/**
 * Python agent for the Elastic APM
 */
export const elastic_apm = mkPackage(
  nixRaw`pkgs.python2Packages.elastic-apm`,
  "Python agent for the Elastic APM",
);

/**
 * Transport classes and utilities shared among Python Elastic client libraries
 */
export const elastic_transport = mkPackage(
  nixRaw`pkgs.python2Packages.elastic-transport`,
  "Transport classes and utilities shared among Python Elastic client libraries",
);

/**
 * Official low-level client for Elasticsearch
 */
export const elasticsearch = mkPackage(
  nixRaw`pkgs.python2Packages.elasticsearch`,
  "Official low-level client for Elasticsearch",
);

/**
 * Official low-level client for Elasticsearch
 */
export const elasticsearch8 = mkPackage(
  nixRaw`pkgs.python2Packages.elasticsearch8`,
  "Official low-level client for Elasticsearch",
);

/**
 * High level Python client for Elasticsearch
 */
export const elasticsearch_dsl = mkPackage(
  nixRaw`pkgs.python2Packages.elasticsearch-dsl`,
  "High level Python client for Elasticsearch",
);

/**
 * High level Python client for Elasticsearch
 */
export const elasticsearchdsl = mkPackage(
  nixRaw`pkgs.python2Packages.elasticsearchdsl`,
  "High level Python client for Elasticsearch",
);

/**
 * Neural Networks framework based on Jax inspired by Keras and Haiku
 */
export const elegy = mkPackage(
  nixRaw`pkgs.python2Packages.elegy`,
  "Neural Networks framework based on Jax inspired by Keras and Haiku",
);

/**
 * XPath 1.0/2.0 parsers and selectors for ElementTree and lxml
 */
export const elementpath = mkPackage(
  nixRaw`pkgs.python2Packages.elementpath`,
  "XPath 1.0/2.0 parsers and selectors for ElementTree and lxml",
);

/**
 * Python module for re-launching the current process as super-user
 */
export const elevate = mkPackage(
  nixRaw`pkgs.python2Packages.elevate`,
  "Python module for re-launching the current process as super-user",
);

/**
 * Python client for Elgato Key Lights
 */
export const elgato = mkPackage(
  nixRaw`pkgs.python2Packages.elgato`,
  "Python client for Elgato Key Lights",
);

/**
 * Logging library that tells you why it happened
 */
export const eliot = mkPackage(
  nixRaw`pkgs.python2Packages.eliot`,
  "Logging library that tells you why it happened",
);

/**
 * Python client to the Eliq Online API
 */
export const eliqonline = mkPackage(
  nixRaw`pkgs.python2Packages.eliqonline`,
  "Python client to the Eliq Online API",
);

/**
 * Python module for interacting with ElkM1 alarm/automation panel
 */
export const elkm1_lib = mkPackage(
  nixRaw`pkgs.python2Packages.elkm1-lib`,
  "Python module for interacting with ElkM1 alarm/automation panel",
);

/**
 * Python API client for the Elmax Cloud services
 */
export const elmax = mkPackage(
  nixRaw`pkgs.python2Packages.elmax`,
  "Python API client for the Elmax Cloud services",
);

/**
 * Python library for interacting with the Elmax cloud
 */
export const elmax_api = mkPackage(
  nixRaw`pkgs.python2Packages.elmax-api`,
  "Python library for interacting with the Elmax cloud",
);

/**
 * Email syntax and deliverability validation library
 */
export const email_validator = mkPackage(
  nixRaw`pkgs.python2Packages.email-validator`,
  "Email syntax and deliverability validation library",
);

/**
 * Python library to parse and format email threads
 */
export const emailthreads = mkPackage(
  nixRaw`pkgs.python2Packages.emailthreads`,
  "Python library to parse and format email threads",
);

/**
 * Efficiently read embedding in streaming from any filesystem
 */
export const embedding_reader = mkPackage(
  nixRaw`pkgs.python2Packages.embedding-reader`,
  "Efficiently read embedding in streaming from any filesystem",
);

/**
 * Interactive command line interface to Borg Backup
 */
export const emborg = mkPackage(
  nixRaw`pkgs.python2Packages.emborg`,
  "Interactive command line interface to Borg Backup",
);

/**
 * Embrace SQL keeps your SQL queries in SQL files
 */
export const embrace = mkPackage(
  nixRaw`pkgs.python2Packages.embrace`,
  "Embrace SQL keeps your SQL queries in SQL files",
);

/**
 * Kick ass affine-invariant ensemble MCMC sampling
 */
export const emcee = mkPackage(
  nixRaw`pkgs.python2Packages.emcee`,
  "Kick ass affine-invariant ensemble MCMC sampling",
);

/**
 * Emoji for Python
 */
export const emoji = mkPackage(
  nixRaw`pkgs.python2Packages.emoji`,
  "Emoji for Python",
);

/**
 * Null Object pattern for files
 */
export const empty_files = mkPackage(
  nixRaw`pkgs.python2Packages.empty-files`,
  "Null Object pattern for files",
);

/**
 * A templating system for Python.
 */
export const empy = mkPackage(
  nixRaw`pkgs.python2Packages.empy`,
  "A templating system for Python.",
);

/**
 * Library to emulate a roku server to serve as a proxy for remotes such as Harmony
 */
export const emulated_roku = mkPackage(
  nixRaw`pkgs.python2Packages.emulated-roku`,
  "Library to emulate a roku server to serve as a proxy for remotes such as Harmony",
);

/**
 * Implementation of the EMV chip-and-pin smartcard protocol
 */
export const emv = mkPackage(
  nixRaw`pkgs.python2Packages.emv`,
  "Implementation of the EMV chip-and-pin smartcard protocol",
);

/**
 * Declarative User Interfaces for Python
 */
export const enaml = mkPackage(
  nixRaw`pkgs.python2Packages.enaml`,
  "Declarative User Interfaces for Python",
);

/**
 * Additional Qt Widgets for Enaml
 */
export const enamlx = mkPackage(
  nixRaw`pkgs.python2Packages.enamlx`,
  "Additional Qt Widgets for Enaml",
);

/**
 * State-of-the-art deep learning based audio codec supporting both mono 24 kHz audio and stereo 48 kHz audio
 */
export const encodec = mkPackage(
  nixRaw`pkgs.python2Packages.encodec`,
  "State-of-the-art deep learning based audio codec supporting both mono 24 kHz audio and stereo 48 kHz audio",
);

/**
 * Library to communicate with the API behind EnergyFlip
 */
export const energyflip_client = mkPackage(
  nixRaw`pkgs.python2Packages.energyflip-client`,
  "Library to communicate with the API behind EnergyFlip",
);

/**
 * Python package for the EnergyFlow suite of tools
 */
export const energyflow = mkPackage(
  nixRaw`pkgs.python2Packages.energyflow`,
  "Python package for the EnergyFlow suite of tools",
);

/**
 * Module for getting the dynamic prices from EnergyZero
 */
export const energyzero = mkPackage(
  nixRaw`pkgs.python2Packages.energyzero`,
  "Module for getting the dynamic prices from EnergyZero",
);

/**
 * Library which extends various Python classes
 */
export const enhancements = mkPackage(
  nixRaw`pkgs.python2Packages.enhancements`,
  "Library which extends various Python classes",
);

/**
 * Enlighten Progress Bar for Python Console Apps
 */
export const enlighten = mkPackage(
  nixRaw`pkgs.python2Packages.enlighten`,
  "Enlighten Progress Bar for Python Console Apps",
);

/**
 * EnOcean serial protocol implementation
 */
export const enocean = mkPackage(
  nixRaw`pkgs.python2Packages.enocean`,
  "EnOcean serial protocol implementation",
);

/**
 * Base library for enochecker libs
 */
export const enochecker_core = mkPackage(
  nixRaw`pkgs.python2Packages.enochecker-core`,
  "Base library for enochecker libs",
);

/**
 * Enrich adds few missing features to the wonderful rich library
 */
export const enrich = mkPackage(
  nixRaw`pkgs.python2Packages.enrich`,
  "Enrich adds few missing features to the wonderful rich library",
);

/**
 * A server framework for web apps with an Elm frontend
 */
export const entrance = mkPackage(
  nixRaw`pkgs.python2Packages.entrance`,
  "A server framework for web apps with an Elm frontend",
);

/**
 * A server framework for web apps with an Elm frontend
 */
export const entrance_with_router_features = mkPackage(
  nixRaw`pkgs.python2Packages.entrance-with-router-features`,
  "A server framework for web apps with an Elm frontend",
);

/**
 * Read & write entry_points.txt files
 */
export const entry_points_txt = mkPackage(
  nixRaw`pkgs.python2Packages.entry-points-txt`,
  "Read & write entry_points.txt files",
);

/**
 * Easy to use command-line interface for python modules
 */
export const entrypoint2 = mkPackage(
  nixRaw`pkgs.python2Packages.entrypoint2`,
  "Easy to use command-line interface for python modules",
);

/**
 * Discover and load entry points from installed packages
 */
export const entrypoints = mkPackage(
  nixRaw`pkgs.python2Packages.entrypoints`,
  "Discover and load entry points from installed packages",
);

/**
 * Python library for interacting with the Entur.org API
 */
export const enturclient = mkPackage(
  nixRaw`pkgs.python2Packages.enturclient`,
  "Python library for interacting with the Entur.org API",
);

/**
 * Python 3.4 Enum backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4
 */
export const enum34 = mkPackage(
  nixRaw`pkgs.python2Packages.enum34`,
  "Python 3.4 Enum backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4",
);

/**
 * Robust enumerated type support in Python
 */
export const enum_ = mkPackage(
  nixRaw`pkgs.python2Packages.enum`,
  "Robust enumerated type support in Python",
);

/**
 * enum/enum34 compatibility package
 */
export const enum_compat = mkPackage(
  nixRaw`pkgs.python2Packages.enum-compat`,
  "enum/enum34 compatibility package",
);

/**
 * Python library to get Environment Canada weather data
 */
export const env_canada = mkPackage(
  nixRaw`pkgs.python2Packages.env-canada`,
  "Python library to get Environment Canada weather data",
);

/**
 * Easily configure apps using simple environmental overrides
 */
export const environmental_override = mkPackage(
  nixRaw`pkgs.python2Packages.environmental-override`,
  "Easily configure apps using simple environmental overrides",
);

/**
 * Python modle for environment variable parsing
 */
export const environs = mkPackage(
  nixRaw`pkgs.python2Packages.environs`,
  "Python modle for environment variable parsing",
);

/**
 * Framework for building applications whose functionalities can be extended by adding plug-ins
 */
export const envisage = mkPackage(
  nixRaw`pkgs.python2Packages.envisage`,
  "Framework for building applications whose functionalities can be extended by adding plug-ins",
);

/**
 * Python module to read from Enphase Envoy units
 */
export const envoy_reader = mkPackage(
  nixRaw`pkgs.python2Packages.envoy-reader`,
  "Python module to read from Enphase Envoy units",
);

/**
 * Python utilities for the Enphase Envoy
 */
export const envoy_utils = mkPackage(
  nixRaw`pkgs.python2Packages.envoy-utils`,
  "Python utilities for the Enphase Envoy",
);

/**
 * Easy access to environment variables from Python
 */
export const envs = mkPackage(
  nixRaw`pkgs.python2Packages.envs`,
  "Easy access to environment variables from Python",
);

/**
 * Python video metadata parser
 */
export const enzyme = mkPackage(
  nixRaw`pkgs.python2Packages.enzyme`,
  "Python video metadata parser",
);

/**
 * EPC (RPC stack for Emacs Lisp) implementation in Python
 */
export const epc = mkPackage(
  nixRaw`pkgs.python2Packages.epc`,
  "EPC (RPC stack for Emacs Lisp) implementation in Python",
);

/**
 * Compute positions of the planets and stars
 */
export const ephem = mkPackage(
  nixRaw`pkgs.python2Packages.ephem`,
  "Compute positions of the planets and stars",
);

/**
 * Find an unused port, reliably
 */
export const ephemeral_port_reserve = mkPackage(
  nixRaw`pkgs.python2Packages.ephemeral-port-reserve`,
  "Find an unused port, reliably",
);

/**
 * Epson projector support for Python
 */
export const epson_projector = mkPackage(
  nixRaw`pkgs.python2Packages.epson-projector`,
  "Epson projector support for Python",
);

/**
 * A JAX library based around a simple idea: represent parameterised functions (such as neural networks) as PyTrees
 */
export const equinox = mkPackage(
  nixRaw`pkgs.python2Packages.equinox`,
  "A JAX library based around a simple idea: represent parameterised functions (such as neural networks) as PyTrees",
);

/**
 * Library to remove commented-out code from Python files
 */
export const eradicate = mkPackage(
  nixRaw`pkgs.python2Packages.eradicate`,
  "Library to remove commented-out code from Python files",
);

/**
 * Module for building Elasticsearch client objects
 */
export const es_client = mkPackage(
  nixRaw`pkgs.python2Packages.es-client`,
  "Module for building Elasticsearch client objects",
);

/**
 * Simple, generic API for escaping strings
 */
export const escapism = mkPackage(
  nixRaw`pkgs.python2Packages.escapism`,
  "Simple, generic API for escaping strings",
);

/**
 * This package provides "rough path" tools for analysing vector time series
 */
export const esig = mkPackage(
  nixRaw`pkgs.python2Packages.esig`,
  "This package provides \"rough path\" tools for analysing vector time series",
);

/**
 * Uses ctypes and libespeak-ng to transform test into IPA phonemes
 */
export const espeak_phonemizer = mkPackage(
  nixRaw`pkgs.python2Packages.espeak-phonemizer`,
  "Uses ctypes and libespeak-ng to transform test into IPA phonemes",
);

/**
 * API to interact with ESPHome Dashboard
 */
export const esphome_dashboard_api = mkPackage(
  nixRaw`pkgs.python2Packages.esphome-dashboard-api`,
  "API to interact with ESPHome Dashboard",
);

/**
 * Python parser for standard-compliant ECMAScript
 */
export const esprima = mkPackage(
  nixRaw`pkgs.python2Packages.esprima`,
  "Python parser for standard-compliant ECMAScript",
);

/**
 * An implementation of lxml.xmlfile for the standard library
 */
export const et_xmlfile = mkPackage(
  nixRaw`pkgs.python2Packages.et-xmlfile`,
  "An implementation of lxml.xmlfile for the standard library",
);

/**
 * A Python etcd client that just works
 */
export const etcd = mkPackage(
  nixRaw`pkgs.python2Packages.etcd`,
  "A Python etcd client that just works",
);

/**
 * Python client for the etcd API v3
 */
export const etcd3 = mkPackage(
  nixRaw`pkgs.python2Packages.etcd3`,
  "Python client for the etcd API v3",
);

/**
 * A Python framework for the analysis and visualization of trees
 */
export const ete3 = mkPackage(
  nixRaw`pkgs.python2Packages.ete3`,
  "A Python framework for the analysis and visualization of trees",
);

/**
 * A Python client library for Etebase
 */
export const etebase = mkPackage(
  nixRaw`pkgs.python2Packages.etebase`,
  "A Python client library for Etebase",
);

/**
 * An Etebase (EteSync 2.0) server so you can run your own
 */
export const etebase_server = mkPackage(
  nixRaw`pkgs.python2Packages.etebase-server`,
  "An Etebase (EteSync 2.0) server so you can run your own",
);

/**
 * Lightweight python client to communicate with the etelemetry server
 */
export const etelemetry = mkPackage(
  nixRaw`pkgs.python2Packages.etelemetry`,
  "Lightweight python client to communicate with the etelemetry server",
);

/**
 * Python API for Netgear LTE modems
 */
export const eternalegypt = mkPackage(
  nixRaw`pkgs.python2Packages.eternalegypt`,
  "Python API for Netgear LTE modems",
);

/**
 * A python API to interact with an EteSync server.
 */
export const etesync = mkPackage(
  nixRaw`pkgs.python2Packages.etesync`,
  "A python API to interact with an EteSync server.",
);

/**
 * Ethereum ABI utilities
 */
export const eth_abi = mkPackage(
  nixRaw`pkgs.python2Packages.eth-abi`,
  "Ethereum ABI utilities",
);

/**
 * Account abstraction library for web3.py
 */
export const eth_account = mkPackage(
  nixRaw`pkgs.python2Packages.eth-account`,
  "Account abstraction library for web3.py",
);

/**
 * The Ethereum hashing function keccak256
 */
export const eth_hash = mkPackage(
  nixRaw`pkgs.python2Packages.eth-hash`,
  "The Ethereum hashing function keccak256",
);

/**
 * Tools for handling the encrypted keyfile format used to store private keys
 */
export const eth_keyfile = mkPackage(
  nixRaw`pkgs.python2Packages.eth-keyfile`,
  "Tools for handling the encrypted keyfile format used to store private keys",
);

/**
 * Common API for Ethereum key operations
 */
export const eth_keys = mkPackage(
  nixRaw`pkgs.python2Packages.eth-keys`,
  "Common API for Ethereum key operations",
);

/**
 * RLP definitions for common Ethereum objects
 */
export const eth_rlp = mkPackage(
  nixRaw`pkgs.python2Packages.eth-rlp`,
  "RLP definitions for common Ethereum objects",
);

/**
 * Common type annotations for Ethereum Python packages
 */
export const eth_typing = mkPackage(
  nixRaw`pkgs.python2Packages.eth-typing`,
  "Common type annotations for Ethereum Python packages",
);

/**
 * Common utility functions for codebases which interact with ethereum
 */
export const eth_utils = mkPackage(
  nixRaw`pkgs.python2Packages.eth-utils`,
  "Common utility functions for codebases which interact with ethereum",
);

/**
 * Collection of eclectic utils for python
 */
export const etils = mkPackage(
  nixRaw`pkgs.python2Packages.etils`,
  "Collection of eclectic utils for python",
);

/**
 * Python S-expression emulation using tuple-like objects
 */
export const etuples = mkPackage(
  nixRaw`pkgs.python2Packages.etuples`,
  "Python S-expression emulation using tuple-like objects",
);

/**
 * Module for parsing data from Eufy smart scales
 */
export const eufylife_ble_client = mkPackage(
  nixRaw`pkgs.python2Packages.eufylife-ble-client`,
  "Module for parsing data from Eufy smart scales",
);

/**
 * Easily evaluate machine learning models and datasets
 */
export const evaluate = mkPackage(
  nixRaw`pkgs.python2Packages.evaluate`,
  "Easily evaluate machine learning models and datasets",
);

/**
 * Provides bindings to the generic input event interface in Linux
 */
export const evdev = mkPackage(
  nixRaw`pkgs.python2Packages.evdev`,
  "Provides bindings to the generic input event interface in Linux",
);

/**
 * Open source Python REST API framework designed for human beings
 */
export const eve = mkPackage(
  nixRaw`pkgs.python2Packages.eve`,
  "Open source Python REST API framework designed for human beings",
);

/**
 * A concurrent networking library for Python
 */
export const eventlet = mkPackage(
  nixRaw`pkgs.python2Packages.eventlet`,
  "A concurrent networking library for Python",
);

/**
 * Bringing the elegance of C# EventHanlder to Python
 */
export const events = mkPackage(
  nixRaw`pkgs.python2Packages.events`,
  "Bringing the elegance of C# EventHanlder to Python",
);

/**
 * Evernote SDK for Python
 */
export const evernote = mkPackage(
  nixRaw`pkgs.python2Packages.evernote`,
  "Evernote SDK for Python",
);

/**
 * Python client for connecting to Honeywell's TCC RESTful API
 */
export const evohome_async = mkPackage(
  nixRaw`pkgs.python2Packages.evohome-async`,
  "Python client for connecting to Honeywell's TCC RESTful API",
);

/**
 * Bindings for evtx
 */
export const evtx = mkPackage(
  nixRaw`pkgs.python2Packages.evtx`,
  "Bindings for evtx",
);

/**
 * An implementation of EWMH (Extended Window Manager Hints), based on Xlib
 */
export const ewmh = mkPackage(
  nixRaw`pkgs.python2Packages.ewmh`,
  "An implementation of EWMH (Extended Window Manager Hints), based on Xlib",
);

/**
 * Set of robot URDFs for benchmarking and developed examples.
 */
export const example_robot_data = mkPackage(
  nixRaw`pkgs.python2Packages.example-robot-data`,
  "Set of robot URDFs for benchmarking and developed examples.",
);

/**
 * Backport of PEP 654 (exception groups)
 */
export const exceptiongroup = mkPackage(
  nixRaw`pkgs.python2Packages.exceptiongroup`,
  "Backport of PEP 654 (exception groups)",
);

/**
 * Client for Microsoft Exchange Web Services (EWS)
 */
export const exchangelib = mkPackage(
  nixRaw`pkgs.python2Packages.exchangelib`,
  "Client for Microsoft Exchange Web Services (EWS)",
);

/**
 * Extract code blocks from markdown
 */
export const exdown = mkPackage(
  nixRaw`pkgs.python2Packages.exdown`,
  "Extract code blocks from markdown",
);

/**
 * Execute a jupyter notebook, fast, without needing jupyter
 */
export const execnb = mkPackage(
  nixRaw`pkgs.python2Packages.execnb`,
  "Execute a jupyter notebook, fast, without needing jupyter",
);

/**
 * Distributed Python deployment and communication
 */
export const execnet = mkPackage(
  nixRaw`pkgs.python2Packages.execnet`,
  "Distributed Python deployment and communication",
);

/**
 * Get information about what a frame is currently doing, particularly the AST node being executed
 */
export const executing = mkPackage(
  nixRaw`pkgs.python2Packages.executing`,
  "Get information about what a frame is currently doing, particularly the AST node being executed",
);

/**
 * Programmer friendly subprocess wrapper
 */
export const executor = mkPackage(
  nixRaw`pkgs.python2Packages.executor`,
  "Programmer friendly subprocess wrapper",
);

/**
 * Read and modify image EXIF metadata using Python
 */
export const exif = mkPackage(
  nixRaw`pkgs.python2Packages.exif`,
  "Read and modify image EXIF metadata using Python",
);

/**
 * Easy to use Python module to extract Exif metadata from tiff and jpeg files
 */
export const exifread = mkPackage(
  nixRaw`pkgs.python2Packages.exifread`,
  "Easy to use Python module to extract Exif metadata from tiff and jpeg files",
);

/**
 * Preferred system exit codes as defined by sysexits.h
 */
export const exitcode = mkPackage(
  nixRaw`pkgs.python2Packages.exitcode`,
  "Preferred system exit codes as defined by sysexits.h",
);

/**
 * Expand system variables Unix style
 */
export const expandvars = mkPackage(
  nixRaw`pkgs.python2Packages.expandvars`,
  "Expand system variables Unix style",
);

/**
 * Expressive and extensible TDD/BDD assertion library for Python
 */
export const expects = mkPackage(
  nixRaw`pkgs.python2Packages.expects`,
  "Expressive and extensible TDD/BDD assertion library for Python",
);

/**
 * EZ Yang "golden" tests (testing against a reference implementation)
 */
export const expecttest = mkPackage(
  nixRaw`pkgs.python2Packages.expecttest`,
  "EZ Yang \"golden\" tests (testing against a reference implementation)",
);

/**
 * Various tools to run scientific computer experiments.
 */
export const experiment_utilities = mkPackage(
  nixRaw`pkgs.python2Packages.experiment-utilities`,
  "Various tools to run scientific computer experiments.",
);

/**
 * Python dict with TTL support for auto-expiring caches
 */
export const expiring_dict = mkPackage(
  nixRaw`pkgs.python2Packages.expiring-dict`,
  "Python dict with TTL support for auto-expiring caches",
);

/**
 * Dictionary with auto-expiring values for caching purposes
 */
export const expiringdict = mkPackage(
  nixRaw`pkgs.python2Packages.expiringdict`,
  "Dictionary with auto-expiring values for caching purposes",
);

/**
 * A programming language + compiler/decompiler for creating scripts for Pokémon Mystery Dungeon Explorers of Sky
 */
export const explorerscript = mkPackage(
  nixRaw`pkgs.python2Packages.explorerscript`,
  "A programming language + compiler/decompiler for creating scripts for Pokémon Mystery Dungeon Explorers of Sky",
);

/**
 * Irregular methods on regular expressions
 */
export const exrex = mkPackage(
  nixRaw`pkgs.python2Packages.exrex`,
  "Irregular methods on regular expressions",
);

/**
 * Universal archive extractor using z7zip, libarchive, other libraries and the Python standard library
 */
export const extractcode = mkPackage(
  nixRaw`pkgs.python2Packages.extractcode`,
  "Universal archive extractor using z7zip, libarchive, other libraries and the Python standard library",
);

/**
 * A ScanCode Toolkit plugin to provide pre-built binary libraries and utilities and their locations
 */
export const extractcode_7z = mkPackage(
  nixRaw`pkgs.python2Packages.extractcode-7z`,
  "A ScanCode Toolkit plugin to provide pre-built binary libraries and utilities and their locations",
);

/**
 * A ScanCode Toolkit plugin to provide pre-built binary libraries and utilities and their locations
 */
export const extractcode_libarchive = mkPackage(
  nixRaw`pkgs.python2Packages.extractcode-libarchive`,
  "A ScanCode Toolkit plugin to provide pre-built binary libraries and utilities and their locations",
);

/**
 * Useful extra bits for Python - things that should be in the standard library
 */
export const extras = mkPackage(
  nixRaw`pkgs.python2Packages.extras`,
  "Useful extra bits for Python - things that should be in the standard library",
);

/**
 * Extract embedded metadata from HTML markup
 */
export const extruct = mkPackage(
  nixRaw`pkgs.python2Packages.extruct`,
  "Extract embedded metadata from HTML markup",
);

/**
 * A Python module and command line program for processing ID3 tags
 */
export const eyeD3 = mkPackage(
  nixRaw`pkgs.python2Packages.eyeD3`,
  "A Python module and command line program for processing ID3 tags",
);

/**
 * Python package to read and write DXF drawings (interface to the DXF file format)
 */
export const ezdxf = mkPackage(
  nixRaw`pkgs.python2Packages.ezdxf`,
  "Python package to read and write DXF drawings (interface to the DXF file format)",
);

/**
 * Easy Reduced Basis method
 */
export const ezyrb = mkPackage(
  nixRaw`pkgs.python2Packages.ezyrb`,
  "Easy Reduced Basis method",
);

/**
 * F5 BIG-IP iControl REST API client
 */
export const f5_icontrol_rest = mkPackage(
  nixRaw`pkgs.python2Packages.f5-icontrol-rest`,
  "F5 BIG-IP iControl REST API client",
);

/**
 * F5 Networks Python SDK
 */
export const f5_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.f5-sdk`,
  "F5 Networks Python SDK",
);

/**
 * Python module for working with Fortran Namelists
 */
export const f90nml = mkPackage(
  nixRaw`pkgs.python2Packages.f90nml`,
  "Python module for working with Fortran Namelists",
);

/**
 * Python package to retrieve FAA airport status
 */
export const faadelays = mkPackage(
  nixRaw`pkgs.python2Packages.faadelays`,
  "Python package to retrieve FAA airport status",
);

/**
 * Pythonic remote execution
 */
export const fabric = mkPackage(
  nixRaw`pkgs.python2Packages.fabric`,
  "Pythonic remote execution",
);

/**
 * Make the output of terminal applications look fabulous
 */
export const fabulous = mkPackage(
  nixRaw`pkgs.python2Packages.fabulous`,
  "Make the output of terminal applications look fabulous",
);

/**
 * A command-line interface parser and framework
 */
export const face = mkPackage(
  nixRaw`pkgs.python2Packages.face`,
  "A command-line interface parser and framework",
);

/**
 * The world's simplest facial recognition api for Python and the command line
 */
export const face_recognition = mkPackage(
  nixRaw`pkgs.python2Packages.face-recognition`,
  "The world's simplest facial recognition api for Python and the command line",
);

/**
 * Trained models for the face_recognition python library
 */
export const face_recognition_models = mkPackage(
  nixRaw`pkgs.python2Packages.face-recognition-models`,
  "Trained models for the face_recognition python library",
);

/**
 * Client library that supports the Facebook Graph API and the official Facebook JavaScript SDK
 */
export const facebook_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.facebook-sdk`,
  "Client library that supports the Facebook Graph API and the official Facebook JavaScript SDK",
);

/**
 * library for emulating usb devices
 */
export const facedancer = mkPackage(
  nixRaw`pkgs.python2Packages.facedancer`,
  "library for emulating usb devices",
);

/**
 * Python package to create factories for complex objects
 */
export const factory_boy = mkPackage(
  nixRaw`pkgs.python2Packages.factory-boy`,
  "Python package to create factories for complex objects",
);

/**
 * PyTorch extensions for high performance and large scale training
 */
export const fairscale = mkPackage(
  nixRaw`pkgs.python2Packages.fairscale`,
  "PyTorch extensions for high performance and large scale training",
);

/**
 * Facebook AI Research Sequence-to-Sequence Toolkit
 */
export const fairseq = mkPackage(
  nixRaw`pkgs.python2Packages.fairseq`,
  "Facebook AI Research Sequence-to-Sequence Toolkit",
);

/**
 * A library for efficient similarity search and clustering of dense vectors by Facebook Research
 */
export const faiss = mkPackage(
  nixRaw`pkgs.python2Packages.faiss`,
  "A library for efficient similarity search and clustering of dense vectors by Facebook Research",
);

/**
 * Up to date simple useragent faker with real world database
 */
export const fake_useragent = mkPackage(
  nixRaw`pkgs.python2Packages.fake-useragent`,
  "Up to date simple useragent faker with real world database",
);

/**
 * Python library for generating fake user data
 */
export const faker = mkPackage(
  nixRaw`pkgs.python2Packages.faker`,
  "Python library for generating fake user data",
);

/**
 * Fake implementation of Redis API
 */
export const fakeredis = mkPackage(
  nixRaw`pkgs.python2Packages.fakeredis`,
  "Fake implementation of Redis API",
);

/**
 * An unladen web framework for building APIs and app backends
 */
export const falcon = mkPackage(
  nixRaw`pkgs.python2Packages.falcon`,
  "An unladen web framework for building APIs and app backends",
);

/**
 * Collection of Faraday agent parameters types
 */
export const faraday_agent_parameters_types = mkPackage(
  nixRaw`pkgs.python2Packages.faraday-agent-parameters-types`,
  "Collection of Faraday agent parameters types",
);

/**
 * Security tools report parsers for Faraday
 */
export const faraday_plugins = mkPackage(
  nixRaw`pkgs.python2Packages.faraday-plugins`,
  "Security tools report parsers for Faraday",
);

/**
 * Allows for providing notifications on import to all Farama Packages
 */
export const farama_notifications = mkPackage(
  nixRaw`pkgs.python2Packages.farama-notifications`,
  "Allows for providing notifications on import to all Farama Packages",
);

/**
 * The fastai deep learning library
 */
export const fastai = mkPackage(
  nixRaw`pkgs.python2Packages.fastai`,
  "The fastai deep learning library",
);

/**
 * Web framework for building APIs
 */
export const fastapi = mkPackage(
  nixRaw`pkgs.python2Packages.fastapi`,
  "Web framework for building APIs",
);

/**
 * Module for sending emails and attachments
 */
export const fastapi_mail = mkPackage(
  nixRaw`pkgs.python2Packages.fastapi-mail`,
  "Module for sending emails and attachments",
);

/**
 * Fast read/write of AVRO files
 */
export const fastavro = mkPackage(
  nixRaw`pkgs.python2Packages.fastavro`,
  "Fast read/write of AVRO files",
);

/**
 * Fast implementation of bencode
 */
export const fastbencode = mkPackage(
  nixRaw`pkgs.python2Packages.fastbencode`,
  "Fast implementation of bencode",
);

/**
 * C implementation of Python3 lru_cache for Python 2 and 3
 */
export const fastcache = mkPackage(
  nixRaw`pkgs.python2Packages.fastcache`,
  "C implementation of Python3 lru_cache for Python 2 and 3",
);

/**
 * Python module for Fast AI
 */
export const fastcore = mkPackage(
  nixRaw`pkgs.python2Packages.fastcore`,
  "Python module for Fast AI",
);

/**
 * A fast native implementation of diff algorithm with a pure Python fallback
 */
export const fastdiff = mkPackage(
  nixRaw`pkgs.python2Packages.fastdiff`,
  "A fast native implementation of diff algorithm with a pure Python fallback",
);

/**
 * Easily download, verify, and extract archives
 */
export const fastdownload = mkPackage(
  nixRaw`pkgs.python2Packages.fastdownload`,
  "Easily download, verify, and extract archives",
);

/**
 * Python implementation of FastDTW (Dynamic Time Warping)
 */
export const fastdtw = mkPackage(
  nixRaw`pkgs.python2Packages.fastdtw`,
  "Python implementation of FastDTW (Dynamic Time Warping)",
);

/**
 * Fast elliptic curve digital signatures
 */
export const fastecdsa = mkPackage(
  nixRaw`pkgs.python2Packages.fastecdsa`,
  "Fast elliptic curve digital signatures",
);

/**
 * Fast, Accurate, Lightweight Python library to make State of the Art Embedding
 */
export const fastembed = mkPackage(
  nixRaw`pkgs.python2Packages.fastembed`,
  "Fast, Accurate, Lightweight Python library to make State of the Art Embedding",
);

/**
 * Module that provides useful locks
 */
export const fasteners = mkPackage(
  nixRaw`pkgs.python2Packages.fasteners`,
  "Module that provides useful locks",
);

/**
 * Makes entry_points specified in setup.py load more quickly
 */
export const fastentrypoints = mkPackage(
  nixRaw`pkgs.python2Packages.fastentrypoints`,
  "Makes entry_points specified in setup.py load more quickly",
);

/**
 * Faster alternative to Python's multiprocessing.Queue (IPC FIFO queue
 */
export const faster_fifo = mkPackage(
  nixRaw`pkgs.python2Packages.faster-fifo`,
  "Faster alternative to Python's multiprocessing.Queue (IPC FIFO queue",
);

/**
 * Faster Whisper transcription with CTranslate2
 */
export const faster_whisper = mkPackage(
  nixRaw`pkgs.python2Packages.faster-whisper`,
  "Faster Whisper transcription with CTranslate2",
);

/**
 * VCS fastimport/fastexport parser
 */
export const fastimport = mkPackage(
  nixRaw`pkgs.python2Packages.fastimport`,
  "VCS fastimport/fastexport parser",
);

/**
 * A software package for jet finding in pp and e+e− collisions
 */
export const fastjet = mkPackage(
  nixRaw`pkgs.python2Packages.fastjet`,
  "A software package for jet finding in pp and e+e− collisions",
);

/**
 * JSON schema validator for Python
 */
export const fastjsonschema = mkPackage(
  nixRaw`pkgs.python2Packages.fastjsonschema`,
  "JSON schema validator for Python",
);

/**
 * Fast pQCD calculations for hadron-induced processes
 */
export const fastnlo_toolkit = mkPackage(
  nixRaw`pkgs.python2Packages.fastnlo_toolkit`,
  "Fast pQCD calculations for hadron-induced processes",
);

/**
 * Python module for number conversion
 */
export const fastnumbers = mkPackage(
  nixRaw`pkgs.python2Packages.fastnumbers`,
  "Python module for number conversion",
);

/**
 * Data-structure for the dynamic closest-pair problem
 */
export const fastpair = mkPackage(
  nixRaw`pkgs.python2Packages.fastpair`,
  "Data-structure for the dynamic closest-pair problem",
);

/**
 * A python implementation of the parquet format
 */
export const fastparquet = mkPackage(
  nixRaw`pkgs.python2Packages.fastparquet`,
  "A python implementation of the parquet format",
);

/**
 * Python bindings for fastpbkdf2
 */
export const fastpbkdf2 = mkPackage(
  nixRaw`pkgs.python2Packages.fastpbkdf2`,
  "Python bindings for fastpbkdf2",
);

/**
 * Simple and flexible progress bar for Jupyter Notebook and console
 */
export const fastprogress = mkPackage(
  nixRaw`pkgs.python2Packages.fastprogress`,
  "Simple and flexible progress bar for Jupyter Notebook and console",
);

/**
 * RLock implementation for CPython
 */
export const fastrlock = mkPackage(
  nixRaw`pkgs.python2Packages.fastrlock`,
  "RLock implementation for CPython",
);

/**
 * Python module for text classification and representation learning
 */
export const fasttext = mkPackage(
  nixRaw`pkgs.python2Packages.fasttext`,
  "Python module for text classification and representation learning",
);

/**
 * fasttext with wheels and no external dependency, but only the predict method (<1MB)
 */
export const fasttext_predict = mkPackage(
  nixRaw`pkgs.python2Packages.fasttext-predict`,
  "fasttext with wheels and no external dependency, but only the predict method (<1MB)",
);

/**
 * High-speed universal character encoding detector
 */
export const faust_cchardet = mkPackage(
  nixRaw`pkgs.python2Packages.faust-cchardet`,
  "High-speed universal character encoding detector",
);

/**
 * Find a website's favicon
 */
export const favicon = mkPackage(
  nixRaw`pkgs.python2Packages.favicon`,
  "Find a website's favicon",
);

/**
 * Python wrapper for Google's RE2
 */
export const fb_re2 = mkPackage(
  nixRaw`pkgs.python2Packages.fb-re2`,
  "Python wrapper for Google's RE2",
);

/**
 * Python field operations for Curve25519's prime
 */
export const fe25519 = mkPackage(
  nixRaw`pkgs.python2Packages.fe25519`,
  "Python field operations for Curve25519's prime",
);

/**
 * Python module to generate ATOM feeds, RSS feeds and Podcasts.
 */
export const feedgen = mkPackage(
  nixRaw`pkgs.python2Packages.feedgen`,
  "Python module to generate ATOM feeds, RSS feeds and Podcasts.",
);

/**
 * Standalone version of Django's feedgenerator module
 */
export const feedgenerator = mkPackage(
  nixRaw`pkgs.python2Packages.feedgenerator`,
  "Standalone version of Django's feedgenerator module",
);

/**
 * Universal feed parser
 */
export const feedparser = mkPackage(
  nixRaw`pkgs.python2Packages.feedparser`,
  "Universal feed parser",
);

/**
 * Python bindings for the DOLFIN FEM compiler
 */
export const fenics = mkPackage(
  nixRaw`pkgs.python2Packages.fenics`,
  "Python bindings for the DOLFIN FEM compiler",
);

/**
 * FFCV: Fast Forward Computer Vision
 */
export const ffcv = mkPackage(
  nixRaw`pkgs.python2Packages.ffcv`,
  "FFCV: Fast Forward Computer Vision",
);

/**
 * Run an ffmpeg command with progress
 */
export const ffmpeg_progress_yield = mkPackage(
  nixRaw`pkgs.python2Packages.ffmpeg-progress-yield`,
  "Run an ffmpeg command with progress",
);

/**
 * Python bindings for FFmpeg - with complex filtering support
 */
export const ffmpeg_python = mkPackage(
  nixRaw`pkgs.python2Packages.ffmpeg-python`,
  "Python bindings for FFmpeg - with complex filtering support",
);

/**
 * A simple python interface for FFmpeg/FFprobe
 */
export const ffmpy = mkPackage(
  nixRaw`pkgs.python2Packages.ffmpy`,
  "A simple python interface for FFmpeg/FFprobe",
);

/**
 * Fibaro Home Center API Python Library
 */
export const fiblary3_fork = mkPackage(
  nixRaw`pkgs.python2Packages.fiblary3-fork`,
  "Fibaro Home Center API Python Library",
);

/**
 * Provides library functionality for FIDO 2.0, including communication with a device over USB
 */
export const fido2 = mkPackage(
  nixRaw`pkgs.python2Packages.fido2`,
  "Provides library functionality for FIDO 2.0, including communication with a device over USB",
);

/**
 * Container class boilerplate killer
 */
export const fields = mkPackage(
  nixRaw`pkgs.python2Packages.fields`,
  "Container class boilerplate killer",
);

/**
 * Memory efficient way of reading files line-by-line from the end of file
 */
export const file_read_backwards = mkPackage(
  nixRaw`pkgs.python2Packages.file-read-backwards`,
  "Memory efficient way of reading files line-by-line from the end of file",
);

/**
 * A snapshot of django-filebrowser for the Mezzanine CMS
 */
export const filebrowser_safe = mkPackage(
  nixRaw`pkgs.python2Packages.filebrowser_safe`,
  "A snapshot of django-filebrowser for the Mezzanine CMS",
);

/**
 * Scripts to parse ELF, PE, Mach-O and OAT (Android Runtime)
 */
export const filebytes = mkPackage(
  nixRaw`pkgs.python2Packages.filebytes`,
  "Scripts to parse ELF, PE, Mach-O and OAT (Android Runtime)",
);

/**
 * Python port of LLVM's FileCheck, flexible pattern matching file verifier
 */
export const filecheck = mkPackage(
  nixRaw`pkgs.python2Packages.filecheck`,
  "Python port of LLVM's FileCheck, flexible pattern matching file verifier",
);

/**
 * Toolkit for storing files and attachments in web applications
 */
export const filedepot = mkPackage(
  nixRaw`pkgs.python2Packages.filedepot`,
  "Toolkit for storing files and attachments in web applications",
);

/**
 * A platform independent file lock for Python
 */
export const filelock = mkPackage(
  nixRaw`pkgs.python2Packages.filelock`,
  "A platform independent file lock for Python",
);

/**
 * Infer file type and MIME type of any file/buffer
 */
export const filetype = mkPackage(
  nixRaw`pkgs.python2Packages.filetype`,
  "Infer file type and MIME type of any file/buffer",
);

/**
 * Kalman filtering and optimal estimation library
 */
export const filterpy = mkPackage(
  nixRaw`pkgs.python2Packages.filterpy`,
  "Kalman filtering and optimal estimation library",
);

/**
 * Python module for using finalfusion, word2vec, and fastText word embeddings
 */
export const finalfusion = mkPackage(
  nixRaw`pkgs.python2Packages.finalfusion`,
  "Python module for using finalfusion, word2vec, and fastText word embeddings",
);

/**
 * Finds the libpython associated with your environment, wherever it may be hiding
 */
export const find_libpython = mkPackage(
  nixRaw`pkgs.python2Packages.find-libpython`,
  "Finds the libpython associated with your environment, wherever it may be hiding",
);

/**
 * Module for the analysis of Python import statements
 */
export const findimports = mkPackage(
  nixRaw`pkgs.python2Packages.findimports`,
  "Module for the analysis of Python import statements",
);

/**
 * A utility to find python versions on your system
 */
export const findpython = mkPackage(
  nixRaw`pkgs.python2Packages.findpython`,
  "A utility to find python versions on your system",
);

/**
 * A library to generate entity fingerprints
 */
export const fingerprints = mkPackage(
  nixRaw`pkgs.python2Packages.fingerprints`,
  "A library to generate entity fingerprints",
);

/**
 * Python module to get data from ABCD bus (RS-485) used by Carrier Infinity and Bryant Evolution HVAC systems
 */
export const finitude = mkPackage(
  nixRaw`pkgs.python2Packages.finitude`,
  "Python module to get data from ABCD bus (RS-485) used by Carrier Infinity and Bryant Evolution HVAC systems",
);

/**
 * Pure-python FinTS (formerly known as HBCI) implementation
 */
export const fints = mkPackage(
  nixRaw`pkgs.python2Packages.fints`,
  "Pure-python FinTS (formerly known as HBCI) implementation",
);

/**
 * Finviz Finance information downloader
 */
export const finvizfinance = mkPackage(
  nixRaw`pkgs.python2Packages.finvizfinance`,
  "Finviz Finance information downloader",
);

/**
 * OGR's neat, nimble, no-nonsense API for Python
 */
export const fiona = mkPackage(
  nixRaw`pkgs.python2Packages.fiona`,
  "OGR's neat, nimble, no-nonsense API for Python",
);

/**
 * A Finite Volume PDE Solver Using Python
 */
export const fipy = mkPackage(
  nixRaw`pkgs.python2Packages.fipy`,
  "A Finite Volume PDE Solver Using Python",
);

/**
 * A library for automatically generating command line interfaces
 */
export const fire = mkPackage(
  nixRaw`pkgs.python2Packages.fire`,
  "A library for automatically generating command line interfaces",
);

/**
 * An implementation of the stochastic nature-inspired algorithm for optimization
 */
export const fireflyalgorithm = mkPackage(
  nixRaw`pkgs.python2Packages.fireflyalgorithm`,
  "An implementation of the stochastic nature-inspired algorithm for optimization",
);

/**
 * Communicate with an Amazon Fire TV device via ADB over a network
 */
export const firetv = mkPackage(
  nixRaw`pkgs.python2Packages.firetv`,
  "Communicate with an Amazon Fire TV device via ADB over a network",
);

/**
 * The function you always missed in Python
 */
export const first = mkPackage(
  nixRaw`pkgs.python2Packages.first`,
  "The function you always missed in Python",
);

/**
 * Fitbit API Python Client Implementation
 */
export const fitbit = mkPackage(
  nixRaw`pkgs.python2Packages.fitbit`,
  "Fitbit API Python Client Implementation",
);

/**
 * Module for interacting with FiveM servers
 */
export const fivem_api = mkPackage(
  nixRaw`pkgs.python2Packages.fivem-api`,
  "Module for interacting with FiveM servers",
);

/**
 * Python client for Fixer.io
 */
export const fixerio = mkPackage(
  nixRaw`pkgs.python2Packages.fixerio`,
  "Python client for Fixer.io",
);

/**
 * Reusable state for writing clean tests and more
 */
export const fixtures = mkPackage(
  nixRaw`pkgs.python2Packages.fixtures`,
  "Reusable state for writing clean tests and more",
);

/**
 * Module for controlling Fjäråskupan kitchen fans
 */
export const fjaraskupan = mkPackage(
  nixRaw`pkgs.python2Packages.fjaraskupan`,
  "Module for controlling Fjäråskupan kitchen fans",
);

/**
 * Flake8 is a wrapper around pyflakes, pycodestyle and mccabe.
 */
export const flake8 = mkPackage(
  nixRaw`pkgs.python2Packages.flake8`,
  "Flake8 is a wrapper around pyflakes, pycodestyle and mccabe.",
);

/**
 * A flake8 extension that checks for blind except: statements
 */
export const flake8_blind_except = mkPackage(
  nixRaw`pkgs.python2Packages.flake8-blind-except`,
  "A flake8 extension that checks for blind except: statements",
);

/**
 * Plugin for Flake8 to find bugs and design problems
 */
export const flake8_bugbear = mkPackage(
  nixRaw`pkgs.python2Packages.flake8-bugbear`,
  "Plugin for Flake8 to find bugs and design problems",
);

/**
 * ipdb/pdb statement checker plugin for flake8
 */
export const flake8_debugger = mkPackage(
  nixRaw`pkgs.python2Packages.flake8-debugger`,
  "ipdb/pdb statement checker plugin for flake8",
);

/**
 * Extension for flake8 which uses pydocstyle to check docstrings
 */
export const flake8_docstrings = mkPackage(
  nixRaw`pkgs.python2Packages.flake8-docstrings`,
  "Extension for flake8 which uses pydocstyle to check docstrings",
);

/**
 * A flake8 extension to check for the imported __future__ modules to make it easier to have a consistent code base
 */
export const flake8_future_import = mkPackage(
  nixRaw`pkgs.python2Packages.flake8-future-import`,
  "A flake8 extension to check for the imported __future__ modules to make it easier to have a consistent code base",
);

/**
 * Flake8 and pylama plugin that checks the ordering of import statements
 */
export const flake8_import_order = mkPackage(
  nixRaw`pkgs.python2Packages.flake8-import-order`,
  "Flake8 and pylama plugin that checks the ordering of import statements",
);

/**
 * Flake8 plugin for a smart line length validation
 */
export const flake8_length = mkPackage(
  nixRaw`pkgs.python2Packages.flake8-length`,
  "Flake8 plugin for a smart line length validation",
);

/**
 * Polyfill package for Flake8 plugins
 */
export const flake8_polyfill = mkPackage(
  nixRaw`pkgs.python2Packages.flake8-polyfill`,
  "Polyfill package for Flake8 plugins",
);

/**
 * Plugin for nose or py.test that automatically reruns flaky tests
 */
export const flaky = mkPackage(
  nixRaw`pkgs.python2Packages.flaky`,
  "Plugin for nose or py.test that automatically reruns flaky tests",
);

/**
 * Python file and zip operations made easy
 */
export const flametree = mkPackage(
  nixRaw`pkgs.python2Packages.flametree`,
  "Python file and zip operations made easy",
);

/**
 * Flexible HDF5 saving/loading library forked from deepdish (University of Chicago) and maintained by the Portugues lab
 */
export const flammkuchen = mkPackage(
  nixRaw`pkgs.python2Packages.flammkuchen`,
  "Flexible HDF5 saving/loading library forked from deepdish (University of Chicago) and maintained by the Portugues lab",
);

/**
 * Easy OpenAPI specs and Swagger UI for your Flask API
 */
export const flasgger = mkPackage(
  nixRaw`pkgs.python2Packages.flasgger`,
  "Easy OpenAPI specs and Swagger UI for your Flask API",
);

/**
 * Python package to replace keywords in sentences or extract keywords from sentences
 */
export const flashtext = mkPackage(
  nixRaw`pkgs.python2Packages.flashtext`,
  "Python package to replace keywords in sentences or extract keywords from sentences",
);

/**
 * The Python micro framework for building web applications
 */
export const flask = mkPackage(
  nixRaw`pkgs.python2Packages.flask`,
  "The Python micro framework for building web applications",
);

/**
 * Admin interface framework for Flask
 */
export const flask_admin = mkPackage(
  nixRaw`pkgs.python2Packages.flask-admin`,
  "Admin interface framework for Flask",
);

/**
 * Browsable web APIs for Flask
 */
export const flask_api = mkPackage(
  nixRaw`pkgs.python2Packages.flask-api`,
  "Browsable web APIs for Flask",
);

/**
 * Asset management for Flask, to compress and merge CSS and Javascript files
 */
export const flask_assets = mkPackage(
  nixRaw`pkgs.python2Packages.flask-assets`,
  "Asset management for Flask, to compress and merge CSS and Javascript files",
);

/**
 * Adds i18n/l10n support to Flask applications
 */
export const flask_babel = mkPackage(
  nixRaw`pkgs.python2Packages.flask-babel`,
  "Adds i18n/l10n support to Flask applications",
);

/**
 * Adds i18n/l10n support to Flask applications
 */
export const flask_babelex = mkPackage(
  nixRaw`pkgs.python2Packages.flask-babelex`,
  "Adds i18n/l10n support to Flask applications",
);

/**
 * HTTP basic access authentication for Flask
 */
export const flask_basicauth = mkPackage(
  nixRaw`pkgs.python2Packages.flask-basicauth`,
  "HTTP basic access authentication for Flask",
);

/**
 * Brcrypt hashing for Flask
 */
export const flask_bcrypt = mkPackage(
  nixRaw`pkgs.python2Packages.flask-bcrypt`,
  "Brcrypt hashing for Flask",
);

/**
 * Ready-to-use Twitter-bootstrap for use in Flask.
 */
export const flask_bootstrap = mkPackage(
  nixRaw`pkgs.python2Packages.flask-bootstrap`,
  "Ready-to-use Twitter-bootstrap for use in Flask.",
);

/**
 * A caching extension for Flask
 */
export const flask_caching = mkPackage(
  nixRaw`pkgs.python2Packages.flask-caching`,
  "A caching extension for Flask",
);

/**
 * Flask extension with lots of common time-savers
 */
export const flask_common = mkPackage(
  nixRaw`pkgs.python2Packages.flask-common`,
  "Flask extension with lots of common time-savers",
);

/**
 * Compress responses in your Flask app with gzip, deflate or brotli
 */
export const flask_compress = mkPackage(
  nixRaw`pkgs.python2Packages.flask-compress`,
  "Compress responses in your Flask app with gzip, deflate or brotli",
);

/**
 * A Flask extension adding a decorator for CORS support
 */
export const flask_cors = mkPackage(
  nixRaw`pkgs.python2Packages.flask-cors`,
  "A Flask extension adding a decorator for CORS support",
);

/**
 * Adds Dramatiq support to your Flask application
 */
export const flask_dramatiq = mkPackage(
  nixRaw`pkgs.python2Packages.flask-dramatiq`,
  "Adds Dramatiq support to your Flask application",
);

/**
 * Integrates official client for Elasticsearch into Flask
 */
export const flask_elastic = mkPackage(
  nixRaw`pkgs.python2Packages.flask-elastic`,
  "Integrates official client for Elasticsearch into Flask",
);

/**
 * Decorator for REST endpoints in flask. Validate JSON request data.
 */
export const flask_expects_json = mkPackage(
  nixRaw`pkgs.python2Packages.flask-expects-json`,
  "Decorator for REST endpoints in flask. Validate JSON request data.",
);

/**
 * Small and simple integration of gravatar into flask
 */
export const flask_gravatar = mkPackage(
  nixRaw`pkgs.python2Packages.flask-gravatar`,
  "Small and simple integration of gravatar into flask",
);

/**
 * Extension that provides HTTP authentication for Flask routes
 */
export const flask_httpauth = mkPackage(
  nixRaw`pkgs.python2Packages.flask-httpauth`,
  "Extension that provides HTTP authentication for Flask routes",
);

/**
 * JWT extension for Flask
 */
export const flask_jwt_extended = mkPackage(
  nixRaw`pkgs.python2Packages.flask-jwt-extended`,
  "JWT extension for Flask",
);

/**
 * Rate limiting for flask applications
 */
export const flask_limiter = mkPackage(
  nixRaw`pkgs.python2Packages.flask-limiter`,
  "Rate limiting for flask applications",
);

/**
 * User session management for Flask
 */
export const flask_login = mkPackage(
  nixRaw`pkgs.python2Packages.flask-login`,
  "User session management for Flask",
);

/**
 * Flask-Mail is a Flask extension providing simple email sending capabilities.
 */
export const flask_mail = mkPackage(
  nixRaw`pkgs.python2Packages.flask-mail`,
  "Flask-Mail is a Flask extension providing simple email sending capabilities.",
);

/**
 * Flask extension providing simple email sending capabilities.
 */
export const flask_mailman = mkPackage(
  nixRaw`pkgs.python2Packages.flask-mailman`,
  "Flask extension providing simple email sending capabilities.",
);

/**
 * Flask + marshmallow for beautiful APIs
 */
export const flask_marshmallow = mkPackage(
  nixRaw`pkgs.python2Packages.flask-marshmallow`,
  "Flask + marshmallow for beautiful APIs",
);

/**
 * SQLAlchemy database migrations for Flask applications using Alembic
 */
export const flask_migrate = mkPackage(
  nixRaw`pkgs.python2Packages.flask-migrate`,
  "SQLAlchemy database migrations for Flask applications using Alembic",
);

/**
 * Flask extension that provides integration with MongoEngine and WTF model forms
 */
export const flask_mongoengine = mkPackage(
  nixRaw`pkgs.python2Packages.flask-mongoengine`,
  "Flask extension that provides integration with MongoEngine and WTF model forms",
);

/**
 * MySQL connection support for Flask
 */
export const flask_mysqldb = mkPackage(
  nixRaw`pkgs.python2Packages.flask-mysqldb`,
  "MySQL connection support for Flask",
);

/**
 * OpenID support for Flask
 */
export const flask_openid = mkPackage(
  nixRaw`pkgs.python2Packages.flask-openid`,
  "OpenID support for Flask",
);

/**
 * Pagination support for Flask
 */
export const flask_paginate = mkPackage(
  nixRaw`pkgs.python2Packages.flask-paginate`,
  "Pagination support for Flask",
);

/**
 * Simple user session protection
 */
export const flask_paranoid = mkPackage(
  nixRaw`pkgs.python2Packages.flask-paranoid`,
  "Simple user session protection",
);

/**
 * Identity management for flask
 */
export const flask_principal = mkPackage(
  nixRaw`pkgs.python2Packages.flask-principal`,
  "Identity management for flask",
);

/**
 * PyMongo support for Flask applications
 */
export const flask_pymongo = mkPackage(
  nixRaw`pkgs.python2Packages.flask-pymongo`,
  "PyMongo support for Flask applications",
);

/**
 * Framework for creating REST APIs
 */
export const flask_restful = mkPackage(
  nixRaw`pkgs.python2Packages.flask-restful`,
  "Framework for creating REST APIs",
);

/**
 * Fully featured framework for fast, easy and documented API development with Flask
 */
export const flask_restx = mkPackage(
  nixRaw`pkgs.python2Packages.flask-restx`,
  "Fully featured framework for fast, easy and documented API development with Flask",
);

/**
 * Python Flask middleware for applications running under a reverse proxy
 */
export const flask_reverse_proxy_fix = mkPackage(
  nixRaw`pkgs.python2Packages.flask-reverse-proxy-fix`,
  "Python Flask middleware for applications running under a reverse proxy",
);

/**
 * Scripting support for Flask
 */
export const flask_script = mkPackage(
  nixRaw`pkgs.python2Packages.flask-script`,
  "Scripting support for Flask",
);

/**
 * A Flask extension for preventing cross-site request forgery
 */
export const flask_seasurf = mkPackage(
  nixRaw`pkgs.python2Packages.flask-seasurf`,
  "A Flask extension for preventing cross-site request forgery",
);

/**
 * Simple security for Flask apps (fork)
 */
export const flask_security_too = mkPackage(
  nixRaw`pkgs.python2Packages.flask-security-too`,
  "Simple security for Flask apps (fork)",
);

/**
 * A Flask extension that adds support for server-side sessions
 */
export const flask_session = mkPackage(
  nixRaw`pkgs.python2Packages.flask-session`,
  "A Flask extension that adds support for server-side sessions",
);

/**
 * A captcha implemention for flask
 */
export const flask_session_captcha = mkPackage(
  nixRaw`pkgs.python2Packages.flask-session-captcha`,
  "A captcha implemention for flask",
);

/**
 * Session Storage Backends for Flask
 */
export const flask_sessionstore = mkPackage(
  nixRaw`pkgs.python2Packages.flask-sessionstore`,
  "Session Storage Backends for Flask",
);

/**
 * Adds silk icons to your Flask application or module, or extension
 */
export const flask_silk = mkPackage(
  nixRaw`pkgs.python2Packages.flask-silk`,
  "Adds silk icons to your Flask application or module, or extension",
);

/**
 * Socket.IO integration for Flask applications
 */
export const flask_socketio = mkPackage(
  nixRaw`pkgs.python2Packages.flask-socketio`,
  "Socket.IO integration for Flask applications",
);

/**
 * Elegant WebSockets for your Flask apps
 */
export const flask_sockets = mkPackage(
  nixRaw`pkgs.python2Packages.flask-sockets`,
  "Elegant WebSockets for your Flask apps",
);

/**
 * SQLAlchemy extension for Flask
 */
export const flask_sqlalchemy = mkPackage(
  nixRaw`pkgs.python2Packages.flask-sqlalchemy`,
  "SQLAlchemy extension for Flask",
);

/**
 * A Flask extension that redirects all incoming requests to HTTPS
 */
export const flask_sslify = mkPackage(
  nixRaw`pkgs.python2Packages.flask-sslify`,
  "A Flask extension that redirects all incoming requests to HTTPS",
);

/**
 * Extract swagger specs from your flask project
 */
export const flask_swagger = mkPackage(
  nixRaw`pkgs.python2Packages.flask-swagger`,
  "Extract swagger specs from your flask project",
);

/**
 * Swagger UI blueprint for Flask
 */
export const flask_swagger_ui = mkPackage(
  nixRaw`pkgs.python2Packages.flask-swagger-ui`,
  "Swagger UI blueprint for Flask",
);

/**
 * HTTP security headers for Flask
 */
export const flask_talisman = mkPackage(
  nixRaw`pkgs.python2Packages.flask-talisman`,
  "HTTP security headers for Flask",
);

/**
 * Extension provides unit testing utilities for Flask
 */
export const flask_testing = mkPackage(
  nixRaw`pkgs.python2Packages.flask-testing`,
  "Extension provides unit testing utilities for Flask",
);

/**
 * Easily theme your Flask app
 */
export const flask_themes2 = mkPackage(
  nixRaw`pkgs.python2Packages.flask-themes2`,
  "Easily theme your Flask app",
);

/**
 * Flask plugin to rewrite file paths to add version info
 */
export const flask_versioned = mkPackage(
  nixRaw`pkgs.python2Packages.flask-versioned`,
  "Flask plugin to rewrite file paths to add version info",
);

/**
 * Simple integration of Flask and WTForms.
 */
export const flask_wtf = mkPackage(
  nixRaw`pkgs.python2Packages.flask-wtf`,
  "Simple integration of Flask and WTForms.",
);

/**
 * Python runtime library for use with the Flatbuffers serialization format
 */
export const flatbuffers = mkPackage(
  nixRaw`pkgs.python2Packages.flatbuffers`,
  "Python runtime library for use with the Flatbuffers serialization format",
);

/**
 * Python module for interacting with nested dicts as a single level dict with delimited keys
 */
export const flatdict = mkPackage(
  nixRaw`pkgs.python2Packages.flatdict`,
  "Python module for interacting with nested dicts as a single level dict with delimited keys",
);

/**
 * Module for flattening and unflattening dict-like objects
 */
export const flatten_dict = mkPackage(
  nixRaw`pkgs.python2Packages.flatten-dict`,
  "Module for flattening and unflattening dict-like objects",
);

/**
 * Neural network library for JAX
 */
export const flax = mkPackage(
  nixRaw`pkgs.python2Packages.flax`,
  "Neural network library for JAX",
);

/**
 * File format determination library
 */
export const fleep = mkPackage(
  nixRaw`pkgs.python2Packages.fleep`,
  "File format determination library",
);

/**
 * A framework that enables you to easily build realtime web, mobile, and desktop apps in Python
 */
export const flet = mkPackage(
  nixRaw`pkgs.python2Packages.flet`,
  "A framework that enables you to easily build realtime web, mobile, and desktop apps in Python",
);

/**
 * The library is the foundation of Flet framework and is not intended to be used directly
 */
export const flet_core = mkPackage(
  nixRaw`pkgs.python2Packages.flet-core`,
  "The library is the foundation of Flet framework and is not intended to be used directly",
);

/**
 * Testing library that makes it easy to create mocks,stubs and fakes
 */
export const flexmock = mkPackage(
  nixRaw`pkgs.python2Packages.flexmock`,
  "Testing library that makes it easy to create mocks,stubs and fakes",
);

/**
 * A Python interface to the Flickr API
 */
export const flickrapi = mkPackage(
  nixRaw`pkgs.python2Packages.flickrapi`,
  "A Python interface to the Flickr API",
);

/**
 * Python client for Flipr API
 */
export const flipr_api = mkPackage(
  nixRaw`pkgs.python2Packages.flipr-api`,
  "Python client for Flipr API",
);

/**
 * A simple packaging tool for simple packages
 */
export const flit = mkPackage(
  nixRaw`pkgs.python2Packages.flit`,
  "A simple packaging tool for simple packages",
);

/**
 * Distribution-building parts of Flit. See flit package for more information
 */
export const flit_core = mkPackage(
  nixRaw`pkgs.python2Packages.flit-core`,
  "Distribution-building parts of Flit. See flit package for more information",
);

/**
 * A PEP 518 build backend that uses setuptools_scm to generate a version file from your version control system, then flit to build the package.
 */
export const flit_scm = mkPackage(
  nixRaw`pkgs.python2Packages.flit-scm`,
  "A PEP 518 build backend that uses setuptools_scm to generate a version file from your version control system, then flit to build the package.",
);

/**
 * FastText + Bloom embeddings for compact, full-coverage vectors with spaCy
 */
export const floret = mkPackage(
  nixRaw`pkgs.python2Packages.floret`,
  "FastText + Bloom embeddings for compact, full-coverage vectors with spaCy",
);

/**
 * Library for defining and creating structured data
 */
export const flow_record = mkPackage(
  nixRaw`pkgs.python2Packages.flow-record`,
  "Library for defining and creating structured data",
);

/**
 * Real-time monitor and web admin for Celery distributed task queue
 */
export const flower = mkPackage(
  nixRaw`pkgs.python2Packages.flower`,
  "Real-time monitor and web admin for Celery distributed task queue",
);

/**
 * Python library to make retrieving Amazon VPC Flow Logs from CloudWatch Logs a bit easier
 */
export const flowlogs_reader = mkPackage(
  nixRaw`pkgs.python2Packages.flowlogs_reader`,
  "Python library to make retrieving Amazon VPC Flow Logs from CloudWatch Logs a bit easier",
);

/**
 * A structured logger for Fluentd (Python)
 */
export const fluent_logger = mkPackage(
  nixRaw`pkgs.python2Packages.fluent-logger`,
  "A structured logger for Fluentd (Python)",
);

export const flufl_bounce = mkPackage(
  nixRaw`pkgs.python2Packages.flufl_bounce`,
  "",
);

/**
 * A high level API for internationalizing Python libraries and applications
 */
export const flufl_i18n = mkPackage(
  nixRaw`pkgs.python2Packages.flufl_i18n`,
  "A high level API for internationalizing Python libraries and applications",
);

/**
 * NFS-safe file locking with timeouts for POSIX and Windows
 */
export const flufl_lock = mkPackage(
  nixRaw`pkgs.python2Packages.flufl_lock`,
  "NFS-safe file locking with timeouts for POSIX and Windows",
);

/**
 * Python library to communicate with the flux_led smart bulbs
 */
export const flux_led = mkPackage(
  nixRaw`pkgs.python2Packages.flux-led`,
  "Python library to communicate with the flux_led smart bulbs",
);

/**
 * More interactive weak supervision with FlyingSquid
 */
export const flyingsquid = mkPackage(
  nixRaw`pkgs.python2Packages.flyingsquid`,
  "More interactive weak supervision with FlyingSquid",
);

/**
 * command line tool to automatically convert a project's Python code from old format style strings into Python 3.6+'s f-strings
 */
export const flynt = mkPackage(
  nixRaw`pkgs.python2Packages.flynt`,
  "command line tool to automatically convert a project's Python code from old format style strings into Python 3.6+'s f-strings",
);

        /**
         * Functional programming in Python: implementation of missing
features to enjoy FP

         */
export const fn = mkPackage(
  nixRaw`pkgs.python2Packages.fn`,
  "Functional programming in Python: implementation of missing\nfeatures to enjoy FP\n",
);

/**
 * A fast version of fnv1a
 */
export const fnv_hash_fast = mkPackage(
  nixRaw`pkgs.python2Packages.fnv-hash-fast`,
  "A fast version of fnv1a",
);

/**
 * Python FNV hash implementation
 */
export const fnvhash = mkPackage(
  nixRaw`pkgs.python2Packages.fnvhash`,
  "Python FNV hash implementation",
);

/**
 * Make beautiful maps with Leaflet.js & Python
 */
export const folium = mkPackage(
  nixRaw`pkgs.python2Packages.folium`,
  "Make beautiful maps with Leaflet.js & Python",
);

/**
 * Icon library and toolkit
 */
export const fontawesomefree = mkPackage(
  nixRaw`pkgs.python2Packages.fontawesomefree`,
  "Icon library and toolkit",
);

/**
 * A font editor
 */
export const fontforge = mkPackage(
  nixRaw`pkgs.python2Packages.fontforge`,
  "A font editor",
);

/**
 * Compiles fonts from various sources (.glyphs, .ufo, designspace) into binaries formats (.otf, .ttf)
 */
export const fontmake = mkPackage(
  nixRaw`pkgs.python2Packages.fontmake`,
  "Compiles fonts from various sources (.glyphs, .ufo, designspace) into binaries formats (.otf, .ttf)",
);

/**
 * A collection of objects that implement fast font, glyph, etc. math
 */
export const fontmath = mkPackage(
  nixRaw`pkgs.python2Packages.fontmath`,
  "A collection of objects that implement fast font, glyph, etc. math",
);

/**
 * An API for interacting with the parts of fonts during the font development process.
 */
export const fontparts = mkPackage(
  nixRaw`pkgs.python2Packages.fontparts`,
  "An API for interacting with the parts of fonts during the font development process.",
);

/**
 * A collection of classes implementing the pen protocol for manipulating glyphs
 */
export const fontpens = mkPackage(
  nixRaw`pkgs.python2Packages.fontpens`,
  "A collection of classes implementing the pen protocol for manipulating glyphs",
);

/**
 * A library to manipulate font files from Python
 */
export const fonttools = mkPackage(
  nixRaw`pkgs.python2Packages.fonttools`,
  "A library to manipulate font files from Python",
);

/**
 * API Client for Foobot Air Quality Monitoring devices
 */
export const foobot_async = mkPackage(
  nixRaw`pkgs.python2Packages.foobot-async`,
  "API Client for Foobot Air Quality Monitoring devices",
);

/**
 * RPC protocol for Python that follows the distributed object-capability model
 */
export const foolscap = mkPackage(
  nixRaw`pkgs.python2Packages.foolscap`,
  "RPC protocol for Python that follows the distributed object-capability model",
);

/**
 * Patch python built-in objects
 */
export const forbiddenfruit = mkPackage(
  nixRaw`pkgs.python2Packages.forbiddenfruit`,
  "Patch python built-in objects",
);

/**
 * Python module for the FordPass API
 */
export const fordpass = mkPackage(
  nixRaw`pkgs.python2Packages.fordpass`,
  "Python module for the FordPass API",
);

/**
 * Asynchronous Python client for getting forecast solar information
 */
export const forecast_solar = mkPackage(
  nixRaw`pkgs.python2Packages.forecast-solar`,
  "Asynchronous Python client for getting forecast solar information",
);

/**
 * A script to format mbox as HTML/XML
 */
export const formbox = mkPackage(
  nixRaw`pkgs.python2Packages.formbox`,
  "A script to format mbox as HTML/XML",
);

/**
 * FormEncode validates and converts nested structures
 */
export const formencode = mkPackage(
  nixRaw`pkgs.python2Packages.formencode`,
  "FormEncode validates and converts nested structures",
);

/**
 * Formulas for mixed-effects models in Python
 */
export const formulae = mkPackage(
  nixRaw`pkgs.python2Packages.formulae`,
  "Formulas for mixed-effects models in Python",
);

/**
 * High-performance implementation of Wilkinson formulas for
 */
export const formulaic = mkPackage(
  nixRaw`pkgs.python2Packages.formulaic`,
  "High-performance implementation of Wilkinson formulas for",
);

/**
 * Python module to work with Fortigate/Fortios devices
 */
export const fortiosapi = mkPackage(
  nixRaw`pkgs.python2Packages.fortiosapi`,
  "Python module to work with Fortigate/Fortios devices",
);

/**
 * Python bindings for FoundationDB
 */
export const foundationdb71 = mkPackage(
  nixRaw`pkgs.python2Packages.foundationdb71`,
  "Python bindings for FoundationDB",
);

/**
 * Python library for generating and embedding data for unit testing
 */
export const fountains = mkPackage(
  nixRaw`pkgs.python2Packages.fountains`,
  "Python library for generating and embedding data for unit testing",
);

/**
 * Live coding music with SuperCollider
 */
export const foxdot = mkPackage(
  nixRaw`pkgs.python2Packages.foxdot`,
  "Live coding music with SuperCollider",
);

/**
 * Simple PDF generation for Python
 */
export const fpdf = mkPackage(
  nixRaw`pkgs.python2Packages.fpdf`,
  "Simple PDF generation for Python",
);

/**
 * A Python interface for fplll
 */
export const fpylll = mkPackage(
  nixRaw`pkgs.python2Packages.fpylll`,
  "A Python interface for fplll",
);

/**
 * Collection of useful non-standard Python functions
 */
export const fpyutils = mkPackage(
  nixRaw`pkgs.python2Packages.fpyutils`,
  "Collection of useful non-standard Python functions",
);

/**
 * RFC-compliant FQDN validation and manipulation
 */
export const fqdn = mkPackage(
  nixRaw`pkgs.python2Packages.fqdn`,
  "RFC-compliant FQDN validation and manipulation",
);

/**
 * Python module to interact with the Freebox OS API
 */
export const freebox_api = mkPackage(
  nixRaw`pkgs.python2Packages.freebox-api`,
  "Python module to interact with the Freebox OS API",
);

/**
 * FreeType (high-level Python API)
 */
export const freetype_py = mkPackage(
  nixRaw`pkgs.python2Packages.freetype-py`,
  "FreeType (high-level Python API)",
);

/**
 * Library that allows your Python tests to travel through time
 */
export const freezegun = mkPackage(
  nixRaw`pkgs.python2Packages.freezegun`,
  "Library that allows your Python tests to travel through time",
);

/**
 * Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers (Python bindings)
 */
export const frida_python = mkPackage(
  nixRaw`pkgs.python2Packages.frida-python`,
  "Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers (Python bindings)",
);

/**
 * Python API for the Frigidaire devices
 */
export const frigidaire = mkPackage(
  nixRaw`pkgs.python2Packages.frigidaire`,
  "Python API for the Frigidaire devices",
);

/**
 * Python AST parser adapter with partial error recovery
 */
export const frilouz = mkPackage(
  nixRaw`pkgs.python2Packages.frilouz`,
  "Python AST parser adapter with partial error recovery",
);

/**
 * Python module to communicate with the AVM Fritz!Box
 */
export const fritzconnection = mkPackage(
  nixRaw`pkgs.python2Packages.fritzconnection`,
  "Python module to communicate with the AVM Fritz!Box",
);

/**
 * Tool to switch the online time of profiles in the AVM Fritz!Box
 */
export const fritzprofiles = mkPackage(
  nixRaw`pkgs.python2Packages.fritzprofiles`,
  "Tool to switch the online time of profiles in the AVM Fritz!Box",
);

/**
 * Module for immutable dictionary
 */
export const frozendict = mkPackage(
  nixRaw`pkgs.python2Packages.frozendict`,
  "Module for immutable dictionary",
);

/**
 * Python module for list-like structure
 */
export const frozenlist = mkPackage(
  nixRaw`pkgs.python2Packages.frozenlist`,
  "Python module for list-like structure",
);

/**
 * Filesystem abstraction
 */
export const fs = mkPackage(
  nixRaw`pkgs.python2Packages.fs`,
  "Filesystem abstraction",
);

/**
 * Amazon S3 filesystem for PyFilesystem2
 */
export const fs_s3fs = mkPackage(
  nixRaw`pkgs.python2Packages.fs-s3fs`,
  "Amazon S3 filesystem for PyFilesystem2",
);

/**
 * An open platform for training, serving, and evaluating large language models. Release repo for Vicuna and Chatbot Arena
 */
export const fschat = mkPackage(
  nixRaw`pkgs.python2Packages.fschat`,
  "An open platform for training, serving, and evaluating large language models. Release repo for Vicuna and Chatbot Arena",
);

/**
 * A specification that Python filesystems should adhere to
 */
export const fsspec = mkPackage(
  nixRaw`pkgs.python2Packages.fsspec`,
  "A specification that Python filesystems should adhere to",
);

/**
 * Fuzzy Self-Tuning PSO global optimization library
 */
export const fst_pso = mkPackage(
  nixRaw`pkgs.python2Packages.fst-pso`,
  "Fuzzy Self-Tuning PSO global optimization library",
);

/**
 * Given Unicode text, make its representation consistent and possibly less broken
 */
export const ftfy = mkPackage(
  nixRaw`pkgs.python2Packages.ftfy`,
  "Given Unicode text, make its representation consistent and possibly less broken",
);

/**
 * High-level FTP client library (virtual file system and more)
 */
export const ftputil = mkPackage(
  nixRaw`pkgs.python2Packages.ftputil`,
  "High-level FTP client library (virtual file system and more)",
);

/**
 * A Cython MeCab wrapper for fast, pythonic Japanese tokenization and morphological analysis
 */
export const fugashi = mkPackage(
  nixRaw`pkgs.python2Packages.fugashi`,
  "A Cython MeCab wrapper for fast, pythonic Japanese tokenization and morphological analysis",
);

/**
 * Allows you to specify timeouts when calling any existing function. Also provides support for stoppable-threads
 */
export const func_timeout = mkPackage(
  nixRaw`pkgs.python2Packages.func-timeout`,
  "Allows you to specify timeouts when calling any existing function. Also provides support for stoppable-threads",
);

/**
 * Recursive descent parsing library based on functional combinators
 */
export const funcparserlib = mkPackage(
  nixRaw`pkgs.python2Packages.funcparserlib`,
  "Recursive descent parsing library based on functional combinators",
);

/**
 * Python function signatures from PEP362 for Python 2.6, 2.7 and 3.2+
 */
export const funcsigs = mkPackage(
  nixRaw`pkgs.python2Packages.funcsigs`,
  "Python function signatures from PEP362 for Python 2.6, 2.7 and 3.2+",
);

/**
 * The Python module for Functiontrace
 */
export const functiontrace = mkPackage(
  nixRaw`pkgs.python2Packages.functiontrace`,
  "The Python module for Functiontrace",
);

/**
 * This is a backport of the functools standard library module from
 */
export const functools32 = mkPackage(
  nixRaw`pkgs.python2Packages.functools32`,
  "This is a backport of the functools standard library module from",
);

/**
 * Collection of fancy functional tools focused on practicality
 */
export const funcy = mkPackage(
  nixRaw`pkgs.python2Packages.funcy`,
  "Collection of fancy functional tools focused on practicality",
);

/**
 * Functional tensors for probabilistic programming
 */
export const funsor = mkPackage(
  nixRaw`pkgs.python2Packages.funsor`,
  "Functional tensors for probabilistic programming",
);

/**
 * Python library that makes parsing and manipulating URLs easy
 */
export const furl = mkPackage(
  nixRaw`pkgs.python2Packages.furl`,
  "Python library that makes parsing and manipulating URLs easy",
);

/**
 * A clean customizable documentation theme for Sphinx
 */
export const furo = mkPackage(
  nixRaw`pkgs.python2Packages.furo`,
  "A clean customizable documentation theme for Sphinx",
);

/**
 * Python bindings for FUSE
 */
export const fuse = mkPackage(
  nixRaw`pkgs.python2Packages.fuse`,
  "Python bindings for FUSE",
);

/**
 * Simple ctypes bindings for FUSE
 */
export const fusepy = mkPackage(
  nixRaw`pkgs.python2Packages.fusepy`,
  "Simple ctypes bindings for FUSE",
);

/**
 * Clean single-source support for Python 3 and 2
 */
export const future = mkPackage(
  nixRaw`pkgs.python2Packages.future`,
  "Clean single-source support for Python 3 and 2",
);

/**
 * Use generic type hints and new union syntax `|` with python 3.6+
 */
export const future_typing = mkPackage(
  nixRaw`pkgs.python2Packages.future-typing`,
  "Use generic type hints and new union syntax `|` with python 3.6+",
);

/**
 * Backport of the concurrent.futures package from Python 3.2
 */
export const futures = mkPackage(
  nixRaw`pkgs.python2Packages.futures`,
  "Backport of the concurrent.futures package from Python 3.2",
);

/**
 * Fuzzy Finder implemented in Python
 */
export const fuzzyfinder = mkPackage(
  nixRaw`pkgs.python2Packages.fuzzyfinder`,
  "Fuzzy Finder implemented in Python",
);

/**
 * Library for Fuzzy Topic Models
 */
export const fuzzytm = mkPackage(
  nixRaw`pkgs.python2Packages.fuzzytm`,
  "Library for Fuzzy Topic Models",
);

/**
 * Fuzzy string matching for Python
 */
export const fuzzywuzzy = mkPackage(
  nixRaw`pkgs.python2Packages.fuzzywuzzy`,
  "Fuzzy string matching for Python",
);

/**
 * Collection of common code that's shared among different research projects in FAIR computer vision team
 */
export const fvcore = mkPackage(
  nixRaw`pkgs.python2Packages.fvcore`,
  "Collection of common code that's shared among different research projects in FAIR computer vision team",
);

/**
 * File Versioning System with hash comparison and data storage to create unlinked states that can be deleted
 */
export const fvs = mkPackage(
  nixRaw`pkgs.python2Packages.fvs`,
  "File Versioning System with hash comparison and data storage to create unlinked states that can be deleted",
);

/**
 * Chip support package for Cypress EZ-USB FX2 series microcontrollers
 */
export const fx2 = mkPackage(
  nixRaw`pkgs.python2Packages.fx2`,
  "Chip support package for Cypress EZ-USB FX2 series microcontrollers",
);

/**
 * Cross-platform g2p for Korean
 */
export const g2pkk = mkPackage(
  nixRaw`pkgs.python2Packages.g2pkk`,
  "Cross-platform g2p for Korean",
);

/**
 * GPU Accelerated Library for Analysing Radio Interferometer Observations
 */
export const galario = mkPackage(
  nixRaw`pkgs.python2Packages.galario`,
  "GPU Accelerated Library for Analysing Radio Interferometer Observations",
);

/**
 * Python package that extends NumPy arrays to operate over finite fields
 */
export const galois = mkPackage(
  nixRaw`pkgs.python2Packages.galois`,
  "Python package that extends NumPy arrays to operate over finite fields",
);

/**
 * Collection of gambling classes/tools
 */
export const gamble = mkPackage(
  nixRaw`pkgs.python2Packages.gamble`,
  "Collection of gambling classes/tools",
);

/**
 * GTK+ based diagramming widget
 */
export const gaphas = mkPackage(
  nixRaw`pkgs.python2Packages.gaphas`,
  "GTK+ based diagramming widget",
);

/**
 * Garmin Connect Python API wrapper
 */
export const garminconnect = mkPackage(
  nixRaw`pkgs.python2Packages.garminconnect`,
  "Garmin Connect Python API wrapper",
);

/**
 * Python module to interact with Garmin Connect
 */
export const garminconnect_aio = mkPackage(
  nixRaw`pkgs.python2Packages.garminconnect-aio`,
  "Python module to interact with Garmin Connect",
);

/**
 * Garmin SSO auth and connect client
 */
export const garth = mkPackage(
  nixRaw`pkgs.python2Packages.garth`,
  "Garmin SSO auth and connect client",
);

/**
 * Module for interacting with Google Assistant API via text
 */
export const gassist_text = mkPackage(
  nixRaw`pkgs.python2Packages.gassist-text`,
  "Module for interacting with Google Assistant API via text",
);

/**
 * Compatibility layer between the AST of various Python versions
 */
export const gast = mkPackage(
  nixRaw`pkgs.python2Packages.gast`,
  "Compatibility layer between the AST of various Python versions",
);

/**
 * Bluetooth (Generic Attribute Profile) GATT SDK for Python
 */
export const gatt = mkPackage(
  nixRaw`pkgs.python2Packages.gatt`,
  "Bluetooth (Generic Attribute Profile) GATT SDK for Python",
);

/**
 * Python library to use the GATT Protocol for Bluetooth LE devices
 */
export const gattlib = mkPackage(
  nixRaw`pkgs.python2Packages.gattlib`,
  "Python library to use the GATT Protocol for Bluetooth LE devices",
);

/**
 * A Python interface to gb-io, a fast GenBank parser written in Rust
 */
export const gb_io = mkPackage(
  nixRaw`pkgs.python2Packages.gb-io`,
  "A Python interface to gb-io, a fast GenBank parser written in Rust",
);

/**
 * Python bindings for libgbinder
 */
export const gbinder_python = mkPackage(
  nixRaw`pkgs.python2Packages.gbinder-python`,
  "Python bindings for libgbinder",
);

/**
 * GLib implementation of PEP 3156
 */
export const gbulb = mkPackage(
  nixRaw`pkgs.python2Packages.gbulb`,
  "GLib implementation of PEP 3156",
);

/**
 * Library for syncing Google Calendar to local storage
 */
export const gcal_sync = mkPackage(
  nixRaw`pkgs.python2Packages.gcal-sync`,
  "Library for syncing Google Calendar to local storage",
);

/**
 * Python script for summarizing gcov data
 */
export const gcovr = mkPackage(
  nixRaw`pkgs.python2Packages.gcovr`,
  "Python script for summarizing gcov data",
);

/**
 * Auth plugin allowing use the use of OAuth 2.0 credentials for Google Cloud Storage
 */
export const gcs_oauth2_boto_plugin = mkPackage(
  nixRaw`pkgs.python2Packages.gcs-oauth2-boto-plugin`,
  "Auth plugin allowing use the use of OAuth 2.0 credentials for Google Cloud Storage",
);

/**
 * Pythonic wrapper for the Google Calendar API
 */
export const gcsa = mkPackage(
  nixRaw`pkgs.python2Packages.gcsa`,
  "Pythonic wrapper for the Google Calendar API",
);

/**
 * Convenient Filesystem interface over GCS
 */
export const gcsfs = mkPackage(
  nixRaw`pkgs.python2Packages.gcsfs`,
  "Convenient Filesystem interface over GCS",
);

/**
 * Translator library for raster geospatial data formats
 */
export const gdal = mkPackage(
  nixRaw`pkgs.python2Packages.gdal`,
  "Translator library for raster geospatial data formats",
);

/**
 * Python client library for Google data APIs
 */
export const gdata = mkPackage(
  nixRaw`pkgs.python2Packages.gdata`,
  "Python client library for Google data APIs",
);

/**
 * The grassroots cross-platform DICOM implementation
 */
export const gdcm = mkPackage(
  nixRaw`pkgs.python2Packages.gdcm`,
  "The grassroots cross-platform DICOM implementation",
);

/**
 * A CLI tool for downloading large files from Google Drive
 */
export const gdown = mkPackage(
  nixRaw`pkgs.python2Packages.gdown`,
  "A CLI tool for downloading large files from Google Drive",
);

/**
 * Python implementation of Ed25519 group elements and operations
 */
export const ge25519 = mkPackage(
  nixRaw`pkgs.python2Packages.ge25519`,
  "Python implementation of Ed25519 group elements and operations",
);

/**
 * A toolkit for the simulation of the passage of particles through matter
 */
export const geant4 = mkPackage(
  nixRaw`pkgs.python2Packages.geant4`,
  "A toolkit for the simulation of the passage of particles through matter",
);

/**
 * Work with Evernote from command line
 */
export const geeknote = mkPackage(
  nixRaw`pkgs.python2Packages.geeknote`,
  "Work with Evernote from command line",
);

/**
 * Python SDK for GE smart appliances
 */
export const gehomesdk = mkPackage(
  nixRaw`pkgs.python2Packages.gehomesdk`,
  "Python SDK for GE smart appliances",
);

/**
 * Python SDK for GE smart appliances
 */
export const gekitchen = mkPackage(
  nixRaw`pkgs.python2Packages.gekitchen`,
  "Python SDK for GE smart appliances",
);

/**
 * A library to parse Ruby Gemfile, .gemspec and Cocoapod .podspec file using Python
 */
export const gemfileparser = mkPackage(
  nixRaw`pkgs.python2Packages.gemfileparser`,
  "A library to parse Ruby Gemfile, .gemspec and Cocoapod .podspec file using Python",
);

/**
 * Library to parse Rubygem gemspec and Gemfile files
 */
export const gemfileparser2 = mkPackage(
  nixRaw`pkgs.python2Packages.gemfileparser2`,
  "Library to parse Rubygem gemspec and Gemfile files",
);

/**
 * Generate Anki decks programmatically
 */
export const genanki = mkPackage(
  nixRaw`pkgs.python2Packages.genanki`,
  "Generate Anki decks programmatically",
);

/**
 * Generic programming (Multiple dispatch) library for Python
 */
export const generic = mkPackage(
  nixRaw`pkgs.python2Packages.generic`,
  "Generic programming (Multiple dispatch) library for Python",
);

/**
 * Module to interact with Genius Hub systems
 */
export const geniushub_client = mkPackage(
  nixRaw`pkgs.python2Packages.geniushub-client`,
  "Module to interact with Genius Hub systems",
);

/**
 * Genomes and build BLAST/Bowtie indexes in Python
 */
export const genome_collector = mkPackage(
  nixRaw`pkgs.python2Packages.genome-collector`,
  "Genomes and build BLAST/Bowtie indexes in Python",
);

/**
 * C/C++ source generation from an AST
 */
export const genpy = mkPackage(
  nixRaw`pkgs.python2Packages.genpy`,
  "C/C++ source generation from an AST",
);

/**
 * Python components for parsing HTML, XML and other textual content
 */
export const genshi = mkPackage(
  nixRaw`pkgs.python2Packages.genshi`,
  "Python components for parsing HTML, XML and other textual content",
);

/**
 * Topic-modelling library
 */
export const gensim = mkPackage(
  nixRaw`pkgs.python2Packages.gensim`,
  "Topic-modelling library",
);

/**
 * Tools for generators, generator functions, and generator-based coroutines
 */
export const gentools = mkPackage(
  nixRaw`pkgs.python2Packages.gentools`,
  "Tools for generators, generator functions, and generator-based coroutines",
);

/**
 * Automatically generated zsh completion function for Python's option parser modules
 */
export const genzshcomp = mkPackage(
  nixRaw`pkgs.python2Packages.genzshcomp`,
  "Automatically generated zsh completion function for Python's option parser modules",
);

/**
 * Toolkit for working with spatial databases
 */
export const geoalchemy2 = mkPackage(
  nixRaw`pkgs.python2Packages.geoalchemy2`,
  "Toolkit for working with spatial databases",
);

/**
 * Python API to control the Geocaching API
 */
export const geocachingapi = mkPackage(
  nixRaw`pkgs.python2Packages.geocachingapi`,
  "Python API to control the Geocaching API",
);

/**
 * Algorithms for geodesics (Karney, 2013) for solving the direct and inverse problems for an ellipsoid of revolution
 */
export const geographiclib = mkPackage(
  nixRaw`pkgs.python2Packages.geographiclib`,
  "Algorithms for geodesics (Karney, 2013) for solving the direct and inverse problems for an ellipsoid of revolution",
);

/**
 * MaxMind GeoIP Legacy Database - Python API
 */
export const geoip = mkPackage(
  nixRaw`pkgs.python2Packages.geoip`,
  "MaxMind GeoIP Legacy Database - Python API",
);

/**
 * GeoIP2 webservice client and database reader
 */
export const geoip2 = mkPackage(
  nixRaw`pkgs.python2Packages.geoip2`,
  "GeoIP2 webservice client and database reader",
);

/**
 * Python bindings and utilities for GeoJSON
 */
export const geojson = mkPackage(
  nixRaw`pkgs.python2Packages.geojson`,
  "Python bindings and utilities for GeoJSON",
);

/**
 * Python module for convenient access to GeoJSON feeds
 */
export const geojson_client = mkPackage(
  nixRaw`pkgs.python2Packages.geojson-client`,
  "Python module for convenient access to GeoJSON feeds",
);

/**
 * Convert GeoJSON to WKT/WKB (Well-Known Text/Binary) and vice versa
 */
export const geomet = mkPackage(
  nixRaw`pkgs.python2Packages.geomet`,
  "Convert GeoJSON to WKT/WKB (Well-Known Text/Binary) and vice versa",
);

/**
 * Geometry optimization code for molecular structures
 */
export const geometric = mkPackage(
  nixRaw`pkgs.python2Packages.geometric`,
  "Geometry optimization code for molecular structures",
);

/**
 * Python geospatial data analysis framework
 */
export const geopandas = mkPackage(
  nixRaw`pkgs.python2Packages.geopandas`,
  "Python geospatial data analysis framework",
);

/**
 * Python Geocoding Toolbox
 */
export const geopy = mkPackage(
  nixRaw`pkgs.python2Packages.geopy`,
  "Python Geocoding Toolbox",
);

/**
 * Python library for accessing GeoRSS feeds
 */
export const georss_client = mkPackage(
  nixRaw`pkgs.python2Packages.georss-client`,
  "Python library for accessing GeoRSS feeds",
);

/**
 * Python library for accessing generic GeoRSS feeds
 */
export const georss_generic_client = mkPackage(
  nixRaw`pkgs.python2Packages.georss-generic-client`,
  "Python library for accessing generic GeoRSS feeds",
);

/**
 * Python library for accessing the IGN Sismologia GeoRSS feed
 */
export const georss_ign_sismologia_client = mkPackage(
  nixRaw`pkgs.python2Packages.georss-ign-sismologia-client`,
  "Python library for accessing the IGN Sismologia GeoRSS feed",
);

/**
 * Python library for accessing the INGV Centro Nazionale Terremoti GeoRSS feed
 */
export const georss_ingv_centro_nazionale_terremoti_client = mkPackage(
  nixRaw`pkgs.python2Packages.georss-ingv-centro-nazionale-terremoti-client`,
  "Python library for accessing the INGV Centro Nazionale Terremoti GeoRSS feed",
);

/**
 * Python library for accessing Natural Resources Canada Earthquakes feed
 */
export const georss_nrcan_earthquakes_client = mkPackage(
  nixRaw`pkgs.python2Packages.georss-nrcan-earthquakes-client`,
  "Python library for accessing Natural Resources Canada Earthquakes feed",
);

/**
 * Python library for accessing Queensland Bushfire Alert feed
 */
export const georss_qld_bushfire_alert_client = mkPackage(
  nixRaw`pkgs.python2Packages.georss-qld-bushfire-alert-client`,
  "Python library for accessing Queensland Bushfire Alert feed",
);

/**
 * Python library for accessing Tasmania Fire Service Incidents feed
 */
export const georss_tfs_incidents_client = mkPackage(
  nixRaw`pkgs.python2Packages.georss-tfs-incidents-client`,
  "Python library for accessing Tasmania Fire Service Incidents feed",
);

/**
 * Python library for accessing WA Department of Fire and Emergency Services (DFES) feed
 */
export const georss_wa_dfes_client = mkPackage(
  nixRaw`pkgs.python2Packages.georss-wa-dfes-client`,
  "Python library for accessing WA Department of Fire and Emergency Services (DFES) feed",
);

/**
 * Get video properties
 */
export const get_video_properties = mkPackage(
  nixRaw`pkgs.python2Packages.get-video-properties`,
  "Get video properties",
);

/**
 * Get and save images from jump web viewer
 */
export const getjump = mkPackage(
  nixRaw`pkgs.python2Packages.getjump`,
  "Get and save images from jump web viewer",
);

/**
 * Read single characters and key-strokes
 */
export const getkey = mkPackage(
  nixRaw`pkgs.python2Packages.getkey`,
  "Read single characters and key-strokes",
);

/**
 * Python package to get the MAC address of network interfaces and hosts on the local network
 */
export const getmac = mkPackage(
  nixRaw`pkgs.python2Packages.getmac`,
  "Python package to get the MAC address of network interfaces and hosts on the local network",
);

/**
 * Coroutine-based networking library
 */
export const gevent = mkPackage(
  nixRaw`pkgs.python2Packages.gevent`,
  "Coroutine-based networking library",
);

/**
 * SocketIO server based on the Gevent pywsgi server
 */
export const gevent_socketio = mkPackage(
  nixRaw`pkgs.python2Packages.gevent-socketio`,
  "SocketIO server based on the Gevent pywsgi server",
);

/**
 * Websocket handler for the gevent pywsgi server
 */
export const gevent_websocket = mkPackage(
  nixRaw`pkgs.python2Packages.gevent-websocket`,
  "Websocket handler for the gevent pywsgi server",
);

/**
 * High performance, concurrent HTTP client library using gevent
 */
export const geventhttpclient = mkPackage(
  nixRaw`pkgs.python2Packages.geventhttpclient`,
  "High performance, concurrent HTTP client library using gevent",
);

/**
 * A module for command line handling, similar to Google's gflags for C++
 */
export const gflags = mkPackage(
  nixRaw`pkgs.python2Packages.gflags`,
  "A module for command line handling, similar to Google's gflags for C++",
);

/**
 * Python interface to GitHub's API
 */
export const ghapi = mkPackage(
  nixRaw`pkgs.python2Packages.ghapi`,
  "Python interface to GitHub's API",
);

/**
 * Generate Github-style HTML for unified diffs.
 */
export const ghdiff = mkPackage(
  nixRaw`pkgs.python2Packages.ghdiff`,
  "Generate Github-style HTML for unified diffs.",
);

/**
 * Copy your docs directly to the gh-pages branch
 */
export const ghp_import = mkPackage(
  nixRaw`pkgs.python2Packages.ghp-import`,
  "Copy your docs directly to the gh-pages branch",
);

/**
 * Python module and CLI tool for GitHub repo statistics
 */
export const ghrepo_stats = mkPackage(
  nixRaw`pkgs.python2Packages.ghrepo-stats`,
  "Python module and CLI tool for GitHub repo statistics",
);

/**
 * Python module to detect gibberish strings
 */
export const gibberish_detector = mkPackage(
  nixRaw`pkgs.python2Packages.gibberish-detector`,
  "Python module to detect gibberish strings",
);

/**
 * An async GitHub API library
 */
export const gidgethub = mkPackage(
  nixRaw`pkgs.python2Packages.gidgethub`,
  "An async GitHub API library",
);

/**
 * Gin provides a lightweight configuration framework for Python, based on dependency injection.
 */
export const gin_config = mkPackage(
  nixRaw`pkgs.python2Packages.gin-config`,
  "Gin provides a lightweight configuration framework for Python, based on dependency injection.",
);

/**
 * Python client for getting air quality data from GIOS
 */
export const gios = mkPackage(
  nixRaw`pkgs.python2Packages.gios`,
  "Python client for getting air quality data from GIOS",
);

/**
 * gevent-cooperative child processes and IPC
 */
export const gipc = mkPackage(
  nixRaw`pkgs.python2Packages.gipc`,
  "gevent-cooperative child processes and IPC",
);

/**
 * A Python based GitHub GIST management tool
 */
export const gistyc = mkPackage(
  nixRaw`pkgs.python2Packages.gistyc`,
  "A Python based GitHub GIST management tool",
);

/**
 * Call git-annex commands from Python
 */
export const git_annex_adapter = mkPackage(
  nixRaw`pkgs.python2Packages.git-annex-adapter`,
  "Call git-annex commands from Python",
);

/**
 * Quickly rewrite git repository history
 */
export const git_filter_repo = mkPackage(
  nixRaw`pkgs.python2Packages.git-filter-repo`,
  "Quickly rewrite git repository history",
);

/**
 * Efficiently update, split, and rearrange git commits
 */
export const git_revise = mkPackage(
  nixRaw`pkgs.python2Packages.git-revise`,
  "Efficiently update, split, and rearrange git commits",
);

/**
 * A command-line tool that helps you clean up Git branches
 */
export const git_sweep = mkPackage(
  nixRaw`pkgs.python2Packages.git-sweep`,
  "A command-line tool that helps you clean up Git branches",
);

/**
 * A simple GIT URL parser
 */
export const git_url_parse = mkPackage(
  nixRaw`pkgs.python2Packages.git-url-parse`,
  "A simple GIT URL parser",
);

/**
 * Git Object Database
 */
export const gitdb = mkPackage(
  nixRaw`pkgs.python2Packages.gitdb`,
  "Git Object Database",
);

/**
 * A wrapper for the GitHub API written in python
 */
export const github3_py = mkPackage(
  nixRaw`pkgs.python2Packages.github3_py`,
  "A wrapper for the GitHub API written in python",
);

/**
 * Save data from GitHub to a SQLite database
 */
export const github_to_sqlite = mkPackage(
  nixRaw`pkgs.python2Packages.github-to-sqlite`,
  "Save data from GitHub to a SQLite database",
);

/**
 * A framework for writing webhooks for GitHub
 */
export const github_webhook = mkPackage(
  nixRaw`pkgs.python2Packages.github-webhook`,
  "A framework for writing webhooks for GitHub",
);

/**
 * A spec-compliant gitignore parser
 */
export const gitignore_parser = mkPackage(
  nixRaw`pkgs.python2Packages.gitignore-parser`,
  "A spec-compliant gitignore parser",
);

/**
 * Easy python module for creating git-style subcommand handling
 */
export const gitlike_commands = mkPackage(
  nixRaw`pkgs.python2Packages.gitlike-commands`,
  "Easy python module for creating git-style subcommand handling",
);

/**
 * Python Git Library
 */
export const gitpython = mkPackage(
  nixRaw`pkgs.python2Packages.gitpython`,
  "Python Git Library",
);

/**
 * Multi-Language Vulkan/GL/GLES/EGL/GLX/WGL Loader-Generator based on the official specs
 */
export const glad = mkPackage(
  nixRaw`pkgs.python2Packages.glad`,
  "Multi-Language Vulkan/GL/GLES/EGL/GLX/WGL Loader-Generator based on the official specs",
);

/**
 * Multi-Language GL/GLES/EGL/GLX/WGL Loader-Generator based on the official specifications
 */
export const glad2 = mkPackage(
  nixRaw`pkgs.python2Packages.glad2`,
  "Multi-Language GL/GLES/EGL/GLX/WGL Loader-Generator based on the official specifications",
);

/**
 * Python API for interacting with Glances
 */
export const glances_api = mkPackage(
  nixRaw`pkgs.python2Packages.glances-api`,
  "Python API for interacting with Glances",
);

/**
 * OpenGL implementation for ModernGL
 */
export const glcontext = mkPackage(
  nixRaw`pkgs.python2Packages.glcontext`,
  "OpenGL implementation for ModernGL",
);

/**
 * Tools for parsing the metadata for Mozilla's glean telemetry SDK
 */
export const glean_parser = mkPackage(
  nixRaw`pkgs.python2Packages.glean-parser`,
  "Tools for parsing the metadata for Mozilla's glean telemetry SDK",
);

/**
 * Telemetry client libraries and are a part of the Glean project
 */
export const glean_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.glean-sdk`,
  "Telemetry client libraries and are a part of the Glean project",
);

/**
 * Python bindings for GLFW
 */
export const glfw = mkPackage(
  nixRaw`pkgs.python2Packages.glfw`,
  "Python bindings for GLFW",
);

/**
 * Version of the glob module that can capture patterns and supports recursive wildcards
 */
export const glob2 = mkPackage(
  nixRaw`pkgs.python2Packages.glob2`,
  "Version of the glob module that can capture patterns and supports recursive wildcards",
);

/**
 * A python glob-like regular expression generation library.
 */
export const globre = mkPackage(
  nixRaw`pkgs.python2Packages.globre`,
  "A python glob-like regular expression generation library.",
);

/**
 * Interface to Globus REST APIs, including the Transfer API and the Globus Auth API
 */
export const globus_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.globus-sdk`,
  "Interface to Globus REST APIs, including the Transfer API and the Globus Auth API",
);

/**
 * Restructuring data, the Python way
 */
export const glom = mkPackage(
  nixRaw`pkgs.python2Packages.glom`,
  "Restructuring data, the Python way",
);

/**
 * Tools for accessing JPEG2000 files
 */
export const glymur = mkPackage(
  nixRaw`pkgs.python2Packages.glymur`,
  "Tools for accessing JPEG2000 files",
);

/**
 * Bridge from Glyphs source files (.glyphs) to UFOs and Designspace files via defcon and designspaceLib
 */
export const glyphslib = mkPackage(
  nixRaw`pkgs.python2Packages.glyphslib`,
  "Bridge from Glyphs source files (.glyphs) to UFOs and Designspace files via defcon and designspaceLib",
);

/**
 * GMP or MPIR interface to Python 2.4+ and 3.x
 */
export const gmpy = mkPackage(
  nixRaw`pkgs.python2Packages.gmpy`,
  "GMP or MPIR interface to Python 2.4+ and 3.x",
);

/**
 * GMP/MPIR, MPFR, and MPC interface to Python 2.6+ and 3.x
 */
export const gmpy2 = mkPackage(
  nixRaw`pkgs.python2Packages.gmpy2`,
  "GMP/MPIR, MPFR, and MPC interface to Python 2.6+ and 3.x",
);

/**
 * A three-dimensional finite element mesh generator
 */
export const gmsh = mkPackage(
  nixRaw`pkgs.python2Packages.gmsh`,
  "A three-dimensional finite element mesh generator",
);

/**
 * Python library for working with the Growl Notification Transport Protocol
 */
export const gntp = mkPackage(
  nixRaw`pkgs.python2Packages.gntp`,
  "Python library for working with the Growl Notification Transport Protocol",
);

/**
 * The standard Python readline extension statically linked against the GNU readline library
 */
export const gnureadline = mkPackage(
  nixRaw`pkgs.python2Packages.gnureadline`,
  "The standard Python readline extension statically linked against the GNU readline library",
);

/**
 * Goal Zero Yeti REST Api Library
 */
export const goalzero = mkPackage(
  nixRaw`pkgs.python2Packages.goalzero`,
  "Goal Zero Yeti REST Api Library",
);

/**
 * A client library for the GoCardless Pro API
 */
export const gocardless_pro = mkPackage(
  nixRaw`pkgs.python2Packages.gocardless-pro`,
  "A client library for the GoCardless Pro API",
);

/**
 * Access your Google contacts from the command line
 */
export const goobook = mkPackage(
  nixRaw`pkgs.python2Packages.goobook`,
  "Access your Google contacts from the command line",
);

/**
 * A calendar widget for GTK using PyGoocanvas
 */
export const goocalendar = mkPackage(
  nixRaw`pkgs.python2Packages.goocalendar`,
  "A calendar widget for GTK using PyGoocanvas",
);

/**
 * Python library for connecting to GoodWe inverter
 */
export const goodwe = mkPackage(
  nixRaw`pkgs.python2Packages.goodwe`,
  "Python library for connecting to GoodWe inverter",
);

/**
 * Python bindings to the Google search engine
 */
export const google = mkPackage(
  nixRaw`pkgs.python2Packages.google`,
  "Python bindings to the Google search engine",
);

/**
 * Google Ai Generativelanguage API client library
 */
export const google_ai_generativelanguage = mkPackage(
  nixRaw`pkgs.python2Packages.google-ai-generativelanguage`,
  "Google Ai Generativelanguage API client library",
);

/**
 * Core Library for Google Client Libraries
 */
export const google_api_core = mkPackage(
  nixRaw`pkgs.python2Packages.google-api-core`,
  "Core Library for Google Client Libraries",
);

/**
 * The official Python client library for Google's discovery based APIs
 */
export const google_api_python_client = mkPackage(
  nixRaw`pkgs.python2Packages.google-api-python-client`,
  "The official Python client library for Google's discovery based APIs",
);

/**
 * Google Auth Python Library
 */
export const google_auth = mkPackage(
  nixRaw`pkgs.python2Packages.google-auth`,
  "Google Auth Python Library",
);

/**
 * Google Authentication Library: httplib2 transport
 */
export const google_auth_httplib2 = mkPackage(
  nixRaw`pkgs.python2Packages.google-auth-httplib2`,
  "Google Authentication Library: httplib2 transport",
);

/**
 * Google Authentication Library: oauthlib integration
 */
export const google_auth_oauthlib = mkPackage(
  nixRaw`pkgs.python2Packages.google-auth-oauthlib`,
  "Google Authentication Library: oauthlib integration",
);

/**
 * Protobufs for Google Access Context Manager
 */
export const google_cloud_access_context_manager = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-access-context-manager`,
  "Protobufs for Google Access Context Manager",
);

/**
 * Appengine logging client library
 */
export const google_cloud_appengine_logging = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-appengine-logging`,
  "Appengine logging client library",
);

/**
 * Google Cloud Artifact Registry API client library
 */
export const google_cloud_artifact_registry = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-artifact-registry`,
  "Google Cloud Artifact Registry API client library",
);

/**
 * Python Client for Google Cloud Asset API
 */
export const google_cloud_asset = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-asset`,
  "Python Client for Google Cloud Asset API",
);

/**
 * Google Cloud Audit Protos
 */
export const google_cloud_audit_log = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-audit-log`,
  "Google Cloud Audit Protos",
);

/**
 * Cloud AutoML API client library
 */
export const google_cloud_automl = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-automl`,
  "Cloud AutoML API client library",
);

/**
 * BigQuery Data Transfer API client library
 */
export const google_cloud_bigquery_datatransfer = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-bigquery-datatransfer`,
  "BigQuery Data Transfer API client library",
);

/**
 * Bigquery logging client library
 */
export const google_cloud_bigquery_logging = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-bigquery-logging`,
  "Bigquery logging client library",
);

/**
 * BigQuery Storage API API client library
 */
export const google_cloud_bigquery_storage = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-bigquery-storage`,
  "BigQuery Storage API API client library",
);

/**
 * Google Cloud Bigtable API client library
 */
export const google_cloud_bigtable = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-bigtable`,
  "Google Cloud Bigtable API client library",
);

/**
 * API Client library for Google Cloud Compute
 */
export const google_cloud_compute = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-compute`,
  "API Client library for Google Cloud Compute",
);

/**
 * Google Container Engine API client library
 */
export const google_cloud_container = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-container`,
  "Google Container Engine API client library",
);

/**
 * API Client library for Google Cloud: Core Helpers
 */
export const google_cloud_core = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-core`,
  "API Client library for Google Cloud: Core Helpers",
);

/**
 * Google Cloud Data Catalog API API client library
 */
export const google_cloud_datacatalog = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-datacatalog`,
  "Google Cloud Data Catalog API API client library",
);

/**
 * Google Cloud Dataproc API client library
 */
export const google_cloud_dataproc = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-dataproc`,
  "Google Cloud Dataproc API client library",
);

/**
 * Google Cloud Datastore API client library
 */
export const google_cloud_datastore = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-datastore`,
  "Google Cloud Datastore API client library",
);

/**
 * Cloud Data Loss Prevention (DLP) API API client library
 */
export const google_cloud_dlp = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-dlp`,
  "Cloud Data Loss Prevention (DLP) API API client library",
);

/**
 * Google Cloud DNS API client library
 */
export const google_cloud_dns = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-dns`,
  "Google Cloud DNS API client library",
);

/**
 * Stackdriver Error Reporting API client library
 */
export const google_cloud_error_reporting = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-error-reporting`,
  "Stackdriver Error Reporting API client library",
);

/**
 * Google Cloud Firestore API client library
 */
export const google_cloud_firestore = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-firestore`,
  "Google Cloud Firestore API client library",
);

/**
 * IAM Service Account Credentials API client library
 */
export const google_cloud_iam = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-iam`,
  "IAM Service Account Credentials API client library",
);

/**
 * IAM Service Logging client library
 */
export const google_cloud_iam_logging = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-iam-logging`,
  "IAM Service Logging client library",
);

/**
 * Cloud IoT API API client library
 */
export const google_cloud_iot = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-iot`,
  "Cloud IoT API API client library",
);

/**
 * Cloud Key Management Service (KMS) API API client library
 */
export const google_cloud_kms = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-kms`,
  "Cloud Key Management Service (KMS) API API client library",
);

/**
 * Google Cloud Natural Language API client library
 */
export const google_cloud_language = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-language`,
  "Google Cloud Natural Language API client library",
);

/**
 * Stackdriver Logging API client library
 */
export const google_cloud_logging = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-logging`,
  "Stackdriver Logging API client library",
);

/**
 * Stackdriver Monitoring API client library
 */
export const google_cloud_monitoring = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-monitoring`,
  "Stackdriver Monitoring API client library",
);

/**
 * Protobufs for Google Cloud Organization Policy
 */
export const google_cloud_org_policy = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-org-policy`,
  "Protobufs for Google Cloud Organization Policy",
);

/**
 * Google Cloud OS Config API client library
 */
export const google_cloud_os_config = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-os-config`,
  "Google Cloud OS Config API client library",
);

/**
 * Google Cloud Pub/Sub API client library
 */
export const google_cloud_pubsub = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-pubsub`,
  "Google Cloud Pub/Sub API client library",
);

/**
 * Google Cloud Memorystore for Redis API client library
 */
export const google_cloud_redis = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-redis`,
  "Google Cloud Memorystore for Redis API client library",
);

/**
 * Google Cloud Resource Manager API client library
 */
export const google_cloud_resource_manager = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-resource-manager`,
  "Google Cloud Resource Manager API client library",
);

/**
 * Google Cloud RuntimeConfig API client library
 */
export const google_cloud_runtimeconfig = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-runtimeconfig`,
  "Google Cloud RuntimeConfig API client library",
);

/**
 * Secret Manager API API client library
 */
export const google_cloud_secret_manager = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-secret-manager`,
  "Secret Manager API API client library",
);

/**
 * Cloud Security Command Center API API client library
 */
export const google_cloud_securitycenter = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-securitycenter`,
  "Cloud Security Command Center API API client library",
);

/**
 * Cloud Spanner API client library
 */
export const google_cloud_spanner = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-spanner`,
  "Cloud Spanner API client library",
);

/**
 * Google Cloud Speech API client library
 */
export const google_cloud_speech = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-speech`,
  "Google Cloud Speech API client library",
);

/**
 * Google Cloud Storage API client library
 */
export const google_cloud_storage = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-storage`,
  "Google Cloud Storage API client library",
);

/**
 * Cloud Tasks API API client library
 */
export const google_cloud_tasks = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-tasks`,
  "Cloud Tasks API API client library",
);

/**
 * System test utilities for google-cloud-python
 */
export const google_cloud_testutils = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-testutils`,
  "System test utilities for google-cloud-python",
);

/**
 * Google Cloud Text-to-Speech API client library
 */
export const google_cloud_texttospeech = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-texttospeech`,
  "Google Cloud Text-to-Speech API client library",
);

/**
 * Cloud Trace API client library
 */
export const google_cloud_trace = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-trace`,
  "Cloud Trace API client library",
);

/**
 * Google Cloud Translation API client library
 */
export const google_cloud_translate = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-translate`,
  "Google Cloud Translation API client library",
);

/**
 * Google Cloud Video Intelligence API client library
 */
export const google_cloud_videointelligence = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-videointelligence`,
  "Google Cloud Video Intelligence API client library",
);

/**
 * Cloud Vision API API client library
 */
export const google_cloud_vision = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-vision`,
  "Cloud Vision API API client library",
);

/**
 * Google Cloud Web Security Scanner API client library
 */
export const google_cloud_websecurityscanner = mkPackage(
  nixRaw`pkgs.python2Packages.google-cloud-websecurityscanner`,
  "Google Cloud Web Security Scanner API client library",
);

/**
 * Google Compute Engine tools and services
 */
export const google_compute_engine = mkPackage(
  nixRaw`pkgs.python2Packages.google-compute-engine`,
  "Google Compute Engine tools and services",
);

/**
 * Wrapper the google/crc32c hardware-based implementation of the CRC32C hashing algorithm
 */
export const google_crc32c = mkPackage(
  nixRaw`pkgs.python2Packages.google-crc32c`,
  "Wrapper the google/crc32c hardware-based implementation of the CRC32C hashing algorithm",
);

/**
 * Python client library for Google's large language model PaLM API
 */
export const google_generativeai = mkPackage(
  nixRaw`pkgs.python2Packages.google-generativeai`,
  "Python client library for Google's large language model PaLM API",
);

/**
 * Google's i18n address data packaged for Python
 */
export const google_i18n_address = mkPackage(
  nixRaw`pkgs.python2Packages.google-i18n-address`,
  "Google's i18n address data packaged for Python",
);

/**
 * Module for Google Nest Device Access using the Smart Device Management API
 */
export const google_nest_sdm = mkPackage(
  nixRaw`pkgs.python2Packages.google-nest-sdm`,
  "Module for Google Nest Device Access using the Smart Device Management API",
);

/**
 * An AST-based Python refactoring library
 */
export const google_pasta = mkPackage(
  nixRaw`pkgs.python2Packages.google-pasta`,
  "An AST-based Python refactoring library",
);

/**
 * RE2 Python bindings
 */
export const google_re2 = mkPackage(
  nixRaw`pkgs.python2Packages.google-re2`,
  "RE2 Python bindings",
);

/**
 * Auth plugin allowing use the use of OAuth 2.0 credentials for Google Cloud Storage
 */
export const google_reauth = mkPackage(
  nixRaw`pkgs.python2Packages.google-reauth`,
  "Auth plugin allowing use the use of OAuth 2.0 credentials for Google Cloud Storage",
);

/**
 * Utilities for Google Media Downloads and Resumable Uploads
 */
export const google_resumable_media = mkPackage(
  nixRaw`pkgs.python2Packages.google-resumable-media`,
  "Utilities for Google Media Downloads and Resumable Uploads",
);

/**
 * Scrape and search localized results from Google, Bing, Baidu, Yahoo, Yandex, Ebay, Homedepot, youtube at scale using SerpApi.com
 */
export const google_search_results = mkPackage(
  nixRaw`pkgs.python2Packages.google-search-results`,
  "Scrape and search localized results from Google, Bing, Baidu, Yahoo, Yandex, Ebay, Homedepot, youtube at scale using SerpApi.com",
);

/**
 * Common protobufs used in Google APIs
 */
export const googleapis_common_protos = mkPackage(
  nixRaw`pkgs.python2Packages.googleapis-common-protos`,
  "Common protobufs used in Google APIs",
);

/**
 * Python client library for Google Maps API Web Services
 */
export const googlemaps = mkPackage(
  nixRaw`pkgs.python2Packages.googlemaps`,
  "Python client library for Google Maps API Web Services",
);

/**
 * Googletrans is python library to interact with Google Translate API
 */
export const googletrans = mkPackage(
  nixRaw`pkgs.python2Packages.googletrans`,
  "Googletrans is python library to interact with Google Translate API",
);

/**
 * Convenient approach to monkey patching
 */
export const gorilla = mkPackage(
  nixRaw`pkgs.python2Packages.gorilla`,
  "Convenient approach to monkey patching",
);

/**
 * Library for Govee BLE devices
 */
export const govee_ble = mkPackage(
  nixRaw`pkgs.python2Packages.govee-ble`,
  "Library for Govee BLE devices",
);

/**
 * Python module for interacting with the Govee API
 */
export const goveelights = mkPackage(
  nixRaw`pkgs.python2Packages.goveelights`,
  "Python module for interacting with the Govee API",
);

/**
 * Google Play Unofficial Python API
 */
export const gpapi = mkPackage(
  nixRaw`pkgs.python2Packages.gpapi`,
  "Google Play Unofficial Python API",
);

/**
 * Density functional theory and beyond within the projector-augmented wave method
 */
export const gpaw = mkPackage(
  nixRaw`pkgs.python2Packages.gpaw`,
  "Density functional theory and beyond within the projector-augmented wave method",
);

/**
 * Library for making GnuPG easier to use
 */
export const gpgme = mkPackage(
  nixRaw`pkgs.python2Packages.gpgme`,
  "Library for making GnuPG easier to use",
);

/**
 * Python interface to libgphoto2
 */
export const gphoto2 = mkPackage(
  nixRaw`pkgs.python2Packages.gphoto2`,
  "Python interface to libgphoto2",
);

/**
 * Cross-platform Python bindings for the NI GPIB and linux-gpib C interfaces
 */
export const gpib_ctypes = mkPackage(
  nixRaw`pkgs.python2Packages.gpib-ctypes`,
  "Cross-platform Python bindings for the NI GPIB and linux-gpib C interfaces",
);

/**
 * A simple interface to GPIO devices with Raspberry Pi
 */
export const gpiozero = mkPackage(
  nixRaw`pkgs.python2Packages.gpiozero`,
  "A simple interface to GPIO devices with Raspberry Pi",
);

/**
 * Google Play Downloader via Command line
 */
export const gplaycli = mkPackage(
  nixRaw`pkgs.python2Packages.gplaycli`,
  "Google Play Downloader via Command line",
);

/**
 * Python script to convert the output from many profilers into a dot graph
 */
export const gprof2dot = mkPackage(
  nixRaw`pkgs.python2Packages.gprof2dot`,
  "Python script to convert the output from many profilers into a dot graph",
);

/**
 * Python client for GPSD
 */
export const gps3 = mkPackage(
  nixRaw`pkgs.python2Packages.gps3`,
  "Python client for GPSD",
);

/**
 * Library for Google Play Services OAuth
 */
export const gpsoauth = mkPackage(
  nixRaw`pkgs.python2Packages.gpsoauth`,
  "Library for Google Play Services OAuth",
);

/**
 * Easily retrain OpenAI's GPT-2 text-generating model on new texts
 */
export const gpt_2_simple = mkPackage(
  nixRaw`pkgs.python2Packages.gpt-2-simple`,
  "Easily retrain OpenAI's GPT-2 text-generating model on new texts",
);

/**
 * Semantic cache for LLMs and fully integrated with LangChain and llama_index
 */
export const gptcache = mkPackage(
  nixRaw`pkgs.python2Packages.gptcache`,
  "Semantic cache for LLMs and fully integrated with LangChain and llama_index",
);

/**
 * A simple command-line utility for querying and monitoring GPU status
 */
export const gpustat = mkPackage(
  nixRaw`pkgs.python2Packages.gpustat`,
  "A simple command-line utility for querying and monitoring GPU status",
);

/**
 * Python GPX (GPS eXchange format) parser
 */
export const gpxpy = mkPackage(
  nixRaw`pkgs.python2Packages.gpxpy`,
  "Python GPX (GPS eXchange format) parser",
);

/**
 * Gaussian process framework in Python
 */
export const gpy = mkPackage(
  nixRaw`pkgs.python2Packages.gpy`,
  "Gaussian process framework in Python",
);

/**
 * A highly efficient and modular implementation of Gaussian Processes, with GPU acceleration
 */
export const gpytorch = mkPackage(
  nixRaw`pkgs.python2Packages.gpytorch`,
  "A highly efficient and modular implementation of Gaussian Processes, with GPU acceleration",
);

/**
 * GraphQL client in Python
 */
export const gql = mkPackage(
  nixRaw`pkgs.python2Packages.gql`,
  "GraphQL client in Python",
);

/**
 * Advanced AI explainability for computer vision.
 */
export const grad_cam = mkPackage(
  nixRaw`pkgs.python2Packages.grad-cam`,
  "Advanced AI explainability for computer vision.",
);

/**
 * The command line interface for Gradient
 */
export const gradient = mkPackage(
  nixRaw`pkgs.python2Packages.gradient`,
  "The command line interface for Gradient",
);

/**
 * Wrapper around the DogStatsd client
 */
export const gradient_statsd = mkPackage(
  nixRaw`pkgs.python2Packages.gradient_statsd`,
  "Wrapper around the DogStatsd client",
);

/**
 * Python utils and helpers library for Gradient
 */
export const gradient_utils = mkPackage(
  nixRaw`pkgs.python2Packages.gradient-utils`,
  "Python utils and helpers library for Gradient",
);

/**
 * Python library for easily interacting with trained machine learning models
 */
export const gradio = mkPackage(
  nixRaw`pkgs.python2Packages.gradio`,
  "Python library for easily interacting with trained machine learning models",
);

/**
 * Lightweight library to use any Gradio app as an API
 */
export const gradio_client = mkPackage(
  nixRaw`pkgs.python2Packages.gradio-client`,
  "Lightweight library to use any Gradio app as an API",
);

/**
 * An open source grammar and typographic corrector for the French language
 */
export const grammalecte = mkPackage(
  nixRaw`pkgs.python2Packages.grammalecte`,
  "An open source grammar and typographic corrector for the French language",
);

/**
 * Module for experimentations with graphs and drawing algorithms
 */
export const grandalf = mkPackage(
  nixRaw`pkgs.python2Packages.grandalf`,
  "Module for experimentations with graphs and drawing algorithms",
);

/**
 * Python module for manipulation and statistical analysis of graphs
 */
export const graph_tool = mkPackage(
  nixRaw`pkgs.python2Packages.graph-tool`,
  "Python module for manipulation and statistical analysis of graphs",
);

/**
 * Python package for grapheme aware string handling
 */
export const grapheme = mkPackage(
  nixRaw`pkgs.python2Packages.grapheme`,
  "Python package for grapheme aware string handling",
);

/**
 * GraphQL Framework for Python
 */
export const graphene = mkPackage(
  nixRaw`pkgs.python2Packages.graphene`,
  "GraphQL Framework for Python",
);

/**
 * Integrate GraphQL into your Django project
 */
export const graphene_django = mkPackage(
  nixRaw`pkgs.python2Packages.graphene-django`,
  "Integrate GraphQL into your Django project",
);

/**
 * Enterprise scalable realtime graphing
 */
export const graphite_web = mkPackage(
  nixRaw`pkgs.python2Packages.graphite-web`,
  "Enterprise scalable realtime graphing",
);

/**
 * Port of graphql-js to Python
 */
export const graphql_core = mkPackage(
  nixRaw`pkgs.python2Packages.graphql-core`,
  "Port of graphql-js to Python",
);

/**
 * A library to help construct a graphql-py server supporting react-relay
 */
export const graphql_relay = mkPackage(
  nixRaw`pkgs.python2Packages.graphql-relay`,
  "A library to help construct a graphql-py server supporting react-relay",
);

/**
 * Core package for using GraphQL in a custom server easily
 */
export const graphql_server_core = mkPackage(
  nixRaw`pkgs.python2Packages.graphql-server-core`,
  "Core package for using GraphQL in a custom server easily",
);

/**
 * Python3 library for graphql subscription manager
 */
export const graphql_subscription_manager = mkPackage(
  nixRaw`pkgs.python2Packages.graphql-subscription-manager`,
  "Python3 library for graphql subscription manager",
);

/**
 * Simple GraphQL client for Python
 */
export const graphqlclient = mkPackage(
  nixRaw`pkgs.python2Packages.graphqlclient`,
  "Simple GraphQL client for Python",
);

/**
 * A utility to diff tree-like files such as JSON and XML
 */
export const graphtage = mkPackage(
  nixRaw`pkgs.python2Packages.graphtage`,
  "A utility to diff tree-like files such as JSON and XML",
);

/**
 * Simple Python interface for Graphviz
 */
export const graphviz = mkPackage(
  nixRaw`pkgs.python2Packages.graphviz`,
  "Simple Python interface for Graphviz",
);

/**
 * A snapshot of django-grappelli for the Mezzanine CMS
 */
export const grappelli_safe = mkPackage(
  nixRaw`pkgs.python2Packages.grappelli-safe`,
  "A snapshot of django-grappelli for the Mezzanine CMS",
);

/**
 * Hardware hacking with the greatfet
 */
export const greatfet = mkPackage(
  nixRaw`pkgs.python2Packages.greatfet`,
  "Hardware hacking with the greatfet",
);

/**
 * Discover, connect and control Gree based minisplit systems
 */
export const greeclimate = mkPackage(
  nixRaw`pkgs.python2Packages.greeclimate`,
  "Discover, connect and control Gree based minisplit systems",
);

/**
 * Python test runner
 */
export const green = mkPackage(
  nixRaw`pkgs.python2Packages.green`,
  "Python test runner",
);

/**
 * Receive data packets from GreenEye Monitor
 */
export const greeneye_monitor = mkPackage(
  nixRaw`pkgs.python2Packages.greeneye-monitor`,
  "Receive data packets from GreenEye Monitor",
);

/**
 * Gremlin-Python implements Gremlin, the graph traversal language of Apache TinkerPop, within the Python language
 */
export const gremlinpython = mkPackage(
  nixRaw`pkgs.python2Packages.gremlinpython`,
  "Gremlin-Python implements Gremlin, the graph traversal language of Apache TinkerPop, within the Python language",
);

/**
 * Asynchronous HTTP requests
 */
export const grequests = mkPackage(
  nixRaw`pkgs.python2Packages.grequests`,
  "Asynchronous HTTP requests",
);

/**
 * Python3 library and command line for GreyNoise
 */
export const greynoise = mkPackage(
  nixRaw`pkgs.python2Packages.greynoise`,
  "Python3 library and command line for GreyNoise",
);

/**
 * Asynchronous Python client for NET2GRID devices
 */
export const gridnet = mkPackage(
  nixRaw`pkgs.python2Packages.gridnet`,
  "Asynchronous Python client for NET2GRID devices",
);

/**
 * Signatures for entire Python programs
 */
export const griffe = mkPackage(
  nixRaw`pkgs.python2Packages.griffe`,
  "Signatures for entire Python programs",
);

/**
 * Preview GitHub Markdown files like Readme locally before committing them
 */
export const grip = mkPackage(
  nixRaw`pkgs.python2Packages.grip`,
  "Preview GitHub Markdown files like Readme locally before committing them",
);

/**
 * Bindings for groestl key derivation function library used in Groestlcoin
 */
export const groestlcoin_hash = mkPackage(
  nixRaw`pkgs.python2Packages.groestlcoin_hash`,
  "Bindings for groestl key derivation function library used in Groestlcoin",
);

/**
 * Python package to retrieve information from Growatt units
 */
export const growattserver = mkPackage(
  nixRaw`pkgs.python2Packages.growattserver`,
  "Python package to retrieve information from Growatt units",
);

/**
 * GRPC library for the google-iam-v1 service
 */
export const grpc_google_iam_v1 = mkPackage(
  nixRaw`pkgs.python2Packages.grpc-google-iam-v1`,
  "GRPC library for the google-iam-v1 service",
);

/**
 * Simplified gRPC interceptors
 */
export const grpc_interceptor = mkPackage(
  nixRaw`pkgs.python2Packages.grpc-interceptor`,
  "Simplified gRPC interceptors",
);

/**
 * HTTP/2-based RPC framework
 */
export const grpcio = mkPackage(
  nixRaw`pkgs.python2Packages.grpcio`,
  "HTTP/2-based RPC framework",
);

/**
 * Channel Level Live Debug Information Service for gRPC
 */
export const grpcio_channelz = mkPackage(
  nixRaw`pkgs.python2Packages.grpcio-channelz`,
  "Channel Level Live Debug Information Service for gRPC",
);

/**
 * gRPC extensions for Google Cloud Platform
 */
export const grpcio_gcp = mkPackage(
  nixRaw`pkgs.python2Packages.grpcio-gcp`,
  "gRPC extensions for Google Cloud Platform",
);

/**
 * Standard Health Checking Service for gRPC
 */
export const grpcio_health_checking = mkPackage(
  nixRaw`pkgs.python2Packages.grpcio-health-checking`,
  "Standard Health Checking Service for gRPC",
);

/**
 * Standard Protobuf Reflection Service for gRPC
 */
export const grpcio_reflection = mkPackage(
  nixRaw`pkgs.python2Packages.grpcio-reflection`,
  "Standard Protobuf Reflection Service for gRPC",
);

/**
 * GRPC Python status proto mapping
 */
export const grpcio_status = mkPackage(
  nixRaw`pkgs.python2Packages.grpcio-status`,
  "GRPC Python status proto mapping",
);

/**
 * Testing utilities for gRPC Python
 */
export const grpcio_testing = mkPackage(
  nixRaw`pkgs.python2Packages.grpcio-testing`,
  "Testing utilities for gRPC Python",
);

/**
 * Protobuf code generator for gRPC
 */
export const grpcio_tools = mkPackage(
  nixRaw`pkgs.python2Packages.grpcio-tools`,
  "Protobuf code generator for gRPC",
);

/**
 * Pure-Python gRPC implementation for asyncio
 */
export const grpclib = mkPackage(
  nixRaw`pkgs.python2Packages.grpclib`,
  "Pure-Python gRPC implementation for asyncio",
);

/**
 * A tokenizer, text cleaner, and phonemizer for many human languages
 */
export const gruut = mkPackage(
  nixRaw`pkgs.python2Packages.gruut`,
  "A tokenizer, text cleaner, and phonemizer for many human languages",
);

/**
 * Library for manipulating pronunciations using the International Phonetic Alphabet (IPA)
 */
export const gruut_ipa = mkPackage(
  nixRaw`pkgs.python2Packages.gruut-ipa`,
  "Library for manipulating pronunciations using the International Phonetic Alphabet (IPA)",
);

/**
 * General simulation data file format
 */
export const gsd = mkPackage(
  nixRaw`pkgs.python2Packages.gsd`,
  "General simulation data file format",
);

/**
 * Python codec for GSM 03.38
 */
export const gsm0338 = mkPackage(
  nixRaw`pkgs.python2Packages.gsm0338`,
  "Python codec for GSM 03.38",
);

/**
 * Google Spreadsheets client library
 */
export const gspread = mkPackage(
  nixRaw`pkgs.python2Packages.gspread`,
  "Google Spreadsheets client library",
);

/**
 * Python GSSAPI Wrapper
 */
export const gssapi = mkPackage(
  nixRaw`pkgs.python2Packages.gssapi`,
  "Python GSSAPI Wrapper",
);

/**
 * Python bindings for GStreamer
 */
export const gst_python = mkPackage(
  nixRaw`pkgs.python2Packages.gst-python`,
  "Python bindings for GStreamer",
);

/**
 * Python bindings generated from the GTFS Realtime protocol buffer spec
 */
export const gtfs_realtime_bindings = mkPackage(
  nixRaw`pkgs.python2Packages.gtfs-realtime-bindings`,
  "Python bindings generated from the GTFS Realtime protocol buffer spec",
);

/**
 * A time tracking app
 */
export const gtimelog = mkPackage(
  nixRaw`pkgs.python2Packages.gtimelog`,
  "A time tracking app",
);

/**
 * A Python library and CLI tool to interface with Google Translate text-to-speech API
 */
export const gtts = mkPackage(
  nixRaw`pkgs.python2Packages.gtts`,
  "A Python library and CLI tool to interface with Google Translate text-to-speech API",
);

/**
 * Calculates a token to run the Google Translate text to speech
 */
export const gtts_token = mkPackage(
  nixRaw`pkgs.python2Packages.gtts-token`,
  "Calculates a token to run the Google Translate text to speech",
);

/**
 * Library for Computational Topology and Topological Data Analysis (TDA)
 */
export const gudhi = mkPackage(
  nixRaw`pkgs.python2Packages.gudhi`,
  "Library for Computational Topology and Topological Data Analysis (TDA)",
);

/**
 * A Python library that extracts as much information as possible from a video filename
 */
export const guessit = mkPackage(
  nixRaw`pkgs.python2Packages.guessit`,
  "A Python library that extracts as much information as possible from a video filename",
);

/**
 * Use libguestfs from Python
 */
export const guestfs = mkPackage(
  nixRaw`pkgs.python2Packages.guestfs`,
  "Use libguestfs from Python",
);

/**
 * A guidance language for controlling large language models
 */
export const guidance = mkPackage(
  nixRaw`pkgs.python2Packages.guidance`,
  "A guidance language for controlling large language models",
);

/**
 * Library supporting function dispatch on general data containers. C base and Python wrapper
 */
export const gumath = mkPackage(
  nixRaw`pkgs.python2Packages.gumath`,
  "Library supporting function dispatch on general data containers. C base and Python wrapper",
);

/**
 * gunicorn 'Green Unicorn' is a WSGI HTTP Server for UNIX, fast clients and sleepy applications
 */
export const gunicorn = mkPackage(
  nixRaw`pkgs.python2Packages.gunicorn`,
  "gunicorn 'Green Unicorn' is a WSGI HTTP Server for UNIX, fast clients and sleepy applications",
);

/**
 * Python Programming Environment & Heap analysis toolset
 */
export const guppy3 = mkPackage(
  nixRaw`pkgs.python2Packages.guppy3`,
  "Python Programming Environment & Heap analysis toolset",
);

/**
 * The Gurobi Python interface
 */
export const gurobipy = mkPackage(
  nixRaw`pkgs.python2Packages.gurobipy`,
  "The Gurobi Python interface",
);

/**
 * Sphinx theme used by Guzzle: http://guzzlephp.org
 */
export const guzzle_sphinx_theme = mkPackage(
  nixRaw`pkgs.python2Packages.guzzle-sphinx-theme`,
  "Sphinx theme used by Guzzle: http://guzzlephp.org",
);

/**
 * Python API for Google Visualization
 */
export const gviz_api = mkPackage(
  nixRaw`pkgs.python2Packages.gviz-api`,
  "Python API for Google Visualization",
);

/**
 * Collection of APIs that help with remote controlling a Greenbone Security Manager
 */
export const gvm_tools = mkPackage(
  nixRaw`pkgs.python2Packages.gvm-tools`,
  "Collection of APIs that help with remote controlling a Greenbone Security Manager",
);

/**
 * A toolkit for developing and comparing your reinforcement learning agents
 */
export const gym = mkPackage(
  nixRaw`pkgs.python2Packages.gym`,
  "A toolkit for developing and comparing your reinforcement learning agents",
);

/**
 * Notices for Python package Gym
 */
export const gym_notices = mkPackage(
  nixRaw`pkgs.python2Packages.gym-notices`,
  "Notices for Python package Gym",
);

/**
 * A standard API for reinforcement learning and a diverse set of reference environments (formerly Gym)
 */
export const gymnasium = mkPackage(
  nixRaw`pkgs.python2Packages.gymnasium`,
  "A standard API for reinforcement learning and a diverse set of reference environments (formerly Gym)",
);

/**
 * A tool to generate native build files
 */
export const gyp = mkPackage(
  nixRaw`pkgs.python2Packages.gyp`,
  "A tool to generate native build files",
);

/**
 * Pure-Python, bring-your-own-I/O implementation of HTTP/1.1
 */
export const h11 = mkPackage(
  nixRaw`pkgs.python2Packages.h11`,
  "Pure-Python, bring-your-own-I/O implementation of HTTP/1.1",
);

/**
 * HTTP/2 State-Machine based protocol implementation
 */
export const h2 = mkPackage(
  nixRaw`pkgs.python2Packages.h2`,
  "HTTP/2 State-Machine based protocol implementation",
);

/**
 * Hierarchical hexagonal geospatial indexing system
 */
export const h3 = mkPackage(
  nixRaw`pkgs.python2Packages.h3`,
  "Hierarchical hexagonal geospatial indexing system",
);

/**
 * netCDF4 via h5py
 */
export const h5netcdf = mkPackage(
  nixRaw`pkgs.python2Packages.h5netcdf`,
  "netCDF4 via h5py",
);

/**
 * Pythonic interface to the HDF5 binary data format
 */
export const h5py = mkPackage(
  nixRaw`pkgs.python2Packages.h5py`,
  "Pythonic interface to the HDF5 binary data format",
);

/**
 * Pythonic interface to the HDF5 binary data format
 */
export const h5py_mpi = mkPackage(
  nixRaw`pkgs.python2Packages.h5py-mpi`,
  "Pythonic interface to the HDF5 binary data format",
);

/**
 * Library for Home Assistant to handle ffmpeg
 */
export const ha_ffmpeg = mkPackage(
  nixRaw`pkgs.python2Packages.ha-ffmpeg`,
  "Library for Home Assistant to handle ffmpeg",
);

/**
 * Python module to create MQTT entities that are automatically discovered by Home Assistant
 */
export const ha_mqtt_discoverable = mkPackage(
  nixRaw`pkgs.python2Packages.ha-mqtt-discoverable`,
  "Python module to create MQTT entities that are automatically discovered by Home Assistant",
);

/**
 * Python library to interact with Philips TVs with jointSPACE API
 */
export const ha_philipsjs = mkPackage(
  nixRaw`pkgs.python2Packages.ha-philipsjs`,
  "Python library to interact with Philips TVs with jointSPACE API",
);

/**
 * Python interface to Library Genesis
 */
export const habanero = mkPackage(
  nixRaw`pkgs.python2Packages.habanero`,
  "Python interface to Library Genesis",
);

/**
 * Tools and library for Habitica restful API
 */
export const habitipy = mkPackage(
  nixRaw`pkgs.python2Packages.habitipy`,
  "Tools and library for Habitica restful API",
);

/**
 * Python library to view and edit a binary stream
 */
export const hachoir = mkPackage(
  nixRaw`pkgs.python2Packages.hachoir`,
  "Python library to view and edit a binary stream",
);

/**
 * OpenStack Hacking Guideline Enforcement
 */
export const hacking = mkPackage(
  nixRaw`pkgs.python2Packages.hacking`,
  "OpenStack Hacking Guideline Enforcement",
);

/**
 * Python module to interact with HomeMatic devices
 */
export const hahomematic = mkPackage(
  nixRaw`pkgs.python2Packages.hahomematic`,
  "Python module to interact with HomeMatic devices",
);

/**
 * Beautiful Spinners for Terminal, IPython and Jupyter.
 */
export const halo = mkPackage(
  nixRaw`pkgs.python2Packages.halo`,
  "Beautiful Spinners for Terminal, IPython and Jupyter.",
);

/**
 * Python library to control Eaton HALO Home Smart Lights
 */
export const halohome = mkPackage(
  nixRaw`pkgs.python2Packages.halohome`,
  "Python library to control Eaton HALO Home Smart Lights",
);

/**
 * Turn Python scripts into handouts with Markdown and figures
 */
export const handout = mkPackage(
  nixRaw`pkgs.python2Packages.handout`,
  "Turn Python scripts into handouts with Markdown and figures",
);

/**
 * HomeKit Accessory Protocol implementation
 */
export const hap_python = mkPackage(
  nixRaw`pkgs.python2Packages.hap-python`,
  "HomeKit Accessory Protocol implementation",
);

/**
 * Python module for the Home Assistant cloud integration
 */
export const hass_nabucasa = mkPackage(
  nixRaw`pkgs.python2Packages.hass-nabucasa`,
  "Python module for the Home Assistant cloud integration",
);

/**
 * Intent parsing for Home Assistant
 */
export const hassil = mkPackage(
  nixRaw`pkgs.python2Packages.hassil`,
  "Intent parsing for Home Assistant",
);

/**
 * Python module to help parse and construct Tasmota MQTT messages
 */
export const hatasmota = mkPackage(
  nixRaw`pkgs.python2Packages.hatasmota`,
  "Python module to help parse and construct Tasmota MQTT messages",
);

/**
 * Fancy PyPI READMEs with Hatch
 */
export const hatch_fancy_pypi_readme = mkPackage(
  nixRaw`pkgs.python2Packages.hatch-fancy-pypi-readme`,
  "Fancy PyPI READMEs with Hatch",
);

/**
 * hatch plugin to help build Jupyter packages
 */
export const hatch_jupyter_builder = mkPackage(
  nixRaw`pkgs.python2Packages.hatch-jupyter-builder`,
  "hatch plugin to help build Jupyter packages",
);

/**
 * Plugins for dealing with NodeJS versions
 */
export const hatch_nodejs_version = mkPackage(
  nixRaw`pkgs.python2Packages.hatch-nodejs-version`,
  "Plugins for dealing with NodeJS versions",
);

/**
 * Hatchling plugin to read project dependencies from requirements.txt
 */
export const hatch_requirements_txt = mkPackage(
  nixRaw`pkgs.python2Packages.hatch-requirements-txt`,
  "Hatchling plugin to read project dependencies from requirements.txt",
);

/**
 * A plugin for Hatch that uses your preferred version control system (like Git) to determine project versions
 */
export const hatch_vcs = mkPackage(
  nixRaw`pkgs.python2Packages.hatch-vcs`,
  "A plugin for Hatch that uses your preferred version control system (like Git) to determine project versions",
);

/**
 * Modern, extensible Python build backend
 */
export const hatchling = mkPackage(
  nixRaw`pkgs.python2Packages.hatchling`,
  "Modern, extensible Python build backend",
);

/**
 * Python module the distance between 2 points on earth
 */
export const haversine = mkPackage(
  nixRaw`pkgs.python2Packages.haversine`,
  "Python module the distance between 2 points on earth",
);

/**
 * Hawk Access Authentication protocol
 */
export const hawkauthlib = mkPackage(
  nixRaw`pkgs.python2Packages.hawkauthlib`,
  "Hawk Access Authentication protocol",
);

/**
 * Library for the Hetzner Cloud API
 */
export const hcloud = mkPackage(
  nixRaw`pkgs.python2Packages.hcloud`,
  "Library for the Hetzner Cloud API",
);

/**
 * Library collecting some useful snippets
 */
export const hcs_utils = mkPackage(
  nixRaw`pkgs.python2Packages.hcs_utils`,
  "Library collecting some useful snippets",
);

/**
 * Python module for Jewish/Hebrew date and Zmanim
 */
export const hdate = mkPackage(
  nixRaw`pkgs.python2Packages.hdate`,
  "Python module for Jewish/Hebrew date and Zmanim",
);

/**
 * Hierarchical Density-Based Spatial Clustering of Applications with Noise, a clustering algorithm with a scikit-learn compatible API
 */
export const hdbscan = mkPackage(
  nixRaw`pkgs.python2Packages.hdbscan`,
  "Hierarchical Density-Based Spatial Clustering of Applications with Noise, a clustering algorithm with a scikit-learn compatible API",
);

/**
 * Additional compression filters for h5py
 */
export const hdf5plugin = mkPackage(
  nixRaw`pkgs.python2Packages.hdf5plugin`,
  "Additional compression filters for h5py",
);

/**
 * Python API and command line interface for HDFS
 */
export const hdfs = mkPackage(
  nixRaw`pkgs.python2Packages.hdfs`,
  "Python API and command line interface for HDFS",
);

/**
 * High-dimensional medians
 */
export const hdmedians = mkPackage(
  nixRaw`pkgs.python2Packages.hdmedians`,
  "High-dimensional medians",
);

/**
 * Module to parse key-value pairs in the style of RFC 822 (e-mail) headers
 */
export const headerparser = mkPackage(
  nixRaw`pkgs.python2Packages.headerparser`,
  "Module to parse key-value pairs in the style of RFC 822 (e-mail) headers",
);

/**
 * a heap with decrease-key and increase-key operations.
 */
export const heapdict = mkPackage(
  nixRaw`pkgs.python2Packages.heapdict`,
  "a heap with decrease-key and increase-key operations.",
);

/**
 * Compression using the Heatshrink algorithm
 */
export const heatshrink2 = mkPackage(
  nixRaw`pkgs.python2Packages.heatshrink2`,
  "Compression using the Heatshrink algorithm",
);

/**
 * Python module to interact with Heatzy devices
 */
export const heatzypy = mkPackage(
  nixRaw`pkgs.python2Packages.heatzypy`,
  "Python module to interact with Heatzy devices",
);

/**
 * Convert --help and --version to man page
 */
export const help2man = mkPackage(
  nixRaw`pkgs.python2Packages.help2man`,
  "Convert --help and --version to man page",
);

/**
 * Extracts information about the Python environment easily
 */
export const helpdev = mkPackage(
  nixRaw`pkgs.python2Packages.helpdev`,
  "Extracts information about the Python environment easily",
);

/**
 * Development library for quickly writing configurable applications and daemons
 */
export const helper = mkPackage(
  nixRaw`pkgs.python2Packages.helper`,
  "Development library for quickly writing configurable applications and daemons",
);

/**
 * The HepMC package is an object oriented, C++ event record for High Energy Physics Monte Carlo generators and simulation
 */
export const hepmc3 = mkPackage(
  nixRaw`pkgs.python2Packages.hepmc3`,
  "The HepMC package is an object oriented, C++ event record for High Energy Physics Monte Carlo generators and simulation",
);

/**
 * Units and constants in the HEP system of units
 */
export const hepunits = mkPackage(
  nixRaw`pkgs.python2Packages.hepunits`,
  "Units and constants in the HEP system of units",
);

/**
 * Asynchronous Python client for the HERE Routing V8 API
 */
export const here_routing = mkPackage(
  nixRaw`pkgs.python2Packages.here-routing`,
  "Asynchronous Python client for the HERE Routing V8 API",
);

/**
 * Asynchronous Python client for the HERE Routing V8 API
 */
export const here_transit = mkPackage(
  nixRaw`pkgs.python2Packages.here-transit`,
  "Asynchronous Python client for the HERE Routing V8 API",
);

/**
 * Library that provides a Python interface to the HERE APIs
 */
export const herepy = mkPackage(
  nixRaw`pkgs.python2Packages.herepy`,
  "Library that provides a Python interface to the HERE APIs",
);

/**
 * High-level Python API for accessing the Hetzner robot
 */
export const hetzner = mkPackage(
  nixRaw`pkgs.python2Packages.hetzner`,
  "High-level Python API for accessing the Hetzner robot",
);

/**
 * Flexible DICOM converter for organizing imaging data
 */
export const heudiconv = mkPackage(
  nixRaw`pkgs.python2Packages.heudiconv`,
  "Flexible DICOM converter for organizing imaging data",
);

/**
 * `bytes` subclass that decodes hex, with a readable console output
 */
export const hexbytes = mkPackage(
  nixRaw`pkgs.python2Packages.hexbytes`,
  "`bytes` subclass that decodes hex, with a readable console output",
);

/**
 * Library to dump binary data to hex format and restore from there
 */
export const hexdump = mkPackage(
  nixRaw`pkgs.python2Packages.hexdump`,
  "Library to dump binary data to hex format and restore from there",
);

/**
 * Python bindings for HFST
 */
export const hfst = mkPackage(
  nixRaw`pkgs.python2Packages.hfst`,
  "Python bindings for HFST",
);

/**
 * Automatic signing of changeset hashes
 */
export const hg_commitsigs = mkPackage(
  nixRaw`pkgs.python2Packages.hg-commitsigs`,
  "Automatic signing of changeset hashes",
);

/**
 * Enables the “changeset evolution” feature of Mercurial core
 */
export const hg_evolve = mkPackage(
  nixRaw`pkgs.python2Packages.hg-evolve`,
  "Enables the “changeset evolution” feature of Mercurial core",
);

/**
 * Push and pull from a Git server using Mercurial
 */
export const hg_git = mkPackage(
  nixRaw`pkgs.python2Packages.hg-git`,
  "Push and pull from a Git server using Mercurial",
);

/**
 * Serialize Python data to HDF5
 */
export const hickle = mkPackage(
  nixRaw`pkgs.python2Packages.hickle`,
  "Serialize Python data to HDF5",
);

/**
 * hidapi bindings in ctypes
 */
export const hid = mkPackage(
  nixRaw`pkgs.python2Packages.hid`,
  "hidapi bindings in ctypes",
);

/**
 * Typed pure Python library to parse HID report descriptors
 */
export const hid_parser = mkPackage(
  nixRaw`pkgs.python2Packages.hid-parser`,
  "Typed pure Python library to parse HID report descriptors",
);

/**
 * A Cython interface to the hidapi from https://github.com/libusb/hidapi
 */
export const hidapi = mkPackage(
  nixRaw`pkgs.python2Packages.hidapi`,
  "A Cython interface to the hidapi from https://github.com/libusb/hidapi",
);

/**
 * Generate HTML presentations from plain text sources
 */
export const hieroglyph = mkPackage(
  nixRaw`pkgs.python2Packages.hieroglyph`,
  "Generate HTML presentations from plain text sources",
);

/**
 * Accurate Hijri-Gregorian date converter based on the Umm al-Qura calendar
 */
export const hijri_converter = mkPackage(
  nixRaw`pkgs.python2Packages.hijri-converter`,
  "Accurate Hijri-Gregorian date converter based on the Umm al-Qura calendar",
);

/**
 * Python module for interacting with Hikvision IP Cameras
 */
export const hikvision = mkPackage(
  nixRaw`pkgs.python2Packages.hikvision`,
  "Python module for interacting with Hikvision IP Cameras",
);

/**
 * Wraps protocol parsing code in hiredis, speeds up parsing of multi bulk replies
 */
export const hiredis = mkPackage(
  nixRaw`pkgs.python2Packages.hiredis`,
  "Wraps protocol parsing code in hiredis, speeds up parsing of multi bulk replies",
);

/**
 * Time manipulation utilities for Python
 */
export const hiro = mkPackage(
  nixRaw`pkgs.python2Packages.hiro`,
  "Time manipulation utilities for Python",
);

/**
 * Histogramming for analysis powered by boost-histogram
 */
export const hist = mkPackage(
  nixRaw`pkgs.python2Packages.hist`,
  "Histogramming for analysis powered by boost-histogram",
);

/**
 * Pretty print histograms to the console
 */
export const histoprint = mkPackage(
  nixRaw`pkgs.python2Packages.histoprint`,
  "Pretty print histograms to the console",
);

/**
 * Python library allowing hierarchical overlay of config files in YAML syntax
 */
export const hiyapyco = mkPackage(
  nixRaw`pkgs.python2Packages.hiyapyco`,
  "Python library allowing hierarchical overlay of config files in YAML syntax",
);

/**
 * A user interface for JSON
 */
export const hjson = mkPackage(
  nixRaw`pkgs.python2Packages.hjson`,
  "A user interface for JSON",
);

/**
 * Library for interacting with Harman Kardon AVR controllers
 */
export const hkavr = mkPackage(
  nixRaw`pkgs.python2Packages.hkavr`,
  "Library for interacting with Harman Kardon AVR controllers",
);

/**
 * HMAC-based Extract-and-Expand Key Derivation Function (HKDF)
 */
export const hkdf = mkPackage(
  nixRaw`pkgs.python2Packages.hkdf`,
  "HMAC-based Extract-and-Expand Key Derivation Function (HKDF)",
);

/**
 * Utilities extending hledger
 */
export const hledger_utils = mkPackage(
  nixRaw`pkgs.python2Packages.hledger-utils`,
  "Utilities extending hledger",
);

/**
 * Python client for HLK-SW16
 */
export const hlk_sw16 = mkPackage(
  nixRaw`pkgs.python2Packages.hlk-sw16`,
  "Python client for HLK-SW16",
);

/**
 * Hidden Markov Models in Python with scikit-learn like API
 */
export const hmmlearn = mkPackage(
  nixRaw`pkgs.python2Packages.hmmlearn`,
  "Hidden Markov Models in Python with scikit-learn like API",
);

/**
 * Header-only C++/python library for fast approximate nearest neighbors
 */
export const hnswlib = mkPackage(
  nixRaw`pkgs.python2Packages.hnswlib`,
  "Header-only C++/python library for fast approximate nearest neighbors",
);

        /**
         * 
Tools for manipulating and evaluating the hOCR format for representing multi-lingual OCR results by embedding them into HTML
         */
export const hocr_tools = mkPackage(
  nixRaw`pkgs.python2Packages.hocr-tools`,
  "\nTools for manipulating and evaluating the hOCR format for representing multi-lingual OCR results by embedding them into HTML",
);

/**
 * Python API for interacting with a Pihole instance.
 */
export const hole = mkPackage(
  nixRaw`pkgs.python2Packages.hole`,
  "Python API for interacting with a Pihole instance.",
);

/**
 * Generate and work with holidays in Python
 */
export const holidays = mkPackage(
  nixRaw`pkgs.python2Packages.holidays`,
  "Generate and work with holidays in Python",
);

/**
 * A library for automatically generating Draft 7 JSON Schemas from Python dataclasses
 */
export const hologram = mkPackage(
  nixRaw`pkgs.python2Packages.hologram`,
  "A library for automatically generating Draft 7 JSON Schemas from Python dataclasses",
);

/**
 * Python data analysis and visualization seamless and simple
 */
export const holoviews = mkPackage(
  nixRaw`pkgs.python2Packages.holoviews`,
  "Python data analysis and visualization seamless and simple",
);

/**
 * Basic bluetooth models used by Home Assistant
 */
export const home_assistant_bluetooth = mkPackage(
  nixRaw`pkgs.python2Packages.home-assistant-bluetooth`,
  "Basic bluetooth models used by Home Assistant",
);

/**
 * Python-base APIs and tools for CHIP
 */
export const home_assistant_chip_clusters = mkPackage(
  nixRaw`pkgs.python2Packages.home-assistant-chip-clusters`,
  "Python-base APIs and tools for CHIP",
);

/**
 * Python-base APIs and tools for CHIP
 */
export const home_assistant_chip_core = mkPackage(
  nixRaw`pkgs.python2Packages.home-assistant-chip-core`,
  "Python-base APIs and tools for CHIP",
);

export const homeassistant_pyozw = mkPackage(
  nixRaw`pkgs.python2Packages.homeassistant-pyozw`,
  "",
);

/**
 * Typing stubs for Home Assistant Core
 */
export const homeassistant_stubs = mkPackage(
  nixRaw`pkgs.python2Packages.homeassistant-stubs`,
  "Typing stubs for Home Assistant Core",
);

/**
 * Python client for the BSH Home Connect REST API
 */
export const homeconnect = mkPackage(
  nixRaw`pkgs.python2Packages.homeconnect`,
  "Python client for the BSH Home Connect REST API",
);

/**
 * Module for the homematicIP REST API
 */
export const homematicip = mkPackage(
  nixRaw`pkgs.python2Packages.homematicip`,
  "Module for the homematicIP REST API",
);

/**
 * Python API to interact with the Legrand Eliot Home and Control
 */
export const homepluscontrol = mkPackage(
  nixRaw`pkgs.python2Packages.homepluscontrol`,
  "Python API to interact with the Legrand Eliot Home and Control",
);

/**
 * HOOMD-blue is a general-purpose particle simulation toolkit
 */
export const hoomd_blue = mkPackage(
  nixRaw`pkgs.python2Packages.hoomd-blue`,
  "HOOMD-blue is a general-purpose particle simulation toolkit",
);

/**
 * Implementation of HopcroftKarp's algorithm
 */
export const hopcroftkarp = mkPackage(
  nixRaw`pkgs.python2Packages.hopcroftkarp`,
  "Implementation of HopcroftKarp's algorithm",
);

/**
 * A free EDA software to develop printed circuit boards
 */
export const horizon_eda = mkPackage(
  nixRaw`pkgs.python2Packages.horizon-eda`,
  "A free EDA software to develop printed circuit boards",
);

/**
 * Instant coding answers via the command line
 */
export const howdoi = mkPackage(
  nixRaw`pkgs.python2Packages.howdoi`,
  "Instant coding answers via the command line",
);

/**
 * Pure-Python HPACK header compression
 */
export const hpack = mkPackage(
  nixRaw`pkgs.python2Packages.hpack`,
  "Pure-Python HPACK header compression",
);

/**
 * HPC Container Maker
 */
export const hpccm = mkPackage(
  nixRaw`pkgs.python2Packages.hpccm`,
  "HPC Container Maker",
);

/**
 * An extension of the Flexible Collision Library
 */
export const hpp_fcl = mkPackage(
  nixRaw`pkgs.python2Packages.hpp-fcl`,
  "An extension of the Flexible Collision Library",
);

/**
 * A Hypothesis Strategy for Generating Arbitrary DBus Signatures
 */
export const hs_dbus_signature = mkPackage(
  nixRaw`pkgs.python2Packages.hs-dbus-signature`,
  "A Hypothesis Strategy for Generating Arbitrary DBus Signatures",
);

/**
 * A pure Python library that lets one to read metadata from media files
 */
export const hsaudiotag3k = mkPackage(
  nixRaw`pkgs.python2Packages.hsaudiotag3k`,
  "A pure Python library that lets one to read metadata from media files",
);

/**
 * Python implementation of HSLuv
 */
export const hsluv = mkPackage(
  nixRaw`pkgs.python2Packages.hsluv`,
  "Python implementation of HSLuv",
);

/**
 * Chromium HSTS Preload list as a Python package and updated daily
 */
export const hstspreload = mkPackage(
  nixRaw`pkgs.python2Packages.hstspreload`,
  "Chromium HSTS Preload list as a Python package and updated daily",
);

/**
 * Turn HTML into equivalent Markdown-structured text
 */
export const html2text = mkPackage(
  nixRaw`pkgs.python2Packages.html2text`,
  "Turn HTML into equivalent Markdown-structured text",
);

/**
 * Fast C based HTML 5 parsing for python
 */
export const html5_parser = mkPackage(
  nixRaw`pkgs.python2Packages.html5-parser`,
  "Fast C based HTML 5 parsing for python",
);

/**
 * HTML parser based on WHAT-WG HTML5 specification
 */
export const html5lib = mkPackage(
  nixRaw`pkgs.python2Packages.html5lib`,
  "HTML parser based on WHAT-WG HTML5 specification",
);

/**
 * Create HTML documents from Python
 */
export const html5tagger = mkPackage(
  nixRaw`pkgs.python2Packages.html5tagger`,
  "Create HTML documents from Python",
);

/**
 * Allowlist-based and very opinionated HTML sanitizer
 */
export const html_sanitizer = mkPackage(
  nixRaw`pkgs.python2Packages.html-sanitizer`,
  "Allowlist-based and very opinionated HTML sanitizer",
);

/**
 * List of known HTML tags
 */
export const html_tag_names = mkPackage(
  nixRaw`pkgs.python2Packages.html-tag-names`,
  "List of known HTML tags",
);

/**
 * Extract text from HTML
 */
export const html_text = mkPackage(
  nixRaw`pkgs.python2Packages.html-text`,
  "Extract text from HTML",
);

/**
 * List of HTML void tag names
 */
export const html_void_elements = mkPackage(
  nixRaw`pkgs.python2Packages.html-void-elements`,
  "List of HTML void tag names",
);

/**
 * Simple HTML cleanup utilities
 */
export const htmllaundry = mkPackage(
  nixRaw`pkgs.python2Packages.htmllaundry`,
  "Simple HTML cleanup utilities",
);

/**
 * A configurable HTML Minifier with safety features
 */
export const htmlmin = mkPackage(
  nixRaw`pkgs.python2Packages.htmlmin`,
  "A configurable HTML Minifier with safety features",
);

/**
 * A framework to work with high-throughput sequencing data
 */
export const htseq = mkPackage(
  nixRaw`pkgs.python2Packages.htseq`,
  "A framework to work with high-throughput sequencing data",
);

/**
 * A mocking library for requests
 */
export const httmock = mkPackage(
  nixRaw`pkgs.python2Packages.httmock`,
  "A mocking library for requests",
);

/**
 * Encipher HTTP Messages
 */
export const http_ece = mkPackage(
  nixRaw`pkgs.python2Packages.http-ece`,
  "Encipher HTTP Messages",
);

/**
 * Requests authentication module for HTTP Signature
 */
export const http_message_signatures = mkPackage(
  nixRaw`pkgs.python2Packages.http-message-signatures`,
  "Requests authentication module for HTTP Signature",
);

/**
 * HTTP request/response parser for python in C
 */
export const http_parser = mkPackage(
  nixRaw`pkgs.python2Packages.http-parser`,
  "HTTP request/response parser for python in C",
);

/**
 * Module to parse and serialise HTTP structured field values
 */
export const http_sfv = mkPackage(
  nixRaw`pkgs.python2Packages.http-sfv`,
  "Module to parse and serialise HTTP structured field values",
);

/**
 * Module to extract OS, Browser, etc. information from http user agent string
 */
export const httpagentparser = mkPackage(
  nixRaw`pkgs.python2Packages.httpagentparser`,
  "Module to extract OS, Browser, etc. information from http user agent string",
);

/**
 * WSGI HTTP Digest Authentication middleware
 */
export const httpauth = mkPackage(
  nixRaw`pkgs.python2Packages.httpauth`,
  "WSGI HTTP Digest Authentication middleware",
);

/**
 * HTTP Request and Response Service
 */
export const httpbin = mkPackage(
  nixRaw`pkgs.python2Packages.httpbin`,
  "HTTP Request and Response Service",
);

/**
 * A minimal low-level HTTP client
 */
export const httpcore = mkPackage(
  nixRaw`pkgs.python2Packages.httpcore`,
  "A minimal low-level HTTP client",
);

/**
 * A command line HTTP client whose goal is to make CLI human-friendly
 */
export const httpie = mkPackage(
  nixRaw`pkgs.python2Packages.httpie`,
  "A command line HTTP client whose goal is to make CLI human-friendly",
);

/**
 * NTLM auth plugin for HTTPie
 */
export const httpie_ntlm = mkPackage(
  nixRaw`pkgs.python2Packages.httpie-ntlm`,
  "NTLM auth plugin for HTTPie",
);

/**
 * A comprehensive HTTP client library
 */
export const httplib2 = mkPackage(
  nixRaw`pkgs.python2Packages.httplib2`,
  "A comprehensive HTTP client library",
);

/**
 * HTTP client request mocking tool
 */
export const httpretty = mkPackage(
  nixRaw`pkgs.python2Packages.httpretty`,
  "HTTP client request mocking tool",
);

/**
 * Asyncio implementation of an HTTP server
 */
export const httpserver = mkPackage(
  nixRaw`pkgs.python2Packages.httpserver`,
  "Asyncio implementation of an HTTP server",
);

/**
 * Sign HTTP requests with secure signatures
 */
export const httpsig = mkPackage(
  nixRaw`pkgs.python2Packages.httpsig`,
  "Sign HTTP requests with secure signatures",
);

/**
 * A collection of framework independent HTTP protocol utils
 */
export const httptools = mkPackage(
  nixRaw`pkgs.python2Packages.httptools`,
  "A collection of framework independent HTTP protocol utils",
);

/**
 * The next generation HTTP client
 */
export const httpx = mkPackage(
  nixRaw`pkgs.python2Packages.httpx`,
  "The next generation HTTP client",
);

/**
 * NTLM authentication support for HTTPX
 */
export const httpx_ntlm = mkPackage(
  nixRaw`pkgs.python2Packages.httpx-ntlm`,
  "NTLM authentication support for HTTPX",
);

/**
 * Proxy (HTTP, SOCKS) transports for httpx
 */
export const httpx_socks = mkPackage(
  nixRaw`pkgs.python2Packages.httpx-socks`,
  "Proxy (HTTP, SOCKS) transports for httpx",
);

/**
 * API For huawei LAN/WAN LTE Modems
 */
export const huawei_lte_api = mkPackage(
  nixRaw`pkgs.python2Packages.huawei-lte-api`,
  "API For huawei LAN/WAN LTE Modems",
);

/**
 * A little task queue for python
 */
export const huey = mkPackage(
  nixRaw`pkgs.python2Packages.huey`,
  "A little task queue for python",
);

/**
 * Download and publish models and other files on the huggingface.co hub
 */
export const huggingface_hub = mkPackage(
  nixRaw`pkgs.python2Packages.huggingface-hub`,
  "Download and publish models and other files on the huggingface.co hub",
);

/**
 * Client for Huisbaasje
 */
export const huisbaasje_client = mkPackage(
  nixRaw`pkgs.python2Packages.huisbaasje-client`,
  "Client for Huisbaasje",
);

/**
 * Human friendly output for text interfaces using Python
 */
export const humanfriendly = mkPackage(
  nixRaw`pkgs.python2Packages.humanfriendly`,
  "Human friendly output for text interfaces using Python",
);

/**
 * Python humanize utilities
 */
export const humanize = mkPackage(
  nixRaw`pkgs.python2Packages.humanize`,
  "Python humanize utilities",
);

/**
 * Library that simplifies creating user interfaces with wxPython
 */
export const humblewx = mkPackage(
  nixRaw`pkgs.python2Packages.humblewx`,
  "Library that simplifies creating user interfaces with wxPython",
);

/**
 * In-process file monitor/reloader for reloading your code automatically during development
 */
export const hupper = mkPackage(
  nixRaw`pkgs.python2Packages.hupper`,
  "In-process file monitor/reloader for reloading your code automatically during development",
);

/**
 * Library for Huum saunas
 */
export const huum = mkPackage(
  nixRaw`pkgs.python2Packages.huum`,
  "Library for Huum saunas",
);

/**
 * HashiCorp Vault API client
 */
export const hvac = mkPackage(
  nixRaw`pkgs.python2Packages.hvac`,
  "HashiCorp Vault API client",
);

/**
 * A high-level plotting API for the PyData ecosystem built on HoloViews
 */
export const hvplot = mkPackage(
  nixRaw`pkgs.python2Packages.hvplot`,
  "A high-level plotting API for the PyData ecosystem built on HoloViews",
);

/**
 * Bitcoin Hardware Wallet Interface
 */
export const hwi = mkPackage(
  nixRaw`pkgs.python2Packages.hwi`,
  "Bitcoin Hardware Wallet Interface",
);

/**
 * A LISP dialect embedded in Python
 */
export const hy = mkPackage(
  nixRaw`pkgs.python2Packages.hy`,
  "A LISP dialect embedded in Python",
);

/**
 * check hydra for the build status of a package
 */
export const hydra_check = mkPackage(
  nixRaw`pkgs.python2Packages.hydra-check`,
  "check hydra for the build status of a package",
);

/**
 * A framework for configuring complex applications
 */
export const hydra_core = mkPackage(
  nixRaw`pkgs.python2Packages.hydra-core`,
  "A framework for configuring complex applications",
);

/**
 * Python library for Hydrawise API
 */
export const hydrawiser = mkPackage(
  nixRaw`pkgs.python2Packages.hydrawiser`,
  "Python library for Hydrawise API",
);

/**
 * Python module implementing the Hydrus API
 */
export const hydrus_api = mkPackage(
  nixRaw`pkgs.python2Packages.hydrus-api`,
  "Python module implementing the Hydrus API",
);

export const hypchat = mkPackage(
  nixRaw`pkgs.python2Packages.hypchat`,
  "",
);

/**
 * The ASGI web server inspired by Gunicorn
 */
export const hypercorn = mkPackage(
  nixRaw`pkgs.python2Packages.hypercorn`,
  "The ASGI web server inspired by Gunicorn",
);

/**
 * HTTP/2 framing layer for Python
 */
export const hyperframe = mkPackage(
  nixRaw`pkgs.python2Packages.hyperframe`,
  "HTTP/2 framing layer for Python",
);

/**
 * Python package for Hyperion Ambient Lighting
 */
export const hyperion_py = mkPackage(
  nixRaw`pkgs.python2Packages.hyperion-py`,
  "Python package for Hyperion Ambient Lighting",
);

/**
 * A featureful, correct URL for Python
 */
export const hyperlink = mkPackage(
  nixRaw`pkgs.python2Packages.hyperlink`,
  "A featureful, correct URL for Python",
);

/**
 * Distributed Asynchronous Hyperparameter Optimization
 */
export const hyperopt = mkPackage(
  nixRaw`pkgs.python2Packages.hyperopt`,
  "Distributed Asynchronous Hyperparameter Optimization",
);

/**
 * Extensions to YAML syntax for better python interaction
 */
export const hyperpyyaml = mkPackage(
  nixRaw`pkgs.python2Packages.hyperpyyaml`,
  "Extensions to YAML syntax for better python interaction",
);

/**
 * A CPython extension for the Hyperscan regular expression matching library
 */
export const hyperscan = mkPackage(
  nixRaw`pkgs.python2Packages.hyperscan`,
  "A CPython extension for the Hyperscan regular expression matching library",
);

/**
 * A Python library for property based testing
 */
export const hypothesis = mkPackage(
  nixRaw`pkgs.python2Packages.hypothesis`,
  "A Python library for property based testing",
);

/**
 * Enables fully automatic tests for type annotated functions
 */
export const hypothesis_auto = mkPackage(
  nixRaw`pkgs.python2Packages.hypothesis-auto`,
  "Enables fully automatic tests for type annotated functions",
);

/**
 * Hypothesis strategies for generating Python programs, something like CSmith
 */
export const hypothesmith = mkPackage(
  nixRaw`pkgs.python2Packages.hypothesmith`,
  "Hypothesis strategies for generating Python programs, something like CSmith",
);

/**
 * Python package for multivariate hypothesis testing
 */
export const hyppo = mkPackage(
  nixRaw`pkgs.python2Packages.hyppo`,
  "Python package for multivariate hypothesis testing",
);

/**
 * Hyrule is a utility library for the Hy programming language
 */
export const hyrule = mkPackage(
  nixRaw`pkgs.python2Packages.hyrule`,
  "Hyrule is a utility library for the Hy programming language",
);

/**
 * wrapper for i2c-tools' smbus stuff
 */
export const i2c_tools = mkPackage(
  nixRaw`pkgs.python2Packages.i2c-tools`,
  "wrapper for i2c-tools' smbus stuff",
);

/**
 * A library to handle i2c sensors with the Raspberry Pi
 */
export const i2csense = mkPackage(
  nixRaw`pkgs.python2Packages.i2csense`,
  "A library to handle i2c sensors with the Raspberry Pi",
);

/**
 * Tools for i3 users and developers
 */
export const i3_py = mkPackage(
  nixRaw`pkgs.python2Packages.i3-py`,
  "Tools for i3 users and developers",
);

/**
 * An improved Python library to control i3wm and sway
 */
export const i3ipc = mkPackage(
  nixRaw`pkgs.python2Packages.i3ipc`,
  "An improved Python library to control i3wm and sway",
);

/**
 * A universal force engine for ab initio and force field driven (path integral) molecular dynamics
 */
export const i_pi = mkPackage(
  nixRaw`pkgs.python2Packages.i-pi`,
  "A universal force engine for ab initio and force field driven (path integral) molecular dynamics",
);

/**
 * Module to work with the IamMeter API
 */
export const iammeter = mkPackage(
  nixRaw`pkgs.python2Packages.iammeter`,
  "Module to work with the IamMeter API",
);

/**
 * Python implementation of standard from IAPWS
 */
export const iapws = mkPackage(
  nixRaw`pkgs.python2Packages.iapws`,
  "Python implementation of standard from IAPWS",
);

/**
 * Python library for Jandy iAqualink
 */
export const iaqualink = mkPackage(
  nixRaw`pkgs.python2Packages.iaqualink`,
  "Python library for Jandy iAqualink",
);

/**
 * Library for iBeacon BLE devices
 */
export const ibeacon_ble = mkPackage(
  nixRaw`pkgs.python2Packages.ibeacon-ble`,
  "Library for iBeacon BLE devices",
);

/**
 * Lightweight template engine
 */
export const ibis = mkPackage(
  nixRaw`pkgs.python2Packages.ibis`,
  "Lightweight template engine",
);

/**
 * Productivity-centric Python Big Data Framework
 */
export const ibis_framework = mkPackage(
  nixRaw`pkgs.python2Packages.ibis-framework`,
  "Productivity-centric Python Big Data Framework",
);

/**
 * Client library for the IBM Cloud services
 */
export const ibm_cloud_sdk_core = mkPackage(
  nixRaw`pkgs.python2Packages.ibm-cloud-sdk-core`,
  "Client library for the IBM Cloud services",
);

/**
 * Client library to use the IBM Watson Services
 */
export const ibm_watson = mkPackage(
  nixRaw`pkgs.python2Packages.ibm-watson`,
  "Client library to use the IBM Watson Services",
);

/**
 * Library for handling iCalendar
 */
export const ical = mkPackage(
  nixRaw`pkgs.python2Packages.ical`,
  "Library for handling iCalendar",
);

/**
 * A parser/generator of iCalendar files
 */
export const icalendar = mkPackage(
  nixRaw`pkgs.python2Packages.icalendar`,
  "A parser/generator of iCalendar files",
);

/**
 * A little library for sweet and creamy print debugging
 */
export const icecream = mkPackage(
  nixRaw`pkgs.python2Packages.icecream`,
  "A little library for sweet and creamy print debugging",
);

/**
 * Library for getting data from the ICE Portal
 */
export const iceportal = mkPackage(
  nixRaw`pkgs.python2Packages.iceportal`,
  "Library for getting data from the ICE Portal",
);

/**
 * Python implementation of the ICMP protocol
 */
export const icmplib = mkPackage(
  nixRaw`pkgs.python2Packages.icmplib`,
  "Python implementation of the ICMP protocol",
);

/**
 * Create and extract .icns files
 */
export const icnsutil = mkPackage(
  nixRaw`pkgs.python2Packages.icnsutil`,
  "Create and extract .icns files",
);

/**
 * Extract icons from Windows PE files
 */
export const icoextract = mkPackage(
  nixRaw`pkgs.python2Packages.icoextract`,
  "Extract icons from Windows PE files",
);

/**
 * Provide design-by-contract with informative violation messages
 */
export const icontract = mkPackage(
  nixRaw`pkgs.python2Packages.icontract`,
  "Provide design-by-contract with informative violation messages",
);

/**
 * Pythonic and easy iCalendar library (RFC 5545)
 */
export const ics = mkPackage(
  nixRaw`pkgs.python2Packages.ics`,
  "Pythonic and easy iCalendar library (RFC 5545)",
);

/**
 * Python API and CLI for the ikea IDÅSEN desk
 */
export const idasen = mkPackage(
  nixRaw`pkgs.python2Packages.idasen`,
  "Python API and CLI for the ikea IDÅSEN desk",
);

/**
 * File identification library for Python
 */
export const identify = mkPackage(
  nixRaw`pkgs.python2Packages.identify`,
  "File identification library for Python",
);

/**
 * Internationalized Domain Names in Applications (IDNA)
 */
export const idna = mkPackage(
  nixRaw`pkgs.python2Packages.idna`,
  "Internationalized Domain Names in Applications (IDNA)",
);

/**
 * Patch ssl.match_hostname for Unicode(idna) domains support
 */
export const idna_ssl = mkPackage(
  nixRaw`pkgs.python2Packages.idna-ssl`,
  "Patch ssl.match_hostname for Unicode(idna) domains support",
);

/**
 * Enumerates all IP addresses on all network adapters of the system
 */
export const ifaddr = mkPackage(
  nixRaw`pkgs.python2Packages.ifaddr`,
  "Enumerates all IP addresses on all network adapters of the system",
);

/**
 * Unsophisticated python package for parsing raw output of ifconfig.
 */
export const ifconfig_parser = mkPackage(
  nixRaw`pkgs.python2Packages.ifconfig-parser`,
  "Unsophisticated python package for parsing raw output of ifconfig.",
);

/**
 * Open source IFC library and geometry engine
 */
export const ifcopenshell = mkPackage(
  nixRaw`pkgs.python2Packages.ifcopenshell`,
  "Open source IFC library and geometry engine",
);

/**
 * High-level training library for PyTorch
 */
export const ignite = mkPackage(
  nixRaw`pkgs.python2Packages.ignite`,
  "High-level training library for PyTorch",
);

/**
 * High performance graph data structures and algorithms
 */
export const igraph = mkPackage(
  nixRaw`pkgs.python2Packages.igraph`,
  "High performance graph data structures and algorithms",
);

/**
 * Python package for handling IHM mmCIF and BinaryCIF files
 */
export const ihm = mkPackage(
  nixRaw`pkgs.python2Packages.ihm`,
  "Python package for handling IHM mmCIF and BinaryCIF files",
);

/**
 * Iterated integral signature calculations
 */
export const iisignature = mkPackage(
  nixRaw`pkgs.python2Packages.iisignature`,
  "Iterated integral signature calculations",
);

/**
 * Iterative JSON parser with a standard Python iterator interface
 */
export const ijson = mkPackage(
  nixRaw`pkgs.python2Packages.ijson`,
  "Iterative JSON parser with a standard Python iterator interface",
);

/**
 * Portable Lua kernel for Jupyter
 */
export const ilua = mkPackage(
  nixRaw`pkgs.python2Packages.ilua`,
  "Portable Lua kernel for Jupyter",
);

/**
 * CLI tool for comparing images
 */
export const image_diff = mkPackage(
  nixRaw`pkgs.python2Packages.image-diff`,
  "CLI tool for comparing images",
);

/**
 * A tool that can convert rgb images to nordtheme palette
 */
export const image_go_nord = mkPackage(
  nixRaw`pkgs.python2Packages.image-go-nord`,
  "A tool that can convert rgb images to nordtheme palette",
);

/**
 * Block-oriented, in-memory buffer transformation, compression, and decompression functions
 */
export const imagecodecs_lite = mkPackage(
  nixRaw`pkgs.python2Packages.imagecodecs-lite`,
  "Block-oriented, in-memory buffer transformation, compression, and decompression functions",
);

/**
 * This package provides a set of image corruptions
 */
export const imagecorruptions = mkPackage(
  nixRaw`pkgs.python2Packages.imagecorruptions`,
  "This package provides a set of image corruptions",
);

/**
 * Finding duplicate images made easy
 */
export const imagededup = mkPackage(
  nixRaw`pkgs.python2Packages.imagededup`,
  "Finding duplicate images made easy",
);

/**
 * A Python Perceptual Image Hashing Module
 */
export const imagehash = mkPackage(
  nixRaw`pkgs.python2Packages.imagehash`,
  "A Python Perceptual Image Hashing Module",
);

/**
 * Library for reading and writing a wide range of image, video, scientific, and volumetric data formats
 */
export const imageio = mkPackage(
  nixRaw`pkgs.python2Packages.imageio`,
  "Library for reading and writing a wide range of image, video, scientific, and volumetric data formats",
);

/**
 * FFMPEG wrapper for Python
 */
export const imageio_ffmpeg = mkPackage(
  nixRaw`pkgs.python2Packages.imageio-ffmpeg`,
  "FFMPEG wrapper for Python",
);

/**
 * Getting image size from png/jpeg/jpeg2000/gif file
 */
export const imagesize = mkPackage(
  nixRaw`pkgs.python2Packages.imagesize`,
  "Getting image size from png/jpeg/jpeg2000/gif file",
);

/**
 * Convert and visualize many annotation formats for object dectection and localization
 */
export const imantics = mkPackage(
  nixRaw`pkgs.python2Packages.imantics`,
  "Convert and visualize many annotation formats for object dectection and localization",
);

/**
 * Work with email and mailbox by IMAP
 */
export const imap_tools = mkPackage(
  nixRaw`pkgs.python2Packages.imap-tools`,
  "Work with email and mailbox by IMAP",
);

/**
 * Easy-to-use, Pythonic and complete IMAP client library
 */
export const imapclient = mkPackage(
  nixRaw`pkgs.python2Packages.imapclient`,
  "Easy-to-use, Pythonic and complete IMAP client library",
);

/**
 * A threaded Python IMAP4 client
 */
export const imaplib2 = mkPackage(
  nixRaw`pkgs.python2Packages.imaplib2`,
  "A threaded Python IMAP4 client",
);

/**
 * Library offering a number of re-sampling techniques commonly used in datasets showing strong between-class imbalance
 */
export const imbalanced_learn = mkPackage(
  nixRaw`pkgs.python2Packages.imbalanced-learn`,
  "Library offering a number of re-sampling techniques commonly used in datasets showing strong between-class imbalance",
);

/**
 * Convert images to PDF via direct JPEG inclusion
 */
export const img2pdf = mkPackage(
  nixRaw`pkgs.python2Packages.img2pdf`,
  "Convert images to PDF via direct JPEG inclusion",
);

/**
 * Compare two images side-by-side
 */
export const imgdiff = mkPackage(
  nixRaw`pkgs.python2Packages.imgdiff`,
  "Compare two images side-by-side",
);

/**
 * Pure Python image size library
 */
export const imgsize = mkPackage(
  nixRaw`pkgs.python2Packages.imgsize`,
  "Pure Python image size library",
);

/**
 * Python interface for the Minuit2 C++ library
 */
export const iminuit = mkPackage(
  nixRaw`pkgs.python2Packages.iminuit`,
  "Python interface for the Minuit2 C++ library",
);

/**
 * A fork of frozendict, an immutable wrapper around dictionaries
 */
export const immutabledict = mkPackage(
  nixRaw`pkgs.python2Packages.immutabledict`,
  "A fork of frozendict, an immutable wrapper around dictionaries",
);

/**
 * An immutable mapping type
 */
export const immutables = mkPackage(
  nixRaw`pkgs.python2Packages.immutables`,
  "An immutable mapping type",
);

/**
 * Network protocols Constructors and Dissectors
 */
export const impacket = mkPackage(
  nixRaw`pkgs.python2Packages.impacket`,
  "Network protocols Constructors and Dissectors",
);

/**
 * A library that automatically infers dependencies for Python files
 */
export const importlab = mkPackage(
  nixRaw`pkgs.python2Packages.importlab`,
  "A library that automatically infers dependencies for Python files",
);

/**
 * Read metadata from Python packages
 */
export const importlib_metadata = mkPackage(
  nixRaw`pkgs.python2Packages.importlib-metadata`,
  "Read metadata from Python packages",
);

/**
 * Read resources from Python packages
 */
export const importlib_resources = mkPackage(
  nixRaw`pkgs.python2Packages.importlib-resources`,
  "Read resources from Python packages",
);

/**
 * Python Import Magic - automagically add, remove and manage imports
 */
export const importmagic = mkPackage(
  nixRaw`pkgs.python2Packages.importmagic`,
  "Python Import Magic - automagically add, remove and manage imports",
);

/**
 * Python package to load images as numpy arrays
 */
export const imread = mkPackage(
  nixRaw`pkgs.python2Packages.imread`,
  "Python package to load images as numpy arrays",
);

/**
 * A series of convenience functions to make basic image processing functions
 */
export const imutils = mkPackage(
  nixRaw`pkgs.python2Packages.imutils`,
  "A series of convenience functions to make basic image processing functions",
);

/**
 * Module for dependency injection and result processing
 */
export const in_n_out = mkPackage(
  nixRaw`pkgs.python2Packages.in-n-out`,
  "Module for dependency injection and result processing",
);

/**
 * In-place file processing
 */
export const in_place = mkPackage(
  nixRaw`pkgs.python2Packages.in-place`,
  "In-place file processing",
);

/**
 * Python module to poll Intergas boilers via a Lan2RF gateway
 */
export const incomfort_client = mkPackage(
  nixRaw`pkgs.python2Packages.incomfort-client`,
  "Python module to poll Intergas boilers via a Lan2RF gateway",
);

/**
 * Incremental is a small library that versions your Python projects
 */
export const incremental = mkPackage(
  nixRaw`pkgs.python2Packages.incremental`,
  "Incremental is a small library that versions your Python projects",
);

/**
 * Python library for parallel decompression and seeking within compressed bzip2 files
 */
export const indexed_bzip2 = mkPackage(
  nixRaw`pkgs.python2Packages.indexed-bzip2`,
  "Python library for parallel decompression and seeking within compressed bzip2 files",
);

/**
 * Python library to seek within compressed gzip files
 */
export const indexed_gzip = mkPackage(
  nixRaw`pkgs.python2Packages.indexed-gzip`,
  "Python library to seek within compressed gzip files",
);

/**
 * Python library to seek within compressed zstd files
 */
export const indexed_zstd = mkPackage(
  nixRaw`pkgs.python2Packages.indexed-zstd`,
  "Python library to seek within compressed zstd files",
);

/**
 * All-in-one infinity value for Python. Can be compared to any object.
 */
export const infinity = mkPackage(
  nixRaw`pkgs.python2Packages.infinity`,
  "All-in-one infinity value for Python. Can be compared to any object.",
);

/**
 * Correctly generate plurals, singular nouns, ordinals, indefinite articles
 */
export const inflect = mkPackage(
  nixRaw`pkgs.python2Packages.inflect`,
  "Correctly generate plurals, singular nouns, ordinals, indefinite articles",
);

/**
 * A port of Ruby on Rails inflector to Python
 */
export const inflection = mkPackage(
  nixRaw`pkgs.python2Packages.inflection`,
  "A port of Ruby on Rails inflector to Python",
);

/**
 * Python client for InfluxDB
 */
export const influxdb = mkPackage(
  nixRaw`pkgs.python2Packages.influxdb`,
  "Python client for InfluxDB",
);

/**
 * InfluxDB client library
 */
export const influxdb_client = mkPackage(
  nixRaw`pkgs.python2Packages.influxdb-client`,
  "InfluxDB client library",
);

/**
 * Print and logging utilities
 */
export const inform = mkPackage(
  nixRaw`pkgs.python2Packages.inform`,
  "Print and logging utilities",
);

/**
 * brain-dead simple parsing of ini files
 */
export const iniconfig = mkPackage(
  nixRaw`pkgs.python2Packages.iniconfig`,
  "brain-dead simple parsing of ini files",
);

/**
 * A small INI library for Python
 */
export const inifile = mkPackage(
  nixRaw`pkgs.python2Packages.inifile`,
  "A small INI library for Python",
);

/**
 * Accessing and Modifying INI files
 */
export const iniparse = mkPackage(
  nixRaw`pkgs.python2Packages.iniparse`,
  "Accessing and Modifying INI files",
);

/**
 * Python dependency injection framework, inspired by Guice
 */
export const injector = mkPackage(
  nixRaw`pkgs.python2Packages.injector`,
  "Python dependency injection framework, inspired by Guice",
);

/**
 * Library for Inkbird BLE devices
 */
export const inkbird_ble = mkPackage(
  nixRaw`pkgs.python2Packages.inkbird-ble`,
  "Library for Inkbird BLE devices",
);

/**
 * Library for manipulating SVG documents which is the basis for Inkscape extensions
 */
export const inkex = mkPackage(
  nixRaw`pkgs.python2Packages.inkex`,
  "Library for manipulating SVG documents which is the basis for Inkscape extensions",
);

/**
 * A simple CSS inliner for generating HTML email messages
 */
export const inlinestyler = mkPackage(
  nixRaw`pkgs.python2Packages.inlinestyler`,
  "A simple CSS inliner for generating HTML email messages",
);

/**
 * Monitor filesystems events on Linux platforms with inotify
 */
export const inotify = mkPackage(
  nixRaw`pkgs.python2Packages.inotify`,
  "Monitor filesystems events on Linux platforms with inotify",
);

/**
 * A simple Python wrapper around inotify
 */
export const inotify_simple = mkPackage(
  nixRaw`pkgs.python2Packages.inotify-simple`,
  "A simple Python wrapper around inotify",
);

/**
 * Simple recursive inotify watches for Python
 */
export const inotifyrecursive = mkPackage(
  nixRaw`pkgs.python2Packages.inotifyrecursive`,
  "Simple recursive inotify watches for Python",
);

/**
 * A collection of common interactive command line user interfaces, based on Inquirer.js
 */
export const inquirer = mkPackage(
  nixRaw`pkgs.python2Packages.inquirer`,
  "A collection of common interactive command line user interfaces, based on Inquirer.js",
);

/**
 * Python port of Inquirer.js
 */
export const inquirerpy = mkPackage(
  nixRaw`pkgs.python2Packages.inquirerpy`,
  "Python port of Inquirer.js",
);

/**
 * HTML to text converter
 */
export const inscriptis = mkPackage(
  nixRaw`pkgs.python2Packages.inscriptis`,
  "HTML to text converter",
);

/**
 * A monochrome 2 column Sphinx theme
 */
export const insegel = mkPackage(
  nixRaw`pkgs.python2Packages.insegel`,
  "A monochrome 2 column Sphinx theme",
);

/**
 * A low-level library for installing a Python package from a wheel distribution
 */
export const installer = mkPackage(
  nixRaw`pkgs.python2Packages.installer`,
  "A low-level library for installing a Python package from a wheel distribution",
);

/**
 * The Insteon frontend for Home Assistant
 */
export const insteon_frontend_home_assistant = mkPackage(
  nixRaw`pkgs.python2Packages.insteon-frontend-home-assistant`,
  "The Insteon frontend for Home Assistant",
);

/**
 * Data load and catalog system
 */
export const intake = mkPackage(
  nixRaw`pkgs.python2Packages.intake`,
  "Data load and catalog system",
);

/**
 * Parquet plugin for Intake
 */
export const intake_parquet = mkPackage(
  nixRaw`pkgs.python2Packages.intake-parquet`,
  "Parquet plugin for Intake",
);

/**
 * C-based extension implementing fast integer bit sets
 */
export const intbitset = mkPackage(
  nixRaw`pkgs.python2Packages.intbitset`,
  "C-based extension implementing fast integer bit sets",
);

/**
 * Python library for Intel HEX files manipulations
 */
export const intelhex = mkPackage(
  nixRaw`pkgs.python2Packages.intelhex`,
  "Python library for Intel HEX files manipulations",
);

/**
 * Module to read Intellifire fireplace status data
 */
export const intellifire4py = mkPackage(
  nixRaw`pkgs.python2Packages.intellifire4py`,
  "Module to read Intellifire fireplace status data",
);

/**
 * MRI intensity normalization tools
 */
export const intensity_normalization = mkPackage(
  nixRaw`pkgs.python2Packages.intensity-normalization`,
  "MRI intensity normalization tools",
);

/**
 * Convenient way to expose an extensible API with enforced method signatures and consistent documentation
 */
export const interface_meta = mkPackage(
  nixRaw`pkgs.python2Packages.interface-meta`,
  "Convenient way to expose an extensible API with enforced method signatures and consistent documentation",
);

/**
 * A Python and Command-Line Interface to Archive.org
 */
export const internetarchive = mkPackage(
  nixRaw`pkgs.python2Packages.internetarchive`,
  "A Python and Command-Line Interface to Archive.org",
);

/**
 * A watchdog that interrupts long running code
 */
export const interruptingcow = mkPackage(
  nixRaw`pkgs.python2Packages.interruptingcow`,
  "A watchdog that interrupts long running code",
);

/**
 * Editable interval tree data structure for Python 2 and 3
 */
export const intervaltree = mkPackage(
  nixRaw`pkgs.python2Packages.intervaltree`,
  "Editable interval tree data structure for Python 2 and 3",
);

/**
 * A transformer to dbus-python types
 */
export const into_dbus_python = mkPackage(
  nixRaw`pkgs.python2Packages.into-dbus-python`,
  "A transformer to dbus-python types",
);

/**
 * A library for creating and decoding invisible image watermarks
 */
export const invisible_watermark = mkPackage(
  nixRaw`pkgs.python2Packages.invisible-watermark`,
  "A library for creating and decoding invisible image watermarks",
);

/**
 * Common/best-practice Invoke tasks and collections
 */
export const invocations = mkPackage(
  nixRaw`pkgs.python2Packages.invocations`,
  "Common/best-practice Invoke tasks and collections",
);

/**
 * Pythonic task execution
 */
export const invoke = mkPackage(
  nixRaw`pkgs.python2Packages.invoke`,
  "Pythonic task execution",
);

/**
 * Capture stdout, stderr easily.
 */
export const iocapture = mkPackage(
  nixRaw`pkgs.python2Packages.iocapture`,
  "Capture stdout, stderr easily.",
);

/**
 * Module to extract Indicator of Compromises (IOC)
 */
export const iocextract = mkPackage(
  nixRaw`pkgs.python2Packages.iocextract`,
  "Module to extract Indicator of Compromises (IOC)",
);

/**
 * Python library for reading, writing, and converting computational chemistry file formats and generating input files
 */
export const iodata = mkPackage(
  nixRaw`pkgs.python2Packages.iodata`,
  "Python library for reading, writing, and converting computational chemistry file formats and generating input files",
);

/**
 * Python implementation of Amazon Ion Hash
 */
export const ionhash = mkPackage(
  nixRaw`pkgs.python2Packages.ionhash`,
  "Python implementation of Amazon Ion Hash",
);

/**
 * A python library that provides common I/O interface across different storage backends.
 */
export const iopath = mkPackage(
  nixRaw`pkgs.python2Packages.iopath`,
  "A python library that provides common I/O interface across different storage backends.",
);

/**
 * Python interface for the IoTaWatt device
 */
export const iotawattpy = mkPackage(
  nixRaw`pkgs.python2Packages.iotawattpy`,
  "Python interface for the IoTaWatt device",
);

/**
 * Platform-independent module for I/O completion events
 */
export const iowait = mkPackage(
  nixRaw`pkgs.python2Packages.iowait`,
  "Platform-independent module for I/O completion events",
);

/**
 * IP address manipulation library
 */
export const ipaddr = mkPackage(
  nixRaw`pkgs.python2Packages.ipaddr`,
  "IP address manipulation library",
);

/**
 * Contemporary Written Japanese dictionary
 */
export const ipadic = mkPackage(
  nixRaw`pkgs.python2Packages.ipadic`,
  "Contemporary Written Japanese dictionary",
);

/**
 * IPython-enabled pdb
 */
export const ipdb = mkPackage(
  nixRaw`pkgs.python2Packages.ipdb`,
  "IPython-enabled pdb",
);

/**
 * Nose plugin to use iPdb instead of Pdb when tests fail
 */
export const ipdbplugin = mkPackage(
  nixRaw`pkgs.python2Packages.ipdbplugin`,
  "Nose plugin to use iPdb instead of Pdb when tests fail",
);

/**
 * A python client library for the IPFS API
 */
export const ipfshttpclient = mkPackage(
  nixRaw`pkgs.python2Packages.ipfshttpclient`,
  "A python client library for the IPFS API",
);

/**
 * Utilities for manipulating IP addresses including a class that can be used to include CIDR network blocks in Django's INTERNAL_IPS setting
 */
export const iptools = mkPackage(
  nixRaw`pkgs.python2Packages.iptools`,
  "Utilities for manipulating IP addresses including a class that can be used to include CIDR network blocks in Django's INTERNAL_IPS setting",
);

/**
 * Utilities for the InterPlanetary Wheels
 */
export const ipwhl = mkPackage(
  nixRaw`pkgs.python2Packages.ipwhl`,
  "Utilities for the InterPlanetary Wheels",
);

/**
 * Library to retrieve and parse whois data
 */
export const ipwhois = mkPackage(
  nixRaw`pkgs.python2Packages.ipwhois`,
  "Library to retrieve and parse whois data",
);

/**
 * Class and tools for handling of IPv4 and IPv6 addresses and networks
 */
export const ipy = mkPackage(
  nixRaw`pkgs.python2Packages.ipy`,
  "Class and tools for handling of IPv4 and IPv6 addresses and networks",
);

/**
 * Expose the browser's Canvas API to IPython
 */
export const ipycanvas = mkPackage(
  nixRaw`pkgs.python2Packages.ipycanvas`,
  "Expose the browser's Canvas API to IPython",
);

/**
 * Widgets to help facilitate reuse of large datasets across different widgets
 */
export const ipydatawidgets = mkPackage(
  nixRaw`pkgs.python2Packages.ipydatawidgets`,
  "Widgets to help facilitate reuse of large datasets across different widgets",
);

/**
 * IPython Kernel for Jupyter
 */
export const ipykernel = mkPackage(
  nixRaw`pkgs.python2Packages.ipykernel`,
  "IPython Kernel for Jupyter",
);

/**
 * Collection of NLP visualizations for NER and syntax tree markup
 */
export const ipymarkup = mkPackage(
  nixRaw`pkgs.python2Packages.ipymarkup`,
  "Collection of NLP visualizations for NER and syntax tree markup",
);

/**
 * Matplotlib Jupyter Extension
 */
export const ipympl = mkPackage(
  nixRaw`pkgs.python2Packages.ipympl`,
  "Matplotlib Jupyter Extension",
);

/**
 * Simply returns either notebook filename or the full path to the notebook
 */
export const ipynbname = mkPackage(
  nixRaw`pkgs.python2Packages.ipynbname`,
  "Simply returns either notebook filename or the full path to the notebook",
);

/**
 * Show a nifti image in a webgl 2.0 canvas within a jupyter notebook cell
 */
export const ipyniivue = mkPackage(
  nixRaw`pkgs.python2Packages.ipyniivue`,
  "Show a nifti image in a webgl 2.0 canvas within a jupyter notebook cell",
);

/**
 * Interactive Parallel Computing with IPython
 */
export const ipyparallel = mkPackage(
  nixRaw`pkgs.python2Packages.ipyparallel`,
  "Interactive Parallel Computing with IPython",
);

/**
 * Traitlets and widgets to efficiently data tables (e.g. Pandas DataFrame) using the jupyter notebook
 */
export const ipytablewidgets = mkPackage(
  nixRaw`pkgs.python2Packages.ipytablewidgets`,
  "Traitlets and widgets to efficiently data tables (e.g. Pandas DataFrame) using the jupyter notebook",
);

/**
 * IPython: Productive Interactive Computing
 */
export const ipython = mkPackage(
  nixRaw`pkgs.python2Packages.ipython`,
  "IPython: Productive Interactive Computing",
);

/**
 * Vestigial utilities from IPython
 */
export const ipython_genutils = mkPackage(
  nixRaw`pkgs.python2Packages.ipython-genutils`,
  "Vestigial utilities from IPython",
);

/**
 * Introduces a %sql (or %%sql) magic.
 */
export const ipython_sql = mkPackage(
  nixRaw`pkgs.python2Packages.ipython-sql`,
  "Introduces a %sql (or %%sql) magic.",
);

/**
 * Jupyter widgets base for Vue libraries
 */
export const ipyvue = mkPackage(
  nixRaw`pkgs.python2Packages.ipyvue`,
  "Jupyter widgets base for Vue libraries",
);

/**
 * Jupyter widgets based on Vuetify UI Components.
 */
export const ipyvuetify = mkPackage(
  nixRaw`pkgs.python2Packages.ipyvuetify`,
  "Jupyter widgets based on Vuetify UI Components.",
);

/**
 * IPython HTML widgets for Jupyter
 */
export const ipywidgets = mkPackage(
  nixRaw`pkgs.python2Packages.ipywidgets`,
  "IPython HTML widgets for Jupyter",
);

/**
 * IP-XACT parser
 */
export const ipyxact = mkPackage(
  nixRaw`pkgs.python2Packages.ipyxact`,
  "IP-XACT parser",
);

/**
 * IRC (Internet Relay Chat) protocol library for Python
 */
export const irc = mkPackage(
  nixRaw`pkgs.python2Packages.irc`,
  "IRC (Internet Relay Chat) protocol library for Python",
);

/**
 * Asynchronous bare-bones IRC bot framework for python3
 */
export const ircrobots = mkPackage(
  nixRaw`pkgs.python2Packages.ircrobots`,
  "Asynchronous bare-bones IRC bot framework for python3",
);

/**
 * sans-I/O IRC session state parsing library
 */
export const ircstates = mkPackage(
  nixRaw`pkgs.python2Packages.ircstates`,
  "sans-I/O IRC session state parsing library",
);

/**
 * RFC1459 and IRCv3 protocol tokeniser library for python3
 */
export const irctokens = mkPackage(
  nixRaw`pkgs.python2Packages.irctokens`,
  "RFC1459 and IRCv3 protocol tokeniser library for python3",
);

/**
 * Extract, clean, transform, hyphenate and metadata for ISBNs
 */
export const isbnlib = mkPackage(
  nixRaw`pkgs.python2Packages.isbnlib`,
  "Extract, clean, transform, hyphenate and metadata for ISBNs",
);

/**
 * Python wrapper around isl, an integer set library
 */
export const islpy = mkPackage(
  nixRaw`pkgs.python2Packages.islpy`,
  "Python wrapper around isl, an integer set library",
);

/**
 * Python module to work with the ismartgate and gogogate2 API
 */
export const ismartgate = mkPackage(
  nixRaw`pkgs.python2Packages.ismartgate`,
  "Python module to work with the ismartgate and gogogate2 API",
);

/**
 * Self-contained ISO 3166-1 country definitions
 */
export const iso3166 = mkPackage(
  nixRaw`pkgs.python2Packages.iso3166`,
  "Self-contained ISO 3166-1 country definitions",
);

/**
 * ISO 4217 currency data package for Python
 */
export const iso4217 = mkPackage(
  nixRaw`pkgs.python2Packages.iso4217`,
  "ISO 4217 currency data package for Python",
);

/**
 * Simple module to parse ISO 8601 dates
 */
export const iso8601 = mkPackage(
  nixRaw`pkgs.python2Packages.iso8601`,
  "Simple module to parse ISO 8601 dates",
);

/**
 * ISO 639 library for Python
 */
export const iso_639 = mkPackage(
  nixRaw`pkgs.python2Packages.iso-639`,
  "ISO 639 library for Python",
);

/**
 * ISO 8601 date/time parser
 */
export const isodate = mkPackage(
  nixRaw`pkgs.python2Packages.isodate`,
  "ISO 8601 date/time parser",
);

/**
 * Library for operations with ISO 8601 durations
 */
export const isoduration = mkPackage(
  nixRaw`pkgs.python2Packages.isoduration`,
  "Library for operations with ISO 8601 durations",
);

/**
 * A Python utility / library to sort Python imports
 */
export const isort = mkPackage(
  nixRaw`pkgs.python2Packages.isort`,
  "A Python utility / library to sort Python imports",
);

/**
 * Construct isolines/isosurfaces of a 2D/3D scalar field defined by a function
 */
export const isosurfaces = mkPackage(
  nixRaw`pkgs.python2Packages.isosurfaces`,
  "Construct isolines/isosurfaces of a 2D/3D scalar field defined by a function",
);

/**
 * Python package for conversion and transliteration of unicode into ascii or iso-8859-1
 */
export const isounidecode = mkPackage(
  nixRaw`pkgs.python2Packages.isounidecode`,
  "Python package for conversion and transliteration of unicode into ascii or iso-8859-1",
);

/**
 * The module provide the class Week. Instances represent specific weeks spanning Monday to Sunday.
 */
export const isoweek = mkPackage(
  nixRaw`pkgs.python2Packages.isoweek`,
  "The module provide the class Week. Instances represent specific weeks spanning Monday to Sunday.",
);

/**
 * Python parser for the Itanium C++ ABI symbol mangling language
 */
export const itanium_demangler = mkPackage(
  nixRaw`pkgs.python2Packages.itanium-demangler`,
  "Python parser for the Itanium C++ ABI symbol mangling language",
);

/**
 * Common interface for data container classes
 */
export const itemadapter = mkPackage(
  nixRaw`pkgs.python2Packages.itemadapter`,
  "Common interface for data container classes",
);

/**
 * Easy transactional database for Python dicts, backed by SQLite
 */
export const itemdb = mkPackage(
  nixRaw`pkgs.python2Packages.itemdb`,
  "Easy transactional database for Python dicts, backed by SQLite",
);

/**
 * Base library for scrapy's ItemLoader
 */
export const itemloaders = mkPackage(
  nixRaw`pkgs.python2Packages.itemloaders`,
  "Base library for scrapy's ItemLoader",
);

/**
 * Utilities based on Pythons iterators and generators
 */
export const iteration_utilities = mkPackage(
  nixRaw`pkgs.python2Packages.iteration-utilities`,
  "Utilities based on Pythons iterators and generators",
);

/**
 * Common library to send usage telemetry
 */
export const iterative_telemetry = mkPackage(
  nixRaw`pkgs.python2Packages.iterative-telemetry`,
  "Common library to send usage telemetry",
);

/**
 * Python interface to iTerm2's scripting API
 */
export const iterm2 = mkPackage(
  nixRaw`pkgs.python2Packages.iterm2`,
  "Python interface to iTerm2's scripting API",
);

/**
 * Safely pass data to untrusted environments and back
 */
export const itsdangerous = mkPackage(
  nixRaw`pkgs.python2Packages.itsdangerous`,
  "Safely pass data to untrusted environments and back",
);

/**
 * A simple library to fetch data from the iTunes Store API
 */
export const itunespy = mkPackage(
  nixRaw`pkgs.python2Packages.itunespy`,
  "A simple library to fetch data from the iTunes Store API",
);

/**
 * Simple immutable types for python
 */
export const itypes = mkPackage(
  nixRaw`pkgs.python2Packages.itypes`,
  "Simple immutable types for python",
);

/**
 * Python interface for the Wireless Tools utility collection
 */
export const iwlib = mkPackage(
  nixRaw`pkgs.python2Packages.iwlib`,
  "Python interface for the Wireless Tools utility collection",
);

/**
 * Jinja2 Command-Line Tool
 */
export const j2cli = mkPackage(
  nixRaw`pkgs.python2Packages.j2cli`,
  "Jinja2 Command-Line Tool",
);

/**
 * Python Japanese character interconverter for Hiragana, Katakana, Hankaku and Zenkaku
 */
export const jaconv = mkPackage(
  nixRaw`pkgs.python2Packages.jaconv`,
  "Python Japanese character interconverter for Hiragana, Katakana, Hankaku and Zenkaku",
);

/**
 * Jaeger bindings for Python OpenTracing API
 */
export const jaeger_client = mkPackage(
  nixRaw`pkgs.python2Packages.jaeger-client`,
  "Jaeger bindings for Python OpenTracing API",
);

/**
 * Hangul syllable decomposition and synthesis using jamo
 */
export const jamo = mkPackage(
  nixRaw`pkgs.python2Packages.jamo`,
  "Hangul syllable decomposition and synthesis using jamo",
);

/**
 * Mixed sync-async queue
 */
export const janus = mkPackage(
  nixRaw`pkgs.python2Packages.janus`,
  "Mixed sync-async queue",
);

/**
 * Library interfacing to the Abode home security system
 */
export const jaraco_abode = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-abode`,
  "Library interfacing to the Abode home security system",
);

/**
 * Utility functions for Python class constructs
 */
export const jaraco_classes = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-classes`,
  "Utility functions for Python class constructs",
);

/**
 * Models and classes to supplement the stdlib 'collections' module
 */
export const jaraco_collections = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-collections`,
  "Models and classes to supplement the stdlib 'collections' module",
);

/**
 * Python module for context management
 */
export const jaraco_context = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-context`,
  "Python module for context management",
);

/**
 * E-mail facilities by jaraco
 */
export const jaraco_email = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-email`,
  "E-mail facilities by jaraco",
);

/**
 * Additional functools in the spirit of stdlib's functools
 */
export const jaraco_functools = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-functools`,
  "Additional functools in the spirit of stdlib's functools",
);

/**
 * Tools for working with iterables
 */
export const jaraco_itertools = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-itertools`,
  "Tools for working with iterables",
);

/**
 * Support for Python logging facility
 */
export const jaraco_logging = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-logging`,
  "Support for Python logging facility",
);

/**
 * Networking tools by jaraco
 */
export const jaraco_net = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-net`,
  "Networking tools by jaraco",
);

export const jaraco_stream = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-stream`,
  "",
);

/**
 * Testing support by jaraco
 */
export const jaraco_test = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-test`,
  "Testing support by jaraco",
);

/**
 * Module for text manipulation
 */
export const jaraco_text = mkPackage(
  nixRaw`pkgs.python2Packages.jaraco-text`,
  "Module for text manipulation",
);

/**
 * Library for fast approximate string matching using Jaro and Jaro-Winkler similarity
 */
export const jarowinkler = mkPackage(
  nixRaw`pkgs.python2Packages.jarowinkler`,
  "Library for fast approximate string matching using Jaro and Jaro-Winkler similarity",
);

/**
 * Module for serializing and de-serializing Java objects
 */
export const javaobj_py3 = mkPackage(
  nixRaw`pkgs.python2Packages.javaobj-py3`,
  "Module for serializing and de-serializing Java objects",
);

/**
 * Microsoft Azure API Management Client Library for Python
 */
export const javaproperties = mkPackage(
  nixRaw`pkgs.python2Packages.javaproperties`,
  "Microsoft Azure API Management Client Library for Python",
);

/**
 * Differentiate, compile, and transform Numpy code
 */
export const jax = mkPackage(
  nixRaw`pkgs.python2Packages.jax`,
  "Differentiate, compile, and transform Numpy code",
);

/**
 * Jumpy is a common backend for NumPy and optionally JAX
 */
export const jax_jumpy = mkPackage(
  nixRaw`pkgs.python2Packages.jax-jumpy`,
  "Jumpy is a common backend for NumPy and optionally JAX",
);

/**
 * JAX is Autograd and XLA, brought together for high-performance machine learning research.
 */
export const jaxlib = mkPackage(
  nixRaw`pkgs.python2Packages.jaxlib`,
  "JAX is Autograd and XLA, brought together for high-performance machine learning research.",
);

/**
 * JAX is Autograd and XLA, brought together for high-performance machine learning research.
 */
export const jaxlibWithCuda = mkPackage(
  nixRaw`pkgs.python2Packages.jaxlibWithCuda`,
  "JAX is Autograd and XLA, brought together for high-performance machine learning research.",
);

/**
 * JAX is Autograd and XLA, brought together for high-performance machine learning research.
 */
export const jaxlibWithoutCuda = mkPackage(
  nixRaw`pkgs.python2Packages.jaxlibWithoutCuda`,
  "JAX is Autograd and XLA, brought together for high-performance machine learning research.",
);

/**
 * XLA library for JAX
 */
export const jaxlib_bin = mkPackage(
  nixRaw`pkgs.python2Packages.jaxlib-bin`,
  "XLA library for JAX",
);

/**
 * JAX is Autograd and XLA, brought together for high-performance machine learning research.
 */
export const jaxlib_build = mkPackage(
  nixRaw`pkgs.python2Packages.jaxlib-build`,
  "JAX is Autograd and XLA, brought together for high-performance machine learning research.",
);

/**
 * Hardware accelerated, batchable and differentiable optimizers in JAX
 */
export const jaxopt = mkPackage(
  nixRaw`pkgs.python2Packages.jaxopt`,
  "Hardware accelerated, batchable and differentiable optimizers in JAX",
);

/**
 * Type annotations and runtime checking for JAX arrays and PyTrees
 */
export const jaxtyping = mkPackage(
  nixRaw`pkgs.python2Packages.jaxtyping`,
  "Type annotations and runtime checking for JAX arrays and PyTrees",
);

/**
 * Use JDBC database drivers from Python 2/3 or Jython with a DB-API
 */
export const jaydebeapi = mkPackage(
  nixRaw`pkgs.python2Packages.jaydebeapi`,
  "Use JDBC database drivers from Python 2/3 or Jython with a DB-API",
);

/**
 * This tool serializes the output of popular command line tools and filetypes to structured JSON output
 */
export const jc = mkPackage(
  nixRaw`pkgs.python2Packages.jc`,
  "This tool serializes the output of popular command line tools and filetypes to structured JSON output",
);

/**
 * Jalali datetime binding
 */
export const jdatetime = mkPackage(
  nixRaw`pkgs.python2Packages.jdatetime`,
  "Jalali datetime binding",
);

/**
 * A module containing functions for converting between Julian dates and calendar dates
 */
export const jdcal = mkPackage(
  nixRaw`pkgs.python2Packages.jdcal`,
  "A module containing functions for converting between Julian dates and calendar dates",
);

/**
 * An autocompletion tool for Python that can be used for text editors
 */
export const jedi = mkPackage(
  nixRaw`pkgs.python2Packages.jedi`,
  "An autocompletion tool for Python that can be used for text editors",
);

/**
 * A Language Server for the latest version(s) of Jedi
 */
export const jedi_language_server = mkPackage(
  nixRaw`pkgs.python2Packages.jedi-language-server`,
  "A Language Server for the latest version(s) of Jedi",
);

/**
 * Pure Python DBus interface
 */
export const jeepney = mkPackage(
  nixRaw`pkgs.python2Packages.jeepney`,
  "Pure Python DBus interface",
);

/**
 * CLI tool to filter JSON and JSON Lines data with Python syntax
 */
export const jello = mkPackage(
  nixRaw`pkgs.python2Packages.jello`,
  "CLI tool to filter JSON and JSON Lines data with Python syntax",
);

/**
 * Python API client for Jellyfin
 */
export const jellyfin_apiclient_python = mkPackage(
  nixRaw`pkgs.python2Packages.jellyfin-apiclient-python`,
  "Python API client for Jellyfin",
);

/**
 * Approximate and phonetic matching of strings
 */
export const jellyfish = mkPackage(
  nixRaw`pkgs.python2Packages.jellyfish`,
  "Approximate and phonetic matching of strings",
);

/**
 * Jenkins Job Builder is a system for configuring Jenkins jobs using simple YAML files stored in Git
 */
export const jenkins_job_builder = mkPackage(
  nixRaw`pkgs.python2Packages.jenkins-job-builder`,
  "Jenkins Job Builder is a system for configuring Jenkins jobs using simple YAML files stored in Git",
);

/**
 * A Python API for accessing resources on a Jenkins continuous-integration server
 */
export const jenkinsapi = mkPackage(
  nixRaw`pkgs.python2Packages.jenkinsapi`,
  "A Python API for accessing resources on a Jenkins continuous-integration server",
);

/**
 * Chinese Words Segementation Utilities
 */
export const jieba = mkPackage(
  nixRaw`pkgs.python2Packages.jieba`,
  "Chinese Words Segementation Utilities",
);

/**
 * Stand-alone template engine
 */
export const jinja2 = mkPackage(
  nixRaw`pkgs.python2Packages.jinja2`,
  "Stand-alone template engine",
);

/**
 * Jinja2 Ansible Filters
 */
export const jinja2_ansible_filters = mkPackage(
  nixRaw`pkgs.python2Packages.jinja2-ansible-filters`,
  "Jinja2 Ansible Filters",
);

/**
 * Jinja2 extension to handle git-specific things
 */
export const jinja2_git = mkPackage(
  nixRaw`pkgs.python2Packages.jinja2-git`,
  "Jinja2 extension to handle git-specific things",
);

/**
 * Jinja2 pluralize filters
 */
export const jinja2_pluralize = mkPackage(
  nixRaw`pkgs.python2Packages.jinja2_pluralize`,
  "Jinja2 pluralize filters",
);

/**
 * Jinja2 Extension for Dates and Times
 */
export const jinja2_time = mkPackage(
  nixRaw`pkgs.python2Packages.jinja2-time`,
  "Jinja2 Extension for Dates and Times",
);

/**
 * Library to interact with the JIRA REST API
 */
export const jira = mkPackage(
  nixRaw`pkgs.python2Packages.jira`,
  "Library to interact with the JIRA REST API",
);

/**
 * A simple and fast python package to evaluate an automatic speech recognition system
 */
export const jiwer = mkPackage(
  nixRaw`pkgs.python2Packages.jiwer`,
  "A simple and fast python package to evaluate an automatic speech recognition system",
);

/**
 * JMESPath allows you to declaratively specify how to extract elements from a JSON document
 */
export const jmespath = mkPackage(
  nixRaw`pkgs.python2Packages.jmespath`,
  "JMESPath allows you to declaratively specify how to extract elements from a JSON document",
);

/**
 * This library implements support for mixed precision training in JAX.
 */
export const jmp = mkPackage(
  nixRaw`pkgs.python2Packages.jmp`,
  "This library implements support for mixed precision training in JAX.",
);

/**
 * Lightweight pipelining: using Python functions as pipeline jobs
 */
export const joblib = mkPackage(
  nixRaw`pkgs.python2Packages.joblib`,
  "Lightweight pipelining: using Python functions as pipeline jobs",
);

/**
 * Python module for OpenPGP written in Rust
 */
export const johnnycanencrypt = mkPackage(
  nixRaw`pkgs.python2Packages.johnnycanencrypt`,
  "Python module for OpenPGP written in Rust",
);

/**
 * JOSE protocol implementation in Python
 */
export const josepy = mkPackage(
  nixRaw`pkgs.python2Packages.josepy`,
  "JOSE protocol implementation in Python",
);

/**
 * journalwatch is a tool to find error messages in the systemd journal.
 */
export const journalwatch = mkPackage(
  nixRaw`pkgs.python2Packages.journalwatch`,
  "journalwatch is a tool to find error messages in the systemd journal.",
);

/**
 * Python version of NASA DE4xx ephemerides, the basis for the Astronomical Alamanac
 */
export const jplephem = mkPackage(
  nixRaw`pkgs.python2Packages.jplephem`,
  "Python version of NASA DE4xx ephemerides, the basis for the Astronomical Alamanac",
);

/**
 * Java Property file parser and writer for Python
 */
export const jproperties = mkPackage(
  nixRaw`pkgs.python2Packages.jproperties`,
  "Java Property file parser and writer for Python",
);

/**
 * JP2 (JPEG 2000 Part 1) image validator and properties extractor
 */
export const jpylyzer = mkPackage(
  nixRaw`pkgs.python2Packages.jpylyzer`,
  "JP2 (JPEG 2000 Part 1) image validator and properties extractor",
);

/**
 * A Python to Java bridge
 */
export const jpype1 = mkPackage(
  nixRaw`pkgs.python2Packages.jpype1`,
  "A Python to Java bridge",
);

/**
 * Python bindings for jq, the flexible JSON processor
 */
export const jq = mkPackage(
  nixRaw`pkgs.python2Packages.jq`,
  "Python bindings for jq, the flexible JSON processor",
);

/**
 * JavaScript to Python Translator & JavaScript interpreter written in 100% pure Python
 */
export const js2py = mkPackage(
  nixRaw`pkgs.python2Packages.js2py`,
  "JavaScript to Python Translator & JavaScript interpreter written in 100% pure Python",
);

/**
 * JavaScript unobfuscator and beautifier
 */
export const jsbeautifier = mkPackage(
  nixRaw`pkgs.python2Packages.jsbeautifier`,
  "JavaScript unobfuscator and beautifier",
);

/**
 * Generate source code for Python classes from a JSON schema
 */
export const jschema_to_python = mkPackage(
  nixRaw`pkgs.python2Packages.jschema-to-python`,
  "Generate source code for Python classes from a JSON schema",
);

/**
 * JavaScript minifier
 */
export const jsmin = mkPackage(
  nixRaw`pkgs.python2Packages.jsmin`,
  "JavaScript minifier",
);

/**
 * A Python implementation of the JSON5 data format
 */
export const json5 = mkPackage(
  nixRaw`pkgs.python2Packages.json5`,
  "A Python implementation of the JSON5 data format",
);

/**
 * Client class for calling http+json APIs in Python
 */
export const json_home_client = mkPackage(
  nixRaw`pkgs.python2Packages.json-home-client`,
  "Client class for calling http+json APIs in Python",
);

/**
 * Python library to emit logs in JSON format
 */
export const json_logging = mkPackage(
  nixRaw`pkgs.python2Packages.json-logging`,
  "Python library to emit logs in JSON format",
);

/**
 * JSON Merge Patch library
 */
export const json_merge_patch = mkPackage(
  nixRaw`pkgs.python2Packages.json-merge-patch`,
  "JSON Merge Patch library",
);

/**
 * JSON-RPC 1/2 transport implementation
 */
export const json_rpc = mkPackage(
  nixRaw`pkgs.python2Packages.json-rpc`,
  "JSON-RPC 1/2 transport implementation",
);

/**
 * Quickly generate HTML documentation from a JSON schema
 */
export const json_schema_for_humans = mkPackage(
  nixRaw`pkgs.python2Packages.json-schema-for-humans`,
  "Quickly generate HTML documentation from a JSON schema",
);

/**
 * Streaming JSON parser
 */
export const json_stream = mkPackage(
  nixRaw`pkgs.python2Packages.json-stream`,
  "Streaming JSON parser",
);

/**
 * A faster tokenizer for the json-stream Python library
 */
export const json_stream_rs_tokenizer = mkPackage(
  nixRaw`pkgs.python2Packages.json-stream-rs-tokenizer`,
  "A faster tokenizer for the json-stream Python library",
);

/**
 * Extra features for Python JSON handling
 */
export const json_tricks = mkPackage(
  nixRaw`pkgs.python2Packages.json-tricks`,
  "Extra features for Python JSON handling",
);

/**
 * Provides an abstract base class and utilities for defining trivially JSONable python objects
 */
export const jsonable = mkPackage(
  nixRaw`pkgs.python2Packages.jsonable`,
  "Provides an abstract base class and utilities for defining trivially JSONable python objects",
);

/**
 * This python module helps converting arbitrary Python objects into JSON strings and back
 */
export const jsonconversion = mkPackage(
  nixRaw`pkgs.python2Packages.jsonconversion`,
  "This python module helps converting arbitrary Python objects into JSON strings and back",
);

/**
 * JSON with datetime handling
 */
export const jsondate = mkPackage(
  nixRaw`pkgs.python2Packages.jsondate`,
  "JSON with datetime handling",
);

/**
 * Diff JSON and JSON-like structures in Python
 */
export const jsondiff = mkPackage(
  nixRaw`pkgs.python2Packages.jsondiff`,
  "Diff JSON and JSON-like structures in Python",
);

/**
 * Reusable model field that allows you to store validated JSON, automatically handling serialization to and from the database
 */
export const jsonfield = mkPackage(
  nixRaw`pkgs.python2Packages.jsonfield`,
  "Reusable model field that allows you to store validated JSON, automatically handling serialization to and from the database",
);

/**
 * Python library to simplify working with jsonlines and ndjson data
 */
export const jsonlines = mkPackage(
  nixRaw`pkgs.python2Packages.jsonlines`,
  "Python library to simplify working with jsonlines and ndjson data",
);

/**
 * Merge a series of JSON documents
 */
export const jsonmerge = mkPackage(
  nixRaw`pkgs.python2Packages.jsonmerge`,
  "Merge a series of JSON documents",
);

export const jsonnet = mkPackage(
  nixRaw`pkgs.python2Packages.jsonnet`,
  "",
);

/**
 * Library to apply JSON Patches according to RFC 6902
 */
export const jsonpatch = mkPackage(
  nixRaw`pkgs.python2Packages.jsonpatch`,
  "Library to apply JSON Patches according to RFC 6902",
);

/**
 * An XPath for JSON
 */
export const jsonpath = mkPackage(
  nixRaw`pkgs.python2Packages.jsonpath`,
  "An XPath for JSON",
);

/**
 * JSONPath implementation
 */
export const jsonpath_ng = mkPackage(
  nixRaw`pkgs.python2Packages.jsonpath-ng`,
  "JSONPath implementation",
);

/**
 * A robust and significantly extended implementation of JSONPath for Python, with a clear AST for metaprogramming
 */
export const jsonpath_rw = mkPackage(
  nixRaw`pkgs.python2Packages.jsonpath_rw`,
  "A robust and significantly extended implementation of JSONPath for Python, with a clear AST for metaprogramming",
);

/**
 * Python library for serializing any arbitrary object graph into JSON
 */
export const jsonpickle = mkPackage(
  nixRaw`pkgs.python2Packages.jsonpickle`,
  "Python library for serializing any arbitrary object graph into JSON",
);

/**
 * Resolve JSON Pointers in Python
 */
export const jsonpointer = mkPackage(
  nixRaw`pkgs.python2Packages.jsonpointer`,
  "Resolve JSON Pointers in Python",
);

/**
 * An implementation of JSON Reference for Python
 */
export const jsonref = mkPackage(
  nixRaw`pkgs.python2Packages.jsonref`,
  "An implementation of JSON Reference for Python",
);

/**
 * A JSON-RPC client library for asyncio
 */
export const jsonrpc_async = mkPackage(
  nixRaw`pkgs.python2Packages.jsonrpc-async`,
  "A JSON-RPC client library for asyncio",
);

/**
 * A JSON-RPC client library base interface
 */
export const jsonrpc_base = mkPackage(
  nixRaw`pkgs.python2Packages.jsonrpc-base`,
  "A JSON-RPC client library base interface",
);

/**
 * A JSON-RPC websocket client library for asyncio
 */
export const jsonrpc_websocket = mkPackage(
  nixRaw`pkgs.python2Packages.jsonrpc-websocket`,
  "A JSON-RPC websocket client library for asyncio",
);

/**
 * JSON RPC client library - Pelix compatible fork
 */
export const jsonrpclib_pelix = mkPackage(
  nixRaw`pkgs.python2Packages.jsonrpclib-pelix`,
  "JSON RPC client library - Pelix compatible fork",
);

/**
 * Turn Python objects into dicts or json strings and back
 */
export const jsons = mkPackage(
  nixRaw`pkgs.python2Packages.jsons`,
  "Turn Python objects into dicts or json strings and back",
);

/**
 * An implementation of JSON Schema validation
 */
export const jsonschema = mkPackage(
  nixRaw`pkgs.python2Packages.jsonschema`,
  "An implementation of JSON Schema validation",
);

/**
 * JSONSchema Spec with object-oriented paths
 */
export const jsonschema_spec = mkPackage(
  nixRaw`pkgs.python2Packages.jsonschema-spec`,
  "JSONSchema Spec with object-oriented paths",
);

/**
 * Support files exposing JSON from the JSON Schema specifications
 */
export const jsonschema_specifications = mkPackage(
  nixRaw`pkgs.python2Packages.jsonschema-specifications`,
  "Support files exposing JSON from the JSON Schema specifications",
);

/**
 * A JSON streaming writer
 */
export const jsonstreams = mkPackage(
  nixRaw`pkgs.python2Packages.jsonstreams`,
  "A JSON streaming writer",
);

/**
 * A python library to parse JSON with js-style comments
 */
export const jstyleson = mkPackage(
  nixRaw`pkgs.python2Packages.jstyleson`,
  "A python library to parse JSON with js-style comments",
);

/**
 * A Task-Based Parallelization Framework
 */
export const jug = mkPackage(
  nixRaw`pkgs.python2Packages.jug`,
  "A Task-Based Parallelization Framework",
);

/**
 * Creates JUnit XML test result documents that can be read by tools such as Jenkins
 */
export const junit_xml = mkPackage(
  nixRaw`pkgs.python2Packages.junit-xml`,
  "Creates JUnit XML test result documents that can be read by tools such as Jenkins",
);

/**
 * Manipulates JUnit/xUnit Result XML files
 */
export const junitparser = mkPackage(
  nixRaw`pkgs.python2Packages.junitparser`,
  "Manipulates JUnit/xUnit Result XML files",
);

/**
 * Junos 'EZ' automation for non-programmers
 */
export const junos_eznc = mkPackage(
  nixRaw`pkgs.python2Packages.junos-eznc`,
  "Junos 'EZ' automation for non-programmers",
);

/**
 * Installs all the Jupyter components in one go
 */
export const jupyter = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter`,
  "Installs all the Jupyter components in one go",
);

/**
 * Build a book with Jupyter Notebooks and Sphinx
 */
export const jupyter_book = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-book`,
  "Build a book with Jupyter Notebooks and Sphinx",
);

/**
 * Minimalistic C kernel for Jupyter
 */
export const jupyter_c_kernel = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-c-kernel`,
  "Minimalistic C kernel for Jupyter",
);

/**
 * A defined interface for working with a cache of jupyter notebooks
 */
export const jupyter_cache = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-cache`,
  "A defined interface for working with a cache of jupyter notebooks",
);

/**
 * Jupyter protocol implementation and client libraries
 */
export const jupyter_client = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-client`,
  "Jupyter protocol implementation and client libraries",
);

/**
 * JupyterLab Extension enabling Real-Time Collaboration
 */
export const jupyter_collaboration = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-collaboration`,
  "JupyterLab Extension enabling Real-Time Collaboration",
);

/**
 * Jupyter terminal console
 */
export const jupyter_console = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-console`,
  "Jupyter terminal console",
);

/**
 * Common utilities for jupyter-contrib projects
 */
export const jupyter_contrib_core = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-contrib-core`,
  "Common utilities for jupyter-contrib projects",
);

/**
 * Base package on which Jupyter projects rely
 */
export const jupyter_core = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-core`,
  "Base package on which Jupyter projects rely",
);

/**
 * Configurable event system for Jupyter applications and extensions
 */
export const jupyter_events = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-events`,
  "Configurable event system for Jupyter applications and extensions",
);

/**
 * Jupyter notebook extension that enables highlighting every instance of the current word in the notebook
 */
export const jupyter_highlight_selected_word = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-highlight-selected-word`,
  "Jupyter notebook extension that enables highlighting every instance of the current word in the notebook",
);

/**
 * Multi-Language Server WebSocket proxy for your Jupyter notebook or lab server
 */
export const jupyter_lsp = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-lsp`,
  "Multi-Language Server WebSocket proxy for your Jupyter notebook or lab server",
);

/**
 * A jupyter notebook serverextension providing config interfaces for nbextensions
 */
export const jupyter_nbextensions_configurator = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-nbextensions-configurator`,
  "A jupyter notebook serverextension providing config interfaces for nbextensions",
);

/**
 * Jupyter Packaging Utilities
 */
export const jupyter_packaging = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-packaging`,
  "Jupyter Packaging Utilities",
);

/**
 * Turn code repositories into Jupyter enabled Docker Images
 */
export const jupyter_repo2docker = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-repo2docker`,
  "Turn code repositories into Jupyter enabled Docker Images",
);

/**
 * The backend—i.e. core services, APIs, and REST endpoints—to Jupyter web applications
 */
export const jupyter_server = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-server`,
  "The backend—i.e. core services, APIs, and REST endpoints—to Jupyter web applications",
);

/**
 * An extension that maintains file IDs for documents in a running Jupyter Server
 */
export const jupyter_server_fileid = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-server-fileid`,
  "An extension that maintains file IDs for documents in a running Jupyter Server",
);

/**
 * MathJax resources as a Jupyter Server Extension
 */
export const jupyter_server_mathjax = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-server-mathjax`,
  "MathJax resources as a Jupyter Server Extension",
);

/**
 * A Jupyter Server Extension Providing Support for Terminals
 */
export const jupyter_server_terminals = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-server-terminals`,
  "A Jupyter Server Extension Providing Support for Terminals",
);

/**
 * Jupyter Sphinx Extensions
 */
export const jupyter_sphinx = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-sphinx`,
  "Jupyter Sphinx Extensions",
);

/**
 * Telemetry for Jupyter Applications and extensions
 */
export const jupyter_telemetry = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-telemetry`,
  "Telemetry for Jupyter Applications and extensions",
);

/**
 * Block jupyter cell execution while interacting with widgets
 */
export const jupyter_ui_poll = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-ui-poll`,
  "Block jupyter cell execution while interacting with widgets",
);

/**
 * Document structures for collaborative editing using Ypy
 */
export const jupyter_ydoc = mkPackage(
  nixRaw`pkgs.python2Packages.jupyter-ydoc`,
  "Document structures for collaborative editing using Ypy",
);

/**
 * Serves multiple Jupyter notebook instances
 */
export const jupyterhub = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterhub`,
  "Serves multiple Jupyter notebook instances",
);

/**
 * Simple LDAP Authenticator Plugin for JupyterHub
 */
export const jupyterhub_ldapauthenticator = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterhub-ldapauthenticator`,
  "Simple LDAP Authenticator Plugin for JupyterHub",
);

/**
 * JupyterHub Spawner using systemd for resource isolation
 */
export const jupyterhub_systemdspawner = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterhub-systemdspawner`,
  "JupyterHub Spawner using systemd for resource isolation",
);

/**
 * Simple Jupyterhub authenticator that allows anyone to log in
 */
export const jupyterhub_tmpauthenticator = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterhub-tmpauthenticator`,
  "Simple Jupyterhub authenticator that allows anyone to log in",
);

/**
 * Jupyter lab environment notebook server extension
 */
export const jupyterlab = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterlab`,
  "Jupyter lab environment notebook server extension",
);

/**
 * Jupyter lab extension for version control with Git
 */
export const jupyterlab_git = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterlab-git`,
  "Jupyter lab extension for version control with Git",
);

/**
 * This package is used to launch an application built using JupyterLab
 */
export const jupyterlab_launcher = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterlab_launcher`,
  "This package is used to launch an application built using JupyterLab",
);

/**
 * Language Server Protocol integration for Jupyter(Lab)
 */
export const jupyterlab_lsp = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterlab-lsp`,
  "Language Server Protocol integration for Jupyter(Lab)",
);

/**
 * Jupyterlab syntax coloring theme for pygments
 */
export const jupyterlab_pygments = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterlab-pygments`,
  "Jupyterlab syntax coloring theme for pygments",
);

/**
 * A set of server components for JupyterLab and JupyterLab like applications
 */
export const jupyterlab_server = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterlab_server`,
  "A set of server components for JupyterLab and JupyterLab like applications",
);

/**
 * Jupyter Widgets JupyterLab Extension
 */
export const jupyterlab_widgets = mkPackage(
  nixRaw`pkgs.python2Packages.jupyterlab-widgets`,
  "Jupyter Widgets JupyterLab Extension",
);

/**
 * Jupyter notebooks as Markdown documents, Julia, Python or R scripts
 */
export const jupytext = mkPackage(
  nixRaw`pkgs.python2Packages.jupytext`,
  "Jupyter notebooks as Markdown documents, Julia, Python or R scripts",
);

/**
 * Simple backoff algorithm in Python
 */
export const justbackoff = mkPackage(
  nixRaw`pkgs.python2Packages.justbackoff`,
  "Simple backoff algorithm in Python",
);

/**
 * conversion of ints and rationals to any base
 */
export const justbases = mkPackage(
  nixRaw`pkgs.python2Packages.justbases`,
  "conversion of ints and rationals to any base",
);

/**
 * computing with and displaying bytes
 */
export const justbytes = mkPackage(
  nixRaw`pkgs.python2Packages.justbytes`,
  "computing with and displaying bytes",
);

/**
 * Library for the JustNimbus API
 */
export const justnimbus = mkPackage(
  nixRaw`pkgs.python2Packages.justnimbus`,
  "Library for the JustNimbus API",
);

/**
 * Implementation of JOSE Web standards
 */
export const jwcrypto = mkPackage(
  nixRaw`pkgs.python2Packages.jwcrypto`,
  "Implementation of JOSE Web standards",
);

/**
 * Converts between XML and intelligent Python data structures
 */
export const jxmlease = mkPackage(
  nixRaw`pkgs.python2Packages.jxmlease`,
  "Converts between XML and intelligent Python data structures",
);

/**
 * Library for setting up self-contained Kerberos 5 environment
 */
export const k5test = mkPackage(
  nixRaw`pkgs.python2Packages.k5test`,
  "Library for setting up self-contained Kerberos 5 environment",
);

/**
 * Karras et al. (2022) diffusion models for PyTorch
 */
export const k_diffusion = mkPackage(
  nixRaw`pkgs.python2Packages.k-diffusion`,
  "Karras et al. (2022) diffusion models for PyTorch",
);

/**
 * Generic application framework, providing the foundation for other modules
 */
export const kaa_base = mkPackage(
  nixRaw`pkgs.python2Packages.kaa-base`,
  "Generic application framework, providing the foundation for other modules",
);

/**
 * Python library for parsing media metadata, which can extract metadata (e.g., such as id3 tags) from a wide range of media files
 */
export const kaa_metadata = mkPackage(
  nixRaw`pkgs.python2Packages.kaa-metadata`,
  "Python library for parsing media metadata, which can extract metadata (e.g., such as id3 tags) from a wide range of media files",
);

/**
 * Pure Python client for Apache Kafka
 */
export const kafka_python = mkPackage(
  nixRaw`pkgs.python2Packages.kafka-python`,
  "Pure Python client for Apache Kafka",
);

/**
 * Official API for https://www.kaggle.com, accessible using a command line tool implemented in Python 3
 */
export const kaggle = mkPackage(
  nixRaw`pkgs.python2Packages.kaggle`,
  "Official API for https://www.kaggle.com, accessible using a command line tool implemented in Python 3",
);

/**
 * Kaitai Struct: runtime library for Python
 */
export const kaitaistruct = mkPackage(
  nixRaw`pkgs.python2Packages.kaitaistruct`,
  "Kaitai Struct: runtime library for Python",
);

/**
 * Module provides fast well-formed XML templates
 */
export const kajiki = mkPackage(
  nixRaw`pkgs.python2Packages.kajiki`,
  "Module provides fast well-formed XML templates",
);

/**
 * Python Kaldi speech recognition
 */
export const kaldi_active_grammar = mkPackage(
  nixRaw`pkgs.python2Packages.kaldi-active-grammar`,
  "Python Kaldi speech recognition",
);

/**
 * Kanidm client library
 */
export const kanidm = mkPackage(
  nixRaw`pkgs.python2Packages.kanidm`,
  "Kanidm client library",
);

/**
 * Configuration manager for python applications
 */
export const kaptan = mkPackage(
  nixRaw`pkgs.python2Packages.kaptan`,
  "Configuration manager for python applications",
);

/**
 * Decoders for ascii-encoded executables for the Karton framework
 */
export const karton_asciimagic = mkPackage(
  nixRaw`pkgs.python2Packages.karton-asciimagic`,
  "Decoders for ascii-encoded executables for the Karton framework",
);

/**
 * AutoIt script ripper for Karton framework
 */
export const karton_autoit_ripper = mkPackage(
  nixRaw`pkgs.python2Packages.karton-autoit-ripper`,
  "AutoIt script ripper for Karton framework",
);

/**
 * File type classifier for the Karton framework
 */
export const karton_classifier = mkPackage(
  nixRaw`pkgs.python2Packages.karton-classifier`,
  "File type classifier for the Karton framework",
);

/**
 * Static configuration extractor for the Karton framework
 */
export const karton_config_extractor = mkPackage(
  nixRaw`pkgs.python2Packages.karton-config-extractor`,
  "Static configuration extractor for the Karton framework",
);

/**
 * Distributed malware processing framework
 */
export const karton_core = mkPackage(
  nixRaw`pkgs.python2Packages.karton-core`,
  "Distributed malware processing framework",
);

/**
 * Web application that allows for Karton task and queue introspection
 */
export const karton_dashboard = mkPackage(
  nixRaw`pkgs.python2Packages.karton-dashboard`,
  "Web application that allows for Karton task and queue introspection",
);

/**
 * Karton service that uploads analyzed artifacts and metadata to MWDB Core
 */
export const karton_mwdb_reporter = mkPackage(
  nixRaw`pkgs.python2Packages.karton-mwdb-reporter`,
  "Karton service that uploads analyzed artifacts and metadata to MWDB Core",
);

/**
 * File and analysis artifacts yara matcher for the Karton framework
 */
export const karton_yaramatcher = mkPackage(
  nixRaw`pkgs.python2Packages.karton-yaramatcher`,
  "File and analysis artifacts yara matcher for the Karton framework",
);

/**
 * Fast kasa crypt
 */
export const kasa_crypt = mkPackage(
  nixRaw`pkgs.python2Packages.kasa-crypt`,
  "Fast kasa crypt",
);

/**
 * Higher Level Zookeeper Client
 */
export const kazoo = mkPackage(
  nixRaw`pkgs.python2Packages.kazoo`,
  "Higher Level Zookeeper Client",
);

/**
 * Keboola Connection Storage API client
 */
export const kbcstorage = mkPackage(
  nixRaw`pkgs.python2Packages.kbcstorage`,
  "Keboola Connection Storage API client",
);

/**
 * A flexible Python 2/3 Kconfig implementation and library
 */
export const kconfiglib = mkPackage(
  nixRaw`pkgs.python2Packages.kconfiglib`,
  "A flexible Python 2/3 Kconfig implementation and library",
);

/**
 * Python library for controlling KEBA charging stations
 */
export const keba_kecontact = mkPackage(
  nixRaw`pkgs.python2Packages.keba-kecontact`,
  "Python library for controlling KEBA charging stations",
);

/**
 * A Meta CLI toolkit: Personal shell command keeper and snippets manager
 */
export const keep = mkPackage(
  nixRaw`pkgs.python2Packages.keep`,
  "A Meta CLI toolkit: Personal shell command keeper and snippets manager",
);

/**
 * An HTTP handler for `urllib` that supports HTTP 1.1 and keepalive
 */
export const keepalive = mkPackage(
  nixRaw`pkgs.python2Packages.keepalive`,
  "An HTTP handler for `urllib` that supports HTTP 1.1 and keepalive",
);

/**
 * KeepKey Python client
 */
export const keepkey = mkPackage(
  nixRaw`pkgs.python2Packages.keepkey`,
  "KeepKey Python client",
);

/**
 * Using KeepKey as hardware-based SSH/PGP agent
 */
export const keepkey_agent = mkPackage(
  nixRaw`pkgs.python2Packages.keepkey_agent`,
  "Using KeepKey as hardware-based SSH/PGP agent",
);

/**
 * Library for Kegtron BLE devices
 */
export const kegtron_ble = mkPackage(
  nixRaw`pkgs.python2Packages.kegtron-ble`,
  "Library for Kegtron BLE devices",
);

/**
 * Deep Learning library for Theano and TensorFlow
 */
export const keras = mkPackage(
  nixRaw`pkgs.python2Packages.keras`,
  "Deep Learning library for Theano and TensorFlow",
);

/**
 * Reference implementations of popular deep learning models
 */
export const keras_applications = mkPackage(
  nixRaw`pkgs.python2Packages.keras-applications`,
  "Reference implementations of popular deep learning models",
);

/**
 * Easy data preprocessing and data augmentation for deep learning models
 */
export const keras_preprocessing = mkPackage(
  nixRaw`pkgs.python2Packages.keras-preprocessing`,
  "Easy data preprocessing and data augmentation for deep learning models",
);

/**
 * Kerberos high-level interface
 */
export const kerberos = mkPackage(
  nixRaw`pkgs.python2Packages.kerberos`,
  "Kerberos high-level interface",
);

/**
 * Hook and simulate keyboard events on Windows and Linux
 */
export const keyboard = mkPackage(
  nixRaw`pkgs.python2Packages.keyboard`,
  "Hook and simulate keyboard events on Windows and Linux",
);

/**
 * Store and access your passwords safely
 */
export const keyring = mkPackage(
  nixRaw`pkgs.python2Packages.keyring`,
  "Store and access your passwords safely",
);

/**
 * Alternate keyring implementations
 */
export const keyrings_alt = mkPackage(
  nixRaw`pkgs.python2Packages.keyrings-alt`,
  "Alternate keyring implementations",
);

/**
 * Encrypted file keyring backend
 */
export const keyrings_cryptfile = mkPackage(
  nixRaw`pkgs.python2Packages.keyrings-cryptfile`,
  "Encrypted file keyring backend",
);

/**
 * Python package which allows you to configure keyring to interact with Python repositories stored in Artifact Registry
 */
export const keyrings_google_artifactregistry_auth = mkPackage(
  nixRaw`pkgs.python2Packages.keyrings-google-artifactregistry-auth`,
  "Python package which allows you to configure keyring to interact with Python repositories stored in Artifact Registry",
);

/**
 * Keyring backend for password-store
 */
export const keyrings_passwordstore = mkPackage(
  nixRaw`pkgs.python2Packages.keyrings-passwordstore`,
  "Keyring backend for password-store",
);

/**
 * Lightweight multi-platform, multi-architecture assembler framework
 */
export const keystone_engine = mkPackage(
  nixRaw`pkgs.python2Packages.keystone-engine`,
  "Lightweight multi-platform, multi-architecture assembler framework",
);

/**
 * Authentication Library for OpenStack Identity
 */
export const keystoneauth1 = mkPackage(
  nixRaw`pkgs.python2Packages.keystoneauth1`,
  "Authentication Library for OpenStack Identity",
);

/**
 * A set of python bindings for keyutils
 */
export const keyutils = mkPackage(
  nixRaw`pkgs.python2Packages.keyutils`,
  "A set of python bindings for keyutils",
);

/**
 * Just the built source without the libraries
 */
export const kicad = mkPackage(
  nixRaw`pkgs.python2Packages.kicad`,
  "Just the built source without the libraries",
);

/**
 * A Parser for KiCad EESCHEMA netlists
 */
export const kinparse = mkPackage(
  nixRaw`pkgs.python2Packages.kinparse`,
  "A Parser for KiCad EESCHEMA netlists",
);

/**
 * Python package for HTTP/1.1 style headers
 */
export const kiss_headers = mkPackage(
  nixRaw`pkgs.python2Packages.kiss-headers`,
  "Python package for HTTP/1.1 style headers",
);

/**
 * Kitchen contains a cornucopia of useful code
 */
export const kitchen = mkPackage(
  nixRaw`pkgs.python2Packages.kitchen`,
  "Kitchen contains a cornucopia of useful code",
);

/**
 * Library for rapid development of hardware-accelerated multitouch applications.
 */
export const kivy = mkPackage(
  nixRaw`pkgs.python2Packages.kivy`,
  "Library for rapid development of hardware-accelerated multitouch applications.",
);

/**
 * The kivy garden installation script, split into its own package for convenient use in buildozer.
 */
export const kivy_garden = mkPackage(
  nixRaw`pkgs.python2Packages.kivy-garden`,
  "The kivy garden installation script, split into its own package for convenient use in buildozer.",
);

/**
 * Module to interact with the KIWI.KI API
 */
export const kiwiki_client = mkPackage(
  nixRaw`pkgs.python2Packages.kiwiki-client`,
  "Module to interact with the KIWI.KI API",
);

/**
 * Implementation of the Cassowary constraint solver
 */
export const kiwisolver = mkPackage(
  nixRaw`pkgs.python2Packages.kiwisolver`,
  "Implementation of the Cassowary constraint solver",
);

/**
 * The first Git web viewer that Just Works
 */
export const klaus = mkPackage(
  nixRaw`pkgs.python2Packages.klaus`,
  "The first Git web viewer that Just Works",
);

/**
 * Klein Web Micro-Framework
 */
export const klein = mkPackage(
  nixRaw`pkgs.python2Packages.klein`,
  "Klein Web Micro-Framework",
);

/**
 * Library to convert KML to GeoJSON
 */
export const kml2geojson = mkPackage(
  nixRaw`pkgs.python2Packages.kml2geojson`,
  "Library to convert KML to GeoJSON",
);

/**
 * C++11 library, utilities and python bindings for Linux kernel mode setting
 */
export const kmsxx = mkPackage(
  nixRaw`pkgs.python2Packages.kmsxx`,
  "C++11 library, utilities and python bindings for Linux kernel mode setting",
);

/**
 * A Command-Line Interface framework
 */
export const knack = mkPackage(
  nixRaw`pkgs.python2Packages.knack`,
  "A Command-Line Interface framework",
);

/**
 * Knee point detection in Python
 */
export const kneed = mkPackage(
  nixRaw`pkgs.python2Packages.kneed`,
  "Knee point detection in Python",
);

/**
 * Home Assistant Panel for managing the KNX integration
 */
export const knx_frontend = mkPackage(
  nixRaw`pkgs.python2Packages.knx-frontend`,
  "Home Assistant Panel for managing the KNX integration",
);

/**
 * Messaging library for Python
 */
export const kombu = mkPackage(
  nixRaw`pkgs.python2Packages.kombu`,
  "Messaging library for Python",
);

/**
 * Async Python library for interacting with Konnected home automation controllers
 */
export const konnected = mkPackage(
  nixRaw`pkgs.python2Packages.konnected`,
  "Async Python library for interacting with Konnected home automation controllers",
);

/**
 * A library to convert Korean lunar-calendar to Gregorian calendar.
 */
export const korean_lunar_calendar = mkPackage(
  nixRaw`pkgs.python2Packages.korean-lunar-calendar`,
  "A library to convert Korean lunar-calendar to Gregorian calendar.",
);

/**
 * Differentiable computer vision library
 */
export const kornia = mkPackage(
  nixRaw`pkgs.python2Packages.kornia`,
  "Differentiable computer vision library",
);

/**
 * Lightweight framework for structured and repeatable model validation
 */
export const kotsu = mkPackage(
  nixRaw`pkgs.python2Packages.kotsu`,
  "Lightweight framework for structured and repeatable model validation",
);

/**
 * Kraken.com cryptocurrency exchange API
 */
export const krakenex = mkPackage(
  nixRaw`pkgs.python2Packages.krakenex`,
  "Kraken.com cryptocurrency exchange API",
);

/**
 * Kubernetes Python client
 */
export const kubernetes = mkPackage(
  nixRaw`pkgs.python2Packages.kubernetes`,
  "Kubernetes Python client",
);

/**
 * Locale internationalization package
 */
export const l18n = mkPackage(
  nixRaw`pkgs.python2Packages.l18n`,
  "Locale internationalization package",
);

/**
 * Platform API for LabelBox
 */
export const labelbox = mkPackage(
  nixRaw`pkgs.python2Packages.labelbox`,
  "Platform API for LabelBox",
);

/**
 * Embedded control & testing library
 */
export const labgrid = mkPackage(
  nixRaw`pkgs.python2Packages.labgrid`,
  "Embedded control & testing library",
);

/**
 * Module for basic math in the general vicinity of computational number theory
 */
export const labmath = mkPackage(
  nixRaw`pkgs.python2Packages.labmath`,
  "Module for basic math in the general vicinity of computational number theory",
);

/**
 * Library for controlling LED bulbs from Eufy
 */
export const lakeside = mkPackage(
  nixRaw`pkgs.python2Packages.lakeside`,
  "Library for controlling LED bulbs from Eufy",
);

/**
 * Building applications with LLMs through composability
 */
export const langchain = mkPackage(
  nixRaw`pkgs.python2Packages.langchain`,
  "Building applications with LLMs through composability",
);

/**
 * Client library to connect to the LangChainPlus LLM Tracing and Evaluation Platform
 */
export const langchainplus_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.langchainplus-sdk`,
  "Client library to connect to the LangChainPlus LLM Tracing and Evaluation Platform",
);

/**
 * Python toolkit for working with and comparing the standardized codes for languages
 */
export const langcodes = mkPackage(
  nixRaw`pkgs.python2Packages.langcodes`,
  "Python toolkit for working with and comparing the standardized codes for languages",
);

/**
 * Python port of Google's language-detection library
 */
export const langdetect = mkPackage(
  nixRaw`pkgs.python2Packages.langdetect`,
  "Python port of Google's language-detection library",
);

/**
 * Langid.py is a standalone Language Identification (LangID) tool
 */
export const langid = mkPackage(
  nixRaw`pkgs.python2Packages.langid`,
  "Langid.py is a standalone Language Identification (LangID) tool",
);

/**
 * Client library to connect to the LangSmith LLM Tracing and Evaluation Platform
 */
export const langsmith = mkPackage(
  nixRaw`pkgs.python2Packages.langsmith`,
  "Client library to connect to the LangSmith LLM Tracing and Evaluation Platform",
);

/**
 * Supplement module for langcodes
 */
export const language_data = mkPackage(
  nixRaw`pkgs.python2Packages.language-data`,
  "Supplement module for langcodes",
);

/**
 * Dealing with IANA language tags in Python
 */
export const language_tags = mkPackage(
  nixRaw`pkgs.python2Packages.language-tags`,
  "Dealing with IANA language tags in Python",
);

/**
 * Standalone module for Locality-Aware NMS
 */
export const lanms_neo = mkPackage(
  nixRaw`pkgs.python2Packages.lanms-neo`,
  "Standalone module for Locality-Aware NMS",
);

/**
 * A modern parsing library for Python, implementing Earley & LALR(1) and an easy interface
 */
export const lark = mkPackage(
  nixRaw`pkgs.python2Packages.lark`,
  "A modern parsing library for Python, implementing Earley & LALR(1) and an easy interface",
);

/**
 * Interface for reading/modifying/creating .LAS LIDAR files
 */
export const laspy = mkPackage(
  nixRaw`pkgs.python2Packages.laspy`,
  "Interface for reading/modifying/creating .LAS LIDAR files",
);

/**
 * Unofficial bindings between Python and LASzip made using pybind11
 */
export const laszip = mkPackage(
  nixRaw`pkgs.python2Packages.laszip`,
  "Unofficial bindings between Python and LASzip made using pybind11",
);

/**
 * Pure Python library for LaTeX to MathML conversion
 */
export const latex2mathml = mkPackage(
  nixRaw`pkgs.python2Packages.latex2mathml`,
  "Pure Python library for LaTeX to MathML conversion",
);

/**
 * Lexer and codec to work with LaTeX code in Python
 */
export const latexcodec = mkPackage(
  nixRaw`pkgs.python2Packages.latexcodec`,
  "Lexer and codec to work with LaTeX code in Python",
);

/**
 * Generates LaTeX math description from Python functions
 */
export const latexify_py = mkPackage(
  nixRaw`pkgs.python2Packages.latexify-py`,
  "Generates LaTeX math description from Python functions",
);

/**
 * Script Launchpad through its web services interfaces. Officially supported
 */
export const launchpadlib = mkPackage(
  nixRaw`pkgs.python2Packages.launchpadlib`,
  "Script Launchpad through its web services interfaces. Officially supported",
);

/**
 * Module to communicate with the laundrify API
 */
export const laundrify_aio = mkPackage(
  nixRaw`pkgs.python2Packages.laundrify-aio`,
  "Module to communicate with the laundrify API",
);

/**
 * A unified toolkit for Deep Learning Based Document Image Analysis
 */
export const layoutparser = mkPackage(
  nixRaw`pkgs.python2Packages.layoutparser`,
  "A unified toolkit for Deep Learning Based Document Image Analysis",
);

export const lazr_config = mkPackage(
  nixRaw`pkgs.python2Packages.lazr_config`,
  "",
);

export const lazr_delegates = mkPackage(
  nixRaw`pkgs.python2Packages.lazr_delegates`,
  "",
);

/**
 * A programmable client library that takes advantage of the commonalities among
 */
export const lazr_restfulclient = mkPackage(
  nixRaw`pkgs.python2Packages.lazr-restfulclient`,
  "A programmable client library that takes advantage of the commonalities among",
);

/**
 * A self-contained, easily reusable library for parsing, manipulating
 */
export const lazr_uri = mkPackage(
  nixRaw`pkgs.python2Packages.lazr-uri`,
  "A self-contained, easily reusable library for parsing, manipulating",
);

/**
 * Lazy attributes for Python objects
 */
export const lazy = mkPackage(
  nixRaw`pkgs.python2Packages.lazy`,
  "Lazy attributes for Python objects",
);

/**
 * A set of functions that load modules, and related attributes, in a lazy fashion
 */
export const lazy_import = mkPackage(
  nixRaw`pkgs.python2Packages.lazy_import`,
  "A set of functions that load modules, and related attributes, in a lazy fashion",
);

/**
 * Python tool to support lazy imports.
 */
export const lazy_imports = mkPackage(
  nixRaw`pkgs.python2Packages.lazy-imports`,
  "Python tool to support lazy imports.",
);

/**
 * Populate library namespace without incurring immediate import costs
 */
export const lazy_loader = mkPackage(
  nixRaw`pkgs.python2Packages.lazy-loader`,
  "Populate library namespace without incurring immediate import costs",
);

/**
 * A fast and thorough lazy object proxy
 */
export const lazy_object_proxy = mkPackage(
  nixRaw`pkgs.python2Packages.lazy-object-proxy`,
  "A fast and thorough lazy object proxy",
);

/**
 * Python module for interacting with Legrand LC7001
 */
export const lc7001 = mkPackage(
  nixRaw`pkgs.python2Packages.lc7001`,
  "Python module for interacting with Legrand LC7001",
);

/**
 * A pythonic Linear Congruential Generator iterator
 */
export const lcgit = mkPackage(
  nixRaw`pkgs.python2Packages.lcgit`,
  "A pythonic Linear Congruential Generator iterator",
);

/**
 * Converts code coverage from lcov format to Cobertura's XML format
 */
export const lcov_cobertura = mkPackage(
  nixRaw`pkgs.python2Packages.lcov_cobertura`,
  "Converts code coverage from lcov format to Cobertura's XML format",
);

/**
 * Library for the LD2410B modules from HiLinks
 */
export const ld2410_ble = mkPackage(
  nixRaw`pkgs.python2Packages.ld2410-ble`,
  "Library for the LD2410B modules from HiLinks",
);

/**
 * A strictly RFC 4510 conforming LDAP V3 pure Python client library
 */
export const ldap3 = mkPackage(
  nixRaw`pkgs.python2Packages.ldap3`,
  "A strictly RFC 4510 conforming LDAP V3 pure Python client library",
);

/**
 * Active Directory information dumper via LDAP
 */
export const ldapdomaindump = mkPackage(
  nixRaw`pkgs.python2Packages.ldapdomaindump`,
  "Active Directory information dumper via LDAP",
);

/**
 * A simple connector pool for python-ldap
 */
export const ldappool = mkPackage(
  nixRaw`pkgs.python2Packages.ldappool`,
  "A simple connector pool for python-ldap",
);

/**
 * A Pure-Python Twisted library for LDAP
 */
export const ldaptor = mkPackage(
  nixRaw`pkgs.python2Packages.ldaptor`,
  "A Pure-Python Twisted library for LDAP",
);

/**
 * Python charting library
 */
export const leather = mkPackage(
  nixRaw`pkgs.python2Packages.leather`,
  "Python charting library",
);

/**
 * A utility to encode and decode Little Endian Base 128
 */
export const leb128 = mkPackage(
  nixRaw`pkgs.python2Packages.leb128`,
  "A utility to encode and decode Little Endian Base 128",
);

/**
 * Library for LED BLE devices
 */
export const led_ble = mkPackage(
  nixRaw`pkgs.python2Packages.led-ble`,
  "Library for LED BLE devices",
);

/**
 * A double-entry accounting system with a command-line reporting interface
 */
export const ledger = mkPackage(
  nixRaw`pkgs.python2Packages.ledger`,
  "A double-entry accounting system with a command-line reporting interface",
);

/**
 * Using Ledger as hardware-based SSH/PGP agent
 */
export const ledger_agent = mkPackage(
  nixRaw`pkgs.python2Packages.ledger_agent`,
  "Using Ledger as hardware-based SSH/PGP agent",
);

/**
 * Client library for Ledger Bitcoin application.
 */
export const ledger_bitcoin = mkPackage(
  nixRaw`pkgs.python2Packages.ledger-bitcoin`,
  "Client library for Ledger Bitcoin application.",
);

/**
 * Python library to communicate with Ledger Blue/Nano S
 */
export const ledgerblue = mkPackage(
  nixRaw`pkgs.python2Packages.ledgerblue`,
  "Python library to communicate with Ledger Blue/Nano S",
);

/**
 * Python library to send and receive APDU through HID or TCP socket. It can be used with a Ledger Nano S/X or with the Speculos emulator.
 */
export const ledgercomm = mkPackage(
  nixRaw`pkgs.python2Packages.ledgercomm`,
  "Python library to send and receive APDU through HID or TCP socket. It can be used with a Ledger Nano S/X or with the Speculos emulator.",
);

/**
 * A library to control Ledger devices
 */
export const ledgerwallet = mkPackage(
  nixRaw`pkgs.python2Packages.ledgerwallet`,
  "A library to control Ledger devices",
);

/**
 * Implementation of the Leiden algorithm for various quality functions to be used with igraph in Python
 */
export const leidenalg = mkPackage(
  nixRaw`pkgs.python2Packages.leidenalg`,
  "Implementation of the Leiden algorithm for various quality functions to be used with igraph in Python",
);

/**
 * Thread-safe Python bindings for LevelDB
 */
export const leveldb = mkPackage(
  nixRaw`pkgs.python2Packages.leveldb`,
  "Thread-safe Python bindings for LevelDB",
);

/**
 * Functions for fast computation of Levenshtein distance and string similarity
 */
export const levenshtein = mkPackage(
  nixRaw`pkgs.python2Packages.levenshtein`,
  "Functions for fast computation of Levenshtein distance and string similarity",
);

/**
 * micro library to increment lexically ordered numerical ids
 */
export const lexid = mkPackage(
  nixRaw`pkgs.python2Packages.lexid`,
  "micro library to increment lexically ordered numerical ids",
);

/**
 * A general purpose interpolator, used for evaluating Parton Distribution Functions from discretised data files
 */
export const lhapdf = mkPackage(
  nixRaw`pkgs.python2Packages.lhapdf`,
  "A general purpose interpolator, used for evaluating Parton Distribution Functions from discretised data files",
);

/**
 * Using hardware wallets as SSH/GPG agent
 */
export const libagent = mkPackage(
  nixRaw`pkgs.python2Packages.libagent`,
  "Using hardware wallets as SSH/GPG agent",
);

/**
 * Library for decoding maritime Automatic Identification System messages
 */
export const libais = mkPackage(
  nixRaw`pkgs.python2Packages.libais`,
  "Library for decoding maritime Automatic Identification System messages",
);

/**
 * Python interface to libarchive
 */
export const libarchive_c = mkPackage(
  nixRaw`pkgs.python2Packages.libarchive-c`,
  "Python interface to libarchive",
);

/**
 * Communication library between internal components for Ultimaker software
 */
export const libarcus = mkPackage(
  nixRaw`pkgs.python2Packages.libarcus`,
  "Communication library between internal components for Ultimaker software",
);

/**
 * libasyncns-python is a python binding for the asynchronous name service query library
 */
export const libasyncns = mkPackage(
  nixRaw`pkgs.python2Packages.libasyncns`,
  "libasyncns-python is a python binding for the asynchronous name service query library",
);

/**
 * A unified interface to many cloud providers
 */
export const libcloud = mkPackage(
  nixRaw`pkgs.python2Packages.libcloud`,
  "A unified interface to many cloud providers",
);

/**
 * Concrete Syntax Tree (CST) parser and serializer library for Python
 */
export const libcst = mkPackage(
  nixRaw`pkgs.python2Packages.libcst`,
  "Concrete Syntax Tree (CST) parser and serializer library for Python",
);

/**
 * Python wrapper around the libevdev C library
 */
export const libevdev = mkPackage(
  nixRaw`pkgs.python2Packages.libevdev`,
  "Python wrapper around the libevdev C library",
);

/**
 * Device Tree Compiler
 */
export const libfdt = mkPackage(
  nixRaw`pkgs.python2Packages.libfdt`,
  "Device Tree Compiler",
);

/**
 * Python bindings for libgpiod
 */
export const libgpiod = mkPackage(
  nixRaw`pkgs.python2Packages.libgpiod`,
  "Python bindings for libgpiod",
);

/**
 * Library to manipulate tensors on GPU.
 */
export const libgpuarray = mkPackage(
  nixRaw`pkgs.python2Packages.libgpuarray`,
  "Library to manipulate tensors on GPU.",
);

/**
 * API for interfacing with the Linux Industrial I/O Subsystem
 */
export const libiio = mkPackage(
  nixRaw`pkgs.python2Packages.libiio`,
  "API for interfacing with the Linux Industrial I/O Subsystem",
);

/**
 * A library to access KeePass 1.x/KeePassX (v3) and KeePass 2.x (v4) files
 */
export const libkeepass = mkPackage(
  nixRaw`pkgs.python2Packages.libkeepass`,
  "A library to access KeePass 1.x/KeePassX (v3) and KeePass 2.x (v4) files",
);

/**
 * Python bindings for libknot
 */
export const libknot = mkPackage(
  nixRaw`pkgs.python2Packages.libknot`,
  "Python bindings for libknot",
);

/**
 * A python library built to easily handle data structure such are lists, trees and acyclic graphs
 */
export const liblarch = mkPackage(
  nixRaw`pkgs.python2Packages.liblarch`,
  "A python library built to easily handle data structure such are lists, trees and acyclic graphs",
);

/**
 * Python bindings for LZFSE
 */
export const liblzfse = mkPackage(
  nixRaw`pkgs.python2Packages.liblzfse`,
  "Python bindings for LZFSE",
);

/**
 * libMR provides core MetaRecognition and Weibull fitting functionality
 */
export const libmr = mkPackage(
  nixRaw`pkgs.python2Packages.libmr`,
  "libMR provides core MetaRecognition and Weibull fitting functionality",
);

/**
 * Python bindings for libsodium based on ctypes
 */
export const libnacl = mkPackage(
  nixRaw`pkgs.python2Packages.libnacl`,
  "Python bindings for libsodium based on ctypes",
);

/**
 * Python binding for the libpcap C library
 */
export const libpcap = mkPackage(
  nixRaw`pkgs.python2Packages.libpcap`,
  "Python binding for the libpcap C library",
);

/**
 * Python library for Dyson devices
 */
export const libpurecool = mkPackage(
  nixRaw`pkgs.python2Packages.libpurecool`,
  "Python library for Dyson devices",
);

/**
 * Password quality checking and random password generation library
 */
export const libpwquality = mkPackage(
  nixRaw`pkgs.python2Packages.libpwquality`,
  "Password quality checking and random password generation library",
);

/**
 * Python Library for Foscam IP Cameras
 */
export const libpyfoscam = mkPackage(
  nixRaw`pkgs.python2Packages.libpyfoscam`,
  "Python Library for Foscam IP Cameras",
);

/**
 * Python Library for Vivotek IP Cameras
 */
export const libpyvivotek = mkPackage(
  nixRaw`pkgs.python2Packages.libpyvivotek`,
  "Python Library for Vivotek IP Cameras",
);

/**
 * Free implementation of the DWG file format
 */
export const libredwg = mkPackage(
  nixRaw`pkgs.python2Packages.libredwg`,
  "Free implementation of the DWG file format",
);

/**
 * Library providing C and Python (libcURL like) API for downloading linux repository metadata and packages
 */
export const librepo = mkPackage(
  nixRaw`pkgs.python2Packages.librepo`,
  "Library providing C and Python (libcURL like) API for downloading linux repository metadata and packages",
);

/**
 * Open Source Spotify Client
 */
export const librespot = mkPackage(
  nixRaw`pkgs.python2Packages.librespot`,
  "Open Source Spotify Client",
);

/**
 * Free and Open Source Machine Translation API. Self-hosted, no limits, no ties to proprietary services
 */
export const libretranslate = mkPackage(
  nixRaw`pkgs.python2Packages.libretranslate`,
  "Free and Open Source Machine Translation API. Self-hosted, no limits, no ties to proprietary services",
);

/**
 * Python library for audio and music analysis
 */
export const librosa = mkPackage(
  nixRaw`pkgs.python2Packages.librosa`,
  "Python library for audio and music analysis",
);

/**
 * Python implementation of the MikroTik RouterOS API
 */
export const librouteros = mkPackage(
  nixRaw`pkgs.python2Packages.librouteros`,
  "Python implementation of the MikroTik RouterOS API",
);

/**
 * Python binding for libsass to compile Sass/SCSS
 */
export const libsass = mkPackage(
  nixRaw`pkgs.python2Packages.libsass`,
  "Python binding for libsass to compile Sass/SCSS",
);

/**
 * C++ implementation of 3mf loading with SIP python bindings
 */
export const libsavitar = mkPackage(
  nixRaw`pkgs.python2Packages.libsavitar`,
  "C++ implementation of 3mf loading with SIP python bindings",
);

/**
 * SELinux core library
 */
export const libselinux = mkPackage(
  nixRaw`pkgs.python2Packages.libselinux`,
  "SELinux core library",
);

/**
 * SIXEL graphics encoder/decoder implementation
 */
export const libsixel = mkPackage(
  nixRaw`pkgs.python2Packages.libsixel`,
  "SIXEL graphics encoder/decoder implementation",
);

/**
 * Bose Soundtouch Python library
 */
export const libsoundtouch = mkPackage(
  nixRaw`pkgs.python2Packages.libsoundtouch`,
  "Bose Soundtouch Python library",
);

/**
 * Python extension to thumbor
 */
export const libthumbor = mkPackage(
  nixRaw`pkgs.python2Packages.libthumbor`,
  "Python extension to thumbor",
);

/**
 * Typed scripting library / ORM / API wrapper for tmux
 */
export const libtmux = mkPackage(
  nixRaw`pkgs.python2Packages.libtmux`,
  "Typed scripting library / ORM / API wrapper for tmux",
);

/**
 * A C++ BitTorrent implementation focusing on efficiency and scalability
 */
export const libtorrent_rasterbar = mkPackage(
  nixRaw`pkgs.python2Packages.libtorrent-rasterbar`,
  "A C++ BitTorrent implementation focusing on efficiency and scalability",
);

/**
 * Python ctype-based wrapper around libusb1
 */
export const libusb1 = mkPackage(
  nixRaw`pkgs.python2Packages.libusb1`,
  "Python ctype-based wrapper around libusb1",
);

/**
 * NXP Secure Provisioning SDK
 */
export const libusbsio = mkPackage(
  nixRaw`pkgs.python2Packages.libusbsio`,
  "NXP Secure Provisioning SDK",
);

/**
 * Python bindings for libversion, which provides fast, powerful and correct generic version string comparison algorithm
 */
export const libversion = mkPackage(
  nixRaw`pkgs.python2Packages.libversion`,
  "Python bindings for libversion, which provides fast, powerful and correct generic version string comparison algorithm",
);

/**
 * libvirt Python bindings
 */
export const libvirt = mkPackage(
  nixRaw`pkgs.python2Packages.libvirt`,
  "libvirt Python bindings",
);

/**
 * XML parsing library for C
 */
export const libxml2 = mkPackage(
  nixRaw`pkgs.python2Packages.libxml2`,
  "XML parsing library for C",
);

/**
 * A C library and tools to do XSL transformations
 */
export const libxslt = mkPackage(
  nixRaw`pkgs.python2Packages.libxslt`,
  "A C library and tools to do XSL transformations",
);

/**
 * Check python packages from requirement.txt and report issues
 */
export const liccheck = mkPackage(
  nixRaw`pkgs.python2Packages.liccheck`,
  "Check python packages from requirement.txt and report issues",
);

/**
 * Utility library to parse, normalize and compare License expressions
 */
export const license_expression = mkPackage(
  nixRaw`pkgs.python2Packages.license-expression`,
  "Utility library to parse, normalize and compare License expressions",
);

/**
 * Library to Instrument Executable Formats
 */
export const lief = mkPackage(
  nixRaw`pkgs.python2Packages.lief`,
  "Library to Instrument Executable Formats",
);

/**
 * Python module to interact with Life360
 */
export const life360 = mkPackage(
  nixRaw`pkgs.python2Packages.life360`,
  "Python module to interact with Life360",
);

/**
 * Survival analysis in Python
 */
export const lifelines = mkPackage(
  nixRaw`pkgs.python2Packages.lifelines`,
  "Survival analysis in Python",
);

/**
 * A fast, distributed, high performance gradient boosting (GBDT, GBRT, GBM or MART) framework
 */
export const lightgbm = mkPackage(
  nixRaw`pkgs.python2Packages.lightgbm`,
  "A fast, distributed, high performance gradient boosting (GBDT, GBRT, GBM or MART) framework",
);

/**
 * Common Python utilities and GitHub Actions in Lightning Ecosystem
 */
export const lightning_utilities = mkPackage(
  nixRaw`pkgs.python2Packages.lightning-utilities`,
  "Common Python utilities and GitHub Actions in Lightning Ecosystem",
);

/**
 * Another attempt at parameters in Python
 */
export const lightparam = mkPackage(
  nixRaw`pkgs.python2Packages.lightparam`,
  "Another attempt at parameters in Python",
);

/**
 * Module for interacting with LightwaveRF hubs
 */
export const lightwave = mkPackage(
  nixRaw`pkgs.python2Packages.lightwave`,
  "Module for interacting with LightwaveRF hubs",
);

/**
 * Library to interact with LightWaveRF 2nd Gen lights and switches
 */
export const lightwave2 = mkPackage(
  nixRaw`pkgs.python2Packages.lightwave2`,
  "Library to interact with LightWaveRF 2nd Gen lights and switches",
);

/**
 * Lightweight Marshalling of Python 3 Objects.
 */
export const lima = mkPackage(
  nixRaw`pkgs.python2Packages.lima`,
  "Lightweight Marshalling of Python 3 Objects.",
);

/**
 * Local Interpretable Model-Agnostic Explanations for machine learning classifiers
 */
export const lime = mkPackage(
  nixRaw`pkgs.python2Packages.lime`,
  "Local Interpretable Model-Agnostic Explanations for machine learning classifiers",
);

/**
 * Python rate-limiting, thread-safe and asynchronous decorators and context managers
 */
export const limiter = mkPackage(
  nixRaw`pkgs.python2Packages.limiter`,
  "Python rate-limiting, thread-safe and asynchronous decorators and context managers",
);

/**
 * Control LimitlessLED products
 */
export const limitlessled = mkPackage(
  nixRaw`pkgs.python2Packages.limitlessled`,
  "Control LimitlessLED products",
);

/**
 * Rate limiting using various strategies and storage backends such as redis & memcached
 */
export const limits = mkPackage(
  nixRaw`pkgs.python2Packages.limits`,
  "Rate limiting using various strategies and storage backends such as redis & memcached",
);

/**
 * A modified version of Supybot, an IRC bot
 */
export const limnoria = mkPackage(
  nixRaw`pkgs.python2Packages.limnoria`,
  "A modified version of Supybot, an IRC bot",
);

/**
 * Line-by-line profiler
 */
export const line_profiler = mkPackage(
  nixRaw`pkgs.python2Packages.line_profiler`,
  "Line-by-line profiler",
);

/**
 * A LinearOperator implementation to wrap the numerical nuts and bolts of GPyTorch
 */
export const linear_operator = mkPackage(
  nixRaw`pkgs.python2Packages.linear_operator`,
  "A LinearOperator implementation to wrap the numerical nuts and bolts of GPyTorch",
);

/**
 * A backport of linecache to older supported Pythons
 */
export const linecache2 = mkPackage(
  nixRaw`pkgs.python2Packages.linecache2`,
  "A backport of linecache to older supported Pythons",
);

/**
 * A readline library based on prompt_toolkit which supports multiple modes
 */
export const lineedit = mkPackage(
  nixRaw`pkgs.python2Packages.lineedit`,
  "A readline library based on prompt_toolkit which supports multiple modes",
);

/**
 * Library to parse and generate co_linetable attributes in Python code objects
 */
export const linetable = mkPackage(
  nixRaw`pkgs.python2Packages.linetable`,
  "Library to parse and generate co_linetable attributes in Python code objects",
);

/**
 * Translation toolset
 */
export const lingua = mkPackage(
  nixRaw`pkgs.python2Packages.lingua`,
  "Translation toolset",
);

/**
 * Links recognition library with full unicode support
 */
export const linkify_it_py = mkPackage(
  nixRaw`pkgs.python2Packages.linkify-it-py`,
  "Links recognition library with full unicode support",
);

/**
 * A thin python wrapper around Linode's API
 */
export const linode = mkPackage(
  nixRaw`pkgs.python2Packages.linode`,
  "A thin python wrapper around Linode's API",
);

/**
 * Python library for the Linode API v4
 */
export const linode_api = mkPackage(
  nixRaw`pkgs.python2Packages.linode-api`,
  "Python library for the Linode API v4",
);

/**
 * Python bindings for the Linux eventfd/signalfd/timerfd/inotify syscalls
 */
export const linuxfd = mkPackage(
  nixRaw`pkgs.python2Packages.linuxfd`,
  "Python bindings for the Linux eventfd/signalfd/timerfd/inotify syscalls",
);

/**
 * Optimizer tuned by Google Brain using genetic algorithms
 */
export const lion_pytorch = mkPackage(
  nixRaw`pkgs.python2Packages.lion-pytorch`,
  "Optimizer tuned by Google Brain using genetic algorithms",
);

/**
 * Cross-platform CLI and Python drivers for AIO liquid coolers and other devices
 */
export const liquidctl = mkPackage(
  nixRaw`pkgs.python2Packages.liquidctl`,
  "Cross-platform CLI and Python drivers for AIO liquid coolers and other devices",
);

/**
 * Allows to receive and send infrared signals
 */
export const lirc = mkPackage(
  nixRaw`pkgs.python2Packages.lirc`,
  "Allows to receive and send infrared signals",
);

/**
 * Portable tool for executing LLVM and Clang style test suites
 */
export const lit = mkPackage(
  nixRaw`pkgs.python2Packages.lit`,
  "Portable tool for executing LLVM and Clang style test suites",
);

/**
 * Use any LLM as a drop in replacement for gpt-3.5-turbo. Use Azure, OpenAI, Cohere, Anthropic, Ollama, VLLM, Sagemaker, HuggingFace, Replicate (100+ LLMs)
 */
export const litellm = mkPackage(
  nixRaw`pkgs.python2Packages.litellm`,
  "Use any LLM as a drop in replacement for gpt-3.5-turbo. Use Azure, OpenAI, Cohere, Anthropic, Ollama, VLLM, Sagemaker, HuggingFace, Replicate (100+ LLMs)",
);

/**
 * A Python library to read and edit Litematica's schematic file format
 */
export const litemapy = mkPackage(
  nixRaw`pkgs.python2Packages.litemapy`,
  "A Python library to read and edit Litematica's schematic file format",
);

/**
 * Small collection of Python utility functions
 */
export const littleutils = mkPackage(
  nixRaw`pkgs.python2Packages.littleutils`,
  "Small collection of Python utility functions",
);

/**
 * Live training loss plot in Jupyter for Keras, PyTorch, and others
 */
export const livelossplot = mkPackage(
  nixRaw`pkgs.python2Packages.livelossplot`,
  "Live training loss plot in Jupyter for Keras, PyTorch, and others",
);

/**
 * Runs a local server that reloads as you develop
 */
export const livereload = mkPackage(
  nixRaw`pkgs.python2Packages.livereload`,
  "Runs a local server that reloads as you develop",
);

/**
 * Livestreamer is CLI program that extracts streams from various services and pipes them into a video player of choice
 */
export const livestreamer = mkPackage(
  nixRaw`pkgs.python2Packages.livestreamer`,
  "Livestreamer is CLI program that extracts streams from various services and pipes them into a video player of choice",
);

/**
 * Curses frontend for livestreamer
 */
export const livestreamer_curses = mkPackage(
  nixRaw`pkgs.python2Packages.livestreamer-curses`,
  "Curses frontend for livestreamer",
);

/**
 * Code analyzer without caring the C/C++ header files
 */
export const lizard = mkPackage(
  nixRaw`pkgs.python2Packages.lizard`,
  "Code analyzer without caring the C/C++ header files",
);

/**
 * Python bindings for the low-level FUSE API
 */
export const llfuse = mkPackage(
  nixRaw`pkgs.python2Packages.llfuse`,
  "Python bindings for the low-level FUSE API",
);

/**
 * A lightweight LLVM python binding for writing JIT compilers
 */
export const llvmlite = mkPackage(
  nixRaw`pkgs.python2Packages.llvmlite`,
  "A lightweight LLVM python binding for writing JIT compilers",
);

/**
 * Universal Python binding for the LMDB 'Lightning' Database
 */
export const lmdb = mkPackage(
  nixRaw`pkgs.python2Packages.lmdb`,
  "Universal Python binding for the LMDB 'Lightning' Database",
);

/**
 * Least-Squares Minimization with Bounds and Constraints
 */
export const lmfit = mkPackage(
  nixRaw`pkgs.python2Packages.lmfit`,
  "Least-Squares Minimization with Bounds and Constraints",
);

/**
 * Load me later. A lazy plugin management system for Python
 */
export const lml = mkPackage(
  nixRaw`pkgs.python2Packages.lml`,
  "Load me later. A lazy plugin management system for Python",
);

/**
 * Python package for sending notifications to LaMetric Time
 */
export const lmnotify = mkPackage(
  nixRaw`pkgs.python2Packages.lmnotify`,
  "Python package for sending notifications to LaMetric Time",
);

/**
 * LMTP counterpart to smtpd in the Python standard library
 */
export const lmtpd = mkPackage(
  nixRaw`pkgs.python2Packages.lmtpd`,
  "LMTP counterpart to smtpd in the Python standard library",
);

/**
 * Local locations
 */
export const loca = mkPackage(
  nixRaw`pkgs.python2Packages.loca`,
  "Local locations",
);

/**
 * Isolated import of Python modules
 */
export const localimport = mkPackage(
  nixRaw`pkgs.python2Packages.localimport`,
  "Isolated import of Python modules",
);

/**
 * A fully functional local Cloud stack
 */
export const localstack = mkPackage(
  nixRaw`pkgs.python2Packages.localstack`,
  "A fully functional local Cloud stack",
);

/**
 * A lightweight Python client for LocalStack
 */
export const localstack_client = mkPackage(
  nixRaw`pkgs.python2Packages.localstack-client`,
  "A lightweight Python client for LocalStack",
);

/**
 * Extensions for LocalStack
 */
export const localstack_ext = mkPackage(
  nixRaw`pkgs.python2Packages.localstack-ext`,
  "Extensions for LocalStack",
);

/**
 * A simple DNS library for managing zone files
 */
export const localzone = mkPackage(
  nixRaw`pkgs.python2Packages.localzone`,
  "A simple DNS library for managing zone files",
);

/**
 * Python package to retrieve coordinates from a Google account
 */
export const locationsharinglib = mkPackage(
  nixRaw`pkgs.python2Packages.locationsharinglib`,
  "Python package to retrieve coordinates from a Google account",
);

/**
 * Library which provides a lock that can be used by multiple processes
 */
export const locket = mkPackage(
  nixRaw`pkgs.python2Packages.locket`,
  "Library which provides a lock that can be used by multiple processes",
);

/**
 * Platform-independent advisory file locking capability for Python applications
 */
export const lockfile = mkPackage(
  nixRaw`pkgs.python2Packages.lockfile`,
  "Platform-independent advisory file locking capability for Python applications",
);

/**
 * Colored Symbols for Various Log Levels.
 */
export const log_symbols = mkPackage(
  nixRaw`pkgs.python2Packages.log-symbols`,
  "Colored Symbols for Various Log Levels.",
);

/**
 * A logging replacement for Python
 */
export const logbook = mkPackage(
  nixRaw`pkgs.python2Packages.logbook`,
  "A logging replacement for Python",
);

/**
 * Python module that allows for responsible, low-boilerplate logging of method calls
 */
export const logfury = mkPackage(
  nixRaw`pkgs.python2Packages.logfury`,
  "Python module that allows for responsible, low-boilerplate logging of method calls",
);

/**
 * Logging handler for writing logs to the journald
 */
export const logging_journald = mkPackage(
  nixRaw`pkgs.python2Packages.logging-journald`,
  "Logging handler for writing logs to the journald",
);

/**
 * A Python library to communicate with Logi Circle cameras
 */
export const logi_circle = mkPackage(
  nixRaw`pkgs.python2Packages.logi-circle`,
  "A Python library to communicate with Logi Circle cameras",
);

/**
 * Straightforward unification in Python that's extensible via generic functions
 */
export const logical_unification = mkPackage(
  nixRaw`pkgs.python2Packages.logical-unification`,
  "Straightforward unification in Python that's extensible via generic functions",
);

/**
 * Python packages and modules used by Logilab 
 */
export const logilab_common = mkPackage(
  nixRaw`pkgs.python2Packages.logilab-common`,
  "Python packages and modules used by Logilab ",
);

/**
 * logilab-database provides some classes to make unified access to different
 */
export const logilab_constraint = mkPackage(
  nixRaw`pkgs.python2Packages.logilab-constraint`,
  "logilab-database provides some classes to make unified access to different",
);

/**
 * Parses log files, generates metrics for Graphite and Ganglia
 */
export const logster = mkPackage(
  nixRaw`pkgs.python2Packages.logster`,
  "Parses log files, generates metrics for Graphite and Ganglia",
);

/**
 * Python logging made (stupidly) simple
 */
export const loguru = mkPackage(
  nixRaw`pkgs.python2Packages.loguru`,
  "Python logging made (stupidly) simple",
);

/**
 * Logging utilities
 */
export const logutils = mkPackage(
  nixRaw`pkgs.python2Packages.logutils`,
  "Logging utilities",
);

/**
 * Robust and effective logging for Python 2 and 3
 */
export const logzero = mkPackage(
  nixRaw`pkgs.python2Packages.logzero`,
  "Robust and effective logging for Python 2 and 3",
);

/**
 * Websocket Client Library
 */
export const lomond = mkPackage(
  nixRaw`pkgs.python2Packages.lomond`,
  "Websocket Client Library",
);

/**
 * A code generator for array-based code on CPUs and GPUs
 */
export const loopy = mkPackage(
  nixRaw`pkgs.python2Packages.loopy`,
  "A code generator for array-based code on CPUs and GPUs",
);

/**
 * Version numbering for anarchists and software realists
 */
export const looseversion = mkPackage(
  nixRaw`pkgs.python2Packages.looseversion`,
  "Version numbering for anarchists and software realists",
);

/**
 * Module to interact with the Loqed Smart Door Lock API
 */
export const loqedapi = mkPackage(
  nixRaw`pkgs.python2Packages.loqedapi`,
  "Module to interact with the Loqed Smart Door Lock API",
);

/**
 * Python module for consuming the Losant IoT Platform API
 */
export const losant_rest = mkPackage(
  nixRaw`pkgs.python2Packages.losant-rest`,
  "Python module for consuming the Losant IoT Platform API",
);

/**
 * Littlewood-Richardson Calculator bindings
 */
export const lrcalc_python = mkPackage(
  nixRaw`pkgs.python2Packages.lrcalc-python`,
  "Littlewood-Richardson Calculator bindings",
);

/**
 * Fast and memory efficient LRU cache for Python
 */
export const lru_dict = mkPackage(
  nixRaw`pkgs.python2Packages.lru-dict`,
  "Fast and memory efficient LRU cache for Python",
);

/**
 * Python module to extract data from Local Security Authority Subsystem Service (LSASS)
 */
export const lsassy = mkPackage(
  nixRaw`pkgs.python2Packages.lsassy`,
  "Python module to extract data from Local Security Authority Subsystem Service (LSASS)",
);

/**
 * Python implementation of the Language Server Protocol
 */
export const lsprotocol = mkPackage(
  nixRaw`pkgs.python2Packages.lsprotocol`,
  "Python implementation of the Language Server Protocol",
);

/**
 * Python bindings around Google Chromium's embedded compact language detection library (CLD2)
 */
export const ltpycld2 = mkPackage(
  nixRaw`pkgs.python2Packages.ltpycld2`,
  "Python bindings around Google Chromium's embedded compact language detection library (CLD2)",
);

/**
 * Checks for out-of-date package versions
 */
export const luddite = mkPackage(
  nixRaw`pkgs.python2Packages.luddite`,
  "Checks for out-of-date package versions",
);

/**
 * Python API for interacting with luftdaten.info
 */
export const luftdaten = mkPackage(
  nixRaw`pkgs.python2Packages.luftdaten`,
  "Python API for interacting with luftdaten.info",
);

/**
 * Python module for generate and verify Luhn check digits
 */
export const luhn = mkPackage(
  nixRaw`pkgs.python2Packages.luhn`,
  "Python module for generate and verify Luhn check digits",
);

/**
 * A Lunar-Solar Converter, containing a number of lunar and solar festivals in China
 */
export const lunarcalendar = mkPackage(
  nixRaw`pkgs.python2Packages.lunarcalendar`,
  "A Lunar-Solar Converter, containing a number of lunar and solar festivals in China",
);

/**
 * Lua in Python
 */
export const lupa = mkPackage(
  nixRaw`pkgs.python2Packages.lupa`,
  "Lua in Python",
);

/**
 * Python module to control Lupusec alarm control panels
 */
export const lupupy = mkPackage(
  nixRaw`pkgs.python2Packages.lupupy`,
  "Python module to control Lupusec alarm control panels",
);

/**
 * A lucene query parser generating ElasticSearch queries and more !
 */
export const luqum = mkPackage(
  nixRaw`pkgs.python2Packages.luqum`,
  "A lucene query parser generating ElasticSearch queries and more !",
);

/**
 * Python module to control FX Luminaire controllers
 */
export const luxor = mkPackage(
  nixRaw`pkgs.python2Packages.luxor`,
  "Python module to control FX Luminaire controllers",
);

/**
 * Python library to interact with Luxtronik heatpump controllers
 */
export const luxtronik = mkPackage(
  nixRaw`pkgs.python2Packages.luxtronik`,
  "Python library to interact with Luxtronik heatpump controllers",
);

/**
 * Lightweight Extensible Message Format for Reticulum
 */
export const lxmf = mkPackage(
  nixRaw`pkgs.python2Packages.lxmf`,
  "Lightweight Extensible Message Format for Reticulum",
);

/**
 * Pythonic binding for the libxml2 and libxslt libraries
 */
export const lxml = mkPackage(
  nixRaw`pkgs.python2Packages.lxml`,
  "Pythonic binding for the libxml2 and libxslt libraries",
);

/**
 * Type stubs for the lxml package
 */
export const lxml_stubs = mkPackage(
  nixRaw`pkgs.python2Packages.lxml-stubs`,
  "Type stubs for the lxml package",
);

/**
 * LyricWikia API for song lyrics
 */
export const lyricwikia = mkPackage(
  nixRaw`pkgs.python2Packages.lyricwikia`,
  "LyricWikia API for song lyrics",
);

/**
 * LZ4 Bindings for Python
 */
export const lz4 = mkPackage(
  nixRaw`pkgs.python2Packages.lz4`,
  "LZ4 Bindings for Python",
);

        /**
         * A Python 3.8+ binding for lzokay library which is an MIT licensed
a minimal, C++14 implementation of the LZO compression format.

         */
export const lzallright = mkPackage(
  nixRaw`pkgs.python2Packages.lzallright`,
  "A Python 3.8+ binding for lzokay library which is an MIT licensed\na minimal, C++14 implementation of the LZO compression format.\n",
);

/**
 * lz-string for python
 */
export const lzstring = mkPackage(
  nixRaw`pkgs.python2Packages.lzstring`,
  "lz-string for python",
);

/**
 * A Python crypto and SSL toolkit
 */
export const m2crypto = mkPackage(
  nixRaw`pkgs.python2Packages.m2crypto`,
  "A Python crypto and SSL toolkit",
);

/**
 * Python m3u8 parser
 */
export const m3u8 = mkPackage(
  nixRaw`pkgs.python2Packages.m3u8`,
  "Python m3u8 parser",
);

/**
 * Generate or read binary Alias and Bookmark records from Python code
 */
export const mac_alias = mkPackage(
  nixRaw`pkgs.python2Packages.mac_alias`,
  "Generate or read binary Alias and Bookmark records from Python code",
);

/**
 * Find the vendor for a given MAC address
 */
export const mac_vendor_lookup = mkPackage(
  nixRaw`pkgs.python2Packages.mac-vendor-lookup`,
  "Find the vendor for a given MAC address",
);

/**
 * A module for handling hardware identifiers like MAC addresses
 */
export const macaddress = mkPackage(
  nixRaw`pkgs.python2Packages.macaddress`,
  "A module for handling hardware identifiers like MAC addresses",
);

/**
 * Thread-based interface to file system observation primitives
 */
export const macfsevents = mkPackage(
  nixRaw`pkgs.python2Packages.macfsevents`,
  "Thread-based interface to file system observation primitives",
);

/**
 * Macros in Python: quasiquotes, case classes, LINQ and more
 */
export const macropy = mkPackage(
  nixRaw`pkgs.python2Packages.macropy`,
  "Macros in Python: quasiquotes, case classes, LINQ and more",
);

/**
 * Open-source Dropbox client for macOS and Linux
 */
export const maestral = mkPackage(
  nixRaw`pkgs.python2Packages.maestral`,
  "Open-source Dropbox client for macOS and Linux",
);

/**
 * A Python wrapper around libmagic
 */
export const magic = mkPackage(
  nixRaw`pkgs.python2Packages.magic`,
  "A Python wrapper around libmagic",
);

/**
 * Magic filter based on dynamic attribute getter
 */
export const magic_filter = mkPackage(
  nixRaw`pkgs.python2Packages.magic-filter`,
  "Magic filter based on dynamic attribute getter",
);

/**
 * Securely transfer data between computers
 */
export const magic_wormhole = mkPackage(
  nixRaw`pkgs.python2Packages.magic-wormhole`,
  "Securely transfer data between computers",
);

/**
 * Securely transfer data between computers
 */
export const magic_wormhole_mailbox_server = mkPackage(
  nixRaw`pkgs.python2Packages.magic-wormhole-mailbox-server`,
  "Securely transfer data between computers",
);

/**
 * Transit Relay server for Magic-Wormhole
 */
export const magic_wormhole_transit_relay = mkPackage(
  nixRaw`pkgs.python2Packages.magic-wormhole-transit-relay`,
  "Transit Relay server for Magic-Wormhole",
);

/**
 * Build GUIs from python functions, using magic.  (napari/magicgui)
 */
export const magicgui = mkPackage(
  nixRaw`pkgs.python2Packages.magicgui`,
  "Build GUIs from python functions, using magic.  (napari/magicgui)",
);

/**
 * Computer vision package based on numpy
 */
export const mahotas = mkPackage(
  nixRaw`pkgs.python2Packages.mahotas`,
  "Computer vision package based on numpy",
);

/**
 * A mail parser for python 2 and 3
 */
export const mail_parser = mkPackage(
  nixRaw`pkgs.python2Packages.mail-parser`,
  "A mail parser for python 2 and 3",
);

/**
 * A patched mailcap module that conforms to RFC 1524
 */
export const mailcap_fix = mkPackage(
  nixRaw`pkgs.python2Packages.mailcap-fix`,
  "A patched mailcap module that conforms to RFC 1524",
);

/**
 * Module for temporary (disposable/throwaway) email detection
 */
export const mailchecker = mkPackage(
  nixRaw`pkgs.python2Packages.mailchecker`,
  "Module for temporary (disposable/throwaway) email detection",
);

/**
 * A CLI client and Python API library for the MailChimp email platform
 */
export const mailchimp = mkPackage(
  nixRaw`pkgs.python2Packages.mailchimp`,
  "A CLI client and Python API library for the MailChimp email platform",
);

/**
 * REST client for driving Mailman 3
 */
export const mailmanclient = mkPackage(
  nixRaw`pkgs.python2Packages.mailmanclient`,
  "REST client for driving Mailman 3",
);

/**
 * A Python package to simplify receiving, parsing, and sending email
 */
export const mailsuite = mkPackage(
  nixRaw`pkgs.python2Packages.mailsuite`,
  "A Python package to simplify receiving, parsing, and sending email",
);

/**
 * Library to read settings from config files
 */
export const maison = mkPackage(
  nixRaw`pkgs.python2Packages.maison`,
  "Library to read settings from config files",
);

/**
 * Small library to dynamically create python functions
 */
export const makefun = mkPackage(
  nixRaw`pkgs.python2Packages.makefun`,
  "Small library to dynamically create python functions",
);

/**
 * Super-fast templating language
 */
export const mako = mkPackage(
  nixRaw`pkgs.python2Packages.mako`,
  "Super-fast templating language",
);

/**
 * Helper for malware analysis
 */
export const malduck = mkPackage(
  nixRaw`pkgs.python2Packages.malduck`,
  "Helper for malware analysis",
);

/**
 * ManageSieve client library for remotely managing Sieve scripts
 */
export const managesieve = mkPackage(
  nixRaw`pkgs.python2Packages.managesieve`,
  "ManageSieve client library for remotely managing Sieve scripts",
);

/**
 * Create Python CLI apps with little to no effort at all
 */
export const mando = mkPackage(
  nixRaw`pkgs.python2Packages.mando`,
  "Create Python CLI apps with little to no effort at all",
);

/**
 * Comic/manga/webtoon downloader and CBZ/EPUB/MOBI/PDF converter
 */
export const mandown = mkPackage(
  nixRaw`pkgs.python2Packages.mandown`,
  "Comic/manga/webtoon downloader and CBZ/EPUB/MOBI/PDF converter",
);

/**
 * Debugging manhole for Python applications
 */
export const manhole = mkPackage(
  nixRaw`pkgs.python2Packages.manhole`,
  "Debugging manhole for Python applications",
);

/**
 * Manifest for Prompting Foundation Models
 */
export const manifest_ml = mkPackage(
  nixRaw`pkgs.python2Packages.manifest-ml`,
  "Manifest for Prompting Foundation Models",
);

/**
 * A tool to reason about Odoo addons manifests
 */
export const manifestoo = mkPackage(
  nixRaw`pkgs.python2Packages.manifestoo`,
  "A tool to reason about Odoo addons manifests",
);

/**
 * A library to reason about Odoo addons manifests
 */
export const manifestoo_core = mkPackage(
  nixRaw`pkgs.python2Packages.manifestoo-core`,
  "A library to reason about Odoo addons manifests",
);

/**
 * Mozilla test manifest handling
 */
export const manifestparser = mkPackage(
  nixRaw`pkgs.python2Packages.manifestparser`,
  "Mozilla test manifest handling",
);

/**
 * Binding for Pango
 */
export const manimpango = mkPackage(
  nixRaw`pkgs.python2Packages.manimpango`,
  "Binding for Pango",
);

/**
 * A documentation builder
 */
export const manuel = mkPackage(
  nixRaw`pkgs.python2Packages.manuel`,
  "A documentation builder",
);

/**
 *  Parser library for Wireshark's OUI database
 */
export const manuf = mkPackage(
  nixRaw`pkgs.python2Packages.manuf`,
  " Parser library for Wireshark's OUI database",
);

/**
 * Mapbox-earcut fast triangulation of 2D-polygons
 */
export const mapbox_earcut = mkPackage(
  nixRaw`pkgs.python2Packages.mapbox-earcut`,
  "Mapbox-earcut fast triangulation of 2D-polygons",
);

/**
 * MariaDB Connector/Python
 */
export const mariadb = mkPackage(
  nixRaw`pkgs.python2Packages.mariadb`,
  "MariaDB Connector/Python",
);

/**
 * Python bindings for marisa
 */
export const marisa = mkPackage(
  nixRaw`pkgs.python2Packages.marisa`,
  "Python bindings for marisa",
);

/**
 * Static memory-efficient Trie-like structures for Python based on marisa-trie C++ library
 */
export const marisa_trie = mkPackage(
  nixRaw`pkgs.python2Packages.marisa-trie`,
  "Static memory-efficient Trie-like structures for Python based on marisa-trie C++ library",
);

/**
 * Python implementation of John Gruber's Markdown
 */
export const markdown = mkPackage(
  nixRaw`pkgs.python2Packages.markdown`,
  "Python implementation of John Gruber's Markdown",
);

/**
 * A fast and complete Python implementation of Markdown
 */
export const markdown2 = mkPackage(
  nixRaw`pkgs.python2Packages.markdown2`,
  "A fast and complete Python implementation of Markdown",
);

/**
 * Extension to Python-Markdown which provides an include function
 */
export const markdown_include = mkPackage(
  nixRaw`pkgs.python2Packages.markdown-include`,
  "Extension to Python-Markdown which provides an include function",
);

/**
 * Markdown parser in Python
 */
export const markdown_it_py = mkPackage(
  nixRaw`pkgs.python2Packages.markdown-it-py`,
  "Markdown parser in Python",
);

/**
 * An extension for python-markdown that makes writing trac-like macros easy
 */
export const markdown_macros = mkPackage(
  nixRaw`pkgs.python2Packages.markdown-macros`,
  "An extension for python-markdown that makes writing trac-like macros easy",
);

/**
 * HTML to Markdown converter
 */
export const markdownify = mkPackage(
  nixRaw`pkgs.python2Packages.markdownify`,
  "HTML to Markdown converter",
);

/**
 * An HTML/XML generator
 */
export const markuppy = mkPackage(
  nixRaw`pkgs.python2Packages.markuppy`,
  "An HTML/XML generator",
);

/**
 * Wrapper around various text markup languages
 */
export const markups = mkPackage(
  nixRaw`pkgs.python2Packages.markups`,
  "Wrapper around various text markup languages",
);

/**
 * Implements a XML/HTML/XHTML Markup safe string
 */
export const markupsafe = mkPackage(
  nixRaw`pkgs.python2Packages.markupsafe`,
  "Implements a XML/HTML/XHTML Markup safe string",
);

/**
 * Library for converting complex objects to and from simple Python datatypes
 */
export const marshmallow = mkPackage(
  nixRaw`pkgs.python2Packages.marshmallow`,
  "Library for converting complex objects to and from simple Python datatypes",
);

/**
 * Automatic generation of marshmallow schemas from dataclasses
 */
export const marshmallow_dataclass = mkPackage(
  nixRaw`pkgs.python2Packages.marshmallow-dataclass`,
  "Automatic generation of marshmallow schemas from dataclasses",
);

/**
 * Enum field for Marshmallow
 */
export const marshmallow_enum = mkPackage(
  nixRaw`pkgs.python2Packages.marshmallow-enum`,
  "Enum field for Marshmallow",
);

/**
 * Marshmallow library extension that allows schema (de)multiplexing
 */
export const marshmallow_oneofschema = mkPackage(
  nixRaw`pkgs.python2Packages.marshmallow-oneofschema`,
  "Marshmallow library extension that allows schema (de)multiplexing",
);

/**
 * Extension to Marshmallow to allow for polymorphic fields
 */
export const marshmallow_polyfield = mkPackage(
  nixRaw`pkgs.python2Packages.marshmallow-polyfield`,
  "Extension to Marshmallow to allow for polymorphic fields",
);

/**
 * SQLAlchemy integration with marshmallow
 */
export const marshmallow_sqlalchemy = mkPackage(
  nixRaw`pkgs.python2Packages.marshmallow-sqlalchemy`,
  "SQLAlchemy integration with marshmallow",
);

/**
 * Fast and well tested serialization library on top of dataclasses
 */
export const mashumaro = mkPackage(
  nixRaw`pkgs.python2Packages.mashumaro`,
  "Fast and well tested serialization library on top of dataclasses",
);

/**
 * Library to remotely dump domain credentials
 */
export const masky = mkPackage(
  nixRaw`pkgs.python2Packages.masky`,
  "Library to remotely dump domain credentials",
);

/**
 * Python wrapper for the Mastodon API
 */
export const mastodon_py = mkPackage(
  nixRaw`pkgs.python2Packages.mastodon-py`,
  "Python wrapper for the Mastodon API",
);

/**
 * A handy tool to trash your metadata
 */
export const mat2 = mkPackage(
  nixRaw`pkgs.python2Packages.mat2`,
  "A handy tool to trash your metadata",
);

/**
 * A library for pattern matching on symbolic expressions
 */
export const matchpy = mkPackage(
  nixRaw`pkgs.python2Packages.matchpy`,
  "A library for pattern matching on symbolic expressions",
);

/**
 * Python port of material_color_utilities used for Material You colors
 */
export const material_color_utilities = mkPackage(
  nixRaw`pkgs.python2Packages.material-color-utilities`,
  "Python port of material_color_utilities used for Material You colors",
);

/**
 * Supporting tool for Lean's mathlib
 */
export const mathlibtools = mkPackage(
  nixRaw`pkgs.python2Packages.mathlibtools`,
  "Supporting tool for Lean's mathlib",
);

/**
 * Google Play Unofficial Python API
 */
export const matlink_gpapi = mkPackage(
  nixRaw`pkgs.python2Packages.matlink-gpapi`,
  "Google Play Unofficial Python API",
);

/**
 * Python plotting library, making publication quality plots
 */
export const matplotlib = mkPackage(
  nixRaw`pkgs.python2Packages.matplotlib`,
  "Python plotting library, making publication quality plots",
);

/**
 * Matplotlib Inline Back-end for IPython and Jupyter
 */
export const matplotlib_inline = mkPackage(
  nixRaw`pkgs.python2Packages.matplotlib-inline`,
  "Matplotlib Inline Back-end for IPython and Jupyter",
);

/**
 * A sixel graphics backend for matplotlib
 */
export const matplotlib_sixel = mkPackage(
  nixRaw`pkgs.python2Packages.matplotlib-sixel`,
  "A sixel graphics backend for matplotlib",
);

/**
 * More styles and useful extensions for Matplotlib
 */
export const matplotx = mkPackage(
  nixRaw`pkgs.python2Packages.matplotx`,
  "More styles and useful extensions for Matplotlib",
);

/**
 * An asyncio wrapper of matrix_client.api
 */
export const matrix_api_async = mkPackage(
  nixRaw`pkgs.python2Packages.matrix-api-async`,
  "An asyncio wrapper of matrix_client.api",
);

/**
 * Python Matrix Client-Server SDK
 */
export const matrix_client = mkPackage(
  nixRaw`pkgs.python2Packages.matrix-client`,
  "Python Matrix Client-Server SDK",
);

/**
 * Common utilities for Synapse, Sydent and Sygnal
 */
export const matrix_common = mkPackage(
  nixRaw`pkgs.python2Packages.matrix-common`,
  "Common utilities for Synapse, Sydent and Sygnal",
);

/**
 * A Python Matrix client library, designed according to sans I/O principles
 */
export const matrix_nio = mkPackage(
  nixRaw`pkgs.python2Packages.matrix-nio`,
  "A Python Matrix client library, designed according to sans I/O principles",
);

/**
 * A Python Mattermost Driver
 */
export const mattermostdriver = mkPackage(
  nixRaw`pkgs.python2Packages.mattermostdriver`,
  "A Python Mattermost Driver",
);

/**
 * A plugin-based Matrix bot system written in Python
 */
export const maubot = mkPackage(
  nixRaw`pkgs.python2Packages.maubot`,
  "A plugin-based Matrix bot system written in Python",
);

/**
 * Asyncio Matrix framework
 */
export const mautrix = mkPackage(
  nixRaw`pkgs.python2Packages.mautrix`,
  "Asyncio Matrix framework",
);

/**
 * Asyncio Matrix framework
 */
export const mautrix_appservice = mkPackage(
  nixRaw`pkgs.python2Packages.mautrix-appservice`,
  "Asyncio Matrix framework",
);

/**
 * eQ-3/ELV MAX! Cube Python API
 */
export const maxcube_api = mkPackage(
  nixRaw`pkgs.python2Packages.maxcube-api`,
  "eQ-3/ELV MAX! Cube Python API",
);

/**
 * Reader for the MaxMind DB format
 */
export const maxminddb = mkPackage(
  nixRaw`pkgs.python2Packages.maxminddb`,
  "Reader for the MaxMind DB format",
);

/**
 * Datetimes for Humans
 */
export const maya = mkPackage(
  nixRaw`pkgs.python2Packages.maya`,
  "Datetimes for Humans",
);

/**
 * 3D visualization of scientific data in Python
 */
export const mayavi = mkPackage(
  nixRaw`pkgs.python2Packages.mayavi`,
  "3D visualization of scientific data in Python",
);

/**
 * Mythic Beasts Dynamic DNS updater
 */
export const mbddns = mkPackage(
  nixRaw`pkgs.python2Packages.mbddns`,
  "Mythic Beasts Dynamic DNS updater",
);

/**
 * A library for decoding multi-byte character strings
 */
export const mbstrdecoder = mkPackage(
  nixRaw`pkgs.python2Packages.mbstrdecoder`,
  "A library for decoding multi-byte character strings",
);

/**
 * McCabe checker, plugin for flake8
 */
export const mccabe = mkPackage(
  nixRaw`pkgs.python2Packages.mccabe`,
  "McCabe checker, plugin for flake8",
);

/**
 * Python library for checking the status of Minecraft servers
 */
export const mcstatus = mkPackage(
  nixRaw`pkgs.python2Packages.mcstatus`,
  "Python library for checking the status of Minecraft servers",
);

/**
 * Getting Minecraft player information from Mojang API
 */
export const mcuuid = mkPackage(
  nixRaw`pkgs.python2Packages.mcuuid`,
  "Getting Minecraft player information from Mojang API",
);

/**
 * Table of contents generator for Markdown
 */
export const md_toc = mkPackage(
  nixRaw`pkgs.python2Packages.md-toc`,
  "Table of contents generator for Markdown",
);

/**
 * CommonMark compliant Markdown formatter
 */
export const mdformat = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat`,
  "CommonMark compliant Markdown formatter",
);

/**
 * mdformat plugin for admonitions
 */
export const mdformat_admon = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat-admon`,
  "mdformat plugin for admonitions",
);

/**
 * Mdformat plugin to beautify Bash scripts
 */
export const mdformat_beautysh = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat-beautysh`,
  "Mdformat plugin to beautify Bash scripts",
);

/**
 * Footnote format addition for mdformat
 */
export const mdformat_footnote = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat-footnote`,
  "Footnote format addition for mdformat",
);

/**
 * mdformat plugin to ensure frontmatter is respected
 */
export const mdformat_frontmatter = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat-frontmatter`,
  "mdformat plugin to ensure frontmatter is respected",
);

/**
 * Mdformat plugin for GitHub Flavored Markdown compatibility
 */
export const mdformat_gfm = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat-gfm`,
  "Mdformat plugin for GitHub Flavored Markdown compatibility",
);

/**
 * mdformat plugin for MkDocs
 */
export const mdformat_mkdocs = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat-mkdocs`,
  "mdformat plugin for MkDocs",
);

/**
 * Mdformat plugin format Nix code blocks with alejandra
 */
export const mdformat_nix_alejandra = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat-nix-alejandra`,
  "Mdformat plugin format Nix code blocks with alejandra",
);

/**
 * mdformat plugin to render thematic breaks using three dashes
 */
export const mdformat_simple_breaks = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat-simple-breaks`,
  "mdformat plugin to render thematic breaks using three dashes",
);

/**
 * An mdformat plugin for rendering tables
 */
export const mdformat_tables = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat-tables`,
  "An mdformat plugin for rendering tables",
);

/**
 * Mdformat plugin to generate a table of contents
 */
export const mdformat_toc = mkPackage(
  nixRaw`pkgs.python2Packages.mdformat-toc`,
  "Mdformat plugin to generate a table of contents",
);

/**
 * Collection of core plugins for markdown-it-py
 */
export const mdit_py_plugins = mkPackage(
  nixRaw`pkgs.python2Packages.mdit-py-plugins`,
  "Collection of core plugins for markdown-it-py",
);

/**
 * Library for building complex data processing software by combining widely used machine learning algorithms
 */
export const mdp = mkPackage(
  nixRaw`pkgs.python2Packages.mdp`,
  "Library for building complex data processing software by combining widely used machine learning algorithms",
);

/**
 * URL utilities for markdown-it
 */
export const mdurl = mkPackage(
  nixRaw`pkgs.python2Packages.mdurl`,
  "URL utilities for markdown-it",
);

/**
 * Set of basic tools that can help to create Markdown files
 */
export const mdutils = mkPackage(
  nixRaw`pkgs.python2Packages.mdutils`,
  "Set of basic tools that can help to create Markdown files",
);

/**
 * Extension for Python-Markdown that makes lists truly sane.
 */
export const mdx_truly_sane_lists = mkPackage(
  nixRaw`pkgs.python2Packages.mdx-truly-sane-lists`,
  "Extension for Python-Markdown that makes lists truly sane.",
);

/**
 * Use and manipulate unit-aware measurement objects in Python
 */
export const measurement = mkPackage(
  nixRaw`pkgs.python2Packages.measurement`,
  "Use and manipulate unit-aware measurement objects in Python",
);

/**
 * Library for the Apption Labs Meater cooking probe
 */
export const meater_python = mkPackage(
  nixRaw`pkgs.python2Packages.meater-python`,
  "Library for the Apption Labs Meater cooking probe",
);

/**
 * A python wrapper for mecab: Morphological Analysis engine
 */
export const mecab_python3 = mkPackage(
  nixRaw`pkgs.python2Packages.mecab-python3`,
  "A python wrapper for mecab: Morphological Analysis engine",
);

/**
 * Python library for automating interaction with websites
 */
export const mechanicalsoup = mkPackage(
  nixRaw`pkgs.python2Packages.mechanicalsoup`,
  "Python library for automating interaction with websites",
);

/**
 * Stateful programmatic web browsing in Python
 */
export const mechanize = mkPackage(
  nixRaw`pkgs.python2Packages.mechanize`,
  "Stateful programmatic web browsing in Python",
);

/**
 * Python interface to the metadata tags for many audio file formats
 */
export const mediafile = mkPackage(
  nixRaw`pkgs.python2Packages.mediafile`,
  "Python interface to the metadata tags for many audio file formats",
);

/**
 * Read/write/show images and videos in an IPython notebook
 */
export const mediapy = mkPackage(
  nixRaw`pkgs.python2Packages.mediapy`,
  "Read/write/show images and videos in an IPython notebook",
);

/**
 * Python package for preparing small molecule for docking
 */
export const meeko = mkPackage(
  nixRaw`pkgs.python2Packages.meeko`,
  "Python package for preparing small molecule for docking",
);

/**
 * Free finite-difference time-domain (FDTD) software for electromagnetic simulations
 */
export const meep = mkPackage(
  nixRaw`pkgs.python2Packages.meep`,
  "Free finite-difference time-domain (FDTD) software for electromagnetic simulations",
);

/**
 * Client for the Meilisearch API
 */
export const meilisearch = mkPackage(
  nixRaw`pkgs.python2Packages.meilisearch`,
  "Client for the Meilisearch API",
);

/**
 * High performance asynchronous Python WSGI Web Server
 */
export const meinheld = mkPackage(
  nixRaw`pkgs.python2Packages.meinheld`,
  "High performance asynchronous Python WSGI Web Server",
);

/**
 * An HTML/XML templating engine used by supervisor
 */
export const meld3 = mkPackage(
  nixRaw`pkgs.python2Packages.meld3`,
  "An HTML/XML templating engine used by supervisor",
);

/**
 * A linter that tracks reference to deprecated functions.
 */
export const memestra = mkPackage(
  nixRaw`pkgs.python2Packages.memestra`,
  "A linter that tracks reference to deprecated functions.",
);

/**
 * An extension class to allocate memory easily with cython
 */
export const memory_allocator = mkPackage(
  nixRaw`pkgs.python2Packages.memory-allocator`,
  "An extension class to allocate memory easily with cython",
);

/**
 * A module for monitoring memory usage of a process
 */
export const memory_profiler = mkPackage(
  nixRaw`pkgs.python2Packages.memory-profiler`,
  "A module for monitoring memory usage of a process",
);

/**
 * Provides all current Meraki dashboard API calls to interface with the Cisco Meraki cloud-managed platform
 */
export const meraki = mkPackage(
  nixRaw`pkgs.python2Packages.meraki`,
  "Provides all current Meraki dashboard API calls to interface with the Cisco Meraki cloud-managed platform",
);

/**
 * This library provides developers with a simple set of bindings to help you integrate Mercado Pago API to a website and start receiving payments.
 */
export const mercadopago = mkPackage(
  nixRaw`pkgs.python2Packages.mercadopago`,
  "This library provides developers with a simple set of bindings to help you integrate Mercado Pago API to a website and start receiving payments.",
);

/**
 * Spherical mercator tile and coordinate utilities
 */
export const mercantile = mkPackage(
  nixRaw`pkgs.python2Packages.mercantile`,
  "Spherical mercator tile and coordinate utilities",
);

/**
 * A fast, lightweight SCM system for very large distributed projects
 */
export const mercurial = mkPackage(
  nixRaw`pkgs.python2Packages.mercurial`,
  "A fast, lightweight SCM system for very large distributed projects",
);

/**
 * Python implementation of 3-way merge
 */
export const merge3 = mkPackage(
  nixRaw`pkgs.python2Packages.merge3`,
  "Python implementation of 3-way merge",
);

/**
 * A tool/library for deep merging YAML files
 */
export const mergedb = mkPackage(
  nixRaw`pkgs.python2Packages.mergedb`,
  "A tool/library for deep merging YAML files",
);

/**
 * A deep merge function for python
 */
export const mergedeep = mkPackage(
  nixRaw`pkgs.python2Packages.mergedeep`,
  "A deep merge function for python",
);

/**
 * A Python dict with a merge() method
 */
export const mergedict = mkPackage(
  nixRaw`pkgs.python2Packages.mergedict`,
  "A Python dict with a merge() method",
);

/**
 * Python tools for creating Merkle trees, generating Merkle proofs, and verification of Merkle proofs
 */
export const merkletools = mkPackage(
  nixRaw`pkgs.python2Packages.merkletools`,
  "Python tools for creating Merkle trees, generating Merkle proofs, and verification of Merkle proofs",
);

/**
 * Python library to interact with Meross devices
 */
export const meross_iot = mkPackage(
  nixRaw`pkgs.python2Packages.meross-iot`,
  "Python library to interact with Meross devices",
);

/**
 * An agent-based modeling (or ABM) framework in Python
 */
export const mesa = mkPackage(
  nixRaw`pkgs.python2Packages.mesa`,
  "An agent-based modeling (or ABM) framework in Python",
);

/**
 * WebGL-based 3D visualizer for Python
 */
export const meshcat = mkPackage(
  nixRaw`pkgs.python2Packages.meshcat`,
  "WebGL-based 3D visualizer for Python",
);

/**
 * I/O for mesh files.
 */
export const meshio = mkPackage(
  nixRaw`pkgs.python2Packages.meshio`,
  "I/O for mesh files.",
);

/**
 * Create and run MeshLab XML scripts with Python
 */
export const meshlabxml = mkPackage(
  nixRaw`pkgs.python2Packages.meshlabxml`,
  "Create and run MeshLab XML scripts with Python",
);

/**
 * Python API for talking to Meshtastic devices
 */
export const meshtastic = mkPackage(
  nixRaw`pkgs.python2Packages.meshtastic`,
  "Python API for talking to Meshtastic devices",
);

/**
 * An open source, fast and friendly build system made in Python
 */
export const meson = mkPackage(
  nixRaw`pkgs.python2Packages.meson`,
  "An open source, fast and friendly build system made in Python",
);

/**
 * Meson Python build backend (PEP 517)
 */
export const meson_python = mkPackage(
  nixRaw`pkgs.python2Packages.meson-python`,
  "Meson Python build backend (PEP 517)",
);

/**
 * Create pep517 compliant packages from the meson build system
 */
export const mesonpep517 = mkPackage(
  nixRaw`pkgs.python2Packages.mesonpep517`,
  "Create pep517 compliant packages from the meson build system",
);

/**
 * Client for MessageBird's REST API
 */
export const messagebird = mkPackage(
  nixRaw`pkgs.python2Packages.messagebird`,
  "Client for MessageBird's REST API",
);

/**
 * Jupyter/IPython Kernel Tools
 */
export const metakernel = mkPackage(
  nixRaw`pkgs.python2Packages.metakernel`,
  "Jupyter/IPython Kernel Tools",
);

/**
 * Python parser for coded METAR weather reports
 */
export const metar = mkPackage(
  nixRaw`pkgs.python2Packages.metar`,
  "Python parser for coded METAR weather reports",
);

/**
 * Python bindings for the MetaWear C++ SDK by MbientLab
 */
export const metawear = mkPackage(
  nixRaw`pkgs.python2Packages.metawear`,
  "Python bindings for the MetaWear C++ SDK by MbientLab",
);

/**
 * Python wrapper for MeteoAlarm.org
 */
export const meteoalertapi = mkPackage(
  nixRaw`pkgs.python2Packages.meteoalertapi`,
  "Python wrapper for MeteoAlarm.org",
);

/**
 * Module for calculation of meteorological variables
 */
export const meteocalc = mkPackage(
  nixRaw`pkgs.python2Packages.meteocalc`,
  "Module for calculation of meteorological variables",
);

/**
 * Module to access information from the Meteo-France API
 */
export const meteofrance_api = mkPackage(
  nixRaw`pkgs.python2Packages.meteofrance-api`,
  "Module to access information from the Meteo-France API",
);

/**
 * Content management platform built using the Django framework
 */
export const mezzanine = mkPackage(
  nixRaw`pkgs.python2Packages.mezzanine`,
  "Content management platform built using the Django framework",
);

/**
 * Microformats2 parser written in Python
 */
export const mf2py = mkPackage(
  nixRaw`pkgs.python2Packages.mf2py`,
  "Microformats2 parser written in Python",
);

/**
 * Peptide-MHC I binding affinity prediction
 */
export const mhcflurry = mkPackage(
  nixRaw`pkgs.python2Packages.mhcflurry`,
  "Peptide-MHC I binding affinity prediction",
);

/**
 * Parsing MHC nomenclature in the wild
 */
export const mhcgnomes = mkPackage(
  nixRaw`pkgs.python2Packages.mhcgnomes`,
  "Parsing MHC nomenclature in the wild",
);

/**
 * Module for extracting rich content from URLs
 */
export const micawber = mkPackage(
  nixRaw`pkgs.python2Packages.micawber`,
  "Module for extracting rich content from URLs",
);

/**
 * Xiaomi cloud connect library
 */
export const micloud = mkPackage(
  nixRaw`pkgs.python2Packages.micloud`,
  "Xiaomi cloud connect library",
);

/**
 * Library for extracting html microdata
 */
export const microdata = mkPackage(
  nixRaw`pkgs.python2Packages.microdata`,
  "Library for extracting html microdata",
);

/**
 * A pure python library for creating multi-track MIDI files
 */
export const midiutil = mkPackage(
  nixRaw`pkgs.python2Packages.midiutil`,
  "A pure python library for creating multi-track MIDI files",
);

/**
 * MIDI Objects for Python
 */
export const mido = mkPackage(
  nixRaw`pkgs.python2Packages.mido`,
  "MIDI Objects for Python",
);

/**
 *  A Python toolbox for building complex digital hardware
 */
export const migen = mkPackage(
  nixRaw`pkgs.python2Packages.migen`,
  " A Python toolbox for building complex digital hardware",
);

/**
 * Manage multiple versions of your MkDocs-powered documentation
 */
export const mike = mkPackage(
  nixRaw`pkgs.python2Packages.mike`,
  "Manage multiple versions of your MkDocs-powered documentation",
);

/**
 * An Opinionated Batteries-Included Python 3 CLI Framework
 */
export const milc = mkPackage(
  nixRaw`pkgs.python2Packages.milc`,
  "An Opinionated Batteries-Included Python 3 CLI Framework",
);

/**
 * A python library that extends setuptools for binary extensions
 */
export const milksnake = mkPackage(
  nixRaw`pkgs.python2Packages.milksnake`,
  "A python library that extends setuptools for binary extensions",
);

/**
 * Python module to communicate locally with Mill heaters
 */
export const mill_local = mkPackage(
  nixRaw`pkgs.python2Packages.mill-local`,
  "Python module to communicate locally with Mill heaters",
);

/**
 * Python library for Mill heater devices
 */
export const millheater = mkPackage(
  nixRaw`pkgs.python2Packages.millheater`,
  "Python library for Mill heater devices",
);

/**
 * Model evaluation for Machine Learning pipelines
 */
export const mindsdb_evaluator = mkPackage(
  nixRaw`pkgs.python2Packages.mindsdb-evaluator`,
  "Model evaluation for Machine Learning pipelines",
);

/**
 * Minimal, standalone OpenEXR reader for single-part, uncompressed scan line files.
 */
export const minexr = mkPackage(
  nixRaw`pkgs.python2Packages.minexr`,
  "Minimal, standalone OpenEXR reader for single-part, uncompressed scan line files.",
);

/**
 * Python bindings for the miniaudio library and its decoders
 */
export const miniaudio = mkPackage(
  nixRaw`pkgs.python2Packages.miniaudio`,
  "Python bindings for the miniaudio library and its decoders",
);

/**
 * A tiny library for coding with large language models
 */
export const minichain = mkPackage(
  nixRaw`pkgs.python2Packages.minichain`,
  "A tiny library for coding with large language models",
);

/**
 * SQLite3-based store for Python objects
 */
export const minidb = mkPackage(
  nixRaw`pkgs.python2Packages.minidb`,
  "SQLite3-based store for Python objects",
);

/**
 * Python library to parse and read Microsoft minidump file format
 */
export const minidump = mkPackage(
  nixRaw`pkgs.python2Packages.minidump`,
  "Python library to parse and read Microsoft minidump file format",
);

/**
 * Minimal Fuzzy Library
 */
export const miniful = mkPackage(
  nixRaw`pkgs.python2Packages.miniful`,
  "Minimal Fuzzy Library",
);

/**
 * Relational programming in Python
 */
export const minikanren = mkPackage(
  nixRaw`pkgs.python2Packages.minikanren`,
  "Relational programming in Python",
);

/**
 * Kerberos manipulation library in Python
 */
export const minikerberos = mkPackage(
  nixRaw`pkgs.python2Packages.minikerberos`,
  "Kerberos manipulation library in Python",
);

/**
 * Minimal snowplow event tracker
 */
export const minimal_snowplow_tracker = mkPackage(
  nixRaw`pkgs.python2Packages.minimal-snowplow-tracker`,
  "Minimal snowplow event tracker",
);

/**
 * A minimalistic mocking library
 */
export const minimock = mkPackage(
  nixRaw`pkgs.python2Packages.minimock`,
  "A minimalistic mocking library",
);

/**
 * Emulator for rapid prototyping of Software Defined Networks
 */
export const mininet_python = mkPackage(
  nixRaw`pkgs.python2Packages.mininet-python`,
  "Emulator for rapid prototyping of Software Defined Networks",
);

/**
 * Simple APIs to access any Amazon S3 compatible object storage server
 */
export const minio = mkPackage(
  nixRaw`pkgs.python2Packages.minio`,
  "Simple APIs to access any Amazon S3 compatible object storage server",
);

/**
 * miniUPnP client
 */
export const miniupnpc = mkPackage(
  nixRaw`pkgs.python2Packages.miniupnpc`,
  "miniUPnP client",
);

/**
 * A collection of Python tools for the modeling and solution of Mixed-Integer Linear programs (MIPs)
 */
export const mip = mkPackage(
  nixRaw`pkgs.python2Packages.mip`,
  "A collection of Python tools for the modeling and solution of Mixed-Integer Linear programs (MIPs)",
);

/**
 * Common metrics for common audio/music processing tasks
 */
export const mir_eval = mkPackage(
  nixRaw`pkgs.python2Packages.mir_eval`,
  "Common metrics for common audio/music processing tasks",
);

/**
 * Process orchestration tool designed for functional and integration tests
 */
export const mirakuru = mkPackage(
  nixRaw`pkgs.python2Packages.mirakuru`,
  "Process orchestration tool designed for functional and integration tests",
);

/**
 * A CFFI binding for Hoedown, a markdown parsing library
 */
export const misaka = mkPackage(
  nixRaw`pkgs.python2Packages.misaka`,
  "A CFFI binding for Hoedown, a markdown parsing library",
);

/**
 * The original high performance and small footprint system-on-chip based on Migen
 */
export const misoc = mkPackage(
  nixRaw`pkgs.python2Packages.misoc`,
  "The original high performance and small footprint system-on-chip based on Migen",
);

/**
 * Fast and extensible Markdown parser
 */
export const mistletoe = mkPackage(
  nixRaw`pkgs.python2Packages.mistletoe`,
  "Fast and extensible Markdown parser",
);

/**
 * A sane Markdown parser with useful plugins and renderers
 */
export const mistune = mkPackage(
  nixRaw`pkgs.python2Packages.mistune`,
  "A sane Markdown parser with useful plugins and renderers",
);

/**
 * Man-in-the-middle proxy
 */
export const mitmproxy = mkPackage(
  nixRaw`pkgs.python2Packages.mitmproxy`,
  "Man-in-the-middle proxy",
);

/**
 * WireGuard frontend for mitmproxy
 */
export const mitmproxy_wireguard = mkPackage(
  nixRaw`pkgs.python2Packages.mitmproxy-wireguard`,
  "WireGuard frontend for mitmproxy",
);

/**
 * Python Library for writing distributed self-replicating programs
 */
export const mitogen = mkPackage(
  nixRaw`pkgs.python2Packages.mitogen`,
  "Python Library for writing distributed self-replicating programs",
);

/**
 * Mixin classes which may be added to your own classes to add certain functionality to them
 */
export const mixins = mkPackage(
  nixRaw`pkgs.python2Packages.mixins`,
  "Mixin classes which may be added to your own classes to add certain functionality to them",
);

/**
 * Official Mixpanel Python library
 */
export const mixpanel = mkPackage(
  nixRaw`pkgs.python2Packages.mixpanel`,
  "Official Mixpanel Python library",
);

/**
 * Scales for Python
 */
export const mizani = mkPackage(
  nixRaw`pkgs.python2Packages.mizani`,
  "Scales for Python",
);

/**
 * Project documentation with Markdown / static website generator
 */
export const mkdocs = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs`,
  "Project documentation with Markdown / static website generator",
);

/**
 * Automatically link across pages in MkDocs
 */
export const mkdocs_autorefs = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-autorefs`,
  "Automatically link across pages in MkDocs",
);

/**
 * Exports your Draw.io diagrams at build time for easier embedding into your documentation.
 */
export const mkdocs_drawio_exporter = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-drawio-exporter`,
  "Exports your Draw.io diagrams at build time for easier embedding into your documentation.",
);

/**
 * A mkdocs plugin to exclude files from input using globs or regexes.
 */
export const mkdocs_exclude = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-exclude`,
  "A mkdocs plugin to exclude files from input using globs or regexes.",
);

/**
 * Lightweight MkDocs plugin to display git authors of a markdown page
 */
export const mkdocs_git_authors_plugin = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-git-authors-plugin`,
  "Lightweight MkDocs plugin to display git authors of a markdown page",
);

/**
 * MkDocs plugin that enables displaying the date of the last git modification of a page
 */
export const mkdocs_git_revision_date_localized_plugin = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-git-revision-date-localized-plugin`,
  "MkDocs plugin that enables displaying the date of the last git modification of a page",
);

/**
 * MkDocs plugin to transform strings such as #1234, %56, or !789 into links to a Gitlab repository.
 */
export const mkdocs_gitlab = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-gitlab`,
  "MkDocs plugin to transform strings such as #1234, %56, or !789 into links to a Gitlab repository.",
);

/**
 * Use Jupyter Notebook in mkdocs
 */
export const mkdocs_jupyter = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-jupyter`,
  "Use Jupyter Notebook in mkdocs",
);

/**
 * Validate links in Markdown files for static site generators like MkDocs, Hugo or Jekyll
 */
export const mkdocs_linkcheck = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-linkcheck`,
  "Validate links in Markdown files for static site generators like MkDocs, Hugo or Jekyll",
);

/**
 * Create richer and more beautiful pages in MkDocs, by using variables and calls to macros in the markdown code.
 */
export const mkdocs_macros = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-macros`,
  "Create richer and more beautiful pages in MkDocs, by using variables and calls to macros in the markdown code.",
);

/**
 * Material for mkdocs
 */
export const mkdocs_material = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-material`,
  "Material for mkdocs",
);

/**
 * Markdown extension resources for MkDocs Material
 */
export const mkdocs_material_extensions = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-material-extensions`,
  "Markdown extension resources for MkDocs Material",
);

/**
 * A MkDocs plugin for including mermaid graphs in markdown sources
 */
export const mkdocs_mermaid2_plugin = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-mermaid2-plugin`,
  "A MkDocs plugin for including mermaid graphs in markdown sources",
);

/**
 * A mkdocs plugin to minify the HTML of a page before it is written to disk.
 */
export const mkdocs_minify = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-minify`,
  "A mkdocs plugin to minify the HTML of a page before it is written to disk.",
);

/**
 * Open source plugin for Mkdocs page redirects
 */
export const mkdocs_redirects = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-redirects`,
  "Open source plugin for Mkdocs page redirects",
);

/**
 * Define your own hooks for mkdocs, without having to create a new package.
 */
export const mkdocs_simple_hooks = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-simple-hooks`,
  "Define your own hooks for mkdocs, without having to create a new package.",
);

/**
 * A MkDocs plugin supports for add Swagger UI in page
 */
export const mkdocs_swagger_ui_tag = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocs-swagger-ui-tag`,
  "A MkDocs plugin supports for add Swagger UI in page",
);

/**
 * Automatic documentation from sources for MkDocs
 */
export const mkdocstrings = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocstrings`,
  "Automatic documentation from sources for MkDocs",
);

/**
 * Python handler for mkdocstrings
 */
export const mkdocstrings_python = mkPackage(
  nixRaw`pkgs.python2Packages.mkdocstrings-python`,
  "Python handler for mkdocstrings",
);

/**
 * Python hooks for Intel(R) Math Kernel Library runtime control settings
 */
export const mkl_service = mkPackage(
  nixRaw`pkgs.python2Packages.mkl-service`,
  "Python hooks for Intel(R) Math Kernel Library runtime control settings",
);

/**
 * ML Collections is a library of Python collections designed for ML usecases.
 */
export const ml_collections = mkPackage(
  nixRaw`pkgs.python2Packages.ml-collections`,
  "ML Collections is a library of Python collections designed for ML usecases.",
);

/**
 * A stand-alone implementation of several NumPy dtype extensions used in machine learning libraries
 */
export const ml_dtypes = mkPackage(
  nixRaw`pkgs.python2Packages.ml-dtypes`,
  "A stand-alone implementation of several NumPy dtype extensions used in machine learning libraries",
);

/**
 * Open source platform for the machine learning lifecycle
 */
export const mlflow = mkPackage(
  nixRaw`pkgs.python2Packages.mlflow`,
  "Open source platform for the machine learning lifecycle",
);

/**
 * Machine Learning, Randomized Optimization and SEarch
 */
export const mlrose = mkPackage(
  nixRaw`pkgs.python2Packages.mlrose`,
  "Machine Learning, Randomized Optimization and SEarch",
);

/**
 * Open source multimedia framework, designed for television broadcasting
 */
export const mlt = mkPackage(
  nixRaw`pkgs.python2Packages.mlt`,
  "Open source multimedia framework, designed for television broadcasting",
);

/**
 * Yet another version of PDBx/mmCIF Python implementation
 */
export const mmcif_pdbx = mkPackage(
  nixRaw`pkgs.python2Packages.mmcif-pdbx`,
  "Yet another version of PDBx/mmCIF Python implementation",
);

/**
 * A Foundational Library for Computer Vision Research
 */
export const mmcv = mkPackage(
  nixRaw`pkgs.python2Packages.mmcv`,
  "A Foundational Library for Computer Vision Research",
);

/**
 * Library for training deep learning models based on PyTorch
 */
export const mmengine = mkPackage(
  nixRaw`pkgs.python2Packages.mmengine`,
  "Library for training deep learning models based on PyTorch",
);

/**
 * Python wrapper for MurmurHash3, a set of fast and robust hash functions
 */
export const mmh3 = mkPackage(
  nixRaw`pkgs.python2Packages.mmh3`,
  "Python wrapper for MurmurHash3, a set of fast and robust hash functions",
);

/**
 * Media Meta Data retrieval framework
 */
export const mmpython = mkPackage(
  nixRaw`pkgs.python2Packages.mmpython`,
  "Media Meta Data retrieval framework",
);

/**
 * The python implementation of the MMTF API, decoder and encoder
 */
export const mmtf_python = mkPackage(
  nixRaw`pkgs.python2Packages.mmtf-python`,
  "The python implementation of the MMTF API, decoder and encoder",
);

/**
 * Magnetoencephelography and electroencephalography in Python
 */
export const mne_python = mkPackage(
  nixRaw`pkgs.python2Packages.mne-python`,
  "Magnetoencephelography and electroencephalography in Python",
);

/**
 * Reference implementation of BIP-0039
 */
export const mnemonic = mkPackage(
  nixRaw`pkgs.python2Packages.mnemonic`,
  "Reference implementation of BIP-0039",
);

/**
 * Python utilities to download and parse the MNIST dataset
 */
export const mnist = mkPackage(
  nixRaw`pkgs.python2Packages.mnist`,
  "Python utilities to download and parse the MNIST dataset",
);

/**
 * Library for Moat BLE devices
 */
export const moat_ble = mkPackage(
  nixRaw`pkgs.python2Packages.moat-ble`,
  "Library for Moat BLE devices",
);

/**
 * Library for unpacking unencrypted mobi files
 */
export const mobi = mkPackage(
  nixRaw`pkgs.python2Packages.mobi`,
  "Library for unpacking unencrypted mobi files",
);

/**
 * Automation framework for special end-to-end test cases
 */
export const mobly = mkPackage(
  nixRaw`pkgs.python2Packages.mobly`,
  "Automation framework for special end-to-end test cases",
);

/**
 * Mock objects for Python
 */
export const mock = mkPackage(
  nixRaw`pkgs.python2Packages.mock`,
  "Mock objects for Python",
);

/**
 * A better mock for file I/O
 */
export const mock_open = mkPackage(
  nixRaw`pkgs.python2Packages.mock-open`,
  "A better mock for file I/O",
);

/**
 * Mock an entire service API based on requests-mock
 */
export const mock_services = mkPackage(
  nixRaw`pkgs.python2Packages.mock-services`,
  "Mock an entire service API based on requests-mock",
);

/**
 * Python mock SSH server for testing purposes
 */
export const mock_ssh_server = mkPackage(
  nixRaw`pkgs.python2Packages.mock-ssh-server`,
  "Python mock SSH server for testing purposes",
);

/**
 * A socket mock framework for all kinds of sockets including web-clients
 */
export const mocket = mkPackage(
  nixRaw`pkgs.python2Packages.mocket`,
  "A socket mock framework for all kinds of sockets including web-clients",
);

/**
 * A simple mock filesystem for use in unit tests
 */
export const mockfs = mkPackage(
  nixRaw`pkgs.python2Packages.mockfs`,
  "A simple mock filesystem for use in unit tests",
);

/**
 * Spying framework
 */
export const mockito = mkPackage(
  nixRaw`pkgs.python2Packages.mockito`,
  "Spying framework",
);

/**
 * Simulate a MongoDB server
 */
export const mockupdb = mkPackage(
  nixRaw`pkgs.python2Packages.mockupdb`,
  "Simulate a MongoDB server",
);

/**
 * A Python scrapper to access ModDB mods, games and more as objects
 */
export const moddb = mkPackage(
  nixRaw`pkgs.python2Packages.moddb`,
  "A Python scrapper to access ModDB mods, games and more as objects",
);

/**
 * Object factory for Django
 */
export const model_bakery = mkPackage(
  nixRaw`pkgs.python2Packages.model-bakery`,
  "Object factory for Django",
);

/**
 * Python package for handling ModelCIF mmCIF and BinaryCIF files
 */
export const modelcif = mkPackage(
  nixRaw`pkgs.python2Packages.modelcif`,
  "Python package for handling ModelCIF mmCIF and BinaryCIF files",
);

/**
 * Universal data modeling for Python
 */
export const modeled = mkPackage(
  nixRaw`pkgs.python2Packages.modeled`,
  "Universal data modeling for Python",
);

/**
 * High performance rendering for Python
 */
export const moderngl = mkPackage(
  nixRaw`pkgs.python2Packages.moderngl`,
  "High performance rendering for Python",
);

/**
 * Cross platform helper library for ModernGL making window creation and resource loading simple
 */
export const moderngl_window = mkPackage(
  nixRaw`pkgs.python2Packages.moderngl-window`,
  "Cross platform helper library for ModernGL making window creation and resource loading simple",
);

/**
 * A library for building interactive maps
 */
export const modestmaps = mkPackage(
  nixRaw`pkgs.python2Packages.modestmaps`,
  "A library for building interactive maps",
);

/**
 * Python library for Hawk HTTP authorization.
 */
export const mohawk = mkPackage(
  nixRaw`pkgs.python2Packages.mohawk`,
  "Python library for Hawk HTTP authorization.",
);

/**
 * Molecule aids in the development and testing of Ansible roles
 */
export const molecule = mkPackage(
  nixRaw`pkgs.python2Packages.molecule`,
  "Molecule aids in the development and testing of Ansible roles",
);

/**
 * Collection on molecule plugins
 */
export const molecule_plugins = mkPackage(
  nixRaw`pkgs.python2Packages.molecule-plugins`,
  "Collection on molecule plugins",
);

/**
 * Pytorch framework (based on Ignite) for deep learning in medical imaging
 */
export const monai = mkPackage(
  nixRaw`pkgs.python2Packages.monai`,
  "Pytorch framework (based on Ignite) for deep learning in medical imaging",
);

/**
 * Framework and tools to design, develop and verify AI applications in healthcare imaging
 */
export const monai_deploy = mkPackage(
  nixRaw`pkgs.python2Packages.monai-deploy`,
  "Framework and tools to design, develop and verify AI applications in healthcare imaging",
);

/**
 * Comprehensive Python module for handling Monero
 */
export const monero = mkPackage(
  nixRaw`pkgs.python2Packages.monero`,
  "Comprehensive Python module for handling Monero",
);

/**
 * MongoDB-backed Python dict-like interface
 */
export const mongodict = mkPackage(
  nixRaw`pkgs.python2Packages.mongodict`,
  "MongoDB-backed Python dict-like interface",
);

/**
 * MongoEngine is a Python Object-Document Mapper for working with MongoDB
 */
export const mongoengine = mkPackage(
  nixRaw`pkgs.python2Packages.mongoengine`,
  "MongoEngine is a Python Object-Document Mapper for working with MongoDB",
);

/**
 * Fake pymongo stub for testing simple MongoDB-dependent code
 */
export const mongomock = mkPackage(
  nixRaw`pkgs.python2Packages.mongomock`,
  "Fake pymongo stub for testing simple MongoDB-dependent code",
);

/**
 * A python implementation of mongodb queries
 */
export const mongoquery = mkPackage(
  nixRaw`pkgs.python2Packages.mongoquery`,
  "A python implementation of mongodb queries",
);

/**
 * A small library to assist users of the python shell who work in contexts where printed numbers are more usefully viewed in hexadecimal
 */
export const monkeyhex = mkPackage(
  nixRaw`pkgs.python2Packages.monkeyhex`,
  "A small library to assist users of the python shell who work in contexts where printed numbers are more usefully viewed in hexadecimal",
);

export const monosat = mkPackage(
  nixRaw`pkgs.python2Packages.monosat`,
  "",
);

/**
 * An implementation of time.monotonic() for Python 2 & < 3.3
 */
export const monotonic = mkPackage(
  nixRaw`pkgs.python2Packages.monotonic`,
  "An implementation of time.monotonic() for Python 2 & < 3.3",
);

/**
 * Serves as a complement to the Python standard library by providing a suite of tools to solve many common problems
 */
export const monty = mkPackage(
  nixRaw`pkgs.python2Packages.monty`,
  "Serves as a complement to the Python standard library by providing a suite of tools to solve many common problems",
);

/**
 * Python API for the Moonraker API
 */
export const moonraker_api = mkPackage(
  nixRaw`pkgs.python2Packages.moonraker-api`,
  "Python API for the Moonraker API",
);

/**
 * Library for Mopeka IoT BLE devices
 */
export const mopeka_iot_ble = mkPackage(
  nixRaw`pkgs.python2Packages.mopeka-iot-ble`,
  "Library for Mopeka IoT BLE devices",
);

/**
 * Expansion of the itertools module
 */
export const more_itertools = mkPackage(
  nixRaw`pkgs.python2Packages.more-itertools`,
  "Expansion of the itertools module",
);

/**
 * A collection of property variants
 */
export const more_properties = mkPackage(
  nixRaw`pkgs.python2Packages.more-properties`,
  "A collection of property variants",
);

/**
 * Wrapper to make difflib.unified_diff more fun to use
 */
export const moreorless = mkPackage(
  nixRaw`pkgs.python2Packages.moreorless`,
  "Wrapper to make difflib.unified_diff more fun to use",
);

/**
 * Many more basic tools for python 2/3 extending itertools, functools, operator and collections

 */
export const moretools = mkPackage(
  nixRaw`pkgs.python2Packages.moretools`,
  "Many more basic tools for python 2/3 extending itertools, functools, operator and collections\n",
);

/**
 * A tool for unsupervised and semi-supervised morphological segmentation
 */
export const morfessor = mkPackage(
  nixRaw`pkgs.python2Packages.morfessor`,
  "A tool for unsupervised and semi-supervised morphological segmentation",
);

/**
 * Smart conversions between unicode and bytes types
 */
export const morphys = mkPackage(
  nixRaw`pkgs.python2Packages.morphys`,
  "Smart conversions between unicode and bytes types",
);

/**
 * Mortgage calculator
 */
export const mortgage = mkPackage(
  nixRaw`pkgs.python2Packages.mortgage`,
  "Mortgage calculator",
);

/**
 * Python library for interfacing with Motion Blinds
 */
export const motionblinds = mkPackage(
  nixRaw`pkgs.python2Packages.motionblinds`,
  "Python library for interfacing with Motion Blinds",
);

/**
 * Python library for motionEye
 */
export const motioneye_client = mkPackage(
  nixRaw`pkgs.python2Packages.motioneye-client`,
  "Python library for motionEye",
);

/**
 * Allows your tests to easily mock out AWS Services
 */
export const moto = mkPackage(
  nixRaw`pkgs.python2Packages.moto`,
  "Allows your tests to easily mock out AWS Services",
);

/**
 * Non-blocking MongoDB driver for Tornado or asyncio
 */
export const motor = mkPackage(
  nixRaw`pkgs.python2Packages.motor`,
  "Non-blocking MongoDB driver for Tornado or asyncio",
);

/**
 * An application to display XY position and RGB color information for the pixel currently under the mouse. Works on Python 2 and 3.
 */
export const mouseinfo = mkPackage(
  nixRaw`pkgs.python2Packages.mouseinfo`,
  "An application to display XY position and RGB color information for the pixel currently under the mouse. Works on Python 2 and 3.",
);

/**
 * Video editing with Python
 */
export const moviepy = mkPackage(
  nixRaw`pkgs.python2Packages.moviepy`,
  "Video editing with Python",
);

/**
 * Mock object framework for Python
 */
export const mox3 = mkPackage(
  nixRaw`pkgs.python2Packages.mox3`,
  "Mock object framework for Python",
);

/**
 * A Python client module for the Music Player Daemon
 */
export const mpd2 = mkPackage(
  nixRaw`pkgs.python2Packages.mpd2`,
  "A Python client module for the Music Player Daemon",
);

/**
 * Python bindings for the Message Passing Interface standard
 */
export const mpi4py = mkPackage(
  nixRaw`pkgs.python2Packages.mpi4py`,
  "Python bindings for the Message Passing Interface standard",
);

/**
 * Interactive data cursors for matplotlib
 */
export const mpldatacursor = mkPackage(
  nixRaw`pkgs.python2Packages.mpldatacursor`,
  "Interactive data cursors for matplotlib",
);

/**
 * Matplotlib utilities for the visualization, and visual analysis, of financial data
 */
export const mplfinance = mkPackage(
  nixRaw`pkgs.python2Packages.mplfinance`,
  "Matplotlib utilities for the visualization, and visual analysis, of financial data",
);

/**
 * Extended histogram plots on top of matplotlib and HEP compatible styling similar to current collaboration requirements (ROOT)
 */
export const mplhep = mkPackage(
  nixRaw`pkgs.python2Packages.mplhep`,
  "Extended histogram plots on top of matplotlib and HEP compatible styling similar to current collaboration requirements (ROOT)",
);

/**
 * Sub-package to hold data (fonts) for mplhep
 */
export const mplhep_data = mkPackage(
  nixRaw`pkgs.python2Packages.mplhep-data`,
  "Sub-package to hold data (fonts) for mplhep",
);

/**
 * Convert Matplotlib plots into Leaflet web maps
 */
export const mplleaflet = mkPackage(
  nixRaw`pkgs.python2Packages.mplleaflet`,
  "Convert Matplotlib plots into Leaflet web maps",
);

/**
 * A pure-Python library for multiprecision floating arithmetic
 */
export const mpmath = mkPackage(
  nixRaw`pkgs.python2Packages.mpmath`,
  "A pure-Python library for multiprecision floating arithmetic",
);

/**
 * A python interface to the mpv media player
 */
export const mpv = mkPackage(
  nixRaw`pkgs.python2Packages.mpv`,
  "A python interface to the mpv media player",
);

/**
 * A Python library for extracting MPQ (MoPaQ) files.
 */
export const mpyq = mkPackage(
  nixRaw`pkgs.python2Packages.mpyq`,
  "A Python library for extracting MPQ (MoPaQ) files.",
);

/**
 * Flexible MQTT to InfluxDB Bridge
 */
export const mqtt2influxdb = mkPackage(
  nixRaw`pkgs.python2Packages.mqtt2influxdb`,
  "Flexible MQTT to InfluxDB Bridge",
);

/**
 * Run MapReduce jobs on Hadoop or Amazon Web Services
 */
export const mrjob = mkPackage(
  nixRaw`pkgs.python2Packages.mrjob`,
  "Run MapReduce jobs on Hadoop or Amazon Web Services",
);

/**
 * MrSQM (Multiple Representations Sequence Miner) is a time series classifier
 */
export const mrsqm = mkPackage(
  nixRaw`pkgs.python2Packages.mrsqm`,
  "MrSQM (Multiple Representations Sequence Miner) is a time series classifier",
);

/**
 * Python module for integrating with Microsoft Active Directory domains
 */
export const ms_active_directory = mkPackage(
  nixRaw`pkgs.python2Packages.ms-active-directory`,
  "Python module for integrating with Microsoft Active Directory domains",
);

/**
 * Correlation vector implementation in python
 */
export const ms_cv = mkPackage(
  nixRaw`pkgs.python2Packages.ms-cv`,
  "Correlation vector implementation in python",
);

/**
 * Library to access the Microsoft Cloud by supporting authentication of users with Microsoft Azure Active Directory accounts (AAD) and Microsoft Accounts (MSA) using industry standard OAuth2 and OpenID Connect
 */
export const msal = mkPackage(
  nixRaw`pkgs.python2Packages.msal`,
  "Library to access the Microsoft Cloud by supporting authentication of users with Microsoft Azure Active Directory accounts (AAD) and Microsoft Accounts (MSA) using industry standard OAuth2 and OpenID Connect",
);

/**
 * The Microsoft Authentication Library Extensions (MSAL-Extensions) for Python
 */
export const msal_extensions = mkPackage(
  nixRaw`pkgs.python2Packages.msal-extensions`,
  "The Microsoft Authentication Library Extensions (MSAL-Extensions) for Python",
);

/**
 * Makes the Microsoft Trusted Root Program's Certificate Trust Lists available in Python
 */
export const mscerts = mkPackage(
  nixRaw`pkgs.python2Packages.mscerts`,
  "Makes the Microsoft Trusted Root Program's Certificate Trust Lists available in Python",
);

/**
 * Python module to read, parse and converting Microsoft Outlook MSG E-Mail files.
 */
export const msg_parser = mkPackage(
  nixRaw`pkgs.python2Packages.msg-parser`,
  "Python module to read, parse and converting Microsoft Outlook MSG E-Mail files.",
);

/**
 * MessagePack serializer implementation
 */
export const msgpack = mkPackage(
  nixRaw`pkgs.python2Packages.msgpack`,
  "MessagePack serializer implementation",
);

/**
 * Numpy data type serialization using msgpack
 */
export const msgpack_numpy = mkPackage(
  nixRaw`pkgs.python2Packages.msgpack-numpy`,
  "Numpy data type serialization using msgpack",
);

/**
 * Core component of the Microsoft Graph Python SDK
 */
export const msgraph_core = mkPackage(
  nixRaw`pkgs.python2Packages.msgraph-core`,
  "Core component of the Microsoft Graph Python SDK",
);

/**
 * Module to handle JSON/MessagePack
 */
export const msgspec = mkPackage(
  nixRaw`pkgs.python2Packages.msgspec`,
  "Module to handle JSON/MessagePack",
);

/**
 * Python LDAP library for auditing MS AD
 */
export const msldap = mkPackage(
  nixRaw`pkgs.python2Packages.msldap`,
  "Python LDAP library for auditing MS AD",
);

/**
 * Python tool and library for decrypting MS Office files with passwords or other keys
 */
export const msoffcrypto_tool = mkPackage(
  nixRaw`pkgs.python2Packages.msoffcrypto-tool`,
  "Python tool and library for decrypting MS Office files with passwords or other keys",
);

/**
 * Simulate genealogical trees and genomic sequence data using population genetic models
 */
export const msprime = mkPackage(
  nixRaw`pkgs.python2Packages.msprime`,
  "Simulate genealogical trees and genomic sequence data using population genetic models",
);

/**
 * The runtime library for AutoRest generated Python clients
 */
export const msrest = mkPackage(
  nixRaw`pkgs.python2Packages.msrest`,
  "The runtime library for AutoRest generated Python clients",
);

/**
 * The runtime library 'msrestazure' for AutoRest generated Python clients.
 */
export const msrestazure = mkPackage(
  nixRaw`pkgs.python2Packages.msrestazure`,
  "The runtime library 'msrestazure' for AutoRest generated Python clients.",
);

/**
 * Cross-platform multiple screenshots module
 */
export const mss = mkPackage(
  nixRaw`pkgs.python2Packages.mss`,
  "Cross-platform multiple screenshots module",
);

/**
 * Module to parse MT940 files and returns smart Python collections for statistics and manipulation
 */
export const mt_940 = mkPackage(
  nixRaw`pkgs.python2Packages.mt-940`,
  "Module to parse MT940 files and returns smart Python collections for statistics and manipulation",
);

/**
 * Use the fastest JSON functions available at import time
 */
export const mujson = mkPackage(
  nixRaw`pkgs.python2Packages.mujson`,
  "Use the fastest JSON functions available at import time",
);

/**
 * Python client for the Mullvad API
 */
export const mullvad_api = mkPackage(
  nixRaw`pkgs.python2Packages.mullvad-api`,
  "Python client for the Mullvad API",
);

/**
 * Find Mullvad servers with the lowest latency at your location
 */
export const mullvad_closest = mkPackage(
  nixRaw`pkgs.python2Packages.mullvad-closest`,
  "Find Mullvad servers with the lowest latency at your location",
);

/**
 * Multiplex interactions with lists of Python objects
 */
export const mulpyplexer = mkPackage(
  nixRaw`pkgs.python2Packages.mulpyplexer`,
  "Multiplex interactions with lists of Python objects",
);

/**
 * multi_key_dict
 */
export const multi_key_dict = mkPackage(
  nixRaw`pkgs.python2Packages.multi_key_dict`,
  "multi_key_dict",
);

/**
 * Multidict implementation
 */
export const multidict = mkPackage(
  nixRaw`pkgs.python2Packages.multidict`,
  "Multidict implementation",
);

/**
 * Multiple argument dispatching
 */
export const multimethod = mkPackage(
  nixRaw`pkgs.python2Packages.multimethod`,
  "Multiple argument dispatching",
);

/**
 * Parser for multipart/form-data
 */
export const multipart = mkPackage(
  nixRaw`pkgs.python2Packages.multipart`,
  "Parser for multipart/form-data",
);

/**
 * A relatively sane approach to multiple dispatch in Python
 */
export const multipledispatch = mkPackage(
  nixRaw`pkgs.python2Packages.multipledispatch`,
  "A relatively sane approach to multiple dispatch in Python",
);

/**
 * Multiprocessing and multithreading in Python
 */
export const multiprocess = mkPackage(
  nixRaw`pkgs.python2Packages.multiprocess`,
  "Multiprocessing and multithreading in Python",
);

/**
 * An implementation of a multiset
 */
export const multiset = mkPackage(
  nixRaw`pkgs.python2Packages.multiset`,
  "An implementation of a multiset",
);

/**
 * Non-blocking Python methods using decorators
 */
export const multitasking = mkPackage(
  nixRaw`pkgs.python2Packages.multitasking`,
  "Non-blocking Python methods using decorators",
);

/**
 * A dot-accessible dictionary (a la JavaScript objects)
 */
export const munch = mkPackage(
  nixRaw`pkgs.python2Packages.munch`,
  "A dot-accessible dictionary (a la JavaScript objects)",
);

/**
 * Music Notation Graph: a data model for optical music recognition
 */
export const mung = mkPackage(
  nixRaw`pkgs.python2Packages.mung`,
  "Music Notation Graph: a data model for optical music recognition",
);

/**
 * Munkres algorithm for the Assignment Problem
 */
export const munkres = mkPackage(
  nixRaw`pkgs.python2Packages.munkres`,
  "Munkres algorithm for the Assignment Problem",
);

/**
 * Cython bindings for MurmurHash2
 */
export const murmurhash = mkPackage(
  nixRaw`pkgs.python2Packages.murmurhash`,
  "Cython bindings for MurmurHash2",
);

/**
 * Tools for working with the MUSCIMA++ dataset of handwritten music notation
 */
export const muscima = mkPackage(
  nixRaw`pkgs.python2Packages.muscima`,
  "Tools for working with the MUSCIMA++ dataset of handwritten music notation",
);

/**
 * Simple interface to edit audio file metadata
 */
export const music_tag = mkPackage(
  nixRaw`pkgs.python2Packages.music-tag`,
  "Simple interface to edit audio file metadata",
);

/**
 * Python bindings for musicbrainz NGS webservice
 */
export const musicbrainzngs = mkPackage(
  nixRaw`pkgs.python2Packages.musicbrainzngs`,
  "Python bindings for musicbrainz NGS webservice",
);

/**
 * A script to change email tags in a mu indexed maildir
 */
export const mutag = mkPackage(
  nixRaw`pkgs.python2Packages.mutag`,
  "A script to change email tags in a mu indexed maildir",
);

/**
 * Python module for handling audio metadata
 */
export const mutagen = mkPackage(
  nixRaw`pkgs.python2Packages.mutagen`,
  "Python module for handling audio metadata",
);

/**
 * Piecewise linear interpolation in multiple dimensions with multiple, arbitrarily placed, masters
 */
export const mutatormath = mkPackage(
  nixRaw`pkgs.python2Packages.mutatormath`,
  "Piecewise linear interpolation in multiple dimensions with multiple, arbitrarily placed, masters",
);

/**
 * Python module for interacting with mutesync buttons
 */
export const mutesync = mkPackage(
  nixRaw`pkgs.python2Packages.mutesync`,
  "Python module for interacting with mutesync buttons",
);

/**
 * Fast MUTF-8 encoder & decoder
 */
export const mutf8 = mkPackage(
  nixRaw`pkgs.python2Packages.mutf8`,
  "Fast MUTF-8 encoder & decoder",
);

/**
 * A set of helper functions and classes for mediawiki-utilities command-line utilities
 */
export const mwcli = mkPackage(
  nixRaw`pkgs.python2Packages.mwcli`,
  "A set of helper functions and classes for mediawiki-utilities command-line utilities",
);

/**
 * Python client library to the MediaWiki API
 */
export const mwclient = mkPackage(
  nixRaw`pkgs.python2Packages.mwclient`,
  "Python client library to the MediaWiki API",
);

/**
 * Python client library for the mwdb service
 */
export const mwdblib = mkPackage(
  nixRaw`pkgs.python2Packages.mwdblib`,
  "Python client library for the mwdb service",
);

/**
 * Python library to perform OAuth handshakes with a MediaWiki installation
 */
export const mwoauth = mkPackage(
  nixRaw`pkgs.python2Packages.mwoauth`,
  "Python library to perform OAuth handshakes with a MediaWiki installation",
);

/**
 * MWParserFromHell is a parser for MediaWiki wikicode
 */
export const mwparserfromhell = mkPackage(
  nixRaw`pkgs.python2Packages.mwparserfromhell`,
  "MWParserFromHell is a parser for MediaWiki wikicode",
);

/**
 * A set of classes for working with MediaWiki data types.
 */
export const mwtypes = mkPackage(
  nixRaw`pkgs.python2Packages.mwtypes`,
  "A set of classes for working with MediaWiki data types.",
);

/**
 * A set of utilities for processing MediaWiki XML dump data
 */
export const mwxml = mkPackage(
  nixRaw`pkgs.python2Packages.mwxml`,
  "A set of utilities for processing MediaWiki XML dump data",
);

/**
 * Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler
 */
export const mxnet = mkPackage(
  nixRaw`pkgs.python2Packages.mxnet`,
  "Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler",
);

/**
 * Python module to access meal tracking data stored in MyFitnessPal
 */
export const myfitnesspal = mkPackage(
  nixRaw`pkgs.python2Packages.myfitnesspal`,
  "Python module to access meal tracking data stored in MyFitnessPal",
);

/**
 * A gpodder.net client library
 */
export const mygpoclient = mkPackage(
  nixRaw`pkgs.python2Packages.mygpoclient`,
  "A gpodder.net client library",
);

/**
 * A free, open-source package for using Python as a hardware description and verification language.
 */
export const myhdl = mkPackage(
  nixRaw`pkgs.python2Packages.myhdl`,
  "A free, open-source package for using Python as a hardware description and verification language.",
);

/**
 * Python library for interacting with MyHomeSERVER1
 */
export const myhome = mkPackage(
  nixRaw`pkgs.python2Packages.myhome`,
  "Python library for interacting with MyHomeSERVER1",
);

/**
 * CLI tool for testing vulnerabilities of JSON Web Tokens (JWT)
 */
export const myjwt = mkPackage(
  nixRaw`pkgs.python2Packages.myjwt`,
  "CLI tool for testing vulnerabilities of JSON Web Tokens (JWT)",
);

/**
 * Optional static typing for Python
 */
export const mypy = mkPackage(
  nixRaw`pkgs.python2Packages.mypy`,
  "Optional static typing for Python",
);

/**
 * Type annotations for boto3 accessanalyzer
 */
export const mypy_boto3_accessanalyzer = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-accessanalyzer`,
  "Type annotations for boto3 accessanalyzer",
);

/**
 * Type annotations for boto3 account
 */
export const mypy_boto3_account = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-account`,
  "Type annotations for boto3 account",
);

/**
 * Type annotations for boto3 acm
 */
export const mypy_boto3_acm = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-acm`,
  "Type annotations for boto3 acm",
);

/**
 * Type annotations for boto3 acm-pca
 */
export const mypy_boto3_acm_pca = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-acm-pca`,
  "Type annotations for boto3 acm-pca",
);

/**
 * Type annotations for boto3 alexaforbusiness
 */
export const mypy_boto3_alexaforbusiness = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-alexaforbusiness`,
  "Type annotations for boto3 alexaforbusiness",
);

/**
 * Type annotations for boto3 amp
 */
export const mypy_boto3_amp = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-amp`,
  "Type annotations for boto3 amp",
);

/**
 * Type annotations for boto3 amplify
 */
export const mypy_boto3_amplify = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-amplify`,
  "Type annotations for boto3 amplify",
);

/**
 * Type annotations for boto3 amplifybackend
 */
export const mypy_boto3_amplifybackend = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-amplifybackend`,
  "Type annotations for boto3 amplifybackend",
);

/**
 * Type annotations for boto3 amplifyuibuilder
 */
export const mypy_boto3_amplifyuibuilder = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-amplifyuibuilder`,
  "Type annotations for boto3 amplifyuibuilder",
);

/**
 * Type annotations for boto3 apigateway
 */
export const mypy_boto3_apigateway = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-apigateway`,
  "Type annotations for boto3 apigateway",
);

/**
 * Type annotations for boto3 apigatewaymanagementapi
 */
export const mypy_boto3_apigatewaymanagementapi = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-apigatewaymanagementapi`,
  "Type annotations for boto3 apigatewaymanagementapi",
);

/**
 * Type annotations for boto3 apigatewayv2
 */
export const mypy_boto3_apigatewayv2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-apigatewayv2`,
  "Type annotations for boto3 apigatewayv2",
);

/**
 * Type annotations for boto3 appconfig
 */
export const mypy_boto3_appconfig = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-appconfig`,
  "Type annotations for boto3 appconfig",
);

/**
 * Type annotations for boto3 appconfigdata
 */
export const mypy_boto3_appconfigdata = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-appconfigdata`,
  "Type annotations for boto3 appconfigdata",
);

/**
 * Type annotations for boto3 appfabric
 */
export const mypy_boto3_appfabric = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-appfabric`,
  "Type annotations for boto3 appfabric",
);

/**
 * Type annotations for boto3 appflow
 */
export const mypy_boto3_appflow = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-appflow`,
  "Type annotations for boto3 appflow",
);

/**
 * Type annotations for boto3 appintegrations
 */
export const mypy_boto3_appintegrations = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-appintegrations`,
  "Type annotations for boto3 appintegrations",
);

/**
 * Type annotations for boto3 application-autoscaling
 */
export const mypy_boto3_application_autoscaling = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-application-autoscaling`,
  "Type annotations for boto3 application-autoscaling",
);

/**
 * Type annotations for boto3 application-insights
 */
export const mypy_boto3_application_insights = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-application-insights`,
  "Type annotations for boto3 application-insights",
);

/**
 * Type annotations for boto3 applicationcostprofiler
 */
export const mypy_boto3_applicationcostprofiler = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-applicationcostprofiler`,
  "Type annotations for boto3 applicationcostprofiler",
);

/**
 * Type annotations for boto3 appmesh
 */
export const mypy_boto3_appmesh = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-appmesh`,
  "Type annotations for boto3 appmesh",
);

/**
 * Type annotations for boto3 apprunner
 */
export const mypy_boto3_apprunner = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-apprunner`,
  "Type annotations for boto3 apprunner",
);

/**
 * Type annotations for boto3 appstream
 */
export const mypy_boto3_appstream = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-appstream`,
  "Type annotations for boto3 appstream",
);

/**
 * Type annotations for boto3 appsync
 */
export const mypy_boto3_appsync = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-appsync`,
  "Type annotations for boto3 appsync",
);

/**
 * Type annotations for boto3 arc-zonal-shift
 */
export const mypy_boto3_arc_zonal_shift = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-arc-zonal-shift`,
  "Type annotations for boto3 arc-zonal-shift",
);

/**
 * Type annotations for boto3 athena
 */
export const mypy_boto3_athena = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-athena`,
  "Type annotations for boto3 athena",
);

/**
 * Type annotations for boto3 auditmanager
 */
export const mypy_boto3_auditmanager = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-auditmanager`,
  "Type annotations for boto3 auditmanager",
);

/**
 * Type annotations for boto3 autoscaling
 */
export const mypy_boto3_autoscaling = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-autoscaling`,
  "Type annotations for boto3 autoscaling",
);

/**
 * Type annotations for boto3 autoscaling-plans
 */
export const mypy_boto3_autoscaling_plans = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-autoscaling-plans`,
  "Type annotations for boto3 autoscaling-plans",
);

/**
 * Type annotations for boto3 backup
 */
export const mypy_boto3_backup = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-backup`,
  "Type annotations for boto3 backup",
);

/**
 * Type annotations for boto3 backup-gateway
 */
export const mypy_boto3_backup_gateway = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-backup-gateway`,
  "Type annotations for boto3 backup-gateway",
);

/**
 * Type annotations for boto3 backupstorage
 */
export const mypy_boto3_backupstorage = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-backupstorage`,
  "Type annotations for boto3 backupstorage",
);

/**
 * Type annotations for boto3 batch
 */
export const mypy_boto3_batch = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-batch`,
  "Type annotations for boto3 batch",
);

/**
 * Type annotations for boto3 billingconductor
 */
export const mypy_boto3_billingconductor = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-billingconductor`,
  "Type annotations for boto3 billingconductor",
);

/**
 * Type annotations for boto3 braket
 */
export const mypy_boto3_braket = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-braket`,
  "Type annotations for boto3 braket",
);

/**
 * Type annotations for boto3 budgets
 */
export const mypy_boto3_budgets = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-budgets`,
  "Type annotations for boto3 budgets",
);

/**
 * Type annotations builder for boto3
 */
export const mypy_boto3_builder = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-builder`,
  "Type annotations builder for boto3",
);

/**
 * Type annotations for boto3 ce
 */
export const mypy_boto3_ce = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ce`,
  "Type annotations for boto3 ce",
);

/**
 * Type annotations for boto3 chime
 */
export const mypy_boto3_chime = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-chime`,
  "Type annotations for boto3 chime",
);

/**
 * Type annotations for boto3 chime-sdk-identity
 */
export const mypy_boto3_chime_sdk_identity = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-chime-sdk-identity`,
  "Type annotations for boto3 chime-sdk-identity",
);

/**
 * Type annotations for boto3 chime-sdk-media-pipelines
 */
export const mypy_boto3_chime_sdk_media_pipelines = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-chime-sdk-media-pipelines`,
  "Type annotations for boto3 chime-sdk-media-pipelines",
);

/**
 * Type annotations for boto3 chime-sdk-meetings
 */
export const mypy_boto3_chime_sdk_meetings = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-chime-sdk-meetings`,
  "Type annotations for boto3 chime-sdk-meetings",
);

/**
 * Type annotations for boto3 chime-sdk-messaging
 */
export const mypy_boto3_chime_sdk_messaging = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-chime-sdk-messaging`,
  "Type annotations for boto3 chime-sdk-messaging",
);

/**
 * Type annotations for boto3 chime-sdk-voice
 */
export const mypy_boto3_chime_sdk_voice = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-chime-sdk-voice`,
  "Type annotations for boto3 chime-sdk-voice",
);

/**
 * Type annotations for boto3 cleanrooms
 */
export const mypy_boto3_cleanrooms = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cleanrooms`,
  "Type annotations for boto3 cleanrooms",
);

/**
 * Type annotations for boto3 cloud9
 */
export const mypy_boto3_cloud9 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloud9`,
  "Type annotations for boto3 cloud9",
);

/**
 * Type annotations for boto3 cloudcontrol
 */
export const mypy_boto3_cloudcontrol = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloudcontrol`,
  "Type annotations for boto3 cloudcontrol",
);

/**
 * Type annotations for boto3 clouddirectory
 */
export const mypy_boto3_clouddirectory = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-clouddirectory`,
  "Type annotations for boto3 clouddirectory",
);

/**
 * Type annotations for boto3 cloudformation
 */
export const mypy_boto3_cloudformation = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloudformation`,
  "Type annotations for boto3 cloudformation",
);

/**
 * Type annotations for boto3 cloudfront
 */
export const mypy_boto3_cloudfront = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloudfront`,
  "Type annotations for boto3 cloudfront",
);

/**
 * Type annotations for boto3 cloudhsm
 */
export const mypy_boto3_cloudhsm = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloudhsm`,
  "Type annotations for boto3 cloudhsm",
);

/**
 * Type annotations for boto3 cloudhsmv2
 */
export const mypy_boto3_cloudhsmv2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloudhsmv2`,
  "Type annotations for boto3 cloudhsmv2",
);

/**
 * Type annotations for boto3 cloudsearch
 */
export const mypy_boto3_cloudsearch = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloudsearch`,
  "Type annotations for boto3 cloudsearch",
);

/**
 * Type annotations for boto3 cloudsearchdomain
 */
export const mypy_boto3_cloudsearchdomain = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloudsearchdomain`,
  "Type annotations for boto3 cloudsearchdomain",
);

/**
 * Type annotations for boto3 cloudtrail
 */
export const mypy_boto3_cloudtrail = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloudtrail`,
  "Type annotations for boto3 cloudtrail",
);

/**
 * Type annotations for boto3 cloudtrail-data
 */
export const mypy_boto3_cloudtrail_data = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloudtrail-data`,
  "Type annotations for boto3 cloudtrail-data",
);

/**
 * Type annotations for boto3 cloudwatch
 */
export const mypy_boto3_cloudwatch = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cloudwatch`,
  "Type annotations for boto3 cloudwatch",
);

/**
 * Type annotations for boto3 codeartifact
 */
export const mypy_boto3_codeartifact = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codeartifact`,
  "Type annotations for boto3 codeartifact",
);

/**
 * Type annotations for boto3 codebuild
 */
export const mypy_boto3_codebuild = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codebuild`,
  "Type annotations for boto3 codebuild",
);

/**
 * Type annotations for boto3 codecatalyst
 */
export const mypy_boto3_codecatalyst = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codecatalyst`,
  "Type annotations for boto3 codecatalyst",
);

/**
 * Type annotations for boto3 codecommit
 */
export const mypy_boto3_codecommit = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codecommit`,
  "Type annotations for boto3 codecommit",
);

/**
 * Type annotations for boto3 codedeploy
 */
export const mypy_boto3_codedeploy = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codedeploy`,
  "Type annotations for boto3 codedeploy",
);

/**
 * Type annotations for boto3 codeguru-reviewer
 */
export const mypy_boto3_codeguru_reviewer = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codeguru-reviewer`,
  "Type annotations for boto3 codeguru-reviewer",
);

/**
 * Type annotations for boto3 codeguru-security
 */
export const mypy_boto3_codeguru_security = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codeguru-security`,
  "Type annotations for boto3 codeguru-security",
);

/**
 * Type annotations for boto3 codeguruprofiler
 */
export const mypy_boto3_codeguruprofiler = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codeguruprofiler`,
  "Type annotations for boto3 codeguruprofiler",
);

/**
 * Type annotations for boto3 codepipeline
 */
export const mypy_boto3_codepipeline = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codepipeline`,
  "Type annotations for boto3 codepipeline",
);

/**
 * Type annotations for boto3 codestar
 */
export const mypy_boto3_codestar = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codestar`,
  "Type annotations for boto3 codestar",
);

/**
 * Type annotations for boto3 codestar-connections
 */
export const mypy_boto3_codestar_connections = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codestar-connections`,
  "Type annotations for boto3 codestar-connections",
);

/**
 * Type annotations for boto3 codestar-notifications
 */
export const mypy_boto3_codestar_notifications = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-codestar-notifications`,
  "Type annotations for boto3 codestar-notifications",
);

/**
 * Type annotations for boto3 cognito-identity
 */
export const mypy_boto3_cognito_identity = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cognito-identity`,
  "Type annotations for boto3 cognito-identity",
);

/**
 * Type annotations for boto3 cognito-idp
 */
export const mypy_boto3_cognito_idp = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cognito-idp`,
  "Type annotations for boto3 cognito-idp",
);

/**
 * Type annotations for boto3 cognito-sync
 */
export const mypy_boto3_cognito_sync = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cognito-sync`,
  "Type annotations for boto3 cognito-sync",
);

/**
 * Type annotations for boto3 comprehend
 */
export const mypy_boto3_comprehend = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-comprehend`,
  "Type annotations for boto3 comprehend",
);

/**
 * Type annotations for boto3 comprehendmedical
 */
export const mypy_boto3_comprehendmedical = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-comprehendmedical`,
  "Type annotations for boto3 comprehendmedical",
);

/**
 * Type annotations for boto3 compute-optimizer
 */
export const mypy_boto3_compute_optimizer = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-compute-optimizer`,
  "Type annotations for boto3 compute-optimizer",
);

/**
 * Type annotations for boto3 config
 */
export const mypy_boto3_config = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-config`,
  "Type annotations for boto3 config",
);

/**
 * Type annotations for boto3 connect
 */
export const mypy_boto3_connect = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-connect`,
  "Type annotations for boto3 connect",
);

/**
 * Type annotations for boto3 connect-contact-lens
 */
export const mypy_boto3_connect_contact_lens = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-connect-contact-lens`,
  "Type annotations for boto3 connect-contact-lens",
);

/**
 * Type annotations for boto3 connectcampaigns
 */
export const mypy_boto3_connectcampaigns = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-connectcampaigns`,
  "Type annotations for boto3 connectcampaigns",
);

/**
 * Type annotations for boto3 connectcases
 */
export const mypy_boto3_connectcases = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-connectcases`,
  "Type annotations for boto3 connectcases",
);

/**
 * Type annotations for boto3 connectparticipant
 */
export const mypy_boto3_connectparticipant = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-connectparticipant`,
  "Type annotations for boto3 connectparticipant",
);

/**
 * Type annotations for boto3 controltower
 */
export const mypy_boto3_controltower = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-controltower`,
  "Type annotations for boto3 controltower",
);

/**
 * Type annotations for boto3 cur
 */
export const mypy_boto3_cur = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-cur`,
  "Type annotations for boto3 cur",
);

/**
 * Type annotations for boto3 customer-profiles
 */
export const mypy_boto3_customer_profiles = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-customer-profiles`,
  "Type annotations for boto3 customer-profiles",
);

/**
 * Type annotations for boto3 databrew
 */
export const mypy_boto3_databrew = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-databrew`,
  "Type annotations for boto3 databrew",
);

/**
 * Type annotations for boto3 dataexchange
 */
export const mypy_boto3_dataexchange = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-dataexchange`,
  "Type annotations for boto3 dataexchange",
);

/**
 * Type annotations for boto3 datapipeline
 */
export const mypy_boto3_datapipeline = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-datapipeline`,
  "Type annotations for boto3 datapipeline",
);

/**
 * Type annotations for boto3 datasync
 */
export const mypy_boto3_datasync = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-datasync`,
  "Type annotations for boto3 datasync",
);

/**
 * Type annotations for boto3 dax
 */
export const mypy_boto3_dax = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-dax`,
  "Type annotations for boto3 dax",
);

/**
 * Type annotations for boto3 detective
 */
export const mypy_boto3_detective = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-detective`,
  "Type annotations for boto3 detective",
);

/**
 * Type annotations for boto3 devicefarm
 */
export const mypy_boto3_devicefarm = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-devicefarm`,
  "Type annotations for boto3 devicefarm",
);

/**
 * Type annotations for boto3 devops-guru
 */
export const mypy_boto3_devops_guru = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-devops-guru`,
  "Type annotations for boto3 devops-guru",
);

/**
 * Type annotations for boto3 directconnect
 */
export const mypy_boto3_directconnect = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-directconnect`,
  "Type annotations for boto3 directconnect",
);

/**
 * Type annotations for boto3 discovery
 */
export const mypy_boto3_discovery = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-discovery`,
  "Type annotations for boto3 discovery",
);

/**
 * Type annotations for boto3 dlm
 */
export const mypy_boto3_dlm = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-dlm`,
  "Type annotations for boto3 dlm",
);

/**
 * Type annotations for boto3 dms
 */
export const mypy_boto3_dms = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-dms`,
  "Type annotations for boto3 dms",
);

/**
 * Type annotations for boto3 docdb
 */
export const mypy_boto3_docdb = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-docdb`,
  "Type annotations for boto3 docdb",
);

/**
 * Type annotations for boto3 docdb-elastic
 */
export const mypy_boto3_docdb_elastic = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-docdb-elastic`,
  "Type annotations for boto3 docdb-elastic",
);

/**
 * Type annotations for boto3 drs
 */
export const mypy_boto3_drs = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-drs`,
  "Type annotations for boto3 drs",
);

/**
 * Type annotations for boto3 ds
 */
export const mypy_boto3_ds = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ds`,
  "Type annotations for boto3 ds",
);

/**
 * Type annotations for boto3 dynamodb
 */
export const mypy_boto3_dynamodb = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-dynamodb`,
  "Type annotations for boto3 dynamodb",
);

/**
 * Type annotations for boto3 dynamodbstreams
 */
export const mypy_boto3_dynamodbstreams = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-dynamodbstreams`,
  "Type annotations for boto3 dynamodbstreams",
);

/**
 * Type annotations for boto3 ebs
 */
export const mypy_boto3_ebs = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ebs`,
  "Type annotations for boto3 ebs",
);

/**
 * Type annotations for boto3 ec2
 */
export const mypy_boto3_ec2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ec2`,
  "Type annotations for boto3 ec2",
);

/**
 * Type annotations for boto3 ec2-instance-connect
 */
export const mypy_boto3_ec2_instance_connect = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ec2-instance-connect`,
  "Type annotations for boto3 ec2-instance-connect",
);

/**
 * Type annotations for boto3 ecr
 */
export const mypy_boto3_ecr = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ecr`,
  "Type annotations for boto3 ecr",
);

/**
 * Type annotations for boto3 ecr-public
 */
export const mypy_boto3_ecr_public = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ecr-public`,
  "Type annotations for boto3 ecr-public",
);

/**
 * Type annotations for boto3 ecs
 */
export const mypy_boto3_ecs = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ecs`,
  "Type annotations for boto3 ecs",
);

/**
 * Type annotations for boto3 efs
 */
export const mypy_boto3_efs = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-efs`,
  "Type annotations for boto3 efs",
);

/**
 * Type annotations for boto3 eks
 */
export const mypy_boto3_eks = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-eks`,
  "Type annotations for boto3 eks",
);

/**
 * Type annotations for boto3 elastic-inference
 */
export const mypy_boto3_elastic_inference = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-elastic-inference`,
  "Type annotations for boto3 elastic-inference",
);

/**
 * Type annotations for boto3 elasticache
 */
export const mypy_boto3_elasticache = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-elasticache`,
  "Type annotations for boto3 elasticache",
);

/**
 * Type annotations for boto3 elasticbeanstalk
 */
export const mypy_boto3_elasticbeanstalk = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-elasticbeanstalk`,
  "Type annotations for boto3 elasticbeanstalk",
);

/**
 * Type annotations for boto3 elastictranscoder
 */
export const mypy_boto3_elastictranscoder = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-elastictranscoder`,
  "Type annotations for boto3 elastictranscoder",
);

/**
 * Type annotations for boto3 elb
 */
export const mypy_boto3_elb = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-elb`,
  "Type annotations for boto3 elb",
);

/**
 * Type annotations for boto3 elbv2
 */
export const mypy_boto3_elbv2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-elbv2`,
  "Type annotations for boto3 elbv2",
);

/**
 * Type annotations for boto3 emr
 */
export const mypy_boto3_emr = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-emr`,
  "Type annotations for boto3 emr",
);

/**
 * Type annotations for boto3 emr-containers
 */
export const mypy_boto3_emr_containers = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-emr-containers`,
  "Type annotations for boto3 emr-containers",
);

/**
 * Type annotations for boto3 emr-serverless
 */
export const mypy_boto3_emr_serverless = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-emr-serverless`,
  "Type annotations for boto3 emr-serverless",
);

/**
 * Type annotations for boto3 entityresolution
 */
export const mypy_boto3_entityresolution = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-entityresolution`,
  "Type annotations for boto3 entityresolution",
);

/**
 * Type annotations for boto3 es
 */
export const mypy_boto3_es = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-es`,
  "Type annotations for boto3 es",
);

/**
 * Type annotations for boto3 events
 */
export const mypy_boto3_events = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-events`,
  "Type annotations for boto3 events",
);

/**
 * Type annotations for boto3 evidently
 */
export const mypy_boto3_evidently = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-evidently`,
  "Type annotations for boto3 evidently",
);

/**
 * Type annotations for boto3 finspace
 */
export const mypy_boto3_finspace = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-finspace`,
  "Type annotations for boto3 finspace",
);

/**
 * Type annotations for boto3 finspace-data
 */
export const mypy_boto3_finspace_data = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-finspace-data`,
  "Type annotations for boto3 finspace-data",
);

/**
 * Type annotations for boto3 firehose
 */
export const mypy_boto3_firehose = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-firehose`,
  "Type annotations for boto3 firehose",
);

/**
 * Type annotations for boto3 fis
 */
export const mypy_boto3_fis = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-fis`,
  "Type annotations for boto3 fis",
);

/**
 * Type annotations for boto3 fms
 */
export const mypy_boto3_fms = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-fms`,
  "Type annotations for boto3 fms",
);

/**
 * Type annotations for boto3 forecast
 */
export const mypy_boto3_forecast = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-forecast`,
  "Type annotations for boto3 forecast",
);

/**
 * Type annotations for boto3 forecastquery
 */
export const mypy_boto3_forecastquery = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-forecastquery`,
  "Type annotations for boto3 forecastquery",
);

/**
 * Type annotations for boto3 frauddetector
 */
export const mypy_boto3_frauddetector = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-frauddetector`,
  "Type annotations for boto3 frauddetector",
);

/**
 * Type annotations for boto3 fsx
 */
export const mypy_boto3_fsx = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-fsx`,
  "Type annotations for boto3 fsx",
);

/**
 * Type annotations for boto3 gamelift
 */
export const mypy_boto3_gamelift = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-gamelift`,
  "Type annotations for boto3 gamelift",
);

/**
 * Type annotations for boto3 gamesparks
 */
export const mypy_boto3_gamesparks = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-gamesparks`,
  "Type annotations for boto3 gamesparks",
);

/**
 * Type annotations for boto3 glacier
 */
export const mypy_boto3_glacier = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-glacier`,
  "Type annotations for boto3 glacier",
);

/**
 * Type annotations for boto3 globalaccelerator
 */
export const mypy_boto3_globalaccelerator = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-globalaccelerator`,
  "Type annotations for boto3 globalaccelerator",
);

/**
 * Type annotations for boto3 glue
 */
export const mypy_boto3_glue = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-glue`,
  "Type annotations for boto3 glue",
);

/**
 * Type annotations for boto3 grafana
 */
export const mypy_boto3_grafana = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-grafana`,
  "Type annotations for boto3 grafana",
);

/**
 * Type annotations for boto3 greengrass
 */
export const mypy_boto3_greengrass = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-greengrass`,
  "Type annotations for boto3 greengrass",
);

/**
 * Type annotations for boto3 greengrassv2
 */
export const mypy_boto3_greengrassv2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-greengrassv2`,
  "Type annotations for boto3 greengrassv2",
);

/**
 * Type annotations for boto3 groundstation
 */
export const mypy_boto3_groundstation = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-groundstation`,
  "Type annotations for boto3 groundstation",
);

/**
 * Type annotations for boto3 guardduty
 */
export const mypy_boto3_guardduty = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-guardduty`,
  "Type annotations for boto3 guardduty",
);

/**
 * Type annotations for boto3 health
 */
export const mypy_boto3_health = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-health`,
  "Type annotations for boto3 health",
);

/**
 * Type annotations for boto3 healthlake
 */
export const mypy_boto3_healthlake = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-healthlake`,
  "Type annotations for boto3 healthlake",
);

/**
 * Type annotations for boto3 honeycode
 */
export const mypy_boto3_honeycode = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-honeycode`,
  "Type annotations for boto3 honeycode",
);

/**
 * Type annotations for boto3 iam
 */
export const mypy_boto3_iam = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iam`,
  "Type annotations for boto3 iam",
);

/**
 * Type annotations for boto3 identitystore
 */
export const mypy_boto3_identitystore = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-identitystore`,
  "Type annotations for boto3 identitystore",
);

/**
 * Type annotations for boto3 imagebuilder
 */
export const mypy_boto3_imagebuilder = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-imagebuilder`,
  "Type annotations for boto3 imagebuilder",
);

/**
 * Type annotations for boto3 importexport
 */
export const mypy_boto3_importexport = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-importexport`,
  "Type annotations for boto3 importexport",
);

/**
 * Type annotations for boto3 inspector
 */
export const mypy_boto3_inspector = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-inspector`,
  "Type annotations for boto3 inspector",
);

/**
 * Type annotations for boto3 inspector2
 */
export const mypy_boto3_inspector2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-inspector2`,
  "Type annotations for boto3 inspector2",
);

/**
 * Type annotations for boto3 internetmonitor
 */
export const mypy_boto3_internetmonitor = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-internetmonitor`,
  "Type annotations for boto3 internetmonitor",
);

/**
 * Type annotations for boto3 iot
 */
export const mypy_boto3_iot = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iot`,
  "Type annotations for boto3 iot",
);

/**
 * Type annotations for boto3 iot1click-devices
 */
export const mypy_boto3_iot1click_devices = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iot1click-devices`,
  "Type annotations for boto3 iot1click-devices",
);

/**
 * Type annotations for boto3 iot1click-projects
 */
export const mypy_boto3_iot1click_projects = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iot1click-projects`,
  "Type annotations for boto3 iot1click-projects",
);

/**
 * Type annotations for boto3 iot-data
 */
export const mypy_boto3_iot_data = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iot-data`,
  "Type annotations for boto3 iot-data",
);

/**
 * Type annotations for boto3 iot-jobs-data
 */
export const mypy_boto3_iot_jobs_data = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iot-jobs-data`,
  "Type annotations for boto3 iot-jobs-data",
);

/**
 * Type annotations for boto3 iot-roborunner
 */
export const mypy_boto3_iot_roborunner = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iot-roborunner`,
  "Type annotations for boto3 iot-roborunner",
);

/**
 * Type annotations for boto3 iotanalytics
 */
export const mypy_boto3_iotanalytics = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iotanalytics`,
  "Type annotations for boto3 iotanalytics",
);

/**
 * Type annotations for boto3 iotdeviceadvisor
 */
export const mypy_boto3_iotdeviceadvisor = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iotdeviceadvisor`,
  "Type annotations for boto3 iotdeviceadvisor",
);

/**
 * Type annotations for boto3 iotevents
 */
export const mypy_boto3_iotevents = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iotevents`,
  "Type annotations for boto3 iotevents",
);

/**
 * Type annotations for boto3 iotevents-data
 */
export const mypy_boto3_iotevents_data = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iotevents-data`,
  "Type annotations for boto3 iotevents-data",
);

/**
 * Type annotations for boto3 iotfleethub
 */
export const mypy_boto3_iotfleethub = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iotfleethub`,
  "Type annotations for boto3 iotfleethub",
);

/**
 * Type annotations for boto3 iotfleetwise
 */
export const mypy_boto3_iotfleetwise = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iotfleetwise`,
  "Type annotations for boto3 iotfleetwise",
);

/**
 * Type annotations for boto3 iotsecuretunneling
 */
export const mypy_boto3_iotsecuretunneling = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iotsecuretunneling`,
  "Type annotations for boto3 iotsecuretunneling",
);

/**
 * Type annotations for boto3 iotsitewise
 */
export const mypy_boto3_iotsitewise = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iotsitewise`,
  "Type annotations for boto3 iotsitewise",
);

/**
 * Type annotations for boto3 iotthingsgraph
 */
export const mypy_boto3_iotthingsgraph = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iotthingsgraph`,
  "Type annotations for boto3 iotthingsgraph",
);

/**
 * Type annotations for boto3 iottwinmaker
 */
export const mypy_boto3_iottwinmaker = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iottwinmaker`,
  "Type annotations for boto3 iottwinmaker",
);

/**
 * Type annotations for boto3 iotwireless
 */
export const mypy_boto3_iotwireless = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-iotwireless`,
  "Type annotations for boto3 iotwireless",
);

/**
 * Type annotations for boto3 ivs
 */
export const mypy_boto3_ivs = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ivs`,
  "Type annotations for boto3 ivs",
);

/**
 * Type annotations for boto3 ivs-realtime
 */
export const mypy_boto3_ivs_realtime = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ivs-realtime`,
  "Type annotations for boto3 ivs-realtime",
);

/**
 * Type annotations for boto3 ivschat
 */
export const mypy_boto3_ivschat = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ivschat`,
  "Type annotations for boto3 ivschat",
);

/**
 * Type annotations for boto3 kafka
 */
export const mypy_boto3_kafka = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kafka`,
  "Type annotations for boto3 kafka",
);

/**
 * Type annotations for boto3 kafkaconnect
 */
export const mypy_boto3_kafkaconnect = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kafkaconnect`,
  "Type annotations for boto3 kafkaconnect",
);

/**
 * Type annotations for boto3 kendra
 */
export const mypy_boto3_kendra = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kendra`,
  "Type annotations for boto3 kendra",
);

/**
 * Type annotations for boto3 kendra-ranking
 */
export const mypy_boto3_kendra_ranking = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kendra-ranking`,
  "Type annotations for boto3 kendra-ranking",
);

/**
 * Type annotations for boto3 keyspaces
 */
export const mypy_boto3_keyspaces = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-keyspaces`,
  "Type annotations for boto3 keyspaces",
);

/**
 * Type annotations for boto3 kinesis
 */
export const mypy_boto3_kinesis = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kinesis`,
  "Type annotations for boto3 kinesis",
);

/**
 * Type annotations for boto3 kinesis-video-archived-media
 */
export const mypy_boto3_kinesis_video_archived_media = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kinesis-video-archived-media`,
  "Type annotations for boto3 kinesis-video-archived-media",
);

/**
 * Type annotations for boto3 kinesis-video-media
 */
export const mypy_boto3_kinesis_video_media = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kinesis-video-media`,
  "Type annotations for boto3 kinesis-video-media",
);

/**
 * Type annotations for boto3 kinesis-video-signaling
 */
export const mypy_boto3_kinesis_video_signaling = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kinesis-video-signaling`,
  "Type annotations for boto3 kinesis-video-signaling",
);

/**
 * Type annotations for boto3 kinesis-video-webrtc-storage
 */
export const mypy_boto3_kinesis_video_webrtc_storage = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kinesis-video-webrtc-storage`,
  "Type annotations for boto3 kinesis-video-webrtc-storage",
);

/**
 * Type annotations for boto3 kinesisanalytics
 */
export const mypy_boto3_kinesisanalytics = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kinesisanalytics`,
  "Type annotations for boto3 kinesisanalytics",
);

/**
 * Type annotations for boto3 kinesisanalyticsv2
 */
export const mypy_boto3_kinesisanalyticsv2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kinesisanalyticsv2`,
  "Type annotations for boto3 kinesisanalyticsv2",
);

/**
 * Type annotations for boto3 kinesisvideo
 */
export const mypy_boto3_kinesisvideo = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kinesisvideo`,
  "Type annotations for boto3 kinesisvideo",
);

/**
 * Type annotations for boto3 kms
 */
export const mypy_boto3_kms = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-kms`,
  "Type annotations for boto3 kms",
);

/**
 * Type annotations for boto3 lakeformation
 */
export const mypy_boto3_lakeformation = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-lakeformation`,
  "Type annotations for boto3 lakeformation",
);

/**
 * Type annotations for boto3 lambda
 */
export const mypy_boto3_lambda = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-lambda`,
  "Type annotations for boto3 lambda",
);

/**
 * Type annotations for boto3 lex-models
 */
export const mypy_boto3_lex_models = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-lex-models`,
  "Type annotations for boto3 lex-models",
);

/**
 * Type annotations for boto3 lex-runtime
 */
export const mypy_boto3_lex_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-lex-runtime`,
  "Type annotations for boto3 lex-runtime",
);

/**
 * Type annotations for boto3 lexv2-models
 */
export const mypy_boto3_lexv2_models = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-lexv2-models`,
  "Type annotations for boto3 lexv2-models",
);

/**
 * Type annotations for boto3 lexv2-runtime
 */
export const mypy_boto3_lexv2_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-lexv2-runtime`,
  "Type annotations for boto3 lexv2-runtime",
);

/**
 * Type annotations for boto3 license-manager
 */
export const mypy_boto3_license_manager = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-license-manager`,
  "Type annotations for boto3 license-manager",
);

/**
 * Type annotations for boto3 license-manager-linux-subscriptions
 */
export const mypy_boto3_license_manager_linux_subscriptions = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-license-manager-linux-subscriptions`,
  "Type annotations for boto3 license-manager-linux-subscriptions",
);

/**
 * Type annotations for boto3 license-manager-user-subscriptions
 */
export const mypy_boto3_license_manager_user_subscriptions = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-license-manager-user-subscriptions`,
  "Type annotations for boto3 license-manager-user-subscriptions",
);

/**
 * Type annotations for boto3 lightsail
 */
export const mypy_boto3_lightsail = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-lightsail`,
  "Type annotations for boto3 lightsail",
);

/**
 * Type annotations for boto3 location
 */
export const mypy_boto3_location = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-location`,
  "Type annotations for boto3 location",
);

/**
 * Type annotations for boto3 logs
 */
export const mypy_boto3_logs = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-logs`,
  "Type annotations for boto3 logs",
);

/**
 * Type annotations for boto3 lookoutequipment
 */
export const mypy_boto3_lookoutequipment = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-lookoutequipment`,
  "Type annotations for boto3 lookoutequipment",
);

/**
 * Type annotations for boto3 lookoutmetrics
 */
export const mypy_boto3_lookoutmetrics = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-lookoutmetrics`,
  "Type annotations for boto3 lookoutmetrics",
);

/**
 * Type annotations for boto3 lookoutvision
 */
export const mypy_boto3_lookoutvision = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-lookoutvision`,
  "Type annotations for boto3 lookoutvision",
);

/**
 * Type annotations for boto3 m2
 */
export const mypy_boto3_m2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-m2`,
  "Type annotations for boto3 m2",
);

/**
 * Type annotations for boto3 machinelearning
 */
export const mypy_boto3_machinelearning = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-machinelearning`,
  "Type annotations for boto3 machinelearning",
);

/**
 * Type annotations for boto3 macie
 */
export const mypy_boto3_macie = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-macie`,
  "Type annotations for boto3 macie",
);

/**
 * Type annotations for boto3 macie2
 */
export const mypy_boto3_macie2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-macie2`,
  "Type annotations for boto3 macie2",
);

/**
 * Type annotations for boto3 managedblockchain
 */
export const mypy_boto3_managedblockchain = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-managedblockchain`,
  "Type annotations for boto3 managedblockchain",
);

/**
 * Type annotations for boto3 managedblockchain-query
 */
export const mypy_boto3_managedblockchain_query = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-managedblockchain-query`,
  "Type annotations for boto3 managedblockchain-query",
);

/**
 * Type annotations for boto3 marketplace-catalog
 */
export const mypy_boto3_marketplace_catalog = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-marketplace-catalog`,
  "Type annotations for boto3 marketplace-catalog",
);

/**
 * Type annotations for boto3 marketplace-entitlement
 */
export const mypy_boto3_marketplace_entitlement = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-marketplace-entitlement`,
  "Type annotations for boto3 marketplace-entitlement",
);

/**
 * Type annotations for boto3 marketplacecommerceanalytics
 */
export const mypy_boto3_marketplacecommerceanalytics = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-marketplacecommerceanalytics`,
  "Type annotations for boto3 marketplacecommerceanalytics",
);

/**
 * Type annotations for boto3 mediaconnect
 */
export const mypy_boto3_mediaconnect = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mediaconnect`,
  "Type annotations for boto3 mediaconnect",
);

/**
 * Type annotations for boto3 mediaconvert
 */
export const mypy_boto3_mediaconvert = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mediaconvert`,
  "Type annotations for boto3 mediaconvert",
);

/**
 * Type annotations for boto3 medialive
 */
export const mypy_boto3_medialive = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-medialive`,
  "Type annotations for boto3 medialive",
);

/**
 * Type annotations for boto3 mediapackage
 */
export const mypy_boto3_mediapackage = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mediapackage`,
  "Type annotations for boto3 mediapackage",
);

/**
 * Type annotations for boto3 mediapackage-vod
 */
export const mypy_boto3_mediapackage_vod = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mediapackage-vod`,
  "Type annotations for boto3 mediapackage-vod",
);

/**
 * Type annotations for boto3 mediapackagev2
 */
export const mypy_boto3_mediapackagev2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mediapackagev2`,
  "Type annotations for boto3 mediapackagev2",
);

/**
 * Type annotations for boto3 mediastore
 */
export const mypy_boto3_mediastore = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mediastore`,
  "Type annotations for boto3 mediastore",
);

/**
 * Type annotations for boto3 mediastore-data
 */
export const mypy_boto3_mediastore_data = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mediastore-data`,
  "Type annotations for boto3 mediastore-data",
);

/**
 * Type annotations for boto3 mediatailor
 */
export const mypy_boto3_mediatailor = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mediatailor`,
  "Type annotations for boto3 mediatailor",
);

/**
 * Type annotations for boto3 medical-imaging
 */
export const mypy_boto3_medical_imaging = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-medical-imaging`,
  "Type annotations for boto3 medical-imaging",
);

/**
 * Type annotations for boto3 memorydb
 */
export const mypy_boto3_memorydb = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-memorydb`,
  "Type annotations for boto3 memorydb",
);

/**
 * Type annotations for boto3 meteringmarketplace
 */
export const mypy_boto3_meteringmarketplace = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-meteringmarketplace`,
  "Type annotations for boto3 meteringmarketplace",
);

/**
 * Type annotations for boto3 mgh
 */
export const mypy_boto3_mgh = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mgh`,
  "Type annotations for boto3 mgh",
);

/**
 * Type annotations for boto3 mgn
 */
export const mypy_boto3_mgn = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mgn`,
  "Type annotations for boto3 mgn",
);

/**
 * Type annotations for boto3 migration-hub-refactor-spaces
 */
export const mypy_boto3_migration_hub_refactor_spaces = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-migration-hub-refactor-spaces`,
  "Type annotations for boto3 migration-hub-refactor-spaces",
);

/**
 * Type annotations for boto3 migrationhub-config
 */
export const mypy_boto3_migrationhub_config = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-migrationhub-config`,
  "Type annotations for boto3 migrationhub-config",
);

/**
 * Type annotations for boto3 migrationhuborchestrator
 */
export const mypy_boto3_migrationhuborchestrator = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-migrationhuborchestrator`,
  "Type annotations for boto3 migrationhuborchestrator",
);

/**
 * Type annotations for boto3 migrationhubstrategy
 */
export const mypy_boto3_migrationhubstrategy = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-migrationhubstrategy`,
  "Type annotations for boto3 migrationhubstrategy",
);

/**
 * Type annotations for boto3 mobile
 */
export const mypy_boto3_mobile = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mobile`,
  "Type annotations for boto3 mobile",
);

/**
 * Type annotations for boto3 mq
 */
export const mypy_boto3_mq = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mq`,
  "Type annotations for boto3 mq",
);

/**
 * Type annotations for boto3 mturk
 */
export const mypy_boto3_mturk = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mturk`,
  "Type annotations for boto3 mturk",
);

/**
 * Type annotations for boto3 mwaa
 */
export const mypy_boto3_mwaa = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-mwaa`,
  "Type annotations for boto3 mwaa",
);

/**
 * Type annotations for boto3 neptune
 */
export const mypy_boto3_neptune = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-neptune`,
  "Type annotations for boto3 neptune",
);

/**
 * Type annotations for boto3 neptunedata
 */
export const mypy_boto3_neptunedata = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-neptunedata`,
  "Type annotations for boto3 neptunedata",
);

/**
 * Type annotations for boto3 network-firewall
 */
export const mypy_boto3_network_firewall = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-network-firewall`,
  "Type annotations for boto3 network-firewall",
);

/**
 * Type annotations for boto3 networkmanager
 */
export const mypy_boto3_networkmanager = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-networkmanager`,
  "Type annotations for boto3 networkmanager",
);

/**
 * Type annotations for boto3 nimble
 */
export const mypy_boto3_nimble = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-nimble`,
  "Type annotations for boto3 nimble",
);

/**
 * Type annotations for boto3 oam
 */
export const mypy_boto3_oam = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-oam`,
  "Type annotations for boto3 oam",
);

/**
 * Type annotations for boto3 omics
 */
export const mypy_boto3_omics = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-omics`,
  "Type annotations for boto3 omics",
);

/**
 * Type annotations for boto3 opensearch
 */
export const mypy_boto3_opensearch = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-opensearch`,
  "Type annotations for boto3 opensearch",
);

/**
 * Type annotations for boto3 opensearchserverless
 */
export const mypy_boto3_opensearchserverless = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-opensearchserverless`,
  "Type annotations for boto3 opensearchserverless",
);

/**
 * Type annotations for boto3 opsworks
 */
export const mypy_boto3_opsworks = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-opsworks`,
  "Type annotations for boto3 opsworks",
);

/**
 * Type annotations for boto3 opsworkscm
 */
export const mypy_boto3_opsworkscm = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-opsworkscm`,
  "Type annotations for boto3 opsworkscm",
);

/**
 * Type annotations for boto3 organizations
 */
export const mypy_boto3_organizations = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-organizations`,
  "Type annotations for boto3 organizations",
);

/**
 * Type annotations for boto3 osis
 */
export const mypy_boto3_osis = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-osis`,
  "Type annotations for boto3 osis",
);

/**
 * Type annotations for boto3 outposts
 */
export const mypy_boto3_outposts = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-outposts`,
  "Type annotations for boto3 outposts",
);

/**
 * Type annotations for boto3 panorama
 */
export const mypy_boto3_panorama = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-panorama`,
  "Type annotations for boto3 panorama",
);

/**
 * Type annotations for boto3 payment-cryptography
 */
export const mypy_boto3_payment_cryptography = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-payment-cryptography`,
  "Type annotations for boto3 payment-cryptography",
);

/**
 * Type annotations for boto3 payment-cryptography-data
 */
export const mypy_boto3_payment_cryptography_data = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-payment-cryptography-data`,
  "Type annotations for boto3 payment-cryptography-data",
);

/**
 * Type annotations for boto3 pca-connector-ad
 */
export const mypy_boto3_pca_connector_ad = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-pca-connector-ad`,
  "Type annotations for boto3 pca-connector-ad",
);

/**
 * Type annotations for boto3 personalize
 */
export const mypy_boto3_personalize = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-personalize`,
  "Type annotations for boto3 personalize",
);

/**
 * Type annotations for boto3 personalize-events
 */
export const mypy_boto3_personalize_events = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-personalize-events`,
  "Type annotations for boto3 personalize-events",
);

/**
 * Type annotations for boto3 personalize-runtime
 */
export const mypy_boto3_personalize_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-personalize-runtime`,
  "Type annotations for boto3 personalize-runtime",
);

/**
 * Type annotations for boto3 pi
 */
export const mypy_boto3_pi = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-pi`,
  "Type annotations for boto3 pi",
);

/**
 * Type annotations for boto3 pinpoint
 */
export const mypy_boto3_pinpoint = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-pinpoint`,
  "Type annotations for boto3 pinpoint",
);

/**
 * Type annotations for boto3 pinpoint-email
 */
export const mypy_boto3_pinpoint_email = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-pinpoint-email`,
  "Type annotations for boto3 pinpoint-email",
);

/**
 * Type annotations for boto3 pinpoint-sms-voice
 */
export const mypy_boto3_pinpoint_sms_voice = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-pinpoint-sms-voice`,
  "Type annotations for boto3 pinpoint-sms-voice",
);

/**
 * Type annotations for boto3 pinpoint-sms-voice-v2
 */
export const mypy_boto3_pinpoint_sms_voice_v2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-pinpoint-sms-voice-v2`,
  "Type annotations for boto3 pinpoint-sms-voice-v2",
);

/**
 * Type annotations for boto3 pipes
 */
export const mypy_boto3_pipes = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-pipes`,
  "Type annotations for boto3 pipes",
);

/**
 * Type annotations for boto3 polly
 */
export const mypy_boto3_polly = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-polly`,
  "Type annotations for boto3 polly",
);

/**
 * Type annotations for boto3 pricing
 */
export const mypy_boto3_pricing = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-pricing`,
  "Type annotations for boto3 pricing",
);

/**
 * Type annotations for boto3 privatenetworks
 */
export const mypy_boto3_privatenetworks = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-privatenetworks`,
  "Type annotations for boto3 privatenetworks",
);

/**
 * Type annotations for boto3 proton
 */
export const mypy_boto3_proton = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-proton`,
  "Type annotations for boto3 proton",
);

/**
 * Type annotations for boto3 qldb
 */
export const mypy_boto3_qldb = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-qldb`,
  "Type annotations for boto3 qldb",
);

/**
 * Type annotations for boto3 qldb-session
 */
export const mypy_boto3_qldb_session = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-qldb-session`,
  "Type annotations for boto3 qldb-session",
);

/**
 * Type annotations for boto3 quicksight
 */
export const mypy_boto3_quicksight = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-quicksight`,
  "Type annotations for boto3 quicksight",
);

/**
 * Type annotations for boto3 ram
 */
export const mypy_boto3_ram = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ram`,
  "Type annotations for boto3 ram",
);

/**
 * Type annotations for boto3 rbin
 */
export const mypy_boto3_rbin = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-rbin`,
  "Type annotations for boto3 rbin",
);

/**
 * Type annotations for boto3 rds
 */
export const mypy_boto3_rds = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-rds`,
  "Type annotations for boto3 rds",
);

/**
 * Type annotations for boto3 rds-data
 */
export const mypy_boto3_rds_data = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-rds-data`,
  "Type annotations for boto3 rds-data",
);

/**
 * Type annotations for boto3 redshift
 */
export const mypy_boto3_redshift = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-redshift`,
  "Type annotations for boto3 redshift",
);

/**
 * Type annotations for boto3 redshift-data
 */
export const mypy_boto3_redshift_data = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-redshift-data`,
  "Type annotations for boto3 redshift-data",
);

/**
 * Type annotations for boto3 redshift-serverless
 */
export const mypy_boto3_redshift_serverless = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-redshift-serverless`,
  "Type annotations for boto3 redshift-serverless",
);

/**
 * Type annotations for boto3 rekognition
 */
export const mypy_boto3_rekognition = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-rekognition`,
  "Type annotations for boto3 rekognition",
);

/**
 * Type annotations for boto3 resiliencehub
 */
export const mypy_boto3_resiliencehub = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-resiliencehub`,
  "Type annotations for boto3 resiliencehub",
);

/**
 * Type annotations for boto3 resource-explorer-2
 */
export const mypy_boto3_resource_explorer_2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-resource-explorer-2`,
  "Type annotations for boto3 resource-explorer-2",
);

/**
 * Type annotations for boto3 resource-groups
 */
export const mypy_boto3_resource_groups = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-resource-groups`,
  "Type annotations for boto3 resource-groups",
);

/**
 * Type annotations for boto3 resourcegroupstaggingapi
 */
export const mypy_boto3_resourcegroupstaggingapi = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-resourcegroupstaggingapi`,
  "Type annotations for boto3 resourcegroupstaggingapi",
);

/**
 * Type annotations for boto3 robomaker
 */
export const mypy_boto3_robomaker = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-robomaker`,
  "Type annotations for boto3 robomaker",
);

/**
 * Type annotations for boto3 rolesanywhere
 */
export const mypy_boto3_rolesanywhere = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-rolesanywhere`,
  "Type annotations for boto3 rolesanywhere",
);

/**
 * Type annotations for boto3 route53
 */
export const mypy_boto3_route53 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-route53`,
  "Type annotations for boto3 route53",
);

/**
 * Type annotations for boto3 route53-recovery-cluster
 */
export const mypy_boto3_route53_recovery_cluster = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-route53-recovery-cluster`,
  "Type annotations for boto3 route53-recovery-cluster",
);

/**
 * Type annotations for boto3 route53-recovery-control-config
 */
export const mypy_boto3_route53_recovery_control_config = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-route53-recovery-control-config`,
  "Type annotations for boto3 route53-recovery-control-config",
);

/**
 * Type annotations for boto3 route53-recovery-readiness
 */
export const mypy_boto3_route53_recovery_readiness = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-route53-recovery-readiness`,
  "Type annotations for boto3 route53-recovery-readiness",
);

/**
 * Type annotations for boto3 route53domains
 */
export const mypy_boto3_route53domains = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-route53domains`,
  "Type annotations for boto3 route53domains",
);

/**
 * Type annotations for boto3 route53resolver
 */
export const mypy_boto3_route53resolver = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-route53resolver`,
  "Type annotations for boto3 route53resolver",
);

/**
 * Type annotations for boto3 rum
 */
export const mypy_boto3_rum = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-rum`,
  "Type annotations for boto3 rum",
);

/**
 * Type annotations for boto3 s3
 */
export const mypy_boto3_s3 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-s3`,
  "Type annotations for boto3 s3",
);

/**
 * Type annotations for boto3 s3control
 */
export const mypy_boto3_s3control = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-s3control`,
  "Type annotations for boto3 s3control",
);

/**
 * Type annotations for boto3 s3outposts
 */
export const mypy_boto3_s3outposts = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-s3outposts`,
  "Type annotations for boto3 s3outposts",
);

/**
 * Type annotations for boto3 sagemaker
 */
export const mypy_boto3_sagemaker = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sagemaker`,
  "Type annotations for boto3 sagemaker",
);

/**
 * Type annotations for boto3 sagemaker-a2i-runtime
 */
export const mypy_boto3_sagemaker_a2i_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sagemaker-a2i-runtime`,
  "Type annotations for boto3 sagemaker-a2i-runtime",
);

/**
 * Type annotations for boto3 sagemaker-edge
 */
export const mypy_boto3_sagemaker_edge = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sagemaker-edge`,
  "Type annotations for boto3 sagemaker-edge",
);

/**
 * Type annotations for boto3 sagemaker-featurestore-runtime
 */
export const mypy_boto3_sagemaker_featurestore_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sagemaker-featurestore-runtime`,
  "Type annotations for boto3 sagemaker-featurestore-runtime",
);

/**
 * Type annotations for boto3 sagemaker-geospatial
 */
export const mypy_boto3_sagemaker_geospatial = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sagemaker-geospatial`,
  "Type annotations for boto3 sagemaker-geospatial",
);

/**
 * Type annotations for boto3 sagemaker-metrics
 */
export const mypy_boto3_sagemaker_metrics = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sagemaker-metrics`,
  "Type annotations for boto3 sagemaker-metrics",
);

/**
 * Type annotations for boto3 sagemaker-runtime
 */
export const mypy_boto3_sagemaker_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sagemaker-runtime`,
  "Type annotations for boto3 sagemaker-runtime",
);

/**
 * Type annotations for boto3 savingsplans
 */
export const mypy_boto3_savingsplans = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-savingsplans`,
  "Type annotations for boto3 savingsplans",
);

/**
 * Type annotations for boto3 scheduler
 */
export const mypy_boto3_scheduler = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-scheduler`,
  "Type annotations for boto3 scheduler",
);

/**
 * Type annotations for boto3 schemas
 */
export const mypy_boto3_schemas = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-schemas`,
  "Type annotations for boto3 schemas",
);

/**
 * Type annotations for boto3 sdb
 */
export const mypy_boto3_sdb = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sdb`,
  "Type annotations for boto3 sdb",
);

/**
 * Type annotations for boto3 secretsmanager
 */
export const mypy_boto3_secretsmanager = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-secretsmanager`,
  "Type annotations for boto3 secretsmanager",
);

/**
 * Type annotations for boto3 securityhub
 */
export const mypy_boto3_securityhub = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-securityhub`,
  "Type annotations for boto3 securityhub",
);

/**
 * Type annotations for boto3 securitylake
 */
export const mypy_boto3_securitylake = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-securitylake`,
  "Type annotations for boto3 securitylake",
);

/**
 * Type annotations for boto3 serverlessrepo
 */
export const mypy_boto3_serverlessrepo = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-serverlessrepo`,
  "Type annotations for boto3 serverlessrepo",
);

/**
 * Type annotations for boto3 service-quotas
 */
export const mypy_boto3_service_quotas = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-service-quotas`,
  "Type annotations for boto3 service-quotas",
);

/**
 * Type annotations for boto3 servicecatalog
 */
export const mypy_boto3_servicecatalog = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-servicecatalog`,
  "Type annotations for boto3 servicecatalog",
);

/**
 * Type annotations for boto3 servicecatalog-appregistry
 */
export const mypy_boto3_servicecatalog_appregistry = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-servicecatalog-appregistry`,
  "Type annotations for boto3 servicecatalog-appregistry",
);

/**
 * Type annotations for boto3 servicediscovery
 */
export const mypy_boto3_servicediscovery = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-servicediscovery`,
  "Type annotations for boto3 servicediscovery",
);

/**
 * Type annotations for boto3 ses
 */
export const mypy_boto3_ses = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ses`,
  "Type annotations for boto3 ses",
);

/**
 * Type annotations for boto3 sesv2
 */
export const mypy_boto3_sesv2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sesv2`,
  "Type annotations for boto3 sesv2",
);

/**
 * Type annotations for boto3 shield
 */
export const mypy_boto3_shield = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-shield`,
  "Type annotations for boto3 shield",
);

/**
 * Type annotations for boto3 signer
 */
export const mypy_boto3_signer = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-signer`,
  "Type annotations for boto3 signer",
);

/**
 * Type annotations for boto3 simspaceweaver
 */
export const mypy_boto3_simspaceweaver = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-simspaceweaver`,
  "Type annotations for boto3 simspaceweaver",
);

/**
 * Type annotations for boto3 sms
 */
export const mypy_boto3_sms = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sms`,
  "Type annotations for boto3 sms",
);

/**
 * Type annotations for boto3 sms-voice
 */
export const mypy_boto3_sms_voice = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sms-voice`,
  "Type annotations for boto3 sms-voice",
);

/**
 * Type annotations for boto3 snow-device-management
 */
export const mypy_boto3_snow_device_management = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-snow-device-management`,
  "Type annotations for boto3 snow-device-management",
);

/**
 * Type annotations for boto3 snowball
 */
export const mypy_boto3_snowball = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-snowball`,
  "Type annotations for boto3 snowball",
);

/**
 * Type annotations for boto3 sns
 */
export const mypy_boto3_sns = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sns`,
  "Type annotations for boto3 sns",
);

/**
 * Type annotations for boto3 sqs
 */
export const mypy_boto3_sqs = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sqs`,
  "Type annotations for boto3 sqs",
);

/**
 * Type annotations for boto3 ssm
 */
export const mypy_boto3_ssm = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ssm`,
  "Type annotations for boto3 ssm",
);

/**
 * Type annotations for boto3 ssm-contacts
 */
export const mypy_boto3_ssm_contacts = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ssm-contacts`,
  "Type annotations for boto3 ssm-contacts",
);

/**
 * Type annotations for boto3 ssm-incidents
 */
export const mypy_boto3_ssm_incidents = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ssm-incidents`,
  "Type annotations for boto3 ssm-incidents",
);

/**
 * Type annotations for boto3 ssm-sap
 */
export const mypy_boto3_ssm_sap = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-ssm-sap`,
  "Type annotations for boto3 ssm-sap",
);

/**
 * Type annotations for boto3 sso
 */
export const mypy_boto3_sso = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sso`,
  "Type annotations for boto3 sso",
);

/**
 * Type annotations for boto3 sso-admin
 */
export const mypy_boto3_sso_admin = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sso-admin`,
  "Type annotations for boto3 sso-admin",
);

/**
 * Type annotations for boto3 sso-oidc
 */
export const mypy_boto3_sso_oidc = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sso-oidc`,
  "Type annotations for boto3 sso-oidc",
);

/**
 * Type annotations for boto3 stepfunctions
 */
export const mypy_boto3_stepfunctions = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-stepfunctions`,
  "Type annotations for boto3 stepfunctions",
);

/**
 * Type annotations for boto3 storagegateway
 */
export const mypy_boto3_storagegateway = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-storagegateway`,
  "Type annotations for boto3 storagegateway",
);

/**
 * Type annotations for boto3 sts
 */
export const mypy_boto3_sts = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-sts`,
  "Type annotations for boto3 sts",
);

/**
 * Type annotations for boto3 support
 */
export const mypy_boto3_support = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-support`,
  "Type annotations for boto3 support",
);

/**
 * Type annotations for boto3 support-app
 */
export const mypy_boto3_support_app = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-support-app`,
  "Type annotations for boto3 support-app",
);

/**
 * Type annotations for boto3 swf
 */
export const mypy_boto3_swf = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-swf`,
  "Type annotations for boto3 swf",
);

/**
 * Type annotations for boto3 synthetics
 */
export const mypy_boto3_synthetics = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-synthetics`,
  "Type annotations for boto3 synthetics",
);

/**
 * Type annotations for boto3 textract
 */
export const mypy_boto3_textract = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-textract`,
  "Type annotations for boto3 textract",
);

/**
 * Type annotations for boto3 timestream-query
 */
export const mypy_boto3_timestream_query = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-timestream-query`,
  "Type annotations for boto3 timestream-query",
);

/**
 * Type annotations for boto3 timestream-write
 */
export const mypy_boto3_timestream_write = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-timestream-write`,
  "Type annotations for boto3 timestream-write",
);

/**
 * Type annotations for boto3 tnb
 */
export const mypy_boto3_tnb = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-tnb`,
  "Type annotations for boto3 tnb",
);

/**
 * Type annotations for boto3 transcribe
 */
export const mypy_boto3_transcribe = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-transcribe`,
  "Type annotations for boto3 transcribe",
);

/**
 * Type annotations for boto3 transfer
 */
export const mypy_boto3_transfer = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-transfer`,
  "Type annotations for boto3 transfer",
);

/**
 * Type annotations for boto3 translate
 */
export const mypy_boto3_translate = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-translate`,
  "Type annotations for boto3 translate",
);

/**
 * Type annotations for boto3 verifiedpermissions
 */
export const mypy_boto3_verifiedpermissions = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-verifiedpermissions`,
  "Type annotations for boto3 verifiedpermissions",
);

/**
 * Type annotations for boto3 voice-id
 */
export const mypy_boto3_voice_id = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-voice-id`,
  "Type annotations for boto3 voice-id",
);

/**
 * Type annotations for boto3 vpc-lattice
 */
export const mypy_boto3_vpc_lattice = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-vpc-lattice`,
  "Type annotations for boto3 vpc-lattice",
);

/**
 * Type annotations for boto3 waf
 */
export const mypy_boto3_waf = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-waf`,
  "Type annotations for boto3 waf",
);

/**
 * Type annotations for boto3 waf-regional
 */
export const mypy_boto3_waf_regional = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-waf-regional`,
  "Type annotations for boto3 waf-regional",
);

/**
 * Type annotations for boto3 wafv2
 */
export const mypy_boto3_wafv2 = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-wafv2`,
  "Type annotations for boto3 wafv2",
);

/**
 * Type annotations for boto3 wellarchitected
 */
export const mypy_boto3_wellarchitected = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-wellarchitected`,
  "Type annotations for boto3 wellarchitected",
);

/**
 * Type annotations for boto3 wisdom
 */
export const mypy_boto3_wisdom = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-wisdom`,
  "Type annotations for boto3 wisdom",
);

/**
 * Type annotations for boto3 workdocs
 */
export const mypy_boto3_workdocs = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-workdocs`,
  "Type annotations for boto3 workdocs",
);

/**
 * Type annotations for boto3 worklink
 */
export const mypy_boto3_worklink = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-worklink`,
  "Type annotations for boto3 worklink",
);

/**
 * Type annotations for boto3 workmail
 */
export const mypy_boto3_workmail = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-workmail`,
  "Type annotations for boto3 workmail",
);

/**
 * Type annotations for boto3 workmailmessageflow
 */
export const mypy_boto3_workmailmessageflow = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-workmailmessageflow`,
  "Type annotations for boto3 workmailmessageflow",
);

/**
 * Type annotations for boto3 workspaces
 */
export const mypy_boto3_workspaces = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-workspaces`,
  "Type annotations for boto3 workspaces",
);

/**
 * Type annotations for boto3 workspaces-web
 */
export const mypy_boto3_workspaces_web = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-workspaces-web`,
  "Type annotations for boto3 workspaces-web",
);

/**
 * Type annotations for boto3 xray
 */
export const mypy_boto3_xray = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-boto3-xray`,
  "Type annotations for boto3 xray",
);

/**
 * Experimental type system extensions for programs checked with the mypy typechecker
 */
export const mypy_extensions = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-extensions`,
  "Experimental type system extensions for programs checked with the mypy typechecker",
);

/**
 * Generate mypy stub files from protobuf specs
 */
export const mypy_protobuf = mkPackage(
  nixRaw`pkgs.python2Packages.mypy-protobuf`,
  "Generate mypy stub files from protobuf specs",
);

/**
 * A MySQL driver
 */
export const mysql_connector = mkPackage(
  nixRaw`pkgs.python2Packages.mysql-connector`,
  "A MySQL driver",
);

/**
 * Python interface to MySQL
 */
export const mysqlclient = mkPackage(
  nixRaw`pkgs.python2Packages.mysqlclient`,
  "Python interface to MySQL",
);

/**
 * A Jupyter Notebook Sphinx reader built on top of the MyST markdown parser
 */
export const myst_nb = mkPackage(
  nixRaw`pkgs.python2Packages.myst-nb`,
  "A Jupyter Notebook Sphinx reader built on top of the MyST markdown parser",
);

/**
 * Sphinx and Docutils extension to parse MyST
 */
export const myst_parser = mkPackage(
  nixRaw`pkgs.python2Packages.myst-parser`,
  "Sphinx and Docutils extension to parse MyST",
);

/**
 * NNPDF fitting framework
 */
export const n3fit = mkPackage(
  nixRaw`pkgs.python2Packages.n3fit`,
  "NNPDF fitting framework",
);

/**
 * Python interface for NAD receivers
 */
export const nad_receiver = mkPackage(
  nixRaw`pkgs.python2Packages.nad-receiver`,
  "Python interface for NAD receivers",
);

/**
 * Python class library which helps with writing Nagios (Icinga) compatible plugins
 */
export const nagiosplugin = mkPackage(
  nixRaw`pkgs.python2Packages.nagiosplugin`,
  "Python class library which helps with writing Nagios (Icinga) compatible plugins",
);

/**
 * Module and CLI for the identification of hashes
 */
export const name_that_hash = mkPackage(
  nixRaw`pkgs.python2Packages.name-that-hash`,
  "Module and CLI for the identification of hashes",
);

/**
 * Similar to namedtuple, but instances are mutable
 */
export const namedlist = mkPackage(
  nixRaw`pkgs.python2Packages.namedlist`,
  "Similar to namedtuple, but instances are mutable",
);

/**
 * Module for parsing human names into their individual components
 */
export const nameparser = mkPackage(
  nixRaw`pkgs.python2Packages.nameparser`,
  "Module for parsing human names into their individual components",
);

/**
 * Generate random names
 */
export const names = mkPackage(
  nixRaw`pkgs.python2Packages.names`,
  "Generate random names",
);

/**
 * Python implementation of the FLIRT technology
 */
export const nampa = mkPackage(
  nixRaw`pkgs.python2Packages.nampa`,
  "Python implementation of the FLIRT technology",
);

/**
 * A tiny, secure, URL-friendly, unique string ID generator for Python
 */
export const nanoid = mkPackage(
  nixRaw`pkgs.python2Packages.nanoid`,
  "A tiny, secure, URL-friendly, unique string ID generator for Python",
);

/**
 * A python interface for Nanoleaf Aurora lighting
 */
export const nanoleaf = mkPackage(
  nixRaw`pkgs.python2Packages.nanoleaf`,
  "A python interface for Nanoleaf Aurora lighting",
);

/**
 * Bindings for nanomsg
 */
export const nanomsg_python = mkPackage(
  nixRaw`pkgs.python2Packages.nanomsg-python`,
  "Bindings for nanomsg",
);

/**
 * Provides a time object that keeps time as the number of nanoseconds since the UNIX epoch
 */
export const nanotime = mkPackage(
  nixRaw`pkgs.python2Packages.nanotime`,
  "Provides a time object that keeps time as the number of nanoseconds since the UNIX epoch",
);

/**
 * Network Automation and Programmability Abstraction Layer with Multivendor support
 */
export const napalm = mkPackage(
  nixRaw`pkgs.python2Packages.napalm`,
  "Network Automation and Programmability Abstraction Layer with Multivendor support",
);

/**
 * HP ProCurve Driver for NAPALM automation frontend
 */
export const napalm_hp_procurve = mkPackage(
  nixRaw`pkgs.python2Packages.napalm-hp-procurve`,
  "HP ProCurve Driver for NAPALM automation frontend",
);

/**
 * A fast, interactive, multi-dimensional image viewer
 */
export const napari = mkPackage(
  nixRaw`pkgs.python2Packages.napari`,
  "A fast, interactive, multi-dimensional image viewer",
);

/**
 * A plugin that adds a console to napari
 */
export const napari_console = mkPackage(
  nixRaw`pkgs.python2Packages.napari-console`,
  "A plugin that adds a console to napari",
);

/**
 * Plugin system for napari (the image visualizer)
 */
export const napari_npe2 = mkPackage(
  nixRaw`pkgs.python2Packages.napari-npe2`,
  "Plugin system for napari (the image visualizer)",
);

/**
 * First generation napari plugin engine
 */
export const napari_plugin_engine = mkPackage(
  nixRaw`pkgs.python2Packages.napari-plugin-engine`,
  "First generation napari plugin engine",
);

/**
 * A plugin for writing svg files from napari
 */
export const napari_svg = mkPackage(
  nixRaw`pkgs.python2Packages.napari-svg`,
  "A plugin for writing svg files from napari",
);

/**
 * Library for Nasdaq Data Link's RESTful API
 */
export const nasdaq_data_link = mkPackage(
  nixRaw`pkgs.python2Packages.nasdaq-data-link`,
  "Library for Nasdaq Data Link's RESTful API",
);

/**
 * NLP framework for Russian language
 */
export const natasha = mkPackage(
  nixRaw`pkgs.python2Packages.natasha`,
  "NLP framework for Russian language",
);

/**
 * Python client for NATS.io
 */
export const nats_py = mkPackage(
  nixRaw`pkgs.python2Packages.nats-py`,
  "Python client for NATS.io",
);

/**
 * Python client for NATS messaging system
 */
export const nats_python = mkPackage(
  nixRaw`pkgs.python2Packages.nats-python`,
  "Python client for NATS messaging system",
);

/**
 * Natural sorting for Python
 */
export const natsort = mkPackage(
  nixRaw`pkgs.python2Packages.natsort`,
  "Natural sorting for Python",
);

/**
 * Simple natural order sorting API for Python that just works
 */
export const naturalsort = mkPackage(
  nixRaw`pkgs.python2Packages.naturalsort`,
  "Simple natural order sorting API for Python that just works",
);

/**
 * Compact high quality word embeddings for Russian language
 */
export const navec = mkPackage(
  nixRaw`pkgs.python2Packages.navec`,
  "Compact high quality word embeddings for Russian language",
);

/**
 * Jupyter lab environment notebook server extension
 */
export const nbclassic = mkPackage(
  nixRaw`pkgs.python2Packages.nbclassic`,
  "Jupyter lab environment notebook server extension",
);

/**
 * A client library for executing notebooks
 */
export const nbclient = mkPackage(
  nixRaw`pkgs.python2Packages.nbclient`,
  "A client library for executing notebooks",
);

/**
 * Converts Jupyter Notebooks to Atlassian Confluence (R) pages using nbconvert
 */
export const nbconflux = mkPackage(
  nixRaw`pkgs.python2Packages.nbconflux`,
  "Converts Jupyter Notebooks to Atlassian Confluence (R) pages using nbconvert",
);

/**
 * Converting Jupyter Notebooks
 */
export const nbconvert = mkPackage(
  nixRaw`pkgs.python2Packages.nbconvert`,
  "Converting Jupyter Notebooks",
);

/**
 * Create delightful software with Jupyter Notebooks
 */
export const nbdev = mkPackage(
  nixRaw`pkgs.python2Packages.nbdev`,
  "Create delightful software with Jupyter Notebooks",
);

/**
 * Tools for diffing and merging of Jupyter notebooks.
 */
export const nbdime = mkPackage(
  nixRaw`pkgs.python2Packages.nbdime`,
  "Tools for diffing and merging of Jupyter notebooks.",
);

/**
 * A dead-simple tool for executing Jupyter notebooks from the command line.
 */
export const nbexec = mkPackage(
  nixRaw`pkgs.python2Packages.nbexec`,
  "A dead-simple tool for executing Jupyter notebooks from the command line.",
);

/**
 * The Jupyter Notebook format
 */
export const nbformat = mkPackage(
  nixRaw`pkgs.python2Packages.nbformat`,
  "The Jupyter Notebook format",
);

/**
 * A tool to merge/concatenate Jupyter (IPython) notebooks
 */
export const nbmerge = mkPackage(
  nixRaw`pkgs.python2Packages.nbmerge`,
  "A tool to merge/concatenate Jupyter (IPython) notebooks",
);

/**
 * Basic notebook checks and linting
 */
export const nbsmoke = mkPackage(
  nixRaw`pkgs.python2Packages.nbsmoke`,
  "Basic notebook checks and linting",
);

/**
 * Jupyter Notebook Tools for Sphinx
 */
export const nbsphinx = mkPackage(
  nixRaw`pkgs.python2Packages.nbsphinx`,
  "Jupyter Notebook Tools for Sphinx",
);

/**
 * A python library to read and edit nbt data
 */
export const nbtlib = mkPackage(
  nixRaw`pkgs.python2Packages.nbtlib`,
  "A python library to read and edit nbt data",
);

/**
 * A py.test plugin to validate Jupyter notebooks
 */
export const nbval = mkPackage(
  nixRaw`pkgs.python2Packages.nbval`,
  "A py.test plugin to validate Jupyter notebooks",
);

/**
 * Non-blocking Jabber/XMPP module
 */
export const nbxmpp = mkPackage(
  nixRaw`pkgs.python2Packages.nbxmpp`,
  "Non-blocking Jabber/XMPP module",
);

/**
 * API wrapper for the netcup DNS api
 */
export const nc_dnsapi = mkPackage(
  nixRaw`pkgs.python2Packages.nc-dnsapi`,
  "API wrapper for the netcup DNS api",
);

/**
 * Python library for NETCONF clients
 */
export const ncclient = mkPackage(
  nixRaw`pkgs.python2Packages.ncclient`,
  "Python library for NETCONF clients",
);

/**
 * Python module that provides netcat features
 */
export const nclib = mkPackage(
  nixRaw`pkgs.python2Packages.nclib`,
  "Python module that provides netcat features",
);

/**
 * Python package for parsing and generating NFC Data Exchange Format messages
 */
export const ndeflib = mkPackage(
  nixRaw`pkgs.python2Packages.ndeflib`,
  "Python package for parsing and generating NFC Data Exchange Format messages",
);

/**
 * Provide enhanced HTTPS support for httplib and urllib2 using PyOpenSSL
 */
export const ndg_httpsclient = mkPackage(
  nixRaw`pkgs.python2Packages.ndg-httpsclient`,
  "Provide enhanced HTTPS support for httplib and urllib2 using PyOpenSSL",
);

/**
 * 
 */
export const ndindex = mkPackage(
  nixRaw`pkgs.python2Packages.ndindex`,
  "",
);

/**
 * Module supports ndjson
 */
export const ndjson = mkPackage(
  nixRaw`pkgs.python2Packages.ndjson`,
  "Module supports ndjson",
);

/**
 * Keenetic NDMS 2.x and 3.x client
 */
export const ndms2_client = mkPackage(
  nixRaw`pkgs.python2Packages.ndms2-client`,
  "Keenetic NDMS 2.x and 3.x client",
);

/**
 * Python library for many Nintendo DS file formats
 */
export const ndspy = mkPackage(
  nixRaw`pkgs.python2Packages.ndspy`,
  "Python library for many Nintendo DS file formats",
);

/**
 * Dynamic types for data description and in-memory computations
 */
export const ndtypes = mkPackage(
  nixRaw`pkgs.python2Packages.ndtypes`,
  "Dynamic types for data description and in-memory computations",
);

/**
 * A Python library for creating and simulating large-scale brain models
 */
export const nengo = mkPackage(
  nixRaw`pkgs.python2Packages.nengo`,
  "A Python library for creating and simulating large-scale brain models",
);

/**
 * Package for representing electrophysiology data
 */
export const neo = mkPackage(
  nixRaw`pkgs.python2Packages.neo`,
  "Package for representing electrophysiology data",
);

/**
 * Neo4j Bolt Driver for Python
 */
export const neo4j = mkPackage(
  nixRaw`pkgs.python2Packages.neo4j`,
  "Neo4j Bolt Driver for Python",
);

/**
 * Python implementation/abstraction of the Ness D8x/D16x Serial Interface ASCII protocol
 */
export const nessclient = mkPackage(
  nixRaw`pkgs.python2Packages.nessclient`,
  "Python implementation/abstraction of the Ness D8x/D16x Serial Interface ASCII protocol",
);

/**
 * NEST is a command line tool for simulating neural networks
 */
export const nest = mkPackage(
  nixRaw`pkgs.python2Packages.nest`,
  "NEST is a command line tool for simulating neural networks",
);

/**
 * Patch asyncio to allow nested event loops
 */
export const nest_asyncio = mkPackage(
  nixRaw`pkgs.python2Packages.nest-asyncio`,
  "Patch asyncio to allow nested event loops",
);

/**
 * Python functions for working with deeply nested documents (lists and dicts)
 */
export const nested_lookup = mkPackage(
  nixRaw`pkgs.python2Packages.nested-lookup`,
  "Python functions for working with deeply nested documents (lists and dicts)",
);

/**
 * A human friendly data format
 */
export const nestedtext = mkPackage(
  nixRaw`pkgs.python2Packages.nestedtext`,
  "A human friendly data format",
);

/**
 * A network address manipulation library for Python
 */
export const netaddr = mkPackage(
  nixRaw`pkgs.python2Packages.netaddr`,
  "A network address manipulation library for Python",
);

/**
 * netapp-lib is required for Ansible deployments to interact with NetApp storage systems
 */
export const netapp_lib = mkPackage(
  nixRaw`pkgs.python2Packages.netapp-lib`,
  "netapp-lib is required for Ansible deployments to interact with NetApp storage systems",
);

/**
 * A library for working with ONTAP's REST APIs simply in Python
 */
export const netapp_ontap = mkPackage(
  nixRaw`pkgs.python2Packages.netapp-ontap`,
  "A library for working with ONTAP's REST APIs simply in Python",
);

/**
 * Interface to netCDF library (versions 3 and 4)
 */
export const netcdf4 = mkPackage(
  nixRaw`pkgs.python2Packages.netcdf4`,
  "Interface to netCDF library (versions 3 and 4)",
);

/**
 * Python API for interacting with Netdata
 */
export const netdata = mkPackage(
  nixRaw`pkgs.python2Packages.netdata`,
  "Python API for interacting with Netdata",
);

/**
 * Python library to scan local network for services and devices
 */
export const netdisco = mkPackage(
  nixRaw`pkgs.python2Packages.netdisco`,
  "Python library to scan local network for services and devices",
);

/**
 * Portable access to network interfaces from Python
 */
export const netifaces = mkPackage(
  nixRaw`pkgs.python2Packages.netifaces`,
  "Portable access to network interfaces from Python",
);

/**
 * Module for interacting with NETIO devices
 */
export const netio = mkPackage(
  nixRaw`pkgs.python2Packages.netio`,
  "Module for interacting with NETIO devices",
);

/**
 * Python class to use nmap and access scan results from python3
 */
export const netmap = mkPackage(
  nixRaw`pkgs.python2Packages.netmap`,
  "Python class to use nmap and access scan results from python3",
);

/**
 * Multi-vendor library to simplify Paramiko SSH connections to network devices
 */
export const netmiko = mkPackage(
  nixRaw`pkgs.python2Packages.netmiko`,
  "Multi-vendor library to simplify Paramiko SSH connections to network devices",
);

/**
 * Python module to get air quality data from Nettigo Air Monitor devices
 */
export const nettigo_air_monitor = mkPackage(
  nixRaw`pkgs.python2Packages.nettigo-air-monitor`,
  "Python module to get air quality data from Nettigo Air Monitor devices",
);

/**
 * Library that is a collection of objects for common network automation tasks
 */
export const netutils = mkPackage(
  nixRaw`pkgs.python2Packages.netutils`,
  "Library that is a collection of objects for common network automation tasks",
);

/**
 * Library for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks
 */
export const networkx = mkPackage(
  nixRaw`pkgs.python2Packages.networkx`,
  "Library for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks",
);

/**
 * Simulation environment for empirically-based simulations of neurons and networks of neurons
 */
export const neuron_full = mkPackage(
  nixRaw`pkgs.python2Packages.neuron-full`,
  "Simulation environment for empirically-based simulations of neurons and networks of neurons",
);

/**
 * Simulation environment for empirically-based simulations of neurons and networks of neurons
 */
export const neuronpy = mkPackage(
  nixRaw`pkgs.python2Packages.neuronpy`,
  "Simulation environment for empirically-based simulations of neurons and networks of neurons",
);

/**
 * Nevow, a web application construction kit for Python
 */
export const nevow = mkPackage(
  nixRaw`pkgs.python2Packages.nevow`,
  "Nevow, a web application construction kit for Python",
);

/**
 * A python package to read and write the Newick format
 */
export const newick = mkPackage(
  nixRaw`pkgs.python2Packages.newick`,
  "A python package to read and write the Newick format",
);

/**
 * PEP 440 version manager
 */
export const newversion = mkPackage(
  nixRaw`pkgs.python2Packages.newversion`,
  "PEP 440 version manager",
);

/**
 * Python module for Nexia thermostats
 */
export const nexia = mkPackage(
  nixRaw`pkgs.python2Packages.nexia`,
  "Python module for Nexia thermostats",
);

/**
 * Python wrapper around nextcloud monitor api
 */
export const nextcloudmonitor = mkPackage(
  nixRaw`pkgs.python2Packages.nextcloudmonitor`,
  "Python wrapper around nextcloud monitor api",
);

/**
 * Python wrapper for the Discord API forked from discord.py
 */
export const nextcord = mkPackage(
  nixRaw`pkgs.python2Packages.nextcord`,
  "Python wrapper for the Discord API forked from discord.py",
);

/**
 * Module for the NextDNS API
 */
export const nextdns = mkPackage(
  nixRaw`pkgs.python2Packages.nextdns`,
  "Module for the NextDNS API",
);

/**
 * A Python module to read/write NFC tags or communicate with another NFC device
 */
export const nfcpy = mkPackage(
  nixRaw`pkgs.python2Packages.nfcpy`,
  "A Python module to read/write NFC tags or communicate with another NFC device",
);

/**
 * The project that aims to replace the existing {ip,ip6,arp,eb}tables framework
 */
export const nftables = mkPackage(
  nixRaw`pkgs.python2Packages.nftables`,
  "The project that aims to replace the existing {ip,ip6,arp,eb}tables framework",
);

/**
 * Python binding to Ammonia HTML sanitizer Rust crate
 */
export const nh3 = mkPackage(
  nixRaw`pkgs.python2Packages.nh3`,
  "Python binding to Ammonia HTML sanitizer Rust crate",
);

/**
 * Python automated machine learning framework
 */
export const niaaml = mkPackage(
  nixRaw`pkgs.python2Packages.niaaml`,
  "Python automated machine learning framework",
);

/**
 * A minimalistic framework for Numerical Association Rule Mining
 */
export const niaarm = mkPackage(
  nixRaw`pkgs.python2Packages.niaarm`,
  "A minimalistic framework for Numerical Association Rule Mining",
);

/**
 * A framework for solving classification tasks using Nature-inspired algorithms
 */
export const niaclass = mkPackage(
  nixRaw`pkgs.python2Packages.niaclass`,
  "A framework for solving classification tasks using Nature-inspired algorithms",
);

/**
 * Designing and constructing neural network topologies using nature-inspired algorithms
 */
export const nianet = mkPackage(
  nixRaw`pkgs.python2Packages.nianet`,
  "Designing and constructing neural network topologies using nature-inspired algorithms",
);

/**
 * Micro framework for building nature-inspired algorithms
 */
export const niapy = mkPackage(
  nixRaw`pkgs.python2Packages.niapy`,
  "Micro framework for building nature-inspired algorithms",
);

/**
 * Access a multitude of neuroimaging data formats
 */
export const nibabel = mkPackage(
  nixRaw`pkgs.python2Packages.nibabel`,
  "Access a multitude of neuroimaging data formats",
);

/**
 * Library for the communication with Nibe heatpumps
 */
export const nibe = mkPackage(
  nixRaw`pkgs.python2Packages.nibe`,
  "Library for the communication with Nibe heatpumps",
);

/**
 * API for interacting with the NI-DAQmx driver
 */
export const nidaqmx = mkPackage(
  nixRaw`pkgs.python2Packages.nidaqmx`,
  "API for interacting with the NI-DAQmx driver",
);

/**
 * Python SDK for Niko Home Control
 */
export const niko_home_control = mkPackage(
  nixRaw`pkgs.python2Packages.niko-home-control`,
  "Python SDK for Niko Home Control",
);

/**
 * Static website and blog generator
 */
export const nikola = mkPackage(
  nixRaw`pkgs.python2Packages.nikola`,
  "Static website and blog generator",
);

/**
 * A module for statistical learning on neuroimaging data
 */
export const nilearn = mkPackage(
  nixRaw`pkgs.python2Packages.nilearn`,
  "A module for statistical learning on neuroimaging data",
);

/**
 * Python client for getting air pollution data from NILU sensor stations
 */
export const niluclient = mkPackage(
  nixRaw`pkgs.python2Packages.niluclient`,
  "Python client for getting air pollution data from NILU sensor stations",
);

/**
 * Nonnegative matrix factorization library
 */
export const nimfa = mkPackage(
  nixRaw`pkgs.python2Packages.nimfa`,
  "Nonnegative matrix factorization library",
);

/**
 * Let's write Python 3 right now!
 */
export const nine = mkPackage(
  nixRaw`pkgs.python2Packages.nine`,
  "Let's write Python 3 right now!",
);

/**
 * Small build system with a focus on speed
 */
export const ninja = mkPackage(
  nixRaw`pkgs.python2Packages.ninja`,
  "Small build system with a focus on speed",
);

/**
 * Software for structural and functional neuroimaging analysis
 */
export const nipy = mkPackage(
  nixRaw`pkgs.python2Packages.nipy`,
  "Software for structural and functional neuroimaging analysis",
);

/**
 * Neuroimaging in Python: Pipelines and Interfaces
 */
export const nipype = mkPackage(
  nixRaw`pkgs.python2Packages.nipype`,
  "Neuroimaging in Python: Pipelines and Interfaces",
);

/**
 * Algorithms and containers for time-series analysis in time and spectral domains
 */
export const nitime = mkPackage(
  nixRaw`pkgs.python2Packages.nitime`,
  "Algorithms and containers for time-series analysis in time and spectral domains",
);

/**
 * A distributed issue tracker
 */
export const nitpick = mkPackage(
  nixRaw`pkgs.python2Packages.nitpick`,
  "A distributed issue tracker",
);

/**
 * Geometric transformations for images and surfaces
 */
export const nitransforms = mkPackage(
  nixRaw`pkgs.python2Packages.nitransforms`,
  "Geometric transformations for images and surfaces",
);

/**
 * Simple jupyter kernel for nix-repl
 */
export const nix_kernel = mkPackage(
  nixRaw`pkgs.python2Packages.nix-kernel`,
  "Simple jupyter kernel for nix-repl",
);

/**
 * Prefetch sources from github
 */
export const nix_prefetch_github = mkPackage(
  nixRaw`pkgs.python2Packages.nix-prefetch-github`,
  "Prefetch sources from github",
);

/**
 * Allows to `from nixpkgs import` stuff in interactive Python sessions
 */
export const nixpkgs = mkPackage(
  nixRaw`pkgs.python2Packages.nixpkgs`,
  "Allows to `from nixpkgs import` stuff in interactive Python sessions",
);

/**
 * Tools for removing the tedious nature of creating nixpkgs derivations
 */
export const nixpkgs_pytools = mkPackage(
  nixRaw`pkgs.python2Packages.nixpkgs-pytools`,
  "Tools for removing the tedious nature of creating nixpkgs derivations",
);

/**
 * Python tool for Nitrokeys' firmware update
 */
export const nkdfu = mkPackage(
  nixRaw`pkgs.python2Packages.nkdfu`,
  "Python tool for Nitrokeys' firmware update",
);

/**
 * Python client for the NLP Cloud API
 */
export const nlpcloud = mkPackage(
  nixRaw`pkgs.python2Packages.nlpcloud`,
  "Python client for the NLP Cloud API",
);

/**
 * Natural Language Processing ToolKit
 */
export const nltk = mkPackage(
  nixRaw`pkgs.python2Packages.nltk`,
  "Natural Language Processing ToolKit",
);

/**
 * Python library to automate nmap
 */
export const nmapthon2 = mkPackage(
  nixRaw`pkgs.python2Packages.nmapthon2`,
  "Python library to automate nmap",
);

/**
 * An open-source machine learning framework for global analyses of parton distributions
 */
export const nnpdf = mkPackage(
  nixRaw`pkgs.python2Packages.nnpdf`,
  "An open-source machine learning framework for global analyses of parton distributions",
);

/**
 * A case-insensitive ordered dictionary for Python
 */
export const nocasedict = mkPackage(
  nixRaw`pkgs.python2Packages.nocasedict`,
  "A case-insensitive ordered dictionary for Python",
);

/**
 * A case-insensitive list for Python
 */
export const nocaselist = mkPackage(
  nixRaw`pkgs.python2Packages.nocaselist`,
  "A case-insensitive list for Python",
);

/**
 * A data-driven, fast driving simulator for multi-agent coordination under partial observability
 */
export const nocturne = mkPackage(
  nixRaw`pkgs.python2Packages.nocturne`,
  "A data-driven, fast driving simulator for multi-agent coordination under partial observability",
);

/**
 * A port of node-semver
 */
export const node_semver = mkPackage(
  nixRaw`pkgs.python2Packages.node-semver`,
  "A port of node-semver",
);

/**
 * Node.js virtual environment builder
 */
export const nodeenv = mkPackage(
  nixRaw`pkgs.python2Packages.nodeenv`,
  "Node.js virtual environment builder",
);

/**
 * Runtime for Python inspired by Node.JS
 */
export const nodepy_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.nodepy-runtime`,
  "Runtime for Python inspired by Node.JS",
);

/**
 * Native-code and shader implementations of Perlin noise
 */
export const noise = mkPackage(
  nixRaw`pkgs.python2Packages.noise`,
  "Native-code and shader implementations of Perlin noise",
);

/**
 * Noise Protocol Framework
 */
export const noiseprotocol = mkPackage(
  nixRaw`pkgs.python2Packages.noiseprotocol`,
  "Noise Protocol Framework",
);

/**
 * Off-grid, resilient mesh communication
 */
export const nomadnet = mkPackage(
  nixRaw`pkgs.python2Packages.nomadnet`,
  "Off-grid, resilient mesh communication",
);

/**
 * Micro-library to normalize text strings
 */
export const normality = mkPackage(
  nixRaw`pkgs.python2Packages.normality`,
  "Micro-library to normalize text strings",
);

/**
 * Test runner for Python
 */
export const nose2 = mkPackage(
  nixRaw`pkgs.python2Packages.nose2`,
  "Test runner for Python",
);

/**
 * Fork of nose v1 not using lib2to3 for compatibility with Python 3
 */
export const nose3 = mkPackage(
  nixRaw`pkgs.python2Packages.nose3`,
  "Fork of nose v1 not using lib2to3 for compatibility with Python 3",
);

/**
 * This plugin produces coverage reports. It also supports coverage of subprocesses.
 */
export const nose_cov = mkPackage(
  nixRaw`pkgs.python2Packages.nose-cov`,
  "This plugin produces coverage reports. It also supports coverage of subprocesses.",
);

/**
 * A python nose plugin to profile using cProfile rather than the default Hotshot profiler
 */
export const nose_cprof = mkPackage(
  nixRaw`pkgs.python2Packages.nose-cprof`,
  "A python nose plugin to profile using cProfile rather than the default Hotshot profiler",
);

/**
 * Exclude specific directories from nosetests runs
 */
export const nose_exclude = mkPackage(
  nixRaw`pkgs.python2Packages.nose-exclude`,
  "Exclude specific directories from nosetests runs",
);

/**
 * Exclude specific files and directories from nosetests runs
 */
export const nose_pattern_exclude = mkPackage(
  nixRaw`pkgs.python2Packages.nose-pattern-exclude`,
  "Exclude specific files and directories from nosetests runs",
);

/**
 * Nose plugin to randomly order tests and control random.seed
 */
export const nose_randomly = mkPackage(
  nixRaw`pkgs.python2Packages.nose-randomly`,
  "Nose plugin to randomly order tests and control random.seed",
);

/**
 * A timer plugin for nosetests
 */
export const nose_timer = mkPackage(
  nixRaw`pkgs.python2Packages.nose-timer`,
  "A timer plugin for nosetests",
);

/**
 * Allow injecting warning filters during nosetest
 */
export const nose_warnings_filters = mkPackage(
  nixRaw`pkgs.python2Packages.nose_warnings_filters`,
  "Allow injecting warning filters during nosetest",
);

/**
 * A Nose plugin for integrating JavaScript tests into a Python test suite
 */
export const nosejs = mkPackage(
  nixRaw`pkgs.python2Packages.nosejs`,
  "A Nose plugin for integrating JavaScript tests into a Python test suite",
);

/**
 * Extends nose.plugins.cover to add Cobertura-style XML reports
 */
export const nosexcover = mkPackage(
  nixRaw`pkgs.python2Packages.nosexcover`,
  "Extends nose.plugins.cover to add Cobertura-style XML reports",
);

/**
 * Web-based notebook environment for interactive computing
 */
export const notebook = mkPackage(
  nixRaw`pkgs.python2Packages.notebook`,
  "Web-based notebook environment for interactive computing",
);

/**
 * Switch frontends to Jupyter Server
 */
export const notebook_shim = mkPackage(
  nixRaw`pkgs.python2Packages.notebook-shim`,
  "Switch frontends to Jupyter Server",
);

/**
 * Convert IPython Notebooks to markdown (and back)
 */
export const notedown = mkPackage(
  nixRaw`pkgs.python2Packages.notedown`,
  "Convert IPython Notebooks to markdown (and back)",
);

/**
 * Python API for sending notifications to Android/Fire TVs
 */
export const notifications_android_tv = mkPackage(
  nixRaw`pkgs.python2Packages.notifications-android-tv`,
  "Python API for sending notifications to Android/Fire TVs",
);

/**
 * Python client for the GOV.UK Notify API
 */
export const notifications_python_client = mkPackage(
  nixRaw`pkgs.python2Packages.notifications-python-client`,
  "Python client for the GOV.UK Notify API",
);

/**
 * Pure Python interface to DBus notifications
 */
export const notify2 = mkPackage(
  nixRaw`pkgs.python2Packages.notify2`,
  "Pure Python interface to DBus notifications",
);

/**
 * Python client for Notify.Events
 */
export const notify_events = mkPackage(
  nixRaw`pkgs.python2Packages.notify-events`,
  "Python client for Notify.Events",
);

/**
 * Cross-platform desktop notification library for Python
 */
export const notify_py = mkPackage(
  nixRaw`pkgs.python2Packages.notify-py`,
  "Cross-platform desktop notification library for Python",
);

/**
 * Python client for the official Notion API
 */
export const notion_client = mkPackage(
  nixRaw`pkgs.python2Packages.notion-client`,
  "Python client for the official Notion API",
);

/**
 * A Python wrapper around notmuch
 */
export const notmuch = mkPackage(
  nixRaw`pkgs.python2Packages.notmuch`,
  "A Python wrapper around notmuch",
);

/**
 * Pythonic bindings for the notmuch mail database using CFFI
 */
export const notmuch2 = mkPackage(
  nixRaw`pkgs.python2Packages.notmuch2`,
  "Pythonic bindings for the notmuch mail database using CFFI",
);

/**
 * Noto fonts support tools and scripts plus web site generation
 */
export const nototools = mkPackage(
  nixRaw`pkgs.python2Packages.nototools`,
  "Noto fonts support tools and scripts plus web site generation",
);

/**
 * Helper to create results from local security checks
 */
export const notus_scanner = mkPackage(
  nixRaw`pkgs.python2Packages.notus-scanner`,
  "Helper to create results from local security checks",
);

/**
 * Flexible test automation for Python
 */
export const nox = mkPackage(
  nixRaw`pkgs.python2Packages.nox`,
  "Flexible test automation for Python",
);

/**
 * Type hints for numpy
 */
export const nptyping = mkPackage(
  nixRaw`pkgs.python2Packages.nptyping`,
  "Type hints for numpy",
);

/**
 * Framework for developing console applications using Python and curses
 */
export const npyscreen = mkPackage(
  nixRaw`pkgs.python2Packages.npyscreen`,
  "Framework for developing console applications using Python and curses",
);

/**
 * Python module to query routes of the Dutch railways
 */
export const nsapi = mkPackage(
  nixRaw`pkgs.python2Packages.nsapi`,
  "Python module to query routes of the Dutch railways",
);

/**
 * Homebrew compatible NSP/XCI compressor/decompressor
 */
export const nsz = mkPackage(
  nixRaw`pkgs.python2Packages.nsz`,
  "Homebrew compatible NSP/XCI compressor/decompressor",
);

/**
 * TextFSM templates for parsing show commands of network devices
 */
export const ntc_templates = mkPackage(
  nixRaw`pkgs.python2Packages.ntc-templates`,
  "TextFSM templates for parsing show commands of network devices",
);

/**
 * Python NTP library
 */
export const ntplib = mkPackage(
  nixRaw`pkgs.python2Packages.ntplib`,
  "Python NTP library",
);

/**
 * Library to interact with NuHeat Signature and Mapei Mapeheat radiant floor thermostats
 */
export const nuheat = mkPackage(
  nixRaw`pkgs.python2Packages.nuheat`,
  "Library to interact with NuHeat Signature and Mapei Mapeheat radiant floor thermostats",
);

/**
 * Python compiler with full language support and CPython compatibility
 */
export const nuitka = mkPackage(
  nixRaw`pkgs.python2Packages.nuitka`,
  "Python compiler with full language support and CPython compatibility",
);

/**
 * Python library to handle Null values and sentinels like (but not) None, False and True
 */
export const nulltype = mkPackage(
  nixRaw`pkgs.python2Packages.nulltype`,
  "Python library to handle Null values and sentinels like (but not) None, False and True",
);

/**
 * Modules to convert numbers to words. 42 --> forty-two
 */
export const num2words = mkPackage(
  nixRaw`pkgs.python2Packages.num2words`,
  "Modules to convert numbers to words. 42 --> forty-two",
);

/**
 * Compiling Python code using LLVM
 */
export const numba = mkPackage(
  nixRaw`pkgs.python2Packages.numba`,
  "Compiling Python code using LLVM",
);

/**
 * Compiling Python code using LLVM
 */
export const numbaWithCuda = mkPackage(
  nixRaw`pkgs.python2Packages.numbaWithCuda`,
  "Compiling Python code using LLVM",
);

/**
 * Extends Numba to make it aware of SciPy
 */
export const numba_scipy = mkPackage(
  nixRaw`pkgs.python2Packages.numba-scipy`,
  "Extends Numba to make it aware of SciPy",
);

/**
 * Buffer compression and transformation codecs for use in data storage and communication applications
 */
export const numcodecs = mkPackage(
  nixRaw`pkgs.python2Packages.numcodecs`,
  "Buffer compression and transformation codecs for use in data storage and communication applications",
);

/**
 * Library to solve automatic numerical differentiation problems in one or more variables
 */
export const numdifftools = mkPackage(
  nixRaw`pkgs.python2Packages.numdifftools`,
  "Library to solve automatic numerical differentiation problems in one or more variables",
);

/**
 * A package that lets you define quantities with unit
 */
export const numericalunits = mkPackage(
  nixRaw`pkgs.python2Packages.numericalunits`,
  "A package that lets you define quantities with unit",
);

/**
 * Fast numerical array expression evaluator for NumPy
 */
export const numexpr = mkPackage(
  nixRaw`pkgs.python2Packages.numexpr`,
  "Fast numerical array expression evaluator for NumPy",
);

/**
 * Scientific tools for Python
 */
export const numpy = mkPackage(
  nixRaw`pkgs.python2Packages.numpy`,
  "Scientific tools for Python",
);

/**
 * Library to make reading, writing and modifying both binary and ascii STL files easy
 */
export const numpy_stl = mkPackage(
  nixRaw`pkgs.python2Packages.numpy-stl`,
  "Library to make reading, writing and modifying both binary and ascii STL files easy",
);

/**
 * Sphinx extension to support docstrings in Numpy format
 */
export const numpydoc = mkPackage(
  nixRaw`pkgs.python2Packages.numpydoc`,
  "Sphinx extension to support docstrings in Numpy format",
);

/**
 * Library for probabilistic programming with NumPy
 */
export const numpyro = mkPackage(
  nixRaw`pkgs.python2Packages.numpyro`,
  "Library for probabilistic programming with NumPy",
);

/**
 * A UAVCAN DSDL template engine
 */
export const nunavut = mkPackage(
  nixRaw`pkgs.python2Packages.nunavut`,
  "A UAVCAN DSDL template engine",
);

/**
 * Numerical Utilities for Finite Element Analysis
 */
export const nutils = mkPackage(
  nixRaw`pkgs.python2Packages.nutils`,
  "Numerical Utilities for Finite Element Analysis",
);

/**
 * New version checker for software
 */
export const nvchecker = mkPackage(
  nixRaw`pkgs.python2Packages.nvchecker`,
  "New version checker for software",
);

/**
 * Python Bindings for the NVIDIA Management Library
 */
export const nvidia_ml_py = mkPackage(
  nixRaw`pkgs.python2Packages.nvidia-ml-py`,
  "Python Bindings for the NVIDIA Management Library",
);

/**
 * Generate network-diagram image from spec-text file (similar to Graphviz)
 */
export const nwdiag = mkPackage(
  nixRaw`pkgs.python2Packages.nwdiag`,
  "Generate network-diagram image from spec-text file (similar to Graphviz)",
);

/**
 * Python driver/interface for Lego Mindstorms NXT robot
 */
export const nxt_python = mkPackage(
  nixRaw`pkgs.python2Packages.nxt-python`,
  "Python driver/interface for Lego Mindstorms NXT robot",
);

/**
 * Python wrapper for the OASA Telematics API
 */
export const oasatelematics = mkPackage(
  nixRaw`pkgs.python2Packages.oasatelematics`,
  "Python wrapper for the OASA Telematics API",
);

/**
 * Python implementation of the three main OATH specifications: HOTP, TOTP and OCRA
 */
export const oath = mkPackage(
  nixRaw`pkgs.python2Packages.oath`,
  "Python implementation of the three main OATH specifications: HOTP, TOTP and OCRA",
);

/**
 * Library for OAuth version 1.0a
 */
export const oauth = mkPackage(
  nixRaw`pkgs.python2Packages.oauth`,
  "Library for OAuth version 1.0a",
);

/**
 * Library for OAuth version 1.0
 */
export const oauth2 = mkPackage(
  nixRaw`pkgs.python2Packages.oauth2`,
  "Library for OAuth version 1.0",
);

/**
 * A client library for OAuth 2.0
 */
export const oauth2client = mkPackage(
  nixRaw`pkgs.python2Packages.oauth2client`,
  "A client library for OAuth 2.0",
);

/**
 * Authenticate JupyterHub users with common OAuth providers
 */
export const oauthenticator = mkPackage(
  nixRaw`pkgs.python2Packages.oauthenticator`,
  "Authenticate JupyterHub users with common OAuth providers",
);

/**
 * Generic, spec-compliant, thorough implementation of the OAuth request-signing logic
 */
export const oauthlib = mkPackage(
  nixRaw`pkgs.python2Packages.oauthlib`,
  "Generic, spec-compliant, thorough implementation of the OAuth request-signing logic",
);

/**
 * A pluggable transport proxy
 */
export const obfsproxy = mkPackage(
  nixRaw`pkgs.python2Packages.obfsproxy`,
  "A pluggable transport proxy",
);

/**
 * Objax is a machine learning framework that provides an Object Oriented layer for JAX.
 */
export const objax = mkPackage(
  nixRaw`pkgs.python2Packages.objax`,
  "Objax is a machine learning framework that provides an Object Oriented layer for JAX.",
);

/**
 * Draws Python object reference graphs with graphviz
 */
export const objgraph = mkPackage(
  nixRaw`pkgs.python2Packages.objgraph`,
  "Draws Python object reference graphs with graphviz",
);

/**
 * Traversal over objects subtree and calculate the total size
 */
export const objsize = mkPackage(
  nixRaw`pkgs.python2Packages.objsize`,
  "Traversal over objects subtree and calculate the total size",
);

/**
 * Python framework for seismological observatories
 */
export const obspy = mkPackage(
  nixRaw`pkgs.python2Packages.obspy`,
  "Python framework for seismological observatories",
);

/**
 * Tool helping to port an addon or missing commits of an addon from one branch to another
 */
export const oca_port = mkPackage(
  nixRaw`pkgs.python2Packages.oca-port`,
  "Tool helping to port an addon or missing commits of an addon from one branch to another",
);

/**
 * A down-to-earth approach to colors
 */
export const ochre = mkPackage(
  nixRaw`pkgs.python2Packages.ochre`,
  "A down-to-earth approach to colors",
);

/**
 * Oracle Cloud Infrastructure Python SDK
 */
export const oci = mkPackage(
  nixRaw`pkgs.python2Packages.oci`,
  "Oracle Cloud Infrastructure Python SDK",
);

/**
 * Oracle Cloud Infrastructure Object Storage fsspec implementation
 */
export const ocifs = mkPackage(
  nixRaw`pkgs.python2Packages.ocifs`,
  "Oracle Cloud Infrastructure Object Storage fsspec implementation",
);

/**
 * Adds an OCR text layer to scanned PDF files, allowing them to be searched
 */
export const ocrmypdf = mkPackage(
  nixRaw`pkgs.python2Packages.ocrmypdf`,
  "Adds an OCR text layer to scanned PDF files, allowing them to be searched",
);

/**
 * Shorthand syntax for building OrderedDicts
 */
export const od = mkPackage(
  nixRaw`pkgs.python2Packages.od`,
  "Shorthand syntax for building OrderedDicts",
);

/**
 * Python API and tools to manipulate OpenDocument files
 */
export const odfpy = mkPackage(
  nixRaw`pkgs.python2Packages.odfpy`,
  "Python API and tools to manipulate OpenDocument files",
);

/**
 * Python client for getting garage occupancy in Amsterdam
 */
export const odp_amsterdam = mkPackage(
  nixRaw`pkgs.python2Packages.odp-amsterdam`,
  "Python client for getting garage occupancy in Amsterdam",
);

/**
 * Alternative parser for bitbake recipes
 */
export const oelint_parser = mkPackage(
  nixRaw`pkgs.python2Packages.oelint-parser`,
  "Alternative parser for bitbake recipes",
);

/**
 * Python module to interact with OpenEnergyMonitor thermostats
 */
export const oemthermostat = mkPackage(
  nixRaw`pkgs.python2Packages.oemthermostat`,
  "Python module to interact with OpenEnergyMonitor thermostats",
);

/**
 * Trac xmlrpc library
 */
export const offtrac = mkPackage(
  nixRaw`pkgs.python2Packages.offtrac`,
  "Trac xmlrpc library",
);

/**
 * OFX client for dowloading transactions from banks
 */
export const ofxclient = mkPackage(
  nixRaw`pkgs.python2Packages.ofxclient`,
  "OFX client for dowloading transactions from banks",
);

/**
 * ofxhome.com financial institution lookup REST client
 */
export const ofxhome = mkPackage(
  nixRaw`pkgs.python2Packages.ofxhome`,
  "ofxhome.com financial institution lookup REST client",
);

/**
 * Tools for working with the OFX (Open Financial Exchange) file format
 */
export const ofxparse = mkPackage(
  nixRaw`pkgs.python2Packages.ofxparse`,
  "Tools for working with the OFX (Open Financial Exchange) file format",
);

/**
 * Library for working with Open Financial Exchange (OFX) formatted data used by financial institutions
 */
export const ofxtools = mkPackage(
  nixRaw`pkgs.python2Packages.ofxtools`,
  "Library for working with Open Financial Exchange (OFX) formatted data used by financial institutions",
);

/**
 * An experimental library aimed at consolidating a lot of low-level code used for Enthought's eggs
 */
export const okonomiyaki = mkPackage(
  nixRaw`pkgs.python2Packages.okonomiyaki`,
  "An experimental library aimed at consolidating a lot of low-level code used for Enthought's eggs",
);

/**
 * Python SDK for the Okta Management API
 */
export const okta = mkPackage(
  nixRaw`pkgs.python2Packages.okta`,
  "Python SDK for the Okta Management API",
);

/**
 * Meta-package providing the oldest supported Numpy for a given Python version and platform
 */
export const oldest_supported_numpy = mkPackage(
  nixRaw`pkgs.python2Packages.oldest-supported-numpy`,
  "Meta-package providing the oldest supported Numpy for a given Python version and platform",
);

/**
 * Python package to parse, read and write Microsoft OLE2 files
 */
export const olefile = mkPackage(
  nixRaw`pkgs.python2Packages.olefile`,
  "Python package to parse, read and write Microsoft OLE2 files",
);

/**
 * Module to analyze MS OLE2 files and MS Office documents
 */
export const oletools = mkPackage(
  nixRaw`pkgs.python2Packages.oletools`,
  "Module to analyze MS OLE2 files and MS Office documents",
);

/**
 * Implementation of next-generation file format (NGFF) specifications for storing bioimaging data in the cloud.
 */
export const ome_zarr = mkPackage(
  nixRaw`pkgs.python2Packages.ome-zarr`,
  "Implementation of next-generation file format (NGFF) specifications for storing bioimaging data in the cloud.",
);

/**
 * Framework for configuring complex applications
 */
export const omegaconf = mkPackage(
  nixRaw`pkgs.python2Packages.omegaconf`,
  "Framework for configuring complex applications",
);

/**
 * OMEMO Double Ratchet
 */
export const omemo_dr = mkPackage(
  nixRaw`pkgs.python2Packages.omemo-dr`,
  "OMEMO Double Ratchet",
);

/**
 * Python module for the Omnik Inverter
 */
export const omnikinverter = mkPackage(
  nixRaw`pkgs.python2Packages.omnikinverter`,
  "Python module for the Omnik Inverter",
);

/**
 * Python interface for the Hayward Omnilogic pool control system
 */
export const omnilogic = mkPackage(
  nixRaw`pkgs.python2Packages.omnilogic`,
  "Python interface for the Hayward Omnilogic pool control system",
);

/**
 * Python interface for Omorfi
 */
export const omorfi = mkPackage(
  nixRaw`pkgs.python2Packages.omorfi`,
  "Python interface for Omorfi",
);

/**
 * Collection of datasets used for Optical Music Recognition
 */
export const omrdatasettools = mkPackage(
  nixRaw`pkgs.python2Packages.omrdatasettools`,
  "Collection of datasets used for Optical Music Recognition",
);

/**
 * Python package to access Ondilo ICO APIs
 */
export const ondilo = mkPackage(
  nixRaw`pkgs.python2Packages.ondilo`,
  "Python package to access Ondilo ICO APIs",
);

/**
 * A hacky implementation of one-time pad
 */
export const onetimepad = mkPackage(
  nixRaw`pkgs.python2Packages.onetimepad`,
  "A hacky implementation of one-time pad",
);

/**
 * One-time password library for HMAC-based (HOTP) and time-based (TOTP) passwords
 */
export const onetimepass = mkPackage(
  nixRaw`pkgs.python2Packages.onetimepass`,
  "One-time password library for HMAC-based (HOTP) and time-based (TOTP) passwords",
);

/**
 * Control Onkyo receivers over ethernet
 */
export const onkyo_eiscp = mkPackage(
  nixRaw`pkgs.python2Packages.onkyo-eiscp`,
  "Control Onkyo receivers over ethernet",
);

/**
 * API client to develop tools for competitive programming
 */
export const online_judge_api_client = mkPackage(
  nixRaw`pkgs.python2Packages.online-judge-api-client`,
  "API client to develop tools for competitive programming",
);

/**
 * Tools for various online judges. Download sample cases, generate additional test cases, test your code, and submit it.
 */
export const online_judge_tools = mkPackage(
  nixRaw`pkgs.python2Packages.online-judge-tools`,
  "Tools for various online judges. Download sample cases, generate additional test cases, test your code, and submit it.",
);

/**
 * Python library for OnlyKey with Solo FIDO2
 */
export const onlykey_solo_python = mkPackage(
  nixRaw`pkgs.python2Packages.onlykey-solo-python`,
  "Python library for OnlyKey with Solo FIDO2",
);

/**
 * Open Neural Network Exchange
 */
export const onnx = mkPackage(
  nixRaw`pkgs.python2Packages.onnx`,
  "Open Neural Network Exchange",
);

/**
 * ONNX Converter and Optimization Tools
 */
export const onnxconverter_common = mkPackage(
  nixRaw`pkgs.python2Packages.onnxconverter-common`,
  "ONNX Converter and Optimization Tools",
);

/**
 * ONNXMLTools enables conversion of models to ONNX
 */
export const onnxmltools = mkPackage(
  nixRaw`pkgs.python2Packages.onnxmltools`,
  "ONNXMLTools enables conversion of models to ONNX",
);

/**
 * Cross-platform, high performance scoring engine for ML models
 */
export const onnxruntime = mkPackage(
  nixRaw`pkgs.python2Packages.onnxruntime`,
  "Cross-platform, high performance scoring engine for ML models",
);

/**
 * Transformers Model Optimization Tool of ONNXRuntime
 */
export const onnxruntime_tools = mkPackage(
  nixRaw`pkgs.python2Packages.onnxruntime-tools`,
  "Transformers Model Optimization Tool of ONNXRuntime",
);

/**
 * ONVIF Client Implementation in Python
 */
export const onvif_zeep_async = mkPackage(
  nixRaw`pkgs.python2Packages.onvif-zeep-async`,
  "ONVIF Client Implementation in Python",
);

/**
 * OOCSI library for Python
 */
export const oocsi = mkPackage(
  nixRaw`pkgs.python2Packages.oocsi`,
  "OOCSI library for Python",
);

/**
 * Common widgets for opcua-modeler og opcua-client-gui
 */
export const opcua_widgets = mkPackage(
  nixRaw`pkgs.python2Packages.opcua-widgets`,
  "Common widgets for opcua-modeler og opcua-client-gui",
);

/**
 * Python module to communicate with opengarage.io
 */
export const open_garage = mkPackage(
  nixRaw`pkgs.python2Packages.open-garage`,
  "Python module to communicate with opengarage.io",
);

/**
 * Python client for the Open-Meteo API
 */
export const open_meteo = mkPackage(
  nixRaw`pkgs.python2Packages.open-meteo`,
  "Python client for the Open-Meteo API",
);

/**
 * Python client library for the OpenAI API
 */
export const openai = mkPackage(
  nixRaw`pkgs.python2Packages.openai`,
  "Python client library for the OpenAI API",
);

/**
 * Language and compiler for writing highly efficient custom Deep-Learning primitives
 */
export const openai_triton = mkPackage(
  nixRaw`pkgs.python2Packages.openai-triton`,
  "Language and compiler for writing highly efficient custom Deep-Learning primitives",
);

/**
 * A language and compiler for custom Deep Learning operations
 */
export const openai_triton_bin = mkPackage(
  nixRaw`pkgs.python2Packages.openai-triton-bin`,
  "A language and compiler for custom Deep Learning operations",
);

/**
 * General-purpose speech recognition model
 */
export const openai_whisper = mkPackage(
  nixRaw`pkgs.python2Packages.openai-whisper`,
  "General-purpose speech recognition model",
);

/**
 * Library for authenticating with the OpenAI API
 */
export const openaiauth = mkPackage(
  nixRaw`pkgs.python2Packages.openaiauth`,
  "Library for authenticating with the OpenAI API",
);

/**
 * ANT and ANT-FS Python Library
 */
export const openant = mkPackage(
  nixRaw`pkgs.python2Packages.openant`,
  "ANT and ANT-FS Python Library",
);

/**
 * Client-side and server-side support for the OpenAPI Specification v3
 */
export const openapi_core = mkPackage(
  nixRaw`pkgs.python2Packages.openapi-core`,
  "Client-side and server-side support for the OpenAPI Specification v3",
);

/**
 * OpenAPI (v3) specification schema as pydantic class
 */
export const openapi_schema_pydantic = mkPackage(
  nixRaw`pkgs.python2Packages.openapi-schema-pydantic`,
  "OpenAPI (v3) specification schema as pydantic class",
);

/**
 * Validates OpenAPI schema against the OpenAPI Schema Specification v3.0
 */
export const openapi_schema_validator = mkPackage(
  nixRaw`pkgs.python2Packages.openapi-schema-validator`,
  "Validates OpenAPI schema against the OpenAPI Schema Specification v3.0",
);

/**
 * Validates OpenAPI Specs against the OpenAPI 2.0 (aka Swagger) and OpenAPI 3.0.0 specification
 */
export const openapi_spec_validator = mkPackage(
  nixRaw`pkgs.python2Packages.openapi-spec-validator`,
  "Validates OpenAPI Specs against the OpenAPI 2.0 (aka Swagger) and OpenAPI 3.0.0 specification",
);

/**
 * Python bindings for openbabel
 */
export const openbabel_bindings = mkPackage(
  nixRaw`pkgs.python2Packages.openbabel-bindings`,
  "Python bindings for openbabel",
);

/**
 * A stats collection and distributed tracing framework
 */
export const opencensus = mkPackage(
  nixRaw`pkgs.python2Packages.opencensus`,
  "A stats collection and distributed tracing framework",
);

/**
 * OpenCensus Runtime Context
 */
export const opencensus_context = mkPackage(
  nixRaw`pkgs.python2Packages.opencensus-context`,
  "OpenCensus Runtime Context",
);

/**
 * OpenCensus Azure Monitor Exporter
 */
export const opencensus_ext_azure = mkPackage(
  nixRaw`pkgs.python2Packages.opencensus-ext-azure`,
  "OpenCensus Azure Monitor Exporter",
);

/**
 * Python module for oci specifications
 */
export const opencontainers = mkPackage(
  nixRaw`pkgs.python2Packages.opencontainers`,
  "Python module for oci specifications",
);

/**
 * Open Computer Vision Library with more than 500 algorithms
 */
export const opencv3 = mkPackage(
  nixRaw`pkgs.python2Packages.opencv3`,
  "Open Computer Vision Library with more than 500 algorithms",
);

/**
 * Open Computer Vision Library with more than 500 algorithms
 */
export const opencv4 = mkPackage(
  nixRaw`pkgs.python2Packages.opencv4`,
  "Open Computer Vision Library with more than 500 algorithms",
);

/**
 * Python module to interact with the OpenERZ API
 */
export const openerz_api = mkPackage(
  nixRaw`pkgs.python2Packages.openerz-api`,
  "Python module to interact with the OpenERZ API",
);

/**
 * Module for communicating with the wifi module from OpenEVSE
 */
export const openevsewifi = mkPackage(
  nixRaw`pkgs.python2Packages.openevsewifi`,
  "Module for communicating with the wifi module from OpenEVSE",
);

/**
 * Python module to access Linn Ds and Openhome devices
 */
export const openhomedevice = mkPackage(
  nixRaw`pkgs.python2Packages.openhomedevice`,
  "Python module to access Linn Ds and Openhome devices",
);

/**
 * A CLI python OpenID Connect client with token caching and management
 */
export const openidc_client = mkPackage(
  nixRaw`pkgs.python2Packages.openidc-client`,
  "A CLI python OpenID Connect client with token caching and management",
);

/**
 * Operating LLMs in production
 */
export const openllm = mkPackage(
  nixRaw`pkgs.python2Packages.openllm`,
  "Operating LLMs in production",
);

/**
 * Interacting with OpenLLM HTTP/gRPC server, or any BentoML server
 */
export const openllm_client = mkPackage(
  nixRaw`pkgs.python2Packages.openllm-client`,
  "Interacting with OpenLLM HTTP/gRPC server, or any BentoML server",
);

/**
 * Core components for OpenLLM
 */
export const openllm_core = mkPackage(
  nixRaw`pkgs.python2Packages.openllm-core`,
  "Core components for OpenLLM",
);

/**
 * Toolkit for molecular simulation using high performance GPU code
 */
export const openmm = mkPackage(
  nixRaw`pkgs.python2Packages.openmm`,
  "Toolkit for molecular simulation using high performance GPU code",
);

/**
 * Backend part of Paperwork (Python API, no UI)
 */
export const openpaperwork_core = mkPackage(
  nixRaw`pkgs.python2Packages.openpaperwork-core`,
  "Backend part of Paperwork (Python API, no UI)",
);

/**
 * Reusable GTK components of Paperwork
 */
export const openpaperwork_gtk = mkPackage(
  nixRaw`pkgs.python2Packages.openpaperwork-gtk`,
  "Reusable GTK components of Paperwork",
);

/**
 * Python library to read/write Excel 2010 xlsx/xlsm files
 */
export const openpyxl = mkPackage(
  nixRaw`pkgs.python2Packages.openpyxl`,
  "Python library to read/write Excel 2010 xlsx/xlsm files",
);

/**
 * An entirely open source Python library that allows you to manage your Razer peripherals on GNU/Linux
 */
export const openrazer = mkPackage(
  nixRaw`pkgs.python2Packages.openrazer`,
  "An entirely open source Python library that allows you to manage your Razer peripherals on GNU/Linux",
);

/**
 * An entirely open source user-space daemon that allows you to manage your Razer peripherals on GNU/Linux
 */
export const openrazer_daemon = mkPackage(
  nixRaw`pkgs.python2Packages.openrazer-daemon`,
  "An entirely open source user-space daemon that allows you to manage your Razer peripherals on GNU/Linux",
);

/**
 * Module for the OpenRGB SDK
 */
export const openrgb_python = mkPackage(
  nixRaw`pkgs.python2Packages.openrgb-python`,
  "Module for the OpenRGB SDK",
);

/**
 * The Python API to consume openrouteservice(s) painlessly
 */
export const openrouteservice = mkPackage(
  nixRaw`pkgs.python2Packages.openrouteservice`,
  "The Python API to consume openrouteservice(s) painlessly",
);

/**
 * Python low-level client for OpenSearch
 */
export const opensearch_py = mkPackage(
  nixRaw`pkgs.python2Packages.opensearch-py`,
  "Python low-level client for OpenSearch",
);

/**
 * OpenSenseMap API Python client
 */
export const opensensemap_api = mkPackage(
  nixRaw`pkgs.python2Packages.opensensemap-api`,
  "OpenSenseMap API Python client",
);

/**
 * Open source Structure-from-Motion pipeline from Mapillary
 */
export const opensfm = mkPackage(
  nixRaw`pkgs.python2Packages.opensfm`,
  "Open source Structure-from-Motion pipeline from Mapillary",
);

/**
 * Python client for the OpenShift API
 */
export const openshift = mkPackage(
  nixRaw`pkgs.python2Packages.openshift`,
  "Python client for the OpenShift API",
);

/**
 * OpenSimplex Noise functions for 2D, 3D and 4D
 */
export const opensimplex = mkPackage(
  nixRaw`pkgs.python2Packages.opensimplex`,
  "OpenSimplex Noise functions for 2D, 3D and 4D",
);

/**
 * Sphinx theme for RST-sourced documentation published to docs.openstack.org
 */
export const openstackdocstheme = mkPackage(
  nixRaw`pkgs.python2Packages.openstackdocstheme`,
  "Sphinx theme for RST-sourced documentation published to docs.openstack.org",
);

/**
 * An SDK for building applications to work with OpenStack
 */
export const openstacksdk = mkPackage(
  nixRaw`pkgs.python2Packages.openstacksdk`,
  "An SDK for building applications to work with OpenStack",
);

/**
 * Parser for the 'old style' OpenStep property list format also known as ASCII plist
 */
export const openstep_plist = mkPackage(
  nixRaw`pkgs.python2Packages.openstep-plist`,
  "Parser for the 'old style' OpenStep property list format also known as ASCII plist",
);

/**
 * OpenTelemetry Python API
 */
export const opentelemetry_api = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-api`,
  "OpenTelemetry Python API",
);

/**
 * OpenTelemetry Collector Exporters
 */
export const opentelemetry_exporter_otlp = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-exporter-otlp`,
  "OpenTelemetry Collector Exporters",
);

/**
 * OpenTelemetry Protobuf encoding
 */
export const opentelemetry_exporter_otlp_proto_common = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-exporter-otlp-proto-common`,
  "OpenTelemetry Protobuf encoding",
);

/**
 * OpenTelemetry Collector Protobuf over gRPC Exporter
 */
export const opentelemetry_exporter_otlp_proto_grpc = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-exporter-otlp-proto-grpc`,
  "OpenTelemetry Collector Protobuf over gRPC Exporter",
);

/**
 * OpenTelemetry Collector Protobuf over HTTP Exporter
 */
export const opentelemetry_exporter_otlp_proto_http = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-exporter-otlp-proto-http`,
  "OpenTelemetry Collector Protobuf over HTTP Exporter",
);

/**
 * Prometheus Metric Exporter for OpenTelemetry
 */
export const opentelemetry_exporter_prometheus = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-exporter-prometheus`,
  "Prometheus Metric Exporter for OpenTelemetry",
);

/**
 * Instrumentation Tools & Auto Instrumentation for OpenTelemetry Python
 */
export const opentelemetry_instrumentation = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-instrumentation`,
  "Instrumentation Tools & Auto Instrumentation for OpenTelemetry Python",
);

/**
 * OpenTelemetry Instrumentation for aiohttp-client
 */
export const opentelemetry_instrumentation_aiohttp_client = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-instrumentation-aiohttp-client`,
  "OpenTelemetry Instrumentation for aiohttp-client",
);

/**
 * ASGI instrumentation for OpenTelemetry
 */
export const opentelemetry_instrumentation_asgi = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-instrumentation-asgi`,
  "ASGI instrumentation for OpenTelemetry",
);

/**
 * OpenTelemetry Instrumentation for Django
 */
export const opentelemetry_instrumentation_django = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-instrumentation-django`,
  "OpenTelemetry Instrumentation for Django",
);

/**
 * OpenTelemetry Instrumentation for grpc
 */
export const opentelemetry_instrumentation_grpc = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-instrumentation-grpc`,
  "OpenTelemetry Instrumentation for grpc",
);

/**
 * WSGI Middleware for OpenTelemetry
 */
export const opentelemetry_instrumentation_wsgi = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-instrumentation-wsgi`,
  "WSGI Middleware for OpenTelemetry",
);

/**
 * OpenTelemetry Python Proto
 */
export const opentelemetry_proto = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-proto`,
  "OpenTelemetry Python Proto",
);

/**
 * OpenTelemetry Python SDK
 */
export const opentelemetry_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-sdk`,
  "OpenTelemetry Python SDK",
);

/**
 * OpenTelemetry Semantic Conventions
 */
export const opentelemetry_semantic_conventions = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-semantic-conventions`,
  "OpenTelemetry Semantic Conventions",
);

/**
 * Test utilities for OpenTelemetry unit tests
 */
export const opentelemetry_test_utils = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-test-utils`,
  "Test utilities for OpenTelemetry unit tests",
);

/**
 * Web util for OpenTelemetry
 */
export const opentelemetry_util_http = mkPackage(
  nixRaw`pkgs.python2Packages.opentelemetry-util-http`,
  "Web util for OpenTelemetry",
);

/**
 * Create and verify OpenTimestamps proofs
 */
export const opentimestamps = mkPackage(
  nixRaw`pkgs.python2Packages.opentimestamps`,
  "Create and verify OpenTimestamps proofs",
);

/**
 * Platform API for OpenTracing
 */
export const opentracing = mkPackage(
  nixRaw`pkgs.python2Packages.opentracing`,
  "Platform API for OpenTracing",
);

/**
 * Modular Python implementation of t-Distributed Stochasitc Neighbor Embedding
 */
export const opentsne = mkPackage(
  nixRaw`pkgs.python2Packages.opentsne`,
  "Modular Python implementation of t-Distributed Stochasitc Neighbor Embedding",
);

/**
 * Multivariate probabilistic modeling and uncertainty treatment library
 */
export const openturns = mkPackage(
  nixRaw`pkgs.python2Packages.openturns`,
  "Multivariate probabilistic modeling and uncertainty treatment library",
);

/**
 * OpenVINO(TM) Runtime
 */
export const openvino = mkPackage(
  nixRaw`pkgs.python2Packages.openvino`,
  "OpenVINO(TM) Runtime",
);

/**
 * Provides a python interface to interact with a device running OpenWebIf
 */
export const openwebifpy = mkPackage(
  nixRaw`pkgs.python2Packages.openwebifpy`,
  "Provides a python interface to interact with a device running OpenWebIf",
);

/**
 * Python module for interacting with the OpenWrt Luci RPC interface
 */
export const openwrt_luci_rpc = mkPackage(
  nixRaw`pkgs.python2Packages.openwrt-luci-rpc`,
  "Python module for interacting with the OpenWrt Luci RPC interface",
);

/**
 * Python API for OpenWrt ubus RPC
 */
export const openwrt_ubus_rpc = mkPackage(
  nixRaw`pkgs.python2Packages.openwrt-ubus-rpc`,
  "Python API for OpenWrt ubus RPC",
);

/**
 * Module for getting historical and forecasted usage/cost from utilities that use opower.com
 */
export const opower = mkPackage(
  nixRaw`pkgs.python2Packages.opower`,
  "Module for getting historical and forecasted usage/cost from utilities that use opower.com",
);

/**
 * Get image width and height given a file path using minimal dependencies
 */
export const opsdroid_get_image_size = mkPackage(
  nixRaw`pkgs.python2Packages.opsdroid-get-image-size`,
  "Get image width and height given a file path using minimal dependencies",
);

/**
 * Optimizing NumPy's einsum function with order optimization and GPU support
 */
export const opt_einsum = mkPackage(
  nixRaw`pkgs.python2Packages.opt-einsum`,
  "Optimizing NumPy's einsum function with order optimization and GPU support",
);

/**
 * Gradient processing and optimization library for JAX
 */
export const optax = mkPackage(
  nixRaw`pkgs.python2Packages.optax`,
  "Gradient processing and optimization library for JAX",
);

/**
 * Accelerate training and inference of 🤗 Transformers and 🤗 Diffusers with easy to use hardware optimization tools
 */
export const optimum = mkPackage(
  nixRaw`pkgs.python2Packages.optimum`,
  "Accelerate training and inference of 🤗 Transformers and 🤗 Diffusers with easy to use hardware optimization tools",
);

/**
 * A hyperparameter optimization framework
 */
export const optuna = mkPackage(
  nixRaw`pkgs.python2Packages.optuna`,
  "A hyperparameter optimization framework",
);

/**
 * Python bindings to the libopus, IETF low-delay audio codec
 */
export const opuslib = mkPackage(
  nixRaw`pkgs.python2Packages.opuslib`,
  "Python bindings to the libopus, IETF low-delay audio codec",
);

/**
 * Library consisting of optimization benchmarking functions
 */
export const opytimark = mkPackage(
  nixRaw`pkgs.python2Packages.opytimark`,
  "Library consisting of optimization benchmarking functions",
);

/**
 * Python driver for Oracle Database
 */
export const oracledb = mkPackage(
  nixRaw`pkgs.python2Packages.oracledb`,
  "Python driver for Oracle Database",
);

/**
 * Library for Oral B BLE devices
 */
export const oralb_ble = mkPackage(
  nixRaw`pkgs.python2Packages.oralb-ble`,
  "Library for Oral B BLE devices",
);

/**
 * Data mining and visualization toolbox for novice and expert alike
 */
export const orange3 = mkPackage(
  nixRaw`pkgs.python2Packages.orange3`,
  "Data mining and visualization toolbox for novice and expert alike",
);

/**
 * Orange framework for building graphical user interfaces for editing workflows
 */
export const orange_canvas_core = mkPackage(
  nixRaw`pkgs.python2Packages.orange-canvas-core`,
  "Orange framework for building graphical user interfaces for editing workflows",
);

/**
 * Implementation of the base OWBaseWidget class and utilities for use in Orange Canvas workflows
 */
export const orange_widget_base = mkPackage(
  nixRaw`pkgs.python2Packages.orange-widget-base`,
  "Implementation of the base OWBaseWidget class and utilities for use in Orange Canvas workflows",
);

/**
 * A MutableSet that remembers its order, so that every entry has an index.
 */
export const ordered_set = mkPackage(
  nixRaw`pkgs.python2Packages.ordered-set`,
  "A MutableSet that remembers its order, so that every entry has an index.",
);

/**
 * Ordered Multivalue Dictionary.
 */
export const orderedmultidict = mkPackage(
  nixRaw`pkgs.python2Packages.orderedmultidict`,
  "Ordered Multivalue Dictionary.",
);

/**
 * Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy
 */
export const orjson = mkPackage(
  nixRaw`pkgs.python2Packages.orjson`,
  "Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy",
);

/**
 * An async ORM
 */
export const orm = mkPackage(
  nixRaw`pkgs.python2Packages.orm`,
  "An async ORM",
);

/**
 * Async ORM with fastapi in mind and pydantic validation
 */
export const ormar = mkPackage(
  nixRaw`pkgs.python2Packages.ormar`,
  "Async ORM with fastapi in mind and pydantic validation",
);

/**
 * Google's software suite for combinatorial optimization.

 */
export const ortools = mkPackage(
  nixRaw`pkgs.python2Packages.ortools`,
  "Google's software suite for combinatorial optimization.\n",
);

/**
 * Python client to work with Orvibo devices
 */
export const orvibo = mkPackage(
  nixRaw`pkgs.python2Packages.orvibo`,
  "Python client to work with Orvibo devices",
);

/**
 * Python library for consuming OpenStack service-types-authority data
 */
export const os_service_types = mkPackage(
  nixRaw`pkgs.python2Packages.os-service-types`,
  "Python library for consuming OpenStack service-types-authority data",
);

/**
 * opensuse-commander with svn like handling
 */
export const osc = mkPackage(
  nixRaw`pkgs.python2Packages.osc`,
  "opensuse-commander with svn like handling",
);

/**
 * OpenStackClient Library
 */
export const osc_lib = mkPackage(
  nixRaw`pkgs.python2Packages.osc-lib`,
  "OpenStackClient Library",
);

/**
 * A modern implementation of OSC for python2/3
 */
export const oscpy = mkPackage(
  nixRaw`pkgs.python2Packages.oscpy`,
  "A modern implementation of OSC for python2/3",
);

/**
 * Encryption library for Python
 */
export const oscrypto = mkPackage(
  nixRaw`pkgs.python2Packages.oscrypto`,
  "Encryption library for Python",
);

/**
 * Ordered set
 */
export const oset = mkPackage(
  nixRaw`pkgs.python2Packages.oset`,
  "Ordered set",
);

/**
 * Oslo Concurrency library
 */
export const oslo_concurrency = mkPackage(
  nixRaw`pkgs.python2Packages.oslo-concurrency`,
  "Oslo Concurrency library",
);

/**
 * Oslo Configuration API
 */
export const oslo_config = mkPackage(
  nixRaw`pkgs.python2Packages.oslo-config`,
  "Oslo Configuration API",
);

/**
 * Oslo Context library
 */
export const oslo_context = mkPackage(
  nixRaw`pkgs.python2Packages.oslo-context`,
  "Oslo Context library",
);

/**
 * Oslo Database library
 */
export const oslo_db = mkPackage(
  nixRaw`pkgs.python2Packages.oslo-db`,
  "Oslo Database library",
);

/**
 * Oslo i18n library
 */
export const oslo_i18n = mkPackage(
  nixRaw`pkgs.python2Packages.oslo-i18n`,
  "Oslo i18n library",
);

/**
 * oslo.log library
 */
export const oslo_log = mkPackage(
  nixRaw`pkgs.python2Packages.oslo-log`,
  "oslo.log library",
);

/**
 * Oslo Serialization library
 */
export const oslo_serialization = mkPackage(
  nixRaw`pkgs.python2Packages.oslo-serialization`,
  "Oslo Serialization library",
);

/**
 * Oslo Utility library
 */
export const oslo_utils = mkPackage(
  nixRaw`pkgs.python2Packages.oslo-utils`,
  "Oslo Utility library",
);

/**
 * Oslo test framework
 */
export const oslotest = mkPackage(
  nixRaw`pkgs.python2Packages.oslotest`,
  "Oslo test framework",
);

/**
 * A package to easily download, construct, project, visualize, and analyze complex street networks from OpenStreetMap with NetworkX.
 */
export const osmnx = mkPackage(
  nixRaw`pkgs.python2Packages.osmnx`,
  "A package to easily download, construct, project, visualize, and analyze complex street networks from OpenStreetMap with NetworkX.",
);

/**
 * A library to access OpenStreetMap-related services
 */
export const osmpythontools = mkPackage(
  nixRaw`pkgs.python2Packages.osmpythontools`,
  "A library to access OpenStreetMap-related services",
);

/**
 * Framework for vulnerability scanners which support OSP
 */
export const ospd = mkPackage(
  nixRaw`pkgs.python2Packages.ospd`,
  "Framework for vulnerability scanners which support OSP",
);

/**
 * The Operator Splitting QP Solver
 */
export const osqp = mkPackage(
  nixRaw`pkgs.python2Packages.osqp`,
  "The Operator Splitting QP Solver",
);

/**
 * Alibaba Cloud OSS SDK for Python
 */
export const oss2 = mkPackage(
  nixRaw`pkgs.python2Packages.oss2`,
  "Alibaba Cloud OSS SDK for Python",
);

/**
 * Filesystem for Alibaba Cloud (Aliyun) Object Storage System (OSS)
 */
export const ossfs = mkPackage(
  nixRaw`pkgs.python2Packages.ossfs`,
  "Filesystem for Alibaba Cloud (Aliyun) Object Storage System (OSS)",
);

/**
 * Capture the outcome of Python function calls.
 */
export const outcome = mkPackage(
  nixRaw`pkgs.python2Packages.outcome`,
  "Capture the outcome of Python function calls.",
);

/**
 * An overly configurable http server for client testing
 */
export const overly = mkPackage(
  nixRaw`pkgs.python2Packages.overly`,
  "An overly configurable http server for client testing",
);

/**
 * Python Wrapper to access the Overpass API
 */
export const overpy = mkPackage(
  nixRaw`pkgs.python2Packages.overpy`,
  "Python Wrapper to access the Overpass API",
);

/**
 * Decorator to automatically detect mismatch when overriding a method
 */
export const overrides = mkPackage(
  nixRaw`pkgs.python2Packages.overrides`,
  "Decorator to automatically detect mismatch when overriding a method",
);

/**
 * Thin wrapper around OVH's APIs
 */
export const ovh = mkPackage(
  nixRaw`pkgs.python2Packages.ovh`,
  "Thin wrapper around OVH's APIs",
);

/**
 * Parse and generate OVMF_VARS.fd from Yaml
 */
export const ovmfvartool = mkPackage(
  nixRaw`pkgs.python2Packages.ovmfvartool`,
  "Parse and generate OVMF_VARS.fd from Yaml",
);

/**
 * Python client for getting data from OVO's API
 */
export const ovoenergy = mkPackage(
  nixRaw`pkgs.python2Packages.ovoenergy`,
  "Python client for getting data from OVO's API",
);

/**
 * Client for Open Geospatial Consortium web service interface standards
 */
export const owslib = mkPackage(
  nixRaw`pkgs.python2Packages.owslib`,
  "Client for Open Geospatial Consortium web service interface standards",
);

/**
 * Drop-in replacement for PyYAML which preserves dict ordering
 */
export const oyaml = mkPackage(
  nixRaw`pkgs.python2Packages.oyaml`,
  "Drop-in replacement for PyYAML which preserves dict ordering",
);

/**
 * Module for interacting with the P1 Monitor
 */
export const p1monitor = mkPackage(
  nixRaw`pkgs.python2Packages.p1monitor`,
  "Module for interacting with the P1 Monitor",
);

/**
 * Adds ring buffer functionality
 */
export const pa_ringbuffer = mkPackage(
  nixRaw`pkgs.python2Packages.pa-ringbuffer`,
  "Adds ring buffer functionality",
);

/**
 * Python parser and builder for package URLs
 */
export const packageurl_python = mkPackage(
  nixRaw`pkgs.python2Packages.packageurl-python`,
  "Python parser and builder for package URLs",
);

/**
 * Core utilities for Python packages
 */
export const packaging = mkPackage(
  nixRaw`pkgs.python2Packages.packaging`,
  "Core utilities for Python packages",
);

/**
 * PackBits encoder/decoder for Python
 */
export const packbits = mkPackage(
  nixRaw`pkgs.python2Packages.packbits`,
  "PackBits encoder/decoder for Python",
);

/**
 * Python client for the Packet API
 */
export const packet_python = mkPackage(
  nixRaw`pkgs.python2Packages.packet-python`,
  "Python client for the Packet API",
);

/**
 * Module for version handling of modules
 */
export const packvers = mkPackage(
  nixRaw`pkgs.python2Packages.packvers`,
  "Module for version handling of modules",
);

/**
 * Interrupt-based matrix keypad library for Raspberry Pi
 */
export const pad4pi = mkPackage(
  nixRaw`pkgs.python2Packages.pad4pi`,
  "Interrupt-based matrix keypad library for Raspberry Pi",
);

/**
 * ONNX Model Exporter for PaddlePaddle
 */
export const paddle2onnx = mkPackage(
  nixRaw`pkgs.python2Packages.paddle2onnx`,
  "ONNX Model Exporter for PaddlePaddle",
);

/**
 * Paddle numpy bfloat16 package
 */
export const paddle_bfloat = mkPackage(
  nixRaw`pkgs.python2Packages.paddle-bfloat`,
  "Paddle numpy bfloat16 package",
);

/**
 * Multilingual OCR toolkits based on PaddlePaddle
 */
export const paddleocr = mkPackage(
  nixRaw`pkgs.python2Packages.paddleocr`,
  "Multilingual OCR toolkits based on PaddlePaddle",
);

/**
 * PArallel Distributed Deep LEarning: Machine Learning Framework from Industrial Practice （『飞桨』核心框架，深度学习&机器学习高性能单机、分布式训练和跨平台部署
 */
export const paddlepaddle = mkPackage(
  nixRaw`pkgs.python2Packages.paddlepaddle`,
  "PArallel Distributed Deep LEarning: Machine Learning Framework from Industrial Practice （『飞桨』核心框架，深度学习&机器学习高性能单机、分布式训练和跨平台部署",
);

/**
 * Python library to manipulate PDF page labels.
 */
export const pagelabels = mkPackage(
  nixRaw`pkgs.python2Packages.pagelabels`,
  "Python library to manipulate PDF page labels.",
);

/**
 * MQTT version 3.1.1 client class
 */
export const paho_mqtt = mkPackage(
  nixRaw`pkgs.python2Packages.paho-mqtt`,
  "MQTT version 3.1.1 client class",
);

/**
 * Pythonic Audio Library and Codecs Environment
 */
export const palace = mkPackage(
  nixRaw`pkgs.python2Packages.palace`,
  "Pythonic Audio Library and Codecs Environment",
);

/**
 * A library of color palettes
 */
export const palettable = mkPackage(
  nixRaw`pkgs.python2Packages.palettable`,
  "A library of color palettes",
);

/**
 * Sphinx theme for Pallets projects
 */
export const pallets_sphinx_themes = mkPackage(
  nixRaw`pkgs.python2Packages.pallets-sphinx-themes`,
  "Sphinx theme for Pallets projects",
);

/**
 * PAM interface using ctypes
 */
export const pamela = mkPackage(
  nixRaw`pkgs.python2Packages.pamela`,
  "PAM interface using ctypes",
);

/**
 * RabbitMQ Focused AMQP low-level library
 */
export const pamqp = mkPackage(
  nixRaw`pkgs.python2Packages.pamqp`,
  "RabbitMQ Focused AMQP low-level library",
);

/**
 * Python API for controlling Panasonic Blu-Ray players
 */
export const panacotta = mkPackage(
  nixRaw`pkgs.python2Packages.panacotta`,
  "Python API for controlling Panasonic Blu-Ray players",
);

/**
 * Library to control Panasonic Viera TVs
 */
export const panasonic_viera = mkPackage(
  nixRaw`pkgs.python2Packages.panasonic-viera`,
  "Library to control Panasonic Viera TVs",
);

/**
 * Powerful data structures for data analysis, time series, and statistics
 */
export const pandas = mkPackage(
  nixRaw`pkgs.python2Packages.pandas`,
  "Powerful data structures for data analysis, time series, and statistics",
);

/**
 * Up to date remote data access for pandas, works for multiple versions of pandas
 */
export const pandas_datareader = mkPackage(
  nixRaw`pkgs.python2Packages.pandas-datareader`,
  "Up to date remote data access for pandas, works for multiple versions of pandas",
);

/**
 * Type annotations for Pandas
 */
export const pandas_stubs = mkPackage(
  nixRaw`pkgs.python2Packages.pandas-stubs`,
  "Type annotations for Pandas",
);

/**
 * An Attribute class to be used with pandocfilters
 */
export const pandoc_attributes = mkPackage(
  nixRaw`pkgs.python2Packages.pandoc-attributes`,
  "An Attribute class to be used with pandocfilters",
);

/**
 * Pandoc filter suite providing facilities for cross-referencing in markdown documents
 */
export const pandoc_xnos = mkPackage(
  nixRaw`pkgs.python2Packages.pandoc-xnos`,
  "Pandoc filter suite providing facilities for cross-referencing in markdown documents",
);

/**
 * A python module for writing pandoc filters, with a collection of examples
 */
export const pandocfilters = mkPackage(
  nixRaw`pkgs.python2Packages.pandocfilters`,
  "A python module for writing pandoc filters, with a collection of examples",
);

/**
 * A high level dashboarding library for python visualization libraries
 */
export const panel = mkPackage(
  nixRaw`pkgs.python2Packages.panel`,
  "A high level dashboarding library for python visualization libraries",
);

/**
 * Pythonic alternative to John MacFarlane's pandocfilters, with extra helper functions
 */
export const panflute = mkPackage(
  nixRaw`pkgs.python2Packages.panflute`,
  "Pythonic alternative to John MacFarlane's pandocfilters, with extra helper functions",
);

/**
 * Parametrize and run Jupyter and interact with notebooks
 */
export const papermill = mkPackage(
  nixRaw`pkgs.python2Packages.papermill`,
  "Parametrize and run Jupyter and interact with notebooks",
);

/**
 * Backend part of Paperwork (Python API, no UI)
 */
export const paperwork_backend = mkPackage(
  nixRaw`pkgs.python2Packages.paperwork-backend`,
  "Backend part of Paperwork (Python API, no UI)",
);

/**
 * CLI for Paperwork
 */
export const paperwork_shell = mkPackage(
  nixRaw`pkgs.python2Packages.paperwork-shell`,
  "CLI for Paperwork",
);

/**
 * Powerful command-line document and bibliography manager
 */
export const papis = mkPackage(
  nixRaw`pkgs.python2Packages.papis`,
  "Powerful command-line document and bibliography manager",
);

/**
 * A Python module to make simple GUIs with Rofi
 */
export const papis_python_rofi = mkPackage(
  nixRaw`pkgs.python2Packages.papis-python-rofi`,
  "A Python module to make simple GUIs with Rofi",
);

/**
 * A set utilities that ake advantage of python's 'multiprocessing' module to distribute CPU-intensive tasks
 */
export const para = mkPackage(
  nixRaw`pkgs.python2Packages.para`,
  "A set utilities that ake advantage of python's 'multiprocessing' module to distribute CPU-intensive tasks",
);

/**
 * Declarative Python programming using Parameters
 */
export const param = mkPackage(
  nixRaw`pkgs.python2Packages.param`,
  "Declarative Python programming using Parameters",
);

/**
 * POSIX parameter expansion in Python
 */
export const parameter_expansion_patched = mkPackage(
  nixRaw`pkgs.python2Packages.parameter-expansion-patched`,
  "POSIX parameter expansion in Python",
);

/**
 * Parameterized testing with any Python test framework
 */
export const parameterized = mkPackage(
  nixRaw`pkgs.python2Packages.parameterized`,
  "Parameterized testing with any Python test framework",
);

/**
 * Read unit test parameters from config files
 */
export const parametrize_from_file = mkPackage(
  nixRaw`pkgs.python2Packages.parametrize-from-file`,
  "Read unit test parameters from config files",
);

/**
 * Native Python SSHv2 protocol library
 */
export const paramiko = mkPackage(
  nixRaw`pkgs.python2Packages.paramiko`,
  "Native Python SSHv2 protocol library",
);

/**
 * Parameterization framework for parameterized model creation and handling
 */
export const paramz = mkPackage(
  nixRaw`pkgs.python2Packages.paramz`,
  "Parameterization framework for parameterized model creation and handling",
);

/**
 * Library contains checks for well known weaknesses on cryptographic artifacts
 */
export const paranoid_crypto = mkPackage(
  nixRaw`pkgs.python2Packages.paranoid-crypto`,
  "Library contains checks for well known weaknesses on cryptographic artifacts",
);

/**
 * A HTTP and FTP parallel file downloader
 */
export const parfive = mkPackage(
  nixRaw`pkgs.python2Packages.parfive`,
  "A HTTP and FTP parallel file downloader",
);

/**
 * Python implementation of the parquet columnar file format
 */
export const parquet = mkPackage(
  nixRaw`pkgs.python2Packages.parquet`,
  "Python implementation of the parquet columnar file format",
);

/**
 * parse() is the opposite of format()
 */
export const parse = mkPackage(
  nixRaw`pkgs.python2Packages.parse`,
  "parse() is the opposite of format()",
);

/**
 * Simplifies to build parse types based on the parse module
 */
export const parse_type = mkPackage(
  nixRaw`pkgs.python2Packages.parse-type`,
  "Simplifies to build parse types based on the parse module",
);

/**
 * Parse human-readable date/time text
 */
export const parsedatetime = mkPackage(
  nixRaw`pkgs.python2Packages.parsedatetime`,
  "Parse human-readable date/time text",
);

/**
 * Python module and CLI utility for parsing DMARC reports
 */
export const parsedmarc = mkPackage(
  nixRaw`pkgs.python2Packages.parsedmarc`,
  "Python module and CLI utility for parsing DMARC reports",
);

/**
 * Python library to extract data from HTML and XML using XPath and CSS selectors
 */
export const parsel = mkPackage(
  nixRaw`pkgs.python2Packages.parsel`,
  "Python library to extract data from HTML and XML using XPath and CSS selectors",
);

/**
 * Arbitrary-lookahead parser
 */
export const parsimonious = mkPackage(
  nixRaw`pkgs.python2Packages.parsimonious`,
  "Arbitrary-lookahead parser",
);

/**
 * A parser generator library based on OMeta, and other useful parsing tools.
 */
export const parsley = mkPackage(
  nixRaw`pkgs.python2Packages.parsley`,
  "A parser generator library based on OMeta, and other useful parsing tools.",
);

/**
 * A Python Parser
 */
export const parso = mkPackage(
  nixRaw`pkgs.python2Packages.parso`,
  "A Python Parser",
);

/**
 * Easy-to-use parser combinators, for parsing in pure Python
 */
export const parsy = mkPackage(
  nixRaw`pkgs.python2Packages.parsy`,
  "Easy-to-use parser combinators, for parsing in pure Python",
);

/**
 * Appendable key-value storage
 */
export const partd = mkPackage(
  nixRaw`pkgs.python2Packages.partd`,
  "Appendable key-value storage",
);

/**
 * Package to deal with particles, the PDG particle data table and others
 */
export const particle = mkPackage(
  nixRaw`pkgs.python2Packages.particle`,
  "Package to deal with particles, the PDG particle data table and others",
);

/**
 * Library for common list functions related to partitioning lists
 */
export const parts = mkPackage(
  nixRaw`pkgs.python2Packages.parts`,
  "Library for common list functions related to partitioning lists",
);

/**
 * Allows parsing and manipulation of PEP 440 version numbers
 */
export const parver = mkPackage(
  nixRaw`pkgs.python2Packages.parver`,
  "Allows parsing and manipulation of PEP 440 version numbers",
);

/**
 * A python wrapper for the "PulseAudio simple API". Supports playing and recording audio via PulseAudio and PipeWire
 */
export const pasimple = mkPackage(
  nixRaw`pkgs.python2Packages.pasimple`,
  "A python wrapper for the \"PulseAudio simple API\". Supports playing and recording audio via PulseAudio and PipeWire",
);

/**
 * A password hashing library for Python
 */
export const passlib = mkPackage(
  nixRaw`pkgs.python2Packages.passlib`,
  "A password hashing library for Python",
);

/**
 * Tools for using a Web Server Gateway Interface stack
 */
export const paste = mkPackage(
  nixRaw`pkgs.python2Packages.paste`,
  "Tools for using a Web Server Gateway Interface stack",
);

/**
 * Load, configure, and compose WSGI applications and servers
 */
export const pastedeploy = mkPackage(
  nixRaw`pkgs.python2Packages.pastedeploy`,
  "Load, configure, and compose WSGI applications and servers",
);

/**
 * Bring colors to your terminal
 */
export const pastel = mkPackage(
  nixRaw`pkgs.python2Packages.pastel`,
  "Bring colors to your terminal",
);

/**
 * A pluggable command-line frontend, including commands to setup package file layouts
 */
export const pastescript = mkPackage(
  nixRaw`pkgs.python2Packages.pastescript`,
  "A pluggable command-line frontend, including commands to setup package file layouts",
);

/**
 * Multi-purpose brute-forcer
 */
export const patator = mkPackage(
  nixRaw`pkgs.python2Packages.patator`,
  "Multi-purpose brute-forcer",
);

/**
 * A library to parse and apply unified diffs
 */
export const patch = mkPackage(
  nixRaw`pkgs.python2Packages.patch`,
  "A library to parse and apply unified diffs",
);

/**
 * Library to parse and apply unified diffs.
 */
export const patch_ng = mkPackage(
  nixRaw`pkgs.python2Packages.patch-ng`,
  "Library to parse and apply unified diffs.",
);

/**
 * Object-oriented file system path manipulation
 */
export const path = mkPackage(
  nixRaw`pkgs.python2Packages.path`,
  "Object-oriented file system path manipulation",
);

/**
 * Functions for server CLI applications used by humans
 */
export const path_and_address = mkPackage(
  nixRaw`pkgs.python2Packages.path-and-address`,
  "Functions for server CLI applications used by humans",
);

/**
 * Library for object-oriented paths
 */
export const pathable = mkPackage(
  nixRaw`pkgs.python2Packages.pathable`,
  "Library for object-oriented paths",
);

/**
 * Object-oriented filesystem paths
 */
export const pathlib = mkPackage(
  nixRaw`pkgs.python2Packages.pathlib`,
  "Object-oriented filesystem paths",
);

/**
 * This module offers classes representing filesystem paths with semantics appropriate for different operating systems.
 */
export const pathlib2 = mkPackage(
  nixRaw`pkgs.python2Packages.pathlib2`,
  "This module offers classes representing filesystem paths with semantics appropriate for different operating systems.",
);

/**
 * Parallel graph management and execution in heterogeneous computing
 */
export const pathos = mkPackage(
  nixRaw`pkgs.python2Packages.pathos`,
  "Parallel graph management and execution in heterogeneous computing",
);

/**
 * Utility library for gitignore-style pattern matching of file paths
 */
export const pathspec = mkPackage(
  nixRaw`pkgs.python2Packages.pathspec`,
  "Utility library for gitignore-style pattern matching of file paths",
);

/**
 * Pattern matching and various utilities for file systems paths
 */
export const pathtools = mkPackage(
  nixRaw`pkgs.python2Packages.pathtools`,
  "Pattern matching and various utilities for file systems paths",
);

/**
 * Library to sanitize/validate a string such as filenames/file-paths/etc
 */
export const pathvalidate = mkPackage(
  nixRaw`pkgs.python2Packages.pathvalidate`,
  "Library to sanitize/validate a string such as filenames/file-paths/etc",
);

/**
 * A Path interface for local and cloud bucket storage
 */
export const pathy = mkPackage(
  nixRaw`pkgs.python2Packages.pathy`,
  "A Path interface for local and cloud bucket storage",
);

/**
 * C implementation of patiencediff algorithm for Python
 */
export const patiencediff = mkPackage(
  nixRaw`pkgs.python2Packages.patiencediff`,
  "C implementation of patiencediff algorithm for Python",
);

/**
 * portable archive file manager
 */
export const patool = mkPackage(
  nixRaw`pkgs.python2Packages.patool`,
  "portable archive file manager",
);

/**
 * Python API Client for PatrOwl
 */
export const patrowl4py = mkPackage(
  nixRaw`pkgs.python2Packages.patrowl4py`,
  "Python API Client for PatrOwl",
);

/**
 * A Python package for describing statistical models
 */
export const patsy = mkPackage(
  nixRaw`pkgs.python2Packages.patsy`,
  "A Python package for describing statistical models",
);

/**
 * A Python-based build/distribution/deployment scripting tool
 */
export const paver = mkPackage(
  nixRaw`pkgs.python2Packages.paver`,
  "A Python-based build/distribution/deployment scripting tool",
);

/**
 * Python SDK for Checkout RESTful APIs
 */
export const paypal_checkout_serversdk = mkPackage(
  nixRaw`pkgs.python2Packages.paypal-checkout-serversdk`,
  "Python SDK for Checkout RESTful APIs",
);

/**
 * PayPalHttp is a generic HTTP Client
 */
export const paypalhttp = mkPackage(
  nixRaw`pkgs.python2Packages.paypalhttp`,
  "PayPalHttp is a generic HTTP Client",
);

/**
 * Python APIs to create, process and manage payment
 */
export const paypalrestsdk = mkPackage(
  nixRaw`pkgs.python2Packages.paypalrestsdk`,
  "Python APIs to create, process and manage payment",
);

export const pbkdf2 = mkPackage(
  nixRaw`pkgs.python2Packages.pbkdf2`,
  "",
);

/**
 * Python Build Reasonableness
 */
export const pbr = mkPackage(
  nixRaw`pkgs.python2Packages.pbr`,
  "Python Build Reasonableness",
);

/**
 * Bluetooth Low Energy nRF5 SoftDevice serialization
 */
export const pc_ble_driver_py = mkPackage(
  nixRaw`pkgs.python2Packages.pc-ble-driver-py`,
  "Bluetooth Low Energy nRF5 SoftDevice serialization",
);

/**
 * Module to interface with the libpcap packet capture library
 */
export const pcapy_ng = mkPackage(
  nixRaw`pkgs.python2Packages.pcapy-ng`,
  "Module to interface with the libpcap packet capture library",
);

/**
 * Python VBA p-code disassembler
 */
export const pcodedmp = mkPackage(
  nixRaw`pkgs.python2Packages.pcodedmp`,
  "Python VBA p-code disassembler",
);

/**
 * A C99 preprocessor written in pure Python
 */
export const pcpp = mkPackage(
  nixRaw`pkgs.python2Packages.pcpp`,
  "A C99 preprocessor written in pure Python",
);

/**
 * Software for determining titration states, adding missing atoms, and assigning charges/radii to biomolecules
 */
export const pdb2pqr = mkPackage(
  nixRaw`pkgs.python2Packages.pdb2pqr`,
  "Software for determining titration states, adding missing atoms, and assigning charges/radii to biomolecules",
);

/**
 * PDBFixer fixes problems in PDB files
 */
export const pdbfixer = mkPackage(
  nixRaw`pkgs.python2Packages.pdbfixer`,
  "PDBFixer fixes problems in PDB files",
);

/**
 * Convert PDF to DOCX
 */
export const pdf2docx = mkPackage(
  nixRaw`pkgs.python2Packages.pdf2docx`,
  "Convert PDF to DOCX",
);

/**
 * Module that wraps the pdftoppm utility to convert PDF to PIL Image object
 */
export const pdf2image = mkPackage(
  nixRaw`pkgs.python2Packages.pdf2image`,
  "Module that wraps the pdftoppm utility to convert PDF to PIL Image object",
);

/**
 * Wkhtmltopdf python wrapper to convert html to pdf using the webkit rendering engine and qt
 */
export const pdfkit = mkPackage(
  nixRaw`pkgs.python2Packages.pdfkit`,
  "Wkhtmltopdf python wrapper to convert html to pdf using the webkit rendering engine and qt",
);

/**
 * PDF parser and analyzer
 */
export const pdfminer_six = mkPackage(
  nixRaw`pkgs.python2Packages.pdfminer-six`,
  "PDF parser and analyzer",
);

/**
 * Plumb a PDF for detailed information about each char, rectangle, line, et cetera — and easily extract text and tables
 */
export const pdfplumber = mkPackage(
  nixRaw`pkgs.python2Packages.pdfplumber`,
  "Plumb a PDF for detailed information about each char, rectangle, line, et cetera — and easily extract text and tables",
);

/**
 * pdfrw is a pure Python library that reads and writes PDFs.
 */
export const pdfrw = mkPackage(
  nixRaw`pkgs.python2Packages.pdfrw`,
  "pdfrw is a pure Python library that reads and writes PDFs.",
);

/**
 * Simple PDF text extraction
 */
export const pdftotext = mkPackage(
  nixRaw`pkgs.python2Packages.pdftotext`,
  "Simple PDF text extraction",
);

/**
 * Extract references (pdf, url, doi, arxiv) and metadata from a PDF
 */
export const pdfx = mkPackage(
  nixRaw`pkgs.python2Packages.pdfx`,
  "Extract references (pdf, url, doi, arxiv) and metadata from a PDF",
);

/**
 * Yet another PEP 517 backend.
 */
export const pdm_backend = mkPackage(
  nixRaw`pkgs.python2Packages.pdm-backend`,
  "Yet another PEP 517 backend.",
);

/**
 * Yet another PEP 517 backend.
 */
export const pdm_pep517 = mkPackage(
  nixRaw`pkgs.python2Packages.pdm-pep517`,
  "Yet another PEP 517 backend.",
);

/**
 * API Documentation for Python Projects
 */
export const pdoc = mkPackage(
  nixRaw`pkgs.python2Packages.pdoc`,
  "API Documentation for Python Projects",
);

/**
 * Auto-generate API documentation for Python projects.
 */
export const pdoc3 = mkPackage(
  nixRaw`pkgs.python2Packages.pdoc3`,
  "Auto-generate API documentation for Python projects.",
);

/**
 * Python wrapper for Dune HD media player API
 */
export const pdunehd = mkPackage(
  nixRaw`pkgs.python2Packages.pdunehd`,
  "Python wrapper for Dune HD media player API",
);

/**
 * Library for interacting with Peaqev car charging
 */
export const peaqevcore = mkPackage(
  nixRaw`pkgs.python2Packages.peaqevcore`,
  "Library for interacting with Peaqev car charging",
);

/**
 * API to manage threads and processes within an application
 */
export const pebble = mkPackage(
  nixRaw`pkgs.python2Packages.pebble`,
  "API to manage threads and processes within an application",
);

/**
 * WSGI object-dispatching web framework
 */
export const pecan = mkPackage(
  nixRaw`pkgs.python2Packages.pecan`,
  "WSGI object-dispatching web framework",
);

/**
 * Library for interacting with the PECO outage map
 */
export const peco = mkPackage(
  nixRaw`pkgs.python2Packages.peco`,
  "Library for interacting with the PECO outage map",
);

/**
 * Python ORM with support for various database implementation
 */
export const peewee = mkPackage(
  nixRaw`pkgs.python2Packages.peewee`,
  "Python ORM with support for various database implementation",
);

/**
 * Simple migration engine for Peewee
 */
export const peewee_migrate = mkPackage(
  nixRaw`pkgs.python2Packages.peewee-migrate`,
  "Simple migration engine for Peewee",
);

/**
 * Multi-platform Python module to parse and work with Portable Executable (aka PE) files
 */
export const pefile = mkPackage(
  nixRaw`pkgs.python2Packages.pefile`,
  "Multi-platform Python module to parse and work with Portable Executable (aka PE) files",
);

/**
 * State-of-the art parameter-efficient fine tuning
 */
export const peft = mkPackage(
  nixRaw`pkgs.python2Packages.peft`,
  "State-of-the art parameter-efficient fine tuning",
);

/**
 * Library to generate PEG parsers
 */
export const pegen = mkPackage(
  nixRaw`pkgs.python2Packages.pegen`,
  "Library to generate PEG parsers",
);

/**
 * Static site generator that requires no database or server-side logic
 */
export const pelican = mkPackage(
  nixRaw`pkgs.python2Packages.pelican`,
  "Static site generator that requires no database or server-side logic",
);

/**
 * Easy PEM file parsing in Python
 */
export const pem = mkPackage(
  nixRaw`pkgs.python2Packages.pem`,
  "Easy PEM file parsing in Python",
);

/**
 * Library for interacting with Pencom relay boards
 */
export const pencompy = mkPackage(
  nixRaw`pkgs.python2Packages.pencompy`,
  "Library for interacting with Pencom relay boards",
);

/**
 * Python datetimes made easy
 */
export const pendulum = mkPackage(
  nixRaw`pkgs.python2Packages.pendulum`,
  "Python datetimes made easy",
);

/**
 * Python module to check whether versions number match PEP 440
 */
export const pep440 = mkPackage(
  nixRaw`pkgs.python2Packages.pep440`,
  "Python module to check whether versions number match PEP 440",
);

/**
 * Wrappers to build Python packages using PEP 517 hooks
 */
export const pep517 = mkPackage(
  nixRaw`pkgs.python2Packages.pep517`,
  "Wrappers to build Python packages using PEP 517 hooks",
);

/**
 * Python style guide checker
 */
export const pep8 = mkPackage(
  nixRaw`pkgs.python2Packages.pep8`,
  "Python style guide checker",
);

/**
 * Check PEP-8 naming conventions, plugin for flake8
 */
export const pep8_naming = mkPackage(
  nixRaw`pkgs.python2Packages.pep8-naming`,
  "Check PEP-8 naming conventions, plugin for flake8",
);

/**
 * A library for converting a token stream into a data structure for use in web form posts
 */
export const peppercorn = mkPackage(
  nixRaw`pkgs.python2Packages.peppercorn`,
  "A library for converting a token stream into a data structure for use in web form posts",
);

/**
 * Adds flavor of interactive filtering to the traditional pipe concept of shell
 */
export const percol = mkPackage(
  nixRaw`pkgs.python2Packages.percol`,
  "Adds flavor of interactive filtering to the traditional pipe concept of shell",
);

/**
 * Performance plots for Python code snippets
 */
export const perfplot = mkPackage(
  nixRaw`pkgs.python2Packages.perfplot`,
  "Performance plots for Python code snippets",
);

/**
 * Extensible periodic table of the elements
 */
export const periodictable = mkPackage(
  nixRaw`pkgs.python2Packages.periodictable`,
  "Extensible periodic table of the elements",
);

/**
 * Simple Scheduler for Dramatiq Task Queue
 */
export const periodiq = mkPackage(
  nixRaw`pkgs.python2Packages.periodiq`,
  "Simple Scheduler for Dramatiq Task Queue",
);

/**
 * A Django extension for creating forms that vary according to user permissions
 */
export const permissionedforms = mkPackage(
  nixRaw`pkgs.python2Packages.permissionedforms`,
  "A Django extension for creating forms that vary according to user permissions",
);

/**
 * Distances and representations of persistence diagrams
 */
export const persim = mkPackage(
  nixRaw`pkgs.python2Packages.persim`,
  "Distances and representations of persistence diagrams",
);

/**
 * Thread-safe disk based persistent queue in Python
 */
export const persist_queue = mkPackage(
  nixRaw`pkgs.python2Packages.persist-queue`,
  "Thread-safe disk based persistent queue in Python",
);

/**
 * Automatic persistence for Python objects
 */
export const persistent = mkPackage(
  nixRaw`pkgs.python2Packages.persistent`,
  "Automatic persistence for Python objects",
);

/**
 * Automate data discovering and access inside a list of packages
 */
export const persisting_theory = mkPackage(
  nixRaw`pkgs.python2Packages.persisting-theory`,
  "Automate data discovering and access inside a list of packages",
);

/**
 * Python interface to Escea fireplaces
 */
export const pescea = mkPackage(
  nixRaw`pkgs.python2Packages.pescea`,
  "Python interface to Escea fireplaces",
);

/**
 * Python library and tool for generating .pex (Python EXecutable) files
 */
export const pex = mkPackage(
  nixRaw`pkgs.python2Packages.pex`,
  "Python library and tool for generating .pex (Python EXecutable) files",
);

/**
 * A module for editing JPEG EXIF data
 */
export const pexif = mkPackage(
  nixRaw`pkgs.python2Packages.pexif`,
  "A module for editing JPEG EXIF data",
);

/**
 * Automate interactive console applications such as ssh, ftp, etc
 */
export const pexpect = mkPackage(
  nixRaw`pkgs.python2Packages.pexpect`,
  "Automate interactive console applications such as ssh, ftp, etc",
);

/**
 * Python port of the fzy fuzzy string matching algorithm
 */
export const pfzy = mkPackage(
  nixRaw`pkgs.python2Packages.pfzy`,
  "Python port of the fzy fuzzy string matching algorithm",
);

/**
 * Python driver for PostgreSQL
 */
export const pg8000 = mkPackage(
  nixRaw`pkgs.python2Packages.pg8000`,
  "Python driver for PostgreSQL",
);

/**
 * Command-line interface for PostgreSQL
 */
export const pgcli = mkPackage(
  nixRaw`pkgs.python2Packages.pgcli`,
  "Command-line interface for PostgreSQL",
);

/**
 * PostgreSQL Languages AST and statements prettifier
 */
export const pglast = mkPackage(
  nixRaw`pkgs.python2Packages.pglast`,
  "PostgreSQL Languages AST and statements prettifier",
);

/**
 * Python Library for learning (Structure and Parameter), inference (Probabilistic and Causal), and simulations in Bayesian Networks
 */
export const pgmpy = mkPackage(
  nixRaw`pkgs.python2Packages.pgmpy`,
  "Python Library for learning (Structure and Parameter), inference (Probabilistic and Causal), and simulations in Bayesian Networks",
);

/**
 * Python library for parsing PGP packets
 */
export const pgpdump = mkPackage(
  nixRaw`pkgs.python2Packages.pgpdump`,
  "Python library for parsing PGP packets",
);

/**
 * Pretty Good Privacy for Python
 */
export const pgpy = mkPackage(
  nixRaw`pkgs.python2Packages.pgpy`,
  "Pretty Good Privacy for Python",
);

/**
 * Checks the syntax of Postgresql SQL files
 */
export const pgsanity = mkPackage(
  nixRaw`pkgs.python2Packages.pgsanity`,
  "Checks the syntax of Postgresql SQL files",
);

/**
 * Meta-commands handler for Postgres Database
 */
export const pgspecial = mkPackage(
  nixRaw`pkgs.python2Packages.pgspecial`,
  "Meta-commands handler for Postgres Database",
);

/**
 * Pgvector support for Python
 */
export const pgvector = mkPackage(
  nixRaw`pkgs.python2Packages.pgvector`,
  "Pgvector support for Python",
);

/**
 * A library for Partially Homomorphic Encryption in Python
 */
export const phe = mkPackage(
  nixRaw`pkgs.python2Packages.phe`,
  "A library for Partially Homomorphic Encryption in Python",
);

/**
 * Phi_K correlation analyzer library
 */
export const phik = mkPackage(
  nixRaw`pkgs.python2Packages.phik`,
  "Phi_K correlation analyzer library",
);

/**
 * Python module for receiving caller ID and call rejection
 */
export const phone_modem = mkPackage(
  nixRaw`pkgs.python2Packages.phone-modem`,
  "Python module for receiving caller ID and call rejection",
);

/**
 * Simple text to phones converter for multiple languages
 */
export const phonemizer = mkPackage(
  nixRaw`pkgs.python2Packages.phonemizer`,
  "Simple text to phones converter for multiple languages",
);

/**
 * Python module for handling international phone numbers
 */
export const phonenumbers = mkPackage(
  nixRaw`pkgs.python2Packages.phonenumbers`,
  "Python module for handling international phone numbers",
);

/**
 * Modulefor phonon calculations at harmonic and quasi-harmonic levels
 */
export const phonopy = mkPackage(
  nixRaw`pkgs.python2Packages.phonopy`,
  "Modulefor phonon calculations at harmonic and quasi-harmonic levels",
);

/**
 * A port of the serialize and unserialize functions of PHP to Python
 */
export const phpserialize = mkPackage(
  nixRaw`pkgs.python2Packages.phpserialize`,
  "A port of the serialize and unserialize functions of PHP to Python",
);

/**
 * Factory and registry pattern for Python classes
 */
export const phx_class_registry = mkPackage(
  nixRaw`pkgs.python2Packages.phx-class-registry`,
  "Factory and registry pattern for Python classes",
);

/**
 * 1Wire Sensor Library for Raspberry PI
 */
export const pi1wire = mkPackage(
  nixRaw`pkgs.python2Packages.pi1wire`,
  "1Wire Sensor Library for Raspberry PI",
);

/**
 * A piano transcription inference package
 */
export const piano_transcription_inference = mkPackage(
  nixRaw`pkgs.python2Packages.piano-transcription-inference`,
  "A piano transcription inference package",
);

/**
 * Simple CoAP (RFC7252) toolkit
 */
export const piccata = mkPackage(
  nixRaw`pkgs.python2Packages.piccata`,
  "Simple CoAP (RFC7252) toolkit",
);

/**
 * Clean and modern Sphinx theme
 */
export const piccolo_theme = mkPackage(
  nixRaw`pkgs.python2Packages.piccolo-theme`,
  "Clean and modern Sphinx theme",
);

/**
 * Module to create curses-based interactive selection list in the terminal
 */
export const pick = mkPackage(
  nixRaw`pkgs.python2Packages.pick`,
  "Module to create curses-based interactive selection list in the terminal",
);

/**
 * Tiny 'shelve'-like database with concurrency support
 */
export const pickleshare = mkPackage(
  nixRaw`pkgs.python2Packages.pickleshare`,
  "Tiny 'shelve'-like database with concurrency support",
);

/**
 * Opinionated dependency injection framework
 */
export const picobox = mkPackage(
  nixRaw`pkgs.python2Packages.picobox`,
  "Opinionated dependency injection framework",
);

/**
 * A Python interface to conic optimization solvers
 */
export const picos = mkPackage(
  nixRaw`pkgs.python2Packages.picos`,
  "A Python interface to conic optimization solvers",
);

/**
 * Tool to simplify SVGs
 */
export const picosvg = mkPackage(
  nixRaw`pkgs.python2Packages.picosvg`,
  "Tool to simplify SVGs",
);

/**
 * Pidfile featuring stale detection and file-locking
 */
export const pid = mkPackage(
  nixRaw`pkgs.python2Packages.pid`,
  "Pidfile featuring stale detection and file-locking",
);

/**
 * Bringing the power of python to stream editing
 */
export const piep = mkPackage(
  nixRaw`pkgs.python2Packages.piep`,
  "Bringing the power of python to stream editing",
);

/**
 * Simplify Exif manipulations with Python
 */
export const piexif = mkPackage(
  nixRaw`pkgs.python2Packages.piexif`,
  "Simplify Exif manipulations with Python",
);

/**
 * Library and resources for PiJuice HAT for Raspberry Pi
 */
export const pijuice = mkPackage(
  nixRaw`pkgs.python2Packages.pijuice`,
  "Library and resources for PiJuice HAT for Raspberry Pi",
);

/**
 * Pure-Python implementation of the AMQP 0-9-1 protocol
 */
export const pika = mkPackage(
  nixRaw`pkgs.python2Packages.pika`,
  "Pure-Python implementation of the AMQP 0-9-1 protocol",
);

/**
 * Pools for pikas.
 */
export const pika_pool = mkPackage(
  nixRaw`pkgs.python2Packages.pika-pool`,
  "Pools for pikas.",
);

/**
 * Read and write PDFs with Python, powered by qpdf
 */
export const pikepdf = mkPackage(
  nixRaw`pkgs.python2Packages.pikepdf`,
  "Read and write PDFs with Python, powered by qpdf",
);

/**
 * A collection of utilities and processors for the Python Imaging Library
 */
export const pilkit = mkPackage(
  nixRaw`pkgs.python2Packages.pilkit`,
  "A collection of utilities and processors for the Python Imaging Library",
);

/**
 * The friendly PIL fork (Python Imaging Library)
 */
export const pillow = mkPackage(
  nixRaw`pkgs.python2Packages.pillow`,
  "The friendly PIL fork (Python Imaging Library)",
);

/**
 * Python library for working with HEIF images and plugin for Pillow
 */
export const pillow_heif = mkPackage(
  nixRaw`pkgs.python2Packages.pillow-heif`,
  "Python library for working with HEIF images and plugin for Pillow",
);

/**
 * The friendly PIL fork - SIMD version
 */
export const pillow_simd = mkPackage(
  nixRaw`pkgs.python2Packages.pillow-simd`,
  "The friendly PIL fork - SIMD version",
);

/**
 * Eases the transition from PIL to Pillow for Python packages
 */
export const pillowfight = mkPackage(
  nixRaw`pkgs.python2Packages.pillowfight`,
  "Eases the transition from PIL to Pillow for Python packages",
);

/**
 * Module to load video and sequential images in various formats
 */
export const pims = mkPackage(
  nixRaw`pkgs.python2Packages.pims`,
  "Module to load video and sequential images in various formats",
);

/**
 * A Python wrapper for Pinboard.in
 */
export const pinboard = mkPackage(
  nixRaw`pkgs.python2Packages.pinboard`,
  "A Python wrapper for Pinboard.in",
);

/**
 * The Pinecone python client
 */
export const pinecone_client = mkPackage(
  nixRaw`pkgs.python2Packages.pinecone-client`,
  "The Pinecone python client",
);

/**
 * A pure python3 version of ICMP ping implementation using raw socket
 */
export const ping3 = mkPackage(
  nixRaw`pkgs.python2Packages.ping3`,
  "A pure python3 version of ICMP ping implementation using raw socket",
);

/**
 * A fast and flexible implementation of Rigid Body Dynamics algorithms and their analytical derivatives
 */
export const pinocchio = mkPackage(
  nixRaw`pkgs.python2Packages.pinocchio`,
  "A fast and flexible implementation of Rigid Body Dynamics algorithms and their analytical derivatives",
);

/**
 * Physical quantities module
 */
export const pint = mkPackage(
  nixRaw`pkgs.python2Packages.pint`,
  "Physical quantities module",
);

/**
 * Pandas support for pint
 */
export const pint_pandas = mkPackage(
  nixRaw`pkgs.python2Packages.pint-pandas`,
  "Pandas support for pint",
);

/**
 * The PyPA recommended tool for installing Python packages
 */
export const pip = mkPackage(
  nixRaw`pkgs.python2Packages.pip`,
  "The PyPA recommended tool for installing Python packages",
);

export const pipBuildHook = mkPackage(
  nixRaw`pkgs.python2Packages.pipBuildHook`,
  "",
);

export const pipInstallHook = mkPackage(
  nixRaw`pkgs.python2Packages.pipInstallHook`,
  "",
);

/**
 * Importable pip API
 */
export const pip_api = mkPackage(
  nixRaw`pkgs.python2Packages.pip-api`,
  "Importable pip API",
);

/**
 * Module to parse pip requirements
 */
export const pip_requirements_parser = mkPackage(
  nixRaw`pkgs.python2Packages.pip-requirements-parser`,
  "Module to parse pip requirements",
);

/**
 * Keeps your pinned dependencies fresh
 */
export const pip_tools = mkPackage(
  nixRaw`pkgs.python2Packages.pip-tools`,
  "Keeps your pinned dependencies fresh",
);

/**
 * pip update helpers
 */
export const pipdate = mkPackage(
  nixRaw`pkgs.python2Packages.pipdate`,
  "pip update helpers",
);

/**
 * Command line utility to show dependency tree of packages
 */
export const pipdeptree = mkPackage(
  nixRaw`pkgs.python2Packages.pipdeptree`,
  "Command line utility to show dependency tree of packages",
);

/**
 * This is simple migration script, migrate pipenv to poetry
 */
export const pipenv_poetry_migrate = mkPackage(
  nixRaw`pkgs.python2Packages.pipenv-poetry-migrate`,
  "This is simple migration script, migrate pipenv to poetry",
);

/**
 * Phonemization libary used by Piper text to speech system
 */
export const piper_phonemize = mkPackage(
  nixRaw`pkgs.python2Packages.piper-phonemize`,
  "Phonemization libary used by Piper text to speech system",
);

/**
 * Install and run Python applications in isolated environments
 */
export const pipx = mkPackage(
  nixRaw`pkgs.python2Packages.pipx`,
  "Install and run Python applications in isolated environments",
);

/**
 * A Python binding for Coin
 */
export const pivy = mkPackage(
  nixRaw`pkgs.python2Packages.pivy`,
  "A Python binding for Coin",
);

/**
 * Display images on a kitty terminal with optional resizing
 */
export const pixcat = mkPackage(
  nixRaw`pkgs.python2Packages.pixcat`,
  "Display images on a kitty terminal with optional resizing",
);

/**
 * Pixel-level image comparison library
 */
export const pixelmatch = mkPackage(
  nixRaw`pkgs.python2Packages.pixelmatch`,
  "Pixel-level image comparison library",
);

/**
 * A multimedia communication library written in C, implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE
 */
export const pjsua2 = mkPackage(
  nixRaw`pkgs.python2Packages.pjsua2`,
  "A multimedia communication library written in C, implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE",
);

/**
 * Python module to work with PKCE
 */
export const pkce = mkPackage(
  nixRaw`pkgs.python2Packages.pkce`,
  "Python module to work with PKCE",
);

/**
 * Python metadata sharing at runtime
 */
export const pkg_about = mkPackage(
  nixRaw`pkgs.python2Packages.pkg-about`,
  "Python metadata sharing at runtime",
);

/**
 * Interface Python with pkg-config
 */
export const pkgconfig = mkPackage(
  nixRaw`pkgs.python2Packages.pkgconfig`,
  "Interface Python with pkg-config",
);

/**
 * Query metadatdata from sdists, bdists or installed packages
 */
export const pkginfo = mkPackage(
  nixRaw`pkgs.python2Packages.pkginfo`,
  "Query metadatdata from sdists, bdists or installed packages",
);

/**
 * Query metadatdata from sdists, bdists or installed packages
 */
export const pkginfo2 = mkPackage(
  nixRaw`pkgs.python2Packages.pkginfo2`,
  "Query metadatdata from sdists, bdists or installed packages",
);

/**
 * A backport of Python 3.9’s pkgutil.resolve_name.
 */
export const pkgutil_resolve_name = mkPackage(
  nixRaw`pkgs.python2Packages.pkgutil-resolve-name`,
  "A backport of Python 3.9’s pkgutil.resolve_name.",
);

/**
 * Toolkit for multi-domain Chinese word segmentation
 */
export const pkuseg = mkPackage(
  nixRaw`pkgs.python2Packages.pkuseg`,
  "Toolkit for multi-domain Chinese word segmentation",
);

/**
 * A Python packaging utility library
 */
export const pkutils = mkPackage(
  nixRaw`pkgs.python2Packages.pkutils`,
  "A Python packaging utility library",
);

/**
 * Parsing the Command Line the Easy Way
 */
export const plac = mkPackage(
  nixRaw`pkgs.python2Packages.plac`,
  "Parsing the Command Line the Easy Way",
);

/**
 * Python client library for the Plaid API and Link
 */
export const plaid_python = mkPackage(
  nixRaw`pkgs.python2Packages.plaid-python`,
  "Python client library for the Plaid API and Link",
);

/**
 * Python interface to a plantuml web service instead of having to run java locally
 */
export const plantuml = mkPackage(
  nixRaw`pkgs.python2Packages.plantuml`,
  "Python interface to a plantuml web service instead of having to run java locally",
);

/**
 * PlantUML plugin for Python-Markdown
 */
export const plantuml_markdown = mkPackage(
  nixRaw`pkgs.python2Packages.plantuml-markdown`,
  "PlantUML plugin for Python-Markdown",
);

export const plaster = mkPackage(
  nixRaw`pkgs.python2Packages.plaster`,
  "",
);

/**
 * PasteDeploy binding to the plaster configuration loader
 */
export const plaster_pastedeploy = mkPackage(
  nixRaw`pkgs.python2Packages.plaster-pastedeploy`,
  "PasteDeploy binding to the plaster configuration loader",
);

/**
 * Module for determining appropriate platform-specific directories
 */
export const platformdirs = mkPackage(
  nixRaw`pkgs.python2Packages.platformdirs`,
  "Module for determining appropriate platform-specific directories",
);

/**
 * Pure Python, cross platform, single function module with no dependencies for playing sounds
 */
export const playsound = mkPackage(
  nixRaw`pkgs.python2Packages.playsound`,
  "Pure Python, cross platform, single function module with no dependencies for playing sounds",
);

/**
 * Python version of the Playwright testing and automation library
 */
export const playwright = mkPackage(
  nixRaw`pkgs.python2Packages.playwright`,
  "Python version of the Playwright testing and automation library",
);

/**
 * Python bindings for the Plex API
 */
export const plexapi = mkPackage(
  nixRaw`pkgs.python2Packages.plexapi`,
  "Python bindings for the Plex API",
);

/**
 * Handles the authorization flow to obtain tokens from Plex.tv via external redirection
 */
export const plexauth = mkPackage(
  nixRaw`pkgs.python2Packages.plexauth`,
  "Handles the authorization flow to obtain tokens from Plex.tv via external redirection",
);

/**
 * Library to react to events issued over Plex websockets
 */
export const plexwebsocket = mkPackage(
  nixRaw`pkgs.python2Packages.plexwebsocket`,
  "Library to react to events issued over Plex websockets",
);

/**
 * Fitting power-law distributions to empirical data
 */
export const plfit = mkPackage(
  nixRaw`pkgs.python2Packages.plfit`,
  "Fitting power-law distributions to empirical data",
);

/**
 * Testing infrastructure for Zope and Plone projects
 */
export const plone_testing = mkPackage(
  nixRaw`pkgs.python2Packages.plone-testing`,
  "Testing infrastructure for Zope and Plone projects",
);

/**
 * Plotting directly in the terminal
 */
export const plotext = mkPackage(
  nixRaw`pkgs.python2Packages.plotext`,
  "Plotting directly in the terminal",
);

/**
 * Python plotting library for collaborative, interactive, publication-quality graphs
 */
export const plotly = mkPackage(
  nixRaw`pkgs.python2Packages.plotly`,
  "Python plotting library for collaborative, interactive, publication-quality graphs",
);

/**
 * Grammar of graphics for python
 */
export const plotnine = mkPackage(
  nixRaw`pkgs.python2Packages.plotnine`,
  "Grammar of graphics for python",
);

/**
 * Plugin and hook calling mechanisms for Python
 */
export const pluggy = mkPackage(
  nixRaw`pkgs.python2Packages.pluggy`,
  "Plugin and hook calling mechanisms for Python",
);

/**
 * A support library for building plugins sytems in Python
 */
export const pluginbase = mkPackage(
  nixRaw`pkgs.python2Packages.pluginbase`,
  "A support library for building plugins sytems in Python",
);

/**
 * Library that provides plugin functionality for ScanCode toolkit
 */
export const plugincode = mkPackage(
  nixRaw`pkgs.python2Packages.plugincode`,
  "Library that provides plugin functionality for ScanCode toolkit",
);

/**
 * A Generic plug-in system for python applications
 */
export const plugnplay = mkPackage(
  nixRaw`pkgs.python2Packages.plugnplay`,
  "A Generic plug-in system for python applications",
);

/**
 * Python module for Plugwise Smiles, Stretch and USB stick
 */
export const plugwise = mkPackage(
  nixRaw`pkgs.python2Packages.plugwise`,
  "Python module for Plugwise Smiles, Stretch and USB stick",
);

/**
 * Classes and utilities for packing/unpacking bytes
 */
export const plum_py = mkPackage(
  nixRaw`pkgs.python2Packages.plum-py`,
  "Classes and utilities for packing/unpacking bytes",
);

/**
 *  Plumbum: Shell Combinators 
 */
export const plumbum = mkPackage(
  nixRaw`pkgs.python2Packages.plumbum`,
  " Plumbum: Shell Combinators ",
);

/**
 * Dynamic code loading framework for building pluggable Python distributions
 */
export const plux = mkPackage(
  nixRaw`pkgs.python2Packages.plux`,
  "Dynamic code loading framework for building pluggable Python distributions",
);

/**
 * PLY (Python Lex-Yacc), an implementation of the lex and yacc parsing tools for Python
 */
export const ply = mkPackage(
  nixRaw`pkgs.python2Packages.ply`,
  "PLY (Python Lex-Yacc), an implementation of the lex and yacc parsing tools for Python",
);

/**
 * Plyer is a platform-independent api to use features commonly found on various platforms
 */
export const plyer = mkPackage(
  nixRaw`pkgs.python2Packages.plyer`,
  "Plyer is a platform-independent api to use features commonly found on various platforms",
);

/**
 * NumPy-based text/binary PLY file reader/writer for Python
 */
export const plyfile = mkPackage(
  nixRaw`pkgs.python2Packages.plyfile`,
  "NumPy-based text/binary PLY file reader/writer for Python",
);

/**
 * A general-purpose parser built on top of PLY
 */
export const plyplus = mkPackage(
  nixRaw`pkgs.python2Packages.plyplus`,
  "A general-purpose parser built on top of PLY",
);

/**
 * Fast and feature-rich Python interface to LevelDB
 */
export const plyvel = mkPackage(
  nixRaw`pkgs.python2Packages.plyvel`,
  "Fast and feature-rich Python interface to LevelDB",
);

/**
 * A statistical library designed to fill the void in Python's time series analysis capabilities, including the equivalent of R's auto.arima function
 */
export const pmdarima = mkPackage(
  nixRaw`pkgs.python2Packages.pmdarima`,
  "A statistical library designed to fill the void in Python's time series analysis capabilities, including the equivalent of R's auto.arima function",
);

/**
 * Autogenerated and statically check-able pmdsky-debug symbol definitions for Python
 */
export const pmdsky_debug_py = mkPackage(
  nixRaw`pkgs.python2Packages.pmdsky-debug-py`,
  "Autogenerated and statically check-able pmdsky-debug symbol definitions for Python",
);

/**
 * Library to read data from environment sensors
 */
export const pmsensor = mkPackage(
  nixRaw`pkgs.python2Packages.pmsensor`,
  "Library to read data from environment sensors",
);

/**
 * A toolkit for building high-level compound widgets in Python using the Tkinter module
 */
export const pmw = mkPackage(
  nixRaw`pkgs.python2Packages.pmw`,
  "A toolkit for building high-level compound widgets in Python using the Tkinter module",
);

/**
 * a small program that converts LaTeX snippets to png
 */
export const pnglatex = mkPackage(
  nixRaw`pkgs.python2Packages.pnglatex`,
  "a small program that converts LaTeX snippets to png",
);

/**
 * Wrapper for the pocket API
 */
export const pocket = mkPackage(
  nixRaw`pkgs.python2Packages.pocket`,
  "Wrapper for the pocket API",
);

/**
 * Module to parse podcasts
 */
export const podcastparser = mkPackage(
  nixRaw`pkgs.python2Packages.podcastparser`,
  "Module to parse podcasts",
);

/**
 * Application that generates RSS feeds for podcast episodes from local audio files
 */
export const podcats = mkPackage(
  nixRaw`pkgs.python2Packages.podcats`,
  "Application that generates RSS feeds for podcast episodes from local audio files",
);

/**
 * Python bindings for Podman's RESTful API
 */
export const podman = mkPackage(
  nixRaw`pkgs.python2Packages.podman`,
  "Python bindings for Podman's RESTful API",
);

/**
 * Core utilities for Poetry
 */
export const poetry_core = mkPackage(
  nixRaw`pkgs.python2Packages.poetry-core`,
  "Core utilities for Poetry",
);

/**
 * Plugin for Poetry to enable dynamic versioning based on VCS tags
 */
export const poetry_dynamic_versioning = mkPackage(
  nixRaw`pkgs.python2Packages.poetry-dynamic-versioning`,
  "Plugin for Poetry to enable dynamic versioning based on VCS tags",
);

/**
 * A semantic versioning library for Python.
 */
export const poetry_semver = mkPackage(
  nixRaw`pkgs.python2Packages.poetry-semver`,
  "A semantic versioning library for Python.",
);

/**
 * Multipole moment solver for quantum chemistry and polarisable embedding
 */
export const polarizationsolver = mkPackage(
  nixRaw`pkgs.python2Packages.polarizationsolver`,
  "Multipole moment solver for quantum chemistry and polarisable embedding",
);

/**
 * Fast multi-threaded DataFrame library in Rust | Python | Node.js 
 */
export const polars = mkPackage(
  nixRaw`pkgs.python2Packages.polars`,
  "Fast multi-threaded DataFrame library in Rust | Python | Node.js ",
);

/**
 * A library to manipulate gettext files (po and mo files)
 */
export const polib = mkPackage(
  nixRaw`pkgs.python2Packages.polib`,
  "A library to manipulate gettext files (po and mo files)",
);

/**
 * Python module for generating IAM least privilege policies
 */
export const policy_sentry = mkPackage(
  nixRaw`pkgs.python2Packages.policy-sentry`,
  "Python module for generating IAM least privilege policies",
);

/**
 * Parse and Process AWS IAM Policies, Statements, ARNs and wildcards
 */
export const policyuniverse = mkPackage(
  nixRaw`pkgs.python2Packages.policyuniverse`,
  "Parse and Process AWS IAM Policies, Statements, ARNs and wildcards",
);

/**
 * Powerful polling utility in Python
 */
export const polling = mkPackage(
  nixRaw`pkgs.python2Packages.polling`,
  "Powerful polling utility in Python",
);

/**
 * Polygon is a python package that handles polygonal shapes in 2D
 */
export const polygon3 = mkPackage(
  nixRaw`pkgs.python2Packages.polygon3`,
  "Polygon is a python package that handles polygonal shapes in 2D",
);

/**
 * Python implementation of Google's Encoded Polyline Algorithm Format
 */
export const polyline = mkPackage(
  nixRaw`pkgs.python2Packages.polyline`,
  "Python implementation of Google's Encoded Polyline Algorithm Format",
);

/**
 * Probabilistic and graphical models for Python, implemented in cython for speed
 */
export const pomegranate = mkPackage(
  nixRaw`pkgs.python2Packages.pomegranate`,
  "Probabilistic and graphical models for Python, implemented in cython for speed",
);

/**
 * Collection of Python utilities, tools, classes and functions
 */
export const pontos = mkPackage(
  nixRaw`pkgs.python2Packages.pontos`,
  "Collection of Python utilities, tools, classes and functions",
);

/**
 * Library for advanced object-relational mapping
 */
export const pony = mkPackage(
  nixRaw`pkgs.python2Packages.pony`,
  "Library for advanced object-relational mapping",
);

/**
 * Make your database over PonyORM searchable
 */
export const ponywhoosh = mkPackage(
  nixRaw`pkgs.python2Packages.ponywhoosh`,
  "Make your database over PonyORM searchable",
);

/**
 * A friend to fetch your data files.
 */
export const pooch = mkPackage(
  nixRaw`pkgs.python2Packages.pooch`,
  "A friend to fetch your data files.",
);

/**
 * HTTP traffic mocking and testing made simple in Python
 */
export const pook = mkPackage(
  nixRaw`pkgs.python2Packages.pook`,
  "HTTP traffic mocking and testing made simple in Python",
);

/**
 * Python module to access PoolSense device
 */
export const poolsense = mkPackage(
  nixRaw`pkgs.python2Packages.poolsense`,
  "Python module to access PoolSense device",
);

export const poppler_qt5 = mkPackage(
  nixRaw`pkgs.python2Packages.poppler-qt5`,
  "",
);

/**
 * Command-line utility and library that helps with TCP port managment
 */
export const port_for = mkPackage(
  nixRaw`pkgs.python2Packages.port-for`,
  "Command-line utility and library that helps with TCP port managment",
);

/**
 * A library to provide an easy API to file locking
 */
export const portalocker = mkPackage(
  nixRaw`pkgs.python2Packages.portalocker`,
  "A library to provide an easy API to file locking",
);

/**
 * Monitor TCP ports for bound or unbound states
 */
export const portend = mkPackage(
  nixRaw`pkgs.python2Packages.portend`,
  "Monitor TCP ports for bound or unbound states",
);

/**
 * Library to choose unique available network ports
 */
export const portpicker = mkPackage(
  nixRaw`pkgs.python2Packages.portpicker`,
  "Library to choose unique available network ports",
);

/**
 * POSIX IPC primitives (semaphores, shared memory and message queues)
 */
export const posix_ipc = mkPackage(
  nixRaw`pkgs.python2Packages.posix_ipc`,
  "POSIX IPC primitives (semaphores, shared memory and message queues)",
);

/**
 * Official PostHog python library
 */
export const posthog = mkPackage(
  nixRaw`pkgs.python2Packages.posthog`,
  "Official PostHog python library",
);

/**
 * Python Optimal Transport Library
 */
export const pot = mkPackage(
  nixRaw`pkgs.python2Packages.pot`,
  "Python Optimal Transport Library",
);

/**
 * Python API database tools for accessing the NIST Interatomic Potentials Repository
 */
export const potentials = mkPackage(
  nixRaw`pkgs.python2Packages.potentials`,
  "Python API database tools for accessing the NIST Interatomic Potentials Repository",
);

/**
 * A pure Python OTR implementation
 */
export const potr = mkPackage(
  nixRaw`pkgs.python2Packages.potr`,
  "A pure Python OTR implementation",
);

/**
 * Cross-platform system power status information
 */
export const power = mkPackage(
  nixRaw`pkgs.python2Packages.power`,
  "Cross-platform system power status information",
);

/**
 * The ultimate statusline/prompt utility
 */
export const powerline = mkPackage(
  nixRaw`pkgs.python2Packages.powerline`,
  "The ultimate statusline/prompt utility",
);

/**
 * Segment for Powerline showing the current memory usage in percent or absolute values.
 */
export const powerline_mem_segment = mkPackage(
  nixRaw`pkgs.python2Packages.powerline-mem-segment`,
  "Segment for Powerline showing the current memory usage in percent or absolute values.",
);

/**
 * Utilities for filesystem exploration and automated builds
 */
export const pox = mkPackage(
  nixRaw`pkgs.python2Packages.pox`,
  "Utilities for filesystem exploration and automated builds",
);

/**
 * A lightweight YAML Parser for Python
 */
export const poyo = mkPackage(
  nixRaw`pkgs.python2Packages.poyo`,
  "A lightweight YAML Parser for Python",
);

/**
 * Python library for computing fuzzy hashes (ssdeep)
 */
export const ppdeep = mkPackage(
  nixRaw`pkgs.python2Packages.ppdeep`,
  "Python library for computing fuzzy hashes (ssdeep)",
);

/**
 * Distributed and parallel Python
 */
export const ppft = mkPackage(
  nixRaw`pkgs.python2Packages.ppft`,
  "Distributed and parallel Python",
);

/**
 * A Python wrapper for ppl
 */
export const pplpy = mkPackage(
  nixRaw`pkgs.python2Packages.pplpy`,
  "A Python wrapper for ppl",
);

/**
 * A drop-in replacement for pprint that's actually pretty
 */
export const pprintpp = mkPackage(
  nixRaw`pkgs.python2Packages.pprintpp`,
  "A drop-in replacement for pprint that's actually pretty",
);

/**
 * Proxy server that can tunnel among remote servers by regex rules
 */
export const pproxy = mkPackage(
  nixRaw`pkgs.python2Packages.pproxy`,
  "Proxy server that can tunnel among remote servers by regex rules",
);

/**
 * Python implementation of the Predictive Power Score (PPS)
 */
export const ppscore = mkPackage(
  nixRaw`pkgs.python2Packages.ppscore`,
  "Python implementation of the Predictive Power Score (PPS)",
);

/**
 * PQ is a transactional queue for PostgreSQL
 */
export const pq = mkPackage(
  nixRaw`pkgs.python2Packages.pq`,
  "PQ is a transactional queue for PostgreSQL",
);

/**
 * Resolving Swagger/OpenAPI 2.0 and 3.0.0 Parser
 */
export const prance = mkPackage(
  nixRaw`pkgs.python2Packages.prance`,
  "Resolving Swagger/OpenAPI 2.0 and 3.0.0 Parser",
);

/**
 * Python Reddit API wrapper
 */
export const praw = mkPackage(
  nixRaw`pkgs.python2Packages.praw`,
  "Python Reddit API wrapper",
);

/**
 * Low-level communication layer for PRAW
 */
export const prawcore = mkPackage(
  nixRaw`pkgs.python2Packages.prawcore`,
  "Low-level communication layer for PRAW",
);

/**
 * Python client for the Prayer Times API
 */
export const prayer_times_calculator = mkPackage(
  nixRaw`pkgs.python2Packages.prayer-times-calculator`,
  "Python client for the Prayer Times API",
);

/**
 * Some out-of-the-box hooks for pre-commit
 */
export const pre_commit_hooks = mkPackage(
  nixRaw`pkgs.python2Packages.pre-commit-hooks`,
  "Some out-of-the-box hooks for pre-commit",
);

/**
 * Internationalized usernames and passwords
 */
export const precis_i18n = mkPackage(
  nixRaw`pkgs.python2Packages.precis-i18n`,
  "Internationalized usernames and passwords",
);

/**
 * Prefixed alternative numeric library
 */
export const prefixed = mkPackage(
  nixRaw`pkgs.python2Packages.prefixed`,
  "Prefixed alternative numeric library",
);

/**
 * Assertion library for Python
 */
export const preggy = mkPackage(
  nixRaw`pkgs.python2Packages.preggy`,
  "Assertion library for Python",
);

/**
 * Turns CSS blocks into style attributes 
 */
export const premailer = mkPackage(
  nixRaw`pkgs.python2Packages.premailer`,
  "Turns CSS blocks into style attributes ",
);

/**
 * Klipper GCode Preprocessor for Object Cancellation
 */
export const preprocess_cancellation = mkPackage(
  nixRaw`pkgs.python2Packages.preprocess-cancellation`,
  "Klipper GCode Preprocessor for Object Cancellation",
);

/**
 * Cython hash tables that assume keys are pre-hashed
 */
export const preshed = mkPackage(
  nixRaw`pkgs.python2Packages.preshed`,
  "Cython hash tables that assume keys are pre-hashed",
);

/**
 * Module for stubbing
 */
export const pretend = mkPackage(
  nixRaw`pkgs.python2Packages.pretend`,
  "Module for stubbing",
);

/**
 * Display tabular data in a visually appealing ASCII table format
 */
export const prettytable = mkPackage(
  nixRaw`pkgs.python2Packages.prettytable`,
  "Display tabular data in a visually appealing ASCII table format",
);

/**
 * Cython interface for C++ primecount library
 */
export const primecountpy = mkPackage(
  nixRaw`pkgs.python2Packages.primecountpy`,
  "Cython interface for C++ primecount library",
);

/**
 * Oligo analysis and primer design
 */
export const primer3 = mkPackage(
  nixRaw`pkgs.python2Packages.primer3`,
  "Oligo analysis and primer design",
);

/**
 * A pure-Python implementation of the HTTP/2 priority tree
 */
export const priority = mkPackage(
  nixRaw`pkgs.python2Packages.priority`,
  "A pure-Python implementation of the HTTP/2 priority tree",
);

/**
 * Rison encoder/decoder
 */
export const prison = mkPackage(
  nixRaw`pkgs.python2Packages.prison`,
  "Rison encoder/decoder",
);

/**
 * LDAP Proxy to intercept LDAP binds and authenticate against privacyIDEA
 */
export const privacyidea_ldap_proxy = mkPackage(
  nixRaw`pkgs.python2Packages.privacyidea-ldap-proxy`,
  "LDAP Proxy to intercept LDAP binds and authenticate against privacyIDEA",
);

/**
 * A Python test framework that extends Python's built-in unittest module and Nose with features from TestNG
 */
export const proboscis = mkPackage(
  nixRaw`pkgs.python2Packages.proboscis`,
  "A Python test framework that extends Python's built-in unittest module and Nose with features from TestNG",
);

/**
 * Tools for testing processes
 */
export const process_tests = mkPackage(
  nixRaw`pkgs.python2Packages.process-tests`,
  "Tools for testing processes",
);

/**
 * Parser to process monitor file formats
 */
export const procmon_parser = mkPackage(
  nixRaw`pkgs.python2Packages.procmon-parser`,
  "Parser to process monitor file formats",
);

/**
 * Access Python dictionary as a class with type hinting and autocompletion
 */
export const prodict = mkPackage(
  nixRaw`pkgs.python2Packages.prodict`,
  "Access Python dictionary as a class with type hinting and autocompletion",
);

/**
 * Logs and progress bars manager for Python
 */
export const proglog = mkPackage(
  nixRaw`pkgs.python2Packages.proglog`,
  "Logs and progress bars manager for Python",
);

/**
 * Easy to use progress bars
 */
export const progress = mkPackage(
  nixRaw`pkgs.python2Packages.progress`,
  "Easy to use progress bars",
);

/**
 * Text progressbar library for python
 */
export const progressbar = mkPackage(
  nixRaw`pkgs.python2Packages.progressbar`,
  "Text progressbar library for python",
);

/**
 * Text progressbar library
 */
export const progressbar2 = mkPackage(
  nixRaw`pkgs.python2Packages.progressbar2`,
  "Text progressbar library",
);

/**
 * Text progressbar library for python
 */
export const progressbar33 = mkPackage(
  nixRaw`pkgs.python2Packages.progressbar33`,
  "Text progressbar library for python",
);

/**
 * Prometheus instrumentation library for Python applications
 */
export const prometheus_client = mkPackage(
  nixRaw`pkgs.python2Packages.prometheus-client`,
  "Prometheus instrumentation library for Python applications",
);

/**
 * Prometheus exporter for Flask applications
 */
export const prometheus_flask_exporter = mkPackage(
  nixRaw`pkgs.python2Packages.prometheus-flask-exporter`,
  "Prometheus exporter for Flask applications",
);

/**
 * Ultra-performant Promise implementation in Python
 */
export const promise = mkPackage(
  nixRaw`pkgs.python2Packages.promise`,
  "Ultra-performant Promise implementation in Python",
);

/**
 * Python library for building powerful interactive command lines
 */
export const prompt_toolkit = mkPackage(
  nixRaw`pkgs.python2Packages.prompt-toolkit`,
  "Python library for building powerful interactive command lines",
);

/**
 * A simple client to fetch prompts from Prompt Hub using its REST API.
 */
export const prompthub_py = mkPackage(
  nixRaw`pkgs.python2Packages.prompthub-py`,
  "A simple client to fetch prompts from Prompt Hub using its REST API.",
);

/**
 * Useful property variants for Python programming
 */
export const property_manager = mkPackage(
  nixRaw`pkgs.python2Packages.property-manager`,
  "Useful property variants for Python programming",
);

/**
 * A tool for producing high quality forecasts for time series data that has multiple seasonality with linear or non-linear growth
 */
export const prophet = mkPackage(
  nixRaw`pkgs.python2Packages.prophet`,
  "A tool for producing high quality forecasts for time series data that has multiple seasonality with linear or non-linear growth",
);

/**
 * A predictor of the pKa values of ionizable groups in proteins and protein-ligand complexes based in the 3D structure
 */
export const propka = mkPackage(
  nixRaw`pkgs.python2Packages.propka`,
  "A predictor of the pKa values of ionizable groups in proteins and protein-ligand complexes based in the 3D structure",
);

/**
 * A pure-Python robots.txt parser with support for modern conventions
 */
export const protego = mkPackage(
  nixRaw`pkgs.python2Packages.protego`,
  "A pure-Python robots.txt parser with support for modern conventions",
);

/**
 * Beautiful, idiomatic protocol buffers in Python
 */
export const proto_plus = mkPackage(
  nixRaw`pkgs.python2Packages.proto-plus`,
  "Beautiful, idiomatic protocol buffers in Python",
);

/**
 * Protocol Buffers are Google's data interchange format
 */
export const protobuf = mkPackage(
  nixRaw`pkgs.python2Packages.protobuf`,
  "Protocol Buffers are Google's data interchange format",
);

/**
 * Protocol Buffers are Google's data interchange format
 */
export const protobuf3 = mkPackage(
  nixRaw`pkgs.python2Packages.protobuf3`,
  "Protocol Buffers are Google's data interchange format",
);

/**
 * A teeny Python library for creating Python dicts from protocol buffers and the reverse
 */
export const protobuf3_to_dict = mkPackage(
  nixRaw`pkgs.python2Packages.protobuf3-to-dict`,
  "A teeny Python library for creating Python dicts from protocol buffers and the reverse",
);

/**
 * Python Proton client module
 */
export const proton_client = mkPackage(
  nixRaw`pkgs.python2Packages.proton-client`,
  "Python Proton client module",
);

/**
 * CLI program and API to automate the installation and update of GloriousEggroll's Proton-GE
 */
export const protonup_ng = mkPackage(
  nixRaw`pkgs.python2Packages.protonup-ng`,
  "CLI program and API to automate the installation and update of GloriousEggroll's Proton-GE",
);

/**
 * ProtonVPN NetworkManager Library intended for every ProtonVPN service user
 */
export const protonvpn_nm_lib = mkPackage(
  nixRaw`pkgs.python2Packages.protonvpn-nm-lib`,
  "ProtonVPN NetworkManager Library intended for every ProtonVPN service user",
);

/**
 * Python library for W3C Provenance Data Model (PROV)
 */
export const prov = mkPackage(
  nixRaw`pkgs.python2Packages.prov`,
  "Python library for W3C Provenance Data Model (PROV)",
);

/**
 * A toolbox for fast Total Variation proximity operators
 */
export const prox_tv = mkPackage(
  nixRaw`pkgs.python2Packages.prox-tv`,
  "A toolbox for fast Total Variation proximity operators",
);

/**
 * Python wrapper for Proxmox API v2
 */
export const proxmoxer = mkPackage(
  nixRaw`pkgs.python2Packages.proxmoxer`,
  "Python wrapper for Proxmox API v2",
);

/**
 * Module to manage proxies in a local database
 */
export const proxy_db = mkPackage(
  nixRaw`pkgs.python2Packages.proxy-db`,
  "Module to manage proxies in a local database",
);

/**
 * Python proxy framework
 */
export const proxy_py = mkPackage(
  nixRaw`pkgs.python2Packages.proxy-py`,
  "Python proxy framework",
);

/**
 * Simple (hopefuly useful) Proxy (as in the GoF design pattern) implementation for Python
 */
export const proxy_tools = mkPackage(
  nixRaw`pkgs.python2Packages.proxy_tools`,
  "Simple (hopefuly useful) Proxy (as in the GoF design pattern) implementation for Python",
);

/**
 * Script to normalize the XML and other data inside of a UFO
 */
export const psautohint = mkPackage(
  nixRaw`pkgs.python2Packages.psautohint`,
  "Script to normalize the XML and other data inside of a UFO",
);

/**
 * Python to JavaScript compiler
 */
export const pscript = mkPackage(
  nixRaw`pkgs.python2Packages.pscript`,
  "Python to JavaScript compiler",
);

/**
 * Python package for reading Adobe Photoshop PSD files
 */
export const psd_tools = mkPackage(
  nixRaw`pkgs.python2Packages.psd-tools`,
  "Python package for reading Adobe Photoshop PSD files",
);

/**
 * Library for the PowerShell Remoting Protocol (PSRP)
 */
export const psrpcore = mkPackage(
  nixRaw`pkgs.python2Packages.psrpcore`,
  "Library for the PowerShell Remoting Protocol (PSRP)",
);

/**
 * Process and system utilization information interface
 */
export const psutil = mkPackage(
  nixRaw`pkgs.python2Packages.psutil`,
  "Process and system utilization information interface",
);

/**
 * Wrapper of psutil that removes reliance on globals
 */
export const psutil_home_assistant = mkPackage(
  nixRaw`pkgs.python2Packages.psutil-home-assistant`,
  "Wrapper of psutil that removes reliance on globals",
);

/**
 * Library of psychrometric functions to calculate thermodynamic properties
 */
export const psychrolib = mkPackage(
  nixRaw`pkgs.python2Packages.psychrolib`,
  "Library of psychrometric functions to calculate thermodynamic properties",
);

/**
 * PostgreSQL database adapter for Python
 */
export const psycopg = mkPackage(
  nixRaw`pkgs.python2Packages.psycopg`,
  "PostgreSQL database adapter for Python",
);

/**
 * PostgreSQL database adapter for the Python programming language
 */
export const psycopg2 = mkPackage(
  nixRaw`pkgs.python2Packages.psycopg2`,
  "PostgreSQL database adapter for the Python programming language",
);

/**
 * An implementation of the psycopg2 module using cffi
 */
export const psycopg2cffi = mkPackage(
  nixRaw`pkgs.python2Packages.psycopg2cffi`,
  "An implementation of the psycopg2 module using cffi",
);

/**
 * Implementation of Qt Signals
 */
export const psygnal = mkPackage(
  nixRaw`pkgs.python2Packages.psygnal`,
  "Implementation of Qt Signals",
);

/**
 * A simple Python library designed to make it quick and easy to represent tabular data in visually appealing ASCII tables
 */
export const ptable = mkPackage(
  nixRaw`pkgs.python2Packages.ptable`,
  "A simple Python library designed to make it quick and easy to represent tabular data in visually appealing ASCII tables",
);

/**
 * Test classes and test cases using decorators, execute test cases by command line, and get clear reports
 */
export const ptest = mkPackage(
  nixRaw`pkgs.python2Packages.ptest`,
  "Test classes and test cases using decorators, execute test cases by command line, and get clear reports",
);

/**
 * An advanced Python REPL
 */
export const ptpython = mkPackage(
  nixRaw`pkgs.python2Packages.ptpython`,
  "An advanced Python REPL",
);

/**
 * Run a subprocess in a pseudo terminal
 */
export const ptyprocess = mkPackage(
  nixRaw`pkgs.python2Packages.ptyprocess`,
  "Run a subprocess in a pseudo terminal",
);

/**
 * Allows to get the public suffix of a domain name
 */
export const publicsuffix = mkPackage(
  nixRaw`pkgs.python2Packages.publicsuffix`,
  "Allows to get the public suffix of a domain name",
);

/**
 * Get a public suffix for a domain name using the Public Suffix List
 */
export const publicsuffix2 = mkPackage(
  nixRaw`pkgs.python2Packages.publicsuffix2`,
  "Get a public suffix for a domain name using the Public Suffix List",
);

/**
 * Public Suffix List parser implementation
 */
export const publicsuffixlist = mkPackage(
  nixRaw`pkgs.python2Packages.publicsuffixlist`,
  "Public Suffix List parser implementation",
);

/**
 * Python-based APIs for PubNub
 */
export const pubnub = mkPackage(
  nixRaw`pkgs.python2Packages.pubnub`,
  "Python-based APIs for PubNub",
);

/**
 * PubNub subscription between PubNub and Home Assistant
 */
export const pubnubsub_handler = mkPackage(
  nixRaw`pkgs.python2Packages.pubnubsub-handler`,
  "PubNub subscription between PubNub and Home Assistant",
);

/**
 * A full-screen, console-based Python debugger
 */
export const pudb = mkPackage(
  nixRaw`pkgs.python2Packages.pudb`,
  "A full-screen, console-based Python debugger",
);

/**
 * Module to generate  generate MPS or LP files
 */
export const pulp = mkPackage(
  nixRaw`pkgs.python2Packages.pulp`,
  "Module to generate  generate MPS or LP files",
);

/**
 * Python high-level interface and ctypes-based bindings for PulseAudio (libpulse)
 */
export const pulsectl = mkPackage(
  nixRaw`pkgs.python2Packages.pulsectl`,
  "Python high-level interface and ctypes-based bindings for PulseAudio (libpulse)",
);

/**
 * Python bindings library for PulseAudio
 */
export const pulsectl_asyncio = mkPackage(
  nixRaw`pkgs.python2Packages.pulsectl-asyncio`,
  "Python bindings library for PulseAudio",
);

/**
 * Modern Infrastructure as Code. Any cloud, any language
 */
export const pulumi = mkPackage(
  nixRaw`pkgs.python2Packages.pulumi`,
  "Modern Infrastructure as Code. Any cloud, any language",
);

/**
 * Pulumi python amazon web services provider
 */
export const pulumi_aws = mkPackage(
  nixRaw`pkgs.python2Packages.pulumi-aws`,
  "Pulumi python amazon web services provider",
);

/**
 * Native AWS Pulumi Provider
 */
export const pulumi_aws_native = mkPackage(
  nixRaw`pkgs.python2Packages.pulumi-aws-native`,
  "Native AWS Pulumi Provider",
);

/**
 * Native Azure Pulumi Provider
 */
export const pulumi_azure_native = mkPackage(
  nixRaw`pkgs.python2Packages.pulumi-azure-native`,
  "Native Azure Pulumi Provider",
);

/**
 * A Pulumi provider to execute commands and scripts either locally or remotely as part of the Pulumi resource model
 */
export const pulumi_command = mkPackage(
  nixRaw`pkgs.python2Packages.pulumi-command`,
  "A Pulumi provider to execute commands and scripts either locally or remotely as part of the Pulumi resource model",
);

/**
 * A Pulumi provider that safely enables randomness for resources
 */
export const pulumi_random = mkPackage(
  nixRaw`pkgs.python2Packages.pulumi-random`,
  "A Pulumi provider that safely enables randomness for resources",
);

/**
 * Python library for working with constant databases
 */
export const pure_cdb = mkPackage(
  nixRaw`pkgs.python2Packages.pure-cdb`,
  "Python library for working with constant databases",
);

/**
 * Safely evaluate AST nodes without side effects
 */
export const pure_eval = mkPackage(
  nixRaw`pkgs.python2Packages.pure-eval`,
  "Safely evaluate AST nodes without side effects",
);

/**
 * Reimplementation of pcapy
 */
export const pure_pcapy3 = mkPackage(
  nixRaw`pkgs.python2Packages.pure-pcapy3`,
  "Reimplementation of pcapy",
);

/**
 * Python implementation of Protocol Buffers with dataclass-based schemas
 */
export const pure_protobuf = mkPackage(
  nixRaw`pkgs.python2Packages.pure-protobuf`,
  "Python implementation of Protocol Buffers with dataclass-based schemas",
);

/**
 * Pure python implementation of the adb client
 */
export const pure_python_adb = mkPackage(
  nixRaw`pkgs.python2Packages.pure-python-adb`,
  "Pure python implementation of the adb client",
);

/**
 * Python implementation of the ADB client
 */
export const pure_python_adb_homeassistant = mkPackage(
  nixRaw`pkgs.python2Packages.pure-python-adb-homeassistant`,
  "Python implementation of the ADB client",
);

/**
 * Implementation of magic file detection
 */
export const puremagic = mkPackage(
  nixRaw`pkgs.python2Packages.puremagic`,
  "Implementation of magic file detection",
);

/**
 * Pure Python library for PNG image encoding/decoding
 */
export const purepng = mkPackage(
  nixRaw`pkgs.python2Packages.purepng`,
  "Pure Python library for PNG image encoding/decoding",
);

/**
 * Immutable URL class for easy URL-building and manipulation
 */
export const purl = mkPackage(
  nixRaw`pkgs.python2Packages.purl`,
  "Immutable URL class for easy URL-building and manipulation",
);

/**
 * Subscribe to GCM/FCM and receive notifications
 */
export const push_receiver = mkPackage(
  nixRaw`pkgs.python2Packages.push-receiver`,
  "Subscribe to GCM/FCM and receive notifications",
);

/**
 * A simple python client for pushbullet.com
 */
export const pushbullet_py = mkPackage(
  nixRaw`pkgs.python2Packages.pushbullet-py`,
  "A simple python client for pushbullet.com",
);

/**
 * A Python package for interacting with *all* aspects of the Pushover API
 */
export const pushover_complete = mkPackage(
  nixRaw`pkgs.python2Packages.pushover-complete`,
  "A Python package for interacting with *all* aspects of the Pushover API",
);

/**
 * Simulate the performance of photovoltaic energy systems
 */
export const pvlib = mkPackage(
  nixRaw`pkgs.python2Packages.pvlib`,
  "Simulate the performance of photovoltaic energy systems",
);

/**
 * Python module to interact with the PVOutput API
 */
export const pvo = mkPackage(
  nixRaw`pkgs.python2Packages.pvo`,
  "Python module to interact with the PVOutput API",
);

/**
 * Scientific reports with embedded python computations with reST, LaTeX or markdown
 */
export const pweave = mkPackage(
  nixRaw`pkgs.python2Packages.pweave`,
  "Scientific reports with embedded python computations with reST, LaTeX or markdown",
);

/**
 * CTF framework and exploit development library
 */
export const pwntools = mkPackage(
  nixRaw`pkgs.python2Packages.pwntools`,
  "CTF framework and exploit development library",
);

/**
 * A python library and command-line tool to "prettify" and colorize XML.
 */
export const pxml = mkPackage(
  nixRaw`pkgs.python2Packages.pxml`,
  "A python library and command-line tool to \"prettify\" and colorize XML.",
);

/**
 * Library with cross-python path, ini-parsing, io, code, log facilities
 */
export const py = mkPackage(
  nixRaw`pkgs.python2Packages.py`,
  "Library with cross-python path, ini-parsing, io, code, log facilities",
);

/**
 * Python library to track package info from 17track.com
 */
export const py17track = mkPackage(
  nixRaw`pkgs.python2Packages.py17track`,
  "Python library to track package info from 17track.com",
);

/**
 * File access to 2bit files
 */
export const py2bit = mkPackage(
  nixRaw`pkgs.python2Packages.py2bit`,
  "File access to 2bit files",
);

/**
 * Code to work with the iBuddy MSN figurine
 */
export const py3buddy = mkPackage(
  nixRaw`pkgs.python2Packages.py3buddy`,
  "Code to work with the iBuddy MSN figurine",
);

/**
 * Python binding to the library exiv2
 */
export const py3exiv2 = mkPackage(
  nixRaw`pkgs.python2Packages.py3exiv2`,
  "Python binding to the library exiv2",
);

/**
 * Python 3 Bindings for the NVIDIA Management Library
 */
export const py3nvml = mkPackage(
  nixRaw`pkgs.python2Packages.py3nvml`,
  "Python 3 Bindings for the NVIDIA Management Library",
);

/**
 * Rijndael algorithm library
 */
export const py3rijndael = mkPackage(
  nixRaw`pkgs.python2Packages.py3rijndael`,
  "Rijndael algorithm library",
);

/**
 * Extensible i3status wrapper
 */
export const py3status = mkPackage(
  nixRaw`pkgs.python2Packages.py3status`,
  "Extensible i3status wrapper",
);

/**
 * Refactors valid 3.x syntax into valid 2.x syntax, if a syntactical conversion is possible
 */
export const py3to2 = mkPackage(
  nixRaw`pkgs.python2Packages.py3to2`,
  "Refactors valid 3.x syntax into valid 2.x syntax, if a syntactical conversion is possible",
);

/**
 * Py4J enables Python programs running in a Python interpreter to dynamically access Java objects in a Java Virtual Machine. Methods are called as if the Java objects resided in the Python interpreter and Java collections can be accessed through standard Python collection methods. Py4J also enables Java programs to call back Python objects.
 */
export const py4j = mkPackage(
  nixRaw`pkgs.python2Packages.py4j`,
  "Py4J enables Python programs running in a Python interpreter to dynamically access Java objects in a Java Virtual Machine. Methods are called as if the Java objects resided in the Python interpreter and Java collections can be accessed through standard Python collection methods. Py4J also enables Java programs to call back Python objects.",
);

/**
 * Emulate 6502-based microcomputer systems in Python
 */
export const py65 = mkPackage(
  nixRaw`pkgs.python2Packages.py65`,
  "Emulate 6502-based microcomputer systems in Python",
);

/**
 * Generate and parse RFC 3339 timestamps
 */
export const pyRFC3339 = mkPackage(
  nixRaw`pkgs.python2Packages.pyRFC3339`,
  "Generate and parse RFC 3339 timestamps",
);

/**
 * Command Line App for Controlling Philips Air Purifiers.
 */
export const py_air_control = mkPackage(
  nixRaw`pkgs.python2Packages.py-air-control`,
  "Command Line App for Controlling Philips Air Purifiers.",
);

/**
 * Exports Air Quality Metrics to Prometheus
 */
export const py_air_control_exporter = mkPackage(
  nixRaw`pkgs.python2Packages.py-air-control-exporter`,
  "Exports Air Quality Metrics to Prometheus",
);

/**
 * Python bindings for the tiny-bip39 library
 */
export const py_bip39_bindings = mkPackage(
  nixRaw`pkgs.python2Packages.py-bip39-bindings`,
  "Python bindings for the tiny-bip39 library",
);

/**
 * Python package for Canary Security Camera
 */
export const py_canary = mkPackage(
  nixRaw`pkgs.python2Packages.py-canary`,
  "Python package for Canary Security Camera",
);

/**
 * Self-describing content-addressed identifiers for distributed systems implementation in Python
 */
export const py_cid = mkPackage(
  nixRaw`pkgs.python2Packages.py-cid`,
  "Self-describing content-addressed identifiers for distributed systems implementation in Python",
);

/**
 * Get CPU info with pure Python
 */
export const py_cpuinfo = mkPackage(
  nixRaw`pkgs.python2Packages.py-cpuinfo`,
  "Get CPU info with pure Python",
);

/**
 * A module for marking deprecated functions or classes and re-routing to the new successors' instance. Used by torchmetrics
 */
export const py_deprecate = mkPackage(
  nixRaw`pkgs.python2Packages.py-deprecate`,
  "A module for marking deprecated functions or classes and re-routing to the new successors' instance. Used by torchmetrics",
);

/**
 * Python library to interface with DeSmuME, the Nintendo DS emulator
 */
export const py_desmume = mkPackage(
  nixRaw`pkgs.python2Packages.py-desmume`,
  "Python library to interface with DeSmuME, the Nintendo DS emulator",
);

/**
 * Python library that parses the output of dmidecode
 */
export const py_dmidecode = mkPackage(
  nixRaw`pkgs.python2Packages.py-dmidecode`,
  "Python library that parses the output of dmidecode",
);

/**
 * Library to interact with a Dormakaba dkey lock
 */
export const py_dormakaba_dkey = mkPackage(
  nixRaw`pkgs.python2Packages.py-dormakaba-dkey`,
  "Library to interact with a Dormakaba dkey lock",
);

/**
 * ECC pairing and bn_128 and bls12_381 curve operations
 */
export const py_ecc = mkPackage(
  nixRaw`pkgs.python2Packages.py-ecc`,
  "ECC pairing and bn_128 and bls12_381 curve operations",
);

/**
 * Python Mathematical Expression Evaluator
 */
export const py_expression_eval = mkPackage(
  nixRaw`pkgs.python2Packages.py-expression-eval`,
  "Python Mathematical Expression Evaluator",
);

/**
 * Python libzfs bindings
 */
export const py_libzfs = mkPackage(
  nixRaw`pkgs.python2Packages.py-libzfs`,
  "Python libzfs bindings",
);

/**
 * An in-memory LRU cache for python
 */
export const py_lru_cache = mkPackage(
  nixRaw`pkgs.python2Packages.py-lru-cache`,
  "An in-memory LRU cache for python",
);

/**
 * Composable and future-proof network addresses
 */
export const py_multiaddr = mkPackage(
  nixRaw`pkgs.python2Packages.py-multiaddr`,
  "Composable and future-proof network addresses",
);

/**
 * Module for distinguishing base encodings and other simple string encodings
 */
export const py_multibase = mkPackage(
  nixRaw`pkgs.python2Packages.py-multibase`,
  "Module for distinguishing base encodings and other simple string encodings",
);

/**
 * Compact self-describing codecs
 */
export const py_multicodec = mkPackage(
  nixRaw`pkgs.python2Packages.py-multicodec`,
  "Compact self-describing codecs",
);

/**
 * Self describing hashes - for future proofing
 */
export const py_multihash = mkPackage(
  nixRaw`pkgs.python2Packages.py-multihash`,
  "Self describing hashes - for future proofing",
);

/**
 * Minimalistic Python client for the NextBus public API
 */
export const py_nextbusnext = mkPackage(
  nixRaw`pkgs.python2Packages.py-nextbusnext`,
  "Minimalistic Python client for the NextBus public API",
);

/**
 * Python library that provides an interface to Nightscout
 */
export const py_nightscout = mkPackage(
  nixRaw`pkgs.python2Packages.py-nightscout`,
  "Python library that provides an interface to Nightscout",
);

/**
 * A tokenizer/parser/executor for the PartiQL-language
 */
export const py_partiql_parser = mkPackage(
  nixRaw`pkgs.python2Packages.py-partiql-parser`,
  "A tokenizer/parser/executor for the PartiQL-language",
);

/**
 * A tool to help extracting information from structured PDFs
 */
export const py_pdf_parser = mkPackage(
  nixRaw`pkgs.python2Packages.py-pdf-parser`,
  "A tool to help extracting information from structured PDFs",
);

/**
 * Python radix tree for IPv4 and IPv6 prefix matching
 */
export const py_radix_sr = mkPackage(
  nixRaw`pkgs.python2Packages.py-radix-sr`,
  "Python radix tree for IPv4 and IPv6 prefix matching",
);

/**
 * Bindings for scrypt key derivation function library
 */
export const py_scrypt = mkPackage(
  nixRaw`pkgs.python2Packages.py_scrypt`,
  "Bindings for scrypt key derivation function library",
);

/**
 * Pythonic library to aid with serialisation and deserialisation to/from JSON and XML
 */
export const py_serializable = mkPackage(
  nixRaw`pkgs.python2Packages.py-serializable`,
  "Pythonic library to aid with serialisation and deserialisation to/from JSON and XML",
);

/**
 * Library to emulate the Sneakers movie effect
 */
export const py_sneakers = mkPackage(
  nixRaw`pkgs.python2Packages.py-sneakers`,
  "Library to emulate the Sneakers movie effect",
);

/**
 * A python wrapper library for the Subsonic REST API
 */
export const py_sonic = mkPackage(
  nixRaw`pkgs.python2Packages.py-sonic`,
  "A python wrapper library for the Subsonic REST API",
);

/**
 * Python bindings for sr25519 library
 */
export const py_sr25519_bindings = mkPackage(
  nixRaw`pkgs.python2Packages.py-sr25519-bindings`,
  "Python bindings for sr25519 library",
);

/**
 * Python string matching library including string tokenizers and string similarity measures
 */
export const py_stringmatching = mkPackage(
  nixRaw`pkgs.python2Packages.py_stringmatching`,
  "Python string matching library including string tokenizers and string similarity measures",
);

/**
 * Python API for Synology DSM
 */
export const py_synologydsm_api = mkPackage(
  nixRaw`pkgs.python2Packages.py-synologydsm-api`,
  "Python API for Synology DSM",
);

/**
 * Python SDK for the GA4GH Task Execution API
 */
export const py_tes = mkPackage(
  nixRaw`pkgs.python2Packages.py-tes`,
  "Python SDK for the GA4GH Task Execution API",
);

/**
 * Python bindings for tree-sitter
 */
export const py_tree_sitter = mkPackage(
  nixRaw`pkgs.python2Packages.py-tree-sitter`,
  "Python bindings for tree-sitter",
);

/**
 * Universal Binary JSON draft-12 serializer for Python
 */
export const py_ubjson = mkPackage(
  nixRaw`pkgs.python2Packages.py-ubjson`,
  "Universal Binary JSON draft-12 serializer for Python",
);

/**
 * Library for VAPID header generation
 */
export const py_vapid = mkPackage(
  nixRaw`pkgs.python2Packages.py-vapid`,
  "Library for VAPID header generation",
);

/**
 * Python module to interact with Zabbix
 */
export const py_zabbix = mkPackage(
  nixRaw`pkgs.python2Packages.py-zabbix`,
  "Python module to interact with Zabbix",
);

/**
 * Module to interact with Acaia scales
 */
export const pyacaia_async = mkPackage(
  nixRaw`pkgs.python2Packages.pyacaia-async`,
  "Module to interact with Acaia scales",
);

/**
 * Bindings for Chromaprint acoustic fingerprinting
 */
export const pyacoustid = mkPackage(
  nixRaw`pkgs.python2Packages.pyacoustid`,
  "Bindings for Chromaprint acoustic fingerprinting",
);

/**
 * Python wrapper for TwinCAT ADS library
 */
export const pyads = mkPackage(
  nixRaw`pkgs.python2Packages.pyads`,
  "Python wrapper for TwinCAT ADS library",
);

/**
 * Python interface for Hisense AEH-W4A1 module
 */
export const pyaehw4a1 = mkPackage(
  nixRaw`pkgs.python2Packages.pyaehw4a1`,
  "Python interface for Hisense AEH-W4A1 module",
);

/**
 * Pure-Python AES
 */
export const pyaes = mkPackage(
  nixRaw`pkgs.python2Packages.pyaes`,
  "Pure-Python AES",
);

/**
 * Python wrapper package for the AfterShip API
 */
export const pyaftership = mkPackage(
  nixRaw`pkgs.python2Packages.pyaftership`,
  "Python wrapper package for the AfterShip API",
);

/**
 * Python module implementing Aho-Corasick algorithm
 */
export const pyahocorasick = mkPackage(
  nixRaw`pkgs.python2Packages.pyahocorasick`,
  "Python module implementing Aho-Corasick algorithm",
);

/**
 * Python wrapper for EPA AirNow Air Quality API
 */
export const pyairnow = mkPackage(
  nixRaw`pkgs.python2Packages.pyairnow`,
  "Python wrapper for EPA AirNow Air Quality API",
);

/**
 * Python library for interacting with AirVisual
 */
export const pyairvisual = mkPackage(
  nixRaw`pkgs.python2Packages.pyairvisual`,
  "Python library for interacting with AirVisual",
);

/**
 * Python Algorithmic Trading
 */
export const pyalgotrade = mkPackage(
  nixRaw`pkgs.python2Packages.pyalgotrade`,
  "Python Algorithmic Trading",
);

/**
 * Algebraic Multigrid Solvers in Python
 */
export const pyamg = mkPackage(
  nixRaw`pkgs.python2Packages.pyamg`,
  "Algebraic Multigrid Solvers in Python",
);

/**
 * PyYAML-based module to produce pretty and readable YAML-serialized data
 */
export const pyaml = mkPackage(
  nixRaw`pkgs.python2Packages.pyaml`,
  "PyYAML-based module to produce pretty and readable YAML-serialized data",
);

/**
 * Auto-generate PEP-484 annotations
 */
export const pyannotate = mkPackage(
  nixRaw`pkgs.python2Packages.pyannotate`,
  "Auto-generate PEP-484 annotations",
);

/**
 * Python library to work with Netgear Arlo cameras
 */
export const pyarlo = mkPackage(
  nixRaw`pkgs.python2Packages.pyarlo`,
  "Python library to work with Netgear Arlo cameras",
);

/**
 * Python client for Servarr API's (Sonarr, Radarr, Readarr, Lidarr)
 */
export const pyarr = mkPackage(
  nixRaw`pkgs.python2Packages.pyarr`,
  "Python client for Servarr API's (Sonarr, Radarr, Readarr, Lidarr)",
);

/**
 * A cross-language development platform for in-memory data
 */
export const pyarrow = mkPackage(
  nixRaw`pkgs.python2Packages.pyarrow`,
  "A cross-language development platform for in-memory data",
);

/**
 * Offline IP address to Autonomous System Number lookup module
 */
export const pyasn = mkPackage(
  nixRaw`pkgs.python2Packages.pyasn`,
  "Offline IP address to Autonomous System Number lookup module",
);

/**
 * Generic ASN.1 library for Python
 */
export const pyasn1 = mkPackage(
  nixRaw`pkgs.python2Packages.pyasn1`,
  "Generic ASN.1 library for Python",
);

/**
 * A collection of ASN.1-based protocols modules
 */
export const pyasn1_modules = mkPackage(
  nixRaw`pkgs.python2Packages.pyasn1-modules`,
  "A collection of ASN.1-based protocols modules",
);

/**
 * Python module to talk to Atag One
 */
export const pyatag = mkPackage(
  nixRaw`pkgs.python2Packages.pyatag`,
  "Python module to talk to Atag One",
);

/**
 * Python DB API 2.0 (PEP 249) client for Amazon Athena
 */
export const pyathena = mkPackage(
  nixRaw`pkgs.python2Packages.pyathena`,
  "Python DB API 2.0 (PEP 249) client for Amazon Athena",
);

/**
 * Simple API to access Netatmo weather station data
 */
export const pyatmo = mkPackage(
  nixRaw`pkgs.python2Packages.pyatmo`,
  "Simple API to access Netatmo weather station data",
);

/**
 * Python module to get energy consumption data from Atome
 */
export const pyatome = mkPackage(
  nixRaw`pkgs.python2Packages.pyatome`,
  "Python module to get energy consumption data from Atome",
);

/**
 * Python client bindings for D-Bus AT-SPI
 */
export const pyatspi = mkPackage(
  nixRaw`pkgs.python2Packages.pyatspi`,
  "Python client bindings for D-Bus AT-SPI",
);

/**
 * Python client library for the Apple TV
 */
export const pyatv = mkPackage(
  nixRaw`pkgs.python2Packages.pyatv`,
  "Python client library for the Apple TV",
);

/**
 * Python bindings for PortAudio
 */
export const pyaudio = mkPackage(
  nixRaw`pkgs.python2Packages.pyaudio`,
  "Python bindings for PortAudio",
);

/**
 * Module for interacting with the Aussie Broadband APIs
 */
export const pyaussiebb = mkPackage(
  nixRaw`pkgs.python2Packages.pyaussiebb`,
  "Module for interacting with the Aussie Broadband APIs",
);

/**
 * PyAutoGUI lets Python control the mouse and keyboard, and other GUI automation tasks.
 */
export const pyautogui = mkPackage(
  nixRaw`pkgs.python2Packages.pyautogui`,
  "PyAutoGUI lets Python control the mouse and keyboard, and other GUI automation tasks.",
);

/**
 * Simple pure-python AVM meta-data handling
 */
export const pyavm = mkPackage(
  nixRaw`pkgs.python2Packages.pyavm`,
  "Simple pure-python AVM meta-data handling",
);

/**
 * Python3 Parser for Android XML file and get Application Name without using Androguard
 */
export const pyaxmlparser = mkPackage(
  nixRaw`pkgs.python2Packages.pyaxmlparser`,
  "Python3 Parser for Android XML file and get Application Name without using Androguard",
);

/**
 *  Python module to interface with a Balboa Spa
 */
export const pybalboa = mkPackage(
  nixRaw`pkgs.python2Packages.pybalboa`,
  " Python module to interface with a Balboa Spa",
);

/**
 * Fast Base64 encoding/decoding
 */
export const pybase64 = mkPackage(
  nixRaw`pkgs.python2Packages.pybase64`,
  "Fast Base64 encoding/decoding",
);

/**
 * Python tools for querying and manipulating BIDS datasets
 */
export const pybids = mkPackage(
  nixRaw`pkgs.python2Packages.pybids`,
  "Python tools for querying and manipulating BIDS datasets",
);

/**
 * File access to bigBed files, and read and write access to bigWig files
 */
export const pybigwig = mkPackage(
  nixRaw`pkgs.python2Packages.pybigwig`,
  "File access to bigBed files, and read and write access to bigWig files",
);

/**
 * Seamless operability between C++11 and Python
 */
export const pybind11 = mkPackage(
  nixRaw`pkgs.python2Packages.pybind11`,
  "Seamless operability between C++11 and Python",
);

/**
 * Python Bindings Generator
 */
export const pybindgen = mkPackage(
  nixRaw`pkgs.python2Packages.pybindgen`,
  "Python Bindings Generator",
);

/**
 * Python implementation for Monoprice Blackbird units
 */
export const pyblackbird = mkPackage(
  nixRaw`pkgs.python2Packages.pyblackbird`,
  "Python implementation for Monoprice Blackbird units",
);

/**
 * A Probabilistic data structure
 */
export const pybloom_live = mkPackage(
  nixRaw`pkgs.python2Packages.pybloom-live`,
  "A Probabilistic data structure",
);

/**
 * Bluetooth Python extension module
 */
export const pybluez = mkPackage(
  nixRaw`pkgs.python2Packages.pybluez`,
  "Bluetooth Python extension module",
);

/**
 * Python module for interacting with Neato Botvac Connected vacuum robots
 */
export const pybotvac = mkPackage(
  nixRaw`pkgs.python2Packages.pybotvac`,
  "Python module for interacting with Neato Botvac Connected vacuum robots",
);

/**
 * 2D Game Physics for Python
 */
export const pybox2d = mkPackage(
  nixRaw`pkgs.python2Packages.pybox2d`,
  "2D Game Physics for Python",
);

/**
 * Library for remote control of Sony Bravia TVs 2013 and newer
 */
export const pybravia = mkPackage(
  nixRaw`pkgs.python2Packages.pybravia`,
  "Library for remote control of Sony Bravia TVs 2013 and newer",
);

/**
 * Python library for the BrowserID Protocol
 */
export const pybrowserid = mkPackage(
  nixRaw`pkgs.python2Packages.pybrowserid`,
  "Python library for the BrowserID Protocol",
);

/**
 * A BibTeX-compatible bibliography processor written in Python
 */
export const pybtex = mkPackage(
  nixRaw`pkgs.python2Packages.pybtex`,
  "A BibTeX-compatible bibliography processor written in Python",
);

/**
 * A docutils backend for pybtex
 */
export const pybtex_docutils = mkPackage(
  nixRaw`pkgs.python2Packages.pybtex-docutils`,
  "A docutils backend for pybtex",
);

/**
 * Open-source software for robot simulation, integrated with OpenAI Gym
 */
export const pybullet = mkPackage(
  nixRaw`pkgs.python2Packages.pybullet`,
  "Open-source software for robot simulation, integrated with OpenAI Gym",
);

/**
 * Python 2 bindings for cairo
 */
export const pycairo = mkPackage(
  nixRaw`pkgs.python2Packages.pycairo`,
  "Python 2 bindings for cairo",
);

/**
 * Python wrapper to libcangjie
 */
export const pycangjie = mkPackage(
  nixRaw`pkgs.python2Packages.pycangjie`,
  "Python wrapper to libcangjie",
);

/**
 * Closed caption converter
 */
export const pycaption = mkPackage(
  nixRaw`pkgs.python2Packages.pycaption`,
  "Closed caption converter",
);

/**
 * A lightweight Cardano library in Python
 */
export const pycardano = mkPackage(
  nixRaw`pkgs.python2Packages.pycardano`,
  "A lightweight Cardano library in Python",
);

/**
 * Python interface for c-ares
 */
export const pycares = mkPackage(
  nixRaw`pkgs.python2Packages.pycares`,
  "Python interface for c-ares",
);

/**
 * Python library for interacting with the NissanConnect EV
 */
export const pycarwings2 = mkPackage(
  nixRaw`pkgs.python2Packages.pycarwings2`,
  "Python library for interacting with the NissanConnect EV",
);

/**
 * Python implementation of catch22
 */
export const pycatch22 = mkPackage(
  nixRaw`pkgs.python2Packages.pycatch22`,
  "Python implementation of catch22",
);

/**
 * Implementation of some concepts from category theory
 */
export const pycategories = mkPackage(
  nixRaw`pkgs.python2Packages.pycategories`,
  "Implementation of some concepts from category theory",
);

/**
 * Python bindings for the Rust cddl crate
 */
export const pycddl = mkPackage(
  nixRaw`pkgs.python2Packages.pycddl`,
  "Python bindings for the Rust cddl crate",
);

/**
 * Wrapper around libcdio (CD Input and Control library)
 */
export const pycdio = mkPackage(
  nixRaw`pkgs.python2Packages.pycdio`,
  "Wrapper around libcdio (CD Input and Control library)",
);

/**
 * Python modules to access HDMI CEC devices
 */
export const pycec = mkPackage(
  nixRaw`pkgs.python2Packages.pycec`,
  "Python modules to access HDMI CEC devices",
);

/**
 * Python based Bicep parser
 */
export const pycep_parser = mkPackage(
  nixRaw`pkgs.python2Packages.pycep-parser`,
  "Python based Bicep parser",
);

/**
 * Python module for updating Cloudflare DNS A records
 */
export const pycfdns = mkPackage(
  nixRaw`pkgs.python2Packages.pycfdns`,
  "Python module for updating Cloudflare DNS A records",
);

/**
 * Layout C call graphs from cflow using GraphViz dot
 */
export const pycflow2dot = mkPackage(
  nixRaw`pkgs.python2Packages.pycflow2dot`,
  "Layout C call graphs from cflow using GraphViz dot",
);

/**
 * Model for Cloud Formation scripts
 */
export const pycfmodel = mkPackage(
  nixRaw`pkgs.python2Packages.pycfmodel`,
  "Model for Cloud Formation scripts",
);

/**
 * Python library for interacting with the Channels app
 */
export const pychannels = mkPackage(
  nixRaw`pkgs.python2Packages.pychannels`,
  "Python library for interacting with the Channels app",
);

/**
 * Library for creating high quality encapsulated Postscript, PDF, PNG, or SVG charts
 */
export const pychart = mkPackage(
  nixRaw`pkgs.python2Packages.pychart`,
  "Library for creating high quality encapsulated Postscript, PDF, PNG, or SVG charts",
);

/**
 * Library to manipulate Microsoft HTML Help (CHM) files
 */
export const pychm = mkPackage(
  nixRaw`pkgs.python2Packages.pychm`,
  "Library to manipulate Microsoft HTML Help (CHM) files",
);

/**
 * Library for Python to communicate with the Google Chromecast
 */
export const pychromecast = mkPackage(
  nixRaw`pkgs.python2Packages.pychromecast`,
  "Library for Python to communicate with the Google Chromecast",
);

/**
 * Module to interact with PocketCast's unofficial API
 */
export const pycketcasts = mkPackage(
  nixRaw`pkgs.python2Packages.pycketcasts`,
  "Module to interact with PocketCast's unofficial API",
);

/**
 * Python client for ClimaCell API
 */
export const pyclimacell = mkPackage(
  nixRaw`pkgs.python2Packages.pyclimacell`,
  "Python client for ClimaCell API",
);

/**
 * Cross-platform clipboard utilities supporting both binary and text data
 */
export const pyclip = mkPackage(
  nixRaw`pkgs.python2Packages.pyclip`,
  "Cross-platform clipboard utilities supporting both binary and text data",
);

/**
 * Cython wrapper for clipper library
 */
export const pyclipper = mkPackage(
  nixRaw`pkgs.python2Packages.pyclipper`,
  "Cython wrapper for clipper library",
);

/**
 * Multiclass confusion matrix library
 */
export const pycm = mkPackage(
  nixRaw`pkgs.python2Packages.pycm`,
  "Multiclass confusion matrix library",
);

/**
 * Bindings to GitHub's Flavored Markdown (cmark-gfm), with enhanced support for task lists
 */
export const pycmarkgfm = mkPackage(
  nixRaw`pkgs.python2Packages.pycmarkgfm`,
  "Bindings to GitHub's Flavored Markdown (cmark-gfm), with enhanced support for task lists",
);

/**
 * Official APIs for the MS-COCO dataset
 */
export const pycocotools = mkPackage(
  nixRaw`pkgs.python2Packages.pycocotools`,
  "Official APIs for the MS-COCO dataset",
);

/**
 * Python style guide checker
 */
export const pycodestyle = mkPackage(
  nixRaw`pkgs.python2Packages.pycodestyle`,
  "Python style guide checker",
);

/**
 * Python class to integrate Boto3's Cognito client so it is easy to login users. With SRP support
 */
export const pycognito = mkPackage(
  nixRaw`pkgs.python2Packages.pycognito`,
  "Python class to integrate Boto3's Cognito client so it is easy to login users. With SRP support",
);

/**
 * Utilities for Bitcoin and altcoin addresses and transaction manipulation
 */
export const pycoin = mkPackage(
  nixRaw`pkgs.python2Packages.pycoin`,
  "Utilities for Bitcoin and altcoin addresses and transaction manipulation",
);

/**
 * Python library for reading and writing collada documents
 */
export const pycollada = mkPackage(
  nixRaw`pkgs.python2Packages.pycollada`,
  "Python library for reading and writing collada documents",
);

/**
 * Python module to interact with ComfoAir Q350/450/600 units
 */
export const pycomfoconnect = mkPackage(
  nixRaw`pkgs.python2Packages.pycomfoconnect`,
  "Python module to interact with ComfoAir Q350/450/600 units",
);

/**
 * Allows to declare constraints on function parameters and return values
 */
export const pycontracts = mkPackage(
  nixRaw`pkgs.python2Packages.pycontracts`,
  "Allows to declare constraints on function parameters and return values",
);

/**
 * Python 3 asyncio package for interacting with Control4 systems
 */
export const pycontrol4 = mkPackage(
  nixRaw`pkgs.python2Packages.pycontrol4`,
  "Python 3 asyncio package for interacting with Control4 systems",
);

/**
 * Borrow cookies from your browser's authenticated session for use in Python scripts
 */
export const pycookiecheat = mkPackage(
  nixRaw`pkgs.python2Packages.pycookiecheat`,
  "Borrow cookies from your browser's authenticated session for use in Python scripts",
);

/**
 * Python library to control CoolMasterNet HVAC bridges over asyncio
 */
export const pycoolmasternet_async = mkPackage(
  nixRaw`pkgs.python2Packages.pycoolmasternet-async`,
  "Python library to control CoolMasterNet HVAC bridges over asyncio",
);

/**
 * Bindings to picosat SAT solver
 */
export const pycosat = mkPackage(
  nixRaw`pkgs.python2Packages.pycosat`,
  "Bindings to picosat SAT solver",
);

/**
 * Test runner for unittest that outputs TAP results to stdout
 */
export const pycotap = mkPackage(
  nixRaw`pkgs.python2Packages.pycotap`,
  "Test runner for unittest that outputs TAP results to stdout",
);

/**
 * ISO country, subdivision, language, currency and script definitions and their translations
 */
export const pycountry = mkPackage(
  nixRaw`pkgs.python2Packages.pycountry`,
  "ISO country, subdivision, language, currency and script definitions and their translations",
);

/**
 * C parser in Python
 */
export const pycparser = mkPackage(
  nixRaw`pkgs.python2Packages.pycparser`,
  "C parser in Python",
);

/**
 * Python libraries for CRC calculations (it supports CRC-16, CRC-32, CRC-CCITT, etc)
 */
export const pycrc = mkPackage(
  nixRaw`pkgs.python2Packages.pycrc`,
  "Python libraries for CRC calculations (it supports CRC-16, CRC-32, CRC-CCITT, etc)",
);

/**
 * A CLI tool for changing your alacritty configuration on the fly
 */
export const pycritty = mkPackage(
  nixRaw`pkgs.python2Packages.pycritty`,
  "A CLI tool for changing your alacritty configuration on the fly",
);

/**
 * Simple cron-like parser for Python, which determines if current datetime matches conditions
 */
export const pycron = mkPackage(
  nixRaw`pkgs.python2Packages.pycron`,
  "Simple cron-like parser for Python, which determines if current datetime matches conditions",
);

/**
 * Drop-in replacement for pycrypto using pycryptodome
 */
export const pycrypto = mkPackage(
  nixRaw`pkgs.python2Packages.pycrypto`,
  "Drop-in replacement for pycrypto using pycryptodome",
);

/**
 * Self-contained cryptographic library
 */
export const pycryptodome = mkPackage(
  nixRaw`pkgs.python2Packages.pycryptodome`,
  "Self-contained cryptographic library",
);

/**
 * Self-contained cryptographic library
 */
export const pycryptodomex = mkPackage(
  nixRaw`pkgs.python2Packages.pycryptodomex`,
  "Self-contained cryptographic library",
);

/**
 * bindings for the csdr library
 */
export const pycsdr = mkPackage(
  nixRaw`pkgs.python2Packages.pycsdr`,
  "bindings for the csdr library",
);

/**
 * ClI for Python common tasks for users
 */
export const pyct = mkPackage(
  nixRaw`pkgs.python2Packages.pyct`,
  "ClI for Python common tasks for users",
);

/**
 * Python library to interact with Nintendo 3DS files
 */
export const pyctr = mkPackage(
  nixRaw`pkgs.python2Packages.pyctr`,
  "Python library to interact with Nintendo 3DS files",
);

/**
 * CUDA integration for Python.
 */
export const pycuda = mkPackage(
  nixRaw`pkgs.python2Packages.pycuda`,
  "CUDA integration for Python.",
);

/**
 * Python bindings for libcups
 */
export const pycups = mkPackage(
  nixRaw`pkgs.python2Packages.pycups`,
  "Python bindings for libcups",
);

/**
 * Python Interface To The cURL library
 */
export const pycurl = mkPackage(
  nixRaw`pkgs.python2Packages.pycurl`,
  "Python Interface To The cURL library",
);

/**
 * set of classes to help create extensions of Python in the C++ language
 */
export const pycxx = mkPackage(
  nixRaw`pkgs.python2Packages.pycxx`,
  "set of classes to help create extensions of Python in the C++ language",
);

/**
 * Python Daikin HVAC appliances interface
 */
export const pydaikin = mkPackage(
  nixRaw`pkgs.python2Packages.pydaikin`,
  "Python Daikin HVAC appliances interface",
);

/**
 * Python Database Abstraction Layer
 */
export const pydal = mkPackage(
  nixRaw`pkgs.python2Packages.pydal`,
  "Python Database Abstraction Layer",
);

/**
 * Python interface for Danfoss Air HRV systems
 */
export const pydanfossair = mkPackage(
  nixRaw`pkgs.python2Packages.pydanfossair`,
  "Python interface for Danfoss Air HRV systems",
);

/**
 * Data validation and settings management using Python type hinting
 */
export const pydantic = mkPackage(
  nixRaw`pkgs.python2Packages.pydantic`,
  "Data validation and settings management using Python type hinting",
);

/**
 * Core validation logic for pydantic written in rust
 */
export const pydantic_core = mkPackage(
  nixRaw`pkgs.python2Packages.pydantic-core`,
  "Core validation logic for pydantic written in rust",
);

/**
 * Extra Pydantic types
 */
export const pydantic_extra_types = mkPackage(
  nixRaw`pkgs.python2Packages.pydantic-extra-types`,
  "Extra Pydantic types",
);

/**
 * Pydantic types for SCIM
 */
export const pydantic_scim = mkPackage(
  nixRaw`pkgs.python2Packages.pydantic-scim`,
  "Pydantic types for SCIM",
);

/**
 * Settings management using pydantic
 */
export const pydantic_settings = mkPackage(
  nixRaw`pkgs.python2Packages.pydantic-settings`,
  "Settings management using pydantic",
);

/**
 * Python utility libraries for doing stuff in a functional way
 */
export const pydash = mkPackage(
  nixRaw`pkgs.python2Packages.pydash`,
  "Python utility libraries for doing stuff in a functional way",
);

/**
 * Helpers for authenticating to Google APIs
 */
export const pydata_google_auth = mkPackage(
  nixRaw`pkgs.python2Packages.pydata-google-auth`,
  "Helpers for authenticating to Google APIs",
);

/**
 * Bootstrap-based Sphinx theme from the PyData community
 */
export const pydata_sphinx_theme = mkPackage(
  nixRaw`pkgs.python2Packages.pydata-sphinx-theme`,
  "Bootstrap-based Sphinx theme from the PyData community",
);

/**
 * Infers date format from examples
 */
export const pydateinfer = mkPackage(
  nixRaw`pkgs.python2Packages.pydateinfer`,
  "Infers date format from examples",
);

/**
 * Pythonic DBus library
 */
export const pydbus = mkPackage(
  nixRaw`pkgs.python2Packages.pydbus`,
  "Pythonic DBus library",
);

/**
 * Large-scale interactive data visualization in Python
 */
export const pydeck = mkPackage(
  nixRaw`pkgs.python2Packages.pydeck`,
  "Large-scale interactive data visualization in Python",
);

/**
 * Python library wrapping the Deconz REST API
 */
export const pydeconz = mkPackage(
  nixRaw`pkgs.python2Packages.pydeconz`,
  "Python library wrapping the Deconz REST API",
);

/**
 * Python package to retrieve realtime data of passages at stops of De Lijn
 */
export const pydelijn = mkPackage(
  nixRaw`pkgs.python2Packages.pydelijn`,
  "Python package to retrieve realtime data of passages at stops of De Lijn",
);

/**
 * Library for generating identicons. Port of Sigil (https://github.com/cupcake/sigil) with enhancements
 */
export const pydenticon = mkPackage(
  nixRaw`pkgs.python2Packages.pydenticon`,
  "Library for generating identicons. Port of Sigil (https://github.com/cupcake/sigil) with enhancements",
);

/**
 * Python module dependency visualization
 */
export const pydeps = mkPackage(
  nixRaw`pkgs.python2Packages.pydeps`,
  "Python module dependency visualization",
);

/**
 * A pure python module which implements the DES and Triple-DES encryption algorithms
 */
export const pydes = mkPackage(
  nixRaw`pkgs.python2Packages.pydes`,
  "A pure python module which implements the DES and Triple-DES encryption algorithms",
);

/**
 * HomeMatic CCU XML-RPC Server with fake devices
 */
export const pydevccu = mkPackage(
  nixRaw`pkgs.python2Packages.pydevccu`,
  "HomeMatic CCU XML-RPC Server with fake devices",
);

/**
 * PyDev.Debugger (used in PyDev, PyCharm and VSCode Python)
 */
export const pydevd = mkPackage(
  nixRaw`pkgs.python2Packages.pydevd`,
  "PyDev.Debugger (used in PyDev, PyCharm and VSCode Python)",
);

/**
 * CLI dev tools powered by pydoit
 */
export const pydevtool = mkPackage(
  nixRaw`pkgs.python2Packages.pydevtool`,
  "CLI dev tools powered by pydoit",
);

/**
 * Python API to interact with Dexcom Share service
 */
export const pydexcom = mkPackage(
  nixRaw`pkgs.python2Packages.pydexcom`,
  "Python API to interact with Dexcom Share service",
);

/**
 * Python package for working with DICOM files
 */
export const pydicom = mkPackage(
  nixRaw`pkgs.python2Packages.pydicom`,
  "Python package for working with DICOM files",
);

/**
 * Medical segmentation file reading and writing
 */
export const pydicom_seg = mkPackage(
  nixRaw`pkgs.python2Packages.pydicom-seg`,
  "Medical segmentation file reading and writing",
);

/**
 * bindings for the csdr library
 */
export const pydigiham = mkPackage(
  nixRaw`pkgs.python2Packages.pydigiham`,
  "bindings for the csdr library",
);

/**
 * A Python library for working with Discourse
 */
export const pydiscourse = mkPackage(
  nixRaw`pkgs.python2Packages.pydiscourse`,
  "A Python library for working with Discourse",
);

/**
 * Async Python 3 library for interacting with the Discovergy API
 */
export const pydiscovergy = mkPackage(
  nixRaw`pkgs.python2Packages.pydiscovergy`,
  "Async Python 3 library for interacting with the Discovergy API",
);

/**
 * Signal-registration and routing infrastructure for use in multiple contexts
 */
export const pydispatcher = mkPackage(
  nixRaw`pkgs.python2Packages.pydispatcher`,
  "Signal-registration and routing infrastructure for use in multiple contexts",
);

/**
 * Python Dynamic Mode Decomposition
 */
export const pydmd = mkPackage(
  nixRaw`pkgs.python2Packages.pydmd`,
  "Python Dynamic Mode Decomposition",
);

/**
 * Python 3 DNS library
 */
export const pydns = mkPackage(
  nixRaw`pkgs.python2Packages.pydns`,
  "Python 3 DNS library",
);

/**
 * Python docstring style checker
 */
export const pydocstyle = mkPackage(
  nixRaw`pkgs.python2Packages.pydocstyle`,
  "Python docstring style checker",
);

/**
 * Azure Cosmos DB API
 */
export const pydocumentdb = mkPackage(
  nixRaw`pkgs.python2Packages.pydocumentdb`,
  "Azure Cosmos DB API",
);

/**
 * Python wrapper for the DOODS service
 */
export const pydoods = mkPackage(
  nixRaw`pkgs.python2Packages.pydoods`,
  "Python wrapper for the DOODS service",
);

/**
 * Allows to create both directed and non directed graphs from Python
 */
export const pydot = mkPackage(
  nixRaw`pkgs.python2Packages.pydot`,
  "Allows to create both directed and non directed graphs from Python",
);

/**
 * Library for interacting with Hydrawise sprinkler controllers through the GraphQL API
 */
export const pydrawise = mkPackage(
  nixRaw`pkgs.python2Packages.pydrawise`,
  "Library for interacting with Hydrawise sprinkler controllers through the GraphQL API",
);

/**
 * Google Drive API Python wrapper library
 */
export const pydrive2 = mkPackage(
  nixRaw`pkgs.python2Packages.pydrive2`,
  "Google Drive API Python wrapper library",
);

/**
 * Python library for Android IP Webcam
 */
export const pydroid_ipcam = mkPackage(
  nixRaw`pkgs.python2Packages.pydroid-ipcam`,
  "Python library for Android IP Webcam",
);

/**
 * Simple API to create, execute, and analyze Druid queries
 */
export const pydruid = mkPackage(
  nixRaw`pkgs.python2Packages.pydruid`,
  "Simple API to create, execute, and analyze Druid queries",
);

/**
 * Library to process Cyphal DSDL
 */
export const pydsdl = mkPackage(
  nixRaw`pkgs.python2Packages.pydsdl`,
  "Library to process Cyphal DSDL",
);

/**
 * Manipulate audio with a simple and easy high level interface
 */
export const pydub = mkPackage(
  nixRaw`pkgs.python2Packages.pydub`,
  "Manipulate audio with a simple and easy high level interface",
);

/**
 * Python module for the Duke Energy API
 */
export const pyduke_energy = mkPackage(
  nixRaw`pkgs.python2Packages.pyduke-energy`,
  "Python module for the Duke Energy API",
);

/**
 * Module to interact with Duotecno IP interfaces
 */
export const pyduotecno = mkPackage(
  nixRaw`pkgs.python2Packages.pyduotecno`,
  "Module to interact with Duotecno IP interfaces",
);

/**
 * Python tool kit for multi-body dynamics
 */
export const pydy = mkPackage(
  nixRaw`pkgs.python2Packages.pydy`,
  "Python tool kit for multi-body dynamics",
);

/**
 * Low-level PDF generator written in Python and based on PDF specification 1.7
 */
export const pydyf = mkPackage(
  nixRaw`pkgs.python2Packages.pydyf`,
  "Low-level PDF generator written in Python and based on PDF specification 1.7",
);

/**
 * Client for Arista eAPI
 */
export const pyeapi = mkPackage(
  nixRaw`pkgs.python2Packages.pyeapi`,
  "Client for Arista eAPI",
);

/**
 * Pythonic Interface to EBUS Daemon (ebusd)
 */
export const pyebus = mkPackage(
  nixRaw`pkgs.python2Packages.pyebus`,
  "Pythonic Interface to EBUS Daemon (ebusd)",
);

/**
 * Tap into The Echo Nest's Musical Brain for the best music search, information, recommendations and remix tools on the web
 */
export const pyechonest = mkPackage(
  nixRaw`pkgs.python2Packages.pyechonest`,
  "Tap into The Echo Nest's Musical Brain for the best music search, information, recommendations and remix tools on the web",
);

/**
 * This library provides a simple Python interface for implementing erasure codes.
 */
export const pyeclib = mkPackage(
  nixRaw`pkgs.python2Packages.pyeclib`,
  "This library provides a simple Python interface for implementing erasure codes.",
);

/**
 * Module for interacting with Ecoforest devices
 */
export const pyecoforest = mkPackage(
  nixRaw`pkgs.python2Packages.pyecoforest`,
  "Module for interacting with Ecoforest devices",
);

/**
 * Python interface to the EcoNet API
 */
export const pyeconet = mkPackage(
  nixRaw`pkgs.python2Packages.pyeconet`,
  "Python interface to the EcoNet API",
);

/**
 * Python module for the EcoWitt Protocol
 */
export const pyecowitt = mkPackage(
  nixRaw`pkgs.python2Packages.pyecowitt`,
  "Python module for the EcoWitt Protocol",
);

/**
 * Python library for interfacing with the Edimax smart plugs
 */
export const pyedimax = mkPackage(
  nixRaw`pkgs.python2Packages.pyedimax`,
  "Python library for interfacing with the Edimax smart plugs",
);

/**
 * A port of Node.js's EventEmitter to Python
 */
export const pyee = mkPackage(
  nixRaw`pkgs.python2Packages.pyee`,
  "A port of Node.js's EventEmitter to Python",
);

/**
 * Python API library for Efergy energy meters
 */
export const pyefergy = mkPackage(
  nixRaw`pkgs.python2Packages.pyefergy`,
  "Python API library for Efergy energy meters",
);

/**
 * Python library to interface with the Eight Sleep API
 */
export const pyeight = mkPackage(
  nixRaw`pkgs.python2Packages.pyeight`,
  "Python library to interface with the Eight Sleep API",
);

/**
 * Python library for analyzing ELF files and DWARF debugging information
 */
export const pyelftools = mkPackage(
  nixRaw`pkgs.python2Packages.pyelftools`,
  "Python library for analyzing ELF files and DWARF debugging information",
);

/**
 * Python library to interface with the Emby API
 */
export const pyemby = mkPackage(
  nixRaw`pkgs.python2Packages.pyemby`,
  "Python library to interface with the Emby API",
);

/**
 * A Python wrapper for Ofir Pele and Michael Werman's implementation of the Earth Mover's Distance
 */
export const pyemd = mkPackage(
  nixRaw`pkgs.python2Packages.pyemd`,
  "A Python wrapper for Ofir Pele and Michael Werman's implementation of the Earth Mover's Distance",
);

/**
 * pyenchant: Python bindings for the Enchant spellchecker
 */
export const pyenchant = mkPackage(
  nixRaw`pkgs.python2Packages.pyenchant`,
  "pyenchant: Python bindings for the Enchant spellchecker",
);

/**
 * Library to control enphase envoy
 */
export const pyenphase = mkPackage(
  nixRaw`pkgs.python2Packages.pyenphase`,
  "Library to control enphase envoy",
);

/**
 * Python interface for Envisalink 2DS/3 Alarm API
 */
export const pyenvisalink = mkPackage(
  nixRaw`pkgs.python2Packages.pyenvisalink`,
  "Python interface for Envisalink 2DS/3 Alarm API",
);

/**
 * Python client to the EPH Control Systems Ember API
 */
export const pyephember = mkPackage(
  nixRaw`pkgs.python2Packages.pyephember`,
  "Python client to the EPH Control Systems Ember API",
);

/**
 * Simple Python interface to epsg.io
 */
export const pyepsg = mkPackage(
  nixRaw`pkgs.python2Packages.pyepsg`,
  "Simple Python interface to epsg.io",
);

/**
 * Python bindings for ERFA routines
 */
export const pyerfa = mkPackage(
  nixRaw`pkgs.python2Packages.pyerfa`,
  "Python bindings for ERFA routines",
);

/**
 * Python module for interfacing with an EverLights control box
 */
export const pyeverlights = mkPackage(
  nixRaw`pkgs.python2Packages.pyeverlights`,
  "Python module for interfacing with an EverLights control box",
);

/**
 * Python SDK to interact with Evil Genius Labs devices
 */
export const pyevilgenius = mkPackage(
  nixRaw`pkgs.python2Packages.pyevilgenius`,
  "Python SDK to interact with Evil Genius Labs devices",
);

/**
 * Ethereum Virtual Machine (EVM) assembler and disassembler
 */
export const pyevmasm = mkPackage(
  nixRaw`pkgs.python2Packages.pyevmasm`,
  "Ethereum Virtual Machine (EVM) assembler and disassembler",
);

/**
 * Single API for reading, manipulating and writing data in csv, ods, xls, xlsx and xlsm files
 */
export const pyexcel = mkPackage(
  nixRaw`pkgs.python2Packages.pyexcel`,
  "Single API for reading, manipulating and writing data in csv, ods, xls, xlsx and xlsm files",
);

/**
 * One interface to read and write the data in various excel formats, import the data into and export the data from databases
 */
export const pyexcel_io = mkPackage(
  nixRaw`pkgs.python2Packages.pyexcel-io`,
  "One interface to read and write the data in various excel formats, import the data into and export the data from databases",
);

/**
 * Plug-in to pyexcel providing the capbility to read, manipulate and write data in ods formats using odfpy
 */
export const pyexcel_ods = mkPackage(
  nixRaw`pkgs.python2Packages.pyexcel-ods`,
  "Plug-in to pyexcel providing the capbility to read, manipulate and write data in ods formats using odfpy",
);

/**
 * A wrapper library to read, manipulate and write data in xls using xlrd and xlwt
 */
export const pyexcel_xls = mkPackage(
  nixRaw`pkgs.python2Packages.pyexcel-xls`,
  "A wrapper library to read, manipulate and write data in xls using xlrd and xlwt",
);

/**
 * Library to fetch the most recent exploit-database
 */
export const pyexploitdb = mkPackage(
  nixRaw`pkgs.python2Packages.pyexploitdb`,
  "Library to fetch the most recent exploit-database",
);

/**
 * Python interface for for Ezviz cameras
 */
export const pyezviz = mkPackage(
  nixRaw`pkgs.python2Packages.pyezviz`,
  "Python interface for for Ezviz cameras",
);

/**
 * Traits-capable windowing framework
 */
export const pyface = mkPackage(
  nixRaw`pkgs.python2Packages.pyface`,
  "Traits-capable windowing framework",
);

/**
 * Python classes for indexing, retrieval, and in-place modification of FASTA files using a samtools compatible index
 */
export const pyfaidx = mkPackage(
  nixRaw`pkgs.python2Packages.pyfaidx`,
  "Python classes for indexing, retrieval, and in-place modification of FASTA files using a samtools compatible index",
);

/**
 * Fake file system that mocks the Python file system modules
 */
export const pyfakefs = mkPackage(
  nixRaw`pkgs.python2Packages.pyfakefs`,
  "Fake file system that mocks the Python file system modules",
);

/**
 * A library for writing RGB frames to a fake webcam device on Linux
 */
export const pyfakewebcam = mkPackage(
  nixRaw`pkgs.python2Packages.pyfakewebcam`,
  "A library for writing RGB frames to a fake webcam device on Linux",
);

/**
 * Wrapper for the LEGO Mindstorms Fantom Driver
 */
export const pyfantom = mkPackage(
  nixRaw`pkgs.python2Packages.pyfantom`,
  "Wrapper for the LEGO Mindstorms Fantom Driver",
);

/**
 * Python client for FCM - Firebase Cloud Messaging (Android, iOS and Web)
 */
export const pyfcm = mkPackage(
  nixRaw`pkgs.python2Packages.pyfcm`,
  "Python client for FCM - Firebase Cloud Messaging (Android, iOS and Web)",
);

/**
 * A pythonic wrapper around FFTW, the FFT library, presenting a unified interface for all the supported transforms
 */
export const pyfftw = mkPackage(
  nixRaw`pkgs.python2Packages.pyfftw`,
  "A pythonic wrapper around FFTW, the FFT library, presenting a unified interface for all the supported transforms",
);

/**
 * Library to access FIBARO Home center
 */
export const pyfibaro = mkPackage(
  nixRaw`pkgs.python2Packages.pyfibaro`,
  "Library to access FIBARO Home center",
);

/**
 * Python client to get fido account data
 */
export const pyfido = mkPackage(
  nixRaw`pkgs.python2Packages.pyfido`,
  "Python client to get fido account data",
);

/**
 * FIGlet in pure Python
 */
export const pyfiglet = mkPackage(
  nixRaw`pkgs.python2Packages.pyfiglet`,
  "FIGlet in pure Python",
);

/**
 * Python 3 API wrapper for FireServiceRota/BrandweerRooster
 */
export const pyfireservicerota = mkPackage(
  nixRaw`pkgs.python2Packages.pyfireservicerota`,
  "Python 3 API wrapper for FireServiceRota/BrandweerRooster",
);

/**
 * A simple program which checks Python source files for errors
 */
export const pyflakes = mkPackage(
  nixRaw`pkgs.python2Packages.pyflakes`,
  "A simple program which checks Python source files for errors",
);

/**
 * Python library for Flexit A/C units
 */
export const pyflexit = mkPackage(
  nixRaw`pkgs.python2Packages.pyflexit`,
  "Python library for Flexit A/C units",
);

/**
 * Python module to interact with Flic buttons
 */
export const pyflic = mkPackage(
  nixRaw`pkgs.python2Packages.pyflic`,
  "Python module to interact with Flic buttons",
);

/**
 * Python API For Flick Electric in New Zealand
 */
export const pyflick = mkPackage(
  nixRaw`pkgs.python2Packages.pyflick`,
  "Python API For Flick Electric in New Zealand",
);

/**
 * Python bindings for FluidSynth, a MIDI synthesizer that uses SoundFont instruments
 */
export const pyfluidsynth = mkPackage(
  nixRaw`pkgs.python2Packages.pyfluidsynth`,
  "Python bindings for FluidSynth, a MIDI synthesizer that uses SoundFont instruments",
);

/**
 * Python module to work with Flume sensors
 */
export const pyflume = mkPackage(
  nixRaw`pkgs.python2Packages.pyflume`,
  "Python module to work with Flume sensors",
);

/**
 * Fused multiply-add for Python
 */
export const pyfma = mkPackage(
  nixRaw`pkgs.python2Packages.pyfma`,
  "Fused multiply-add for Python",
);

/**
 * Python client to get fido account data
 */
export const pyfnip = mkPackage(
  nixRaw`pkgs.python2Packages.pyfnip`,
  "Python client to get fido account data",
);

/**
 * Python library for Freedompro API
 */
export const pyfreedompro = mkPackage(
  nixRaw`pkgs.python2Packages.pyfreedompro`,
  "Python library for Freedompro API",
);

/**
 * A simple wrapper around fribidi
 */
export const pyfribidi = mkPackage(
  nixRaw`pkgs.python2Packages.pyfribidi`,
  "A simple wrapper around fribidi",
);

/**
 * Python Library to access AVM FRITZ!Box homeautomation
 */
export const pyfritzhome = mkPackage(
  nixRaw`pkgs.python2Packages.pyfritzhome`,
  "Python Library to access AVM FRITZ!Box homeautomation",
);

/**
 * Python module to communicate with Fronius Symo
 */
export const pyfronius = mkPackage(
  nixRaw`pkgs.python2Packages.pyfronius`,
  "Python module to communicate with Fronius Symo",
);

/**
 * User-space driver for modern FTDI devices
 */
export const pyftdi = mkPackage(
  nixRaw`pkgs.python2Packages.pyftdi`,
  "User-space driver for modern FTDI devices",
);

/**
 * Python bindings for FTGL (FreeType for OpenGL)
 */
export const pyftgl = mkPackage(
  nixRaw`pkgs.python2Packages.pyftgl`,
  "Python bindings for FTGL (FreeType for OpenGL)",
);

/**
 * Asynchronous FTP server library
 */
export const pyftpdlib = mkPackage(
  nixRaw`pkgs.python2Packages.pyftpdlib`,
  "Asynchronous FTP server library",
);

/**
 * Package for sending events to the IFTTT Webhooks Channel
 */
export const pyfttt = mkPackage(
  nixRaw`pkgs.python2Packages.pyfttt`,
  "Package for sending events to the IFTTT Webhooks Channel",
);

/**
 * A Python package for fuzzy model estimation
 */
export const pyfume = mkPackage(
  nixRaw`pkgs.python2Packages.pyfume`,
  "A Python package for fuzzy model estimation",
);

/**
 * Python 3 bindings for libfuse 3 with async I/O support
 */
export const pyfuse3 = mkPackage(
  nixRaw`pkgs.python2Packages.pyfuse3`,
  "Python 3 bindings for libfuse 3 with async I/O support",
);

/**
 * Firefox Accounts client library
 */
export const pyfxa = mkPackage(
  nixRaw`pkgs.python2Packages.pyfxa`,
  "Firefox Accounts client library",
);

/**
 * Wrapper for fzf
 */
export const pyfzf = mkPackage(
  nixRaw`pkgs.python2Packages.pyfzf`,
  "Wrapper for fzf",
);

/**
 * Sexy and simple python charting
 */
export const pygal = mkPackage(
  nixRaw`pkgs.python2Packages.pygal`,
  "Sexy and simple python charting",
);

/**
 * Python library for games
 */
export const pygame = mkPackage(
  nixRaw`pkgs.python2Packages.pygame`,
  "Python library for games",
);

/**
 * A GUI system for pygame
 */
export const pygame_gui = mkPackage(
  nixRaw`pkgs.python2Packages.pygame-gui`,
  "A GUI system for pygame",
);

/**
 * A reimplementation of parts of pygame API using SDL2
 */
export const pygame_sdl2 = mkPackage(
  nixRaw`pkgs.python2Packages.pygame_sdl2`,
  "A reimplementation of parts of pygame API using SDL2",
);

/**
 * Python wrapper the BGAPI for accessing Bluetooth LE Devices
 */
export const pygatt = mkPackage(
  nixRaw`pkgs.python2Packages.pygatt`,
  "Python wrapper the BGAPI for accessing Bluetooth LE Devices",
);

/**
 * Python package for easy C++ declarations navigation
 */
export const pygccxml = mkPackage(
  nixRaw`pkgs.python2Packages.pygccxml`,
  "Python package for easy C++ declarations navigation",
);

/**
 * Parse gdb machine interface output with Python
 */
export const pygdbmi = mkPackage(
  nixRaw`pkgs.python2Packages.pygdbmi`,
  "Parse gdb machine interface output with Python",
);

/**
 * Pure Python GeoIP API
 */
export const pygeoip = mkPackage(
  nixRaw`pkgs.python2Packages.pygeoip`,
  "Pure Python GeoIP API",
);

/**
 * Wraps GEOS geometry functions in numpy ufuncs
 */
export const pygeos = mkPackage(
  nixRaw`pkgs.python2Packages.pygeos`,
  "Wraps GEOS geometry functions in numpy ufuncs",
);

/**
 * A simple, cross-platform module for obtaining GUI information on applications' windows.
 */
export const pygetwindow = mkPackage(
  nixRaw`pkgs.python2Packages.pygetwindow`,
  "A simple, cross-platform module for obtaining GUI information on applications' windows.",
);

/**
 * A set of Python bindings to the libgit2 shared library
 */
export const pygit2 = mkPackage(
  nixRaw`pkgs.python2Packages.pygit2`,
  "A set of Python bindings to the libgit2 shared library",
);

/**
 * Library to access the GitGuardian API
 */
export const pygitguardian = mkPackage(
  nixRaw`pkgs.python2Packages.pygitguardian`,
  "Library to access the GitGuardian API",
);

/**
 * Python library to access the GitHub API v3
 */
export const pygithub = mkPackage(
  nixRaw`pkgs.python2Packages.pygithub`,
  "Python library to access the GitHub API v3",
);

/**
 * A cross-platform windowing and multimedia library
 */
export const pyglet = mkPackage(
  nixRaw`pkgs.python2Packages.pyglet`,
  "A cross-platform windowing and multimedia library",
);

/**
 * An OpenGL Mathematics (GLM) library for Python written in C++
 */
export const pyglm = mkPackage(
  nixRaw`pkgs.python2Packages.pyglm`,
  "An OpenGL Mathematics (GLM) library for Python written in C++",
);

/**
 * Pythonic generic implementation of the Language Server Protocol
 */
export const pygls = mkPackage(
  nixRaw`pkgs.python2Packages.pygls`,
  "Pythonic generic implementation of the Language Server Protocol",
);

/**
 * Python lexing and parsing library
 */
export const pygmars = mkPackage(
  nixRaw`pkgs.python2Packages.pygmars`,
  "Python lexing and parsing library",
);

/**
 * A generic syntax highlighter
 */
export const pygments = mkPackage(
  nixRaw`pkgs.python2Packages.pygments`,
  "A generic syntax highlighter",
);

/**
 * Improved line numbering for Pygments’ HTML formatter.
 */
export const pygments_better_html = mkPackage(
  nixRaw`pkgs.python2Packages.pygments-better-html`,
  "Improved line numbering for Pygments’ HTML formatter.",
);

/**
 * Pygments Markdown Lexer – A Markdown lexer for Pygments to highlight Markdown code snippets
 */
export const pygments_markdown_lexer = mkPackage(
  nixRaw`pkgs.python2Packages.pygments-markdown-lexer`,
  "Pygments Markdown Lexer – A Markdown lexer for Pygments to highlight Markdown code snippets",
);

/**
 * A port of the github color scheme for pygments
 */
export const pygments_style_github = mkPackage(
  nixRaw`pkgs.python2Packages.pygments-style-github`,
  "A port of the github color scheme for pygments",
);

/**
 * Parallel optimisation for Python
 */
export const pygmo = mkPackage(
  nixRaw`pkgs.python2Packages.pygmo`,
  "Parallel optimisation for Python",
);

/**
 * A Python interface for the Generic Mapping Tools
 */
export const pygmt = mkPackage(
  nixRaw`pkgs.python2Packages.pygmt`,
  "A Python interface for the Generic Mapping Tools",
);

/**
 * Pure Python gNMI client to manage network functions and collect telemetry
 */
export const pygnmi = mkPackage(
  nixRaw`pkgs.python2Packages.pygnmi`,
  "Pure Python gNMI client to manage network functions and collect telemetry",
);

/**
 * Python bindings for GLib
 */
export const pygobject2 = mkPackage(
  nixRaw`pkgs.python2Packages.pygobject2`,
  "Python bindings for GLib",
);

/**
 * Python bindings for Glib
 */
export const pygobject3 = mkPackage(
  nixRaw`pkgs.python2Packages.pygobject3`,
  "Python bindings for Glib",
);

/**
 * PEP 561 Typing Stubs for PyGObject
 */
export const pygobject_stubs = mkPackage(
  nixRaw`pkgs.python2Packages.pygobject-stubs`,
  "PEP 561 Typing Stubs for PyGObject",
);

/**
 * Python logging library
 */
export const pygogo = mkPackage(
  nixRaw`pkgs.python2Packages.pygogo`,
  "Python logging library",
);

/**
 * A Python wrapper for the GPGME library
 */
export const pygpgme = mkPackage(
  nixRaw`pkgs.python2Packages.pygpgme`,
  "A Python wrapper for the GPGME library",
);

/**
 * Python interface to Graphviz graph drawing package
 */
export const pygraphviz = mkPackage(
  nixRaw`pkgs.python2Packages.pygraphviz`,
  "Python interface to Graphviz graph drawing package",
);

/**
 * Python library for talking with libGreat devices
 */
export const pygreat = mkPackage(
  nixRaw`pkgs.python2Packages.pygreat`,
  "Python library for talking with libGreat devices",
);

/**
 * A python implementation of jordansissel's grok regular expression library
 */
export const pygrok = mkPackage(
  nixRaw`pkgs.python2Packages.pygrok`,
  "A python implementation of jordansissel's grok regular expression library",
);

/**
 * Python interface for GNU Scientific Library
 */
export const pygsl = mkPackage(
  nixRaw`pkgs.python2Packages.pygsl`,
  "Python interface for GNU Scientific Library",
);

/**
 * A library for reading log file lines that have not been read
 */
export const pygtail = mkPackage(
  nixRaw`pkgs.python2Packages.pygtail`,
  "A library for reading log file lines that have not been read",
);

/**
 * Python module for GTFS
 */
export const pygtfs = mkPackage(
  nixRaw`pkgs.python2Packages.pygtfs`,
  "Python module for GTFS",
);

/**
 * Access public transport information in Hamburg, Germany
 */
export const pygti = mkPackage(
  nixRaw`pkgs.python2Packages.pygti`,
  "Access public transport information in Hamburg, Germany",
);

/**
 * GTK 2 Python bindings
 */
export const pygtk = mkPackage(
  nixRaw`pkgs.python2Packages.pygtk`,
  "GTK 2 Python bindings",
);

/**
 * A Python spell-checking library for GtkTextViews based on Enchant
 */
export const pygtkspellcheck = mkPackage(
  nixRaw`pkgs.python2Packages.pygtkspellcheck`,
  "A Python spell-checking library for GtkTextViews based on Enchant",
);

/**
 * Trie data structure implementation
 */
export const pygtrie = mkPackage(
  nixRaw`pkgs.python2Packages.pygtrie`,
  "Trie data structure implementation",
);

/**
 * Hamcrest framework for matcher objects
 */
export const pyhamcrest = mkPackage(
  nixRaw`pkgs.python2Packages.pyhamcrest`,
  "Hamcrest framework for matcher objects",
);

/**
 * Sign and stamp PDF files
 */
export const pyhanko = mkPackage(
  nixRaw`pkgs.python2Packages.pyhanko`,
  "Sign and stamp PDF files",
);

/**
 * Python library for validating X.509 certificates and paths
 */
export const pyhanko_certvalidator = mkPackage(
  nixRaw`pkgs.python2Packages.pyhanko-certvalidator`,
  "Python library for validating X.509 certificates and paths",
);

/**
 * Python module to the newest version number of Home Assistant
 */
export const pyhaversion = mkPackage(
  nixRaw`pkgs.python2Packages.pyhaversion`,
  "Python module to the newest version number of Home Assistant",
);

/**
 * HCL is a configuration language. pyhcl is a python parser for it
 */
export const pyhcl = mkPackage(
  nixRaw`pkgs.python2Packages.pyhcl`,
  "HCL is a configuration language. pyhcl is a python parser for it",
);

/**
 * Python bindings for heck, the Rust case conversion library
 */
export const pyheck = mkPackage(
  nixRaw`pkgs.python2Packages.pyheck`,
  "Python bindings for heck, the Rust case conversion library",
);

/**
 * Python interface to libheif library
 */
export const pyheif = mkPackage(
  nixRaw`pkgs.python2Packages.pyheif`,
  "Python interface to libheif library",
);

/**
 * Async python library for controlling HEOS devices through the HEOS CLI Protocol
 */
export const pyheos = mkPackage(
  nixRaw`pkgs.python2Packages.pyheos`,
  "Async python library for controlling HEOS devices through the HEOS CLI Protocol",
);

/**
 * Easy-to-use Python bindings for HepMC3
 */
export const pyhepmc = mkPackage(
  nixRaw`pkgs.python2Packages.pyhepmc`,
  "Easy-to-use Python bindings for HepMC3",
);

/**
 * Python library to interface with the Hive API
 */
export const pyhiveapi = mkPackage(
  nixRaw`pkgs.python2Packages.pyhiveapi`,
  "Python library to interface with the Hive API",
);

/**
 * HOCON parser for Python
 */
export const pyhocon = mkPackage(
  nixRaw`pkgs.python2Packages.pyhocon`,
  "HOCON parser for Python",
);

/**
 * Python 3 Interface to interact with Homematic devices
 */
export const pyhomematic = mkPackage(
  nixRaw`pkgs.python2Packages.pyhomematic`,
  "Python 3 Interface to interact with Homematic devices",
);

/**
 * Python module to communicate with the Rademacher HomePilot API
 */
export const pyhomepilot = mkPackage(
  nixRaw`pkgs.python2Packages.pyhomepilot`,
  "Python module to communicate with the Rademacher HomePilot API",
);

/**
 * Python interface to Lutron Homeworks Series 4/8
 */
export const pyhomeworks = mkPackage(
  nixRaw`pkgs.python2Packages.pyhomeworks`,
  "Python interface to Lutron Homeworks Series 4/8",
);

/**
 * Python Library to control TPLink Switch (HS100 / HS110)
 */
export const pyhs100 = mkPackage(
  nixRaw`pkgs.python2Packages.pyhs100`,
  "Python Library to control TPLink Switch (HS100 / HS110)",
);

/**
 * Module to convert strings (and dictionary keys) between snake case, camel case and pascal case
 */
export const pyhumps = mkPackage(
  nixRaw`pkgs.python2Packages.pyhumps`,
  "Module to convert strings (and dictionary keys) between snake case, camel case and pascal case",
);

/**
 * I2C eeprom device drivers in Python
 */
export const pyi2cflash = mkPackage(
  nixRaw`pkgs.python2Packages.pyi2cflash`,
  "I2C eeprom device drivers in Python",
);

/**
 * Python library to interface with Antifurto365 iAlarm systems
 */
export const pyialarm = mkPackage(
  nixRaw`pkgs.python2Packages.pyialarm`,
  "Python library to interface with Antifurto365 iAlarm systems",
);

/**
 * PyiCloud is a module which allows pythonistas to interact with iCloud webservices
 */
export const pyicloud = mkPackage(
  nixRaw`pkgs.python2Packages.pyicloud`,
  "PyiCloud is a module which allows pythonistas to interact with iCloud webservices",
);

/**
 * Python extension wrapping the ICU C++ API
 */
export const pyicu = mkPackage(
  nixRaw`pkgs.python2Packages.pyicu`,
  "Python extension wrapping the ICU C++ API",
);

/**
 * A Python module which calculates and compares the impfuzzy (import fuzzy hashing)
 */
export const pyimpfuzzy = mkPackage(
  nixRaw`pkgs.python2Packages.pyimpfuzzy`,
  "A Python module which calculates and compares the impfuzzy (import fuzzy hashing)",
);

/**
 * Python-based infrastructure automation
 */
export const pyinfra = mkPackage(
  nixRaw`pkgs.python2Packages.pyinfra`,
  "Python-based infrastructure automation",
);

/**
 * Monitor filesystems events on Linux platforms with inotify
 */
export const pyinotify = mkPackage(
  nixRaw`pkgs.python2Packages.pyinotify`,
  "Monitor filesystems events on Linux platforms with inotify",
);

/**
 * Python interface to the Input Subsystem's input_event and uinput
 */
export const pyinputevent = mkPackage(
  nixRaw`pkgs.python2Packages.pyinputevent`,
  "Python interface to the Input Subsystem's input_event and uinput",
);

/**
 * Create a windows version-file from a simple YAML file that can be used by PyInstaller.
 */
export const pyinstaller_versionfile = mkPackage(
  nixRaw`pkgs.python2Packages.pyinstaller-versionfile`,
  "Create a windows version-file from a simple YAML file that can be used by PyInstaller.",
);

/**
 * Python library to support Insteon home automation projects
 */
export const pyinsteon = mkPackage(
  nixRaw`pkgs.python2Packages.pyinsteon`,
  "Python library to support Insteon home automation projects",
);

/**
 * Call stack profiler for Python
 */
export const pyinstrument = mkPackage(
  nixRaw`pkgs.python2Packages.pyinstrument`,
  "Call stack profiler for Python",
);

/**
 * Python interface for IntesisHome devices
 */
export const pyintesishome = mkPackage(
  nixRaw`pkgs.python2Packages.pyintesishome`,
  "Python interface for IntesisHome devices",
);

/**
 * Library to retrieve information from Instituto Português do Mar e Atmosfera
 */
export const pyipma = mkPackage(
  nixRaw`pkgs.python2Packages.pyipma`,
  "Library to retrieve information from Instituto Português do Mar e Atmosfera",
);

/**
 * Asynchronous Python client for Internet Printing Protocol (IPP)
 */
export const pyipp = mkPackage(
  nixRaw`pkgs.python2Packages.pyipp`,
  "Asynchronous Python client for Internet Printing Protocol (IPP)",
);

/**
 * Module for working with IQVIA data
 */
export const pyiqvia = mkPackage(
  nixRaw`pkgs.python2Packages.pyiqvia`,
  "Module for working with IQVIA data",
);

/**
 * Python module for working with 10- and 13-digit ISBNs
 */
export const pyisbn = mkPackage(
  nixRaw`pkgs.python2Packages.pyisbn`,
  "Python module for working with 10- and 13-digit ISBNs",
);

/**
 * Python module to talk to ISY994 from UDI
 */
export const pyisy = mkPackage(
  nixRaw`pkgs.python2Packages.pyisy`,
  "Python module to talk to ISY994 from UDI",
);

/**
 * Python API client library for IX-API
 */
export const pyixapi = mkPackage(
  nixRaw`pkgs.python2Packages.pyixapi`,
  "Python API client library for IX-API",
);

/**
 * The interface between FastJet and NumPy
 */
export const pyjet = mkPackage(
  nixRaw`pkgs.python2Packages.pyjet`,
  "The interface between FastJet and NumPy",
);

/**
 * Pure-Python Java Keystore (JKS) library
 */
export const pyjks = mkPackage(
  nixRaw`pkgs.python2Packages.pyjks`,
  "Pure-Python Java Keystore (JKS) library",
);

/**
 * A Python module to access Java classes as Python classes using the Java Native Interface (JNI)
 */
export const pyjnius = mkPackage(
  nixRaw`pkgs.python2Packages.pyjnius`,
  "A Python module to access Java classes as Python classes using the Java Native Interface (JNI)",
);

/**
 * Fast javascript parser (based on esprima.js)
 */
export const pyjsparser = mkPackage(
  nixRaw`pkgs.python2Packages.pyjsparser`,
  "Fast javascript parser (based on esprima.js)",
);

/**
 * Implementation of JWT, JWS, JWE and JWK
 */
export const pyjwkest = mkPackage(
  nixRaw`pkgs.python2Packages.pyjwkest`,
  "Implementation of JWT, JWS, JWE and JWK",
);

/**
 * JSON Web Token implementation in Python
 */
export const pyjwt = mkPackage(
  nixRaw`pkgs.python2Packages.pyjwt`,
  "JSON Web Token implementation in Python",
);

/**
 * Python converter for Japanese Kana-kanji sentences into Kana-Roman
 */
export const pykakasi = mkPackage(
  nixRaw`pkgs.python2Packages.pykakasi`,
  "Python converter for Japanese Kana-kanji sentences into Kana-Roman",
);

/**
 * Module for controlling Kaleidescape devices
 */
export const pykaleidescape = mkPackage(
  nixRaw`pkgs.python2Packages.pykaleidescape`,
  "Module for controlling Kaleidescape devices",
);

/**
 * An implementation of the Kalman Filter, Kalman Smoother, and EM algorithm in Python
 */
export const pykalman = mkPackage(
  nixRaw`pkgs.python2Packages.pykalman`,
  "An implementation of the Kalman Filter, Kalman Smoother, and EM algorithm in Python",
);

/**
 * Kinematics and Dynamics Library (Python bindings)
 */
export const pykdl = mkPackage(
  nixRaw`pkgs.python2Packages.pykdl`,
  "Kinematics and Dynamics Library (Python bindings)",
);

/**
 * kd-tree implementation for fast nearest neighbour search in Python
 */
export const pykdtree = mkPackage(
  nixRaw`pkgs.python2Packages.pykdtree`,
  "kd-tree implementation for fast nearest neighbour search in Python",
);

/**
 * Python library to interact with keepass databases (supports KDBX3 and KDBX4)
 */
export const pykeepass = mkPackage(
  nixRaw`pkgs.python2Packages.pykeepass`,
  "Python library to interact with keepass databases (supports KDBX3 and KDBX4)",
);

/**
 * High-level interface to Kerberos
 */
export const pykerberos = mkPackage(
  nixRaw`pkgs.python2Packages.pykerberos`,
  "High-level interface to Kerberos",
);

/**
 * Python module to get data from Atome Key
 */
export const pykeyatome = mkPackage(
  nixRaw`pkgs.python2Packages.pykeyatome`,
  "Python module to get data from Atome Key",
);

/**
 * Python module to interact with Kira modules
 */
export const pykira = mkPackage(
  nixRaw`pkgs.python2Packages.pykira`,
  "Python module to interact with Kira modules",
);

/**
 * A Python implementation of the actor model
 */
export const pykka = mkPackage(
  nixRaw`pkgs.python2Packages.pykka`,
  "A Python implementation of the actor model",
);

/**
 * Python client to interface with KM-Tronic web relays
 */
export const pykmtronic = mkPackage(
  nixRaw`pkgs.python2Packages.pykmtronic`,
  "Python client to interface with KM-Tronic web relays",
);

/**
 * An async python interface for Kodi over JSON-RPC
 */
export const pykodi = mkPackage(
  nixRaw`pkgs.python2Packages.pykodi`,
  "An async python interface for Kodi over JSON-RPC",
);

/**
 * Python REST client API for Kostal Plenticore Inverters
 */
export const pykoplenti = mkPackage(
  nixRaw`pkgs.python2Packages.pykoplenti`,
  "Python REST client API for Kostal Plenticore Inverters",
);

/**
 * Library and CLI-tool to fetch the data from a Kostal Piko inverter
 */
export const pykostalpiko = mkPackage(
  nixRaw`pkgs.python2Packages.pykostalpiko`,
  "Library and CLI-tool to fetch the data from a Kostal Piko inverter",
);

/**
 * Python implementation of the Kraken API
 */
export const pykrakenapi = mkPackage(
  nixRaw`pkgs.python2Packages.pykrakenapi`,
  "Python implementation of the Kraken API",
);

/**
 * Python module to control Brightech Kuler Sky Bluetooth LED devices
 */
export const pykulersky = mkPackage(
  nixRaw`pkgs.python2Packages.pykulersky`,
  "Python module to control Brightech Kuler Sky Bluetooth LED devices",
);

/**
 * YAML/JSON validation library
 */
export const pykwalify = mkPackage(
  nixRaw`pkgs.python2Packages.pykwalify`,
  "YAML/JSON validation library",
);

/**
 * Library for interacting with KWB Easyfire Pellet Central Heating Units
 */
export const pykwb = mkPackage(
  nixRaw`pkgs.python2Packages.pykwb`,
  "Library for interacting with KWB Easyfire Pellet Central Heating Units",
);

/**
 * Python library for Jeelink LaCrosse
 */
export const pylacrosse = mkPackage(
  nixRaw`pkgs.python2Packages.pylacrosse`,
  "Python library for Jeelink LaCrosse",
);

/**
 * Code audit tool for python
 */
export const pylama = mkPackage(
  nixRaw`pkgs.python2Packages.pylama`,
  "Code audit tool for python",
);

/**
 * Python interface to last.fm (and compatibles)
 */
export const pylast = mkPackage(
  nixRaw`pkgs.python2Packages.pylast`,
  "Python interface to last.fm (and compatibles)",
);

/**
 * Simple LaTeX parser providing latex-to-unicode and unicode-to-latex conversion
 */
export const pylatexenc = mkPackage(
  nixRaw`pkgs.python2Packages.pylatexenc`,
  "Simple LaTeX parser providing latex-to-unicode and unicode-to-latex conversion",
);

/**
 * Python module to get information about upcoming space launches
 */
export const pylaunches = mkPackage(
  nixRaw`pkgs.python2Packages.pylaunches`,
  "Python module to get information about upcoming space launches",
);

/**
 * Python implementation of the JSON-LD API
 */
export const pyld = mkPackage(
  nixRaw`pkgs.python2Packages.pyld`,
  "Python implementation of the JSON-LD API",
);

/**
 * Python wrapper around ldd *nix utility to determine shared libraries of a program
 */
export const pylddwrap = mkPackage(
  nixRaw`pkgs.python2Packages.pylddwrap`,
  "Python wrapper around ldd *nix utility to determine shared libraries of a program",
);

/**
 * Module to parse SiriDB
 */
export const pyleri = mkPackage(
  nixRaw`pkgs.python2Packages.pyleri`,
  "Module to parse SiriDB",
);

/**
 * Python Levenshtein implementation
 */
export const pylev = mkPackage(
  nixRaw`pkgs.python2Packages.pylev`,
  "Python Levenshtein implementation",
);

/**
 * Python API client for the LG Smart TV running NetCast 3 or 4
 */
export const pylgnetcast = mkPackage(
  nixRaw`pkgs.python2Packages.pylgnetcast`,
  "Python API client for the LG Smart TV running NetCast 3 or 4",
);

/**
 * A Python extension module for POSIX ACLs, it can be used to query, list, add, and remove ACLs from files and directories under operating systems that support them
 */
export const pylibacl = mkPackage(
  nixRaw`pkgs.python2Packages.pylibacl`,
  "A Python extension module for POSIX ACLs, it can be used to query, list, add, and remove ACLs from files and directories under operating systems that support them",
);

/**
 * Pure python library for libconfig syntax
 */
export const pylibconfig2 = mkPackage(
  nixRaw`pkgs.python2Packages.pylibconfig2`,
  "Pure python library for libconfig syntax",
);

/**
 * Read and write Data Matrix barcodes from Python 2 and 3 using the libdmtx library
 */
export const pylibdmtx = mkPackage(
  nixRaw`pkgs.python2Packages.pylibdmtx`,
  "Read and write Data Matrix barcodes from Python 2 and 3 using the libdmtx library",
);

/**
 * Wrapper to Intra2net's libftdi driver for FTDI's USB devices
 */
export const pylibftdi = mkPackage(
  nixRaw`pkgs.python2Packages.pylibftdi`,
  "Wrapper to Intra2net's libftdi driver for FTDI's USB devices",
);

/**
 * A JPEG, JPEG-LS and JPEG XT plugin for pylibjpeg
 */
export const pylibjpeg_libjpeg = mkPackage(
  nixRaw`pkgs.python2Packages.pylibjpeg-libjpeg`,
  "A JPEG, JPEG-LS and JPEG XT plugin for pylibjpeg",
);

/**
 * Python wrapper for the liblo OSC library
 */
export const pyliblo = mkPackage(
  nixRaw`pkgs.python2Packages.pyliblo`,
  "Python wrapper for the liblo OSC library",
);

/**
 * Quick and small memcached client for Python
 */
export const pylibmc = mkPackage(
  nixRaw`pkgs.python2Packages.pylibmc`,
  "Quick and small memcached client for Python",
);

/**
 * Python interface for the SEGGER J-Link
 */
export const pylink_square = mkPackage(
  nixRaw`pkgs.python2Packages.pylink-square`,
  "Python interface for the SEGGER J-Link",
);

/**
 * A bug and style checker for Python
 */
export const pylint = mkPackage(
  nixRaw`pkgs.python2Packages.pylint`,
  "A bug and style checker for Python",
);

/**
 * A Pylint plugin to analyze Celery applications
 */
export const pylint_celery = mkPackage(
  nixRaw`pkgs.python2Packages.pylint-celery`,
  "A Pylint plugin to analyze Celery applications",
);

/**
 * Pylint plugin to analyze Django applications
 */
export const pylint_django = mkPackage(
  nixRaw`pkgs.python2Packages.pylint-django`,
  "Pylint plugin to analyze Django applications",
);

/**
 * A Pylint plugin to analyze Flask applications
 */
export const pylint_flask = mkPackage(
  nixRaw`pkgs.python2Packages.pylint-flask`,
  "A Pylint plugin to analyze Flask applications",
);

/**
 * Utilities and helpers for writing Pylint plugins
 */
export const pylint_plugin_utils = mkPackage(
  nixRaw`pkgs.python2Packages.pylint-plugin-utils`,
  "Utilities and helpers for writing Pylint plugins",
);

/**
 * Module to make pylint respect virtual environments
 */
export const pylint_venv = mkPackage(
  nixRaw`pkgs.python2Packages.pylint-venv`,
  "Module to make pylint respect virtual environments",
);

/**
 * A LAMMPS wrapper for molecular dynamics simulations of trapped ions
 */
export const pylion = mkPackage(
  nixRaw`pkgs.python2Packages.pylion`,
  "A LAMMPS wrapper for molecular dynamics simulations of trapped ions",
);

/**
 * Modulefor controlling a Litter-Robot
 */
export const pylitterbot = mkPackage(
  nixRaw`pkgs.python2Packages.pylitterbot`,
  "Modulefor controlling a Litter-Robot",
);

/**
 * Python library for reading and writing Windows shortcut files (.lnk)
 */
export const pylnk3 = mkPackage(
  nixRaw`pkgs.python2Packages.pylnk3`,
  "Python library for reading and writing Windows shortcut files (.lnk)",
);

/**
 * Python implementation of the LPSD algorithm for computing power spectral density with logarithmically spaced points.
 */
export const pylpsd = mkPackage(
  nixRaw`pkgs.python2Packages.pylpsd`,
  "Python implementation of the LPSD algorithm for computing power spectral density with logarithmically spaced points.",
);

/**
 * A least recently used (LRU) cache implementation
 */
export const pylru = mkPackage(
  nixRaw`pkgs.python2Packages.pylru`,
  "A least recently used (LRU) cache implementation",
);

/**
 * A Flake8 plugin for the Python LSP Server.
 */
export const pyls_flake8 = mkPackage(
  nixRaw`pkgs.python2Packages.pyls-flake8`,
  "A Flake8 plugin for the Python LSP Server.",
);

/**
 * Isort plugin for python-lsp-server
 */
export const pyls_isort = mkPackage(
  nixRaw`pkgs.python2Packages.pyls-isort`,
  "Isort plugin for python-lsp-server",
);

/**
 * Memestra plugin for the Python Language Server
 */
export const pyls_memestra = mkPackage(
  nixRaw`pkgs.python2Packages.pyls-memestra`,
  "Memestra plugin for the Python Language Server",
);

/**
 * Spyder extensions for the python-language-server
 */
export const pyls_spyder = mkPackage(
  nixRaw`pkgs.python2Packages.pyls-spyder`,
  "Spyder extensions for the python-language-server",
);

/**
 * Mypy plugin for the Python LSP Server
 */
export const pylsp_mypy = mkPackage(
  nixRaw`pkgs.python2Packages.pylsp-mypy`,
  "Mypy plugin for the Python LSP Server",
);

/**
 * Extended refactoring capabilities for Python LSP Server using Rope
 */
export const pylsp_rope = mkPackage(
  nixRaw`pkgs.python2Packages.pylsp-rope`,
  "Extended refactoring capabilities for Python LSP Server using Rope",
);

/**
 * Python wrapper for the ls-qpack QPACK library
 */
export const pylsqpack = mkPackage(
  nixRaw`pkgs.python2Packages.pylsqpack`,
  "Python wrapper for the ls-qpack QPACK library",
);

/**
 * Implementation of IMS LTI interface that works with edX
 */
export const pylti = mkPackage(
  nixRaw`pkgs.python2Packages.pylti`,
  "Implementation of IMS LTI interface that works with edX",
);

/**
 * Python library for controlling a Lutron RadioRA 2 system
 */
export const pylutron = mkPackage(
  nixRaw`pkgs.python2Packages.pylutron`,
  "Python library for controlling a Lutron RadioRA 2 system",
);

/**
 * Python module o control Lutron Caseta devices
 */
export const pylutron_caseta = mkPackage(
  nixRaw`pkgs.python2Packages.pylutron-caseta`,
  "Python module o control Lutron Caseta devices",
);

/**
 * A Python library for interacting with the LXD REST API
 */
export const pylxd = mkPackage(
  nixRaw`pkgs.python2Packages.pylxd`,
  "A Python library for interacting with the LXD REST API",
);

/**
 * A Pythonic Implementation of lyrics.wikia.com for getting lyrics of songs 
 */
export const pylyrics = mkPackage(
  nixRaw`pkgs.python2Packages.pylyrics`,
  "A Pythonic Implementation of lyrics.wikia.com for getting lyrics of songs ",
);

/**
 * Platform independent python bindings for the LZMA compression library
 */
export const pylzma = mkPackage(
  nixRaw`pkgs.python2Packages.pylzma`,
  "Platform independent python bindings for the LZMA compression library",
);

/**
 * Macaroon library for Python
 */
export const pymacaroons = mkPackage(
  nixRaw`pkgs.python2Packages.pymacaroons`,
  "Macaroon library for Python",
);

/**
 * Pure Python imaging library with Python 2.6, 2.7, 3.1+ support
 */
export const pymaging = mkPackage(
  nixRaw`pkgs.python2Packages.pymaging`,
  "Pure Python imaging library with Python 2.6, 2.7, 3.1+ support",
);

/**
 * Pure Python imaging library with Python 2.6, 2.7, 3.1+ support
 */
export const pymaging_png = mkPackage(
  nixRaw`pkgs.python2Packages.pymaging_png`,
  "Pure Python imaging library with Python 2.6, 2.7, 3.1+ support",
);

/**
 * Library for interacting with Mailgun e-mail service
 */
export const pymailgunner = mkPackage(
  nixRaw`pkgs.python2Packages.pymailgunner`,
  "Library for interacting with Mailgun e-mail service",
);

/**
 * Python data serialization library
 */
export const pymarshal = mkPackage(
  nixRaw`pkgs.python2Packages.pymarshal`,
  "Python data serialization library",
);

/**
 * Python Asyncio Arduino Firmata Client
 */
export const pymata_express = mkPackage(
  nixRaw`pkgs.python2Packages.pymata-express`,
  "Python Asyncio Arduino Firmata Client",
);

/**
 * A robust materials analysis code that defines core object representations for structures and molecules
 */
export const pymatgen = mkPackage(
  nixRaw`pkgs.python2Packages.pymatgen`,
  "A robust materials analysis code that defines core object representations for structures and molecules",
);

/**
 * A Python library for alpha matting
 */
export const pymatting = mkPackage(
  nixRaw`pkgs.python2Packages.pymatting`,
  "A Python library for alpha matting",
);

/**
 * Python access to maven
 */
export const pymaven_patch = mkPackage(
  nixRaw`pkgs.python2Packages.pymaven-patch`,
  "Python access to maven",
);

/**
 * Python MAVLink interface and utilities
 */
export const pymavlink = mkPackage(
  nixRaw`pkgs.python2Packages.pymavlink`,
  "Python MAVLink interface and utilities",
);

/**
 * A package for symbolic computation
 */
export const pymbolic = mkPackage(
  nixRaw`pkgs.python2Packages.pymbolic`,
  "A package for symbolic computation",
);

/**
 * Bayesian estimation, particularly using Markov chain Monte Carlo (MCMC)
 */
export const pymc = mkPackage(
  nixRaw`pkgs.python2Packages.pymc`,
  "Bayesian estimation, particularly using Markov chain Monte Carlo (MCMC)",
);

/**
 * Extensions for Python Markdown
 */
export const pymdown_extensions = mkPackage(
  nixRaw`pkgs.python2Packages.pymdown-extensions`,
  "Extensions for Python Markdown",
);

/**
 * A pythonic library to parse Linux /proc/mdstat file
 */
export const pymdstat = mkPackage(
  nixRaw`pkgs.python2Packages.pymdstat`,
  "A pythonic library to parse Linux /proc/mdstat file",
);

/**
 * Python wrapper for the mediainfo library
 */
export const pymediainfo = mkPackage(
  nixRaw`pkgs.python2Packages.pymediainfo`,
  "Python wrapper for the mediainfo library",
);

/**
 * Python Remote Control for Mediaroom STB
 */
export const pymediaroom = mkPackage(
  nixRaw`pkgs.python2Packages.pymediaroom`,
  "Python Remote Control for Mediaroom STB",
);

/**
 * Read medical image files into Numpy arrays
 */
export const pymedio = mkPackage(
  nixRaw`pkgs.python2Packages.pymedio`,
  "Read medical image files into Numpy arrays",
);

/**
 * Library of astronomical algorithms
 */
export const pymeeus = mkPackage(
  nixRaw`pkgs.python2Packages.pymeeus`,
  "Library of astronomical algorithms",
);

/**
 * Python module for interacting with MELCloud
 */
export const pymelcloud = mkPackage(
  nixRaw`pkgs.python2Packages.pymelcloud`,
  "Python module for interacting with MELCloud",
);

/**
 * Python memcached client
 */
export const pymemcache = mkPackage(
  nixRaw`pkgs.python2Packages.pymemcache`,
  "Python memcached client",
);

/**
 * Simple Python cache and memoizing module
 */
export const pymemoize = mkPackage(
  nixRaw`pkgs.python2Packages.pymemoize`,
  "Simple Python cache and memoizing module",
);

/**
 * Create, update or convert docstrings in existing Python files, managing several styles
 */
export const pyment = mkPackage(
  nixRaw`pkgs.python2Packages.pyment`,
  "Create, update or convert docstrings in existing Python files, managing several styles",
);

/**
 * A command-line tool to show the weather report by a given station ID
 */
export const pymetar = mkPackage(
  nixRaw`pkgs.python2Packages.pymetar`,
  "A command-line tool to show the weather report by a given station ID",
);

/**
 * Python module to communicate with the Met Éireann Public Weather Forecast API
 */
export const pymeteireann = mkPackage(
  nixRaw`pkgs.python2Packages.pymeteireann`,
  "Python module to communicate with the Met Éireann Public Weather Forecast API",
);

/**
 * Python wrapper around the Meteoclimatic service
 */
export const pymeteoclimatic = mkPackage(
  nixRaw`pkgs.python2Packages.pymeteoclimatic`,
  "Python wrapper around the Meteoclimatic service",
);

/**
 * A library to communicate with the met.no API
 */
export const pymetno = mkPackage(
  nixRaw`pkgs.python2Packages.pymetno`,
  "A library to communicate with the met.no API",
);

/**
 * Python client for the Somfy Open API
 */
export const pymfy = mkPackage(
  nixRaw`pkgs.python2Packages.pymfy`,
  "Python client for the Somfy Open API",
);

/**
 * Library to communicate with MicroBot
 */
export const pymicrobot = mkPackage(
  nixRaw`pkgs.python2Packages.pymicrobot`,
  "Library to communicate with MicroBot",
);

/**
 * Python bindings for libmilter api
 */
export const pymilter = mkPackage(
  nixRaw`pkgs.python2Packages.pymilter`,
  "Python bindings for libmilter api",
);

/**
 * Python SDK for Milvus
 */
export const pymilvus = mkPackage(
  nixRaw`pkgs.python2Packages.pymilvus`,
  "Python SDK for Milvus",
);

/**
 * Python client the Mi Tv 3
 */
export const pymitv = mkPackage(
  nixRaw`pkgs.python2Packages.pymitv`,
  "Python client the Mi Tv 3",
);

/**
 * Python implementation of the Modbus protocol
 */
export const pymodbus = mkPackage(
  nixRaw`pkgs.python2Packages.pymodbus`,
  "Python implementation of the Modbus protocol",
);

/**
 * Python driver for MongoDB
 */
export const pymongo = mkPackage(
  nixRaw`pkgs.python2Packages.pymongo`,
  "Python driver for MongoDB",
);

/**
 * A mongo mocking library with an ephemeral MongoDB running in memory
 */
export const pymongo_inmemory = mkPackage(
  nixRaw`pkgs.python2Packages.pymongo-inmemory`,
  "A mongo mocking library with an ephemeral MongoDB running in memory",
);

/**
 * Multi-objective Optimization in Python
 */
export const pymoo = mkPackage(
  nixRaw`pkgs.python2Packages.pymoo`,
  "Multi-objective Optimization in Python",
);

/**
 * Morphological analyzer/inflection engine for Russian and Ukrainian
 */
export const pymorphy2 = mkPackage(
  nixRaw`pkgs.python2Packages.pymorphy2`,
  "Morphological analyzer/inflection engine for Russian and Ukrainian",
);

/**
 * Russian dictionaries for pymorphy2
 */
export const pymorphy2_dicts_ru = mkPackage(
  nixRaw`pkgs.python2Packages.pymorphy2-dicts-ru`,
  "Russian dictionaries for pymorphy2",
);

/**
 * Morphological analyzer/inflection engine for Russian and Ukrainian
 */
export const pymorphy3 = mkPackage(
  nixRaw`pkgs.python2Packages.pymorphy3`,
  "Morphological analyzer/inflection engine for Russian and Ukrainian",
);

/**
 * Russian dictionaries for pymorphy3
 */
export const pymorphy3_dicts_ru = mkPackage(
  nixRaw`pkgs.python2Packages.pymorphy3-dicts-ru`,
  "Russian dictionaries for pymorphy3",
);

/**
 * Ukrainian dictionaries for pymorphy3
 */
export const pymorphy3_dicts_uk = mkPackage(
  nixRaw`pkgs.python2Packages.pymorphy3-dicts-uk`,
  "Ukrainian dictionaries for pymorphy3",
);

/**
 * Tool to measure, monitor and analyze memory behavior
 */
export const pympler = mkPackage(
  nixRaw`pkgs.python2Packages.pympler`,
  "Tool to measure, monitor and analyze memory behavior",
);

/**
 * A simple, cross-platform, pure Python module for JavaScript-like message boxes
 */
export const pymsgbox = mkPackage(
  nixRaw`pkgs.python2Packages.pymsgbox`,
  "A simple, cross-platform, pure Python module for JavaScript-like message boxes",
);

/**
 * Python module to interact with Microsoft Teams
 */
export const pymsteams = mkPackage(
  nixRaw`pkgs.python2Packages.pymsteams`,
  "Python module to interact with Microsoft Teams",
);

/**
 * Library to create mumble bots
 */
export const pymumble = mkPackage(
  nixRaw`pkgs.python2Packages.pymumble`,
  "Library to create mumble bots",
);

/**
 * 2d physics library
 */
export const pymunk = mkPackage(
  nixRaw`pkgs.python2Packages.pymunk`,
  "2d physics library",
);

/**
 * Python bindings for MuPDF's rendering library
 */
export const pymupdf = mkPackage(
  nixRaw`pkgs.python2Packages.pymupdf`,
  "Python bindings for MuPDF's rendering library",
);

/**
 * get live-data from mvg-live.de
 */
export const pymvglive = mkPackage(
  nixRaw`pkgs.python2Packages.pymvglive`,
  "get live-data from mvg-live.de",
);

/**
 * Python API for talking to a MySensors gateway
 */
export const pymysensors = mkPackage(
  nixRaw`pkgs.python2Packages.pymysensors`,
  "Python API for talking to a MySensors gateway",
);

/**
 * Pure Python MySQL Client
 */
export const pymysql = mkPackage(
  nixRaw`pkgs.python2Packages.pymysql`,
  "Pure Python MySQL Client",
);

/**
 * PyMySQL dialect for SQL Alchemy
 */
export const pymysqlsa = mkPackage(
  nixRaw`pkgs.python2Packages.pymysqlsa`,
  "PyMySQL dialect for SQL Alchemy",
);

/**
 * Python wrapper for the Yandex MyStem 3.1 morpholocial analyzer of the Russian language
 */
export const pymystem3 = mkPackage(
  nixRaw`pkgs.python2Packages.pymystem3`,
  "Python wrapper for the Yandex MyStem 3.1 morpholocial analyzer of the Russian language",
);

/**
 * A Python wrapper around the Dynac charged particle simulator
 */
export const pynac = mkPackage(
  nixRaw`pkgs.python2Packages.pynac`,
  "A Python wrapper around the Dynac charged particle simulator",
);

/**
 * Python binding to the Networking and Cryptography (NaCl) library
 */
export const pynacl = mkPackage(
  nixRaw`pkgs.python2Packages.pynacl`,
  "Python binding to the Networking and Cryptography (NaCl) library",
);

/**
 * Namecheap API client in Python.
 */
export const pynamecheap = mkPackage(
  nixRaw`pkgs.python2Packages.pynamecheap`,
  "Namecheap API client in Python.",
);

/**
 * Interface for Amazon’s DynamoDB
 */
export const pynamodb = mkPackage(
  nixRaw`pkgs.python2Packages.pynamodb`,
  "Interface for Amazon’s DynamoDB",
);

/**
 * A Python3 wrapper for the Nanoleaf API, capable of controlling both Nanoleaf Aurora and Nanoleaf Canvas
 */
export const pynanoleaf = mkPackage(
  nixRaw`pkgs.python2Packages.pynanoleaf`,
  "A Python3 wrapper for the Nanoleaf API, capable of controlling both Nanoleaf Aurora and Nanoleaf Canvas",
);

/**
 * Python Wrapper for Mac OS 10.8 Notification Center
 */
export const pync = mkPackage(
  nixRaw`pkgs.python2Packages.pync`,
  "Python Wrapper for Mac OS 10.8 Notification Center",
);

/**
 * Python library for nello.io intercoms
 */
export const pynello = mkPackage(
  nixRaw`pkgs.python2Packages.pynello`,
  "Python library for nello.io intercoms",
);

/**
 * Python bindings for libnest2d
 */
export const pynest2d = mkPackage(
  nixRaw`pkgs.python2Packages.pynest2d`,
  "Python bindings for libnest2d",
);

/**
 * API client library for Netbox
 */
export const pynetbox = mkPackage(
  nixRaw`pkgs.python2Packages.pynetbox`,
  "API client library for Netbox",
);

/**
 * Python implementation of the DICOM networking protocol
 */
export const pynetdicom = mkPackage(
  nixRaw`pkgs.python2Packages.pynetdicom`,
  "Python implementation of the DICOM networking protocol",
);

/**
 * Module for interacting with Netgear wireless routers
 */
export const pynetgear = mkPackage(
  nixRaw`pkgs.python2Packages.pynetgear`,
  "Module for interacting with Netgear wireless routers",
);

/**
 * A Python wrapper for ngrok
 */
export const pyngrok = mkPackage(
  nixRaw`pkgs.python2Packages.pyngrok`,
  "A Python wrapper for ngrok",
);

/**
 * Python API wrapper to retrieve warnings from the german NINA app
 */
export const pynina = mkPackage(
  nixRaw`pkgs.python2Packages.pynina`,
  "Python API wrapper to retrieve warnings from the german NINA app",
);

/**
 * Module intended to limit a functions resources
 */
export const pynisher = mkPackage(
  nixRaw`pkgs.python2Packages.pynisher`,
  "Module intended to limit a functions resources",
);

/**
 * Python library for the NMEA 0183 protcol
 */
export const pynmea2 = mkPackage(
  nixRaw`pkgs.python2Packages.pynmea2`,
  "Python library for the NMEA 0183 protcol",
);

/**
 * Nearest Neighbor Descent
 */
export const pynndescent = mkPackage(
  nixRaw`pkgs.python2Packages.pynndescent`,
  "Nearest Neighbor Descent",
);

/**
 * Python TCP/IP interface for Nobo Hub/Nobo Energy Control devices
 */
export const pynobo = mkPackage(
  nixRaw`pkgs.python2Packages.pynobo`,
  "Python TCP/IP interface for Nobo Hub/Nobo Energy Control devices",
);

/**
 * A library to control and monitor input devices
 */
export const pynput = mkPackage(
  nixRaw`pkgs.python2Packages.pynput`,
  "A library to control and monitor input devices",
);

/**
 * Simple pure-Python reader for NRRD files
 */
export const pynrrd = mkPackage(
  nixRaw`pkgs.python2Packages.pynrrd`,
  "Simple pure-Python reader for NRRD files",
);

/**
 * Python bindings for nuki.io bridges
 */
export const pynuki = mkPackage(
  nixRaw`pkgs.python2Packages.pynuki`,
  "Python bindings for nuki.io bridges",
);

/**
 * API overhaul of PyNUT, a Python library to allow communication with NUT (Network UPS Tools) servers.
 */
export const pynut2 = mkPackage(
  nixRaw`pkgs.python2Packages.pynut2`,
  "API overhaul of PyNUT, a Python library to allow communication with NUT (Network UPS Tools) servers.",
);

/**
 * Python client for Neovim
 */
export const pynvim = mkPackage(
  nixRaw`pkgs.python2Packages.pynvim`,
  "Python client for Neovim",
);

/**
 * Dependency to chadtree and coq_nvim plugins
 */
export const pynvim_pp = mkPackage(
  nixRaw`pkgs.python2Packages.pynvim-pp`,
  "Dependency to chadtree and coq_nvim plugins",
);

/**
 * Python bindings for the NVIDIA Management Library
 */
export const pynvml = mkPackage(
  nixRaw`pkgs.python2Packages.pynvml`,
  "Python bindings for the NVIDIA Management Library",
);

/**
 * Python library to retrieve data from NWS/NOAA
 */
export const pynws = mkPackage(
  nixRaw`pkgs.python2Packages.pynws`,
  "Python library to retrieve data from NWS/NOAA",
);

/**
 * Python package for communicating to NX584/NX8E interfaces
 */
export const pynx584 = mkPackage(
  nixRaw`pkgs.python2Packages.pynx584`,
  "Python package for communicating to NX584/NX8E interfaces",
);

/**
 * Unified API for parsing NZB files
 */
export const pynzb = mkPackage(
  nixRaw`pkgs.python2Packages.pynzb`,
  "Unified API for parsing NZB files",
);

/**
 * Module to interact with Obihai devices
 */
export const pyobihai = mkPackage(
  nixRaw`pkgs.python2Packages.pyobihai`,
  "Module to interact with Obihai devices",
);

/**
 * Python library for programming and debugging Arm Cortex-M microcontrollers
 */
export const pyocd = mkPackage(
  nixRaw`pkgs.python2Packages.pyocd`,
  "Python library for programming and debugging Arm Cortex-M microcontrollers",
);

/**
 * A Python wrapper for Tesseract and Cuneiform
 */
export const pyocr = mkPackage(
  nixRaw`pkgs.python2Packages.pyocr`,
  "A Python wrapper for Tesseract and Cuneiform",
);

/**
 * Simple async wrapper around the Octoprint API
 */
export const pyoctoprintapi = mkPackage(
  nixRaw`pkgs.python2Packages.pyoctoprintapi`,
  "Simple async wrapper around the Octoprint API",
);

/**
 * Python ODBC module to connect to almost any database
 */
export const pyodbc = mkPackage(
  nixRaw`pkgs.python2Packages.pyodbc`,
  "Python ODBC module to connect to almost any database",
);

/**
 * Xiph.org's Ogg Vorbis, Opus and FLAC for Python
 */
export const pyogg = mkPackage(
  nixRaw`pkgs.python2Packages.pyogg`,
  "Xiph.org's Ogg Vorbis, Opus and FLAC for Python",
);

/**
 * Python module to retrieve information from Ombi
 */
export const pyombi = mkPackage(
  nixRaw`pkgs.python2Packages.pyombi`,
  "Python module to retrieve information from Ombi",
);

/**
 * Python Optimization Modeling Objects
 */
export const pyomo = mkPackage(
  nixRaw`pkgs.python2Packages.pyomo`,
  "Python Optimization Modeling Objects",
);

/**
 * Python wrapper for OpenCL
 */
export const pyopencl = mkPackage(
  nixRaw`pkgs.python2Packages.pyopencl`,
  "Python wrapper for OpenCL",
);

/**
 * PyOpenGL, the Python OpenGL bindings
 */
export const pyopengl = mkPackage(
  nixRaw`pkgs.python2Packages.pyopengl`,
  "PyOpenGL, the Python OpenGL bindings",
);

/**
 * This set of C (Cython) extensions provides acceleration of common operations for slow points in PyOpenGL 3.x
 */
export const pyopengl_accelerate = mkPackage(
  nixRaw`pkgs.python2Packages.pyopengl-accelerate`,
  "This set of C (Cython) extensions provides acceleration of common operations for slow points in PyOpenGL 3.x",
);

/**
 * Python wrapper around the OpenSSL library
 */
export const pyopenssl = mkPackage(
  nixRaw`pkgs.python2Packages.pyopenssl`,
  "Python wrapper around the OpenSSL library",
);

/**
 * Python API to retrieve data from openuv.io
 */
export const pyopenuv = mkPackage(
  nixRaw`pkgs.python2Packages.pyopenuv`,
  "Python API to retrieve data from openuv.io",
);

/**
 * Python client for the OPNsense API
 */
export const pyopnsense = mkPackage(
  nixRaw`pkgs.python2Packages.pyopnsense`,
  "Python client for the OPNsense API",
);

/**
 * Library for interacting with OPPLE lights
 */
export const pyoppleio = mkPackage(
  nixRaw`pkgs.python2Packages.pyoppleio`,
  "Library for interacting with OPPLE lights",
);

/**
 * Python library that wraps the Orthanc REST API
 */
export const pyorthanc = mkPackage(
  nixRaw`pkgs.python2Packages.pyorthanc`,
  "Python library that wraps the Orthanc REST API",
);

/**
 * Pure Python library for simple sync with Open Science Framework
 */
export const pyosf = mkPackage(
  nixRaw`pkgs.python2Packages.pyosf`,
  "Pure Python library for simple sync with Open Science Framework",
);

/**
 * Python bindings for libosmium
 */
export const pyosmium = mkPackage(
  nixRaw`pkgs.python2Packages.pyosmium`,
  "Python bindings for libosmium",
);

/**
 * Python module to interact the OpenTherm Gateway
 */
export const pyotgw = mkPackage(
  nixRaw`pkgs.python2Packages.pyotgw`,
  "Python module to interact the OpenTherm Gateway",
);

/**
 * Python One Time Password Library
 */
export const pyotp = mkPackage(
  nixRaw`pkgs.python2Packages.pyotp`,
  "Python One Time Password Library",
);

/**
 * Library for retrieving data from for Outbreaks Near Me
 */
export const pyoutbreaksnearme = mkPackage(
  nixRaw`pkgs.python2Packages.pyoutbreaksnearme`,
  "Library for retrieving data from for Outbreaks Near Me",
);

/**
 * Module to interact with the Somfy TaHoma API or other OverKiz APIs
 */
export const pyoverkiz = mkPackage(
  nixRaw`pkgs.python2Packages.pyoverkiz`,
  "Module to interact with the Somfy TaHoma API or other OverKiz APIs",
);

/**
 * Python wrapper around the OpenWeatherMap web API
 */
export const pyowm = mkPackage(
  nixRaw`pkgs.python2Packages.pyowm`,
  "Python wrapper around the OpenWeatherMap web API",
);

/**
 * Python OWFS client library (owserver protocol)
 */
export const pyownet = mkPackage(
  nixRaw`pkgs.python2Packages.pyownet`,
  "Python OWFS client library (owserver protocol)",
);

/**
 * Easily run Python at the shell! Magical, but never mysterious
 */
export const pyp = mkPackage(
  nixRaw`pkgs.python2Packages.pyp`,
  "Easily run Python at the shell! Magical, but never mysterious",
);

export const pypaBuildHook = mkPackage(
  nixRaw`pkgs.python2Packages.pypaBuildHook`,
  "",
);

export const pypaInstallHook = mkPackage(
  nixRaw`pkgs.python2Packages.pypaInstallHook`,
  "",
);

/**
 * Wrapper for testing PAM modules
 */
export const pypamtest = mkPackage(
  nixRaw`pkgs.python2Packages.pypamtest`,
  "Wrapper for testing PAM modules",
);

/**
 * Thin wrapper for pandoc
 */
export const pypandoc = mkPackage(
  nixRaw`pkgs.python2Packages.pypandoc`,
  "Thin wrapper for pandoc",
);

/**
 * Simple library that makes it easier to parse files
 */
export const pyparser = mkPackage(
  nixRaw`pkgs.python2Packages.pyparser`,
  "Simple library that makes it easier to parse files",
);

/**
 * An alternative approach to creating and executing simple grammars, vs. the traditional lex/yacc approach, or the use of regular expressions
 */
export const pyparsing = mkPackage(
  nixRaw`pkgs.python2Packages.pyparsing`,
  "An alternative approach to creating and executing simple grammars, vs. the traditional lex/yacc approach, or the use of regular expressions",
);

/**
 * Python interface for libparted
 */
export const pyparted = mkPackage(
  nixRaw`pkgs.python2Packages.pyparted`,
  "Python interface for libparted",
);

/**
 * Password manager pass in Python
 */
export const pypass = mkPackage(
  nixRaw`pkgs.python2Packages.pypass`,
  "Password manager pass in Python",
);

/**
 * PBLib Python3 Bindings
 */
export const pypblib = mkPackage(
  nixRaw`pkgs.python2Packages.pypblib`,
  "PBLib Python3 Bindings",
);

/**
 * Python library for interacting with the PCA 301 smart plugs
 */
export const pypca = mkPackage(
  nixRaw`pkgs.python2Packages.pypca`,
  "Python library for interacting with the PCA 301 smart plugs",
);

/**
 * Simplified object-oriented Python wrapper for libpcap
 */
export const pypcap = mkPackage(
  nixRaw`pkgs.python2Packages.pypcap`,
  "Simplified object-oriented Python wrapper for libpcap",
);

/**
 * LCN-PCK library written in Python
 */
export const pypck = mkPackage(
  nixRaw`pkgs.python2Packages.pypck`,
  "LCN-PCK library written in Python",
);

/**
 * A pure-python PDF library capable of splitting, merging, cropping, and transforming the pages of PDF files
 */
export const pypdf = mkPackage(
  nixRaw`pkgs.python2Packages.pypdf`,
  "A pure-python PDF library capable of splitting, merging, cropping, and transforming the pages of PDF files",
);

/**
 * A Pure-Python library built as a PDF toolkit
 */
export const pypdf2 = mkPackage(
  nixRaw`pkgs.python2Packages.pypdf2`,
  "A Pure-Python library built as a PDF toolkit",
);

/**
 * A Pure-Python library built as a PDF toolkit
 */
export const pypdf3 = mkPackage(
  nixRaw`pkgs.python2Packages.pypdf3`,
  "A Pure-Python library built as a PDF toolkit",
);

/**
 * PEG parser interpreter in Python
 */
export const pypeg2 = mkPackage(
  nixRaw`pkgs.python2Packages.pypeg2`,
  "PEG parser interpreter in Python",
);

/**
 * Python interface for PEMicro debug probes
 */
export const pypemicro = mkPackage(
  nixRaw`pkgs.python2Packages.pypemicro`,
  "Python interface for PEMicro debug probes",
);

/**
 * Cross-platform clipboard module
 */
export const pyperclip = mkPackage(
  nixRaw`pkgs.python2Packages.pyperclip`,
  "Cross-platform clipboard module",
);

/**
 * Python module to generate and modify perf
 */
export const pyperf = mkPackage(
  nixRaw`pkgs.python2Packages.pyperf`,
  "Python module to generate and modify perf",
);

/**
 * a hyperscan binding for Python, which supports vectorscan
 */
export const pyperscan = mkPackage(
  nixRaw`pkgs.python2Packages.pyperscan`,
  "a hyperscan binding for Python, which supports vectorscan",
);

/**
 * Module to hyphenate text
 */
export const pyphen = mkPackage(
  nixRaw`pkgs.python2Packages.pyphen`,
  "Module to hyphenate text",
);

/**
 * Library for reading and writing files for the Anycubic Photon 3D-Printer
 */
export const pyphotonfile = mkPackage(
  nixRaw`pkgs.python2Packages.pyphotonfile`,
  "Library for reading and writing files for the Anycubic Photon 3D-Printer",
);

/**
 * A python SQL query builder
 */
export const pypika = mkPackage(
  nixRaw`pkgs.python2Packages.pypika`,
  "A python SQL query builder",
);

/**
 * Library containing various image processing algorithms
 */
export const pypillowfight = mkPackage(
  nixRaw`pkgs.python2Packages.pypillowfight`,
  "Library containing various image processing algorithms",
);

/**
 * Chinese Characters to Pinyin - 汉字转拼音
 */
export const pypinyin = mkPackage(
  nixRaw`pkgs.python2Packages.pypinyin`,
  "Chinese Characters to Pinyin - 汉字转拼音",
);

/**
 * Minimal PyPI server for use with pip/easy_install
 */
export const pypiserver = mkPackage(
  nixRaw`pkgs.python2Packages.pypiserver`,
  "Minimal PyPI server for use with pip/easy_install",
);

/**
 * Library for generating and manipulating PyPI tokens
 */
export const pypitoken = mkPackage(
  nixRaw`pkgs.python2Packages.pypitoken`,
  "Library for generating and manipulating PyPI tokens",
);

/**
 * Python API client for fetching Plaato data
 */
export const pyplaato = mkPackage(
  nixRaw`pkgs.python2Packages.pyplaato`,
  "Python API client for fetching Plaato data",
);

/**
 * Library to simulate plate tectonics with Python bindings
 */
export const pyplatec = mkPackage(
  nixRaw`pkgs.python2Packages.pyplatec`,
  "Library to simulate plate tectonics with Python bindings",
);

/**
 * Pure Python library for PNG image encoding/decoding
 */
export const pypng = mkPackage(
  nixRaw`pkgs.python2Packages.pypng`,
  "Pure Python library for PNG image encoding/decoding",
);

/**
 * Python module for communicating with Minut Point
 */
export const pypoint = mkPackage(
  nixRaw`pkgs.python2Packages.pypoint`,
  "Python module for communicating with Minut Point",
);

/**
 * Python library to interact the the Poolstation platform
 */
export const pypoolstation = mkPackage(
  nixRaw`pkgs.python2Packages.pypoolstation`,
  "Python library to interact the the Poolstation platform",
);

/**
 * Headless chrome/chromium automation library (unofficial port of puppeteer)
 */
export const pyppeteer = mkPackage(
  nixRaw`pkgs.python2Packages.pyppeteer`,
  "Headless chrome/chromium automation library (unofficial port of puppeteer)",
);

/**
 * Python language bindings for preCICE
 */
export const pyprecice = mkPackage(
  nixRaw`pkgs.python2Packages.pyprecice`,
  "Python language bindings for preCICE",
);

/**
 * Discord RPC client written in Python
 */
export const pypresence = mkPackage(
  nixRaw`pkgs.python2Packages.pypresence`,
  "Discord RPC client written in Python",
);

/**
 * Python Progress Bar and Percent Indicator Utility
 */
export const pyprind = mkPackage(
  nixRaw`pkgs.python2Packages.pyprind`,
  "Python Progress Bar and Percent Indicator Utility",
);

/**
 * Help visualize profiling data from cProfile with kcachegrind and qcachegrind
 */
export const pyprof2calltree = mkPackage(
  nixRaw`pkgs.python2Packages.pyprof2calltree`,
  "Help visualize profiling data from cProfile with kcachegrind and qcachegrind",
);

/**
 * Python interface to PROJ library
 */
export const pyproj = mkPackage(
  nixRaw`pkgs.python2Packages.pyproj`,
  "Python interface to PROJ library",
);

/**
 * API to interact with the python pyproject.toml based projects
 */
export const pyproject_api = mkPackage(
  nixRaw`pkgs.python2Packages.pyproject-api`,
  "API to interact with the python pyproject.toml based projects",
);

/**
 * Low-level library for calling build-backends in `pyproject.toml`-based project 
 */
export const pyproject_hooks = mkPackage(
  nixRaw`pkgs.python2Packages.pyproject-hooks`,
  "Low-level library for calling build-backends in `pyproject.toml`-based project ",
);

/**
 * PEP 621 metadata parsing
 */
export const pyproject_metadata = mkPackage(
  nixRaw`pkgs.python2Packages.pyproject-metadata`,
  "PEP 621 metadata parsing",
);

/**
 * Python module to communicate with Prosegur Residential Alarms
 */
export const pyprosegur = mkPackage(
  nixRaw`pkgs.python2Packages.pyprosegur`,
  "Python module to communicate with Prosegur Residential Alarms",
);

/**
 * Library to communicate with PrusaLink 
 */
export const pyprusalink = mkPackage(
  nixRaw`pkgs.python2Packages.pyprusalink`,
  "Library to communicate with PrusaLink ",
);

/**
 * PowerShell Remoting Protocol Client library
 */
export const pypsrp = mkPackage(
  nixRaw`pkgs.python2Packages.pypsrp`,
  "PowerShell Remoting Protocol Client library",
);

/**
 * A python implementation of the Pluggable Transports for Circumvention specification for Tor
 */
export const pyptlib = mkPackage(
  nixRaw`pkgs.python2Packages.pyptlib`,
  "A python implementation of the Pluggable Transports for Circumvention specification for Tor",
);

/**
 * Python 3 publish-subcribe library
 */
export const pypubsub = mkPackage(
  nixRaw`pkgs.python2Packages.pypubsub`,
  "Python 3 publish-subcribe library",
);

/**
 * PugJS syntax template adapter for Django, Jinja2, Mako and Tornado templates
 */
export const pypugjs = mkPackage(
  nixRaw`pkgs.python2Packages.pypugjs`,
  "PugJS syntax template adapter for Django, Jinja2, Mako and Tornado templates",
);

/**
 * Mimikatz implementation in Python
 */
export const pypykatz = mkPackage(
  nixRaw`pkgs.python2Packages.pypykatz`,
  "Mimikatz implementation in Python",
);

/**
 * Collection of tools to use PyPy-specific features
 */
export const pypytools = mkPackage(
  nixRaw`pkgs.python2Packages.pypytools`,
  "Collection of tools to use PyPy-specific features",
);

/**
 * Python driver for Amazon QLDB
 */
export const pyqldb = mkPackage(
  nixRaw`pkgs.python2Packages.pyqldb`,
  "Python driver for Amazon QLDB",
);

/**
 * A QR code generator written purely in Python with SVG, EPS, PNG and terminal output
 */
export const pyqrcode = mkPackage(
  nixRaw`pkgs.python2Packages.pyqrcode`,
  "A QR code generator written purely in Python with SVG, EPS, PNG and terminal output",
);

/**
 * Python bindings for the Qt 3D framework
 */
export const pyqt3d = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt3d`,
  "Python bindings for the Qt 3D framework",
);

/**
 * Python bindings for Qt5
 */
export const pyqt5 = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt5`,
  "Python bindings for Qt5",
);

/**
 * Python bindings for Qt5
 */
export const pyqt5_sip = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt5_sip`,
  "Python bindings for Qt5",
);

/**
 * Stubs for PyQt5 
 */
export const pyqt5_stubs = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt5-stubs`,
  "Stubs for PyQt5 ",
);

/**
 * Python bindings for Qt5
 */
export const pyqt5_with_qtmultimedia = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt5_with_qtmultimedia`,
  "Python bindings for Qt5",
);

/**
 * Python bindings for Qt5
 */
export const pyqt5_with_qtwebkit = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt5_with_qtwebkit`,
  "Python bindings for Qt5",
);

/**
 * Python bindings for Qt6
 */
export const pyqt6 = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt6`,
  "Python bindings for Qt6",
);

/**
 * Python bindings for Qt6 QtCharts
 */
export const pyqt6_charts = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt6-charts`,
  "Python bindings for Qt6 QtCharts",
);

/**
 * Python bindings for Qt5
 */
export const pyqt6_sip = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt6-sip`,
  "Python bindings for Qt5",
);

/**
 * Python bindings for Qt6 WebEngine
 */
export const pyqt6_webengine = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt6-webengine`,
  "Python bindings for Qt6 WebEngine",
);

/**
 * PEP 517 compliant build system for PyQt
 */
export const pyqt_builder = mkPackage(
  nixRaw`pkgs.python2Packages.pyqt-builder`,
  "PEP 517 compliant build system for PyQt",
);

/**
 * Python bindings for the Qt Charts library
 */
export const pyqtchart = mkPackage(
  nixRaw`pkgs.python2Packages.pyqtchart`,
  "Python bindings for the Qt Charts library",
);

/**
 * Python bindings for the Qt Data Visualization library
 */
export const pyqtdatavisualization = mkPackage(
  nixRaw`pkgs.python2Packages.pyqtdatavisualization`,
  "Python bindings for the Qt Data Visualization library",
);

/**
 * Scientific Graphics and GUI Library for Python
 */
export const pyqtgraph = mkPackage(
  nixRaw`pkgs.python2Packages.pyqtgraph`,
  "Scientific Graphics and GUI Library for Python",
);

/**
 * Python bindings for Qt5
 */
export const pyqtwebengine = mkPackage(
  nixRaw`pkgs.python2Packages.pyqtwebengine`,
  "Python bindings for Qt5",
);

/**
 * Library for representing and using quaternions.
 */
export const pyquaternion = mkPackage(
  nixRaw`pkgs.python2Packages.pyquaternion`,
  "Library for representing and using quaternions.",
);

/**
 * A jquery-like library for Python
 */
export const pyquery = mkPackage(
  nixRaw`pkgs.python2Packages.pyquery`,
  "A jquery-like library for Python",
);

/**
 * Python library for creating Quantum Instruction Language (Quil) programs
 */
export const pyquil = mkPackage(
  nixRaw`pkgs.python2Packages.pyquil`,
  "Python library for creating Quantum Instruction Language (Quil) programs",
);

/**
 * Module for interfacing with QVR Pro API
 */
export const pyqvrpro = mkPackage(
  nixRaw`pkgs.python2Packages.pyqvrpro`,
  "Module for interfacing with QVR Pro API",
);

/**
 * QwikSwitch USB Modem API binding for Python
 */
export const pyqwikswitch = mkPackage(
  nixRaw`pkgs.python2Packages.pyqwikswitch`,
  "QwikSwitch USB Modem API binding for Python",
);

/**
 * A Pythonic interface to the RabbitMQ Management HTTP API
 */
export const pyrabbit2 = mkPackage(
  nixRaw`pkgs.python2Packages.pyrabbit2`,
  "A Pythonic interface to the RabbitMQ Management HTTP API",
);

/**
 * Python RADIUS Implementation
 */
export const pyrad = mkPackage(
  nixRaw`pkgs.python2Packages.pyrad`,
  "Python RADIUS Implementation",
);

/**
 * Extraction of Radiomics features from 2D and 3D images and binary masks
 */
export const pyradiomics = mkPackage(
  nixRaw`pkgs.python2Packages.pyradiomics`,
  "Extraction of Radiomics features from 2D and 3D images and binary masks",
);

/**
 * Python client for the https://api.radio-browser.info
 */
export const pyradios = mkPackage(
  nixRaw`pkgs.python2Packages.pyradios`,
  "Python client for the https://api.radio-browser.info",
);

/**
 * Module to interact with Rainbird controllers
 */
export const pyrainbird = mkPackage(
  nixRaw`pkgs.python2Packages.pyrainbird`,
  "Module to interact with Rainbird controllers",
);

/**
 * Python web framework
 */
export const pyramid = mkPackage(
  nixRaw`pkgs.python2Packages.pyramid`,
  "Python web framework",
);

/**
 * Beaker session factory backend for Pyramid
 */
export const pyramid_beaker = mkPackage(
  nixRaw`pkgs.python2Packages.pyramid-beaker`,
  "Beaker session factory backend for Pyramid",
);

/**
 * Chameleon template compiler for pyramid
 */
export const pyramid_chameleon = mkPackage(
  nixRaw`pkgs.python2Packages.pyramid-chameleon`,
  "Chameleon template compiler for pyramid",
);

/**
 * A package which logs to a Python logger when an exception is raised by a Pyramid application
 */
export const pyramid_exclog = mkPackage(
  nixRaw`pkgs.python2Packages.pyramid-exclog`,
  "A package which logs to a Python logger when an exception is raised by a Pyramid application",
);

/**
 * Jinja2 template bindings for the Pyramid web framework
 */
export const pyramid_jinja2 = mkPackage(
  nixRaw`pkgs.python2Packages.pyramid-jinja2`,
  "Jinja2 template bindings for the Pyramid web framework",
);

/**
 * Mako template bindings for the Pyramid web framework
 */
export const pyramid_mako = mkPackage(
  nixRaw`pkgs.python2Packages.pyramid-mako`,
  "Mako template bindings for the Pyramid web framework",
);

/**
 * Authentication policy for Pyramid that proxies to a stack of other authentication policies
 */
export const pyramid_multiauth = mkPackage(
  nixRaw`pkgs.python2Packages.pyramid-multiauth`,
  "Authentication policy for Pyramid that proxies to a stack of other authentication policies",
);

/**
 * Python Rate-Limiter using Leaky-Bucket Algorimth Family
 */
export const pyrate_limiter = mkPackage(
  nixRaw`pkgs.python2Packages.pyrate-limiter`,
  "Python Rate-Limiter using Leaky-Bucket Algorimth Family",
);

/**
 * RDFa 1.1 distiller/parser library
 */
export const pyrdfa3 = mkPackage(
  nixRaw`pkgs.python2Packages.pyrdfa3`,
  "RDFa 1.1 distiller/parser library",
);

/**
 * This module defines extensions to the standard “typing” module that are supported by the Pyre typechecker
 */
export const pyre_extensions = mkPackage(
  nixRaw`pkgs.python2Packages.pyre-extensions`,
  "This module defines extensions to the standard “typing” module that are supported by the Pyre typechecker",
);

/**
 * Implementation of the Readers-writers problem
 */
export const pyreaderwriterlock = mkPackage(
  nixRaw`pkgs.python2Packages.pyreaderwriterlock`,
  "Implementation of the Readers-writers problem",
);

/**
 * Module to read SAS, SPSS and Stata files into pandas data frames
 */
export const pyreadstat = mkPackage(
  nixRaw`pkgs.python2Packages.pyreadstat`,
  "Module to read SAS, SPSS and Stata files into pandas data frames",
);

/**
 * A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)
 */
export const pyrealsense2 = mkPackage(
  nixRaw`pkgs.python2Packages.pyrealsense2`,
  "A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)",
);

/**
 * A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)
 */
export const pyrealsense2WithCuda = mkPackage(
  nixRaw`pkgs.python2Packages.pyrealsense2WithCuda`,
  "A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)",
);

/**
 * A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)
 */
export const pyrealsense2WithoutCuda = mkPackage(
  nixRaw`pkgs.python2Packages.pyrealsense2WithoutCuda`,
  "A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)",
);

/**
 * Simple module with a Rect class for Pygame-like rectangular areas
 */
export const pyrect = mkPackage(
  nixRaw`pkgs.python2Packages.pyrect`,
  "Simple module with a Rect class for Pygame-like rectangular areas",
);

/**
 * Python parser for ds9 region files
 */
export const pyregion = mkPackage(
  nixRaw`pkgs.python2Packages.pyregion`,
  "Python parser for ds9 region files",
);

/**
 * Easy-to-use glTF 2.0-compliant OpenGL renderer for visualization of 3D scenes
 */
export const pyrender = mkPackage(
  nixRaw`pkgs.python2Packages.pyrender`,
  "Easy-to-use glTF 2.0-compliant OpenGL renderer for visualization of 3D scenes",
);

/**
 * Python library to manage checkpointing for adjoints
 */
export const pyrevolve = mkPackage(
  nixRaw`pkgs.python2Packages.pyrevolve`,
  "Python library to manage checkpointing for adjoints",
);

/**
 * Library to communicate with the RFXtrx family of devices
 */
export const pyrfxtrx = mkPackage(
  nixRaw`pkgs.python2Packages.pyrfxtrx`,
  "Library to communicate with the RFXtrx family of devices",
);

/**
 * Python Radio Interface Controller
 */
export const pyric = mkPackage(
  nixRaw`pkgs.python2Packages.pyric`,
  "Python Radio Interface Controller",
);

/**
 * Python interface to Risco alarm systems through Risco Cloud
 */
export const pyrisco = mkPackage(
  nixRaw`pkgs.python2Packages.pyrisco`,
  "Python interface to Risco alarm systems through Risco Cloud",
);

/**
 * Python wrapper for the Rituals Perfume Genie API
 */
export const pyrituals = mkPackage(
  nixRaw`pkgs.python2Packages.pyrituals`,
  "Python wrapper for the Rituals Perfume Genie API",
);

/**
 * Get transport information from opendata.rmv.de
 */
export const pyrmvtransport = mkPackage(
  nixRaw`pkgs.python2Packages.pyrmvtransport`,
  "Get transport information from opendata.rmv.de",
);

/**
 * Distributed object middleware for Python (RPC)
 */
export const pyro4 = mkPackage(
  nixRaw`pkgs.python2Packages.pyro4`,
  "Distributed object middleware for Python (RPC)",
);

/**
 * Distributed object middleware for Python (RPC)
 */
export const pyro5 = mkPackage(
  nixRaw`pkgs.python2Packages.pyro5`,
  "Distributed object middleware for Python (RPC)",
);

/**
 * Generic API for dispatch to Pyro backends.
 */
export const pyro_api = mkPackage(
  nixRaw`pkgs.python2Packages.pyro-api`,
  "Generic API for dispatch to Pyro backends.",
);

/**
 * Library for probabilistic modeling and inference
 */
export const pyro_ppl = mkPackage(
  nixRaw`pkgs.python2Packages.pyro-ppl`,
  "Library for probabilistic modeling and inference",
);

/**
 * Telegram MTProto API Client Library and Framework for Python
 */
export const pyrogram = mkPackage(
  nixRaw`pkgs.python2Packages.pyrogram`,
  "Telegram MTProto API Client Library and Framework for Python",
);

/**
 * Test your project's packaging friendliness
 */
export const pyroma = mkPackage(
  nixRaw`pkgs.python2Packages.pyroma`,
  "Test your project's packaging friendliness",
);

/**
 * Python Netlink library
 */
export const pyroute2 = mkPackage(
  nixRaw`pkgs.python2Packages.pyroute2`,
  "Python Netlink library",
);

/**
 * 3D mathematical functions using NumPy
 */
export const pyrr = mkPackage(
  nixRaw`pkgs.python2Packages.pyrr`,
  "3D mathematical functions using NumPy",
);

/**
 * Persistent/Functional/Immutable data structures
 */
export const pyrsistent = mkPackage(
  nixRaw`pkgs.python2Packages.pyrsistent`,
  "Persistent/Functional/Immutable data structures",
);

/**
 * Library for generating RSS 2.0 feeds
 */
export const pyrss2gen = mkPackage(
  nixRaw`pkgs.python2Packages.pyrss2gen`,
  "Library for generating RSS 2.0 feeds",
);

/**
 * Python wrapper for librtlsdr (a driver for Realtek RTL2832U based SDR's)
 */
export const pyrtlsdr = mkPackage(
  nixRaw`pkgs.python2Packages.pyrtlsdr`,
  "Python wrapper for librtlsdr (a driver for Realtek RTL2832U based SDR's)",
);

/**
 * Python wrapper for SABnzbd API
 */
export const pysabnzbd = mkPackage(
  nixRaw`pkgs.python2Packages.pysabnzbd`,
  "Python wrapper for SABnzbd API",
);

/**
 * Library to communicate with SAJ inverters
 */
export const pysaj = mkPackage(
  nixRaw`pkgs.python2Packages.pysaj`,
  "Library to communicate with SAJ inverters",
);

/**
 * A python module for reading, manipulating and writing genome data sets
 */
export const pysam = mkPackage(
  nixRaw`pkgs.python2Packages.pysam`,
  "A python module for reading, manipulating and writing genome data sets",
);

/**
 * Python implementation of SAML Version 2 Standard
 */
export const pysaml2 = mkPackage(
  nixRaw`pkgs.python2Packages.pysaml2`,
  "Python implementation of SAML Version 2 Standard",
);

/**
 * Simple python library to communicate with a Satochip hardware wallet
 */
export const pysatochip = mkPackage(
  nixRaw`pkgs.python2Packages.pysatochip`,
  "Simple python library to communicate with a Satochip hardware wallet",
);

/**
 * Pysbd (Python Sentence Boundary Disambiguation) is a rule-based sentence boundary detection that works out-of-the-box across many languages
 */
export const pysbd = mkPackage(
  nixRaw`pkgs.python2Packages.pysbd`,
  "Pysbd (Python Sentence Boundary Disambiguation) is a rule-based sentence boundary detection that works out-of-the-box across many languages",
);

/**
 * Starcraft II environment and library for training agents.
 */
export const pysc2 = mkPackage(
  nixRaw`pkgs.python2Packages.pysc2`,
  "Starcraft II environment and library for training agents.",
);

/**
 * Smartcard library for python
 */
export const pyscard = mkPackage(
  nixRaw`pkgs.python2Packages.pyscard`,
  "Smartcard library for python",
);

/**
 * Python-based simulations of chemistry framework
 */
export const pyscf = mkPackage(
  nixRaw`pkgs.python2Packages.pyscf`,
  "Python-based simulations of chemistry framework",
);

/**
 * Formulate and solve resource-constrained scheduling problems
 */
export const pyschedule = mkPackage(
  nixRaw`pkgs.python2Packages.pyschedule`,
  "Formulate and solve resource-constrained scheduling problems",
);

/**
 * A library for validating data structures in Python
 */
export const pyschemes = mkPackage(
  nixRaw`pkgs.python2Packages.pyschemes`,
  "A library for validating data structures in Python",
);

/**
 * Library for interacting with Schlage Encode WiFi locks
 */
export const pyschlage = mkPackage(
  nixRaw`pkgs.python2Packages.pyschlage`,
  "Library for interacting with Schlage Encode WiFi locks",
);

/**
 * python screenshot
 */
export const pyscreenshot = mkPackage(
  nixRaw`pkgs.python2Packages.pyscreenshot`,
  "python screenshot",
);

/**
 * PyScreeze is a simple, cross-platform screenshot module for Python 2 and 3.
 */
export const pyscreeze = mkPackage(
  nixRaw`pkgs.python2Packages.pyscreeze`,
  "PyScreeze is a simple, cross-platform screenshot module for Python 2 and 3.",
);

/**
 * Pure-Python implementation of Scrypt PBKDF and scrypt file format library
 */
export const pyscrypt = mkPackage(
  nixRaw`pkgs.python2Packages.pyscrypt`,
  "Pure-Python implementation of Scrypt PBKDF and scrypt file format library",
);

/**
 * A Scss compiler for Python
 */
export const pyscss = mkPackage(
  nixRaw`pkgs.python2Packages.pyscss`,
  "A Scss compiler for Python",
);

/**
 * Python library to control SONY projectors
 */
export const pysdcp = mkPackage(
  nixRaw`pkgs.python2Packages.pysdcp`,
  "Python library to control SONY projectors",
);

/**
 * A wrapper around the SDL2 library and as such similar to the discontinued PySDL project
 */
export const pysdl2 = mkPackage(
  nixRaw`pkgs.python2Packages.pysdl2`,
  "A wrapper around the SDL2 library and as such similar to the discontinued PySDL project",
);

/**
 * A simple and easy-to-use C language RPC framework based on GObject System
 */
export const pysearpc = mkPackage(
  nixRaw`pkgs.python2Packages.pysearpc`,
  "A simple and easy-to-use C language RPC framework based on GObject System",
);

/**
 * Python client to access Securitas Direct Mobile API
 */
export const pysecuritas = mkPackage(
  nixRaw`pkgs.python2Packages.pysecuritas`,
  "Python client to access Securitas Direct Mobile API",
);

/**
 * A Python interface to sendfile(2)
 */
export const pysendfile = mkPackage(
  nixRaw`pkgs.python2Packages.pysendfile`,
  "A Python interface to sendfile(2)",
);

/**
 * Module for interacting with Sensibo
 */
export const pysensibo = mkPackage(
  nixRaw`pkgs.python2Packages.pysensibo`,
  "Module for interacting with Sensibo",
);

/**
 * Easy hardware health monitoring in Python for Linux systems
 */
export const pysensors = mkPackage(
  nixRaw`pkgs.python2Packages.pysensors`,
  "Easy hardware health monitoring in Python for Linux systems",
);

/**
 * This library provides OpenPGP facilities in Python through the Sequoia PGP library
 */
export const pysequoia = mkPackage(
  nixRaw`pkgs.python2Packages.pysequoia`,
  "This library provides OpenPGP facilities in Python through the Sequoia PGP library",
);

/**
 * Python serial port extension
 */
export const pyserial = mkPackage(
  nixRaw`pkgs.python2Packages.pyserial`,
  "Python serial port extension",
);

/**
 * Asyncio extension package for pyserial
 */
export const pyserial_asyncio = mkPackage(
  nixRaw`pkgs.python2Packages.pyserial-asyncio`,
  "Asyncio extension package for pyserial",
);

/**
 * Fast asyncio extension package for pyserial that implements eager writes
 */
export const pyserial_asyncio_fast = mkPackage(
  nixRaw`pkgs.python2Packages.pyserial-asyncio-fast`,
  "Fast asyncio extension package for pyserial that implements eager writes",
);

/**
 * A friendly face on SFTP
 */
export const pysftp = mkPackage(
  nixRaw`pkgs.python2Packages.pysftp`,
  "A friendly face on SFTP",
);

/**
 * Python wrapper for tshark, allowing Python packet parsing using Wireshark dissectors
 */
export const pyshark = mkPackage(
  nixRaw`pkgs.python2Packages.pyshark`,
  "Python wrapper for tshark, allowing Python packet parsing using Wireshark dissectors",
);

/**
 * Python read/write support for ESRI Shapefile format
 */
export const pyshp = mkPackage(
  nixRaw`pkgs.python2Packages.pyshp`,
  "Python read/write support for ESRI Shapefile format",
);

/**
 * Python package for creating a client that talks with SIA-based alarm systems
 */
export const pysiaalarm = mkPackage(
  nixRaw`pkgs.python2Packages.pysiaalarm`,
  "Python package for creating a client that talks with SIA-based alarm systems",
);

/**
 * LGPL-licensed Python bindings for Qt
 */
export const pyside2 = mkPackage(
  nixRaw`pkgs.python2Packages.pyside2`,
  "LGPL-licensed Python bindings for Qt",
);

/**
 * PySide2 development tools
 */
export const pyside2_tools = mkPackage(
  nixRaw`pkgs.python2Packages.pyside2-tools`,
  "PySide2 development tools",
);

/**
 * Python bindings for Qt
 */
export const pyside6 = mkPackage(
  nixRaw`pkgs.python2Packages.pyside6`,
  "Python bindings for Qt",
);

/**
 * Library to parse and convert Sigma rules into queries
 */
export const pysigma = mkPackage(
  nixRaw`pkgs.python2Packages.pysigma`,
  "Library to parse and convert Sigma rules into queries",
);

/**
 * Library to support Elasticsearch for pySigma
 */
export const pysigma_backend_elasticsearch = mkPackage(
  nixRaw`pkgs.python2Packages.pysigma-backend-elasticsearch`,
  "Library to support Elasticsearch for pySigma",
);

/**
 * Library to support the Rapid7 InsightIDR backend for pySigma
 */
export const pysigma_backend_insightidr = mkPackage(
  nixRaw`pkgs.python2Packages.pysigma-backend-insightidr`,
  "Library to support the Rapid7 InsightIDR backend for pySigma",
);

/**
 * Library to support OpenSearch for pySigma
 */
export const pysigma_backend_opensearch = mkPackage(
  nixRaw`pkgs.python2Packages.pysigma-backend-opensearch`,
  "Library to support OpenSearch for pySigma",
);

/**
 * Library to support Qradar for pySigma
 */
export const pysigma_backend_qradar = mkPackage(
  nixRaw`pkgs.python2Packages.pysigma-backend-qradar`,
  "Library to support Qradar for pySigma",
);

/**
 * Library to support Splunk for pySigma
 */
export const pysigma_backend_splunk = mkPackage(
  nixRaw`pkgs.python2Packages.pysigma-backend-splunk`,
  "Library to support Splunk for pySigma",
);

/**
 * Library to support CrowdStrike pipeline for pySigma
 */
export const pysigma_pipeline_crowdstrike = mkPackage(
  nixRaw`pkgs.python2Packages.pysigma-pipeline-crowdstrike`,
  "Library to support CrowdStrike pipeline for pySigma",
);

/**
 * Library to support Sysmon pipeline for pySigma
 */
export const pysigma_pipeline_sysmon = mkPackage(
  nixRaw`pkgs.python2Packages.pysigma-pipeline-sysmon`,
  "Library to support Sysmon pipeline for pySigma",
);

/**
 * Library to support Windows service pipeline for pySigma
 */
export const pysigma_pipeline_windows = mkPackage(
  nixRaw`pkgs.python2Packages.pysigma-pipeline-windows`,
  "Library to support Windows service pipeline for pySigma",
);

/**
 * Small python library for the Signal Cli REST API
 */
export const pysignalclirestapi = mkPackage(
  nixRaw`pkgs.python2Packages.pysignalclirestapi`,
  "Small python library for the Signal Cli REST API",
);

/**
 * Provides access to sigprocmask(2) and friends and convenience wrappers to python application developers wanting to SIG_BLOCK and SIG_UNBLOCK signals
 */
export const pysigset = mkPackage(
  nixRaw`pkgs.python2Packages.pysigset`,
  "Provides access to sigprocmask(2) and friends and convenience wrappers to python application developers wanting to SIG_BLOCK and SIG_UNBLOCK signals",
);

/**
 * A python tool to program SIMs / USIMs / ISIMs.
 */
export const pysim = mkPackage(
  nixRaw`pkgs.python2Packages.pysim`,
  "A python tool to program SIMs / USIMs / ISIMs.",
);

/**
 * Python GUIs for Humans
 */
export const pysimplegui = mkPackage(
  nixRaw`pkgs.python2Packages.pysimplegui`,
  "Python GUIs for Humans",
);

/**
 * Python simple and lightweight SOAP Library
 */
export const pysimplesoap = mkPackage(
  nixRaw`pkgs.python2Packages.pysimplesoap`,
  "Python simple and lightweight SOAP Library",
);

/**
 * Provides a decorator to create thread-safe singleton classes
 */
export const pysingleton = mkPackage(
  nixRaw`pkgs.python2Packages.pysingleton`,
  "Provides a decorator to create thread-safe singleton classes",
);

/**
 * Python module for accessing SkyQ Hub
 */
export const pyskyqhub = mkPackage(
  nixRaw`pkgs.python2Packages.pyskyqhub`,
  "Python module for accessing SkyQ Hub",
);

/**
 * Python module for accessing SkyQ boxes
 */
export const pyskyqremote = mkPackage(
  nixRaw`pkgs.python2Packages.pyskyqremote`,
  "Python module for accessing SkyQ boxes",
);

/**
 * Tools for dealing with tree sequences coming to and from SLiM
 */
export const pyslim = mkPackage(
  nixRaw`pkgs.python2Packages.pyslim`,
  "Tools for dealing with tree sequences coming to and from SLiM",
);

/**
 * Python bindings to Slurm
 */
export const pyslurm = mkPackage(
  nixRaw`pkgs.python2Packages.pyslurm`,
  "Python bindings to Slurm",
);

/**
 * Python library for interacting with SMA Solar's WebConnect
 */
export const pysma = mkPackage(
  nixRaw`pkgs.python2Packages.pysma`,
  "Python library for interacting with SMA Solar's WebConnect",
);

/**
 * Python Library for the Smappee dev API
 */
export const pysmappee = mkPackage(
  nixRaw`pkgs.python2Packages.pysmappee`,
  "Python Library for the Smappee dev API",
);

/**
 * Wrapper for smartctl (smartmontools)
 */
export const pysmart = mkPackage(
  nixRaw`pkgs.python2Packages.pysmart`,
  "Wrapper for smartctl (smartmontools)",
);

/**
 * Python implementation to work with SmartApp lifecycle events
 */
export const pysmartapp = mkPackage(
  nixRaw`pkgs.python2Packages.pysmartapp`,
  "Python implementation to work with SmartApp lifecycle events",
);

/**
 * A Smart Download Manager for Python
 */
export const pysmartdl = mkPackage(
  nixRaw`pkgs.python2Packages.pysmartdl`,
  "A Smart Download Manager for Python",
);

/**
 * Python library for interacting with the SmartThings cloud API
 */
export const pysmartthings = mkPackage(
  nixRaw`pkgs.python2Packages.pysmartthings`,
  "Python library for interacting with the SmartThings cloud API",
);

/**
 * Experimental SMB/CIFS library written in Python to support file sharing between Windows and Linux machines
 */
export const pysmb = mkPackage(
  nixRaw`pkgs.python2Packages.pysmb`,
  "Experimental SMB/CIFS library written in Python to support file sharing between Windows and Linux machines",
);

/**
 * libsmbclient binding for Python
 */
export const pysmbc = mkPackage(
  nixRaw`pkgs.python2Packages.pysmbc`,
  "libsmbclient binding for Python",
);

/**
 * Python extension module for reading and writing Standard MIDI Files, based on libsmf.
 */
export const pysmf = mkPackage(
  nixRaw`pkgs.python2Packages.pysmf`,
  "Python extension module for reading and writing Standard MIDI Files, based on libsmf.",
);

/**
 * SNMP SMI/MIB Parser
 */
export const pysmi = mkPackage(
  nixRaw`pkgs.python2Packages.pysmi`,
  "SNMP SMI/MIB Parser",
);

/**
 * Python library for EDL21 smart meters using Smart Message Language (SML)
 */
export const pysml = mkPackage(
  nixRaw`pkgs.python2Packages.pysml`,
  "Python library for EDL21 smart meters using Smart Message Language (SML)",
);

/**
 * Python library for SMT formulae manipulation and solving
 */
export const pysmt = mkPackage(
  nixRaw`pkgs.python2Packages.pysmt`,
  "Python library for SMT formulae manipulation and solving",
);

/**
 * A pure-Python SNMPv1/v2c/v3 library
 */
export const pysnmp = mkPackage(
  nixRaw`pkgs.python2Packages.pysnmp`,
  "A pure-Python SNMPv1/v2c/v3 library",
);

/**
 * Python ASN.1 encoder and decoder
 */
export const pysnmp_pyasn1 = mkPackage(
  nixRaw`pkgs.python2Packages.pysnmp-pyasn1`,
  "Python ASN.1 encoder and decoder",
);

/**
 * SNMP MIB parser
 */
export const pysnmp_pysmi = mkPackage(
  nixRaw`pkgs.python2Packages.pysnmp-pysmi`,
  "SNMP MIB parser",
);

/**
 * Implementation of v1/v2c/v3 SNMP engine
 */
export const pysnmplib = mkPackage(
  nixRaw`pkgs.python2Packages.pysnmplib`,
  "Implementation of v1/v2c/v3 SNMP engine",
);

/**
 * A poor man's debugger for Python
 */
export const pysnooper = mkPackage(
  nixRaw`pkgs.python2Packages.pysnooper`,
  "A poor man's debugger for Python",
);

/**
 * Library to control SNOOZ white noise machines
 */
export const pysnooz = mkPackage(
  nixRaw`pkgs.python2Packages.pysnooz`,
  "Library to control SNOOZ white noise machines",
);

/**
 * ServiceNow HTTP client library written in Python
 */
export const pysnow = mkPackage(
  nixRaw`pkgs.python2Packages.pysnow`,
  "ServiceNow HTTP client library written in Python",
);

/**
 * SOCKS module for Python
 */
export const pysocks = mkPackage(
  nixRaw`pkgs.python2Packages.pysocks`,
  "SOCKS module for Python",
);

/**
 * Generates Solitaire deals
 */
export const pysol_cards = mkPackage(
  nixRaw`pkgs.python2Packages.pysol-cards`,
  "Generates Solitaire deals",
);

/**
 * Python library for interacting with the Solcast API
 */
export const pysolcast = mkPackage(
  nixRaw`pkgs.python2Packages.pysolcast`,
  "Python library for interacting with the Solcast API",
);

/**
 * Lightweight Python wrapper for Apache Solr
 */
export const pysolr = mkPackage(
  nixRaw`pkgs.python2Packages.pysolr`,
  "Lightweight Python wrapper for Apache Solr",
);

/**
 * Python wrapper for the HTTP API provided by SOMA Connect
 */
export const pysoma = mkPackage(
  nixRaw`pkgs.python2Packages.pysoma`,
  "Python wrapper for the HTTP API provided by SOMA Connect",
);

/**
 * A SoCo fork with fixes for Home Assistant
 */
export const pysonos = mkPackage(
  nixRaw`pkgs.python2Packages.pysonos`,
  "A SoCo fork with fixes for Home Assistant",
);

/**
 * An audio library based on libsndfile, CFFI and NumPy
 */
export const pysoundfile = mkPackage(
  nixRaw`pkgs.python2Packages.pysoundfile`,
  "An audio library based on libsndfile, CFFI and NumPy",
);

/**
 * Python bindings for Apache Spark
 */
export const pyspark = mkPackage(
  nixRaw`pkgs.python2Packages.pyspark`,
  "Python bindings for Apache Spark",
);

/**
 * Python module for the SPC Web Gateway REST API
 */
export const pyspcwebgw = mkPackage(
  nixRaw`pkgs.python2Packages.pyspcwebgw`,
  "Python module for the SPC Web Gateway REST API",
);

/**
 * Pure python spell checking
 */
export const pyspellchecker = mkPackage(
  nixRaw`pkgs.python2Packages.pyspellchecker`,
  "Pure python spell checking",
);

/**
 * Python API for Sendmail Milters (SPF)
 */
export const pyspf = mkPackage(
  nixRaw`pkgs.python2Packages.pyspf`,
  "Python API for Sendmail Milters (SPF)",
);

/**
 * Simulate electronic circuit using Python and the Ngspice / Xyce simulators
 */
export const pyspice = mkPackage(
  nixRaw`pkgs.python2Packages.pyspice`,
  "Simulate electronic circuit using Python and the Ngspice / Xyce simulators",
);

/**
 * SPI data flash device drivers in Python
 */
export const pyspiflash = mkPackage(
  nixRaw`pkgs.python2Packages.pyspiflash`,
  "SPI data flash device drivers in Python",
);

/**
 * Interface to the OpenThread Network Co-Processor (NCP)
 */
export const pyspinel = mkPackage(
  nixRaw`pkgs.python2Packages.pyspinel`,
  "Interface to the OpenThread Network Co-Processor (NCP)",
);

/**
 * Python SPNEGO authentication library
 */
export const pyspnego = mkPackage(
  nixRaw`pkgs.python2Packages.pyspnego`,
  "Python SPNEGO authentication library",
);

/**
 * Wrapper for Speech Signal Processing Toolkit (SPTK)
 */
export const pysptk = mkPackage(
  nixRaw`pkgs.python2Packages.pysptk`,
  "Wrapper for Speech Signal Processing Toolkit (SPTK)",
);

/**
 * Python 3 bindings for SQLCipher
 */
export const pysqlcipher3 = mkPackage(
  nixRaw`pkgs.python2Packages.pysqlcipher3`,
  "Python 3 bindings for SQLCipher",
);

/**
 * Lightweight and easy to use sqlite wrapper with built-in encryption system
 */
export const pysqlitecipher = mkPackage(
  nixRaw`pkgs.python2Packages.pysqlitecipher`,
  "Lightweight and easy to use sqlite wrapper with built-in encryption system",
);

/**
 * Asynchronous library to control Logitech Media Server
 */
export const pysqueezebox = mkPackage(
  nixRaw`pkgs.python2Packages.pysqueezebox`,
  "Asynchronous library to control Logitech Media Server",
);

/**
 * Srim Automation of Tasks via Python
 */
export const pysrim = mkPackage(
  nixRaw`pkgs.python2Packages.pysrim`,
  "Srim Automation of Tasks via Python",
);

/**
 * Python library used to edit or create SubRip files
 */
export const pysrt = mkPackage(
  nixRaw`pkgs.python2Packages.pysrt`,
  "Python library used to edit or create SubRip files",
);

/**
 * Module for computing Structured Similarity Image Metric (SSIM) in Python
 */
export const pyssim = mkPackage(
  nixRaw`pkgs.python2Packages.pyssim`,
  "Module for computing Structured Similarity Image Metric (SSIM) in Python",
);

/**
 * A framework-agnostic, logic-free templating system inspired by ctemplate and et
 */
export const pystache = mkPackage(
  nixRaw`pkgs.python2Packages.pystache`,
  "A framework-agnostic, logic-free templating system inspired by ctemplate and et",
);

/**
 * Library for manipulating StarDict dictionaries from within Python
 */
export const pystardict = mkPackage(
  nixRaw`pkgs.python2Packages.pystardict`,
  "Library for manipulating StarDict dictionaries from within Python",
);

        /**
         * Thin Cython-based wrapper on top of libsystemd, focused on exposing the
dbus API via sd-bus in an automated and easy to consume way

         */
export const pystemd = mkPackage(
  nixRaw`pkgs.python2Packages.pystemd`,
  "Thin Cython-based wrapper on top of libsystemd, focused on exposing the\ndbus API via sd-bus in an automated and easy to consume way\n",
);

/**
 * Snowball stemming algorithms, for information retrieval
 */
export const pystemmer = mkPackage(
  nixRaw`pkgs.python2Packages.pystemmer`,
  "Snowball stemming algorithms, for information retrieval",
);

/**
 * This library allows you to create a system tray icon
 */
export const pystray = mkPackage(
  nixRaw`pkgs.python2Packages.pystray`,
  "This library allows you to create a system tray icon",
);

/**
 * A Python library for editing subtitle files
 */
export const pysubs2 = mkPackage(
  nixRaw`pkgs.python2Packages.pysubs2`,
  "A Python library for editing subtitle files",
);

/**
 * Creating SVG with Python
 */
export const pysvg_py3 = mkPackage(
  nixRaw`pkgs.python2Packages.pysvg-py3`,
  "Creating SVG with Python",
);

/**
 * Python bindings for Subversion
 */
export const pysvn = mkPackage(
  nixRaw`pkgs.python2Packages.pysvn`,
  "Python bindings for Subversion",
);

/**
 * Library to control SwitchBee smart home device
 */
export const pyswitchbee = mkPackage(
  nixRaw`pkgs.python2Packages.pyswitchbee`,
  "Library to control SwitchBee smart home device",
);

/**
 * Python library to control Switchbot IoT devices
 */
export const pyswitchbot = mkPackage(
  nixRaw`pkgs.python2Packages.pyswitchbot`,
  "Python library to control Switchbot IoT devices",
);

/**
 * Unofficial python api for Erowid, PsychonautWiki and AskTheCaterpillar
 */
export const pysychonaut = mkPackage(
  nixRaw`pkgs.python2Packages.pysychonaut`,
  "Unofficial python api for Erowid, PsychonautWiki and AskTheCaterpillar",
);

/**
 * Python library for replicating your class
 */
export const pysyncobj = mkPackage(
  nixRaw`pkgs.python2Packages.pysyncobj`,
  "Python library for replicating your class",
);

/**
 * Automated JSON API based communication with Samsung SyncThru Web Service
 */
export const pysyncthru = mkPackage(
  nixRaw`pkgs.python2Packages.pysyncthru`,
  "Automated JSON API based communication with Samsung SyncThru Web Service",
);

/**
 * Python interface for tabix
 */
export const pytabix = mkPackage(
  nixRaw`pkgs.python2Packages.pytabix`,
  "Python interface for tabix",
);

/**
 * A library to write a table in various formats
 */
export const pytablewriter = mkPackage(
  nixRaw`pkgs.python2Packages.pytablewriter`,
  "A library to write a table in various formats",
);

/**
 * Python binding for Tado web API
 */
export const pytado = mkPackage(
  nixRaw`pkgs.python2Packages.pytado`,
  "Python binding for Tado web API",
);

/**
 * Python bindings for the Taglib audio metadata library
 */
export const pytaglib = mkPackage(
  nixRaw`pkgs.python2Packages.pytaglib`,
  "Python bindings for the Taglib audio metadata library",
);

/**
 * Python module to get fuel data from tankerkoenig.de
 */
export const pytankerkoenig = mkPackage(
  nixRaw`pkgs.python2Packages.pytankerkoenig`,
  "Python module to get fuel data from tankerkoenig.de",
);

/**
 * Object-oriented wrapper around the Linux Tun/Tap device
 */
export const pytap2 = mkPackage(
  nixRaw`pkgs.python2Packages.pytap2`,
  "Object-oriented wrapper around the Linux Tun/Tap device",
);

/**
 * Python library for communication with Tapo Cameras
 */
export const pytapo = mkPackage(
  nixRaw`pkgs.python2Packages.pytapo`,
  "Python library for communication with Tapo Cameras",
);

/**
 * Python module to get information from Tautulli
 */
export const pytautulli = mkPackage(
  nixRaw`pkgs.python2Packages.pytautulli`,
  "Python module to get information from Tautulli",
);

/**
 * Simple VTXXX-compatible linux terminal emulator
 */
export const pyte = mkPackage(
  nixRaw`pkgs.python2Packages.pyte`,
  "Simple VTXXX-compatible linux terminal emulator",
);

/**
 * Python implementation for the Telegram Bot API
 */
export const pytelegrambotapi = mkPackage(
  nixRaw`pkgs.python2Packages.pytelegrambotapi`,
  "Python implementation for the Telegram Bot API",
);

/**
 * Python library for the Tenable.io and TenableSC API
 */
export const pytenable = mkPackage(
  nixRaw`pkgs.python2Packages.pytenable`,
  "Python library for the Tenable.io and TenableSC API",
);

/**
 * Python library to define, optimize, and efficiently evaluate mathematical expressions involving multi-dimensional arrays
 */
export const pytensor = mkPackage(
  nixRaw`pkgs.python2Packages.pytensor`,
  "Python library to define, optimize, and efficiently evaluate mathematical expressions involving multi-dimensional arrays",
);

/**
 * A Python wrapper for Google Tesseract
 */
export const pytesseract = mkPackage(
  nixRaw`pkgs.python2Packages.pytesseract`,
  "A Python wrapper for Google Tesseract",
);

/**
 * Framework for writing tests
 */
export const pytest = mkPackage(
  nixRaw`pkgs.python2Packages.pytest`,
  "Framework for writing tests",
);

export const pytestCheckHook = mkPackage(
  nixRaw`pkgs.python2Packages.pytestCheckHook`,
  "",
);

/**
 * Framework for writing tests
 */
export const pytest_4 = mkPackage(
  nixRaw`pkgs.python2Packages.pytest_4`,
  "Framework for writing tests",
);

/**
 * Pytest plugin for aiohttp support
 */
export const pytest_aio = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-aio`,
  "Pytest plugin for aiohttp support",
);

/**
 * Pytest plugin for aiohttp support
 */
export const pytest_aiohttp = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-aiohttp`,
  "Pytest plugin for aiohttp support",
);

/**
 * Generate PyAnnotate annotations from your pytest tests
 */
export const pytest_annotate = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-annotate`,
  "Generate PyAnnotate annotations from your pytest tests",
);

/**
 * Plugin for py.test to simplify calling ansible modules from tests or fixtures
 */
export const pytest_ansible = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-ansible`,
  "Plugin for py.test to simplify calling ansible modules from tests or fixtures",
);

/**
 * Pytest plugin to help with comparing array output from tests
 */
export const pytest_arraydiff = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-arraydiff`,
  "Pytest plugin to help with comparing array output from tests",
);

/**
 * Meta-package containing dependencies for testing
 */
export const pytest_astropy = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-astropy`,
  "Meta-package containing dependencies for testing",
);

/**
 * Plugin to add diagnostic information to the header of the test output
 */
export const pytest_astropy_header = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-astropy-header`,
  "Plugin to add diagnostic information to the header of the test output",
);

/**
 * Library for testing asyncio code with pytest
 */
export const pytest_asyncio = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-asyncio`,
  "Library for testing asyncio code with pytest",
);

/**
 * pytest plugin for URL based tests
 */
export const pytest_base_url = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-base-url`,
  "pytest plugin for URL based tests",
);

/**
 * BDD library for the pytest
 */
export const pytest_bdd = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-bdd`,
  "BDD library for the pytest",
);

/**
 * Pytest fixture for benchmarking code
 */
export const pytest_benchmark = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-benchmark`,
  "Pytest fixture for benchmarking code",
);

/**
 * A pytest plugin to enable format checking with black
 */
export const pytest_black = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-black`,
  "A pytest plugin to enable format checking with black",
);

/**
 * pytest plugin with mechanisms for caching across test runs
 */
export const pytest_cache = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-cache`,
  "pytest plugin with mechanisms for caching across test runs",
);

/**
 * Separate test code from test cases in pytest
 */
export const pytest_cases = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-cases`,
  "Separate test code from test cases in pytest",
);

/**
 * py.test plugin to catch log messages. This is a fork of pytest-capturelog.
 */
export const pytest_catchlog = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-catchlog`,
  "py.test plugin to catch log messages. This is a fork of pytest-capturelog.",
);

/**
 * Pytest plugin to enable celery.contrib.pytest
 */
export const pytest_celery = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-celery`,
  "Pytest plugin to enable celery.contrib.pytest",
);

/**
 * pytest plugin allowing multiple failures per test
 */
export const pytest_check = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-check`,
  "pytest plugin allowing multiple failures per test",
);

/**
 * A simple wrapper around py-cid for easily writing tests involving CIDs in datastructures
 */
export const pytest_cid = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-cid`,
  "A simple wrapper around py-cid for easily writing tests involving CIDs in datastructures",
);

/**
 * pytest plugin for click
 */
export const pytest_click = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-click`,
  "pytest plugin for click",
);

/**
 * Pytest plugin for testing console scripts
 */
export const pytest_console_scripts = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-console-scripts`,
  "Pytest plugin for testing console scripts",
);

/**
 * Plugin for coverage reporting with support for both centralised and distributed testing, including subprocesses and multiprocessing
 */
export const pytest_cov = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-cov`,
  "Plugin for coverage reporting with support for both centralised and distributed testing, including subprocesses and multiprocessing",
);

/**
 * Test command-line applications with pytest and cram
 */
export const pytest_cram = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-cram`,
  "Test command-line applications with pytest and cram",
);

/**
 * Pytest plugin for manipulating test data directories and files
 */
export const pytest_datadir = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-datadir`,
  "Pytest plugin for manipulating test data directories and files",
);

/**
 * Pytest plugin to create a tmpdir containing predefined files/directories
 */
export const pytest_datafiles = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-datafiles`,
  "Pytest plugin to create a tmpdir containing predefined files/directories",
);

/**
 * Manage dependencies of tests
 */
export const pytest_dependency = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-dependency`,
  "Manage dependencies of tests",
);

/**
 * Describe-style plugin for the pytest framework
 */
export const pytest_describe = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-describe`,
  "Describe-style plugin for the pytest framework",
);

/**
 * py.test plugin for testing of Django applications
 */
export const pytest_django = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-django`,
  "py.test plugin for testing of Django applications",
);

/**
 * Pytest plugin with advanced doctest features
 */
export const pytest_doctestplus = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-doctestplus`,
  "Pytest plugin with advanced doctest features",
);

/**
 * A pytest plugin that parses environment files before running tests
 */
export const pytest_dotenv = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-dotenv`,
  "A pytest plugin that parses environment files before running tests",
);

/**
 * A pytest plugin that adds emojis to test result report
 */
export const pytest_emoji = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-emoji`,
  "A pytest plugin that adds emojis to test result report",
);

/**
 * Pytest plugin used to set environment variables
 */
export const pytest_env = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-env`,
  "Pytest plugin used to set environment variables",
);

/**
 * Pytest plugin to treat skipped tests a test failures
 */
export const pytest_error_for_skips = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-error-for-skips`,
  "Pytest plugin to treat skipped tests a test failures",
);

/**
 * Pytest plugin for testing examples in docstrings and markdown files
 */
export const pytest_examples = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-examples`,
  "Pytest plugin for testing examples in docstrings and markdown files",
);

/**
 * py.test plugin to store test expectations and mark tests based on them
 */
export const pytest_expect = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-expect`,
  "py.test plugin to store test expectations and mark tests based on them",
);

/**
 * Integration of factory_boy into the pytest runner
 */
export const pytest_factoryboy = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-factoryboy`,
  "Integration of factory_boy into the pytest runner",
);

/**
 * Meta-package containing dependencies for testing
 */
export const pytest_filter_subpackage = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-filter-subpackage`,
  "Meta-package containing dependencies for testing",
);

/**
 * Simple configuration objects for Py.test fixtures. Allows you to skip tests when their required config variables aren’t set.
 */
export const pytest_fixture_config = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-fixture-config`,
  "Simple configuration objects for Py.test fixtures. Allows you to skip tests when their required config variables aren’t set.",
);

/**
 * pytest plugin to check source code with pyflakes
 */
export const pytest_flakes = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-flakes`,
  "pytest plugin to check source code with pyflakes",
);

/**
 * A set of pytest fixtures to test Flask applications
 */
export const pytest_flask = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-flask`,
  "A set of pytest fixtures to test Flask applications",
);

/**
 * Run tests in isolated forked subprocesses
 */
export const pytest_forked = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-forked`,
  "Run tests in isolated forked subprocesses",
);

/**
 * Wrap tests with fixtures in freeze_time
 */
export const pytest_freezegun = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-freezegun`,
  "Wrap tests with fixtures in freeze_time",
);

/**
 * Pytest plugin providing a fixture interface for spulec/freezegun
 */
export const pytest_freezer = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-freezer`,
  "Pytest plugin providing a fixture interface for spulec/freezegun",
);

/**
 * Plugin for pytest that offloads expected outputs to data files
 */
export const pytest_golden = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-golden`,
  "Plugin for pytest that offloads expected outputs to data files",
);

/**
 * pytest plugin for grpc
 */
export const pytest_grpc = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-grpc`,
  "pytest plugin for grpc",
);

/**
 * PyTest Helpers Namespace
 */
export const pytest_helpers_namespace = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-helpers-namespace`,
  "PyTest Helpers Namespace",
);

/**
 * Plugin for generating HTML reports
 */
export const pytest_html = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-html`,
  "Plugin for generating HTML reports",
);

/**
 * Test your HTTP library against a local copy of httpbin.org
 */
export const pytest_httpbin = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-httpbin`,
  "Test your HTTP library against a local copy of httpbin.org",
);

/**
 * HTTP server for pytest to test HTTP clients
 */
export const pytest_httpserver = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-httpserver`,
  "HTTP server for pytest to test HTTP clients",
);

/**
 * Send responses to httpx
 */
export const pytest_httpx = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-httpx`,
  "Send responses to httpx",
);

/**
 * Pytest helps for compare images and regression
 */
export const pytest_image_diff = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-image-diff`,
  "Pytest helps for compare images and regression",
);

/**
 * pytest plugin that shows failures and errors instantly instead of waiting until the end of test session
 */
export const pytest_instafail = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-instafail`,
  "pytest plugin that shows failures and errors instantly instead of waiting until the end of test session",
);

/**
 * Pytest plugin to perform isort checks (import ordering)
 */
export const pytest_isort = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-isort`,
  "Pytest plugin to perform isort checks (import ordering)",
);

/**
 * Pytest plugin to report test results as JSON
 */
export const pytest_json_report = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-json-report`,
  "Pytest plugin to report test results as JSON",
);

/**
 * pytest plugin for testing Jupyter core libraries and extensions
 */
export const pytest_jupyter = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-jupyter`,
  "pytest plugin for testing Jupyter core libraries and extensions",
);

/**
 * Helps to use fixtures in pytest.mark.parametrize
 */
export const pytest_lazy_fixture = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-lazy-fixture`,
  "Helps to use fixtures in pytest.mark.parametrize",
);

/**
 * Plugin for the pytest testing framework to test server connections locally
 */
export const pytest_localserver = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-localserver`,
  "Plugin for the pytest testing framework to test server connections locally",
);

/**
 * Pytest plugin to test logging
 */
export const pytest_logdog = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-logdog`,
  "Pytest plugin to test logging",
);

/**
 * A pytest plugin to make a test results report with Markdown table format
 */
export const pytest_md_report = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-md-report`,
  "A pytest plugin to make a test results report with Markdown table format",
);

/**
 * Plugin for accessing test session metadata
 */
export const pytest_metadata = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-metadata`,
  "Plugin for accessing test session metadata",
);

/**
 * Thin wrapper around the mock package for easier use with pytest
 */
export const pytest_mock = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-mock`,
  "Thin wrapper around the mock package for easier use with pytest",
);

/**
 * Base fixtures for mockito
 */
export const pytest_mockito = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-mockito`,
  "Base fixtures for mockito",
);

/**
 * A set of fixtures to test your requests to HTTP/UDP servers
 */
export const pytest_mockservers = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-mockservers`,
  "A set of fixtures to test your requests to HTTP/UDP servers",
);

/**
 * Pytest plugin to help with testing figures output from Matplotlib
 */
export const pytest_mpl = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-mpl`,
  "Pytest plugin to help with testing figures output from Matplotlib",
);

/**
 * Mypy static type checker plugin for Pytest
 */
export const pytest_mypy = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-mypy`,
  "Mypy static type checker plugin for Pytest",
);

/**
 * Pytest plugin for testing mypy types, stubs, and plugins
 */
export const pytest_mypy_plugins = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-mypy-plugins`,
  "Pytest plugin for testing mypy types, stubs, and plugins",
);

/**
 * Pytest plugin for detecting inadvertent open file handles
 */
export const pytest_openfiles = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-openfiles`,
  "Pytest plugin for detecting inadvertent open file handles",
);

/**
 * Pytest plugin that allows you to customize the order in which your tests are run
 */
export const pytest_order = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-order`,
  "Pytest plugin that allows you to customize the order in which your tests are run",
);

/**
 * A pytest plugin for parallel and concurrent testing
 */
export const pytest_parallel = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-parallel`,
  "A pytest plugin for parallel and concurrent testing",
);

/**
 * Package to generate parametrized pytests from external files
 */
export const pytest_param_files = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-param-files`,
  "Package to generate parametrized pytests from external files",
);

/**
 * Pytest plugin to write end-to-end browser tests with Playwright
 */
export const pytest_playwright = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-playwright`,
  "Pytest plugin to write end-to-end browser tests with Playwright",
);

/**
 * provides fixtures for quickly creating Matplotlib plots in your tests
 */
export const pytest_plt = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-plt`,
  "provides fixtures for quickly creating Matplotlib plots in your tests",
);

/**
 * Pytest plugin that enables you to test code on a temporary PostgreSQL database
 */
export const pytest_postgresql = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-postgresql`,
  "Pytest plugin that enables you to test code on a temporary PostgreSQL database",
);

/**
 * Pytest PuDB debugger integration
 */
export const pytest_pudb = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-pudb`,
  "Pytest PuDB debugger integration",
);

/**
 * Pytest plugin to check source code with pylint
 */
export const pytest_pylint = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-pylint`,
  "Pytest plugin to check source code with pylint",
);

/**
 * Pytest plugin for interaction with TestRail
 */
export const pytest_pytestrail = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-pytestrail`,
  "Pytest plugin for interaction with TestRail",
);

/**
 * pytest support for PyQt and PySide applications
 */
export const pytest_qt = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-qt`,
  "pytest support for PyQt and PySide applications",
);

/**
 * pytest plugin to generate random data inspired by QuickCheck
 */
export const pytest_quickcheck = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-quickcheck`,
  "pytest plugin to generate random data inspired by QuickCheck",
);

/**
 * An implementation of pytest.raises as a pytest.mark fixture
 */
export const pytest_raises = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-raises`,
  "An implementation of pytest.raises as a pytest.mark fixture",
);

/**
 * Simple pytest plugin to look for regex in Exceptions
 */
export const pytest_raisesregexp = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-raisesregexp`,
  "Simple pytest plugin to look for regex in Exceptions",
);

/**
 * Plugin enabling the use of exception instances with pytest.raises context
 */
export const pytest_raisin = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-raisin`,
  "Plugin enabling the use of exception instances with pytest.raises context",
);

/**
 * Randomise the order of tests with some control over the randomness
 */
export const pytest_random_order = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-random-order`,
  "Randomise the order of tests with some control over the randomness",
);

/**
 * Pytest plugin to randomly order tests and control random.seed
 */
export const pytest_randomly = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-randomly`,
  "Pytest plugin to randomly order tests and control random.seed",
);

/**
 * A pytest plugin that allows you recording of network interactions via VCR.py
 */
export const pytest_recording = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-recording`,
  "A pytest plugin that allows you recording of network interactions via VCR.py",
);

/**
 * Pytest fixtures to write regression tests
 */
export const pytest_regressions = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-regressions`,
  "Pytest fixtures to write regression tests",
);

/**
 * Relaxed test discovery/organization for pytest
 */
export const pytest_relaxed = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-relaxed`,
  "Relaxed test discovery/organization for pytest",
);

/**
 * Pytest plugin for controlling remote data access
 */
export const pytest_remotedata = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-remotedata`,
  "Pytest plugin for controlling remote data access",
);

/**
 * Pytest plugin for repeating tests
 */
export const pytest_repeat = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-repeat`,
  "Pytest plugin for repeating tests",
);

/**
 * Pytest plugin to re-run tests to eliminate flaky failures
 */
export const pytest_rerunfailures = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-rerunfailures`,
  "Pytest plugin to re-run tests to eliminate flaky failures",
);

/**
 * Pytest plugin to provide path for uniform access to test resources
 */
export const pytest_resource_path = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-resource-path`,
  "Pytest plugin to provide path for uniform access to test resources",
);

/**
 * Pytest plugin to reverse test order
 */
export const pytest_reverse = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-reverse`,
  "Pytest plugin to reverse test order",
);

/**
 * Invoke py.test as distutils command with dependency resolution
 */
export const pytest_runner = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-runner`,
  "Invoke py.test as distutils command with dependency resolution",
);

/**
 * Extensible server fixures for py.test
 */
export const pytest_server_fixtures = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-server-fixtures`,
  "Extensible server fixures for py.test",
);

/**
 * Services plugin for pytest testing framework
 */
export const pytest_services = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-services`,
  "Services plugin for pytest testing framework",
);

/**
 * A goodie-bag of unix shell and environment tools for py.test
 */
export const pytest_shutil = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-shutil`,
  "A goodie-bag of unix shell and environment tools for py.test",
);

/**
 * A plugin to enable snapshot testing with pytest
 */
export const pytest_snapshot = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-snapshot`,
  "A plugin to enable snapshot testing with pytest",
);

/**
 * Pytest Plugin to disable socket calls during tests
 */
export const pytest_socket = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-socket`,
  "Pytest Plugin to disable socket calls during tests",
);

/**
 * A pytest plugin to display test execution output like a SPECIFICATION
 */
export const pytest_spec = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-spec`,
  "A pytest plugin to display test execution output like a SPECIFICATION",
);

/**
 * A plugin to fake subprocess for pytest
 */
export const pytest_subprocess = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-subprocess`,
  "A plugin to fake subprocess for pytest",
);

/**
 * Terrible plugin to set up and tear down fixtures within the test function itself
 */
export const pytest_subtesthack = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-subtesthack`,
  "Terrible plugin to set up and tear down fixtures within the test function itself",
);

/**
 * Pytest plugin for unittest subTest() support and subtests fixture
 */
export const pytest_subtests = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-subtests`,
  "Pytest plugin for unittest subTest() support and subtests fixture",
);

/**
 * A plugin that changes the default look and feel of pytest
 */
export const pytest_sugar = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-sugar`,
  "A plugin that changes the default look and feel of pytest",
);

/**
 * Test Anything Protocol (TAP) reporting plugin for pytest
 */
export const pytest_tap = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-tap`,
  "Test Anything Protocol (TAP) reporting plugin for pytest",
);

/**
 * Pytest utilities for tests
 */
export const pytest_test_utils = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-test-utils`,
  "Pytest utilities for tests",
);

/**
 * Pytest plugin for testing your infrastructure
 */
export const pytest_testinfra = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-testinfra`,
  "Pytest plugin for testing your infrastructure",
);

/**
 * Pytest plug-in which automatically selects and re-executes only tests affected by recent changes
 */
export const pytest_testmon = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-testmon`,
  "Pytest plug-in which automatically selects and re-executes only tests affected by recent changes",
);

/**
 * Pytest plugin to abort hanging tests
 */
export const pytest_timeout = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-timeout`,
  "Pytest plugin to abort hanging tests",
);

/**
 * A py.test plugin providing fixtures and markers to simplify testing of asynchronous tornado applications.
 */
export const pytest_tornado = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-tornado`,
  "A py.test plugin providing fixtures and markers to simplify testing of asynchronous tornado applications.",
);

/**
 * py.test plugin for testing Python 3.5+ Tornado code
 */
export const pytest_tornasync = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-tornasync`,
  "py.test plugin for testing Python 3.5+ Tornado code",
);

/**
 * Pytest plugin for trio
 */
export const pytest_trio = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-trio`,
  "Pytest plugin for trio",
);

/**
 * A twisted plugin for py.test
 */
export const pytest_twisted = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-twisted`,
  "A twisted plugin for py.test",
);

/**
 * Test equality of unordered collections in pytest
 */
export const pytest_unordered = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-unordered`,
  "Test equality of unordered collections in pytest",
);

/**
 * Integration VCR.py into pytest
 */
export const pytest_vcr = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-vcr`,
  "Integration VCR.py into pytest",
);

/**
 * Create a Python virtual environment in your test that cleans up on teardown. The fixture has utility methods to install packages and list what’s installed.
 */
export const pytest_virtualenv = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-virtualenv`,
  "Create a Python virtual environment in your test that cleans up on teardown. The fixture has utility methods to install packages and list what’s installed.",
);

/**
 * A pytest plugin for asserting data against voluptuous schema
 */
export const pytest_voluptuous = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-voluptuous`,
  "A pytest plugin for asserting data against voluptuous schema",
);

/**
 * Plugin to list Python warnings in pytest report
 */
export const pytest_warnings = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-warnings`,
  "Plugin to list Python warnings in pytest report",
);

/**
 * Local continuous test runner with pytest and watchdog
 */
export const pytest_watch = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-watch`,
  "Local continuous test runner with pytest and watchdog",
);

/**
 * py.test xdist plugin for distributed testing and loop-on-failing modes
 */
export const pytest_xdist = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-xdist`,
  "py.test xdist plugin for distributed testing and loop-on-failing modes",
);

/**
 * Pytest external process plugin
 */
export const pytest_xprocess = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-xprocess`,
  "Pytest external process plugin",
);

/**
 * A pytest plugin to run Xvfb for tests
 */
export const pytest_xvfb = mkPackage(
  nixRaw`pkgs.python2Packages.pytest-xvfb`,
  "A pytest plugin to run Xvfb for tests",
);

/**
 * pytest plugin with mechanisms for caching across test runs
 */
export const pytestcache = mkPackage(
  nixRaw`pkgs.python2Packages.pytestcache`,
  "pytest plugin with mechanisms for caching across test runs",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python = mkPackage(
  nixRaw`pkgs.python2Packages.python`,
  "A high-level dynamically-typed programming language",
);

/**
 * A collection of modules that are useful when building python applications
 */
export const python3_application = mkPackage(
  nixRaw`pkgs.python2Packages.python3-application`,
  "A collection of modules that are useful when building python applications",
);

/**
 * A networking library written in Python
 */
export const python3_eventlib = mkPackage(
  nixRaw`pkgs.python2Packages.python3-eventlib`,
  "A networking library written in Python",
);

/**
 * Python wrapper for the GnuTLS library
 */
export const python3_gnutls = mkPackage(
  nixRaw`pkgs.python2Packages.python3-gnutls`,
  "Python wrapper for the GnuTLS library",
);

/**
 * OpenID support for modern servers and consumers
 */
export const python3_openid = mkPackage(
  nixRaw`pkgs.python2Packages.python3-openid`,
  "OpenID support for modern servers and consumers",
);

/**
 * OneLogin's SAML Python Toolkit
 */
export const python3_saml = mkPackage(
  nixRaw`pkgs.python2Packages.python3-saml`,
  "OneLogin's SAML Python Toolkit",
);

export const pythonCatchConflictsHook = mkPackage(
  nixRaw`pkgs.python2Packages.pythonCatchConflictsHook`,
  "",
);

export const pythonImportsCheckHook = mkPackage(
  nixRaw`pkgs.python2Packages.pythonImportsCheckHook`,
  "",
);

export const pythonNamespacesHook = mkPackage(
  nixRaw`pkgs.python2Packages.pythonNamespacesHook`,
  "",
);

export const pythonOutputDistHook = mkPackage(
  nixRaw`pkgs.python2Packages.pythonOutputDistHook`,
  "",
);

export const pythonRecompileBytecodeHook = mkPackage(
  nixRaw`pkgs.python2Packages.pythonRecompileBytecodeHook`,
  "",
);

export const pythonRelaxDepsHook = mkPackage(
  nixRaw`pkgs.python2Packages.pythonRelaxDepsHook`,
  "",
);

export const pythonRemoveBinBytecodeHook = mkPackage(
  nixRaw`pkgs.python2Packages.pythonRemoveBinBytecodeHook`,
  "",
);

export const pythonRemoveTestsDirHook = mkPackage(
  nixRaw`pkgs.python2Packages.pythonRemoveTestsDirHook`,
  "",
);

/**
 * Python Driver for ArangoDB
 */
export const python_arango = mkPackage(
  nixRaw`pkgs.python2Packages.python-arango`,
  "Python Driver for ArangoDB",
);

/**
 * Python library for the Awair API
 */
export const python_awair = mkPackage(
  nixRaw`pkgs.python2Packages.python-awair`,
  "Python library for the Awair API",
);

/**
 * Python port of libaxolotl-android
 */
export const python_axolotl = mkPackage(
  nixRaw`pkgs.python2Packages.python-axolotl`,
  "Python port of libaxolotl-android",
);

/**
 * Curve25519 with ed25519 signatures
 */
export const python_axolotl_curve25519 = mkPackage(
  nixRaw`pkgs.python2Packages.python-axolotl-curve25519`,
  "Curve25519 with ed25519 signatures",
);

/**
 * Create standard barcodes with Python
 */
export const python_barcode = mkPackage(
  nixRaw`pkgs.python2Packages.python-barcode`,
  "Create standard barcodes with Python",
);

/**
 * Python module to convert numbers from base 10 integers to base X strings and back again
 */
export const python_baseconv = mkPackage(
  nixRaw`pkgs.python2Packages.python-baseconv`,
  "Python module to convert numbers from base 10 integers to base X strings and back again",
);

/**
 * Module with keylist/keypath support
 */
export const python_benedict = mkPackage(
  nixRaw`pkgs.python2Packages.python-benedict`,
  "Module with keylist/keypath support",
);

/**
 * Pure python implementation of the BiDi layout algorithm
 */
export const python_bidi = mkPackage(
  nixRaw`pkgs.python2Packages.python-bidi`,
  "Pure python implementation of the BiDi layout algorithm",
);

/**
 * Binance Exchange API python implementation for automated trading
 */
export const python_binance = mkPackage(
  nixRaw`pkgs.python2Packages.python-binance`,
  "Binance Exchange API python implementation for automated trading",
);

/**
 * Python dictionaries with advanced dot notation access
 */
export const python_box = mkPackage(
  nixRaw`pkgs.python2Packages.python-box`,
  "Python dictionaries with advanced dot notation access",
);

/**
 * Module to control and monitor an BSBLan device programmatically
 */
export const python_bsblan = mkPackage(
  nixRaw`pkgs.python2Packages.python-bsblan`,
  "Module to control and monitor an BSBLan device programmatically",
);

/**
 * OpenStack Block Storage API Client Library
 */
export const python_cinderclient = mkPackage(
  nixRaw`pkgs.python2Packages.python-cinderclient`,
  "OpenStack Block Storage API Client Library",
);

/**
 * Codon Usage Tables for Python, from kazusa.or.jp
 */
export const python_codon_tables = mkPackage(
  nixRaw`pkgs.python2Packages.python-codon-tables`,
  "Codon Usage Tables for Python, from kazusa.or.jp",
);

/**
 * Constraint Solving Problem resolver for Python.
 */
export const python_constraint = mkPackage(
  nixRaw`pkgs.python2Packages.python-constraint`,
  "Constraint Solving Problem resolver for Python.",
);

/**
 * Creole markup tools written in Python
 */
export const python_creole = mkPackage(
  nixRaw`pkgs.python2Packages.python-creole`,
  "Creole markup tools written in Python",
);

/**
 * Python binding for CRFsuite
 */
export const python_crfsuite = mkPackage(
  nixRaw`pkgs.python2Packages.python-crfsuite`,
  "Python binding for CRFsuite",
);

/**
 * Python API for crontab
 */
export const python_crontab = mkPackage(
  nixRaw`pkgs.python2Packages.python-crontab`,
  "Python API for crontab",
);

/**
 * Python interface to CSXCAD
 */
export const python_csxcad = mkPackage(
  nixRaw`pkgs.python2Packages.python-csxcad`,
  "Python interface to CSXCAD",
);

/**
 * Ctags indexing python bindings
 */
export const python_ctags3 = mkPackage(
  nixRaw`pkgs.python2Packages.python-ctags3`,
  "Ctags indexing python bindings",
);

/**
 * Library to implement a well-behaved Unix daemon process
 */
export const python_daemon = mkPackage(
  nixRaw`pkgs.python2Packages.python-daemon`,
  "Library to implement a well-behaved Unix daemon process",
);

/**
 * Python module to emulate the date math used in SOLR and Elasticsearch
 */
export const python_datemath = mkPackage(
  nixRaw`pkgs.python2Packages.python-datemath`,
  "Python module to emulate the date math used in SOLR and Elasticsearch",
);

/**
 * Powerful extensions to the standard datetime module
 */
export const python_dateutil = mkPackage(
  nixRaw`pkgs.python2Packages.python-dateutil`,
  "Powerful extensions to the standard datetime module",
);

/**
 * Mock D-Bus objects for tests
 */
export const python_dbusmock = mkPackage(
  nixRaw`pkgs.python2Packages.python-dbusmock`,
  "Mock D-Bus objects for tests",
);

/**
 * Module to handle code and condifuration
 */
export const python_decouple = mkPackage(
  nixRaw`pkgs.python2Packages.python-decouple`,
  "Module to handle code and condifuration",
);

/**
 * DIDL-Lite (Digital Item Declaration Language) tools for Python
 */
export const python_didl_lite = mkPackage(
  nixRaw`pkgs.python2Packages.python-didl-lite`,
  "DIDL-Lite (Digital Item Declaration Language) tools for Python",
);

/**
 * Sphinx theme for CPython project
 */
export const python_docs_theme = mkPackage(
  nixRaw`pkgs.python2Packages.python_docs_theme`,
  "Sphinx theme for CPython project",
);

/**
 * Create and update Microsoft Word .docx files
 */
export const python_docx = mkPackage(
  nixRaw`pkgs.python2Packages.python-docx`,
  "Create and update Microsoft Word .docx files",
);

/**
 * Python library to work with Document Object Identifiers (doi)
 */
export const python_doi = mkPackage(
  nixRaw`pkgs.python2Packages.python-doi`,
  "Python library to work with Document Object Identifiers (doi)",
);

/**
 * Add .env support to your django/flask apps in development and deployments
 */
export const python_dotenv = mkPackage(
  nixRaw`pkgs.python2Packages.python-dotenv`,
  "Add .env support to your django/flask apps in development and deployments",
);

/**
 * Python API for talking to Ecobee thermostats
 */
export const python_ecobee_api = mkPackage(
  nixRaw`pkgs.python2Packages.python-ecobee-api`,
  "Python API for talking to Ecobee thermostats",
);

/**
 * A library that provides the `editor` module for programmatically
 */
export const python_editor = mkPackage(
  nixRaw`pkgs.python2Packages.python-editor`,
  "A library that provides the `editor` module for programmatically",
);

/**
 * Python based Engine.IO client and server
 */
export const python_engineio = mkPackage(
  nixRaw`pkgs.python2Packages.python-engineio`,
  "Python based Engine.IO client and server",
);

/**
 * A python client for Etcd
 */
export const python_etcd = mkPackage(
  nixRaw`pkgs.python2Packages.python-etcd`,
  "A python client for Etcd",
);

/**
 * Python bindings for the ethtool kernel interface
 */
export const python_ethtool = mkPackage(
  nixRaw`pkgs.python2Packages.python-ethtool`,
  "Python bindings for the ethtool kernel interface",
);

/**
 * Python language bindings for ev3dev
 */
export const python_ev3dev2 = mkPackage(
  nixRaw`pkgs.python2Packages.python-ev3dev2`,
  "Python language bindings for ev3dev",
);

/**
 * Module to accesse information from Samsung FamilyHub fridges locally
 */
export const python_family_hub_local = mkPackage(
  nixRaw`pkgs.python2Packages.python-family-hub-local`,
  "Module to accesse information from Samsung FamilyHub fridges locally",
);

/**
 * Module to interact with the infrastructure of the Fedora Project
 */
export const python_fedora = mkPackage(
  nixRaw`pkgs.python2Packages.python_fedora`,
  "Module to interact with the infrastructure of the Fedora Project",
);

/**
 * Python library for parsing, compiling, and matching Fast Library Identification and Recognition Technology (FLIRT) signatures
 */
export const python_flirt = mkPackage(
  nixRaw`pkgs.python2Packages.python-flirt`,
  "Python library for parsing, compiling, and matching Fast Library Identification and Recognition Technology (FLIRT) signatures",
);

/**
 * Python binding for Fontconfig
 */
export const python_fontconfig = mkPackage(
  nixRaw`pkgs.python2Packages.python-fontconfig`,
  "Python binding for Fontconfig",
);

/**
 * Parse and manage posts with YAML (or other) frontmatter
 */
export const python_frontmatter = mkPackage(
  nixRaw`pkgs.python2Packages.python-frontmatter`,
  "Parse and manage posts with YAML (or other) frontmatter",
);

/**
 * Module with file-system utilities
 */
export const python_fsutil = mkPackage(
  nixRaw`pkgs.python2Packages.python-fsutil`,
  "Module with file-system utilities",
);

/**
 * Wrapper for Fully Kiosk Browser REST interface
 */
export const python_fullykiosk = mkPackage(
  nixRaw`pkgs.python2Packages.python-fullykiosk`,
  "Wrapper for Fully Kiosk Browser REST interface",
);

/**
 * Module to view JSON in a TUI
 */
export const python_fx = mkPackage(
  nixRaw`pkgs.python2Packages.python-fx`,
  "Module to view JSON in a TUI",
);

/**
 * Python bindings for Gammu
 */
export const python_gammu = mkPackage(
  nixRaw`pkgs.python2Packages.python-gammu`,
  "Python bindings for Gammu",
);

/**
 * Interact with GitLab API
 */
export const python_gitlab = mkPackage(
  nixRaw`pkgs.python2Packages.python-gitlab`,
  "Interact with GitLab API",
);

/**
 * Python bindings for the OpenStack Images API
 */
export const python_glanceclient = mkPackage(
  nixRaw`pkgs.python2Packages.python-glanceclient`,
  "Python bindings for the OpenStack Images API",
);

/**
 * API for the GNU Privacy Guard (GnuPG)
 */
export const python_gnupg = mkPackage(
  nixRaw`pkgs.python2Packages.python-gnupg`,
  "API for the GNU Privacy Guard (GnuPG)",
);

/**
 * Python API and command line tool for talking to Nest thermostats
 */
export const python_google_nest = mkPackage(
  nixRaw`pkgs.python2Packages.python-google-nest`,
  "Python API and command line tool for talking to Nest thermostats",
);

/**
 * Collection of APIs that help with remote controlling a Greenbone Security Manager
 */
export const python_gvm = mkPackage(
  nixRaw`pkgs.python2Packages.python-gvm`,
  "Collection of APIs that help with remote controlling a Greenbone Security Manager",
);

/**
 * Library for Heat built on the Heat orchestration API
 */
export const python_heatclient = mkPackage(
  nixRaw`pkgs.python2Packages.python-heatclient`,
  "Library for Heat built on the Heat orchestration API",
);

/**
 * Library with a fast, convenient interface to Mercurial. It uses Mercurial’s command server for communication with hg.
 */
export const python_hglib = mkPackage(
  nixRaw`pkgs.python2Packages.python-hglib`,
  "Library with a fast, convenient interface to Mercurial. It uses Mercurial’s command server for communication with hg.",
);

/**
 * A simple library for parsing messages of Health Level 7 (HL7) version 2.x into Python objects
 */
export const python_hl7 = mkPackage(
  nixRaw`pkgs.python2Packages.python-hl7`,
  "A simple library for parsing messages of Health Level 7 (HL7) version 2.x into Python objects",
);

/**
 * Library to communicate with HomeWizard Energy devices
 */
export const python_homewizard_energy = mkPackage(
  nixRaw`pkgs.python2Packages.python-homewizard-energy`,
  "Library to communicate with HomeWizard Energy devices",
);

/**
 * A library for managing a hosts file. It enables adding and removing entries, or importing them from a file or URL
 */
export const python_hosts = mkPackage(
  nixRaw`pkgs.python2Packages.python-hosts`,
  "A library for managing a hosts file. It enables adding and removing entries, or importing them from a file or URL",
);

/**
 * Python module to access the HP iLO XML interface
 */
export const python_hpilo = mkPackage(
  nixRaw`pkgs.python2Packages.python-hpilo`,
  "Python module to access the HP iLO XML interface",
);

/**
 * Python HTTP library to call APIs
 */
export const python_http_client = mkPackage(
  nixRaw`pkgs.python2Packages.python-http-client`,
  "Python HTTP library to call APIs",
);

/**
 * Easy to use i18n library
 */
export const python_i18n = mkPackage(
  nixRaw`pkgs.python2Packages.python-i18n`,
  "Easy to use i18n library",
);

/**
 * Python IPMI Library
 */
export const python_ipmi = mkPackage(
  nixRaw`pkgs.python2Packages.python-ipmi`,
  "Python IPMI Library",
);

/**
 * A python package for server applications to retrieve client's IP address
 */
export const python_ipware = mkPackage(
  nixRaw`pkgs.python2Packages.python-ipware`,
  "A python package for server applications to retrieve client's IP address",
);

/**
 * A client for OpenStack bare metal provisioning API, includes a Python module (ironicclient) and CLI (baremetal).
 */
export const python_ironicclient = mkPackage(
  nixRaw`pkgs.python2Packages.python-ironicclient`,
  "A client for OpenStack bare metal provisioning API, includes a Python module (ironicclient) and CLI (baremetal).",
);

/**
 * Python interface to the iZone airconditioner controller
 */
export const python_izone = mkPackage(
  nixRaw`pkgs.python2Packages.python-izone`,
  "Python interface to the iZone airconditioner controller",
);

/**
 * Python bindings for the remote Jenkins API
 */
export const python_jenkins = mkPackage(
  nixRaw`pkgs.python2Packages.python-jenkins`,
  "Python bindings for the remote Jenkins API",
);

/**
 * A JOSE implementation in Python
 */
export const python_jose = mkPackage(
  nixRaw`pkgs.python2Packages.python-jose`,
  "A JOSE implementation in Python",
);

/**
 * Json Formatter for the standard python logger
 */
export const python_json_logger = mkPackage(
  nixRaw`pkgs.python2Packages.python-json-logger`,
  "Json Formatter for the standard python logger",
);

/**
 * A Python 2 and 3 asynchronous JSON RPC server
 */
export const python_jsonrpc_server = mkPackage(
  nixRaw`pkgs.python2Packages.python-jsonrpc-server`,
  "A Python 2 and 3 asynchronous JSON RPC server",
);

/**
 * Read and control Juicenet/Juicepoint/Juicebox based EVSE devices
 */
export const python_juicenet = mkPackage(
  nixRaw`pkgs.python2Packages.python-juicenet`,
  "Read and control Juicenet/Juicepoint/Juicebox based EVSE devices",
);

/**
 * JSON Web Token library for Python 3
 */
export const python_jwt = mkPackage(
  nixRaw`pkgs.python2Packages.python-jwt`,
  "JSON Web Token library for Python 3",
);

/**
 * Python API for TP-Link Kasa Smarthome products
 */
export const python_kasa = mkPackage(
  nixRaw`pkgs.python2Packages.python-kasa`,
  "Python API for TP-Link Kasa Smarthome products",
);

/**
 * Provides access to the Keycloak API
 */
export const python_keycloak = mkPackage(
  nixRaw`pkgs.python2Packages.python-keycloak`,
  "Provides access to the Keycloak API",
);

/**
 * Client Library for OpenStack Identity
 */
export const python_keystoneclient = mkPackage(
  nixRaw`pkgs.python2Packages.python-keystoneclient`,
  "Client Library for OpenStack Identity",
);

/**
 * Python modules for implementing LDAP clients
 */
export const python_ldap = mkPackage(
  nixRaw`pkgs.python2Packages.python-ldap`,
  "Python modules for implementing LDAP clients",
);

/**
 * Tool for testing code speaking with LDAP server
 */
export const python_ldap_test = mkPackage(
  nixRaw`pkgs.python2Packages.python-ldap-test`,
  "Tool for testing code speaking with LDAP server",
);

/**
 * Library to run nmap scans, parse and diff scan results
 */
export const python_libnmap = mkPackage(
  nixRaw`pkgs.python2Packages.python-libnmap`,
  "Library to run nmap scans, parse and diff scan results",
);

/**
 * Python classes to extract information from the Linux kernel /proc files
 */
export const python_linux_procfs = mkPackage(
  nixRaw`pkgs.python2Packages.python-linux-procfs`,
  "Python classes to extract information from the Linux kernel /proc files",
);

/**
 * Python logging handler for Logstash
 */
export const python_logstash = mkPackage(
  nixRaw`pkgs.python2Packages.python-logstash`,
  "Python logging handler for Logstash",
);

/**
 * Louvain Community Detection
 */
export const python_louvain = mkPackage(
  nixRaw`pkgs.python2Packages.python-louvain`,
  "Louvain Community Detection",
);

/**
 * Black plugin for the Python LSP Server
 */
export const python_lsp_black = mkPackage(
  nixRaw`pkgs.python2Packages.python-lsp-black`,
  "Black plugin for the Python LSP Server",
);

/**
 * Python server implementation of the JSON RPC 2.0 protocol
 */
export const python_lsp_jsonrpc = mkPackage(
  nixRaw`pkgs.python2Packages.python-lsp-jsonrpc`,
  "Python server implementation of the JSON RPC 2.0 protocol",
);

/**
 * Ruff linting plugin for pylsp
 */
export const python_lsp_ruff = mkPackage(
  nixRaw`pkgs.python2Packages.python-lsp-ruff`,
  "Ruff linting plugin for pylsp",
);

/**
 * Python implementation of the Language Server Protocol
 */
export const python_lsp_server = mkPackage(
  nixRaw`pkgs.python2Packages.python-lsp-server`,
  "Python implementation of the Language Server Protocol",
);

/**
 * Tool and library for manipulating LilyPond files
 */
export const python_ly = mkPackage(
  nixRaw`pkgs.python2Packages.python-ly`,
  "Tool and library for manipulating LilyPond files",
);

/**
 * liblzf python bindings
 */
export const python_lzf = mkPackage(
  nixRaw`pkgs.python2Packages.python-lzf`,
  "liblzf python bindings",
);

/**
 * Python bindings for the LZO data compression library
 */
export const python_lzo = mkPackage(
  nixRaw`pkgs.python2Packages.python-lzo`,
  "Python bindings for the LZO data compression library",
);

/**
 * A python interface to the libmagic file type identification library
 */
export const python_magic = mkPackage(
  nixRaw`pkgs.python2Packages.python-magic`,
  "A python interface to the libmagic file type identification library",
);

/**
 * Client library for OpenStack Manila API
 */
export const python_manilaclient = mkPackage(
  nixRaw`pkgs.python2Packages.python-manilaclient`,
  "Client library for OpenStack Manila API",
);

/**
 * Python bindings for Mapnik
 */
export const python_mapnik = mkPackage(
  nixRaw`pkgs.python2Packages.python-mapnik`,
  "Python bindings for Mapnik",
);

/**
 * Math extension for Python-Markdown
 */
export const python_markdown_math = mkPackage(
  nixRaw`pkgs.python2Packages.python-markdown-math`,
  "Math extension for Python-Markdown",
);

/**
 * Python server to interact with Matter
 */
export const python_matter_server = mkPackage(
  nixRaw`pkgs.python2Packages.python-matter-server`,
  "Python server to interact with Matter",
);

/**
 * Pure python memcached client
 */
export const python_memcached = mkPackage(
  nixRaw`pkgs.python2Packages.python-memcached`,
  "Pure python memcached client",
);

/**
 * Python library for interfacing with Xiaomi smart appliances
 */
export const python_miio = mkPackage(
  nixRaw`pkgs.python2Packages.python-miio`,
  "Python library for interfacing with Xiaomi smart appliances",
);

/**
 * A module provides basic functions for parsing mime-type names and matching them against a list of media-ranges
 */
export const python_mimeparse = mkPackage(
  nixRaw`pkgs.python2Packages.python-mimeparse`,
  "A module provides basic functions for parsing mime-type names and matching them against a list of media-ranges",
);

/**
 * Simple MNIST data parser written in Python
 */
export const python_mnist = mkPackage(
  nixRaw`pkgs.python2Packages.python-mnist`,
  "Simple MNIST data parser written in Python",
);

/**
 * Python API to MPV using JSON IPC
 */
export const python_mpv_jsonipc = mkPackage(
  nixRaw`pkgs.python2Packages.python-mpv-jsonipc`,
  "Python API to MPV using JSON IPC",
);

/**
 * A streaming multipart parser for Python
 */
export const python_multipart = mkPackage(
  nixRaw`pkgs.python2Packages.python-multipart`,
  "A streaming multipart parser for Python",
);

/**
 * An MPD (Music Player Daemon) client library written in pure Python.
 */
export const python_musicpd = mkPackage(
  nixRaw`pkgs.python2Packages.python-musicpd`,
  "An MPD (Music Player Daemon) client library written in pure Python.",
);

/**
 * Python wrapper for MyQ API
 */
export const python_myq = mkPackage(
  nixRaw`pkgs.python2Packages.python-myq`,
  "Python wrapper for MyQ API",
);

/**
 * Python API client for interacting with myStrom devices
 */
export const python_mystrom = mkPackage(
  nixRaw`pkgs.python2Packages.python-mystrom`,
  "Python API client for interacting with myStrom devices",
);

/**
 * An NDN client library with AsyncIO support
 */
export const python_ndn = mkPackage(
  nixRaw`pkgs.python2Packages.python-ndn`,
  "An NDN client library with AsyncIO support",
);

/**
 * Python API and command line tool for talking to the Nest™ Thermostat
 */
export const python_nest = mkPackage(
  nixRaw`pkgs.python2Packages.python-nest`,
  "Python API and command line tool for talking to the Nest™ Thermostat",
);

/**
 * Python library which helps in using nmap
 */
export const python_nmap = mkPackage(
  nixRaw`pkgs.python2Packages.python-nmap`,
  "Python library which helps in using nmap",
);

/**
 * Python client library for Hashicorp Nomad
 */
export const python_nomad = mkPackage(
  nixRaw`pkgs.python2Packages.python-nomad`,
  "Python client library for Hashicorp Nomad",
);

/**
 * Client library for OpenStack Compute API
 */
export const python_novaclient = mkPackage(
  nixRaw`pkgs.python2Packages.python-novaclient`,
  "Client library for OpenStack Compute API",
);

/**
 * Python Wrapper for NVD3 - It's time for beautiful charts
 */
export const python_nvd3 = mkPackage(
  nixRaw`pkgs.python2Packages.python-nvd3`,
  "Python Wrapper for NVD3 - It's time for beautiful charts",
);

/**
 * Framework that aims at making it easy to provide authentication via OAuth 2.0 within an application stack
 */
export const python_oauth2 = mkPackage(
  nixRaw`pkgs.python2Packages.python-oauth2`,
  "Framework that aims at making it easy to provide authentication via OAuth 2.0 within an application stack",
);

/**
 * Python bindings for Olm
 */
export const python_olm = mkPackage(
  nixRaw`pkgs.python2Packages.python-olm`,
  "Python bindings for Olm",
);

/**
 * Python client for interacting with transport.opendata.ch
 */
export const python_opendata_transport = mkPackage(
  nixRaw`pkgs.python2Packages.python-opendata-transport`,
  "Python client for interacting with transport.opendata.ch",
);

/**
 * Python interface to OpenEMS
 */
export const python_openems = mkPackage(
  nixRaw`pkgs.python2Packages.python-openems`,
  "Python interface to OpenEMS",
);

/**
 * Asynchronous Python client for the OpenSky API
 */
export const python_opensky = mkPackage(
  nixRaw`pkgs.python2Packages.python-opensky`,
  "Asynchronous Python client for the OpenSky API",
);

/**
 * OpenStack Command-line Client
 */
export const python_openstackclient = mkPackage(
  nixRaw`pkgs.python2Packages.python-openstackclient`,
  "OpenStack Command-line Client",
);

/**
 * Python wrapper for the OpenZWave C++ library
 */
export const python_openzwave = mkPackage(
  nixRaw`pkgs.python2Packages.python_openzwave`,
  "Python wrapper for the OpenZWave C++ library",
);

/**
 * Python wrapper for OpenZWave's MQTT daemon
 */
export const python_openzwave_mqtt = mkPackage(
  nixRaw`pkgs.python2Packages.python-openzwave-mqtt`,
  "Python wrapper for OpenZWave's MQTT daemon",
);

/**
 * Open Sound Control server and client in pure python
 */
export const python_osc = mkPackage(
  nixRaw`pkgs.python2Packages.python-osc`,
  "Open Sound Control server and client in pure python",
);

/**
 * Library for the Open Thread Border Router
 */
export const python_otbr_api = mkPackage(
  nixRaw`pkgs.python2Packages.python-otbr-api`,
  "Library for the Open Thread Border Router",
);

/**
 * Python library to access the OWASP ZAP API
 */
export const python_owasp_zap_v2_4 = mkPackage(
  nixRaw`pkgs.python2Packages.python-owasp-zap-v2-4`,
  "Python library to access the OWASP ZAP API",
);

/**
 * An interface for packer.io
 */
export const python_packer = mkPackage(
  nixRaw`pkgs.python2Packages.python-packer`,
  "An interface for packer.io",
);

/**
 * Pre-authentication encoding (PAE) implementation in Python
 */
export const python_pae = mkPackage(
  nixRaw`pkgs.python2Packages.python-pae`,
  "Pre-authentication encoding (PAE) implementation in Python",
);

/**
 * Python pam module
 */
export const python_pam = mkPackage(
  nixRaw`pkgs.python2Packages.python-pam`,
  "Python pam module",
);

/**
 * Linux Peripheral I/O (GPIO, LED, PWM, SPI, I2C, MMIO, Serial) with Python 2 & 3
 */
export const python_periphery = mkPackage(
  nixRaw`pkgs.python2Packages.python-periphery`,
  "Linux Peripheral I/O (GPIO, LED, PWM, SPI, I2C, MMIO, Serial) with Python 2 & 3",
);

/**
 * Python wrapper for the Picnic API
 */
export const python_picnic_api = mkPackage(
  nixRaw`pkgs.python2Packages.python-picnic-api`,
  "Python wrapper for the Picnic API",
);

/**
 * Python context manager for managing pid files
 */
export const python_pidfile = mkPackage(
  nixRaw`pkgs.python2Packages.python-pidfile`,
  "Python context manager for managing pid files",
);

/**
 * Python library for interacting with the pipedrive.com API
 */
export const python_pipedrive = mkPackage(
  nixRaw`pkgs.python2Packages.python-pipedrive`,
  "Python library for interacting with the pipedrive.com API",
);

/**
 * PKCS#11/Cryptoki support for Python
 */
export const python_pkcs11 = mkPackage(
  nixRaw`pkgs.python2Packages.python-pkcs11`,
  "PKCS#11/Cryptoki support for Python",
);

/**
 * Create Open XML PowerPoint documents in Python
 */
export const python_pptx = mkPackage(
  nixRaw`pkgs.python2Packages.python-pptx`,
  "Create Open XML PowerPoint documents in Python",
);

/**
 * Python(ic) interface to the linux prctl syscall
 */
export const python_prctl = mkPackage(
  nixRaw`pkgs.python2Packages.python-prctl`,
  "Python(ic) interface to the linux prctl syscall",
);

/**
 * Python binding of ptrace library
 */
export const python_ptrace = mkPackage(
  nixRaw`pkgs.python2Packages.python-ptrace`,
  "Python binding of ptrace library",
);

/**
 * Module for the control of Rabbit Air air purifiers
 */
export const python_rabbitair = mkPackage(
  nixRaw`pkgs.python2Packages.python-rabbitair`,
  "Module for the control of Rabbit Air air purifiers",
);

/**
 * Python wrapper around rapidjson
 */
export const python_rapidjson = mkPackage(
  nixRaw`pkgs.python2Packages.python-rapidjson`,
  "Python wrapper around rapidjson",
);

/**
 * Lock context manager implemented via redis SETNX/BLPOP
 */
export const python_redis_lock = mkPackage(
  nixRaw`pkgs.python2Packages.python-redis-lock`,
  "Lock context manager implemented via redis SETNX/BLPOP",
);

/**
 * Pure Python parser for Windows Registry hives
 */
export const python_registry = mkPackage(
  nixRaw`pkgs.python2Packages.python-registry`,
  "Pure Python parser for Windows Registry hives",
);

/**
 * Python library & console tool for controlling Roborock vacuum
 */
export const python_roborock = mkPackage(
  nixRaw`pkgs.python2Packages.python-roborock`,
  "Python library & console tool for controlling Roborock vacuum",
);

/**
 * A Python binding for the RtMidi C++ library implemented using Cython
 */
export const python_rtmidi = mkPackage(
  nixRaw`pkgs.python2Packages.python-rtmidi`,
  "A Python binding for the RtMidi C++ library implemented using Cython",
);

/**
 * Toolkit to provide interface for various SAT (without optional dependancy py-aiger-cnf)
 */
export const python_sat = mkPackage(
  nixRaw`pkgs.python2Packages.python-sat`,
  "Toolkit to provide interface for various SAT (without optional dependancy py-aiger-cnf)",
);

/**
 * Easy peasy wrapper for HipChat's v1 API
 */
export const python_simple_hipchat = mkPackage(
  nixRaw`pkgs.python2Packages.python-simple-hipchat`,
  "Easy peasy wrapper for HipChat's v1 API",
);

/**
 * Python Slugify application that handles Unicode
 */
export const python_slugify = mkPackage(
  nixRaw`pkgs.python2Packages.python-slugify`,
  "Python Slugify application that handles Unicode",
);

/**
 * Python API for SmartTub enabled hot tubs
 */
export const python_smarttub = mkPackage(
  nixRaw`pkgs.python2Packages.python-smarttub`,
  "Python API for SmartTub enabled hot tubs",
);

/**
 * Python wrapper for the snap7 PLC communication library
 */
export const python_snap7 = mkPackage(
  nixRaw`pkgs.python2Packages.python-snap7`,
  "Python wrapper for the snap7 PLC communication library",
);

/**
 * Python library for the snappy compression library from Google
 */
export const python_snappy = mkPackage(
  nixRaw`pkgs.python2Packages.python-snappy`,
  "Python library for the snappy compression library from Google",
);

/**
 * Python Socket.IO server and client
 */
export const python_socketio = mkPackage(
  nixRaw`pkgs.python2Packages.python-socketio`,
  "Python Socket.IO server and client",
);

/**
 * Core proxy client (SOCKS4, SOCKS5, HTTP) functionality for Python
 */
export const python_socks = mkPackage(
  nixRaw`pkgs.python2Packages.python-socks`,
  "Core proxy client (SOCKS4, SOCKS5, HTTP) functionality for Python",
);

/**
 * Python library for interfacing with Sony's Songpal devices
 */
export const python_songpal = mkPackage(
  nixRaw`pkgs.python2Packages.python-songpal`,
  "Python library for interfacing with Sony's Songpal devices",
);

/**
 * Library to write SQL queries in a pythonic way
 */
export const python_sql = mkPackage(
  nixRaw`pkgs.python2Packages.python-sql`,
  "Library to write SQL queries in a pythonic way",
);

/**
 * HTTP Status for Humans
 */
export const python_status = mkPackage(
  nixRaw`pkgs.python2Packages.python-status`,
  "HTTP Status for Humans",
);

/**
 * Python module to handle standardized numbers and codes
 */
export const python_stdnum = mkPackage(
  nixRaw`pkgs.python2Packages.python-stdnum`,
  "Python module to handle standardized numbers and codes",
);

/**
 * A handy Python library to validate, manipulate and generate strings.
 */
export const python_string_utils = mkPackage(
  nixRaw`pkgs.python2Packages.python-string-utils`,
  "A handy Python library to validate, manipulate and generate strings.",
);

/**
 * Python bindings to the OpenStack Object Storage API
 */
export const python_swiftclient = mkPackage(
  nixRaw`pkgs.python2Packages.python-swiftclient`,
  "Python bindings to the OpenStack Object Storage API",
);

/**
 * Python binding for Tado web API. Pythonize your central heating!
 */
export const python_tado = mkPackage(
  nixRaw`pkgs.python2Packages.python-tado`,
  "Python binding for Tado web API. Pythonize your central heating!",
);

/**
 * Python DBAPI driver for MSSQL using pure Python TDS (Tabular Data Stream) protocol implementation
 */
export const python_tds = mkPackage(
  nixRaw`pkgs.python2Packages.python-tds`,
  "Python DBAPI driver for MSSQL using pure Python TDS (Tabular Data Stream) protocol implementation",
);

/**
 * Python client for the Telegram's tdlib
 */
export const python_telegram = mkPackage(
  nixRaw`pkgs.python2Packages.python-telegram`,
  "Python client for the Telegram's tdlib",
);

/**
 * Python library to interface with the Telegram Bot API
 */
export const python_telegram_bot = mkPackage(
  nixRaw`pkgs.python2Packages.python-telegram-bot`,
  "Python library to interface with the Telegram Bot API",
);

/**
 * Tools for testing PySnooper
 */
export const python_toolbox = mkPackage(
  nixRaw`pkgs.python2Packages.python-toolbox`,
  "Tools for testing PySnooper",
);

/**
 * A Python wrapper for the Trovo API
 */
export const python_trovo = mkPackage(
  nixRaw`pkgs.python2Packages.python-trovo`,
  "A Python wrapper for the Trovo API",
);

/**
 * Python wrapper for the Twitch API
 */
export const python_twitch_client = mkPackage(
  nixRaw`pkgs.python2Packages.python-twitch-client`,
  "Python wrapper for the Twitch API",
);

/**
 * Python wrapper around the Twitter API
 */
export const python_twitter = mkPackage(
  nixRaw`pkgs.python2Packages.python-twitter`,
  "Python wrapper around the Twitter API",
);

/**
 * Python based U2F host library
 */
export const python_u2flib_host = mkPackage(
  nixRaw`pkgs.python2Packages.python-u2flib-host`,
  "Python based U2F host library",
);

/**
 * Python based U2F server library
 */
export const python_u2flib_server = mkPackage(
  nixRaw`pkgs.python2Packages.python-u2flib-server`,
  "Python based U2F server library",
);

/**
 * Pythonic API to Linux uinput kernel module
 */
export const python_uinput = mkPackage(
  nixRaw`pkgs.python2Packages.python-uinput`,
  "Pythonic API to Linux uinput kernel module",
);

/**
 * ULID implementation for Python
 */
export const python_ulid = mkPackage(
  nixRaw`pkgs.python2Packages.python-ulid`,
  "ULID implementation for Python",
);

/**
 * Python bindings for the Linux unshare() syscall
 */
export const python_unshare = mkPackage(
  nixRaw`pkgs.python2Packages.python-unshare`,
  "Python bindings for the Linux unshare() syscall",
);

/**
 * Module with some convenient utilities
 */
export const python_utils = mkPackage(
  nixRaw`pkgs.python2Packages.python-utils`,
  "Module with some convenient utilities",
);

/**
 * Python module that provides a thin wrapper around the vagrant command line executable
 */
export const python_vagrant = mkPackage(
  nixRaw`pkgs.python2Packages.python-vagrant`,
  "Python module that provides a thin wrapper around the vagrant command line executable",
);

/**
 * Python library to control the Velbus home automation system
 */
export const python_velbus = mkPackage(
  nixRaw`pkgs.python2Packages.python-velbus`,
  "Python library to control the Velbus home automation system",
);

/**
 * A free software implementation of Symantec's VIP Access application and protocol
 */
export const python_vipaccess = mkPackage(
  nixRaw`pkgs.python2Packages.python-vipaccess`,
  "A free software implementation of Symantec's VIP Access application and protocol",
);

/**
 * Python bindings for VLC, the cross-platform multimedia player and framework
 */
export const python_vlc = mkPackage(
  nixRaw`pkgs.python2Packages.python-vlc`,
  "Python bindings for VLC, the cross-platform multimedia player and framework",
);

/**
 * Python module to produce parsed WHOIS data
 */
export const python_whois = mkPackage(
  nixRaw`pkgs.python2Packages.python-whois`,
  "Python module to produce parsed WHOIS data",
);

/**
 * Read & write wireless card capabilities using the Linux Wireless Extensions
 */
export const python_wifi = mkPackage(
  nixRaw`pkgs.python2Packages.python-wifi`,
  "Read & write wireless card capabilities using the Linux Wireless Extensions",
);

/**
 * Python implementation of the Wink API
 */
export const python_wink = mkPackage(
  nixRaw`pkgs.python2Packages.python-wink`,
  "Python implementation of the Wink API",
);

/**
 * Python XMP Toolkit for working with metadata
 */
export const python_xmp_toolkit = mkPackage(
  nixRaw`pkgs.python2Packages.python-xmp-toolkit`,
  "Python XMP Toolkit for working with metadata",
);

/**
 * Pure Python library for seeking within compressed xz files
 */
export const python_xz = mkPackage(
  nixRaw`pkgs.python2Packages.python-xz`,
  "Pure Python library for seeking within compressed xz files",
);

/**
 * Python library for the yate telephony engine
 */
export const python_yate = mkPackage(
  nixRaw`pkgs.python2Packages.python-yate`,
  "Python library for the yate telephony engine",
);

/**
 * A simple Python wrapper around for YouTube Data API
 */
export const python_youtube = mkPackage(
  nixRaw`pkgs.python2Packages.python-youtube`,
  "A simple Python wrapper around for YouTube Data API",
);

/**
 * Python bindings for zbar
 */
export const python_zbar = mkPackage(
  nixRaw`pkgs.python2Packages.python-zbar`,
  "Python bindings for zbar",
);

/**
 * A Python interface to the UNIX dialog utility and mostly-compatible programs
 */
export const pythondialog = mkPackage(
  nixRaw`pkgs.python2Packages.pythondialog`,
  "A Python interface to the UNIX dialog utility and mostly-compatible programs",
);

/**
 * Python bindings for Enlightenment Foundation Libraries
 */
export const pythonefl = mkPackage(
  nixRaw`pkgs.python2Packages.pythonefl`,
  "Python bindings for Enlightenment Foundation Libraries",
);

/**
 * Python interface with Egardia/Woonveilig alarms
 */
export const pythonegardia = mkPackage(
  nixRaw`pkgs.python2Packages.pythonegardia`,
  "Python interface with Egardia/Woonveilig alarms",
);

/**
 * Cross platform search tool for finding Python
 */
export const pythonfinder = mkPackage(
  nixRaw`pkgs.python2Packages.pythonfinder`,
  "Cross platform search tool for finding Python",
);

/**
 * Eval nix code from python.

 */
export const pythonix = mkPackage(
  nixRaw`pkgs.python2Packages.pythonix`,
  "Eval nix code from python.\n",
);

/**
 * .NET integration for Python
 */
export const pythonnet = mkPackage(
  nixRaw`pkgs.python2Packages.pythonnet`,
  ".NET integration for Python",
);

/**
 * Python wrapper for the OpenCASCADE 3D modeling kernel
 */
export const pythonocc_core = mkPackage(
  nixRaw`pkgs.python2Packages.pythonocc-core`,
  "Python wrapper for the OpenCASCADE 3D modeling kernel",
);

/**
 * Ahead of Time compiler for numeric kernels
 */
export const pythran = mkPackage(
  nixRaw`pkgs.python2Packages.pythran`,
  "Ahead of Time compiler for numeric kernels",
);

/**
 * Python library to communicate with Tibber
 */
export const pytibber = mkPackage(
  nixRaw`pkgs.python2Packages.pytibber`,
  "Python library to communicate with Tibber",
);

/**
 *  Python API for Tile Bluetooth trackers
 */
export const pytile = mkPackage(
  nixRaw`pkgs.python2Packages.pytile`,
  " Python API for Tile Bluetooth trackers",
);

/**
 * A small Python library to parse various kinds of time expressions
 */
export const pytimeparse = mkPackage(
  nixRaw`pkgs.python2Packages.pytimeparse`,
  "A small Python library to parse various kinds of time expressions",
);

/**
 * A pytimeparse based project with the aim of optimizing functionality and providing stable support
 */
export const pytimeparse2 = mkPackage(
  nixRaw`pkgs.python2Packages.pytimeparse2`,
  "A pytimeparse based project with the aim of optimizing functionality and providing stable support",
);

/**
 * TLV (tag length lavue) data parser, especially useful for EMV tags parsing
 */
export const pytlv = mkPackage(
  nixRaw`pkgs.python2Packages.pytlv`,
  "TLV (tag length lavue) data parser, especially useful for EMV tags parsing",
);

/**
 * A Pythonic framework for threat modeling
 */
export const pytm = mkPackage(
  nixRaw`pkgs.python2Packages.pytm`,
  "A Pythonic framework for threat modeling",
);

/**
 * Python library to read Tiled Map Editor's TMX maps
 */
export const pytmx = mkPackage(
  nixRaw`pkgs.python2Packages.pytmx`,
  "Python library to read Tiled Map Editor's TMX maps",
);

/**
 * A python wrapper for tomlplusplus
 */
export const pytomlpp = mkPackage(
  nixRaw`pkgs.python2Packages.pytomlpp`,
  "A python wrapper for tomlplusplus",
);

/**
 * Async Python package to access the Tomorrow.io API
 */
export const pytomorrowio = mkPackage(
  nixRaw`pkgs.python2Packages.pytomorrowio`,
  "Async Python package to access the Tomorrow.io API",
);

/**
 * Python tool configuration
 */
export const pytoolconfig = mkPackage(
  nixRaw`pkgs.python2Packages.pytoolconfig`,
  "Python tool configuration",
);

/**
 * Miscellaneous Python lifesavers.
 */
export const pytools = mkPackage(
  nixRaw`pkgs.python2Packages.pytools`,
  "Miscellaneous Python lifesavers.",
);

/**
 * Lightweight PyTorch wrapper for machine learning researchers
 */
export const pytorch_lightning = mkPackage(
  nixRaw`pkgs.python2Packages.pytorch-lightning`,
  "Lightweight PyTorch wrapper for machine learning researchers",
);

/**
 * Metric learning library for PyTorch
 */
export const pytorch_metric_learning = mkPackage(
  nixRaw`pkgs.python2Packages.pytorch-metric-learning`,
  "Metric learning library for PyTorch",
);

/**
 * Fast and differentiable MS-SSIM and SSIM for pytorch
 */
export const pytorch_msssim = mkPackage(
  nixRaw`pkgs.python2Packages.pytorch-msssim`,
  "Fast and differentiable MS-SSIM and SSIM for pytorch",
);

/**
 * Supplementary components to accelerate research and development in PyTorch
 */
export const pytorch_pfn_extras = mkPackage(
  nixRaw`pkgs.python2Packages.pytorch-pfn-extras`,
  "Supplementary components to accelerate research and development in PyTorch",
);

/**
 * Python library to handle device information from Traccar
 */
export const pytraccar = mkPackage(
  nixRaw`pkgs.python2Packages.pytraccar`,
  "Python library to handle device information from Traccar",
);

/**
 * Python package to communicate with the IKEA Trådfri ZigBee Gateway
 */
export const pytradfri = mkPackage(
  nixRaw`pkgs.python2Packages.pytradfri`,
  "Python package to communicate with the IKEA Trådfri ZigBee Gateway",
);

/**
 * Library to get data from the Swedish Transport Administration (Trafikverket) API
 */
export const pytrafikverket = mkPackage(
  nixRaw`pkgs.python2Packages.pytrafikverket`,
  "Library to get data from the Swedish Transport Administration (Trafikverket) API",
);

/**
 * Python module to access Transport NSW information
 */
export const pytransportnsw = mkPackage(
  nixRaw`pkgs.python2Packages.pytransportnsw`,
  "Python module to access Transport NSW information",
);

/**
 * Python module to access Transport NSW information
 */
export const pytransportnswv2 = mkPackage(
  nixRaw`pkgs.python2Packages.pytransportnswv2`,
  "Python module to access Transport NSW information",
);

/**
 * Pseudo API for Google Trends
 */
export const pytrends = mkPackage(
  nixRaw`pkgs.python2Packages.pytrends`,
  "Pseudo API for Google Trends",
);

/**
 * A library for fast IP address lookup in Python
 */
export const pytricia = mkPackage(
  nixRaw`pkgs.python2Packages.pytricia`,
  "A library for fast IP address lookup in Python",
);

/**
 * Offline text-to-speech synthesis library
 */
export const pyttsx3 = mkPackage(
  nixRaw`pkgs.python2Packages.pyttsx3`,
  "Offline text-to-speech synthesis library",
);

/**
 * Python 3 library for downloading YouTube Videos
 */
export const pytube = mkPackage(
  nixRaw`pkgs.python2Packages.pytube`,
  "Python 3 library for downloading YouTube Videos",
);

/**
 * Linux TUN/TAP wrapper for Python
 */
export const pytun = mkPackage(
  nixRaw`pkgs.python2Packages.pytun`,
  "Linux TUN/TAP wrapper for Python",
);

/**
 * A Python wrapper of libjpeg-turbo for decoding and encoding JPEG image
 */
export const pyturbojpeg = mkPackage(
  nixRaw`pkgs.python2Packages.pyturbojpeg`,
  "A Python wrapper of libjpeg-turbo for decoding and encoding JPEG image",
);

/**
 * Set of tweening / easing functions implemented in Python
 */
export const pytweening = mkPackage(
  nixRaw`pkgs.python2Packages.pytweening`,
  "Set of tweening / easing functions implemented in Python",
);

/**
 * World timezone definitions, modern and historical
 */
export const pytz = mkPackage(
  nixRaw`pkgs.python2Packages.pytz`,
  "World timezone definitions, modern and historical",
);

/**
 * Shims to make deprecation of pytz easier
 */
export const pytz_deprecation_shim = mkPackage(
  nixRaw`pkgs.python2Packages.pytz-deprecation-shim`,
  "Shims to make deprecation of pytz easier",
);

/**
 * Timezone database for Python
 */
export const pytzdata = mkPackage(
  nixRaw`pkgs.python2Packages.pytzdata`,
  "Timezone database for Python",
);

/**
 * U2F host library for interacting with a U2F device over USB
 */
export const pyu2f = mkPackage(
  nixRaw`pkgs.python2Packages.pyu2f`,
  "U2F host library for interacting with a U2F device over USB",
);

/**
 * A full-featured implementation of the UAVCAN protocol stack
 */
export const pyuavcan = mkPackage(
  nixRaw`pkgs.python2Packages.pyuavcan`,
  "A full-featured implementation of the UAVCAN protocol stack",
);

/**
 * A Python implementation of the Unicode Collation Algorithm
 */
export const pyuca = mkPackage(
  nixRaw`pkgs.python2Packages.pyuca`,
  "A Python implementation of the Unicode Collation Algorithm",
);

/**
 * Pure Python libudev binding
 */
export const pyudev = mkPackage(
  nixRaw`pkgs.python2Packages.pyudev`,
  "Pure Python libudev binding",
);

/**
 * Python library for Unbound, the validating, recursive, and caching DNS resolver
 */
export const pyunbound = mkPackage(
  nixRaw`pkgs.python2Packages.pyunbound`,
  "Python library for Unbound, the validating, recursive, and caching DNS resolver",
);

/**
 * API towards Ubiquity Networks UniFi controller
 */
export const pyunifi = mkPackage(
  nixRaw`pkgs.python2Packages.pyunifi`,
  "API towards Ubiquity Networks UniFi controller",
);

/**
 * Library for interacting with the Unifi Protect API
 */
export const pyunifiprotect = mkPackage(
  nixRaw`pkgs.python2Packages.pyunifiprotect`,
  "Library for interacting with the Unifi Protect API",
);

/**
 * Unpack archive files in python
 */
export const pyunpack = mkPackage(
  nixRaw`pkgs.python2Packages.pyunpack`,
  "Unpack archive files in python",
);

/**
 * Package to update stuff
 */
export const pyupdate = mkPackage(
  nixRaw`pkgs.python2Packages.pyupdate`,
  "Package to update stuff",
);

/**
 * Tool to automatically upgrade syntax for newer versions of the language
 */
export const pyupgrade = mkPackage(
  nixRaw`pkgs.python2Packages.pyupgrade`,
  "Tool to automatically upgrade syntax for newer versions of the language",
);

/**
 * Python API wrapper for Uptime Robot
 */
export const pyuptimerobot = mkPackage(
  nixRaw`pkgs.python2Packages.pyuptimerobot`,
  "Python API wrapper for Uptime Robot",
);

/**
 * Python USB access module (wraps libusb 1.0)
 */
export const pyusb = mkPackage(
  nixRaw`pkgs.python2Packages.pyusb`,
  "Python USB access module (wraps libusb 1.0)",
);

/**
 * Giving you a random User-Agent Header
 */
export const pyuseragents = mkPackage(
  nixRaw`pkgs.python2Packages.pyuseragents`,
  "Giving you a random User-Agent Header",
);

/**
 * Pyutil, a collection of mature utilities for Python programmers
 */
export const pyutil = mkPackage(
  nixRaw`pkgs.python2Packages.pyutil`,
  "Pyutil, a collection of mature utilities for Python programmers",
);

/**
 * PyUtilib: A collection of Python utilities
 */
export const pyutilib = mkPackage(
  nixRaw`pkgs.python2Packages.pyutilib`,
  "PyUtilib: A collection of Python utilities",
);

/**
 * Python interface for libuv
 */
export const pyuv = mkPackage(
  nixRaw`pkgs.python2Packages.pyuv`,
  "Python interface for libuv",
);

/**
 * Python package for writing Value Change Dump (VCD) files
 */
export const pyvcd = mkPackage(
  nixRaw`pkgs.python2Packages.pyvcd`,
  "Python package for writing Value Change Dump (VCD) files",
);

/**
 * Python library to control devices via the Vera hub
 */
export const pyvera = mkPackage(
  nixRaw`pkgs.python2Packages.pyvera`,
  "Python library to control devices via the Vera hub",
);

/**
 * Python-based Hardware Design Processing Toolkit for Verilog HDL
 */
export const pyverilog = mkPackage(
  nixRaw`pkgs.python2Packages.pyverilog`,
  "Python-based Hardware Design Processing Toolkit for Verilog HDL",
);

/**
 * Python library to communicate with the VersaSense API
 */
export const pyversasense = mkPackage(
  nixRaw`pkgs.python2Packages.pyversasense`,
  "Python library to communicate with the VersaSense API",
);

/**
 * Python library to manage Etekcity Devices and Levoit Air Purifier
 */
export const pyvesync = mkPackage(
  nixRaw`pkgs.python2Packages.pyvesync`,
  "Python library to manage Etekcity Devices and Levoit Air Purifier",
);

/**
 * Python interface to libVEX and VEX IR
 */
export const pyvex = mkPackage(
  nixRaw`pkgs.python2Packages.pyvex`,
  "Python interface to libVEX and VEX IR",
);

/**
 * Python Library to access Viessmann ViCare API
 */
export const pyvicare = mkPackage(
  nixRaw`pkgs.python2Packages.pyvicare`,
  "Python Library to access Viessmann ViCare API",
);

/**
 * A python wrapper for libvips
 */
export const pyvips = mkPackage(
  nixRaw`pkgs.python2Packages.pyvips`,
  "A python wrapper for libvips",
);

/**
 * Python wrapper for Xvfb, Xephyr and Xvnc
 */
export const pyvirtualdisplay = mkPackage(
  nixRaw`pkgs.python2Packages.pyvirtualdisplay`,
  "Python wrapper for Xvfb, Xephyr and Xvnc",
);

/**
 * Python package for creating and visualizing interactive network graphs
 */
export const pyvis = mkPackage(
  nixRaw`pkgs.python2Packages.pyvis`,
  "Python package for creating and visualizing interactive network graphs",
);

/**
 * Python package for support of the Virtual Instrument Software Architecture (VISA)
 */
export const pyvisa = mkPackage(
  nixRaw`pkgs.python2Packages.pyvisa`,
  "Python package for support of the Virtual Instrument Software Architecture (VISA)",
);

/**
 * Module that implements the Virtual Instrument Software Architecture
 */
export const pyvisa_py = mkPackage(
  nixRaw`pkgs.python2Packages.pyvisa-py`,
  "Module that implements the Virtual Instrument Software Architecture",
);

/**
 * Simulated backend for PyVISA implementing TCPIP, GPIB, RS232, and USB resources
 */
export const pyvisa_sim = mkPackage(
  nixRaw`pkgs.python2Packages.pyvisa-sim`,
  "Simulated backend for PyVISA implementing TCPIP, GPIB, RS232, and USB resources",
);

/**
 * Easier Pythonic interface to VTK
 */
export const pyvista = mkPackage(
  nixRaw`pkgs.python2Packages.pyvista`,
  "Easier Pythonic interface to VTK",
);

/**
 * Launch jobs, organize the output, and dissect the results
 */
export const pyviz_comms = mkPackage(
  nixRaw`pkgs.python2Packages.pyviz-comms`,
  "Launch jobs, organize the output, and dissect the results",
);

/**
 * Python client for Vizio SmartCast
 */
export const pyvizio = mkPackage(
  nixRaw`pkgs.python2Packages.pyvizio`,
  "Python client for Vizio SmartCast",
);

/**
 * Python client to work with Velux units
 */
export const pyvlx = mkPackage(
  nixRaw`pkgs.python2Packages.pyvlx`,
  "Python client to work with Velux units",
);

/**
 * Python SDK for the VMware vSphere API that allows you to manage ESX, ESXi, and vCenter
 */
export const pyvmomi = mkPackage(
  nixRaw`pkgs.python2Packages.pyvmomi`,
  "Python SDK for the VMware vSphere API that allows you to manage ESX, ESXi, and vCenter",
);

/**
 * Astropy affiliated package for accessing Virtual Observatory data and services
 */
export const pyvo = mkPackage(
  nixRaw`pkgs.python2Packages.pyvo`,
  "Astropy affiliated package for accessing Virtual Observatory data and services",
);

/**
 * Python module to control Volumio
 */
export const pyvolumio = mkPackage(
  nixRaw`pkgs.python2Packages.pyvolumio`,
  "Python module to control Volumio",
);

/**
 * 2D and 3D Voronoi tessellations: a python entry point for the voro++ library
 */
export const pyvoro = mkPackage(
  nixRaw`pkgs.python2Packages.pyvoro`,
  "2D and 3D Voronoi tessellations: a python entry point for the voro++ library",
);

/**
 * Generate and change colorschemes on the fly. A 'wal' rewrite in Python 3
 */
export const pywal = mkPackage(
  nixRaw`pkgs.python2Packages.pywal`,
  "Generate and change colorschemes on the fly. A 'wal' rewrite in Python 3",
);

/**
 * Watchman client for Python
 */
export const pywatchman = mkPackage(
  nixRaw`pkgs.python2Packages.pywatchman`,
  "Watchman client for Python",
);

/**
 * Library to communicate with Waterkotte heatpumps
 */
export const pywaterkotte = mkPackage(
  nixRaw`pkgs.python2Packages.pywaterkotte`,
  "Library to communicate with Waterkotte heatpumps",
);

/**
 * Wavelet transform module
 */
export const pywavelets = mkPackage(
  nixRaw`pkgs.python2Packages.pywavelets`,
  "Wavelet transform module",
);

/**
 * Python bindings to wayland using cffi
 */
export const pywayland = mkPackage(
  nixRaw`pkgs.python2Packages.pywayland`,
  "Python bindings to wayland using cffi",
);

/**
 * Module for calculating WAZE routes and travel times
 */
export const pywaze = mkPackage(
  nixRaw`pkgs.python2Packages.pywaze`,
  "Module for calculating WAZE routes and travel times",
);

/**
 * Support for the WBEM standard for systems management
 */
export const pywbem = mkPackage(
  nixRaw`pkgs.python2Packages.pywbem`,
  "Support for the WBEM standard for systems management",
);

/**
 * Python module to get data from WeatherFlow Weather Stations
 */
export const pyweatherflowrest = mkPackage(
  nixRaw`pkgs.python2Packages.pyweatherflowrest`,
  "Python module to get data from WeatherFlow Weather Stations",
);

/**
 * Library to receive UDP Packets from Weatherflow Weatherstations
 */
export const pyweatherflowudp = mkPackage(
  nixRaw`pkgs.python2Packages.pyweatherflowudp`,
  "Library to receive UDP Packets from Weatherflow Weatherstations",
);

/**
 * Webpush Data encryption library for Python
 */
export const pywebpush = mkPackage(
  nixRaw`pkgs.python2Packages.pywebpush`,
  "Webpush Data encryption library for Python",
);

/**
 * Lightweight cross-platform wrapper around a webview
 */
export const pywebview = mkPackage(
  nixRaw`pkgs.python2Packages.pywebview`,
  "Lightweight cross-platform wrapper around a webview",
);

/**
 * Python module to discover and control WeMo devices
 */
export const pywemo = mkPackage(
  nixRaw`pkgs.python2Packages.pywemo`,
  "Python module to discover and control WeMo devices",
);

/**
 * Module for PowerSploit's PowerView support
 */
export const pywerview = mkPackage(
  nixRaw`pkgs.python2Packages.pywerview`,
  "Module for PowerSploit's PowerView support",
);

/**
 * Python wrapper for wavefront alignment using WFA2-lib
 */
export const pywfa = mkPackage(
  nixRaw`pkgs.python2Packages.pywfa`,
  "Python wrapper for wavefront alignment using WFA2-lib",
);

/**
 * Python API for WiLight device
 */
export const pywilight = mkPackage(
  nixRaw`pkgs.python2Packages.pywilight`,
  "Python API for WiLight device",
);

/**
 * Python library for Windows Remote Management
 */
export const pywinrm = mkPackage(
  nixRaw`pkgs.python2Packages.pywinrm`,
  "Python library for Windows Remote Management",
);

/**
 * Python connector for WiZ light bulbs
 */
export const pywizlight = mkPackage(
  nixRaw`pkgs.python2Packages.pywizlight`,
  "Python connector for WiZ light bulbs",
);

/**
 * Python bindings to wlroots using cffi
 */
export const pywlroots = mkPackage(
  nixRaw`pkgs.python2Packages.pywlroots`,
  "Python bindings to wlroots using cffi",
);

/**
 * PyWorld is a Python wrapper for WORLD vocoder
 */
export const pyworld = mkPackage(
  nixRaw`pkgs.python2Packages.pyworld`,
  "PyWorld is a Python wrapper for WORLD vocoder",
);

/**
 * Library to interface with WS66i 6-zone amplifier
 */
export const pyws66i = mkPackage(
  nixRaw`pkgs.python2Packages.pyws66i`,
  "Library to interface with WS66i 6-zone amplifier",
);

/**
 * Python package for the generation of PostScript, PDF, and SVG files
 */
export const pyx = mkPackage(
  nixRaw`pkgs.python2Packages.pyx`,
  "Python package for the generation of PostScript, PDF, and SVG files",
);

/**
 * A Python extension module which gives access to the extended attributes for filesystem objects available in some operating systems
 */
export const pyxattr = mkPackage(
  nixRaw`pkgs.python2Packages.pyxattr`,
  "A Python extension module which gives access to the extended attributes for filesystem objects available in some operating systems",
);

/**
 * Python XML Schema Bindings
 */
export const pyxb = mkPackage(
  nixRaw`pkgs.python2Packages.pyxb`,
  "Python XML Schema Bindings",
);

/**
 * Library to work with XBE files
 */
export const pyxbe = mkPackage(
  nixRaw`pkgs.python2Packages.pyxbe`,
  "Library to work with XBE files",
);

/**
 * Contains implementations of freedesktop.org standards
 */
export const pyxdg = mkPackage(
  nixRaw`pkgs.python2Packages.pyxdg`,
  "Contains implementations of freedesktop.org standards",
);

/**
 * Python wrapper for Xeoma web server API
 */
export const pyxeoma = mkPackage(
  nixRaw`pkgs.python2Packages.pyxeoma`,
  "Python wrapper for Xeoma web server API",
);

/**
 * Python library to communicate with the Xiaomi Gateway
 */
export const pyxiaomigateway = mkPackage(
  nixRaw`pkgs.python2Packages.pyxiaomigateway`,
  "Python library to communicate with the Xiaomi Gateway",
);

/**
 * Python 3 port of pyxl for writing structured and reusable inline HTML
 */
export const pyxl3 = mkPackage(
  nixRaw`pkgs.python2Packages.pyxl3`,
  "Python 3 port of pyxl for writing structured and reusable inline HTML",
);

/**
 * Excel 2007-2010 Binary Workbook (xlsb) parser
 */
export const pyxlsb = mkPackage(
  nixRaw`pkgs.python2Packages.pyxlsb`,
  "Excel 2007-2010 Binary Workbook (xlsb) parser",
);

/**
 * Python API to XNAT
 */
export const pyxnat = mkPackage(
  nixRaw`pkgs.python2Packages.pyxnat`,
  "Python API to XNAT",
);

/**
 * The next generation YAML parser and emitter for Python
 */
export const pyyaml = mkPackage(
  nixRaw`pkgs.python2Packages.pyyaml`,
  "The next generation YAML parser and emitter for Python",
);

/**
 * Custom YAML tag for referencing environment variables
 */
export const pyyaml_env_tag = mkPackage(
  nixRaw`pkgs.python2Packages.pyyaml-env-tag`,
  "Custom YAML tag for referencing environment variables",
);

/**
 * Extending PyYAML with a custom constructor for including YAML files within YAML files
 */
export const pyyaml_include = mkPackage(
  nixRaw`pkgs.python2Packages.pyyaml-include`,
  "Extending PyYAML with a custom constructor for including YAML files within YAML files",
);

/**
 * Module for interacting with the Yardian irrigation controller
 */
export const pyyardian = mkPackage(
  nixRaw`pkgs.python2Packages.pyyardian`,
  "Module for interacting with the Yardian irrigation controller",
);

/**
 * Read one-dimensional barcodes and QR codes from Python using the zbar library.
 */
export const pyzbar = mkPackage(
  nixRaw`pkgs.python2Packages.pyzbar`,
  "Read one-dimensional barcodes and QR codes from Python using the zbar library.",
);

/**
 * Python library to control Zerproc Bluetooth LED smart string lights
 */
export const pyzerproc = mkPackage(
  nixRaw`pkgs.python2Packages.pyzerproc`,
  "Python library to control Zerproc Bluetooth LED smart string lights",
);

/**
 * Python zipfile extensions
 */
export const pyzipper = mkPackage(
  nixRaw`pkgs.python2Packages.pyzipper`,
  "Python zipfile extensions",
);

/**
 * Python bindings for ØMQ
 */
export const pyzmq = mkPackage(
  nixRaw`pkgs.python2Packages.pyzmq`,
  "Python bindings for ØMQ",
);

/**
 * Library for generating random data and sentences in german language
 */
export const pyzufall = mkPackage(
  nixRaw`pkgs.python2Packages.pyzufall`,
  "Library for generating random data and sentences in german language",
);

/**
 * Allows coroutines to be used in PyQt/PySide applications by providing an implementation of the PEP 3156 event-loop
 */
export const qasync = mkPackage(
  nixRaw`pkgs.python2Packages.qasync`,
  "Allows coroutines to be used in PyQt/PySide applications by providing an implementation of the PEP 3156 event-loop",
);

/**
 * Python client implementation for qBittorrent's Web API
 */
export const qbittorrent_api = mkPackage(
  nixRaw`pkgs.python2Packages.qbittorrent-api`,
  "Python client implementation for qBittorrent's Web API",
);

/**
 * Periodic table, physical constants and molecule parsing for quantum chemistry
 */
export const qcelemental = mkPackage(
  nixRaw`pkgs.python2Packages.qcelemental`,
  "Periodic table, physical constants and molecule parsing for quantum chemistry",
);

/**
 * Quantum chemistry program executor and IO standardizer (QCSchema) for quantum chemistry
 */
export const qcengine = mkPackage(
  nixRaw`pkgs.python2Packages.qcengine`,
  "Quantum chemistry program executor and IO standardizer (QCSchema) for quantum chemistry",
);

/**
 * Python-based data acquisition framework
 */
export const qcodes = mkPackage(
  nixRaw`pkgs.python2Packages.qcodes`,
  "Python-based data acquisition framework",
);

/**
 * User contributed drivers for QCoDeS
 */
export const qcodes_contrib_drivers = mkPackage(
  nixRaw`pkgs.python2Packages.qcodes-contrib-drivers`,
  "User contributed drivers for QCoDeS",
);

/**
 * Features previously in QCoDeS
 */
export const qcodes_loop = mkPackage(
  nixRaw`pkgs.python2Packages.qcodes-loop`,
  "Features previously in QCoDeS",
);

/**
 * Python library for accessing the Rigetti QCS API
 */
export const qcs_api_client = mkPackage(
  nixRaw`pkgs.python2Packages.qcs-api-client`,
  "Python library for accessing the Rigetti QCS API",
);

/**
 * A dark stylesheet for Python and Qt applications
 */
export const qdarkstyle = mkPackage(
  nixRaw`pkgs.python2Packages.qdarkstyle`,
  "A dark stylesheet for Python and Qt applications",
);

/**
 * A free LDL factorization routine
 */
export const qdldl = mkPackage(
  nixRaw`pkgs.python2Packages.qdldl`,
  "A free LDL factorization routine",
);

/**
 * Python client for Qdrant vector search engine
 */
export const qdrant_client = mkPackage(
  nixRaw`pkgs.python2Packages.qdrant-client`,
  "Python client for Qdrant vector search engine",
);

/**
 * A Python module that provides the tools you need to authenticate with, and use the Qubole Data Service API
 */
export const qds_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.qds-sdk`,
  "A Python module that provides the tools you need to authenticate with, and use the Qubole Data Service API",
);

/**
 * An interactive grid for sorting, filtering, and editing DataFrames in Jupyter notebooks
 */
export const qgrid = mkPackage(
  nixRaw`pkgs.python2Packages.qgrid`,
  "An interactive grid for sorting, filtering, and editing DataFrames in Jupyter notebooks",
);

/**
 * Qiling Advanced Binary Emulation Framework
 */
export const qiling = mkPackage(
  nixRaw`pkgs.python2Packages.qiling`,
  "Qiling Advanced Binary Emulation Framework",
);

/**
 * A small python extension for quickly converting between QImages and numpy.ndarrays (in both directions)
 */
export const qimage2ndarray = mkPackage(
  nixRaw`pkgs.python2Packages.qimage2ndarray`,
  "A small python extension for quickly converting between QImages and numpy.ndarrays (in both directions)",
);

/**
 * Library for Qingping BLE devices
 */
export const qingping_ble = mkPackage(
  nixRaw`pkgs.python2Packages.qingping-ble`,
  "Library for Qingping BLE devices",
);

/**
 * Software for developing quantum computing programs
 */
export const qiskit = mkPackage(
  nixRaw`pkgs.python2Packages.qiskit`,
  "Software for developing quantum computing programs",
);

/**
 * High performance simulators for Qiskit
 */
export const qiskit_aer = mkPackage(
  nixRaw`pkgs.python2Packages.qiskit-aer`,
  "High performance simulators for Qiskit",
);

/**
 * Software for developing quantum computing programs
 */
export const qiskit_finance = mkPackage(
  nixRaw`pkgs.python2Packages.qiskit-finance`,
  "Software for developing quantum computing programs",
);

/**
 * Qiskit provider for accessing the quantum devices and simulators at IBMQ
 */
export const qiskit_ibmq_provider = mkPackage(
  nixRaw`pkgs.python2Packages.qiskit-ibmq-provider`,
  "Qiskit provider for accessing the quantum devices and simulators at IBMQ",
);

/**
 * Qiskit tools for quantum hardware verification, noise characterization, and error correction
 */
export const qiskit_ignis = mkPackage(
  nixRaw`pkgs.python2Packages.qiskit-ignis`,
  "Qiskit tools for quantum hardware verification, noise characterization, and error correction",
);

/**
 * Software for developing quantum computing programs
 */
export const qiskit_machine_learning = mkPackage(
  nixRaw`pkgs.python2Packages.qiskit-machine-learning`,
  "Software for developing quantum computing programs",
);

/**
 * Software for developing quantum computing programs
 */
export const qiskit_nature = mkPackage(
  nixRaw`pkgs.python2Packages.qiskit-nature`,
  "Software for developing quantum computing programs",
);

/**
 * Software for developing quantum computing programs
 */
export const qiskit_optimization = mkPackage(
  nixRaw`pkgs.python2Packages.qiskit-optimization`,
  "Software for developing quantum computing programs",
);

/**
 * Dictionary wrapper for quick access to deeply nested keys
 */
export const qmk_dotty_dict = mkPackage(
  nixRaw`pkgs.python2Packages.qmk-dotty-dict`,
  "Dictionary wrapper for quick access to deeply nested keys",
);

/**
 * Python library to interact with the QNAP QSW API
 */
export const qnap_qsw = mkPackage(
  nixRaw`pkgs.python2Packages.qnap-qsw`,
  "Python library to interact with the QNAP QSW API",
);

/**
 * Python API for obtaining QNAP NAS system stats
 */
export const qnapstats = mkPackage(
  nixRaw`pkgs.python2Packages.qnapstats`,
  "Python API for obtaining QNAP NAS system stats",
);

/**
 * A page-based viewer widget for Qt5/PyQt5
 */
export const qpageview = mkPackage(
  nixRaw`pkgs.python2Packages.qpageview`,
  "A page-based viewer widget for Qt5/PyQt5",
);

/**
 * Quadratic programming solvers in Python with a unified API
 */
export const qpsolvers = mkPackage(
  nixRaw`pkgs.python2Packages.qpsolvers`,
  "Quadratic programming solvers in Python with a unified API",
);

/**
 * Python QR Code image generator
 */
export const qrcode = mkPackage(
  nixRaw`pkgs.python2Packages.qrcode`,
  "Python QR Code image generator",
);

/**
 * Twisted and PyQt5/qtpy eventloop integration base
 */
export const qreactor = mkPackage(
  nixRaw`pkgs.python2Packages.qreactor`,
  "Twisted and PyQt5/qtpy eventloop integration base",
);

/**
 * A Python binding to QScintilla, Qt based text editing control
 */
export const qscintilla = mkPackage(
  nixRaw`pkgs.python2Packages.qscintilla`,
  "A Python binding to QScintilla, Qt based text editing control",
);

/**
 * A Python binding to QScintilla, Qt based text editing control
 */
export const qscintilla_qt5 = mkPackage(
  nixRaw`pkgs.python2Packages.qscintilla-qt5`,
  "A Python binding to QScintilla, Qt based text editing control",
);

/**
 * Qt stylesheet generation utility for PyQt/PySide
 */
export const qstylizer = mkPackage(
  nixRaw`pkgs.python2Packages.qstylizer`,
  "Qt stylesheet generation utility for PyQt/PySide",
);

/**
 * Twisted Qt Integration
 */
export const qt5reactor = mkPackage(
  nixRaw`pkgs.python2Packages.qt5reactor`,
  "Twisted Qt Integration",
);

/**
 * Material inspired stylesheet for PySide2, PySide6, PyQt5 and PyQt6
 */
export const qt_material = mkPackage(
  nixRaw`pkgs.python2Packages.qt-material`,
  "Material inspired stylesheet for PySide2, PySide6, PyQt5 and PyQt6",
);

/**
 * Iconic fonts in PyQt and PySide applications
 */
export const qtawesome = mkPackage(
  nixRaw`pkgs.python2Packages.qtawesome`,
  "Iconic fonts in PyQt and PySide applications",
);

/**
 * Jupyter Qt console
 */
export const qtconsole = mkPackage(
  nixRaw`pkgs.python2Packages.qtconsole`,
  "Jupyter Qt console",
);

/**
 * A small, flexible, scriptable tiling window manager written in Python
 */
export const qtile = mkPackage(
  nixRaw`pkgs.python2Packages.qtile`,
  "A small, flexible, scriptable tiling window manager written in Python",
);

/**
 * Extra modules and widgets for the Qtile tiling window manager
 */
export const qtile_extras = mkPackage(
  nixRaw`pkgs.python2Packages.qtile-extras`,
  "Extra modules and widgets for the Qtile tiling window manager",
);

/**
 * Abstraction layer for PyQt5/PyQt6/PySide2/PySide6
 */
export const qtpy = mkPackage(
  nixRaw`pkgs.python2Packages.qtpy`,
  "Abstraction layer for PyQt5/PyQt6/PySide2/PySide6",
);

/**
 * Quadratic Programming Solver
 */
export const quadprog = mkPackage(
  nixRaw`pkgs.python2Packages.quadprog`,
  "Quadratic Programming Solver",
);

/**
 * Python SDK for interacting with the Qualys API
 */
export const qualysclient = mkPackage(
  nixRaw`pkgs.python2Packages.qualysclient`,
  "Python SDK for interacting with the Qualys API",
);

/**
 * Implementation of the PEP 3156 event-loop (asyncio) api using the Qt Event-Loop
 */
export const quamash = mkPackage(
  nixRaw`pkgs.python2Packages.quamash`,
  "Implementation of the PEP 3156 event-loop (asyncio) api using the Qt Event-Loop",
);

/**
 * Quandl Python client library
 */
export const quandl = mkPackage(
  nixRaw`pkgs.python2Packages.quandl`,
  "Quandl Python client library",
);

/**
 * Python Implementation of Graham Cormode and S. Muthukrishnan's Effective Computation of Biased Quantiles over Data Streams in ICDE'05
 */
export const quantile_python = mkPackage(
  nixRaw`pkgs.python2Packages.quantile-python`,
  "Python Implementation of Graham Cormode and S. Muthukrishnan's Effective Computation of Biased Quantiles over Data Streams in ICDE'05",
);

/**
 * Module for physical quantities (numbers with units)
 */
export const quantiphy = mkPackage(
  nixRaw`pkgs.python2Packages.quantiphy`,
  "Module for physical quantities (numbers with units)",
);

/**
 * QuantiPhy support for evals in-line
 */
export const quantiphy_eval = mkPackage(
  nixRaw`pkgs.python2Packages.quantiphy-eval`,
  "QuantiPhy support for evals in-line",
);

/**
 * Quantities is designed to handle arithmetic and conversions of physical quantities
 */
export const quantities = mkPackage(
  nixRaw`pkgs.python2Packages.quantities`,
  "Quantities is designed to handle arithmetic and conversions of physical quantities",
);

/**
 * Library for unit extraction - fork of quantulum for python3
 */
export const quantulum3 = mkPackage(
  nixRaw`pkgs.python2Packages.quantulum3`,
  "Library for unit extraction - fork of quantulum for python3",
);

/**
 * Python library for interacting with Verizon Fios Quantum gateway devices
 */
export const quantum_gateway = mkPackage(
  nixRaw`pkgs.python2Packages.quantum-gateway`,
  "Python library for interacting with Verizon Fios Quantum gateway devices",
);

/**
 * An async Python micro framework for building web applications
 */
export const quart = mkPackage(
  nixRaw`pkgs.python2Packages.quart`,
  "An async Python micro framework for building web applications",
);

/**
 * Quart-CORS is an extension for Quart to enable and control Cross Origin Resource Sharing, CORS
 */
export const quart_cors = mkPackage(
  nixRaw`pkgs.python2Packages.quart-cors`,
  "Quart-CORS is an extension for Quart to enable and control Cross Origin Resource Sharing, CORS",
);

/**
 * A package add built-in support for quaternions to numpy
 */
export const quaternion = mkPackage(
  nixRaw`pkgs.python2Packages.quaternion`,
  "A package add built-in support for quaternions to numpy",
);

/**
 * QUick and DIrty Domain Adaptation
 */
export const qudida = mkPackage(
  nixRaw`pkgs.python2Packages.qudida`,
  "QUick and DIrty Domain Adaptation",
);

/**
 * QueryString parser for Python/Django that correctly handles nested dictionaries
 */
export const querystring_parser = mkPackage(
  nixRaw`pkgs.python2Packages.querystring_parser`,
  "QueryString parser for Python/Django that correctly handles nested dictionaries",
);

/**
 * Python library to build command line user prompts
 */
export const questionary = mkPackage(
  nixRaw`pkgs.python2Packages.questionary`,
  "Python library to build command line user prompts",
);

/**
 * A collection of persistent (disk-based) queues for Python
 */
export const queuelib = mkPackage(
  nixRaw`pkgs.python2Packages.queuelib`,
  "A collection of persistent (disk-based) queues for Python",
);

/**
 * Open-source software for simulating the dynamics of closed and open quantum systems
 */
export const qutip = mkPackage(
  nixRaw`pkgs.python2Packages.qutip`,
  "Open-source software for simulating the dynamics of closed and open quantum systems",
);

/**
 * Interact with radare2
 */
export const r2pipe = mkPackage(
  nixRaw`pkgs.python2Packages.r2pipe`,
  "Interact with radare2",
);

/**
 * Python client for Rachio Irrigation controller
 */
export const rachiopy = mkPackage(
  nixRaw`pkgs.python2Packages.rachiopy`,
  "Python client for Rachio Irrigation controller",
);

/**
 * A 21 century R console
 */
export const radian = mkPackage(
  nixRaw`pkgs.python2Packages.radian`,
  "A 21 century R console",
);

/**
 * Integrate InfCloud into Radicale's web interface
 */
export const radicale_infcloud = mkPackage(
  nixRaw`pkgs.python2Packages.radicale_infcloud`,
  "Integrate InfCloud into Radicale's web interface",
);

/**
 * Tools for Beam IO and Manipulation
 */
export const radio_beam = mkPackage(
  nixRaw`pkgs.python2Packages.radio_beam`,
  "Tools for Beam IO and Manipulation",
);

/**
 * Asynchronous Python client for the Radio Browser API
 */
export const radios = mkPackage(
  nixRaw`pkgs.python2Packages.radios`,
  "Asynchronous Python client for the Radio Browser API",
);

/**
 * Python library for Wifi Radiothermostat
 */
export const radiotherm = mkPackage(
  nixRaw`pkgs.python2Packages.radiotherm`,
  "Python library for Wifi Radiothermostat",
);

/**
 * Behaviour-Driven-Development tool for python
 */
export const radish_bdd = mkPackage(
  nixRaw`pkgs.python2Packages.radish-bdd`,
  "Behaviour-Driven-Development tool for python",
);

/**
 * Various code metrics for Python code
 */
export const radon = mkPackage(
  nixRaw`pkgs.python2Packages.radon`,
  "Various code metrics for Python code",
);

/**
 * Module to generate SVG railroad syntax diagrams
 */
export const railroad_diagrams = mkPackage(
  nixRaw`pkgs.python2Packages.railroad-diagrams`,
  "Module to generate SVG railroad syntax diagrams",
);

/**
 * Streaming command-line twitter client
 */
export const rainbowstream = mkPackage(
  nixRaw`pkgs.python2Packages.rainbowstream`,
  "Streaming command-line twitter client",
);

/**
 * Module to interact with Melnor RainCloud Smart Garden Watering Irrigation Timer
 */
export const raincloudy = mkPackage(
  nixRaw`pkgs.python2Packages.raincloudy`,
  "Module to interact with Melnor RainCloud Smart Garden Watering Irrigation Timer",
);

/**
 * A Python RAML parser.
 */
export const ramlfications = mkPackage(
  nixRaw`pkgs.python2Packages.ramlfications`,
  "A Python RAML parser.",
);

/**
 * Python 3 compatible Python 2 `random` Module
 */
export const random2 = mkPackage(
  nixRaw`pkgs.python2Packages.random2`,
  "Python 3 compatible Python 2 `random` Module",
);

/**
 * A package provides integer types that have a specific range of valid values
 */
export const range_typed_integers = mkPackage(
  nixRaw`pkgs.python2Packages.range-typed-integers`,
  "A package provides integer types that have a specific range of valid values",
);

/**
 * SimpleHTTPServer with support for Range requests
 */
export const rangehttpserver = mkPackage(
  nixRaw`pkgs.python2Packages.rangehttpserver`,
  "SimpleHTTPServer with support for Range requests",
);

/**
 * A Collection of BM25 Algorithms in Python
 */
export const rank_bm25 = mkPackage(
  nixRaw`pkgs.python2Packages.rank_bm25`,
  "A Collection of BM25 Algorithms in Python",
);

/**
 * Rapid fuzzy string matching
 */
export const rapidfuzz = mkPackage(
  nixRaw`pkgs.python2Packages.rapidfuzz`,
  "Rapid fuzzy string matching",
);

/**
 * C-API of RapidFuzz, which can be used to extend RapidFuzz from separate packages
 */
export const rapidfuzz_capi = mkPackage(
  nixRaw`pkgs.python2Packages.rapidfuzz-capi`,
  "C-API of RapidFuzz, which can be used to extend RapidFuzz from separate packages",
);

/**
 * Python library for parallel decompression and seeking within compressed gzip files
 */
export const rapidgzip = mkPackage(
  nixRaw`pkgs.python2Packages.rapidgzip`,
  "Python library for parallel decompression and seeking within compressed gzip files",
);

/**
 * Library for RAPT Pill hydrometer BLE devices
 */
export const rapt_ble = mkPackage(
  nixRaw`pkgs.python2Packages.rapt-ble`,
  "Library for RAPT Pill hydrometer BLE devices",
);

/**
 * RAR archive reader for Python
 */
export const rarfile = mkPackage(
  nixRaw`pkgs.python2Packages.rarfile`,
  "RAR archive reader for Python",
);

/**
 * Python package to read and write geospatial raster data
 */
export const rasterio = mkPackage(
  nixRaw`pkgs.python2Packages.rasterio`,
  "Python package to read and write geospatial raster data",
);

/**
 * Mounts archives as read-only file systems by way of indexing
 */
export const ratarmount = mkPackage(
  nixRaw`pkgs.python2Packages.ratarmount`,
  "Mounts archives as read-only file systems by way of indexing",
);

/**
 * Library for accessing archives by way of indexing
 */
export const ratarmountcore = mkPackage(
  nixRaw`pkgs.python2Packages.ratarmountcore`,
  "Library for accessing archives by way of indexing",
);

/**
 * Simple Python library that limits the number of times a function can be called during a time interval
 */
export const ratelim = mkPackage(
  nixRaw`pkgs.python2Packages.ratelim`,
  "Simple Python library that limits the number of times a function can be called during a time interval",
);

/**
 * Python API Rate Limit Decorator
 */
export const ratelimit = mkPackage(
  nixRaw`pkgs.python2Packages.ratelimit`,
  "Python API Rate Limit Decorator",
);

/**
 * A Python library for OAuth 1.0/a, 2.0, and Ofly
 */
export const rauth = mkPackage(
  nixRaw`pkgs.python2Packages.rauth`,
  "A Python library for OAuth 1.0/a, 2.0, and Ofly",
);

/**
 * Legacy Python client for Sentry (getsentry.com) — replaced by sentry-python
 */
export const raven = mkPackage(
  nixRaw`pkgs.python2Packages.raven`,
  "Legacy Python client for Sentry (getsentry.com) — replaced by sentry-python",
);

/**
 * CTypes based LibRaw bindings for Python
 */
export const rawkit = mkPackage(
  nixRaw`pkgs.python2Packages.rawkit`,
  "CTypes based LibRaw bindings for Python",
);

/**
 * A unified framework for scaling AI and Python applications
 */
export const ray = mkPackage(
  nixRaw`pkgs.python2Packages.ray`,
  "A unified framework for scaling AI and Python applications",
);

/**
 * Rule-based system for Russian sentence and word tokenization
 */
export const razdel = mkPackage(
  nixRaw`pkgs.python2Packages.razdel`,
  "Rule-based system for Russian sentence and word tokenization",
);

/**
 * RBTools is a set of command line tools for working with Review Board and RBCommons
 */
export const rbtools = mkPackage(
  nixRaw`pkgs.python2Packages.rbtools`,
  "RBTools is a set of command line tools for working with Review Board and RBCommons",
);

/**
 * Interoperate R with Python
 */
export const rchitect = mkPackage(
  nixRaw`pkgs.python2Packages.rchitect`,
  "Interoperate R with Python",
);

/**
 * CSS minifier written in pure python
 */
export const rcssmin = mkPackage(
  nixRaw`pkgs.python2Packages.rcssmin`,
  "CSS minifier written in pure python",
);

/**
 * Python library for working with RDF
 */
export const rdflib = mkPackage(
  nixRaw`pkgs.python2Packages.rdflib`,
  "Python library for working with RDF",
);

/**
 * Open source toolkit for cheminformatics
 */
export const rdkit = mkPackage(
  nixRaw`pkgs.python2Packages.rdkit`,
  "Open source toolkit for cheminformatics",
);

/**
 * Show where your regex match assertion failed
 */
export const re_assert = mkPackage(
  nixRaw`pkgs.python2Packages.re-assert`,
  "Show where your regex match assertion failed",
);

/**
 * Library for composing asynchronous and event-based programs
 */
export const reactivex = mkPackage(
  nixRaw`pkgs.python2Packages.reactivex`,
  "Library for composing asynchronous and event-based programs",
);

/**
 * Fast python port of arc90's readability tool
 */
export const readability_lxml = mkPackage(
  nixRaw`pkgs.python2Packages.readability-lxml`,
  "Fast python port of arc90's readability tool",
);

/**
 * Python library to read characters and key strokes
 */
export const readchar = mkPackage(
  nixRaw`pkgs.python2Packages.readchar`,
  "Python library to read characters and key strokes",
);

/**
 * GNU Readline-like line editing module
 */
export const readlike = mkPackage(
  nixRaw`pkgs.python2Packages.readlike`,
  "GNU Readline-like line editing module",
);

/**
 * Read mdx/mdd files (repacking of readmdict from mdict-analysis)
 */
export const readmdict = mkPackage(
  nixRaw`pkgs.python2Packages.readmdict`,
  "Read mdx/mdd files (repacking of readmdict from mdict-analysis)",
);

/**
 * Readme is a library for rendering readme descriptions for Warehouse
 */
export const readme = mkPackage(
  nixRaw`pkgs.python2Packages.readme`,
  "Readme is a library for rendering readme descriptions for Warehouse",
);

/**
 * Python library for rendering readme descriptions
 */
export const readme_renderer = mkPackage(
  nixRaw`pkgs.python2Packages.readme_renderer`,
  "Python library for rendering readme descriptions",
);

/**
 * Sphinx extension for Read the Docs overrides
 */
export const readthedocs_sphinx_ext = mkPackage(
  nixRaw`pkgs.python2Packages.readthedocs-sphinx-ext`,
  "Sphinx extension for Read the Docs overrides",
);

/**
 * Advanced string matching from simple patterns
 */
export const rebulk = mkPackage(
  nixRaw`pkgs.python2Packages.rebulk`,
  "Advanced string matching from simple patterns",
);

/**
 * Python package for scraping recipes data 
 */
export const recipe_scrapers = mkPackage(
  nixRaw`pkgs.python2Packages.recipe-scrapers`,
  "Python package for scraping recipes data ",
);

/**
 * This library helps you quickly implement an interactive command-based application
 */
export const recline = mkPackage(
  nixRaw`pkgs.python2Packages.recline`,
  "This library helps you quickly implement an interactive command-based application",
);

/**
 * A docutils-compatibility bridge to CommonMark
 */
export const recommonmark = mkPackage(
  nixRaw`pkgs.python2Packages.recommonmark`,
  "A docutils-compatibility bridge to CommonMark",
);

/**
 * Library to link records in or between data sources
 */
export const recordlinkage = mkPackage(
  nixRaw`pkgs.python2Packages.recordlinkage`,
  "Library to link records in or between data sources",
);

/**
 * Repeat ICalendar events by RRULE, RDATE and EXDATE
 */
export const recurring_ical_events = mkPackage(
  nixRaw`pkgs.python2Packages.recurring-ical-events`,
  "Repeat ICalendar events by RRULE, RDATE and EXDATE",
);

/**
 * Enable recursive processing of pth files anywhere in sys.path
 */
export const recursivePthLoader = mkPackage(
  nixRaw`pkgs.python2Packages.recursivePthLoader`,
  "Enable recursive processing of pth files anywhere in sys.path",
);

/**
 * Abstraction on top of baron, a FST for python to make writing refactoring code a realistic task
 */
export const redbaron = mkPackage(
  nixRaw`pkgs.python2Packages.redbaron`,
  "Abstraction on top of baron, a FST for python to make writing refactoring code a realistic task",
);

/**
 * Python client for Redis key-value store
 */
export const redis = mkPackage(
  nixRaw`pkgs.python2Packages.redis`,
  "Python client for Redis key-value store",
);

/**
 * Object mapping, and more, for Redis and Python
 */
export const redis_om = mkPackage(
  nixRaw`pkgs.python2Packages.redis-om`,
  "Object mapping, and more, for Redis and Python",
);

/**
 * Redshift interface library
 */
export const redshift_connector = mkPackage(
  nixRaw`pkgs.python2Packages.redshift-connector`,
  "Redshift interface library",
);

/**
 * Pure-python universal errors-and-erasures Reed-Solomon Codec
 */
export const reedsolo = mkPackage(
  nixRaw`pkgs.python2Packages.reedsolo`,
  "Pure-python universal errors-and-erasures Reed-Solomon Codec",
);

/**
 * Cross-specification JSON referencing
 */
export const referencing = mkPackage(
  nixRaw`pkgs.python2Packages.referencing`,
  "Cross-specification JSON referencing",
);

/**
 * Python reflink wraps around platform specific reflink implementations
 */
export const reflink = mkPackage(
  nixRaw`pkgs.python2Packages.reflink`,
  "Python reflink wraps around platform specific reflink implementations",
);

/**
 * Python library for interacting with RainMachine smart sprinkler controllers
 */
export const regenmaschine = mkPackage(
  nixRaw`pkgs.python2Packages.regenmaschine`,
  "Python library for interacting with RainMachine smart sprinkler controllers",
);

/**
 * Alternative regular expression module, to replace re
 */
export const regex = mkPackage(
  nixRaw`pkgs.python2Packages.regex`,
  "Alternative regular expression module, to replace re",
);

/**
 * Simple manipualtion and display of spatial regions
 */
export const regional = mkPackage(
  nixRaw`pkgs.python2Packages.regional`,
  "Simple manipualtion and display of spatial regions",
);

/**
 * GPGPU algorithms for PyCUDA and PyOpenCL
 */
export const reikna = mkPackage(
  nixRaw`pkgs.python2Packages.reikna`,
  "GPGPU algorithms for PyCUDA and PyOpenCL",
);

/**
 * Nested Object Models in Python
 */
export const related = mkPackage(
  nixRaw`pkgs.python2Packages.related`,
  "Nested Object Models in Python",
);

/**
 * A templating library able to output odt and pdf files
 */
export const relatorio = mkPackage(
  nixRaw`pkgs.python2Packages.relatorio`,
  "A templating library able to output odt and pdf files",
);

/**
 * A Sphinx extension for changelog manipulation
 */
export const releases = mkPackage(
  nixRaw`pkgs.python2Packages.releases`,
  "A Sphinx extension for changelog manipulation",
);

/**
 * Convert between TOML, YAML and JSON
 */
export const remarshal = mkPackage(
  nixRaw`pkgs.python2Packages.remarshal`,
  "Convert between TOML, YAML and JSON",
);

/**
 * Pythonic, lightweight and websocket-based webui library
 */
export const remi = mkPackage(
  nixRaw`pkgs.python2Packages.remi`,
  "Pythonic, lightweight and websocket-based webui library",
);

/**
 * Remote vanilla PDB (over TCP sockets).
 */
export const remote_pdb = mkPackage(
  nixRaw`pkgs.python2Packages.remote-pdb`,
  "Remote vanilla PDB (over TCP sockets).",
);

/**
 * Python module to access single members of a zip archive without downloading the full content
 */
export const remotezip = mkPackage(
  nixRaw`pkgs.python2Packages.remotezip`,
  "Python module to access single members of a zip archive without downloading the full content",
);

/**
 * Python library to interact with the Renault API
 */
export const renault_api = mkPackage(
  nixRaw`pkgs.python2Packages.renault-api`,
  "Python library to interact with the Renault API",
);

/**
 * Fast (basic) object serialization similar to bencode
 */
export const rencode = mkPackage(
  nixRaw`pkgs.python2Packages.rencode`,
  "Fast (basic) object serialization similar to bencode",
);

/**
 * Module to interact with the Reolink IP camera API
 */
export const reolink = mkPackage(
  nixRaw`pkgs.python2Packages.reolink`,
  "Module to interact with the Reolink IP camera API",
);

/**
 * Module to interact with the Reolink IP camera API
 */
export const reolink_aio = mkPackage(
  nixRaw`pkgs.python2Packages.reolink-aio`,
  "Module to interact with the Reolink IP camera API",
);

/**
 * Tool for automatically reordering python imports
 */
export const reorder_python_imports = mkPackage(
  nixRaw`pkgs.python2Packages.reorder-python-imports`,
  "Tool for automatically reordering python imports",
);

/**
 * Simple regex-based lexer/parser for inline markup
 */
export const reparser = mkPackage(
  nixRaw`pkgs.python2Packages.reparser`,
  "Simple regex-based lexer/parser for inline markup",
);

/**
 * A port of the node module path-to-regexp to Python
 */
export const repath = mkPackage(
  nixRaw`pkgs.python2Packages.repath`,
  "A port of the node module path-to-regexp to Python",
);

/**
 * Unittest-compatible framework for repeating a test function over many fixtures
 */
export const repeated_test = mkPackage(
  nixRaw`pkgs.python2Packages.repeated-test`,
  "Unittest-compatible framework for repeating a test function over many fixtures",
);

/**
 * Check the status of code repositories under a root directory
 */
export const repocheck = mkPackage(
  nixRaw`pkgs.python2Packages.repocheck`,
  "Check the status of code repositories under a root directory",
);

/**
 * A framework for declarative data analysis
 */
export const reportengine = mkPackage(
  nixRaw`pkgs.python2Packages.reportengine`,
  "A framework for declarative data analysis",
);

/**
 * An Open Source Python library for generating PDFs and graphics
 */
export const reportlab = mkPackage(
  nixRaw`pkgs.python2Packages.reportlab`,
  "An Open Source Python library for generating PDFs and graphics",
);

/**
 * A tiny LRU cache implementation and decorator
 */
export const repoze_lru = mkPackage(
  nixRaw`pkgs.python2Packages.repoze_lru`,
  "A tiny LRU cache implementation and decorator",
);

/**
 * Auto-generate Sphinx API docs from Zope interfaces
 */
export const repoze_sphinx_autointerface = mkPackage(
  nixRaw`pkgs.python2Packages.repoze_sphinx_autointerface`,
  "Auto-generate Sphinx API docs from Zope interfaces",
);

/**
 * WSGI Authentication Middleware / API
 */
export const repoze_who = mkPackage(
  nixRaw`pkgs.python2Packages.repoze_who`,
  "WSGI Authentication Middleware / API",
);

/**
 * Reproject astronomical images
 */
export const reproject = mkPackage(
  nixRaw`pkgs.python2Packages.reproject`,
  "Reproject astronomical images",
);

/**
 * A toolshed for writing great __repr__ methods quickly and easily
 */
export const reprshed = mkPackage(
  nixRaw`pkgs.python2Packages.reprshed`,
  "A toolshed for writing great __repr__ methods quickly and easily",
);

/**
 * Module to do automated pentest reporting with SysReptor
 */
export const reptor = mkPackage(
  nixRaw`pkgs.python2Packages.reptor`,
  "Module to do automated pentest reporting with SysReptor",
);

/**
 * Python library for ReqIF format
 */
export const reqif = mkPackage(
  nixRaw`pkgs.python2Packages.reqif`,
  "Python library for ReqIF format",
);

/**
 * HTTP library for Python
 */
export const requests = mkPackage(
  nixRaw`pkgs.python2Packages.requests`,
  "HTTP library for Python",
);

/**
 * Amazon Web Services version 4 authentication for the Python Requests library
 */
export const requests_aws4auth = mkPackage(
  nixRaw`pkgs.python2Packages.requests-aws4auth`,
  "Amazon Web Services version 4 authentication for the Python Requests library",
);

/**
 * Persistent cache for requests library
 */
export const requests_cache = mkPackage(
  nixRaw`pkgs.python2Packages.requests-cache`,
  "Persistent cache for requests library",
);

/**
 * HTTPS CredSSP authentication with the requests library
 */
export const requests_credssp = mkPackage(
  nixRaw`pkgs.python2Packages.requests-credssp`,
  "HTTPS CredSSP authentication with the requests library",
);

/**
 * Download files using requests and save them to a target path
 */
export const requests_download = mkPackage(
  nixRaw`pkgs.python2Packages.requests_download`,
  "Download files using requests and save them to a target path",
);

/**
 * Transport adapter for fetching file:// URLs with the requests python library
 */
export const requests_file = mkPackage(
  nixRaw`pkgs.python2Packages.requests-file`,
  "Transport adapter for fetching file:// URLs with the requests python library",
);

/**
 * Asynchronous Python HTTP Requests for Humans using Futures
 */
export const requests_futures = mkPackage(
  nixRaw`pkgs.python2Packages.requests-futures`,
  "Asynchronous Python HTTP Requests for Humans using Futures",
);

/**
 * Hawk authentication strategy for the requests python library.
 */
export const requests_hawk = mkPackage(
  nixRaw`pkgs.python2Packages.requests-hawk`,
  "Hawk authentication strategy for the requests python library.",
);

/**
 * Requests authentication module for HTTP Signature
 */
export const requests_http_signature = mkPackage(
  nixRaw`pkgs.python2Packages.requests-http-signature`,
  "Requests authentication module for HTTP Signature",
);

/**
 * An authentication handler for using Kerberos with Python Requests
 */
export const requests_kerberos = mkPackage(
  nixRaw`pkgs.python2Packages.requests-kerberos`,
  "An authentication handler for using Kerberos with Python Requests",
);

/**
 * Mock out responses from the requests package
 */
export const requests_mock = mkPackage(
  nixRaw`pkgs.python2Packages.requests-mock`,
  "Mock out responses from the requests package",
);

/**
 * HTTP NTLM authentication support for python-requests
 */
export const requests_ntlm = mkPackage(
  nixRaw`pkgs.python2Packages.requests_ntlm`,
  "HTTP NTLM authentication support for python-requests",
);

/**
 * OAuthlib authentication support for Requests
 */
export const requests_oauthlib = mkPackage(
  nixRaw`pkgs.python2Packages.requests-oauthlib`,
  "OAuthlib authentication support for Requests",
);

/**
 * PKCS#12 support for the Python requests library
 */
export const requests_pkcs12 = mkPackage(
  nixRaw`pkgs.python2Packages.requests-pkcs12`,
  "PKCS#12 support for the Python requests library",
);

/**
 * Easy rate-limiting for python requests
 */
export const requests_ratelimiter = mkPackage(
  nixRaw`pkgs.python2Packages.requests-ratelimiter`,
  "Easy rate-limiting for python requests",
);

/**
 * Toolbelt of useful classes and functions to be used with requests
 */
export const requests_toolbelt = mkPackage(
  nixRaw`pkgs.python2Packages.requests-toolbelt`,
  "Toolbelt of useful classes and functions to be used with requests",
);

/**
 * Use requests to talk HTTP via a UNIX domain socket
 */
export const requests_unixsocket = mkPackage(
  nixRaw`pkgs.python2Packages.requests-unixsocket`,
  "Use requests to talk HTTP via a UNIX domain socket",
);

/**
 * WSGI Transport Adapter for Requests
 */
export const requests_wsgi_adapter = mkPackage(
  nixRaw`pkgs.python2Packages.requests-wsgi-adapter`,
  "WSGI Transport Adapter for Requests",
);

/**
 * Import exceptions from potentially bundled packages in requests.
 */
export const requestsexceptions = mkPackage(
  nixRaw`pkgs.python2Packages.requestsexceptions`,
  "Import exceptions from potentially bundled packages in requests.",
);

/**
 * Python tool to find and list requirements of a Python project
 */
export const requirements_detector = mkPackage(
  nixRaw`pkgs.python2Packages.requirements-detector`,
  "Python tool to find and list requirements of a Python project",
);

/**
 * Pip requirements file parser
 */
export const requirements_parser = mkPackage(
  nixRaw`pkgs.python2Packages.requirements-parser`,
  "Pip requirements file parser",
);

/**
 * An easy to use retry decorator.
 */
export const reretry = mkPackage(
  nixRaw`pkgs.python2Packages.reretry`,
  "An easy to use retry decorator.",
);

/**
 * Efficient signal resampling
 */
export const resampy = mkPackage(
  nixRaw`pkgs.python2Packages.resampy`,
  "Efficient signal resampling",
);

/**
 * The correct way to resize images or tensors. For Numpy or Pytorch (differentiable
 */
export const resize_right = mkPackage(
  nixRaw`pkgs.python2Packages.resize-right`,
  "The correct way to resize images or tensors. For Numpy or Pytorch (differentiable",
);

/**
 * Resolve abstract dependencies into concrete ones
 */
export const resolvelib = mkPackage(
  nixRaw`pkgs.python2Packages.resolvelib`,
  "Resolve abstract dependencies into concrete ones",
);

/**
 * Python module for mocking out the requests Python library
 */
export const responses = mkPackage(
  nixRaw`pkgs.python2Packages.responses`,
  "Python module for mocking out the requests Python library",
);

/**
 * Python library for mocking HTTPX
 */
export const respx = mkPackage(
  nixRaw`pkgs.python2Packages.respx`,
  "Python library for mocking HTTPX",
);

/**
 * Python RESTfly API Library Framework
 */
export const restfly = mkPackage(
  nixRaw`pkgs.python2Packages.restfly`,
  "Python RESTfly API Library Framework",
);

/**
 * Restricted execution environment for Python to run untrusted code
 */
export const restrictedpython = mkPackage(
  nixRaw`pkgs.python2Packages.restrictedpython`,
  "Restricted execution environment for Python to run untrusted code",
);

/**
 * reStructuredText linter
 */
export const restructuredtext_lint = mkPackage(
  nixRaw`pkgs.python2Packages.restructuredtext_lint`,
  "reStructuredText linter",
);

/**
 * ReStructuredText viewer
 */
export const restview = mkPackage(
  nixRaw`pkgs.python2Packages.restview`,
  "ReStructuredText viewer",
);

/**
 * A simple Result type for Python 3 inspired by Rust, fully type annotated
 */
export const result = mkPackage(
  nixRaw`pkgs.python2Packages.result`,
  "A simple Result type for Python 3 inspired by Rust, fully type annotated",
);

/**
 * Python driver library for the RethinkDB database server
 */
export const rethinkdb = mkPackage(
  nixRaw`pkgs.python2Packages.rethinkdb`,
  "Python driver library for the RethinkDB database server",
);

/**
 * Easy to use retry decorator
 */
export const retry = mkPackage(
  nixRaw`pkgs.python2Packages.retry`,
  "Easy to use retry decorator",
);

/**
 * Decorator for retrying when exceptions occur
 */
export const retry_decorator = mkPackage(
  nixRaw`pkgs.python2Packages.retry_decorator`,
  "Decorator for retrying when exceptions occur",
);

/**
 * General-purpose retrying library
 */
export const retrying = mkPackage(
  nixRaw`pkgs.python2Packages.retrying`,
  "General-purpose retrying library",
);

/**
 * Make your functions return something meaningful, typed, and safe!
 */
export const returns = mkPackage(
  nixRaw`pkgs.python2Packages.returns`,
  "Make your functions return something meaningful, typed, and safe!",
);

/**
 * Format dates according to the RFC 3339
 */
export const rfc3339 = mkPackage(
  nixRaw`pkgs.python2Packages.rfc3339`,
  "Format dates according to the RFC 3339",
);

/**
 * RFC 3339 validator for Python
 */
export const rfc3339_validator = mkPackage(
  nixRaw`pkgs.python2Packages.rfc3339-validator`,
  "RFC 3339 validator for Python",
);

/**
 * Validating URI References per RFC 3986
 */
export const rfc3986 = mkPackage(
  nixRaw`pkgs.python2Packages.rfc3986`,
  "Validating URI References per RFC 3986",
);

/**
 * Pure python rfc3986 validator
 */
export const rfc3986_validator = mkPackage(
  nixRaw`pkgs.python2Packages.rfc3986-validator`,
  "Pure python rfc3986 validator",
);

/**
 * Parsing and validation of URIs (RFC 3986) and IRIs (RFC 3987)
 */
export const rfc3987 = mkPackage(
  nixRaw`pkgs.python2Packages.rfc3987`,
  "Parsing and validation of URIs (RFC 3986) and IRIs (RFC 3987)",
);

/**
 * Python implementation of the Happy Eyeballs Algorithm
 */
export const rfc6555 = mkPackage(
  nixRaw`pkgs.python2Packages.rfc6555`,
  "Python implementation of the Happy Eyeballs Algorithm",
);

/**
 * RFC 7464 is a proposed standard for streaming JSON documents.
 */
export const rfc7464 = mkPackage(
  nixRaw`pkgs.python2Packages.rfc7464`,
  "RFC 7464 is a proposed standard for streaming JSON documents.",
);

/**
 * Swiss Army knife of sub-GHz ISM band radio
 */
export const rfcat = mkPackage(
  nixRaw`pkgs.python2Packages.rfcat`,
  "Swiss Army knife of sub-GHz ISM band radio",
);

/**
 * Library and CLI tools for interacting with RFlink 433MHz transceiver
 */
export const rflink = mkPackage(
  nixRaw`pkgs.python2Packages.rflink`,
  "Library and CLI tools for interacting with RFlink 433MHz transceiver",
);

/**
 * Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal
 */
export const rich = mkPackage(
  nixRaw`pkgs.python2Packages.rich`,
  "Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal",
);

/**
 * Format argparse help output using rich.
 */
export const rich_argparse = mkPackage(
  nixRaw`pkgs.python2Packages.rich-argparse`,
  "Format argparse help output using rich.",
);

/**
 * Library to help formatting argparse
 */
export const rich_argparse_plus = mkPackage(
  nixRaw`pkgs.python2Packages.rich-argparse-plus`,
  "Library to help formatting argparse",
);

/**
 * Module to format click help output nicely with rich
 */
export const rich_click = mkPackage(
  nixRaw`pkgs.python2Packages.rich-click`,
  "Module to format click help output nicely with rich",
);

/**
 * A Rich-compatible library for writing pixel images and ASCII art to the terminal
 */
export const rich_pixels = mkPackage(
  nixRaw`pkgs.python2Packages.rich-pixels`,
  "A Rich-compatible library for writing pixel images and ASCII art to the terminal",
);

/**
 * A beautiful reStructuredText renderer for rich
 */
export const rich_rst = mkPackage(
  nixRaw`pkgs.python2Packages.rich-rst`,
  "A beautiful reStructuredText renderer for rich",
);

/**
 * Python library to communicate with Ring Door Bell
 */
export const ring_doorbell = mkPackage(
  nixRaw`pkgs.python2Packages.ring-doorbell`,
  "Python library to communicate with Ring Door Bell",
);

/**
 * Python client library for RIPE ATLAS API
 */
export const ripe_atlas_cousteau = mkPackage(
  nixRaw`pkgs.python2Packages.ripe-atlas-cousteau`,
  "Python client library for RIPE ATLAS API",
);

/**
 * A parsing library for RIPE Atlas measurements results
 */
export const ripe_atlas_sagan = mkPackage(
  nixRaw`pkgs.python2Packages.ripe-atlas-sagan`,
  "A parsing library for RIPE Atlas measurements results",
);

/**
 * Small and versatile library to retry failed operations using different backoff strategies
 */
export const riprova = mkPackage(
  nixRaw`pkgs.python2Packages.riprova`,
  "Small and versatile library to retry failed operations using different backoff strategies",
);

/**
 * A Lean Persistent Homology Library for Python
 */
export const ripser = mkPackage(
  nixRaw`pkgs.python2Packages.ripser`,
  "A Lean Persistent Homology Library for Python",
);

/**
 * RISC-V Architectural Test Framework
 */
export const riscof = mkPackage(
  nixRaw`pkgs.python2Packages.riscof`,
  "RISC-V Architectural Test Framework",
);

/**
 * RISC-V configuration validator
 */
export const riscv_config = mkPackage(
  nixRaw`pkgs.python2Packages.riscv-config`,
  "RISC-V configuration validator",
);

/**
 * An ISA coverage extraction tool
 */
export const riscv_isac = mkPackage(
  nixRaw`pkgs.python2Packages.riscv-isac`,
  "An ISA coverage extraction tool",
);

/**
 * High-performance data loading and augmentation library in PyTorch
 */
export const rising = mkPackage(
  nixRaw`pkgs.python2Packages.rising`,
  "High-performance data loading and augmentation library in PyTorch",
);

/**
 * Python client to access RitAssist and FleetGO API
 */
export const ritassist = mkPackage(
  nixRaw`pkgs.python2Packages.ritassist`,
  "Python client to access RitAssist and FleetGO API",
);

/**
 * Library for interacting with the Rejseplanen API
 */
export const rjpl = mkPackage(
  nixRaw`pkgs.python2Packages.rjpl`,
  "Library for interacting with the Rejseplanen API",
);

/**
 * Module to minify Javascript
 */
export const rjsmin = mkPackage(
  nixRaw`pkgs.python2Packages.rjsmin`,
  "Module to minify Javascript",
);

/**
 * Python module for working with data from the Robert-Koch Institut
 */
export const rki_covid_parser = mkPackage(
  nixRaw`pkgs.python2Packages.rki-covid-parser`,
  "Python module for working with data from the Robert-Koch Institut",
);

/**
 * QuantiPhy support for RKM codes
 */
export const rkm_codes = mkPackage(
  nixRaw`pkgs.python2Packages.rkm-codes`,
  "QuantiPhy support for RKM codes",
);

/**
 * Library of reinforcement learning building blocks in JAX
 */
export const rlax = mkPackage(
  nixRaw`pkgs.python2Packages.rlax`,
  "Library of reinforcement learning building blocks in JAX",
);

/**
 * RLP serialization library
 */
export const rlp = mkPackage(
  nixRaw`pkgs.python2Packages.rlp`,
  "RLP serialization library",
);

/**
 * ReMarkable Cloud Library
 */
export const rmcl = mkPackage(
  nixRaw`pkgs.python2Packages.rmcl`,
  "ReMarkable Cloud Library",
);

/**
 * Render reMarkable documents to PDF
 */
export const rmrl = mkPackage(
  nixRaw`pkgs.python2Packages.rmrl`,
  "Render reMarkable documents to PDF",
);

/**
 * Calculate root-mean-square deviation (RMSD) between two sets of cartesian coordinates
 */
export const rmsd = mkPackage(
  nixRaw`pkgs.python2Packages.rmsd`,
  "Calculate root-mean-square deviation (RMSD) between two sets of cartesian coordinates",
);

/**
 * Compact to regular syntax conversion library for RELAX NG schemata
 */
export const rnc2rng = mkPackage(
  nixRaw`pkgs.python2Packages.rnc2rng`,
  "Compact to regular syntax conversion library for RELAX NG schemata",
);

/**
 * A Python library and command-line tool for loading multi-file RELAX NG schemas from arbitary URLs, and flattening them into a single RELAX NG schema
 */
export const rnginline = mkPackage(
  nixRaw`pkgs.python2Packages.rnginline`,
  "A Python library and command-line tool for loading multi-file RELAX NG schemas from arbitary URLs, and flattening them into a single RELAX NG schema",
);

/**
 * Cryptography-based networking stack for wide-area networks
 */
export const rns = mkPackage(
  nixRaw`pkgs.python2Packages.rns`,
  "Cryptography-based networking stack for wide-area networks",
);

/**
 * Test data generator for Robot Framework
 */
export const robomachine = mkPackage(
  nixRaw`pkgs.python2Packages.robomachine`,
  "Test data generator for Robot Framework",
);

/**
 * Library for detecting if a HTTP User Agent header is likely to be a bot
 */
export const robot_detection = mkPackage(
  nixRaw`pkgs.python2Packages.robot-detection`,
  "Library for detecting if a HTTP User Agent header is likely to be a bot",
);

/**
 * Generic test automation framework
 */
export const robotframework = mkPackage(
  nixRaw`pkgs.python2Packages.robotframework`,
  "Generic test automation framework",
);

/**
 * Database Library contains utilities meant for Robot Framework
 */
export const robotframework_databaselibrary = mkPackage(
  nixRaw`pkgs.python2Packages.robotframework-databaselibrary`,
  "Database Library contains utilities meant for Robot Framework",
);

/**
 * Tools to ease creating larger test libraries for Robot Framework using Python
 */
export const robotframework_pythonlibcore = mkPackage(
  nixRaw`pkgs.python2Packages.robotframework-pythonlibcore`,
  "Tools to ease creating larger test libraries for Robot Framework using Python",
);

/**
 * Robot Framework keyword library wrapper around the HTTP client library requests
 */
export const robotframework_requests = mkPackage(
  nixRaw`pkgs.python2Packages.robotframework-requests`,
  "Robot Framework keyword library wrapper around the HTTP client library requests",
);

/**
 * Web testing library for Robot Framework
 */
export const robotframework_selenium2library = mkPackage(
  nixRaw`pkgs.python2Packages.robotframework-selenium2library`,
  "Web testing library for Robot Framework",
);

/**
 * Web testing library for Robot Framework
 */
export const robotframework_seleniumlibrary = mkPackage(
  nixRaw`pkgs.python2Packages.robotframework-seleniumlibrary`,
  "Web testing library for Robot Framework",
);

/**
 * SSHLibrary is a Robot Framework test library for SSH and SFTP
 */
export const robotframework_sshlibrary = mkPackage(
  nixRaw`pkgs.python2Packages.robotframework-sshlibrary`,
  "SSHLibrary is a Robot Framework test library for SSH and SFTP",
);

/**
 * Python Tools for Robot Framework and Test Libraries
 */
export const robotframework_tools = mkPackage(
  nixRaw`pkgs.python2Packages.robotframework-tools`,
  "Python Tools for Robot Framework and Test Libraries",
);

/**
 * A tool for checking that Robot Framework test cases have expected statuses and log messages
 */
export const robotstatuschecker = mkPackage(
  nixRaw`pkgs.python2Packages.robotstatuschecker`,
  "A tool for checking that Robot Framework test cases have expected statuses and log messages",
);

/**
 * Python unittest test suite for Robot Framework
 */
export const robotsuite = mkPackage(
  nixRaw`pkgs.python2Packages.robotsuite`,
  "Python unittest test suite for Robot Framework",
);

/**
 * Modern, multi-threaded and extensible web server
 */
export const rocket_errbot = mkPackage(
  nixRaw`pkgs.python2Packages.rocket-errbot`,
  "Modern, multi-threaded and extensible web server",
);

/**
 * Screw remotes. Control your Roku with Python.
 */
export const roku = mkPackage(
  nixRaw`pkgs.python2Packages.roku`,
  "Screw remotes. Control your Roku with Python.",
);

/**
 * Asynchronous Python client for Roku (ECP)
 */
export const rokuecp = mkPackage(
  nixRaw`pkgs.python2Packages.rokuecp`,
  "Asynchronous Python client for Roku (ECP)",
);

/**
 * Error tracking and logging from Python to Rollbar
 */
export const rollbar = mkPackage(
  nixRaw`pkgs.python2Packages.rollbar`,
  "Error tracking and logging from Python to Rollbar",
);

/**
 * Integer to Roman numerals converter
 */
export const roman = mkPackage(
  nixRaw`pkgs.python2Packages.roman`,
  "Integer to Roman numerals converter",
);

/**
 * A straightforward but powerful build system based on Ninja and Python
 */
export const ronin = mkPackage(
  nixRaw`pkgs.python2Packages.ronin`,
  "A straightforward but powerful build system based on Ninja and Python",
);

/**
 * Python program and library to control Wi-Fi enabled iRobot Roombas
 */
export const roombapy = mkPackage(
  nixRaw`pkgs.python2Packages.roombapy`,
  "Python program and library to control Wi-Fi enabled iRobot Roombas",
);

/**
 * Python library to interface with the Roon API
 */
export const roonapi = mkPackage(
  nixRaw`pkgs.python2Packages.roonapi`,
  "Python library to interface with the Roon API",
);

/**
 * Python refactoring library
 */
export const rope = mkPackage(
  nixRaw`pkgs.python2Packages.rope`,
  "Python refactoring library",
);

/**
 * Tool to search for gadgets in binaries to facilitate ROP exploitation
 */
export const ropgadget = mkPackage(
  nixRaw`pkgs.python2Packages.ropgadget`,
  "Tool to search for gadgets in binaries to facilitate ROP exploitation",
);

/**
 * Show information about files in different file formats
 */
export const ropper = mkPackage(
  nixRaw`pkgs.python2Packages.ropper`,
  "Show information about files in different file formats",
);

/**
 * Implementation of Rotary Embeddings, from the Roformer paper, in Pytorch
 */
export const rotary_embedding_torch = mkPackage(
  nixRaw`pkgs.python2Packages.rotary-embedding-torch`,
  "Implementation of Rotary Embeddings, from the Roformer paper, in Pytorch",
);

/**
 * Python ROUGE Implementation
 */
export const rouge_score = mkPackage(
  nixRaw`pkgs.python2Packages.rouge-score`,
  "Python ROUGE Implementation",
);

/**
 * Python API to RouterBoard devices produced by MikroTik.
 */
export const routeros_api = mkPackage(
  nixRaw`pkgs.python2Packages.routeros-api`,
  "Python API to RouterBoard devices produced by MikroTik.",
);

/**
 * Re-implementation of the Rails routes system for mapping URLs to application actions
 */
export const routes = mkPackage(
  nixRaw`pkgs.python2Packages.routes`,
  "Re-implementation of the Rails routes system for mapping URLs to application actions",
);

/**
 * Module to access for ROVA calendars
 */
export const rova = mkPackage(
  nixRaw`pkgs.python2Packages.rova`,
  "Module to access for ROVA calendars",
);

/**
 * The RPC framework and message specification for rigetti Quantum Cloud services
 */
export const rpcq = mkPackage(
  nixRaw`pkgs.python2Packages.rpcq`,
  "The RPC framework and message specification for rigetti Quantum Cloud services",
);

/**
 * pdb wrapper with remote access via tcp socket
 */
export const rpdb = mkPackage(
  nixRaw`pkgs.python2Packages.rpdb`,
  "pdb wrapper with remote access via tcp socket",
);

/**
 * Python bindings to Rust's persistent data structures (rpds
 */
export const rpds_py = mkPackage(
  nixRaw`pkgs.python2Packages.rpds-py`,
  "Python bindings to Rust's persistent data structures (rpds",
);

/**
 * Python library to detect bad power supply on Raspberry Pi
 */
export const rpi_bad_power = mkPackage(
  nixRaw`pkgs.python2Packages.rpi-bad-power`,
  "Python library to detect bad power supply on Raspberry Pi",
);

/**
 * Python module to control the GPIO on a Raspberry Pi
 */
export const rpi_gpio = mkPackage(
  nixRaw`pkgs.python2Packages.rpi-gpio`,
  "Python module to control the GPIO on a Raspberry Pi",
);

/**
 * Compatibility layer between RPi.GPIO syntax and libgpiod semantics

 */
export const rpi_gpio2 = mkPackage(
  nixRaw`pkgs.python2Packages.rpi-gpio2`,
  "Compatibility layer between RPi.GPIO syntax and libgpiod semantics\n",
);

/**
 * Raspberry Pi LCD library for the widely used Hitachi HD44780 controller

 */
export const rplcd = mkPackage(
  nixRaw`pkgs.python2Packages.rplcd`,
  "Raspberry Pi LCD library for the widely used Hitachi HD44780 controller\n",
);

/**
 * A python Lex/Yacc that works with RPython
 */
export const rply = mkPackage(
  nixRaw`pkgs.python2Packages.rply`,
  "A python Lex/Yacc that works with RPython",
);

/**
 * Read rpm archive files
 */
export const rpmfile = mkPackage(
  nixRaw`pkgs.python2Packages.rpmfile`,
  "Read rpm archive files",
);

/**
 * lightweight way of building RPMs, and sabotaging them
 */
export const rpmfluff = mkPackage(
  nixRaw`pkgs.python2Packages.rpmfluff`,
  "lightweight way of building RPMs, and sabotaging them",
);

/**
 * Python interface to R
 */
export const rpy2 = mkPackage(
  nixRaw`pkgs.python2Packages.rpy2`,
  "Python interface to R",
);

/**
 * Remote Python Call (RPyC), a transparent and symmetric RPC library
 */
export const rpyc = mkPackage(
  nixRaw`pkgs.python2Packages.rpyc`,
  "Remote Python Call (RPyC), a transparent and symmetric RPC library",
);

/**
 * Library for creating background jobs and processing them
 */
export const rq = mkPackage(
  nixRaw`pkgs.python2Packages.rq`,
  "Library for creating background jobs and processing them",
);

/**
 * A pure-Python RSA implementation
 */
export const rsa = mkPackage(
  nixRaw`pkgs.python2Packages.rsa`,
  "A pure-Python RSA implementation",
);

/**
 * RSS feed mirror on Misskey
 */
export const rsskey = mkPackage(
  nixRaw`pkgs.python2Packages.rsskey`,
  "RSS feed mirror on Misskey",
);

/**
 * A rst converter to ansi-decorated console output
 */
export const rst2ansi = mkPackage(
  nixRaw`pkgs.python2Packages.rst2ansi`,
  "A rst converter to ansi-decorated console output",
);

/**
 * Convert reStructured Text to PDF via ReportLab
 */
export const rst2pdf = mkPackage(
  nixRaw`pkgs.python2Packages.rst2pdf`,
  "Convert reStructured Text to PDF via ReportLab",
);

/**
 * Checks syntax of reStructuredText and code blocks nested within it
 */
export const rstcheck = mkPackage(
  nixRaw`pkgs.python2Packages.rstcheck`,
  "Checks syntax of reStructuredText and code blocks nested within it",
);

/**
 * Library for checking syntax of reStructuredText
 */
export const rstcheck_core = mkPackage(
  nixRaw`pkgs.python2Packages.rstcheck-core`,
  "Library for checking syntax of reStructuredText",
);

/**
 * Python wrapper for RtMidi
 */
export const rtmidi_python = mkPackage(
  nixRaw`pkgs.python2Packages.rtmidi-python`,
  "Python wrapper for RtMidi",
);

/**
 * Reliable low-latency audio playback and recording with Python, using PortAudio via the sounddevice module
 */
export const rtmixer = mkPackage(
  nixRaw`pkgs.python2Packages.rtmixer`,
  "Reliable low-latency audio playback and recording with Python, using PortAudio via the sounddevice module",
);

/**
 * Rust based TOML library for Python
 */
export const rtoml = mkPackage(
  nixRaw`pkgs.python2Packages.rtoml`,
  "Rust based TOML library for Python",
);

/**
 * A library for decoding/encoding rtp packets
 */
export const rtp = mkPackage(
  nixRaw`pkgs.python2Packages.rtp`,
  "A library for decoding/encoding rtp packets",
);

/**
 * R-Tree spatial index for Python GIS
 */
export const rtree = mkPackage(
  nixRaw`pkgs.python2Packages.rtree`,
  "R-Tree spatial index for Python GIS",
);

/**
 * A Python object API for managing the Linux LIO kernel target
 */
export const rtslib = mkPackage(
  nixRaw`pkgs.python2Packages.rtslib`,
  "A Python object API for managing the Linux LIO kernel target",
);

/**
 * Module for RTSPtoWeb and RTSPtoWebRTC
 */
export const rtsp_to_webrtc = mkPackage(
  nixRaw`pkgs.python2Packages.rtsp-to-webrtc`,
  "Module for RTSPtoWeb and RTSPtoWebRTC",
);

/**
 * Common routines for ruamel packages
 */
export const ruamel_base = mkPackage(
  nixRaw`pkgs.python2Packages.ruamel-base`,
  "Common routines for ruamel packages",
);

/**
 * YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order
 */
export const ruamel_yaml = mkPackage(
  nixRaw`pkgs.python2Packages.ruamel-yaml`,
  "YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order",
);

/**
 * YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order
 */
export const ruamel_yaml_clib = mkPackage(
  nixRaw`pkgs.python2Packages.ruamel-yaml-clib`,
  "YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order",
);

/**
 * Read and write Ruby-marshalled data
 */
export const rubymarshal = mkPackage(
  nixRaw`pkgs.python2Packages.rubymarshal`,
  "Read and write Ruby-marshalled data",
);

/**
 * Light-weight Python Computational Pipeline Management
 */
export const ruffus = mkPackage(
  nixRaw`pkgs.python2Packages.ruffus`,
  "Light-weight Python Computational Pipeline Management",
);

/**
 * Awesome Django authorization, without the database
 */
export const rules = mkPackage(
  nixRaw`pkgs.python2Packages.rules`,
  "Awesome Django authorization, without the database",
);

/**
 * A high performance Python graph library implemented in Rust
 */
export const rustworkx = mkPackage(
  nixRaw`pkgs.python2Packages.rustworkx`,
  "A high performance Python graph library implemented in Rust",
);

/**
 * Library for Ruuvitag BLE devices
 */
export const ruuvitag_ble = mkPackage(
  nixRaw`pkgs.python2Packages.ruuvitag-ble`,
  "Library for Ruuvitag BLE devices",
);

/**
 * YAML 1.2 loader/dumper package for Python
 */
export const ruyaml = mkPackage(
  nixRaw`pkgs.python2Packages.ruyaml`,
  "YAML 1.2 loader/dumper package for Python",
);

/**
 * Reactive Extensions for Python
 */
export const rx = mkPackage(
  nixRaw`pkgs.python2Packages.rx`,
  "Reactive Extensions for Python",
);

/**
 * Python library for communicate with Yamaha RX-Vxxx receivers
 */
export const rxv = mkPackage(
  nixRaw`pkgs.python2Packages.rxv`,
  "Python library for communicate with Yamaha RX-Vxxx receivers",
);

/**
 * Python interface for rizin
 */
export const rzpipe = mkPackage(
  nixRaw`pkgs.python2Packages.rzpipe`,
  "Python interface for rizin",
);

/**
 * StarCraft II - client protocol.
 */
export const s2clientprotocol = mkPackage(
  nixRaw`pkgs.python2Packages.s2clientprotocol`,
  "StarCraft II - client protocol.",
);

/**
 * Python CLI utility for creating credentials for accessing S3 buckets
 */
export const s3_credentials = mkPackage(
  nixRaw`pkgs.python2Packages.s3-credentials`,
  "Python CLI utility for creating credentials for accessing S3 buckets",
);

/**
 * A Pythonic file interface for S3
 */
export const s3fs = mkPackage(
  nixRaw`pkgs.python2Packages.s3fs`,
  "A Pythonic file interface for S3",
);

/**
 * Library for managing Amazon S3 transfers
 */
export const s3transfer = mkPackage(
  nixRaw`pkgs.python2Packages.s3transfer`,
  "Library for managing Amazon S3 transfers",
);

/**
 * C implementations of functions for use within SABnzbd
 */
export const sabctools = mkPackage(
  nixRaw`pkgs.python2Packages.sabctools`,
  "C implementations of functions for use within SABnzbd",
);

/**
 * Python yEnc package optimized for use within SABnzbd
 */
export const sabyenc = mkPackage(
  nixRaw`pkgs.python2Packages.sabyenc`,
  "Python yEnc package optimized for use within SABnzbd",
);

/**
 * yEnc Decoding for Python 3
 */
export const sabyenc3 = mkPackage(
  nixRaw`pkgs.python2Packages.sabyenc3`,
  "yEnc Decoding for Python 3",
);

/**
 * A simple ANSI E1.31 (aka sACN) module
 */
export const sacn = mkPackage(
  nixRaw`pkgs.python2Packages.sacn`,
  "A simple ANSI E1.31 (aka sACN) module",
);

/**
 * Hassle-free computation of shareable, comparable, and reproducible BLEU, chrF, and TER scores
 */
export const sacrebleu = mkPackage(
  nixRaw`pkgs.python2Packages.sacrebleu`,
  "Hassle-free computation of shareable, comparable, and reproducible BLEU, chrF, and TER scores",
);

/**
 * Python port of Moses tokenizer, truecaser and normalizer
 */
export const sacremoses = mkPackage(
  nixRaw`pkgs.python2Packages.sacremoses`,
  "Python port of Moses tokenizer, truecaser and normalizer",
);

/**
 * Check password strength
 */
export const safe = mkPackage(
  nixRaw`pkgs.python2Packages.safe`,
  "Check password strength",
);

/**
 * SHA-3 (Keccak) for Python 3.9 - 3.11
 */
export const safe_pysha3 = mkPackage(
  nixRaw`pkgs.python2Packages.safe-pysha3`,
  "SHA-3 (Keccak) for Python 3.9 - 3.11",
);

/**
 * Safely make I/O operations to files in Python even from multiple threads
 */
export const safeio = mkPackage(
  nixRaw`pkgs.python2Packages.safeio`,
  "Safely make I/O operations to files in Python even from multiple threads",
);

/**
 * Fast (zero-copy) and safe (unlike pickle) format for storing tensors
 */
export const safetensors = mkPackage(
  nixRaw`pkgs.python2Packages.safetensors`,
  "Fast (zero-copy) and safe (unlike pickle) format for storing tensors",
);

/**
 * Checks installed dependencies for known vulnerabilities
 */
export const safety = mkPackage(
  nixRaw`pkgs.python2Packages.safety`,
  "Checks installed dependencies for known vulnerabilities",
);

/**
 * Library for training and deploying machine learning models on Amazon SageMaker
 */
export const sagemaker = mkPackage(
  nixRaw`pkgs.python2Packages.sagemaker`,
  "Library for training and deploying machine learning models on Amazon SageMaker",
);

/**
 * Pythonic mail application server
 */
export const salmon_mail = mkPackage(
  nixRaw`pkgs.python2Packages.salmon-mail`,
  "Pythonic mail application server",
);

/**
 * Sample Data generator for Python 
 */
export const sampledata = mkPackage(
  nixRaw`pkgs.python2Packages.sampledata`,
  "Sample Data generator for Python ",
);

/**
 * Python bindings for libsamplerate based on CFFI and NumPy
 */
export const samplerate = mkPackage(
  nixRaw`pkgs.python2Packages.samplerate`,
  "Python bindings for libsamplerate based on CFFI and NumPy",
);

/**
 * Remote control Samsung televisions via a TCP/IP connection
 */
export const samsungctl = mkPackage(
  nixRaw`pkgs.python2Packages.samsungctl`,
  "Remote control Samsung televisions via a TCP/IP connection",
);

/**
 * Samsung Smart TV WS API wrapper
 */
export const samsungtvws = mkPackage(
  nixRaw`pkgs.python2Packages.samsungtvws`,
  "Samsung Smart TV WS API wrapper",
);

/**
 * Python interface to the SANE scanner and frame grabber 
 */
export const sane = mkPackage(
  nixRaw`pkgs.python2Packages.sane`,
  "Python interface to the SANE scanner and frame grabber ",
);

/**
 * A PyYaml wrapper with sane behaviour to read and write readable YAML safely
 */
export const saneyaml = mkPackage(
  nixRaw`pkgs.python2Packages.saneyaml`,
  "A PyYaml wrapper with sane behaviour to read and write readable YAML safely",
);

/**
 * Web server and web framework
 */
export const sanic = mkPackage(
  nixRaw`pkgs.python2Packages.sanic`,
  "Web server and web framework",
);

/**
 * Simple Authentication for Sanic
 */
export const sanic_auth = mkPackage(
  nixRaw`pkgs.python2Packages.sanic-auth`,
  "Simple Authentication for Sanic",
);

/**
 * Core routing component for the Sanic web framework
 */
export const sanic_routing = mkPackage(
  nixRaw`pkgs.python2Packages.sanic-routing`,
  "Core routing component for the Sanic web framework",
);

/**
 * Core testing clients for the Sanic web framework
 */
export const sanic_testing = mkPackage(
  nixRaw`pkgs.python2Packages.sanic-testing`,
  "Core testing clients for the Sanic web framework",
);

/**
 * Parser for multipart/form-data
 */
export const sansio_multipart = mkPackage(
  nixRaw`pkgs.python2Packages.sansio-multipart`,
  "Parser for multipart/form-data",
);

/**
 * Python wrapper for subprocess which provides command pipeline functionality
 */
export const sarge = mkPackage(
  nixRaw`pkgs.python2Packages.sarge`,
  "Python wrapper for subprocess which provides command pipeline functionality",
);

/**
 * Classes implementing the SARIF 2.1.0 object model
 */
export const sarif_om = mkPackage(
  nixRaw`pkgs.python2Packages.sarif-om`,
  "Classes implementing the SARIF 2.1.0 object model",
);

/**
 * Library of small angle scattering models
 */
export const sasmodels = mkPackage(
  nixRaw`pkgs.python2Packages.sasmodels`,
  "Library of small angle scattering models",
);

/**
 * Stats for Python processes
 */
export const scales = mkPackage(
  nixRaw`pkgs.python2Packages.scales`,
  "Stats for Python processes",
);

/**
 * Tool to scan code for license, copyright, package and their documented dependencies and other interesting facts
 */
export const scancode_toolkit = mkPackage(
  nixRaw`pkgs.python2Packages.scancode-toolkit`,
  "Tool to scan code for license, copyright, package and their documented dependencies and other interesting facts",
);

/**
 * A better directory iterator and faster os.walk()
 */
export const scandir = mkPackage(
  nixRaw`pkgs.python2Packages.scandir`,
  "A better directory iterator and faster os.walk()",
);

/**
 * A Python-based network packet manipulation program and library
 */
export const scapy = mkPackage(
  nixRaw`pkgs.python2Packages.scapy`,
  "A Python-based network packet manipulation program and library",
);

/**
 * Python job scheduling for humans
 */
export const schedule = mkPackage(
  nixRaw`pkgs.python2Packages.schedule`,
  "Python job scheduling for humans",
);

/**
 * Library for validating Python data structures
 */
export const schema = mkPackage(
  nixRaw`pkgs.python2Packages.schema`,
  "Library for validating Python data structures",
);

/**
 * Schema inspection for PostgreSQL, and potentially others
 */
export const schemainspect = mkPackage(
  nixRaw`pkgs.python2Packages.schemainspect`,
  "Schema inspection for PostgreSQL, and potentially others",
);

/**
 * A package for producing high-quality electrical circuit schematic diagrams
 */
export const schemdraw = mkPackage(
  nixRaw`pkgs.python2Packages.schemdraw`,
  "A package for producing high-quality electrical circuit schematic diagrams",
);

/**
 * Python library for interacting with Bahn.de
 */
export const schiene = mkPackage(
  nixRaw`pkgs.python2Packages.schiene`,
  "Python library for interacting with Bahn.de",
);

/**
 * Validate/generate IBANs and BICs
 */
export const schwifty = mkPackage(
  nixRaw`pkgs.python2Packages.schwifty`,
  "Validate/generate IBANs and BICs",
);

/**
 * Data structures, algorithms and educational resources for bioinformatics
 */
export const scikit_bio = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-bio`,
  "Data structures, algorithms and educational resources for bioinformatics",
);

/**
 * Improved build system generator for CPython C/C++/Fortran/Cython extensions
 */
export const scikit_build = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-build`,
  "Improved build system generator for CPython C/C++/Fortran/Cython extensions",
);

/**
 * A next generation Python CMake adaptor and Python API for plugins
 */
export const scikit_build_core = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-build-core`,
  "A next generation Python CMake adaptor and Python API for plugins",
);

/**
 * A Python extension module which implements the fast marching method
 */
export const scikit_fmm = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-fmm`,
  "A Python extension module which implements the fast marching method",
);

/**
 * Fuzzy logic toolkit for scientific Python
 */
export const scikit_fuzzy = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-fuzzy`,
  "Fuzzy logic toolkit for scientific Python",
);

/**
 * A common package to provide example files (e.g., ROOT) for testing and developing packages against
 */
export const scikit_hep_testdata = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-hep-testdata`,
  "A common package to provide example files (e.g., ROOT) for testing and developing packages against",
);

/**
 * Image processing routines for SciPy
 */
export const scikit_image = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-image`,
  "Image processing routines for SciPy",
);

/**
 * A set of python modules for machine learning and data mining
 */
export const scikit_learn = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-learn`,
  "A set of python modules for machine learning and data mining",
);

/**
 * A set of tools for scikit-learn
 */
export const scikit_learn_extra = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-learn-extra`,
  "A set of tools for scikit-learn",
);

/**
 * Miscellaneous tools for scientific computing
 */
export const scikit_misc = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-misc`,
  "Miscellaneous tools for scientific computing",
);

/**
 * Multiple Pairwise Comparisons (Post Hoc) Tests in Python
 */
export const scikit_posthocs = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-posthocs`,
  "Multiple Pairwise Comparisons (Post Hoc) Tests in Python",
);

/**
 * A Python library for RF/Microwave engineering
 */
export const scikit_rf = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-rf`,
  "A Python library for RF/Microwave engineering",
);

/**
 * Survival analysis built on top of scikit-learn
 */
export const scikit_survival = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-survival`,
  "Survival analysis built on top of scikit-learn",
);

/**
 * Topological Data Analysis for humans
 */
export const scikit_tda = mkPackage(
  nixRaw`pkgs.python2Packages.scikit-tda`,
  "Topological Data Analysis for humans",
);

/**
 * A scikit offering extra ode/dae solvers, as an extension to what is available in scipy
 */
export const scikits_odes = mkPackage(
  nixRaw`pkgs.python2Packages.scikits-odes`,
  "A scikit offering extra ode/dae solvers, as an extension to what is available in scipy",
);

/**
 * High quality sampling rate convertion from audio data in numpy arrays
 */
export const scikits_samplerate = mkPackage(
  nixRaw`pkgs.python2Packages.scikits-samplerate`,
  "High quality sampling rate convertion from audio data in numpy arrays",
);

/**
 * A customizable parser/transpiler for SCIM2.0 filters
 */
export const scim2_filter_parser = mkPackage(
  nixRaw`pkgs.python2Packages.scim2-filter-parser`,
  "A customizable parser/transpiler for SCIM2.0 filters",
);

/**
 * SciPy (pronounced 'Sigh Pie') is open-source software for mathematics, science, and engineering
 */
export const scipy = mkPackage(
  nixRaw`pkgs.python2Packages.scipy`,
  "SciPy (pronounced 'Sigh Pie') is open-source software for mathematics, science, and engineering",
);

/**
 * SCM wrapper and fsspec filesystem
 */
export const scmrepo = mkPackage(
  nixRaw`pkgs.python2Packages.scmrepo`,
  "SCM wrapper and fsspec filesystem",
);

/**
 * A lightweight tool for reporting Python package versions and hardware resources
 */
export const scooby = mkPackage(
  nixRaw`pkgs.python2Packages.scooby`,
  "A lightweight tool for reporting Python package versions and hardware resources",
);

/**
 * An SVG Optimizer / Cleaner 
 */
export const scour = mkPackage(
  nixRaw`pkgs.python2Packages.scour`,
  "An SVG Optimizer / Cleaner ",
);

/**
 * SCP module for paramiko
 */
export const scp = mkPackage(
  nixRaw`pkgs.python2Packages.scp`,
  "SCP module for paramiko",
);

/**
 * Implementation of the SCRAM authentication protocol
 */
export const scramp = mkPackage(
  nixRaw`pkgs.python2Packages.scramp`,
  "Implementation of the SCRAM authentication protocol",
);

/**
 * A 2D ascii game engine for the terminal
 */
export const scrap_engine = mkPackage(
  nixRaw`pkgs.python2Packages.scrap-engine`,
  "A 2D ascii game engine for the terminal",
);

/**
 * High-level web crawling and web scraping framework
 */
export const scrapy = mkPackage(
  nixRaw`pkgs.python2Packages.scrapy`,
  "High-level web crawling and web scraping framework",
);

/**
 * Scrapy spider middleware to ignore requests to pages containing items seen in previous crawls
 */
export const scrapy_deltafetch = mkPackage(
  nixRaw`pkgs.python2Packages.scrapy-deltafetch`,
  "Scrapy spider middleware to ignore requests to pages containing items seen in previous crawls",
);

/**
 * Random User-Agent middleware based on fake-useragent
 */
export const scrapy_fake_useragent = mkPackage(
  nixRaw`pkgs.python2Packages.scrapy-fake-useragent`,
  "Random User-Agent middleware based on fake-useragent",
);

/**
 * Scrapy+Splash for JavaScript integration
 */
export const scrapy_splash = mkPackage(
  nixRaw`pkgs.python2Packages.scrapy-splash`,
  "Scrapy+Splash for JavaScript integration",
);

/**
 * A simple read-only sequence database, designed for short reads
 */
export const screed = mkPackage(
  nixRaw`pkgs.python2Packages.screed`,
  "A simple read-only sequence database, designed for short reads",
);

/**
 * Fetch location and size of physical screens
 */
export const screeninfo = mkPackage(
  nixRaw`pkgs.python2Packages.screeninfo`,
  "Fetch location and size of physical screens",
);

/**
 * Python interface for Pentair Screenlogic devices
 */
export const screenlogicpy = mkPackage(
  nixRaw`pkgs.python2Packages.screenlogicpy`,
  "Python interface for Pentair Screenlogic devices",
);

/**
 * A library for testing interactive command-line applications
 */
export const scripttest = mkPackage(
  nixRaw`pkgs.python2Packages.scripttest`,
  "A library for testing interactive command-line applications",
);

/**
 * Python interface for SCS: Splitting Conic Solver
 */
export const scs = mkPackage(
  nixRaw`pkgs.python2Packages.scs`,
  "Python interface for SCS: Splitting Conic Solver",
);

/**
 * Module to handle SDDS files
 */
export const sdds = mkPackage(
  nixRaw`pkgs.python2Packages.sdds`,
  "Module to handle SDDS files",
);

/**
 * A drop-in replacement for sdkmanager from the Android SDK written in Python
 */
export const sdkmanager = mkPackage(
  nixRaw`pkgs.python2Packages.sdkmanager`,
  "A drop-in replacement for sdkmanager from the Android SDK written in Python",
);

/**
 * A pure Python implementation of systemd's service notification protocol
 */
export const sdnotify = mkPackage(
  nixRaw`pkgs.python2Packages.sdnotify`,
  "A pure Python implementation of systemd's service notification protocol",
);

/**
 * Statistical data visualization
 */
export const seaborn = mkPackage(
  nixRaw`pkgs.python2Packages.seaborn`,
  "Statistical data visualization",
);

/**
 * A python library to access Ocean Optics spectrometers
 */
export const seabreeze = mkPackage(
  nixRaw`pkgs.python2Packages.seabreeze`,
  "A python library to access Ocean Optics spectrometers",
);

/**
 * File syncing and sharing software with file encryption and group sharing, emphasis on reliability and high performance
 */
export const seaserv = mkPackage(
  nixRaw`pkgs.python2Packages.seaserv`,
  "File syncing and sharing software with file encryption and group sharing, emphasis on reliability and high performance",
);

/**
 * Robustly estimate trend and periodicity in a timeseries
 */
export const seasonal = mkPackage(
  nixRaw`pkgs.python2Packages.seasonal`,
  "Robustly estimate trend and periodicity in a timeseries",
);

/**
 * Python module to communicate with Seat Connect
 */
export const seatconnect = mkPackage(
  nixRaw`pkgs.python2Packages.seatconnect`,
  "Python module to communicate with Seat Connect",
);

/**
 * Python bindings for libseccomp
 */
export const seccomp = mkPackage(
  nixRaw`pkgs.python2Packages.seccomp`,
  "Python bindings for libseccomp",
);

/**
 * Python FFI bindings for secp256k1
 */
export const secp256k1 = mkPackage(
  nixRaw`pkgs.python2Packages.secp256k1`,
  "Python FFI bindings for secp256k1",
);

/**
 * Python bindings to FreeDesktop.org Secret Service API
 */
export const secretstorage = mkPackage(
  nixRaw`pkgs.python2Packages.secretstorage`,
  "Python bindings to FreeDesktop.org Secret Service API",
);

/**
 * library containing functions to write security tools
 */
export const sectools = mkPackage(
  nixRaw`pkgs.python2Packages.sectools`,
  "library containing functions to write security tools",
);

/**
 * Adds optional security headers and cookie attributes for Python web frameworks
 */
export const secure = mkPackage(
  nixRaw`pkgs.python2Packages.secure`,
  "Adds optional security headers and cookie attributes for Python web frameworks",
);

/**
 * Module to handle tarfile backups
 */
export const securetar = mkPackage(
  nixRaw`pkgs.python2Packages.securetar`,
  "Module to handle tarfile backups",
);

/**
 * Module for for creating, editing, and reading folder tree diagrams
 */
export const seedir = mkPackage(
  nixRaw`pkgs.python2Packages.seedir`,
  "Module for for creating, editing, and reading folder tree diagrams",
);

/**
 * A module to obtain and visualize band paths in the Brillouin zone of crystal structures.
 */
export const seekpath = mkPackage(
  nixRaw`pkgs.python2Packages.seekpath`,
  "A module to obtain and visualize band paths in the Brillouin zone of crystal structures.",
);

/**
 * Unicode Standard tokenization routines and orthography profile segmentation
 */
export const segments = mkPackage(
  nixRaw`pkgs.python2Packages.segments`,
  "Unicode Standard tokenization routines and orthography profile segmentation",
);

/**
 * QR Code and Micro QR Code encoder
 */
export const segno = mkPackage(
  nixRaw`pkgs.python2Packages.segno`,
  "QR Code and Micro QR Code encoder",
);

/**
 * Fast Python library for SEGY files
 */
export const segyio = mkPackage(
  nixRaw`pkgs.python2Packages.segyio`,
  "Fast Python library for SEGY files",
);

/**
 * Back-ported, durable, and portable selectors
 */
export const selectors2 = mkPackage(
  nixRaw`pkgs.python2Packages.selectors2`,
  "Back-ported, durable, and portable selectors",
);

/**
 * Bindings for Selenium WebDriver
 */
export const selenium = mkPackage(
  nixRaw`pkgs.python2Packages.selenium`,
  "Bindings for Selenium WebDriver",
);

/**
 * A library implementing the 'SemVer' scheme
 */
export const semantic_version = mkPackage(
  nixRaw`pkgs.python2Packages.semantic-version`,
  "A library implementing the 'SemVer' scheme",
);

/**
 * Simple rule-based bot library for Signal Private Messenger
 */
export const semaphore_bot = mkPackage(
  nixRaw`pkgs.python2Packages.semaphore-bot`,
  "Simple rule-based bot library for Signal Private Messenger",
);

/**
 * Python package to work with Semantic Versioning (http://semver.org/)
 */
export const semver = mkPackage(
  nixRaw`pkgs.python2Packages.semver`,
  "Python package to work with Semantic Versioning (http://semver.org/)",
);

/**
 * Send file to trash natively under macOS, Windows and Linux
 */
export const send2trash = mkPackage(
  nixRaw`pkgs.python2Packages.send2trash`,
  "Send file to trash natively under macOS, Windows and Linux",
);

/**
 * Python client for SendGrid
 */
export const sendgrid = mkPackage(
  nixRaw`pkgs.python2Packages.sendgrid`,
  "Python client for SendGrid",
);

/**
 * API for the Sense Energy Monitor
 */
export const sense_energy = mkPackage(
  nixRaw`pkgs.python2Packages.sense-energy`,
  "API for the Sense Energy Monitor",
);

/**
 * Parser for Sensirion BLE devices
 */
export const sensirion_ble = mkPackage(
  nixRaw`pkgs.python2Packages.sensirion-ble`,
  "Parser for Sensirion BLE devices",
);

/**
 * Models for storing and converting Sensor Data state
 */
export const sensor_state_data = mkPackage(
  nixRaw`pkgs.python2Packages.sensor-state-data`,
  "Models for storing and converting Sensor Data state",
);

/**
 * Library for Sensorpro BLE devices
 */
export const sensorpro_ble = mkPackage(
  nixRaw`pkgs.python2Packages.sensorpro-ble`,
  "Library for Sensorpro BLE devices",
);

/**
 * Library for SensorPush BLE devices
 */
export const sensorpush_ble = mkPackage(
  nixRaw`pkgs.python2Packages.sensorpush-ble`,
  "Library for SensorPush BLE devices",
);

/**
 * Text to sentence splitter using heuristic algorithm by Philipp Koehn and Josh Schroeder
 */
export const sentence_splitter = mkPackage(
  nixRaw`pkgs.python2Packages.sentence-splitter`,
  "Text to sentence splitter using heuristic algorithm by Philipp Koehn and Josh Schroeder",
);

/**
 * Multilingual Sentence & Image Embeddings with BERT
 */
export const sentence_transformers = mkPackage(
  nixRaw`pkgs.python2Packages.sentence-transformers`,
  "Multilingual Sentence & Image Embeddings with BERT",
);

/**
 * Unsupervised text tokenizer for Neural Network-based text generation
 */
export const sentencepiece = mkPackage(
  nixRaw`pkgs.python2Packages.sentencepiece`,
  "Unsupervised text tokenizer for Neural Network-based text generation",
);

/**
 * Create sentinel and singleton objects
 */
export const sentinel = mkPackage(
  nixRaw`pkgs.python2Packages.sentinel`,
  "Create sentinel and singleton objects",
);

/**
 * Various objects to denote special meanings in python
 */
export const sentinels = mkPackage(
  nixRaw`pkgs.python2Packages.sentinels`,
  "Various objects to denote special meanings in python",
);

/**
 * Python SDK for Sentry.io
 */
export const sentry_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.sentry-sdk`,
  "Python SDK for Sentry.io",
);

/**
 * SEPA Direct Debit XML generation in python
 */
export const sepaxml = mkPackage(
  nixRaw`pkgs.python2Packages.sepaxml`,
  "SEPA Direct Debit XML generation in python",
);

/**
 * Generate sequence-diagram image from spec-text file (similar to Graphviz)
 */
export const seqdiag = mkPackage(
  nixRaw`pkgs.python2Packages.seqdiag`,
  "Generate sequence-diagram image from spec-text file (similar to Graphviz)",
);

/**
 * A Python framework for sequence labeling evaluation
 */
export const seqeval = mkPackage(
  nixRaw`pkgs.python2Packages.seqeval`,
  "A Python framework for sequence labeling evaluation",
);

/**
 * Library for concurrency agnostic serial communication
 */
export const serialio = mkPackage(
  nixRaw`pkgs.python2Packages.serialio`,
  "Library for concurrency agnostic serial communication",
);

/**
 * Base class with serialization methods for user-defined Python objects
 */
export const serializable = mkPackage(
  nixRaw`pkgs.python2Packages.serializable`,
  "Base class with serialization methods for user-defined Python objects",
);

/**
 * A simple serialization library based on ast.literal_eval
 */
export const serpent = mkPackage(
  nixRaw`pkgs.python2Packages.serpent`,
  "A simple serialization library based on ast.literal_eval",
);

/**
 * Ridiculously fast object serialization
 */
export const serpy = mkPackage(
  nixRaw`pkgs.python2Packages.serpy`,
  "Ridiculously fast object serialization",
);

/**
 * Serve files from shell via a small HTTP server
 */
export const servefile = mkPackage(
  nixRaw`pkgs.python2Packages.servefile`,
  "Serve files from shell via a small HTTP server",
);

/**
 * An utility that accesses files on a HTTP server and stores them locally for reuse
 */
export const serverfiles = mkPackage(
  nixRaw`pkgs.python2Packages.serverfiles`,
  "An utility that accesses files on a HTTP server and stores them locally for reuse",
);

/**
 * Helpers for working with the AWS Serverless Application Repository
 */
export const serverlessrepo = mkPackage(
  nixRaw`pkgs.python2Packages.serverlessrepo`,
  "Helpers for working with the AWS Serverless Application Repository",
);

/**
 * Service identity verification for pyOpenSSL
 */
export const service_identity = mkPackage(
  nixRaw`pkgs.python2Packages.service-identity`,
  "Service identity verification for pyOpenSSL",
);

/**
 * Allows a process to change its title (as displayed by system tools such as ps and top)
 */
export const setproctitle = mkPackage(
  nixRaw`pkgs.python2Packages.setproctitle`,
  "Allows a process to change its title (as displayed by system tools such as ps and top)",
);

/**
 * Python module to simplify setup.py files
 */
export const setupmeta = mkPackage(
  nixRaw`pkgs.python2Packages.setupmeta`,
  "Python module to simplify setup.py files",
);

/**
 * Utilities to facilitate the installation of Python packages
 */
export const setuptools = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools`,
  "Utilities to facilitate the installation of Python packages",
);

export const setuptoolsBuildHook = mkPackage(
  nixRaw`pkgs.python2Packages.setuptoolsBuildHook`,
  "",
);

export const setuptoolsCheckHook = mkPackage(
  nixRaw`pkgs.python2Packages.setuptoolsCheckHook`,
  "",
);

export const setuptoolsRustBuildHook = mkPackage(
  nixRaw`pkgs.python2Packages.setuptoolsRustBuildHook`,
  "",
);

/**
 * Setuptools plugin that makes unit tests execute with trial instead of pyunit
 */
export const setuptoolsTrial = mkPackage(
  nixRaw`pkgs.python2Packages.setuptoolsTrial`,
  "Setuptools plugin that makes unit tests execute with trial instead of pyunit",
);

/**
 * Setuptools-changelog-shortener: add only newest changelog entries to long_description
 */
export const setuptools_changelog_shortener = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-changelog-shortener`,
  "Setuptools-changelog-shortener: add only newest changelog entries to long_description",
);

/**
 * Declarative setuptools Config Requirements Files Support
 */
export const setuptools_declarative_requirements = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-declarative-requirements`,
  "Declarative setuptools Config Requirements Files Support",
);

/**
 * Generate shell completions and man page when building a python package
 */
export const setuptools_generate = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-generate`,
  "Generate shell completions and man page when building a python package",
);

/**
 * setuptools plugin for building mo files
 */
export const setuptools_gettext = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-gettext`,
  "setuptools plugin for building mo files",
);

/**
 * Setuptools revision control system plugin for Git
 */
export const setuptools_git = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-git`,
  "Setuptools revision control system plugin for Git",
);

/**
 * Use git repo data (latest tag, current commit hash, etc) for building a version number according PEP-440
 */
export const setuptools_git_versioning = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-git-versioning`,
  "Use git repo data (latest tag, current commit hash, etc) for building a version number according PEP-440",
);

/**
 * Package to expose pylint as a lint command into setup.py
 */
export const setuptools_lint = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-lint`,
  "Package to expose pylint as a lint command into setup.py",
);

/**
 * Setuptools plugin for Odoo addons
 */
export const setuptools_odoo = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-odoo`,
  "Setuptools plugin for Odoo addons",
);

/**
 * Setuptools plugin for Rust support
 */
export const setuptools_rust = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-rust`,
  "Setuptools plugin for Rust support",
);

/**
 * Handles managing your python package versions in scm metadata
 */
export const setuptools_scm = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-scm`,
  "Handles managing your python package versions in scm metadata",
);

/**
 * setuptools_scm plugin for git archives
 */
export const setuptools_scm_git_archive = mkPackage(
  nixRaw`pkgs.python2Packages.setuptools-scm-git-archive`,
  "setuptools_scm plugin for git archives",
);

/**
 * Python library to track package info from 17track.com
 */
export const seventeentrack = mkPackage(
  nixRaw`pkgs.python2Packages.seventeentrack`,
  "Python library to track package info from 17track.com",
);

/**
 * S-expression parser for Python
 */
export const sexpdata = mkPackage(
  nixRaw`pkgs.python2Packages.sexpdata`,
  "S-expression parser for Python",
);

/**
 * Simple Finite Elements in Python
 */
export const sfepy = mkPackage(
  nixRaw`pkgs.python2Packages.sfepy`,
  "Simple Finite Elements in Python",
);

/**
 * Module for the SFR Box API
 */
export const sfrbox_api = mkPackage(
  nixRaw`pkgs.python2Packages.sfrbox-api`,
  "Module for the SFR Box API",
);

/**
 * Python 3 port of sgmllib
 */
export const sgmllib3k = mkPackage(
  nixRaw`pkgs.python2Packages.sgmllib3k`,
  "Python 3 port of sgmllib",
);

/**
 * Python version of the SGP4 satellite position library
 */
export const sgp4 = mkPackage(
  nixRaw`pkgs.python2Packages.sgp4`,
  "Python version of the SGP4 satellite position library",
);

/**
 * Python subprocess interface
 */
export const sh = mkPackage(
  nixRaw`pkgs.python2Packages.sh`,
  "Python subprocess interface",
);

/**
 * Reference implementation of SLIP-0039
 */
export const shamir_mnemonic = mkPackage(
  nixRaw`pkgs.python2Packages.shamir-mnemonic`,
  "Reference implementation of SLIP-0039",
);

/**
 * A unified approach to explain the output of any machine learning model
 */
export const shap = mkPackage(
  nixRaw`pkgs.python2Packages.shap`,
  "A unified approach to explain the output of any machine learning model",
);

/**
 * Manipulation and analysis of geometric objects
 */
export const shapely = mkPackage(
  nixRaw`pkgs.python2Packages.shapely`,
  "Manipulation and analysis of geometric objects",
);

/**
 * Easier parallel programming on shared memory computers
 */
export const sharedmem = mkPackage(
  nixRaw`pkgs.python2Packages.sharedmem`,
  "Easier parallel programming on shared memory computers",
);

/**
 * Python API for Shark IQ robots
 */
export const sharkiq = mkPackage(
  nixRaw`pkgs.python2Packages.sharkiq`,
  "Python API for Shark IQ robots",
);

/**
 * A free asynchronous library from reverse engineered Shazam API
 */
export const shazamio = mkPackage(
  nixRaw`pkgs.python2Packages.shazamio`,
  "A free asynchronous library from reverse engineered Shazam API",
);

/**
 * Shell escape a string to safely use it as a token in a shell command (backport of Python shlex.quote)
 */
export const shellescape = mkPackage(
  nixRaw`pkgs.python2Packages.shellescape`,
  "Shell escape a string to safely use it as a token in a shell command (backport of Python shlex.quote)",
);

/**
 * Tool to detect the surrounding shell
 */
export const shellingham = mkPackage(
  nixRaw`pkgs.python2Packages.shellingham`,
  "Tool to detect the surrounding shell",
);

/**
 * Generator for the PySide2 Qt bindings
 */
export const shiboken2 = mkPackage(
  nixRaw`pkgs.python2Packages.shiboken2`,
  "Generator for the PySide2 Qt bindings",
);

/**
 * Generator for the pyside6 Qt bindings
 */
export const shiboken6 = mkPackage(
  nixRaw`pkgs.python2Packages.shiboken6`,
  "Generator for the pyside6 Qt bindings",
);

/**
 * Use Rust failures as Python exceptions
 */
export const shippai = mkPackage(
  nixRaw`pkgs.python2Packages.shippai`,
  "Use Rust failures as Python exceptions",
);

/**
 * Command line utility for building fully self contained Python zipapps
 */
export const shiv = mkPackage(
  nixRaw`pkgs.python2Packages.shiv`,
  "Command line utility for building fully self contained Python zipapps",
);

/**
 * shell library
 */
export const shlib = mkPackage(
  nixRaw`pkgs.python2Packages.shlib`,
  "shell library",
);

/**
 * Python library and command-line utility for Shodan
 */
export const shodan = mkPackage(
  nixRaw`pkgs.python2Packages.shodan`,
  "Python library and command-line utility for Shodan",
);

/**
 * Library to generate concise, unambiguous and URL-safe UUIDs
 */
export const shortuuid = mkPackage(
  nixRaw`pkgs.python2Packages.shortuuid`,
  "Library to generate concise, unambiguous and URL-safe UUIDs",
);

/**
 * Should assertions in Python as clear and readable as possible
 */
export const should_dsl = mkPackage(
  nixRaw`pkgs.python2Packages.should-dsl`,
  "Should assertions in Python as clear and readable as possible",
);

/**
 * Python Assertion Helpers inspired by Shouldly
 */
export const shouldbe = mkPackage(
  nixRaw`pkgs.python2Packages.shouldbe`,
  "Python Assertion Helpers inspired by Shouldly",
);

/**
 * Open the system file manager and select files in it
 */
export const show_in_file_manager = mkPackage(
  nixRaw`pkgs.python2Packages.show-in-file-manager`,
  "Open the system file manager and select files in it",
);

/**
 * simple and sensible display of images
 */
export const showit = mkPackage(
  nixRaw`pkgs.python2Packages.showit`,
  "simple and sensible display of images",
);

/**
 * Module for shell tab completion of Python CLI applications
 */
export const shtab = mkPackage(
  nixRaw`pkgs.python2Packages.shtab`,
  "Module for shell tab completion of Python CLI applications",
);

/**
 * Backport of shutil.which
 */
export const shutilwhich = mkPackage(
  nixRaw`pkgs.python2Packages.shutilwhich`,
  "Backport of shutil.which",
);

/**
 * Client-side Sieve and Managesieve library written in Python
 */
export const sievelib = mkPackage(
  nixRaw`pkgs.python2Packages.sievelib`,
  "Client-side Sieve and Managesieve library written in Python",
);

/**
 * Simple Signal/Slot implementation
 */
export const signalslot = mkPackage(
  nixRaw`pkgs.python2Packages.signalslot`,
  "Simple Signal/Slot implementation",
);

/**
 * Sign JSON with Ed25519 signatures
 */
export const signedjson = mkPackage(
  nixRaw`pkgs.python2Packages.signedjson`,
  "Sign JSON with Ed25519 signatures",
);

/**
 * Python bindings for libsigrok
 */
export const sigrok = mkPackage(
  nixRaw`pkgs.python2Packages.sigrok`,
  "Python bindings for libsigrok",
);

/**
 * Utilities for working with inspect.Signature objects
 */
export const sigtools = mkPackage(
  nixRaw`pkgs.python2Packages.sigtools`,
  "Utilities for working with inspect.Signature objects",
);

/**
 * A python implementation of the simulated annealing optimization technique
 */
export const simanneal = mkPackage(
  nixRaw`pkgs.python2Packages.simanneal`,
  "A python implementation of the simulated annealing optimization technique",
);

/**
 * Simple, minimal and powerful logger for Python
 */
export const simber = mkPackage(
  nixRaw`pkgs.python2Packages.simber`,
  "Simple, minimal and powerful logger for Python",
);

/**
 * Library for fuzzy logic
 */
export const simpful = mkPackage(
  nixRaw`pkgs.python2Packages.simpful`,
  "Library for fuzzy logic",
);

/**
 * Simple dependency injection library
 */
export const simple_di = mkPackage(
  nixRaw`pkgs.python2Packages.simple-di`,
  "Simple dependency injection library",
);

/**
 * Simple REST client for Python
 */
export const simple_rest_client = mkPackage(
  nixRaw`pkgs.python2Packages.simple-rest-client`,
  "Simple REST client for Python",
);

/**
 * Simple RLP (Recursive Length Prefix)
 */
export const simple_rlp = mkPackage(
  nixRaw`pkgs.python2Packages.simple-rlp`,
  "Simple RLP (Recursive Length Prefix)",
);

/**
 * A very simple Salesforce.com REST API client for Python
 */
export const simple_salesforce = mkPackage(
  nixRaw`pkgs.python2Packages.simple-salesforce`,
  "A very simple Salesforce.com REST API client for Python",
);

/**
 * Simple WebSocket server and client for Python
 */
export const simple_websocket = mkPackage(
  nixRaw`pkgs.python2Packages.simple-websocket`,
  "Simple WebSocket server and client for Python",
);

/**
 * A python based websocket server that is simple and easy to use
 */
export const simple_websocket_server = mkPackage(
  nixRaw`pkgs.python2Packages.simple-websocket-server`,
  "A python based websocket server that is simple and easy to use",
);

/**
 * A simple audio playback Python extension - cross-platform, asynchronous, dependency-free
 */
export const simpleaudio = mkPackage(
  nixRaw`pkgs.python2Packages.simpleaudio`,
  "A simple audio playback Python extension - cross-platform, asynchronous, dependency-free",
);

/**
 * Memory-based naive bayesian text classifier
 */
export const simplebayes = mkPackage(
  nixRaw`pkgs.python2Packages.simplebayes`,
  "Memory-based naive bayesian text classifier",
);

/**
 * Simple, safe single expression evaluator library
 */
export const simpleeval = mkPackage(
  nixRaw`pkgs.python2Packages.simpleeval`,
  "Simple, safe single expression evaluator library",
);

/**
 * Simple FIX Protocol implementation for Python
 */
export const simplefix = mkPackage(
  nixRaw`pkgs.python2Packages.simplefix`,
  "Simple FIX Protocol implementation for Python",
);

/**
 * Simple generic functions
 */
export const simplegeneric = mkPackage(
  nixRaw`pkgs.python2Packages.simplegeneric`,
  "Simple generic functions",
);

/**
 * Python API for Sighthound
 */
export const simplehound = mkPackage(
  nixRaw`pkgs.python2Packages.simplehound`,
  "Python API for Sighthound",
);

/**
 * Simplified interface to ITK
 */
export const simpleitk = mkPackage(
  nixRaw`pkgs.python2Packages.simpleitk`,
  "Simplified interface to ITK",
);

/**
 * Extensible JSON encoder/decoder for Python
 */
export const simplejson = mkPackage(
  nixRaw`pkgs.python2Packages.simplejson`,
  "Extensible JSON encoder/decoder for Python",
);

/**
 * Python package to generate KML
 */
export const simplekml = mkPackage(
  nixRaw`pkgs.python2Packages.simplekml`,
  "Python package to generate KML",
);

/**
 * A simple key-value store for binary data
 */
export const simplekv = mkPackage(
  nixRaw`pkgs.python2Packages.simplekv`,
  "A simple key-value store for binary data",
);

/**
 * Simple multilingual lemmatizer for Python, especially useful for speed and efficiency
 */
export const simplemma = mkPackage(
  nixRaw`pkgs.python2Packages.simplemma`,
  "Simple multilingual lemmatizer for Python, especially useful for speed and efficiency",
);

/**
 * A python library for the simplenote.com web service
 */
export const simplenote = mkPackage(
  nixRaw`pkgs.python2Packages.simplenote`,
  "A python library for the simplenote.com web service",
);

/**
 * Module to send push notifications via Simplepush
 */
export const simplepush = mkPackage(
  nixRaw`pkgs.python2Packages.simplepush`,
  "Module to send push notifications via Simplepush",
);

/**
 * Prototype for SAT-based dependency handling
 */
export const simplesat = mkPackage(
  nixRaw`pkgs.python2Packages.simplesat`,
  "Prototype for SAT-based dependency handling",
);

/**
 * Python library the SimpliSafe API
 */
export const simplisafe_python = mkPackage(
  nixRaw`pkgs.python2Packages.simplisafe-python`,
  "Python library the SimpliSafe API",
);

/**
 * Process-based discrete-event simulation framework based on standard Python
 */
export const simpy = mkPackage(
  nixRaw`pkgs.python2Packages.simpy`,
  "Process-based discrete-event simulation framework based on standard Python",
);

/**
 * Access to the project version in Python code for PEP 621-style projects
 */
export const single_source = mkPackage(
  nixRaw`pkgs.python2Packages.single-source`,
  "Access to the project version in Python code for PEP 621-style projects",
);

/**
 * Utility to let you have a single source of version in your code base
 */
export const single_version = mkPackage(
  nixRaw`pkgs.python2Packages.single-version`,
  "Utility to let you have a single source of version in your code base",
);

/**
 * A Sans-I/O Python client library for Brultech Devices
 */
export const siobrultech_protocols = mkPackage(
  nixRaw`pkgs.python2Packages.siobrultech-protocols`,
  "A Sans-I/O Python client library for Brultech Devices",
);

/**
 * Python socks 4/5 client/server library/framework
 */
export const siosocks = mkPackage(
  nixRaw`pkgs.python2Packages.siosocks`,
  "Python socks 4/5 client/server library/framework",
);

/**
 * Creates C++ bindings for Python modules
 */
export const sip = mkPackage(
  nixRaw`pkgs.python2Packages.sip`,
  "Creates C++ bindings for Python modules",
);

/**
 * Creates C++ bindings for Python modules
 */
export const sip_4 = mkPackage(
  nixRaw`pkgs.python2Packages.sip_4`,
  "Creates C++ bindings for Python modules",
);

/**
 * Simple Python Communications - used by the ARTIQ experimental control package
 */
export const sipyco = mkPackage(
  nixRaw`pkgs.python2Packages.sipyco`,
  "Simple Python Communications - used by the ARTIQ experimental control package",
);

/**
 * Control your Sisyphus Kinetic Art Table
 */
export const sisyphus_control = mkPackage(
  nixRaw`pkgs.python2Packages.sisyphus-control`,
  "Control your Sisyphus Kinetic Art Table",
);

/**
 * Use dplyr-like syntax with pandas and SQL
 */
export const siuba = mkPackage(
  nixRaw`pkgs.python2Packages.siuba`,
  "Use dplyr-like syntax with pandas and SQL",
);

/**
 * Python 2 and 3 compatibility library
 */
export const six = mkPackage(
  nixRaw`pkgs.python2Packages.six`,
  "Python 2 and 3 compatibility library",
);

/**
 * Decrypt and encrypt messages compatible to the "Stanford Javascript Crypto Library (SJCL)" message format. This is a wrapper around pycrypto.
 */
export const sjcl = mkPackage(
  nixRaw`pkgs.python2Packages.sjcl`,
  "Decrypt and encrypt messages compatible to the \"Stanford Javascript Crypto Library (SJCL)\" message format. This is a wrapper around pycrypto.",
);

/**
 * Module that extends Python with the ability to design electronic circuits
 */
export const skidl = mkPackage(
  nixRaw`pkgs.python2Packages.skidl`,
  "Module that extends Python with the ability to design electronic circuits",
);

/**
 * Convert scikit-learn models to ONNX
 */
export const skl2onnx = mkPackage(
  nixRaw`pkgs.python2Packages.skl2onnx`,
  "Convert scikit-learn models to ONNX",
);

/**
 * Use evolutionary algorithms instead of gridsearch in scikit-learn
 */
export const sklearn_deap = mkPackage(
  nixRaw`pkgs.python2Packages.sklearn-deap`,
  "Use evolutionary algorithms instead of gridsearch in scikit-learn",
);

/**
 * Python module to communicate with Skoda Connect
 */
export const skodaconnect = mkPackage(
  nixRaw`pkgs.python2Packages.skodaconnect`,
  "Python module to communicate with Skoda Connect",
);

/**
 * Scikit-learn compatible neural net library using Pytorch
 */
export const skorch = mkPackage(
  nixRaw`pkgs.python2Packages.skorch`,
  "Scikit-learn compatible neural net library using Pytorch",
);

/**
 * Reinforcement learning library using PyTorch focusing on readability and simplicity
 */
export const skrl = mkPackage(
  nixRaw`pkgs.python2Packages.skrl`,
  "Reinforcement learning library using PyTorch focusing on readability and simplicity",
);

/**
 * Python wrapper for the Skybell alarm API
 */
export const skybellpy = mkPackage(
  nixRaw`pkgs.python2Packages.skybellpy`,
  "Python wrapper for the Skybell alarm API",
);

/**
 * Elegant astronomy for Python
 */
export const skyfield = mkPackage(
  nixRaw`pkgs.python2Packages.skyfield`,
  "Elegant astronomy for Python",
);

/**
 * A format for standardized rule-based tilesets with 256 adjacency combinations
 */
export const skytemple_dtef = mkPackage(
  nixRaw`pkgs.python2Packages.skytemple-dtef`,
  "A format for standardized rule-based tilesets with 256 adjacency combinations",
);

/**
 * Websocket server that emits SkyTemple UI events
 */
export const skytemple_eventserver = mkPackage(
  nixRaw`pkgs.python2Packages.skytemple-eventserver`,
  "Websocket server that emits SkyTemple UI events",
);

/**
 * Python library to edit the ROM of Pokémon Mystery Dungeon Explorers of Sky
 */
export const skytemple_files = mkPackage(
  nixRaw`pkgs.python2Packages.skytemple-files`,
  "Python library to edit the ROM of Pokémon Mystery Dungeon Explorers of Sky",
);

/**
 * Icons for SkyTemple
 */
export const skytemple_icons = mkPackage(
  nixRaw`pkgs.python2Packages.skytemple-icons`,
  "Icons for SkyTemple",
);

/**
 * Binary Rust extensions for SkyTemple
 */
export const skytemple_rust = mkPackage(
  nixRaw`pkgs.python2Packages.skytemple-rust`,
  "Binary Rust extensions for SkyTemple",
);

/**
 * Script Engine Debugger for Pokémon Mystery Dungeon Explorers of Sky
 */
export const skytemple_ssb_debugger = mkPackage(
  nixRaw`pkgs.python2Packages.skytemple-ssb-debugger`,
  "Script Engine Debugger for Pokémon Mystery Dungeon Explorers of Sky",
);

/**
 * A framework to build Slack apps using Python
 */
export const slack_bolt = mkPackage(
  nixRaw`pkgs.python2Packages.slack-bolt`,
  "A framework to build Slack apps using Python",
);

/**
 * Slack Developer Kit for Python
 */
export const slack_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.slack-sdk`,
  "Slack Developer Kit for Python",
);

/**
 * A client for Slack, which supports the Slack Web API and Real Time Messaging (RTM) API
 */
export const slackclient = mkPackage(
  nixRaw`pkgs.python2Packages.slackclient`,
  "A client for Slack, which supports the Slack Web API and Real Time Messaging (RTM) API",
);

/**
 * XMPP library for Python
 */
export const sleekxmpp = mkPackage(
  nixRaw`pkgs.python2Packages.sleekxmpp`,
  "XMPP library for Python",
);

/**
 * Python module for SleepIQ API
 */
export const sleepyq = mkPackage(
  nixRaw`pkgs.python2Packages.sleepyq`,
  "Python module for SleepIQ API",
);

/**
 * Library to access sliced imaging data
 */
export const slicedimage = mkPackage(
  nixRaw`pkgs.python2Packages.slicedimage`,
  "Library to access sliced imaging data",
);

/**
 * Wraps tensor-like objects and provides a uniform slicing interface via __getitem__
 */
export const slicer = mkPackage(
  nixRaw`pkgs.python2Packages.slicer`,
  "Wraps tensor-like objects and provides a uniform slicing interface via __getitem__",
);

/**
 * A lazy-loading, fancy-sliceable iterable
 */
export const slicerator = mkPackage(
  nixRaw`pkgs.python2Packages.slicerator`,
  "A lazy-loading, fancy-sliceable iterable",
);

/**
 * SlimIt -  a JavaScript minifier/parser in Python
 */
export const slimit = mkPackage(
  nixRaw`pkgs.python2Packages.slimit`,
  "SlimIt -  a JavaScript minifier/parser in Python",
);

/**
 * Static Analyzer for Solidity
 */
export const slither_analyzer = mkPackage(
  nixRaw`pkgs.python2Packages.slither-analyzer`,
  "Static Analyzer for Solidity",
);

/**
 * Python library for XMPP
 */
export const slixmpp = mkPackage(
  nixRaw`pkgs.python2Packages.slixmpp`,
  "Python library for XMPP",
);

/**
 * Reference implementation of the slob (sorted list of blobs) format
 */
export const slob = mkPackage(
  nixRaw`pkgs.python2Packages.slob`,
  "Reference implementation of the slob (sorted list of blobs) format",
);

/**
 * Deep-learning based NLP modeling for Russian language
 */
export const slovnet = mkPackage(
  nixRaw`pkgs.python2Packages.slovnet`,
  "Deep-learning based NLP modeling for Russian language",
);

/**
 * Python library for API rate limiting
 */
export const slowapi = mkPackage(
  nixRaw`pkgs.python2Packages.slowapi`,
  "Python library for API rate limiting",
);

/**
 * Simple lua-python parser
 */
export const slpp = mkPackage(
  nixRaw`pkgs.python2Packages.slpp`,
  "Simple lua-python parser",
);

/**
 * URL-safe base64 UUID encoder for generating 22 character slugs
 */
export const slugid = mkPackage(
  nixRaw`pkgs.python2Packages.slugid`,
  "URL-safe base64 UUID encoder for generating 22 character slugs",
);

/**
 * An improved PLY implementation of lex and yacc for Python 3
 */
export const sly = mkPackage(
  nixRaw`pkgs.python2Packages.sly`,
  "An improved PLY implementation of lex and yacc for Python 3",
);

/**
 * Connect to and retrieve data from the unofficial Smart Meter Texas API
 */
export const smart_meter_texas = mkPackage(
  nixRaw`pkgs.python2Packages.smart-meter-texas`,
  "Connect to and retrieve data from the unofficial Smart Meter Texas API",
);

/**
 * Library for efficient streaming of very large file
 */
export const smart_open = mkPackage(
  nixRaw`pkgs.python2Packages.smart-open`,
  "Library for efficient streaming of very large file",
);

/**
 * Control devices in a SmartHab-powered home
 */
export const smarthab = mkPackage(
  nixRaw`pkgs.python2Packages.smarthab`,
  "Control devices in a SmartHab-powered home",
);

/**
 * Python with the SmartyPants
 */
export const smartypants = mkPackage(
  nixRaw`pkgs.python2Packages.smartypants`,
  "Python with the SmartyPants",
);

/**
 * Python SMBv2 and v3 Client
 */
export const smbprotocol = mkPackage(
  nixRaw`pkgs.python2Packages.smbprotocol`,
  "Python SMBv2 and v3 Client",
);

/**
 * Drop-in replacement for smbus-cffi/smbus-python
 */
export const smbus2 = mkPackage(
  nixRaw`pkgs.python2Packages.smbus2`,
  "Drop-in replacement for smbus-cffi/smbus-python",
);

/**
 * Python module for SMBus access through Linux I2C /dev interface
 */
export const smbus_cffi = mkPackage(
  nixRaw`pkgs.python2Packages.smbus-cffi`,
  "Python module for SMBus access through Linux I2C /dev interface",
);

/**
 * These builtin rules are available in Amazon SageMaker
 */
export const smdebug_rulesconfig = mkPackage(
  nixRaw`pkgs.python2Packages.smdebug-rulesconfig`,
  "These builtin rules are available in Amazon SageMaker",
);

/**
 * Python library for accessing SMHI open forecast data
 */
export const smhi_pkg = mkPackage(
  nixRaw`pkgs.python2Packages.smhi-pkg`,
  "Python library for accessing SMHI open forecast data",
);

/**
 * A pure python implementation of a sliding window memory map manager
 */
export const smmap = mkPackage(
  nixRaw`pkgs.python2Packages.smmap`,
  "A pure python implementation of a sliding window memory map manager",
);

/**
 * Library for parsing Protocol Data Units (PDUs) in SMPP protocol
 */
export const smpp_pdu = mkPackage(
  nixRaw`pkgs.python2Packages.smpp_pdu`,
  "Library for parsing Protocol Data Units (PDUs) in SMPP protocol",
);

/**
 * SMPP library for Python
 */
export const smpplib = mkPackage(
  nixRaw`pkgs.python2Packages.smpplib`,
  "SMPP library for Python",
);

/**
 * Library for color text mode, widget based user interfaces
 */
export const snack = mkPackage(
  nixRaw`pkgs.python2Packages.snack`,
  "Library for color text mode, widget based user interfaces",
);

/**
 * Pure Python HDFS client
 */
export const snakebite = mkPackage(
  nixRaw`pkgs.python2Packages.snakebite`,
  "Pure Python HDFS client",
);

/**
 * Browser based viewer for profiling data
 */
export const snakeviz = mkPackage(
  nixRaw`pkgs.python2Packages.snakeviz`,
  "Browser based viewer for profiling data",
);

/**
 * Control Snapcast, a multi-room synchronous audio solution
 */
export const snapcast = mkPackage(
  nixRaw`pkgs.python2Packages.snapcast`,
  "Control Snapcast, a multi-room synchronous audio solution",
);

/**
 * Snapshot testing for pytest, unittest, Django, and Nose
 */
export const snapshottest = mkPackage(
  nixRaw`pkgs.python2Packages.snapshottest`,
  "Snapshot testing for pytest, unittest, Django, and Nose",
);

/**
 * Transform timestamps with a simple DSL
 */
export const snaptime = mkPackage(
  nixRaw`pkgs.python2Packages.snaptime`,
  "Transform timestamps with a simple DSL",
);

/**
 * Sniff out which async library your code is running under
 */
export const sniffio = mkPackage(
  nixRaw`pkgs.python2Packages.sniffio`,
  "Sniff out which async library your code is running under",
);

/**
 * SNI proxy with TCP multiplexer
 */
export const snitun = mkPackage(
  nixRaw`pkgs.python2Packages.snitun`,
  "SNI proxy with TCP multiplexer",
);

/**
 * A system for quickly generating training data with weak supervision
 */
export const snorkel = mkPackage(
  nixRaw`pkgs.python2Packages.snorkel`,
  "A system for quickly generating training data with weak supervision",
);

/**
 * 16 stemmer algorithms (15 + Poerter English stemmer) generated from Snowball algorithms
 */
export const snowballstemmer = mkPackage(
  nixRaw`pkgs.python2Packages.snowballstemmer`,
  "16 stemmer algorithms (15 + Poerter English stemmer) generated from Snowball algorithms",
);

/**
 * Snowflake Connector for Python
 */
export const snowflake_connector_python = mkPackage(
  nixRaw`pkgs.python2Packages.snowflake-connector-python`,
  "Snowflake Connector for Python",
);

/**
 * A social networking service scraper
 */
export const snscrape = mkPackage(
  nixRaw`pkgs.python2Packages.snscrape`,
  "A social networking service scraper",
);

/**
 * S-expressions for Numpy
 */
export const snuggs = mkPackage(
  nixRaw`pkgs.python2Packages.snuggs`,
  "S-expressions for Numpy",
);

/**
 * Vendor and platform neutral SDR support library
 */
export const soapysdr = mkPackage(
  nixRaw`pkgs.python2Packages.soapysdr`,
  "Vendor and platform neutral SDR support library",
);

/**
 * Vendor and platform neutral SDR support library
 */
export const soapysdr_with_plugins = mkPackage(
  nixRaw`pkgs.python2Packages.soapysdr-with-plugins`,
  "Vendor and platform neutral SDR support library",
);

/**
 * Module for social authentication/registration mechanism
 */
export const social_auth_app_django = mkPackage(
  nixRaw`pkgs.python2Packages.social-auth-app-django`,
  "Module for social authentication/registration mechanism",
);

/**
 * Module for social authentication/registration mechanisms
 */
export const social_auth_core = mkPackage(
  nixRaw`pkgs.python2Packages.social-auth-core`,
  "Module for social authentication/registration mechanisms",
);

/**
 * Python library and CLI for accurately querying username and email usage on online platforms
 */
export const socialscan = mkPackage(
  nixRaw`pkgs.python2Packages.socialscan`,
  "Python library and CLI for accurately querying username and email usage on online platforms",
);

/**
 * Python module to extract details from personal pages
 */
export const socid_extractor = mkPackage(
  nixRaw`pkgs.python2Packages.socid-extractor`,
  "Python module to extract details from personal pages",
);

/**
 * A socket.io client library for protocol 1.x
 */
export const socketio_client = mkPackage(
  nixRaw`pkgs.python2Packages.socketio-client`,
  "A socket.io client library for protocol 1.x",
);

/**
 * Implementation of the Modbus protocol
 */
export const sockio = mkPackage(
  nixRaw`pkgs.python2Packages.sockio`,
  "Implementation of the Modbus protocol",
);

/**
 * Sockjs server
 */
export const sockjs = mkPackage(
  nixRaw`pkgs.python2Packages.sockjs`,
  "Sockjs server",
);

/**
 * SockJS python server implementation on top of Tornado framework
 */
export const sockjs_tornado = mkPackage(
  nixRaw`pkgs.python2Packages.sockjs-tornado`,
  "SockJS python server implementation on top of Tornado framework",
);

/**
 * Sans-I/O implementation of SOCKS4, SOCKS4A, and SOCKS5
 */
export const socksio = mkPackage(
  nixRaw`pkgs.python2Packages.socksio`,
  "Sans-I/O implementation of SOCKS4, SOCKS4A, and SOCKS5",
);

/**
 * This Python module allows you to create TCP connections through a SOCKS proxy without any special effort
 */
export const socksipy_branch = mkPackage(
  nixRaw`pkgs.python2Packages.socksipy-branch`,
  "This Python module allows you to create TCP connections through a SOCKS proxy without any special effort",
);

/**
 * CLI and library to control Sonos speakers
 */
export const soco = mkPackage(
  nixRaw`pkgs.python2Packages.soco`,
  "CLI and library to control Sonos speakers",
);

/**
 * Python libraries that assist in calling the SoftLayer API
 */
export const softlayer = mkPackage(
  nixRaw`pkgs.python2Packages.softlayer`,
  "Python libraries that assist in calling the SoftLayer API",
);

/**
 * Python wrapper for Solaredge monitoring service
 */
export const solaredge = mkPackage(
  nixRaw`pkgs.python2Packages.solaredge`,
  "Python wrapper for Solaredge monitoring service",
);

/**
 * Python wrapper for the Solax Inverter API
 */
export const solax = mkPackage(
  nixRaw`pkgs.python2Packages.solax`,
  "Python wrapper for the Solax Inverter API",
);

/**
 * Manage and switch between Solidity compiler versions
 */
export const solc_select = mkPackage(
  nixRaw`pkgs.python2Packages.solc-select`,
  "Manage and switch between Solidity compiler versions",
);

/**
 * Tokenizer and sentence splitter for German and English web texts
 */
export const somajo = mkPackage(
  nixRaw`pkgs.python2Packages.somajo`,
  "Tokenizer and sentence splitter for German and English web texts",
);

/**
 * Python API to utilise the Somfy Synergy JsonRPC API
 */
export const somfy_mylink_synergy = mkPackage(
  nixRaw`pkgs.python2Packages.somfy-mylink-synergy`,
  "Python API to utilise the Somfy Synergy JsonRPC API",
);

/**
 * Asynchronous Python client for the Sonarr API
 */
export const sonarr = mkPackage(
  nixRaw`pkgs.python2Packages.sonarr`,
  "Asynchronous Python client for the Sonarr API",
);

/**
 * Library to communicate with Sonos devices over websockets
 */
export const sonos_websocket = mkPackage(
  nixRaw`pkgs.python2Packages.sonos-websocket`,
  "Library to communicate with Sonos devices over websockets",
);

/**
 * Simple and extensible IRC bot
 */
export const sopel = mkPackage(
  nixRaw`pkgs.python2Packages.sopel`,
  "Simple and extensible IRC bot",
);

/**
 * Thumbnails for Django
 */
export const sorl_thumbnail = mkPackage(
  nixRaw`pkgs.python2Packages.sorl_thumbnail`,
  "Thumbnails for Django",
);

/**
 * Python Sorted Collections
 */
export const sortedcollections = mkPackage(
  nixRaw`pkgs.python2Packages.sortedcollections`,
  "Python Sorted Collections",
);

/**
 * Python Sorted Container Types: SortedList, SortedDict, and SortedSet
 */
export const sortedcontainers = mkPackage(
  nixRaw`pkgs.python2Packages.sortedcontainers`,
  "Python Sorted Container Types: SortedList, SortedDict, and SortedSet",
);

/**
 * Python wrapper for the v2 SoundCloud API
 */
export const soundcloud_v2 = mkPackage(
  nixRaw`pkgs.python2Packages.soundcloud-v2`,
  "Python wrapper for the v2 SoundCloud API",
);

/**
 * Play and Record Sound with Python
 */
export const sounddevice = mkPackage(
  nixRaw`pkgs.python2Packages.sounddevice`,
  "Play and Record Sound with Python",
);

/**
 * An audio library based on libsndfile, CFFI and NumPy
 */
export const soundfile = mkPackage(
  nixRaw`pkgs.python2Packages.soundfile`,
  "An audio library based on libsndfile, CFFI and NumPy",
);

/**
 * A CSS4 selector implementation for Beautiful Soup
 */
export const soupsieve = mkPackage(
  nixRaw`pkgs.python2Packages.soupsieve`,
  "A CSS4 selector implementation for Beautiful Soup",
);

/**
 * Quickly search, compare, and analyze genomic and metagenomic data sets
 */
export const sourmash = mkPackage(
  nixRaw`pkgs.python2Packages.sourmash`,
  "Quickly search, compare, and analyze genomic and metagenomic data sets",
);

/**
 * High quality, one-dimensional sample-rate conversion library
 */
export const soxr = mkPackage(
  nixRaw`pkgs.python2Packages.soxr`,
  "High quality, one-dimensional sample-rate conversion library",
);

/**
 * Industrial-strength Natural Language Processing (NLP)
 */
export const spacy = mkPackage(
  nixRaw`pkgs.python2Packages.spacy`,
  "Industrial-strength Natural Language Processing (NLP)",
);

/**
 * Align tokenizations for spaCy and transformers
 */
export const spacy_alignments = mkPackage(
  nixRaw`pkgs.python2Packages.spacy-alignments`,
  "Align tokenizations for spaCy and transformers",
);

/**
 * Legacy registered functions for spaCy backwards compatibility
 */
export const spacy_legacy = mkPackage(
  nixRaw`pkgs.python2Packages.spacy-legacy`,
  "Legacy registered functions for spaCy backwards compatibility",
);

/**
 * Logging utilities for spaCy
 */
export const spacy_loggers = mkPackage(
  nixRaw`pkgs.python2Packages.spacy-loggers`,
  "Logging utilities for spaCy",
);

/**
 * Additional lookup tables and data resources for spaCy
 */
export const spacy_lookups_data = mkPackage(
  nixRaw`pkgs.python2Packages.spacy-lookups-data`,
  "Additional lookup tables and data resources for spaCy",
);

/**
 * Toolkit for multi-domain Chinese word segmentation (spaCy fork)
 */
export const spacy_pkuseg = mkPackage(
  nixRaw`pkgs.python2Packages.spacy-pkuseg`,
  "Toolkit for multi-domain Chinese word segmentation (spaCy fork)",
);

/**
 * spaCy pipelines for pretrained BERT, XLNet and GPT-2
 */
export const spacy_transformers = mkPackage(
  nixRaw`pkgs.python2Packages.spacy-transformers`,
  "spaCy pipelines for pretrained BERT, XLNet and GPT-2",
);

/**
 * SPAKE2 password-authenticated key exchange library
 */
export const spake2 = mkPackage(
  nixRaw`pkgs.python2Packages.spake2`,
  "SPAKE2 password-authenticated key exchange library",
);

/**
 * An Early-Algorithm Context-free grammar Parser
 */
export const spark_parser = mkPackage(
  nixRaw`pkgs.python2Packages.spark_parser`,
  "An Early-Algorithm Context-free grammar Parser",
);

/**
 * This Python package implements Edward Tufte's concept of sparklines, but limited to text only
 */
export const sparklines = mkPackage(
  nixRaw`pkgs.python2Packages.sparklines`,
  "This Python package implements Edward Tufte's concept of sparklines, but limited to text only",
);

/**
 * This is a wrapper around a SPARQL service. It helps in creating the query URI and, possibly, convert the result into a more manageable format
 */
export const sparqlwrapper = mkPackage(
  nixRaw`pkgs.python2Packages.sparqlwrapper`,
  "This is a wrapper around a SPARQL service. It helps in creating the query URI and, possibly, convert the result into a more manageable format",
);

/**
 * Sparse n-dimensional arrays computations
 */
export const sparse = mkPackage(
  nixRaw`pkgs.python2Packages.sparse`,
  "Sparse n-dimensional arrays computations",
);

/**
 * SPDX parser and tools
 */
export const spdx_tools = mkPackage(
  nixRaw`pkgs.python2Packages.spdx-tools`,
  "SPDX parser and tools",
);

/**
 * Implements a lazy string for python useful for use with gettext
 */
export const speaklater = mkPackage(
  nixRaw`pkgs.python2Packages.speaklater`,
  "Implements a lazy string for python useful for use with gettext",
);

/**
 * Implements a lazy string for python useful for use with gettext
 */
export const speaklater3 = mkPackage(
  nixRaw`pkgs.python2Packages.speaklater3`,
  "Implements a lazy string for python useful for use with gettext",
);

/**
 * A PyTorch-based Speech Toolkit
 */
export const speechbrain = mkPackage(
  nixRaw`pkgs.python2Packages.speechbrain`,
  "A PyTorch-based Speech Toolkit",
);

/**
 * Command line interface for testing internet bandwidth using speedtest.net
 */
export const speedtest_cli = mkPackage(
  nixRaw`pkgs.python2Packages.speedtest-cli`,
  "Command line interface for testing internet bandwidth using speedtest.net",
);

/**
 * A PEG-based parser interpreter with memoization (in time)
 */
export const speg = mkPackage(
  nixRaw`pkgs.python2Packages.speg`,
  "A PEG-based parser interpreter with memoization (in time)",
);

/**
 * Python bindings for C library for finding and handling crystal symmetries
 */
export const spglib = mkPackage(
  nixRaw`pkgs.python2Packages.spglib`,
  "Python bindings for C library for finding and handling crystal symmetries",
);

/**
 * Numpy-based NIST SPH audio-file reader
 */
export const sphfile = mkPackage(
  nixRaw`pkgs.python2Packages.sphfile`,
  "Numpy-based NIST SPH audio-file reader",
);

/**
 * Python documentation generator
 */
export const sphinx = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx`,
  "Python documentation generator",
);

export const sphinxHook = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxHook`,
  "",
);

/**
 * A sphinx extension that automatically documents argparse commands and options
 */
export const sphinx_argparse = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-argparse`,
  "A sphinx extension that automatically documents argparse commands and options",
);

/**
 * Provides 'autodoc' style documentation
 */
export const sphinx_autoapi = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-autoapi`,
  "Provides 'autodoc' style documentation",
);

/**
 * Rebuild Sphinx documentation on changes, with live-reload in the browser
 */
export const sphinx_autobuild = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-autobuild`,
  "Rebuild Sphinx documentation on changes, with live-reload in the browser",
);

/**
 * Type hints (PEP 484) support for the Sphinx autodoc extension
 */
export const sphinx_autodoc_typehints = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-autodoc-typehints`,
  "Type hints (PEP 484) support for the Sphinx autodoc extension",
);

/**
 * Sphinx extension for generating API documentation
 */
export const sphinx_automodapi = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-automodapi`,
  "Sphinx extension for generating API documentation",
);

/**
 * A modernised skeleton for Sphinx themes
 */
export const sphinx_basic_ng = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-basic-ng`,
  "A modernised skeleton for Sphinx themes",
);

/**
 * Better Sphinx Theme
 */
export const sphinx_better_theme = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-better-theme`,
  "Better Sphinx Theme",
);

/**
 * A clean book theme for scientific explanations and documentation with Sphinx
 */
export const sphinx_book_theme = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-book-theme`,
  "A clean book theme for scientific explanations and documentation with Sphinx",
);

/**
 * A sphinx extension that makes code examples clickable
 */
export const sphinx_codeautolink = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-codeautolink`,
  "A sphinx extension that makes code examples clickable",
);

/**
 * Add comments and annotation to your documentation
 */
export const sphinx_comments = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-comments`,
  "Add comments and annotation to your documentation",
);

/**
 * A small sphinx extension to add a "copy" button to code blocks
 */
export const sphinx_copybutton = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-copybutton`,
  "A small sphinx extension to add a \"copy\" button to code blocks",
);

/**
 * A sphinx extension for designing beautiful, view size responsive web components
 */
export const sphinx_design = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-design`,
  "A sphinx extension for designing beautiful, view size responsive web components",
);

/**
 * A sphinx extension that allows the site-map to be defined in a single YAML file
 */
export const sphinx_external_toc = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-external-toc`,
  "A sphinx extension that allows the site-map to be defined in a single YAML file",
);

/**
 * Fortran domain and autodoc extensions to Sphinx
 */
export const sphinx_fortran = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-fortran`,
  "Fortran domain and autodoc extensions to Sphinx",
);

/**
 * A sphinx extension for creating tooltips on the cross references of the documentation
 */
export const sphinx_hoverxref = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-hoverxref`,
  "A sphinx extension for creating tooltips on the cross references of the documentation",
);

/**
 * Add inline tabbed content to your Sphinx documentation
 */
export const sphinx_inline_tabs = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-inline-tabs`,
  "Add inline tabbed content to your Sphinx documentation",
);

/**
 * Sphinx utility that make it easy to translate and to apply translation
 */
export const sphinx_intl = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-intl`,
  "Sphinx utility that make it easy to translate and to apply translation",
);

/**
 * Sphinx extension for linking to your project's issue tracker.
 */
export const sphinx_issues = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-issues`,
  "Sphinx extension for linking to your project's issue tracker.",
);

/**
 * Sphinx extension to include jinja templates in documentation
 */
export const sphinx_jinja = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-jinja`,
  "Sphinx extension to include jinja templates in documentation",
);

/**
 * Latex specific features for jupyter book
 */
export const sphinx_jupyterbook_latex = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-jupyterbook-latex`,
  "Latex specific features for jupyter book",
);

/**
 * Write markdown inside of docutils & sphinx projects
 */
export const sphinx_markdown_parser = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-markdown-parser`,
  "Write markdown inside of docutils & sphinx projects",
);

/**
 * Sphinx extension for rendering tables written in markdown
 */
export const sphinx_markdown_tables = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-markdown-tables`,
  "Sphinx extension for rendering tables written in markdown",
);

/**
 * A material-based, responsive theme inspired by mkdocs-material
 */
export const sphinx_material = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-material`,
  "A material-based, responsive theme inspired by mkdocs-material",
);

/**
 * Sphinx extension for including or writing pages in Markdown format.
 */
export const sphinx_mdinclude = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-mdinclude`,
  "Sphinx extension for including or writing pages in Markdown format.",
);

/**
 * Supporting continuous HTML section numbering
 */
export const sphinx_multitoc_numbering = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-multitoc-numbering`,
  "Supporting continuous HTML section numbering",
);

/**
 * A sphinx extension to create a custom 404 page with absolute URLs hardcoded
 */
export const sphinx_notfound_page = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-notfound-page`,
  "A sphinx extension to create a custom 404 page with absolute URLs hardcoded",
);

/**
 * A sphinx extension for creating unselectable prompt
 */
export const sphinx_prompt = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-prompt`,
  "A sphinx extension for creating unselectable prompt",
);

/**
 * Helpful pytest fixtures for Sphinx extensions
 */
export const sphinx_pytest = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-pytest`,
  "Helpful pytest fixtures for Sphinx extensions",
);

/**
 * Sphinx theme for readthedocs.org
 */
export const sphinx_rtd_theme = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-rtd-theme`,
  "Sphinx theme for readthedocs.org",
);

/**
 * Spawns a simple HTTP server to preview your sphinx documents
 */
export const sphinx_serve = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-serve`,
  "Spawns a simple HTTP server to preview your sphinx documents",
);

/**
 * Sitemap generator for Sphinx
 */
export const sphinx_sitemap = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-sitemap`,
  "Sitemap generator for Sphinx",
);

/**
 * A sphinx extension for creating tabbed content when building HTML.
 */
export const sphinx_tabs = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-tabs`,
  "A sphinx extension for creating tabbed content when building HTML.",
);

/**
 * Testing utility classes and functions for Sphinx extensions
 */
export const sphinx_testing = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-testing`,
  "Testing utility classes and functions for Sphinx extensions",
);

/**
 * Integrate interactive code blocks into your documentation with Thebe and Binder
 */
export const sphinx_thebe = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-thebe`,
  "Integrate interactive code blocks into your documentation with Thebe and Binder",
);

/**
 * Toggle page content and collapse admonitions in Sphinx
 */
export const sphinx_togglebutton = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-togglebutton`,
  "Toggle page content and collapse admonitions in Sphinx",
);

/**
 * A sphinx extension to show a warning banner at the top of your documentation
 */
export const sphinx_version_warning = mkPackage(
  nixRaw`pkgs.python2Packages.sphinx-version-warning`,
  "A sphinx extension to show a warning banner at the top of your documentation",
);

/**
 * Sphinx actdiag extension
 */
export const sphinxcontrib_actdiag = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-actdiag`,
  "Sphinx actdiag extension",
);

/**
 * Sphinx extension for running sphinx-apidoc on each build
 */
export const sphinxcontrib_apidoc = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-apidoc`,
  "Sphinx extension for running sphinx-apidoc on each build",
);

/**
 * sphinxcontrib-applehelp is a sphinx extension which outputs Apple help books
 */
export const sphinxcontrib_applehelp = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-applehelp`,
  "sphinxcontrib-applehelp is a sphinx extension which outputs Apple help books",
);

/**
 * Sphinx extension to add asyncio-specific markups
 */
export const sphinxcontrib_asyncio = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-asyncio`,
  "Sphinx extension to add asyncio-specific markups",
);

/**
 * Bayesian networks and factor graphs in Sphinx using TikZ syntax
 */
export const sphinxcontrib_bayesnet = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-bayesnet`,
  "Bayesian networks and factor graphs in Sphinx using TikZ syntax",
);

/**
 * A Sphinx extension for BibTeX style citations
 */
export const sphinxcontrib_bibtex = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-bibtex`,
  "A Sphinx extension for BibTeX style citations",
);

/**
 * Sphinx blockdiag extension
 */
export const sphinxcontrib_blockdiag = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-blockdiag`,
  "Sphinx blockdiag extension",
);

/**
 * Confluence builder for sphinx
 */
export const sphinxcontrib_confluencebuilder = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-confluencebuilder`,
  "Confluence builder for sphinx",
);

/**
 * sphinxcontrib-devhelp is a sphinx extension which outputs Devhelp document.
 */
export const sphinxcontrib_devhelp = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-devhelp`,
  "sphinxcontrib-devhelp is a sphinx extension which outputs Devhelp document.",
);

/**
 * Sphinx excel-table extension
 */
export const sphinxcontrib_excel_table = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-excel-table`,
  "Sphinx excel-table extension",
);

/**
 * Include a full table of contents in your Sphinx HTML sidebar
 */
export const sphinxcontrib_fulltoc = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-fulltoc`,
  "Include a full table of contents in your Sphinx HTML sidebar",
);

/**
 * Sphinx extension which renders HTML help files
 */
export const sphinxcontrib_htmlhelp = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-htmlhelp`,
  "Sphinx extension which renders HTML help files",
);

/**
 * Provides a Sphinx domain for describing RESTful HTTP APIs
 */
export const sphinxcontrib_httpdomain = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib_httpdomain`,
  "Provides a Sphinx domain for describing RESTful HTTP APIs",
);

/**
 * Extension to include jQuery on newer Sphinx releases
 */
export const sphinxcontrib_jquery = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-jquery`,
  "Extension to include jQuery on newer Sphinx releases",
);

/**
 * sphinxcontrib-jsmath is a sphinx extension which renders display math in HTML via JavaScript.
 */
export const sphinxcontrib_jsmath = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-jsmath`,
  "sphinxcontrib-jsmath is a sphinx extension which renders display math in HTML via JavaScript.",
);

/**
 * Sphinx extension using KaTeX to render math in HTML
 */
export const sphinxcontrib_katex = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-katex`,
  "Sphinx extension using KaTeX to render math in HTML",
);

/**
 * Sphinx extension to organize changelogs
 */
export const sphinxcontrib_log_cabinet = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-log-cabinet`,
  "Sphinx extension to organize changelogs",
);

/**
 * Sphinx extension using mscgen to render diagrams
 */
export const sphinxcontrib_mscgen = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-mscgen`,
  "Sphinx extension using mscgen to render diagrams",
);

/**
 * Extension for adding a simple Blog, News or Announcements section to a Sphinx website
 */
export const sphinxcontrib_newsfeed = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib_newsfeed`,
  "Extension for adding a simple Blog, News or Announcements section to a Sphinx website",
);

/**
 * Sphinx nwdiag extension
 */
export const sphinxcontrib_nwdiag = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-nwdiag`,
  "Sphinx nwdiag extension",
);

/**
 * OpenAPI (fka Swagger) spec renderer for Sphinx
 */
export const sphinxcontrib_openapi = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-openapi`,
  "OpenAPI (fka Swagger) spec renderer for Sphinx",
);

/**
 * Provides a Sphinx domain for embedding UML diagram with PlantUML
 */
export const sphinxcontrib_plantuml = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-plantuml`,
  "Provides a Sphinx domain for embedding UML diagram with PlantUML",
);

/**
 * Sphinx extension to include program output
 */
export const sphinxcontrib_programoutput = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-programoutput`,
  "Sphinx extension to include program output",
);

/**
 * sphinxcontrib-qthelp is a sphinx extension which outputs QtHelp document.
 */
export const sphinxcontrib_qthelp = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-qthelp`,
  "sphinxcontrib-qthelp is a sphinx extension which outputs QtHelp document.",
);

/**
 * Sphinx seqdiag extension
 */
export const sphinxcontrib_seqdiag = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-seqdiag`,
  "Sphinx seqdiag extension",
);

/**
 * sphinxcontrib-serializinghtml is a sphinx extension which outputs "serialized" HTML files (json and pickle).
 */
export const sphinxcontrib_serializinghtml = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-serializinghtml`,
  "sphinxcontrib-serializinghtml is a sphinx extension which outputs \"serialized\" HTML files (json and pickle).",
);

/**
 * Sphinx spelling extension
 */
export const sphinxcontrib_spelling = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-spelling`,
  "Sphinx spelling extension",
);

/**
 * TikZ extension for Sphinx
 */
export const sphinxcontrib_tikz = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-tikz`,
  "TikZ extension for Sphinx",
);

/**
 * Sphinx API for Web Apps
 */
export const sphinxcontrib_websupport = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-websupport`,
  "Sphinx API for Web Apps",
);

/**
 * Youtube extension for Sphinx
 */
export const sphinxcontrib_youtube = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxcontrib-youtube`,
  "Youtube extension for Sphinx",
);

/**
 * Extension to use emoji codes in your Sphinx documentation
 */
export const sphinxemoji = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxemoji`,
  "Extension to use emoji codes in your Sphinx documentation",
);

/**
 * Sphinx extension to generate unique OpenGraph metadata
 */
export const sphinxext_opengraph = mkPackage(
  nixRaw`pkgs.python2Packages.sphinxext-opengraph`,
  "Sphinx extension to generate unique OpenGraph metadata",
);

/**
 * Unofficial Python wrapper for the Spider API
 */
export const spiderpy = mkPackage(
  nixRaw`pkgs.python2Packages.spiderpy`,
  "Unofficial Python wrapper for the Spider API",
);

/**
 * Python bindings for Linux SPI access through spidev
 */
export const spidev = mkPackage(
  nixRaw`pkgs.python2Packages.spidev`,
  "Python bindings for Linux SPI access through spidev",
);

/**
 * Spinners for the Terminal.
 */
export const spinners = mkPackage(
  nixRaw`pkgs.python2Packages.spinners`,
  "Spinners for the Terminal.",
);

/**
 * Browser abstraction for web acceptance testing
 */
export const splinter = mkPackage(
  nixRaw`pkgs.python2Packages.splinter`,
  "Browser abstraction for web acceptance testing",
);

/**
 * Library for the Spotify Web API
 */
export const spotipy = mkPackage(
  nixRaw`pkgs.python2Packages.spotipy`,
  "Library for the Spotify Web API",
);

/**
 * NXP Secure Provisioning SDK
 */
export const spsdk = mkPackage(
  nixRaw`pkgs.python2Packages.spsdk`,
  "NXP Secure Provisioning SDK",
);

/**
 * Python module to run commands and manipulate files locally or over SSH
 */
export const spur = mkPackage(
  nixRaw`pkgs.python2Packages.spur`,
  "Python module to run commands and manipulate files locally or over SSH",
);

/**
 * Scientific python development environment
 */
export const spyder = mkPackage(
  nixRaw`pkgs.python2Packages.spyder`,
  "Scientific python development environment",
);

/**
 * Jupyter kernels for Spyder's console
 */
export const spyder_kernels = mkPackage(
  nixRaw`pkgs.python2Packages.spyder-kernels`,
  "Jupyter kernels for Spyder's console",
);

/**
 * Python module for spyse.com API
 */
export const spyse_python = mkPackage(
  nixRaw`pkgs.python2Packages.spyse-python`,
  "Python module for spyse.com API",
);

/**
 * A library that lets you generate short YouTube-looking IDs from numbers
 */
export const sqids = mkPackage(
  nixRaw`pkgs.python2Packages.sqids`,
  "A library that lets you generate short YouTube-looking IDs from numbers",
);

/**
 * The Python SQL toolkit and Object Relational Mapper
 */
export const sqlalchemy = mkPackage(
  nixRaw`pkgs.python2Packages.sqlalchemy`,
  "The Python SQL toolkit and Object Relational Mapper",
);

/**
 * A sqlalchemy plugin that allows postgres use of CITEXT
 */
export const sqlalchemy_citext = mkPackage(
  nixRaw`pkgs.python2Packages.sqlalchemy-citext`,
  "A sqlalchemy plugin that allows postgres use of CITEXT",
);

/**
 * Versioning and auditing extension for SQLAlchemy
 */
export const sqlalchemy_continuum = mkPackage(
  nixRaw`pkgs.python2Packages.sqlalchemy-continuum`,
  "Versioning and auditing extension for SQLAlchemy",
);

/**
 * Internationalization extension for SQLAlchemy models
 */
export const sqlalchemy_i18n = mkPackage(
  nixRaw`pkgs.python2Packages.sqlalchemy-i18n`,
  "Internationalization extension for SQLAlchemy models",
);

/**
 * SQLALchemy JSONField implementation for storing dicts at SQL independently from JSON type support
 */
export const sqlalchemy_jsonfield = mkPackage(
  nixRaw`pkgs.python2Packages.sqlalchemy-jsonfield`,
  "SQLALchemy JSONField implementation for storing dicts at SQL independently from JSON type support",
);

/**
 * Python mixins for SQLAlchemy ORM
 */
export const sqlalchemy_mixins = mkPackage(
  nixRaw`pkgs.python2Packages.sqlalchemy-mixins`,
  "Python mixins for SQLAlchemy ORM",
);

/**
 * Various utility functions and datatypes for SQLAlchemy
 */
export const sqlalchemy_utils = mkPackage(
  nixRaw`pkgs.python2Packages.sqlalchemy-utils`,
  "Various utility functions and datatypes for SQLAlchemy",
);

/**
 * Adds CreateView and DropView constructs to SQLAlchemy
 */
export const sqlalchemy_views = mkPackage(
  nixRaw`pkgs.python2Packages.sqlalchemy-views`,
  "Adds CreateView and DropView constructs to SQLAlchemy",
);

/**
 * Handy python code for doing database things
 */
export const sqlbag = mkPackage(
  nixRaw`pkgs.python2Packages.sqlbag`,
  "Handy python code for doing database things",
);

/**
 * A no dependency Python SQL parser, transpiler, and optimizer
 */
export const sqlglot = mkPackage(
  nixRaw`pkgs.python2Packages.sqlglot`,
  "A no dependency Python SQL parser, transpiler, and optimizer",
);

/**
 * Custom Python functions for working with SQLite FTS4
 */
export const sqlite_fts4 = mkPackage(
  nixRaw`pkgs.python2Packages.sqlite-fts4`,
  "Custom Python functions for working with SQLite FTS4",
);

/**
 * Python CLI utility and library for manipulating SQLite databases
 */
export const sqlite_utils = mkPackage(
  nixRaw`pkgs.python2Packages.sqlite-utils`,
  "Python CLI utility and library for manipulating SQLite databases",
);

/**
 * Persistent, thread-safe dict
 */
export const sqlitedict = mkPackage(
  nixRaw`pkgs.python2Packages.sqlitedict`,
  "Persistent, thread-safe dict",
);

/**
 * Automatic SQL injection and database takeover tool
 */
export const sqlmap = mkPackage(
  nixRaw`pkgs.python2Packages.sqlmap`,
  "Automatic SQL injection and database takeover tool",
);

/**
 * Object Relational Manager for providing an object interface to your database
 */
export const sqlobject = mkPackage(
  nixRaw`pkgs.python2Packages.sqlobject`,
  "Object Relational Manager for providing an object interface to your database",
);

/**
 * Non-validating SQL parser for Python
 */
export const sqlparse = mkPackage(
  nixRaw`pkgs.python2Packages.sqlparse`,
  "Non-validating SQL parser for Python",
);

/**
 * DVC's data management subsystem
 */
export const sqltrie = mkPackage(
  nixRaw`pkgs.python2Packages.sqltrie`,
  "DVC's data management subsystem",
);

/**
 * Pure Python implementation of the squarify treemap layout algorithm
 */
export const squarify = mkPackage(
  nixRaw`pkgs.python2Packages.squarify`,
  "Pure Python implementation of the squarify treemap layout algorithm",
);

/**
 * Implementation of the Secure Remote Password protocol (SRP)
 */
export const srp = mkPackage(
  nixRaw`pkgs.python2Packages.srp`,
  "Implementation of the Secure Remote Password protocol (SRP)",
);

/**
 * Unofficial Python module for interacting with Srp Energy data
 */
export const srpenergy = mkPackage(
  nixRaw`pkgs.python2Packages.srpenergy`,
  "Unofficial Python module for interacting with Srp Energy data",
);

/**
 * Module to implement Secure Remote Password (SRP) authentication
 */
export const srptools = mkPackage(
  nixRaw`pkgs.python2Packages.srptools`,
  "Module to implement Secure Remote Password (SRP) authentication",
);

/**
 * Modern high-performance serialization utilities for Python
 */
export const srsly = mkPackage(
  nixRaw`pkgs.python2Packages.srsly`,
  "Modern high-performance serialization utilities for Python",
);

/**
 * A tiny but featureful Python library for parsing, modifying, and composing SRT files
 */
export const srt = mkPackage(
  nixRaw`pkgs.python2Packages.srt`,
  "A tiny but featureful Python library for parsing, modifying, and composing SRT files",
);

/**
 * Wrapper for dnspython to return SRV records for a given host, protocol, and domain name
 */
export const srvlookup = mkPackage(
  nixRaw`pkgs.python2Packages.srvlookup`,
  "Wrapper for dnspython to return SRV records for a given host, protocol, and domain name",
);

/**
 * Python wrapper for the ssdeep library
 */
export const ssdeep = mkPackage(
  nixRaw`pkgs.python2Packages.ssdeep`,
  "Python wrapper for the ssdeep library",
);

/**
 * Python asyncio library for Simple Service Discovery Protocol (SSDP)
 */
export const ssdp = mkPackage(
  nixRaw`pkgs.python2Packages.ssdp`,
  "Python asyncio library for Simple Service Discovery Protocol (SSDP)",
);

/**
 * A lightweight, compatible SSDP library for Python
 */
export const ssdpy = mkPackage(
  nixRaw`pkgs.python2Packages.ssdpy`,
  "A lightweight, compatible SSDP library for Python",
);

/**
 * Client library for reading Server Sent Event streams
 */
export const sseclient = mkPackage(
  nixRaw`pkgs.python2Packages.sseclient`,
  "Client library for reading Server Sent Event streams",
);

/**
 * Pure-Python Server Side Events (SSE) client
 */
export const sseclient_py = mkPackage(
  nixRaw`pkgs.python2Packages.sseclient-py`,
  "Pure-Python Server Side Events (SSE) client",
);

/**
 * SSH/SFTP implementation for fsspec
 */
export const sshfs = mkPackage(
  nixRaw`pkgs.python2Packages.sshfs`,
  "SSH/SFTP implementation for fsspec",
);

/**
 * OpenSSH Public Key Parser for Python
 */
export const sshpubkeys = mkPackage(
  nixRaw`pkgs.python2Packages.sshpubkeys`,
  "OpenSSH Public Key Parser for Python",
);

/**
 * Pure python SSH tunnels
 */
export const sshtunnel = mkPackage(
  nixRaw`pkgs.python2Packages.sshtunnel`,
  "Pure python SSH tunnels",
);

/**
 * A Python3 library for sharing secrets
 */
export const sslib = mkPackage(
  nixRaw`pkgs.python2Packages.sslib`,
  "A Python3 library for sharing secrets",
);

/**
 * Extract data from stack frames and tracebacks
 */
export const stack_data = mkPackage(
  nixRaw`pkgs.python2Packages.stack-data`,
  "Extract data from stack frames and tracebacks",
);

/**
 * Preparing inputs to and reading outputs from Stan
 */
export const stanio = mkPackage(
  nixRaw`pkgs.python2Packages.stanio`,
  "Preparing inputs to and reading outputs from Stan",
);

/**
 * Official Stanford NLP Python Library for Many Human Languages
 */
export const stanza = mkPackage(
  nixRaw`pkgs.python2Packages.stanza`,
  "Official Stanford NLP Python Library for Many Human Languages",
);

/**
 * Python ECDSA library
 */
export const starkbank_ecdsa = mkPackage(
  nixRaw`pkgs.python2Packages.starkbank-ecdsa`,
  "Python ECDSA library",
);

/**
 * The little ASGI framework that shines
 */
export const starlette = mkPackage(
  nixRaw`pkgs.python2Packages.starlette`,
  "The little ASGI framework that shines",
);

/**
 * Unofficial python library for StarLine API
 */
export const starline = mkPackage(
  nixRaw`pkgs.python2Packages.starline`,
  "Unofficial python library for StarLine API",
);

/**
 * Python client for the Atlassian Bitbucket Server (formerly known as Stash) REST API.
 */
export const stashy = mkPackage(
  nixRaw`pkgs.python2Packages.stashy`,
  "Python client for the Atlassian Bitbucket Server (formerly known as Stash) REST API.",
);

/**
 * A really simple WSGI way to serve static (or mixed) content
 */
export const static3 = mkPackage(
  nixRaw`pkgs.python2Packages.static3`,
  "A really simple WSGI way to serve static (or mixed) content",
);

/**
 * A library and cli tool that makes it easy to build static sites using Jinja2
 */
export const staticjinja = mkPackage(
  nixRaw`pkgs.python2Packages.staticjinja`,
  "A library and cli tool that makes it easy to build static sites using Jinja2",
);

/**
 * A small, python-based library for creating map images with lines and markers
 */
export const staticmap = mkPackage(
  nixRaw`pkgs.python2Packages.staticmap`,
  "A small, python-based library for creating map images with lines and markers",
);

/**
 * A Python 2.* port of 3.4 Statistics Module
 */
export const statistics = mkPackage(
  nixRaw`pkgs.python2Packages.statistics`,
  "A Python 2.* port of 3.4 Statistics Module",
);

/**
 * Applies STAT information from a Stylespace to a variable font
 */
export const statmake = mkPackage(
  nixRaw`pkgs.python2Packages.statmake`,
  "Applies STAT information from a Stylespace to a variable font",
);

/**
 * A simple statsd client
 */
export const statsd = mkPackage(
  nixRaw`pkgs.python2Packages.statsd`,
  "A simple statsd client",
);

/**
 * Statistical computations and models for use with SciPy
 */
export const statsmodels = mkPackage(
  nixRaw`pkgs.python2Packages.statsmodels`,
  "Statistical computations and models for use with SciPy",
);

/**
 * Dependency to chadtree and coq_nvim plugins
 */
export const std2 = mkPackage(
  nixRaw`pkgs.python2Packages.std2`,
  "Dependency to chadtree and coq_nvim plugins",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const stdenv = mkPackage(
  nixRaw`pkgs.python2Packages.stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * Python module for masking passwords
 */
export const stdiomask = mkPackage(
  nixRaw`pkgs.python2Packages.stdiomask`,
  "Python module for masking passwords",
);

/**
 * A list of Python Standard Libraries
 */
export const stdlib_list = mkPackage(
  nixRaw`pkgs.python2Packages.stdlib-list`,
  "A list of Python Standard Libraries",
);

/**
 * Overview of the Python stdlib
 */
export const stdlibs = mkPackage(
  nixRaw`pkgs.python2Packages.stdlibs`,
  "Overview of the Python stdlib",
);

/**
 * High level Steam API implementation with low level reusable core
 */
export const steamodd = mkPackage(
  nixRaw`pkgs.python2Packages.steamodd`,
  "High level Steam API implementation with low level reusable core",
);

/**
 * The fastest way to add language AI to your product
 */
export const steamship = mkPackage(
  nixRaw`pkgs.python2Packages.steamship`,
  "The fastest way to add language AI to your product",
);

/**
 * Controller library that allows applications to interact with Tor
 */
export const stem = mkPackage(
  nixRaw`pkgs.python2Packages.stem`,
  "Controller library that allows applications to interact with Tor",
);

/**
 * Python implementations of various stemming algorithms.
 */
export const stemming = mkPackage(
  nixRaw`pkgs.python2Packages.stemming`,
  "Python implementations of various stemming algorithms.",
);

/**
 * A parallel Python test runner built around subunit
 */
export const stestr = mkPackage(
  nixRaw`pkgs.python2Packages.stestr`,
  "A parallel Python test runner built around subunit",
);

/**
 * Manage dynamic plugins for Python applications
 */
export const stevedore = mkPackage(
  nixRaw`pkgs.python2Packages.stevedore`,
  "Manage dynamic plugins for Python applications",
);

/**
 * Python module to convert Python packages into a single script
 */
export const stickytape = mkPackage(
  nixRaw`pkgs.python2Packages.stickytape`,
  "Python module to convert Python packages into a single script",
);

/**
 * A tool for high performance simulation and analysis of quantum stabilizer circuits, especially quantum error correction (QEC) circuits.
 */
export const stim = mkPackage(
  nixRaw`pkgs.python2Packages.stim`,
  "A tool for high performance simulation and analysis of quantum stabilizer circuits, especially quantum error correction (QEC) circuits.",
);

/**
 * Validate patterns used to express cyber observable content in STIX Indicators
 */
export const stix2_patterns = mkPackage(
  nixRaw`pkgs.python2Packages.stix2-patterns`,
  "Validate patterns used to express cyber observable content in STIX Indicators",
);

/**
 * Flash firmware to STM32 microcontrollers in Python
 */
export const stm32loader = mkPackage(
  nixRaw`pkgs.python2Packages.stm32loader`,
  "Flash firmware to STM32 microcontrollers in Python",
);

/**
 * Official Api Spec Language for Dropbox
 */
export const stone = mkPackage(
  nixRaw`pkgs.python2Packages.stone`,
  "Official Api Spec Language for Dropbox",
);

/**
 * Python package for the RIVM Stookalert
 */
export const stookalert = mkPackage(
  nixRaw`pkgs.python2Packages.stookalert`,
  "Python package for the RIVM Stookalert",
);

/**
 * Raise asynchronous exceptions in other thread, control the timeout of blocks or callables with a context manager or a decorator
 */
export const stopit = mkPackage(
  nixRaw`pkgs.python2Packages.stopit`,
  "Raise asynchronous exceptions in other thread, control the timeout of blocks or callables with a context manager or a decorator",
);

/**
 * A lightweight Python parser library for ANSI escape code sequences
 */
export const stransi = mkPackage(
  nixRaw`pkgs.python2Packages.stransi`,
  "A lightweight Python parser library for ANSI escape code sequences",
);

/**
 * A Python library for control flow programming
 */
export const strategies = mkPackage(
  nixRaw`pkgs.python2Packages.strategies`,
  "A Python library for control flow programming",
);

/**
 * Python library for interacting with Strava v3 REST API
 */
export const stravalib = mkPackage(
  nixRaw`pkgs.python2Packages.stravalib`,
  "Python library for interacting with Strava v3 REST API",
);

/**
 * A GraphQL library for Python that leverages type annotations
 */
export const strawberry_graphql = mkPackage(
  nixRaw`pkgs.python2Packages.strawberry-graphql`,
  "A GraphQL library for Python that leverages type annotations",
);

/**
 * Python library to control the Elgato Stream Deck
 */
export const streamdeck = mkPackage(
  nixRaw`pkgs.python2Packages.streamdeck`,
  "Python library to control the Elgato Stream Deck",
);

/**
 * Streaming parser for multipart/form-data
 */
export const streaming_form_data = mkPackage(
  nixRaw`pkgs.python2Packages.streaming-form-data`,
  "Streaming parser for multipart/form-data",
);

/**
 * Python library for the StreamLabs API
 */
export const streamlabswater = mkPackage(
  nixRaw`pkgs.python2Packages.streamlabswater`,
  "Python library for the StreamLabs API",
);

/**
 * The fastest way to build custom ML tools
 */
export const streamlit = mkPackage(
  nixRaw`pkgs.python2Packages.streamlit`,
  "The fastest way to build custom ML tools",
);

/**
 * Pipelines to manage continuous streams of data
 */
export const streamz = mkPackage(
  nixRaw`pkgs.python2Packages.streamz`,
  "Pipelines to manage continuous streams of data",
);

/**
 * MOdule for enum that inherits from str
 */
export const strenum = mkPackage(
  nixRaw`pkgs.python2Packages.strenum`,
  "MOdule for enum that inherits from str",
);

/**
 * Strict, simple, lightweight RFC3339 functions
 */
export const strict_rfc3339 = mkPackage(
  nixRaw`pkgs.python2Packages.strict-rfc3339`,
  "Strict, simple, lightweight RFC3339 functions",
);

/**
 * Strict, typed YAML parser
 */
export const strictyaml = mkPackage(
  nixRaw`pkgs.python2Packages.strictyaml`,
  "Strict, typed YAML parser",
);

/**
 * Convert string cases between camel case, pascal case, snake case etc…
 */
export const stringcase = mkPackage(
  nixRaw`pkgs.python2Packages.stringcase`,
  "Convert string cases between camel case, pascal case, snake case etc…",
);

/**
 * Stringly: Human Readable Object Serialization
 */
export const stringly = mkPackage(
  nixRaw`pkgs.python2Packages.stringly`,
  "Stringly: Human Readable Object Serialization",
);

/**
 * Easy to use pattern matching and information extraction
 */
export const stringparser = mkPackage(
  nixRaw`pkgs.python2Packages.stringparser`,
  "Easy to use pattern matching and information extraction",
);

/**
 * Stripe Python bindings
 */
export const stripe = mkPackage(
  nixRaw`pkgs.python2Packages.stripe`,
  "Stripe Python bindings",
);

/**
 * A simple library to convert rtf to text
 */
export const striprtf = mkPackage(
  nixRaw`pkgs.python2Packages.striprtf`,
  "A simple library to convert rtf to text",
);

/**
 * Painless structural logging
 */
export const structlog = mkPackage(
  nixRaw`pkgs.python2Packages.structlog`,
  "Painless structural logging",
);

/**
 * Web and FTP server for use in unit and7or acceptance tests
 */
export const stubserver = mkPackage(
  nixRaw`pkgs.python2Packages.stubserver`,
  "Web and FTP server for use in unit and7or acceptance tests",
);

/**
 * Library that can be used for a variety of time series data mining tasks
 */
export const stumpy = mkPackage(
  nixRaw`pkgs.python2Packages.stumpy`,
  "Library that can be used for a variety of time series data mining tasks",
);

/**
 * Helper library for all STUPS command line tools.
 */
export const stups_cli_support = mkPackage(
  nixRaw`pkgs.python2Packages.stups-cli-support`,
  "Helper library for all STUPS command line tools.",
);

/**
 * Convenience command line tool for fullstop. audit reporting.
 */
export const stups_fullstop = mkPackage(
  nixRaw`pkgs.python2Packages.stups-fullstop`,
  "Convenience command line tool for fullstop. audit reporting.",
);

/**
 * Convenient command line client for STUPS' Pier One Docker registry
 */
export const stups_pierone = mkPackage(
  nixRaw`pkgs.python2Packages.stups-pierone`,
  "Convenient command line client for STUPS' Pier One Docker registry",
);

/**
 * A Python library that keeps OAuth 2.0 service access tokens in memory for your usage.
 */
export const stups_tokens = mkPackage(
  nixRaw`pkgs.python2Packages.stups-tokens`,
  "A Python library that keeps OAuth 2.0 service access tokens in memory for your usage.",
);

/**
 * OAuth2 token management command line utility.
 */
export const stups_zign = mkPackage(
  nixRaw`pkgs.python2Packages.stups-zign`,
  "OAuth2 token management command line utility.",
);

/**
 * A modular package to control stimulation and track behaviour
 */
export const stytra = mkPackage(
  nixRaw`pkgs.python2Packages.stytra`,
  "A modular package to control stimulation and track behaviour",
);

/**
 * Python module for interacting with STARLINK-enabled vehicle
 */
export const subarulink = mkPackage(
  nixRaw`pkgs.python2Packages.subarulink`,
  "Python module for interacting with STARLINK-enabled vehicle",
);

/**
 * Python library to search and download subtitles
 */
export const subliminal = mkPackage(
  nixRaw`pkgs.python2Packages.subliminal`,
  "Python library to search and download subtitles",
);

/**
 * A subprocess.run drop-in replacement that supports a tee mode
 */
export const subprocess_tee = mkPackage(
  nixRaw`pkgs.python2Packages.subprocess-tee`,
  "A subprocess.run drop-in replacement that supports a tee mode",
);

/**
 * A streaming protocol for test results
 */
export const subunit = mkPackage(
  nixRaw`pkgs.python2Packages.subunit`,
  "A streaming protocol for test results",
);

/**
 * Command to Read a subunit file or stream and put the data in a SQL DB
 */
export const subunit2sql = mkPackage(
  nixRaw`pkgs.python2Packages.subunit2sql`,
  "Command to Read a subunit file or stream and put the data in a SQL DB",
);

/**
 * Python module to help with the enumeration of subdomains
 */
export const subzerod = mkPackage(
  nixRaw`pkgs.python2Packages.subzerod`,
  "Python module to help with the enumeration of subdomains",
);

/**
 * Collect POST requests
 */
export const succulent = mkPackage(
  nixRaw`pkgs.python2Packages.succulent`,
  "Collect POST requests",
);

/**
 * Python port of the R summarytools package for summarizing dataframes
 */
export const summarytools = mkPackage(
  nixRaw`pkgs.python2Packages.summarytools`,
  "Python port of the R summarytools package for summarizing dataframes",
);

/**
 * Toolkit for plotting and analysis of ab initio solid-state calculation data
 */
export const sumo = mkPackage(
  nixRaw`pkgs.python2Packages.sumo`,
  "Toolkit for plotting and analysis of ab initio solid-state calculation data",
);

/**
 * Algebraic data types for Python
 */
export const sumtypes = mkPackage(
  nixRaw`pkgs.python2Packages.sumtypes`,
  "Algebraic data types for Python",
);

/**
 * Python module for the SolarLog HTTP API
 */
export const sunwatcher = mkPackage(
  nixRaw`pkgs.python2Packages.sunwatcher`,
  "Python module for the SolarLog HTTP API",
);

/**
 * Module to access the WEG solar energy platform
 */
export const sunweg = mkPackage(
  nixRaw`pkgs.python2Packages.sunweg`,
  "Module to access the WEG solar energy platform",
);

/**
 * Missing widgets and components for Qt-python (napari/superqt)
 */
export const superqt = mkPackage(
  nixRaw`pkgs.python2Packages.superqt`,
  "Missing widgets and components for Qt-python (napari/superqt)",
);

/**
 * An API for running processes safely and securely
 */
export const supervise_api = mkPackage(
  nixRaw`pkgs.python2Packages.supervise-api`,
  "An API for running processes safely and securely",
);

/**
 * A system for controlling process state under UNIX
 */
export const supervisor = mkPackage(
  nixRaw`pkgs.python2Packages.supervisor`,
  "A system for controlling process state under UNIX",
);

/**
 * Utility belt for automated testing
 */
export const sure = mkPackage(
  nixRaw`pkgs.python2Packages.sure`,
  "Utility belt for automated testing",
);

/**
 * Python library to interact with the Sure Petcare API
 */
export const surepy = mkPackage(
  nixRaw`pkgs.python2Packages.surepy`,
  "Python library to interact with the Sure Petcare API",
);

/**
 * Sort-friendly URI Reordering Transform (SURT) python module
 */
export const surt = mkPackage(
  nixRaw`pkgs.python2Packages.surt`,
  "Sort-friendly URI Reordering Transform (SURT) python module",
);

/**
 * A simple library for creating beautiful interactive prompts
 */
export const survey = mkPackage(
  nixRaw`pkgs.python2Packages.survey`,
  "A simple library for creating beautiful interactive prompts",
);

/**
 * A gorgeous theme for Tkinter/ttk, based on the Sun Valley visual style
 */
export const sv_ttk = mkPackage(
  nixRaw`pkgs.python2Packages.sv-ttk`,
  "A gorgeous theme for Tkinter/ttk, based on the Sun Valley visual style",
);

/**
 * Set of tools for converting SVG graphics to TikZ/PGF code
 */
export const svg2tikz = mkPackage(
  nixRaw`pkgs.python2Packages.svg2tikz`,
  "Set of tools for converting SVG graphics to TikZ/PGF code",
);

/**
 * SVG path objects and parser
 */
export const svg_path = mkPackage(
  nixRaw`pkgs.python2Packages.svg-path`,
  "SVG path objects and parser",
);

/**
 * SVG Parsing for Elements, Paths, and other SVG Objects
 */
export const svgelements = mkPackage(
  nixRaw`pkgs.python2Packages.svgelements`,
  "SVG Parsing for Elements, Paths, and other SVG Objects",
);

/**
 * A pure-Python library for reading and converting SVG
 */
export const svglib = mkPackage(
  nixRaw`pkgs.python2Packages.svglib`,
  "A pure-Python library for reading and converting SVG",
);

/**
 * A Python library to create SVG drawings
 */
export const svgwrite = mkPackage(
  nixRaw`pkgs.python2Packages.svgwrite`,
  "A Python library to create SVG drawings",
);

/**
 * Validation of Swagger specifications
 */
export const swagger_spec_validator = mkPackage(
  nixRaw`pkgs.python2Packages.swagger-spec-validator`,
  "Validation of Swagger specifications",
);

/**
 * bundled swagger-ui pip package
 */
export const swagger_ui_bundle = mkPackage(
  nixRaw`pkgs.python2Packages.swagger-ui-bundle`,
  "bundled swagger-ui pip package",
);

/**
 * OpenStack Object Storage
 */
export const swift = mkPackage(
  nixRaw`pkgs.python2Packages.swift`,
  "OpenStack Object Storage",
);

/**
 * Python client to get data from the Swiss federal Office for Environment FEON
 */
export const swisshydrodata = mkPackage(
  nixRaw`pkgs.python2Packages.swisshydrodata`,
  "Python client to get data from the Swiss federal Office for Environment FEON",
);

/**
 * Library to get the currently playing song and artist from Spotify
 */
export const swspotify = mkPackage(
  nixRaw`pkgs.python2Packages.swspotify`,
  "Library to get the currently playing song and artist from Spotify",
);

/**
 * Automated testing for the examples in your documentation
 */
export const sybil = mkPackage(
  nixRaw`pkgs.python2Packages.sybil`,
  "Automated testing for the examples in your documentation",
);

/**
 * Python library providing wrappers to SymEngine
 */
export const symengine = mkPackage(
  nixRaw`pkgs.python2Packages.symengine`,
  "Python library providing wrappers to SymEngine",
);

/**
 * A Python library for symbolic mathematics
 */
export const sympy = mkPackage(
  nixRaw`pkgs.python2Packages.sympy`,
  "A Python library for symbolic mathematics",
);

/**
 * Module to get LRC format (synchronized) lyrics
 */
export const syncedlyrics = mkPackage(
  nixRaw`pkgs.python2Packages.syncedlyrics`,
  "Module to get LRC format (synchronized) lyrics",
);

/**
 * Python async to sync converter
 */
export const syncer = mkPackage(
  nixRaw`pkgs.python2Packages.syncer`,
  "Python async to sync converter",
);

/**
 * A Python library for calculating, analyzing, and visualizing drug combination synergy
 */
export const synergy = mkPackage(
  nixRaw`pkgs.python2Packages.synergy`,
  "A Python library for calculating, analyzing, and visualizing drug combination synergy",
);

/**
 * Python API for communication with Synology DSM
 */
export const synologydsm_api = mkPackage(
  nixRaw`pkgs.python2Packages.synologydsm-api`,
  "Python API for communication with Synology DSM",
);

/**
 * Pytest Snapshot Test Utility
 */
export const syrupy = mkPackage(
  nixRaw`pkgs.python2Packages.syrupy`,
  "Pytest Snapshot Test Utility",
);

/**
 * Python logging formatter for emitting RFC5424 Syslog messages
 */
export const syslog_rfc5424_formatter = mkPackage(
  nixRaw`pkgs.python2Packages.syslog-rfc5424-formatter`,
  "Python logging formatter for emitting RFC5424 Syslog messages",
);

/**
 * Python module for connecting to System Bridge
 */
export const systembridge = mkPackage(
  nixRaw`pkgs.python2Packages.systembridge`,
  "Python module for connecting to System Bridge",
);

/**
 * Python module for native access to the systemd facilities
 */
export const systemd = mkPackage(
  nixRaw`pkgs.python2Packages.systemd`,
  "Python module for native access to the systemd facilities",
);

/**
 * SysV IPC primitives (semaphores, shared memory and message queues)
 */
export const sysv_ipc = mkPackage(
  nixRaw`pkgs.python2Packages.sysv_ipc`,
  "SysV IPC primitives (semaphores, shared memory and message queues)",
);

/**
 * A command line client for working with Tableau Server.
 */
export const tabcmd = mkPackage(
  nixRaw`pkgs.python2Packages.tabcmd`,
  "A command line client for working with Tableau Server.",
);

/**
 * Python module for working with Tableau files
 */
export const tableaudocumentapi = mkPackage(
  nixRaw`pkgs.python2Packages.tableaudocumentapi`,
  "Python module for working with Tableau files",
);

/**
 * A Python module for working with the Tableau Server REST API.
 */
export const tableauserverclient = mkPackage(
  nixRaw`pkgs.python2Packages.tableauserverclient`,
  "A Python module for working with the Tableau Server REST API.",
);

/**
 * A library to represent tabular data
 */
export const tabledata = mkPackage(
  nixRaw`pkgs.python2Packages.tabledata`,
  "A library to represent tabular data",
);

/**
 * Hierarchical datasets for Python
 */
export const tables = mkPackage(
  nixRaw`pkgs.python2Packages.tables`,
  "Hierarchical datasets for Python",
);

/**
 * Format-agnostic tabular dataset library
 */
export const tablib = mkPackage(
  nixRaw`pkgs.python2Packages.tablib`,
  "Format-agnostic tabular dataset library",
);

/**
 * Module to extract table from PDF into pandas DataFrame
 */
export const tabula_py = mkPackage(
  nixRaw`pkgs.python2Packages.tabula-py`,
  "Module to extract table from PDF into pandas DataFrame",
);

/**
 * Pretty-print tabular data
 */
export const tabulate = mkPackage(
  nixRaw`pkgs.python2Packages.tabulate`,
  "Pretty-print tabular data",
);

/**
 * Python curses command line CSV and tabular data viewer
 */
export const tabview = mkPackage(
  nixRaw`pkgs.python2Packages.tabview`,
  "Python curses command line CSV and tabular data viewer",
);

/**
 * Computes sparse tensor expressions on CPUs and GPUs
 */
export const taco = mkPackage(
  nixRaw`pkgs.python2Packages.taco`,
  "Computes sparse tensor expressions on CPUs and GPUs",
);

/**
 * Great data sets for Topological Data Analysis
 */
export const tadasets = mkPackage(
  nixRaw`pkgs.python2Packages.tadasets`,
  "Great data sets for Topological Data Analysis",
);

/**
 * Package to parse logical tag expressions
 */
export const tag_expressions = mkPackage(
  nixRaw`pkgs.python2Packages.tag-expressions`,
  "Package to parse logical tag expressions",
);

/**
 * Python module for interacting with Tago.io
 */
export const tago = mkPackage(
  nixRaw`pkgs.python2Packages.tago`,
  "Python module for interacting with Tago.io",
);

/**
 * Module for interacting with Tago.io
 */
export const tagoio_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.tagoio-sdk`,
  "Module for interacting with Tago.io",
);

/**
 * Python module to interface with Tahoma REST API
 */
export const tahoma_api = mkPackage(
  nixRaw`pkgs.python2Packages.tahoma-api`,
  "Python module to interface with Tahoma REST API",
);

/**
 * Python implementation implementation of GNU tail and head
 */
export const tailer = mkPackage(
  nixRaw`pkgs.python2Packages.tailer`,
  "Python implementation implementation of GNU tail and head",
);

/**
 * Python client for the Tailscale API
 */
export const tailscale = mkPackage(
  nixRaw`pkgs.python2Packages.tailscale`,
  "Python client for the Tailscale API",
);

/**
 * Simple time taking library using context managers
 */
export const takethetime = mkPackage(
  nixRaw`pkgs.python2Packages.takethetime`,
  "Simple time taking library using context managers",
);

/**
 * Library for the Tank Utility API
 */
export const tank_utility = mkPackage(
  nixRaw`pkgs.python2Packages.tank-utility`,
  "Library for the Tank Utility API",
);

/**
 * A set of tools for working with the Test Anything Protocol (TAP) in Python
 */
export const tappy = mkPackage(
  nixRaw`pkgs.python2Packages.tappy`,
  "A set of tools for working with the Test Anything Protocol (TAP) in Python",
);

/**
 * Library for interacting with taskwarrior databases
 */
export const tasklib = mkPackage(
  nixRaw`pkgs.python2Packages.tasklib`,
  "Library for interacting with taskwarrior databases",
);

/**
 * Python bindings for your taskwarrior database
 */
export const taskw = mkPackage(
  nixRaw`pkgs.python2Packages.taskw`,
  "Python bindings for your taskwarrior database",
);

/**
 * Generates Python parsers from grammars in a variation of EBNF
 */
export const tatsu = mkPackage(
  nixRaw`pkgs.python2Packages.tatsu`,
  "Generates Python parsers from grammars in a variation of EBNF",
);

/**
 * Timesheeting made easy
 */
export const taxi = mkPackage(
  nixRaw`pkgs.python2Packages.taxi`,
  "Timesheeting made easy",
);

/**
 * BATS and TBATS forecasting methods
 */
export const tbats = mkPackage(
  nixRaw`pkgs.python2Packages.tbats`,
  "BATS and TBATS forecasting methods",
);

/**
 * Traceback fiddling library. Allows you to pickle tracebacks.
 */
export const tblib = mkPackage(
  nixRaw`pkgs.python2Packages.tblib`,
  "Traceback fiddling library. Allows you to pickle tracebacks.",
);

/**
 * Light-weight tight-binding framework
 */
export const tblite = mkPackage(
  nixRaw`pkgs.python2Packages.tblite`,
  "Light-weight tight-binding framework",
);

/**
 * A commonly-used set of utilities
 */
export const tbm_utils = mkPackage(
  nixRaw`pkgs.python2Packages.tbm-utils`,
  "A commonly-used set of utilities",
);

/**
 * A library to apply true color for terminal text
 */
export const tcolorpy = mkPackage(
  nixRaw`pkgs.python2Packages.tcolorpy`,
  "A library to apply true color for terminal text",
);

/**
 * Simple parser for Garmin TCX files
 */
export const tcxparser = mkPackage(
  nixRaw`pkgs.python2Packages.tcxparser`,
  "Simple parser for Garmin TCX files",
);

/**
 * A reader for Garmin’s TCX file format
 */
export const tcxreader = mkPackage(
  nixRaw`pkgs.python2Packages.tcxreader`,
  "A reader for Garmin’s TCX file format",
);

/**
 * Python unit test reporting to TeamCity
 */
export const teamcity_messages = mkPackage(
  nixRaw`pkgs.python2Packages.teamcity-messages`,
  "Python unit test reporting to TeamCity",
);

/**
 * Telegram APIs
 */
export const telegram = mkPackage(
  nixRaw`pkgs.python2Packages.telegram`,
  "Telegram APIs",
);

/**
 * Telegraph API wrapper
 */
export const telegraph = mkPackage(
  nixRaw`pkgs.python2Packages.telegraph`,
  "Telegraph API wrapper",
);

/**
 * A library for exchanging data between Python and JavaScript
 */
export const telepath = mkPackage(
  nixRaw`pkgs.python2Packages.telepath`,
  "A library for exchanging data between Python and JavaScript",
);

/**
 * Full-featured Telegram client library for Python 3
 */
export const telethon = mkPackage(
  nixRaw`pkgs.python2Packages.telethon`,
  "Full-featured Telegram client library for Python 3",
);

/**
 * A high-level cross platform tty library
 */
export const teletype = mkPackage(
  nixRaw`pkgs.python2Packages.teletype`,
  "A high-level cross platform tty library",
);

/**
 * Symbol hash for ELF files
 */
export const telfhash = mkPackage(
  nixRaw`pkgs.python2Packages.telfhash`,
  "Symbol hash for ELF files",
);

/**
 * Python module to communicate with Telldus Live
 */
export const tellduslive = mkPackage(
  nixRaw`pkgs.python2Packages.tellduslive`,
  "Python module to communicate with Telldus Live",
);

/**
 * Module for interacting with LG speaker systems
 */
export const temescal = mkPackage(
  nixRaw`pkgs.python2Packages.temescal`,
  "Module for interacting with LG speaker systems",
);

/**
 * Library to read TEMPer USB HID devices
 */
export const temperusb = mkPackage(
  nixRaw`pkgs.python2Packages.temperusb`,
  "Library to read TEMPer USB HID devices",
);

/**
 * An OpenStack integration test suite that runs against live OpenStack cluster and validates an OpenStack deployment
 */
export const tempest = mkPackage(
  nixRaw`pkgs.python2Packages.tempest`,
  "An OpenStack integration test suite that runs against live OpenStack cluster and validates an OpenStack deployment",
);

/**
 * A very small text templating language
 */
export const tempita = mkPackage(
  nixRaw`pkgs.python2Packages.tempita`,
  "A very small text templating language",
);

/**
 * Objects and routines pertaining to date and time
 */
export const tempora = mkPackage(
  nixRaw`pkgs.python2Packages.tempora`,
  "Objects and routines pertaining to date and time",
);

/**
 * Retrying library for Python
 */
export const tenacity = mkPackage(
  nixRaw`pkgs.python2Packages.tenacity`,
  "Retrying library for Python",
);

/**
 * TensorFlow's Visualization Toolkit
 */
export const tensorboard = mkPackage(
  nixRaw`pkgs.python2Packages.tensorboard`,
  "TensorFlow's Visualization Toolkit",
);

/**
 * Fast data loading for TensorBoard
 */
export const tensorboard_data_server = mkPackage(
  nixRaw`pkgs.python2Packages.tensorboard-data-server`,
  "Fast data loading for TensorBoard",
);

/**
 * Profile Tensorboard Plugin.
 */
export const tensorboard_plugin_profile = mkPackage(
  nixRaw`pkgs.python2Packages.tensorboard-plugin-profile`,
  "Profile Tensorboard Plugin.",
);

/**
 * What-If Tool TensorBoard plugin.
 */
export const tensorboard_plugin_wit = mkPackage(
  nixRaw`pkgs.python2Packages.tensorboard-plugin-wit`,
  "What-If Tool TensorBoard plugin.",
);

/**
 * Library for writing tensorboard-compatible logs
 */
export const tensorboardx = mkPackage(
  nixRaw`pkgs.python2Packages.tensorboardx`,
  "Library for writing tensorboard-compatible logs",
);

/**
 * Computation using data flow graphs for scalable machine learning
 */
export const tensorflow_bin = mkPackage(
  nixRaw`pkgs.python2Packages.tensorflow-bin`,
  "Computation using data flow graphs for scalable machine learning",
);

/**
 * Library of datasets ready to use with TensorFlow
 */
export const tensorflow_datasets = mkPackage(
  nixRaw`pkgs.python2Packages.tensorflow-datasets`,
  "Library of datasets ready to use with TensorFlow",
);

/**
 * TensorFlow Estimator is a high-level API that encapsulates model training, evaluation, prediction, and exporting.
 */
export const tensorflow_estimator_bin = mkPackage(
  nixRaw`pkgs.python2Packages.tensorflow-estimator-bin`,
  "TensorFlow Estimator is a high-level API that encapsulates model training, evaluation, prediction, and exporting.",
);

/**
 * Standard representations for metadata that are useful when training machine learning models with TensorFlow
 */
export const tensorflow_metadata = mkPackage(
  nixRaw`pkgs.python2Packages.tensorflow-metadata`,
  "Standard representations for metadata that are useful when training machine learning models with TensorFlow",
);

/**
 * Library for probabilistic reasoning and statistical analysis
 */
export const tensorflow_probability = mkPackage(
  nixRaw`pkgs.python2Packages.tensorflow-probability`,
  "Library for probabilistic reasoning and statistical analysis",
);

/**
 * Tensor learning in Python
 */
export const tensorly = mkPackage(
  nixRaw`pkgs.python2Packages.tensorly`,
  "Tensor learning in Python",
);

/**
 * Python bindings for TensorRT, a high-performance deep learning interface
 */
export const tensorrt = mkPackage(
  nixRaw`pkgs.python2Packages.tensorrt`,
  "Python bindings for TensorRT, a high-performance deep learning interface",
);

/**
 * Library for reading and writing large multi-dimensional arrays
 */
export const tensorstore = mkPackage(
  nixRaw`pkgs.python2Packages.tensorstore`,
  "Library for reading and writing large multi-dimensional arrays",
);

/**
 * Termcolor
 */
export const termcolor = mkPackage(
  nixRaw`pkgs.python2Packages.termcolor`,
  "Termcolor",
);

/**
 * A python command-line tool which draws basic graphs in the terminal
 */
export const termgraph = mkPackage(
  nixRaw`pkgs.python2Packages.termgraph`,
  "A python command-line tool which draws basic graphs in the terminal",
);

/**
 * Terminals served by Tornado websockets
 */
export const terminado = mkPackage(
  nixRaw`pkgs.python2Packages.terminado`,
  "Terminals served by Tornado websockets",
);

/**
 * Display simple tables in terminals
 */
export const terminaltables = mkPackage(
  nixRaw`pkgs.python2Packages.terminaltables`,
  "Display simple tables in terminals",
);

/**
 * matplotlib for your terminal
 */
export const termplotlib = mkPackage(
  nixRaw`pkgs.python2Packages.termplotlib`,
  "matplotlib for your terminal",
);

/**
 * Console colouring for python
 */
export const termstyle = mkPackage(
  nixRaw`pkgs.python2Packages.termstyle`,
  "Console colouring for python",
);

/**
 * A software composition analysis tool and Python library that generates a Software Bill of Materials for container images and Dockerfiles
 */
export const tern = mkPackage(
  nixRaw`pkgs.python2Packages.tern`,
  "A software composition analysis tool and Python library that generates a Software Bill of Materials for container images and Dockerfiles",
);

/**
 * API for Tesla Powerwall
 */
export const tesla_powerwall = mkPackage(
  nixRaw`pkgs.python2Packages.tesla-powerwall`,
  "API for Tesla Powerwall",
);

/**
 * Library for communicating with a Tesla Wall Connector
 */
export const tesla_wall_connector = mkPackage(
  nixRaw`pkgs.python2Packages.tesla-wall-connector`,
  "Library for communicating with a Tesla Wall Connector",
);

/**
 * Python library to work with Tesla API
 */
export const teslajsonpy = mkPackage(
  nixRaw`pkgs.python2Packages.teslajsonpy`,
  "Python library to work with Tesla API",
);

/**
 * A module for calculating and analyzing Voronoi tessellations
 */
export const tess = mkPackage(
  nixRaw`pkgs.python2Packages.tess`,
  "A module for calculating and analyzing Voronoi tessellations",
);

/**
 * A simple, Pillow-friendly, wrapper around the tesseract-ocr API for Optical Character Recognition (OCR)
 */
export const tesserocr = mkPackage(
  nixRaw`pkgs.python2Packages.tesserocr`,
  "A simple, Pillow-friendly, wrapper around the tesseract-ocr API for Optical Character Recognition (OCR)",
);

/**
 * Framework-agnostic library to track and parallelize hyperparameter search in machine learning experiments
 */
export const test_tube = mkPackage(
  nixRaw`pkgs.python2Packages.test-tube`,
  "Framework-agnostic library to track and parallelize hyperparameter search in machine learning experiments",
);

/**
 * A unit testing framework extension for testing code in Jupyter Notebooks
 */
export const testbook = mkPackage(
  nixRaw`pkgs.python2Packages.testbook`,
  "A unit testing framework extension for testing code in Jupyter Notebooks",
);

/**
 * Allows using docker containers for functional and integration testing

 */
export const testcontainers = mkPackage(
  nixRaw`pkgs.python2Packages.testcontainers`,
  "Allows using docker containers for functional and integration testing\n",
);

/**
 * Collection of helpers and mock objects for unit tests and doc tests
 */
export const testfixtures = mkPackage(
  nixRaw`pkgs.python2Packages.testfixtures`,
  "Collection of helpers and mock objects for unit tests and doc tests",
);

/**
 * utilities for testing.* packages
 */
export const testing_common_database = mkPackage(
  nixRaw`pkgs.python2Packages.testing-common-database`,
  "utilities for testing.* packages",
);

/**
 * Use temporary postgresql instance in testing
 */
export const testing_postgresql = mkPackage(
  nixRaw`pkgs.python2Packages.testing-postgresql`,
  "Use temporary postgresql instance in testing",
);

/**
 * Test utilities for code working with files and commands
 */
export const testpath = mkPackage(
  nixRaw`pkgs.python2Packages.testpath`,
  "Test utilities for code working with files and commands",
);

/**
 * A Python wrapper of the TestRail API
 */
export const testrail_api = mkPackage(
  nixRaw`pkgs.python2Packages.testrail-api`,
  "A Python wrapper of the TestRail API",
);

/**
 * A database of test results which can be used as part of developer workflow
 */
export const testrepository = mkPackage(
  nixRaw`pkgs.python2Packages.testrepository`,
  "A database of test results which can be used as part of developer workflow",
);

/**
 * Pyunit extension for managing expensive test resources
 */
export const testresources = mkPackage(
  nixRaw`pkgs.python2Packages.testresources`,
  "Pyunit extension for managing expensive test resources",
);

/**
 * A pyunit extension for dependency injection
 */
export const testscenarios = mkPackage(
  nixRaw`pkgs.python2Packages.testscenarios`,
  "A pyunit extension for dependency injection",
);

/**
 * A set of extensions to the Python standard library's unit testing framework
 */
export const testtools = mkPackage(
  nixRaw`pkgs.python2Packages.testtools`,
  "A set of extensions to the Python standard library's unit testing framework",
);

/**
 * The most basic Text::Unidecode port
 */
export const text_unidecode = mkPackage(
  nixRaw`pkgs.python2Packages.text-unidecode`,
  "The most basic Text::Unidecode port",
);

/**
 * Higher-level text processing, built on spaCy
 */
export const textacy = mkPackage(
  nixRaw`pkgs.python2Packages.textacy`,
  "Higher-level text processing, built on spaCy",
);

/**
 * Python library for comparing distance between two or more sequences
 */
export const textdistance = mkPackage(
  nixRaw`pkgs.python2Packages.textdistance`,
  "Python library for comparing distance between two or more sequences",
);

/**
 * Python module for parsing semi-structured text into python tables
 */
export const textfsm = mkPackage(
  nixRaw`pkgs.python2Packages.textfsm`,
  "Python module for parsing semi-structured text into python tables",
);

/**
 * MOdule for generating web text
 */
export const textile = mkPackage(
  nixRaw`pkgs.python2Packages.textile`,
  "MOdule for generating web text",
);

/**
 * Text analysis with networks
 */
export const textnets = mkPackage(
  nixRaw`pkgs.python2Packages.textnets`,
  "Text analysis with networks",
);

/**
 * A text parser
 */
export const textparser = mkPackage(
  nixRaw`pkgs.python2Packages.textparser`,
  "A text parser",
);

/**
 * Module to generate a formatted text table, using ASCII characters
 */
export const texttable = mkPackage(
  nixRaw`pkgs.python2Packages.texttable`,
  "Module to generate a formatted text table, using ASCII characters",
);

/**
 * TUI framework for Python inspired by modern web development
 */
export const textual = mkPackage(
  nixRaw`pkgs.python2Packages.textual`,
  "TUI framework for Python inspired by modern web development",
);

/**
 * Textual plugin for a DirectoryTree compatible with remote filesystems
 */
export const textual_universal_directorytree = mkPackage(
  nixRaw`pkgs.python2Packages.textual-universal-directorytree`,
  "Textual plugin for a DirectoryTree compatible with remote filesystems",
);

/**
 * Textwrap from Python 3.6 backport plus a few tweaks
 */
export const textwrap3 = mkPackage(
  nixRaw`pkgs.python2Packages.textwrap3`,
  "Textwrap from Python 3.6 backport plus a few tweaks",
);

/**
 * Domain-specific languages and parsers in Python
 */
export const textx = mkPackage(
  nixRaw`pkgs.python2Packages.textx`,
  "Domain-specific languages and parsers in Python",
);

/**
 * Convert TensorFlow, Keras, Tensorflow.js and Tflite models to ONNX
 */
export const tf2onnx = mkPackage(
  nixRaw`pkgs.python2Packages.tf2onnx`,
  "Convert TensorFlow, Keras, Tensorflow.js and Tflite models to ONNX",
);

/**
 * Deep learning library featuring a higher-level API for TensorFlow
 */
export const tflearn = mkPackage(
  nixRaw`pkgs.python2Packages.tflearn`,
  "Deep learning library featuring a higher-level API for TensorFlow",
);

/**
 * Pure Python TFTP library
 */
export const tftpy = mkPackage(
  nixRaw`pkgs.python2Packages.tftpy`,
  "Pure Python TFTP library",
);

/**
 * Fast and Portable Telegram Crypto Library for Python
 */
export const tgcrypto = mkPackage(
  nixRaw`pkgs.python2Packages.tgcrypto`,
  "Fast and Portable Telegram Crypto Library for Python",
);

/**
 * Fuzzy string matching for Python
 */
export const thefuzz = mkPackage(
  nixRaw`pkgs.python2Packages.thefuzz`,
  "Fuzzy string matching for Python",
);

/**
 * Python 3 version of logrus
 */
export const thelogrus = mkPackage(
  nixRaw`pkgs.python2Packages.thelogrus`,
  "Python 3 version of logrus",
);

/**
 * Library for Thermobeacon BLE devices
 */
export const thermobeacon_ble = mkPackage(
  nixRaw`pkgs.python2Packages.thermobeacon-ble`,
  "Library for Thermobeacon BLE devices",
);

/**
 * Library for Thermopro BLE devices
 */
export const thermopro_ble = mkPackage(
  nixRaw`pkgs.python2Packages.thermopro-ble`,
  "Library for Thermopro BLE devices",
);

/**
 * Python Actor concurrency library
 */
export const thespian = mkPackage(
  nixRaw`pkgs.python2Packages.thespian`,
  "Python Actor concurrency library",
);

/**
 * Library for NLP machine learning
 */
export const thinc = mkPackage(
  nixRaw`pkgs.python2Packages.thinc`,
  "Library for NLP machine learning",
);

/**
 * Interface to the PM100A/D power meter from Thorlabs
 */
export const thorlabspm100 = mkPackage(
  nixRaw`pkgs.python2Packages.thorlabspm100`,
  "Interface to the PM100A/D power meter from Thorlabs",
);

/**
 * A library to run tornado coroutines from synchronous Python
 */
export const threadloop = mkPackage(
  nixRaw`pkgs.python2Packages.threadloop`,
  "A library to run tornado coroutines from synchronous Python",
);

/**
 * Easy to use object-oriented thread pool framework
 */
export const threadpool = mkPackage(
  nixRaw`pkgs.python2Packages.threadpool`,
  "Easy to use object-oriented thread pool framework",
);

/**
 * Helpers to limit number of threads used in native libraries
 */
export const threadpoolctl = mkPackage(
  nixRaw`pkgs.python2Packages.threadpoolctl`,
  "Helpers to limit number of threads used in native libraries",
);

/**
 * Module for adding unittests.mock as view functions
 */
export const threat9_test_bed = mkPackage(
  nixRaw`pkgs.python2Packages.threat9-test-bed`,
  "Module for adding unittests.mock as view functions",
);

/**
 * Simple library for merging two strings with respect to a base one
 */
export const three_merge = mkPackage(
  nixRaw`pkgs.python2Packages.three-merge`,
  "Simple library for merging two strings with respect to a base one",
);

/**
 * Python bindings for the Apache Thrift RPC system
 */
export const thrift = mkPackage(
  nixRaw`pkgs.python2Packages.thrift`,
  "Python bindings for the Apache Thrift RPC system",
);

/**
 * Python module for Apache Thrift
 */
export const thriftpy2 = mkPackage(
  nixRaw`pkgs.python2Packages.thriftpy2`,
  "Python module for Apache Thrift",
);

/**
 * Zero-dependency Python package for easy throttling with asyncio support.
 */
export const throttler = mkPackage(
  nixRaw`pkgs.python2Packages.throttler`,
  "Zero-dependency Python package for easy throttling with asyncio support.",
);

/**
 * Module to parse and edit the EXIF data tags in a JPEG image
 */
export const thumborPexif = mkPackage(
  nixRaw`pkgs.python2Packages.thumborPexif`,
  "Module to parse and edit the EXIF data tags in a JPEG image",
);

/**
 * Unofficial Python API for TIDAL music streaming service
 */
export const tidalapi = mkPackage(
  nixRaw`pkgs.python2Packages.tidalapi`,
  "Unofficial Python API for TIDAL music streaming service",
);

/**
 * Raise rich, helpful exceptions
 */
export const tidyexc = mkPackage(
  nixRaw`pkgs.python2Packages.tidyexc`,
  "Raise rich, helpful exceptions",
);

/**
 * Python wrapper for HTML Tidy (tidylib) on Python 2 and 3
 */
export const tidylib = mkPackage(
  nixRaw`pkgs.python2Packages.tidylib`,
  "Python wrapper for HTML Tidy (tidylib) on Python 2 and 3",
);

/**
 * Read and write image data from and to TIFF files
 */
export const tifffile = mkPackage(
  nixRaw`pkgs.python2Packages.tifffile`,
  "Read and write image data from and to TIFF files",
);

/**
 * A Python binding to the Apache Tika™ REST services
 */
export const tika = mkPackage(
  nixRaw`pkgs.python2Packages.tika`,
  "A Python binding to the Apache Tika™ REST services",
);

/**
 * A modern Python REST client for Apache Tika server
 */
export const tika_client = mkPackage(
  nixRaw`pkgs.python2Packages.tika-client`,
  "A modern Python REST client for Apache Tika server",
);

/**
 * tiktoken is a fast BPE tokeniser for use with OpenAI's models.
 */
export const tiktoken = mkPackage(
  nixRaw`pkgs.python2Packages.tiktoken`,
  "tiktoken is a fast BPE tokeniser for use with OpenAI's models.",
);

/**
 * Save matplotlib figures as TikZ/PGFplots for smooth integration into LaTeX
 */
export const tikzplotlib = mkPackage(
  nixRaw`pkgs.python2Packages.tikzplotlib`,
  "Save matplotlib figures as TikZ/PGFplots for smooth integration into LaTeX",
);

/**
 * Tool for quantizing image colors using tile-based palette restrictions
 */
export const tilequant = mkPackage(
  nixRaw`pkgs.python2Packages.tilequant`,
  "Tool for quantizing image colors using tile-based palette restrictions",
);

/**
 * N-dimensional NumPy array tiling and merging with overlapping, padding and tapering
 */
export const tiler = mkPackage(
  nixRaw`pkgs.python2Packages.tiler`,
  "N-dimensional NumPy array tiling and merging with overlapping, padding and tapering",
);

/**
 * A tile server for rendered geographic data
 */
export const tilestache = mkPackage(
  nixRaw`pkgs.python2Packages.tilestache`,
  "A tile server for rendered geographic data",
);

/**
 * Library for Tilt BLE devices
 */
export const tilt_ble = mkPackage(
  nixRaw`pkgs.python2Packages.tilt-ble`,
  "Library for Tilt BLE devices",
);

/**
 * Travel through time in your tests
 */
export const time_machine = mkPackage(
  nixRaw`pkgs.python2Packages.time-machine`,
  "Travel through time in your tests",
);

/**
 * Python module to format past datetime output
 */
export const timeago = mkPackage(
  nixRaw`pkgs.python2Packages.timeago`,
  "Python module to format past datetime output",
);

/**
 * A port of the most excellent TimeCop Ruby Gem for Python
 */
export const timecop = mkPackage(
  nixRaw`pkgs.python2Packages.timecop`,
  "A port of the most excellent TimeCop Ruby Gem for Python",
);

/**
 * Parse english textual date descriptions
 */
export const timelib = mkPackage(
  nixRaw`pkgs.python2Packages.timelib`,
  "Parse english textual date descriptions",
);

/**
 * Timeout decorator
 */
export const timeout_decorator = mkPackage(
  nixRaw`pkgs.python2Packages.timeout-decorator`,
  "Timeout decorator",
);

/**
 * Data type for representing time slots with a start and end
 */
export const timeslot = mkPackage(
  nixRaw`pkgs.python2Packages.timeslot`,
  "Data type for representing time slots with a start and end",
);

/**
 * Library to interact with TimeTagger
 */
export const timetagger = mkPackage(
  nixRaw`pkgs.python2Packages.timetagger`,
  "Library to interact with TimeTagger",
);

/**
 * Module for finding the timezone of any point on earth (coordinates) offline
 */
export const timezonefinder = mkPackage(
  nixRaw`pkgs.python2Packages.timezonefinder`,
  "Module for finding the timezone of any point on earth (coordinates) offline",
);

/**
 * PyTorch image models, scripts, and pretrained weights
 */
export const timm = mkPackage(
  nixRaw`pkgs.python2Packages.timm`,
  "PyTorch image models, scripts, and pretrained weights",
);

/**
 * Lightning fast C++/CUDA neural network framework
 */
export const tiny_cuda_nn = mkPackage(
  nixRaw`pkgs.python2Packages.tiny-cuda-nn`,
  "Lightning fast C++/CUDA neural network framework",
);

/**
 * SOCKS5/SOCKS4/HTTP proxy server
 */
export const tiny_proxy = mkPackage(
  nixRaw`pkgs.python2Packages.tiny-proxy`,
  "SOCKS5/SOCKS4/HTTP proxy server",
);

/**
 * Complete yet simple CSS parser for Python
 */
export const tinycss = mkPackage(
  nixRaw`pkgs.python2Packages.tinycss`,
  "Complete yet simple CSS parser for Python",
);

/**
 * Low-level CSS parser for Python
 */
export const tinycss2 = mkPackage(
  nixRaw`pkgs.python2Packages.tinycss2`,
  "Low-level CSS parser for Python",
);

/**
 * Lightweight document oriented database written in Python
 */
export const tinydb = mkPackage(
  nixRaw`pkgs.python2Packages.tinydb`,
  "Lightweight document oriented database written in Python",
);

/**
 * Python wrapper for the C++ wavefront .obj loader tinyobjloader
 */
export const tinyobjloader_py = mkPackage(
  nixRaw`pkgs.python2Packages.tinyobjloader-py`,
  "Python wrapper for the C++ wavefront .obj loader tinyobjloader",
);

/**
 * Transaction support for TinyDB
 */
export const tinyrecord = mkPackage(
  nixRaw`pkgs.python2Packages.tinyrecord`,
  "Transaction support for TinyDB",
);

/**
 * Tissue - automated pep8 checker for nose
 */
export const tissue = mkPackage(
  nixRaw`pkgs.python2Packages.tissue`,
  "Tissue - automated pep8 checker for nose",
);

/**
 * Python library to capitalize strings as specified by the New York Times
 */
export const titlecase = mkPackage(
  nixRaw`pkgs.python2Packages.titlecase`,
  "Python library to capitalize strings as specified by the New York Times",
);

/**
 * The standard Python interface to the Tcl/Tk GUI toolkit
 */
export const tkinter = mkPackage(
  nixRaw`pkgs.python2Packages.tkinter`,
  "The standard Python interface to the Tcl/Tk GUI toolkit",
);

/**
 * Extracts the top level domain (TLD) from the URL given
 */
export const tld = mkPackage(
  nixRaw`pkgs.python2Packages.tld`,
  "Extracts the top level domain (TLD) from the URL given",
);

/**
 * Python module to accurately separate the TLD from the domain of an URL
 */
export const tldextract = mkPackage(
  nixRaw`pkgs.python2Packages.tldextract`,
  "Python module to accurately separate the TLD from the domain of an URL",
);

/**
 * Automatically updated list of valid TLDs taken directly from IANA
 */
export const tlds = mkPackage(
  nixRaw`pkgs.python2Packages.tlds`,
  "Automatically updated list of valid TLDs taken directly from IANA",
);

/**
 * Small library to parse TLS records
 */
export const tls_parser = mkPackage(
  nixRaw`pkgs.python2Packages.tls-parser`,
  "Small library to parse TLS records",
);

/**
 * Trend Micro Locality Sensitive Hash
 */
export const tlsh = mkPackage(
  nixRaw`pkgs.python2Packages.tlsh`,
  "Trend Micro Locality Sensitive Hash",
);

/**
 * Pure python implementation of SSL and TLS.
 */
export const tlslite_ng = mkPackage(
  nixRaw`pkgs.python2Packages.tlslite-ng`,
  "Pure python implementation of SSL and TLS.",
);

/**
 * Type-Length-Value8 (TLV8) for Python
 */
export const tlv8 = mkPackage(
  nixRaw`pkgs.python2Packages.tlv8`,
  "Type-Length-Value8 (TLV8) for Python",
);

/**
 * Python library that interacts with TMB API
 */
export const tmb = mkPackage(
  nixRaw`pkgs.python2Packages.tmb`,
  "Python library that interacts with TMB API",
);

/**
 * The official Todoist Python API library
 */
export const todoist = mkPackage(
  nixRaw`pkgs.python2Packages.todoist`,
  "The official Todoist Python API library",
);

/**
 * Library for the Todoist REST API
 */
export const todoist_api_python = mkPackage(
  nixRaw`pkgs.python2Packages.todoist-api-python`,
  "Library for the Todoist REST API",
);

/**
 * Command line tool and set of Python wrapper classes for interacting with toggl's API
 */
export const toggl_cli = mkPackage(
  nixRaw`pkgs.python2Packages.toggl-cli`,
  "Command line tool and set of Python wrapper classes for interacting with toggl's API",
);

/**
 * Token Bucket Implementation for Python Web Apps
 */
export const token_bucket = mkPackage(
  nixRaw`pkgs.python2Packages.token-bucket`,
  "Token Bucket Implementation for Python Web Apps",
);

/**
 * A wrapper around the stdlib `tokenize` which roundtrips
 */
export const tokenize_rt = mkPackage(
  nixRaw`pkgs.python2Packages.tokenize-rt`,
  "A wrapper around the stdlib `tokenize` which roundtrips",
);

/**
 * Fast State-of-the-Art Tokenizers optimized for Research and Production
 */
export const tokenizers = mkPackage(
  nixRaw`pkgs.python2Packages.tokenizers`,
  "Fast State-of-the-Art Tokenizers optimized for Research and Production",
);

/**
 * Generic support library for signed-token-based auth schemes
 */
export const tokenlib = mkPackage(
  nixRaw`pkgs.python2Packages.tokenlib`,
  "Generic support library for signed-token-based auth schemes",
);

/**
 * Easily trim 'messages' arrays for use with GPTs
 */
export const tokentrim = mkPackage(
  nixRaw`pkgs.python2Packages.tokentrim`,
  "Easily trim 'messages' arrays for use with GPTs",
);

/**
 * Python Library for Controlling TOLO Sauna/Steam Bath Devices
 */
export const tololib = mkPackage(
  nixRaw`pkgs.python2Packages.tololib`,
  "Python Library for Controlling TOLO Sauna/Steam Bath Devices",
);

/**
 * a Python library for parsing and creating TOML
 */
export const toml = mkPackage(
  nixRaw`pkgs.python2Packages.toml`,
  "a Python library for parsing and creating TOML",
);

/**
 * A simple Command-line interface for manipulating toml files
 */
export const toml_adapt = mkPackage(
  nixRaw`pkgs.python2Packages.toml-adapt`,
  "A simple Command-line interface for manipulating toml files",
);

/**
 * A Python library for parsing TOML, fully compatible with TOML v1.0.0
 */
export const tomli = mkPackage(
  nixRaw`pkgs.python2Packages.tomli`,
  "A Python library for parsing TOML, fully compatible with TOML v1.0.0",
);

/**
 * A write-only counterpart to Tomli, which is a read-only TOML parser
 */
export const tomli_w = mkPackage(
  nixRaw`pkgs.python2Packages.tomli-w`,
  "A write-only counterpart to Tomli, which is a read-only TOML parser",
);

/**
 * Style-preserving TOML library for Python
 */
export const tomlkit = mkPackage(
  nixRaw`pkgs.python2Packages.tomlkit`,
  "Style-preserving TOML library for Python",
);

/**
 * List processing tools and functional utilities
 */
export const toolz = mkPackage(
  nixRaw`pkgs.python2Packages.toolz`,
  "List processing tools and functional utilities",
);

/**
 * Python client for the Quby ToonAPI
 */
export const toonapi = mkPackage(
  nixRaw`pkgs.python2Packages.toonapi`,
  "Python client for the Quby ToonAPI",
);

/**
 * A topological sort algorithm
 */
export const toposort = mkPackage(
  nixRaw`pkgs.python2Packages.toposort`,
  "A topological sort algorithm",
);

/**
 * PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration
 */
export const torch = mkPackage(
  nixRaw`pkgs.python2Packages.torch`,
  "PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration",
);

/**
 * PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration
 */
export const torchWithCuda = mkPackage(
  nixRaw`pkgs.python2Packages.torchWithCuda`,
  "PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration",
);

/**
 * PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration
 */
export const torchWithRocm = mkPackage(
  nixRaw`pkgs.python2Packages.torchWithRocm`,
  "PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration",
);

/**
 * PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration
 */
export const torchWithoutCuda = mkPackage(
  nixRaw`pkgs.python2Packages.torchWithoutCuda`,
  "PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration",
);

/**
 * PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration
 */
export const torchWithoutRocm = mkPackage(
  nixRaw`pkgs.python2Packages.torchWithoutRocm`,
  "PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration",
);

/**
 * PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration
 */
export const torch_bin = mkPackage(
  nixRaw`pkgs.python2Packages.torch-bin`,
  "PyTorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration",
);

/**
 * PyTorch Profiler TensorBoard Plugin
 */
export const torch_tb_profiler = mkPackage(
  nixRaw`pkgs.python2Packages.torch-tb-profiler`,
  "PyTorch Profiler TensorBoard Plugin",
);

/**
 * PyTorch audio library
 */
export const torchaudio = mkPackage(
  nixRaw`pkgs.python2Packages.torchaudio`,
  "PyTorch audio library",
);

/**
 * PyTorch audio library
 */
export const torchaudio_bin = mkPackage(
  nixRaw`pkgs.python2Packages.torchaudio-bin`,
  "PyTorch audio library",
);

/**
 * Differentiable ODE solvers with full GPU support and O(1)-memory backpropagation
 */
export const torchdiffeq = mkPackage(
  nixRaw`pkgs.python2Packages.torchdiffeq`,
  "Differentiable ODE solvers with full GPU support and O(1)-memory backpropagation",
);

/**
 * GPipe implemented in Pytorch and optimized for CUDA rather than TPU
 */
export const torchgpipe = mkPackage(
  nixRaw`pkgs.python2Packages.torchgpipe`,
  "GPipe implemented in Pytorch and optimized for CUDA rather than TPU",
);

/**
 * API to visualize pytorch models
 */
export const torchinfo = mkPackage(
  nixRaw`pkgs.python2Packages.torchinfo`,
  "API to visualize pytorch models",
);

/**
 * Medical imaging toolkit for deep learning
 */
export const torchio = mkPackage(
  nixRaw`pkgs.python2Packages.torchio`,
  "Medical imaging toolkit for deep learning",
);

/**
 * PyTorch implemention of part of librosa functions
 */
export const torchlibrosa = mkPackage(
  nixRaw`pkgs.python2Packages.torchlibrosa`,
  "PyTorch implemention of part of librosa functions",
);

/**
 * Machine learning metrics for distributed, scalable PyTorch applications (used in pytorch-lightning)
 */
export const torchmetrics = mkPackage(
  nixRaw`pkgs.python2Packages.torchmetrics`,
  "Machine learning metrics for distributed, scalable PyTorch applications (used in pytorch-lightning)",
);

/**
 * Differentiable SDE solvers with GPU support and efficient sensitivity analysis
 */
export const torchsde = mkPackage(
  nixRaw`pkgs.python2Packages.torchsde`,
  "Differentiable SDE solvers with GPU support and efficient sensitivity analysis",
);

/**
 * PyTorch vision library
 */
export const torchvision = mkPackage(
  nixRaw`pkgs.python2Packages.torchvision`,
  "PyTorch vision library",
);

/**
 * PyTorch vision library
 */
export const torchvision_bin = mkPackage(
  nixRaw`pkgs.python2Packages.torchvision-bin`,
  "PyTorch vision library",
);

/**
 * A web framework and asynchronous networking library
 */
export const tornado = mkPackage(
  nixRaw`pkgs.python2Packages.tornado`,
  "A web framework and asynchronous networking library",
);

/**
 * A web framework and asynchronous networking library
 */
export const tornado_4 = mkPackage(
  nixRaw`pkgs.python2Packages.tornado_4`,
  "A web framework and asynchronous networking library",
);

/**
 * A web framework and asynchronous networking library
 */
export const tornado_5 = mkPackage(
  nixRaw`pkgs.python2Packages.tornado_5`,
  "A web framework and asynchronous networking library",
);

/**
 * Pure python Tor client
 */
export const torpy = mkPackage(
  nixRaw`pkgs.python2Packages.torpy`,
  "Pure python Tor client",
);

/**
 * A .torrent file parser and creator for both Python 2 and 3
 */
export const torrent_parser = mkPackage(
  nixRaw`pkgs.python2Packages.torrent_parser`,
  "A .torrent file parser and creator for both Python 2 and 3",
);

/**
 * Simple Python interface for HTTP(s) requests over Tor
 */
export const torrequest = mkPackage(
  nixRaw`pkgs.python2Packages.torrequest`,
  "Simple Python interface for HTTP(s) requests over Tor",
);

/**
 * Interact with Total Connect 2 alarm systems
 */
export const total_connect_client = mkPackage(
  nixRaw`pkgs.python2Packages.total-connect-client`,
  "Interact with Total Connect 2 alarm systems",
);

/**
 * Utility to produce useful, summarised news files
 */
export const towncrier = mkPackage(
  nixRaw`pkgs.python2Packages.towncrier`,
  "Utility to produce useful, summarised news files",
);

/**
 * A generic virtualenv management and test command line tool
 */
export const tox = mkPackage(
  nixRaw`pkgs.python2Packages.tox`,
  "A generic virtualenv management and test command line tool",
);

/**
 * Library for the TP-Link Omada SDN Controller API
 */
export const tplink_omada_client = mkPackage(
  nixRaw`pkgs.python2Packages.tplink-omada-client`,
  "Library for the TP-Link Omada SDN Controller API",
);

/**
 * TPM2 TSS Python bindings for Enhanced System API (ESYS)
 */
export const tpm2_pytss = mkPackage(
  nixRaw`pkgs.python2Packages.tpm2-pytss`,
  "TPM2 TSS Python bindings for Enhanced System API (ESYS)",
);

/**
 * A Fast, Extensible Progress Meter
 */
export const tqdm = mkPackage(
  nixRaw`pkgs.python2Packages.tqdm`,
  "A Fast, Extensible Progress Meter",
);

/**
 * A backport of traceback to older supported Pythons
 */
export const traceback2 = mkPackage(
  nixRaw`pkgs.python2Packages.traceback2`,
  "A backport of traceback to older supported Pythons",
);

/**
 * Tracebacks for Humans (in Jupyter notebooks
 */
export const tracerite = mkPackage(
  nixRaw`pkgs.python2Packages.tracerite`,
  "Tracebacks for Humans (in Jupyter notebooks",
);

/**
 * Python debug logging helper
 */
export const tracing = mkPackage(
  nixRaw`pkgs.python2Packages.tracing`,
  "Python debug logging helper",
);

/**
 * Particle-tracking toolkit
 */
export const trackpy = mkPackage(
  nixRaw`pkgs.python2Packages.trackpy`,
  "Particle-tracking toolkit",
);

/**
 * Module to walk paths and run things
 */
export const trailrunner = mkPackage(
  nixRaw`pkgs.python2Packages.trailrunner`,
  "Module to walk paths and run things",
);

/**
 * A general purpose model trainer, as flexible as it gets
 */
export const trainer = mkPackage(
  nixRaw`pkgs.python2Packages.trainer`,
  "A general purpose model trainer, as flexible as it gets",
);

/**
 * Traitlets Python config system
 */
export const traitlets = mkPackage(
  nixRaw`pkgs.python2Packages.traitlets`,
  "Traitlets Python config system",
);

/**
 * Explicitly typed attributes for Python
 */
export const traits = mkPackage(
  nixRaw`pkgs.python2Packages.traits`,
  "Explicitly typed attributes for Python",
);

/**
 * Traits-capable windowing framework
 */
export const traitsui = mkPackage(
  nixRaw`pkgs.python2Packages.traitsui`,
  "Traits-capable windowing framework",
);

/**
 * Trait types for NumPy, SciPy, XArray, and Pandas
 */
export const traittypes = mkPackage(
  nixRaw`pkgs.python2Packages.traittypes`,
  "Trait types for NumPy, SciPy, XArray, and Pandas",
);

/**
 * Simple and tiny yield-based trampoline implementation for python
 */
export const trampoline = mkPackage(
  nixRaw`pkgs.python2Packages.trampoline`,
  "Simple and tiny yield-based trampoline implementation for python",
);

/**
 * Transaction management
 */
export const transaction = mkPackage(
  nixRaw`pkgs.python2Packages.transaction`,
  "Transaction management",
);

/**
 * Natural Language Processing for TensorFlow 2.0 and PyTorch
 */
export const transformers = mkPackage(
  nixRaw`pkgs.python2Packages.transformers`,
  "Natural Language Processing for TensorFlow 2.0 and PyTorch",
);

/**
 * Convert between various geometric transformations
 */
export const transforms3d = mkPackage(
  nixRaw`pkgs.python2Packages.transforms3d`,
  "Convert between various geometric transformations",
);

/**
 * A lightweight, object-oriented finite state machine implementation in Python
 */
export const transitions = mkPackage(
  nixRaw`pkgs.python2Packages.transitions`,
  "A lightweight, object-oriented finite state machine implementation in Python",
);

/**
 * Translate HTML using Beautiful Soup and Argos Translate.
 */
export const translatehtml = mkPackage(
  nixRaw`pkgs.python2Packages.translatehtml`,
  "Translate HTML using Beautiful Soup and Argos Translate.",
);

/**
 * A module grouping multiple translation APIs
 */
export const translatepy = mkPackage(
  nixRaw`pkgs.python2Packages.translatepy`,
  "A module grouping multiple translation APIs",
);

/**
 * Utility library for i18n relied on by various Repoze and Pyramid packages
 */
export const translationstring = mkPackage(
  nixRaw`pkgs.python2Packages.translationstring`,
  "Utility library for i18n relied on by various Repoze and Pyramid packages",
);

/**
 * Python module that implements the Transmission bittorent client RPC protocol
 */
export const transmission_rpc = mkPackage(
  nixRaw`pkgs.python2Packages.transmission-rpc`,
  "Python module that implements the Transmission bittorent client RPC protocol",
);

/**
 * Python implementation of the Transmission bittorent client RPC protocol
 */
export const transmissionrpc = mkPackage(
  nixRaw`pkgs.python2Packages.transmissionrpc`,
  "Python implementation of the Transmission bittorent client RPC protocol",
);

/**
 * Library for assisting Information Retrieval (IR) practitioners with TREC-like campaigns
 */
export const trectools = mkPackage(
  nixRaw`pkgs.python2Packages.trectools`,
  "Library for assisting Information Retrieval (IR) practitioners with TREC-like campaigns",
);

/**
 * Python bindings to the Tree-sitter parsing library
 */
export const tree_sitter = mkPackage(
  nixRaw`pkgs.python2Packages.tree-sitter`,
  "Python bindings to the Tree-sitter parsing library",
);

/**
 * An efficient implementation of tree data structure in python 2/3
 */
export const treelib = mkPackage(
  nixRaw`pkgs.python2Packages.treelib`,
  "An efficient implementation of tree data structure in python 2/3",
);

/**
 * Logging framework that organizes messages in a tree structure
 */
export const treelog = mkPackage(
  nixRaw`pkgs.python2Packages.treelog`,
  "Logging framework that organizes messages in a tree structure",
);

/**
 * Pytree Module system for Deep Learning in JAX
 */
export const treex = mkPackage(
  nixRaw`pkgs.python2Packages.treex`,
  "Pytree Module system for Deep Learning in JAX",
);

/**
 * Requests-like API built on top of twisted.web's Agent
 */
export const treq = mkPackage(
  nixRaw`pkgs.python2Packages.treq`,
  "Requests-like API built on top of twisted.web's Agent",
);

/**
 * Python library for communicating with Trezor Hardware Wallet
 */
export const trezor = mkPackage(
  nixRaw`pkgs.python2Packages.trezor`,
  "Python library for communicating with Trezor Hardware Wallet",
);

/**
 * Using Trezor as hardware SSH agent
 */
export const trezor_agent = mkPackage(
  nixRaw`pkgs.python2Packages.trezor_agent`,
  "Using Trezor as hardware SSH agent",
);

/**
 * TensorFlow Reinforcement Learning
 */
export const trfl = mkPackage(
  nixRaw`pkgs.python2Packages.trfl`,
  "TensorFlow Reinforcement Learning",
);

/**
 * Python library for loading and using triangular meshes
 */
export const trimesh = mkPackage(
  nixRaw`pkgs.python2Packages.trimesh`,
  "Python library for loading and using triangular meshes",
);

/**
 * Client for the Trino distributed SQL Engine
 */
export const trino_python_client = mkPackage(
  nixRaw`pkgs.python2Packages.trino-python-client`,
  "Client for the Trino distributed SQL Engine",
);

/**
 * An async/await-native I/O library for humans and snake people
 */
export const trio = mkPackage(
  nixRaw`pkgs.python2Packages.trio`,
  "An async/await-native I/O library for humans and snake people",
);

/**
 * Re-implementation of the asyncio mainloop on top of Trio
 */
export const trio_asyncio = mkPackage(
  nixRaw`pkgs.python2Packages.trio-asyncio`,
  "Re-implementation of the asyncio mainloop on top of Trio",
);

/**
 * WebSocket client and server implementation for Python Trio
 */
export const trio_websocket = mkPackage(
  nixRaw`pkgs.python2Packages.trio-websocket`,
  "WebSocket client and server implementation for Python Trio",
);

/**
 * Triton python client
 */
export const tritonclient = mkPackage(
  nixRaw`pkgs.python2Packages.tritonclient`,
  "Triton python client",
);

/**
 * Library to create AWS CloudFormation descriptions
 */
export const troposphere = mkPackage(
  nixRaw`pkgs.python2Packages.troposphere`,
  "Library to create AWS CloudFormation descriptions",
);

/**
 * Canonical source for classifiers on PyPI
 */
export const trove_classifiers = mkPackage(
  nixRaw`pkgs.python2Packages.trove-classifiers`,
  "Canonical source for classifiers on PyPI",
);

/**
 * The video game rating system
 */
export const trueskill = mkPackage(
  nixRaw`pkgs.python2Packages.trueskill`,
  "The video game rating system",
);

/**
 * High quality TLS certs while you wait, for the discerning tester
 */
export const trustme = mkPackage(
  nixRaw`pkgs.python2Packages.trustme`,
  "High quality TLS certs while you wait, for the discerning tester",
);

/**
 * Verify certificates using native system trust stores
 */
export const truststore = mkPackage(
  nixRaw`pkgs.python2Packages.truststore`,
  "Verify certificates using native system trust stores",
);

/**
 * The server of the Tryton application platform
 */
export const trytond = mkPackage(
  nixRaw`pkgs.python2Packages.trytond`,
  "The server of the Tryton application platform",
);

/**
 * Automatic extraction of relevant features from time series
 */
export const tsfresh = mkPackage(
  nixRaw`pkgs.python2Packages.tsfresh`,
  "Automatic extraction of relevant features from time series",
);

/**
 * The tree sequence toolkit
 */
export const tskit = mkPackage(
  nixRaw`pkgs.python2Packages.tskit`,
  "The tree sequence toolkit",
);

/**
 * Image Test Time Augmentation with PyTorch
 */
export const ttach = mkPackage(
  nixRaw`pkgs.python2Packages.ttach`,
  "Image Test Time Augmentation with PyTorch",
);

/**
 * Module to interact with Twinkly LEDs
 */
export const ttls = mkPackage(
  nixRaw`pkgs.python2Packages.ttls`,
  "Module to interact with Twinkly LEDs",
);

/**
 * Template Text Parser
 */
export const ttp = mkPackage(
  nixRaw`pkgs.python2Packages.ttp`,
  "Template Text Parser",
);

/**
 * Template Text Parser Templates collections
 */
export const ttp_templates = mkPackage(
  nixRaw`pkgs.python2Packages.ttp-templates`,
  "Template Text Parser Templates collections",
);

/**
 * Tokenizer for Text to Speech (TTS) models
 */
export const ttstokenizer = mkPackage(
  nixRaw`pkgs.python2Packages.ttstokenizer`,
  "Tokenizer for Text to Speech (TTS) models",
);

/**
 * a data-processing and flow-control engine for event-driven programs
 */
export const tubes = mkPackage(
  nixRaw`pkgs.python2Packages.tubes`,
  "a data-processing and flow-control engine for event-driven programs",
);

/**
 * Youtube (and other video site) to Internet Archive Uploader
 */
export const tubeup = mkPackage(
  nixRaw`pkgs.python2Packages.tubeup`,
  "Youtube (and other video site) to Internet Archive Uploader",
);

/**
 * Python API for the browse feature of Spotify
 */
export const tunigo = mkPackage(
  nixRaw`pkgs.python2Packages.tunigo`,
  "Python API for the browse feature of Spotify",
);

/**
 * Snapshot testing tool
 */
export const turnt = mkPackage(
  nixRaw`pkgs.python2Packages.turnt`,
  "Snapshot testing tool",
);

/**
 * Tuya IoT Python SDK for Tuya Open API
 */
export const tuya_iot_py_sdk = mkPackage(
  nixRaw`pkgs.python2Packages.tuya-iot-py-sdk`,
  "Tuya IoT Python SDK for Tuya Open API",
);

/**
 * Python module with the Tuya API
 */
export const tuyaha = mkPackage(
  nixRaw`pkgs.python2Packages.tuyaha`,
  "Python module with the Tuya API",
);

/**
 * Simple to use TVDB (thetvdb.com) API in Python
 */
export const tvdb_api = mkPackage(
  nixRaw`pkgs.python2Packages.tvdb-api`,
  "Simple to use TVDB (thetvdb.com) API in Python",
);

/**
 * A library for synthesizing and manipulating quantum circuits
 */
export const tweedledum = mkPackage(
  nixRaw`pkgs.python2Packages.tweedledum`,
  "A library for synthesizing and manipulating quantum circuits",
);

/**
 * Twitter library for Python
 */
export const tweepy = mkPackage(
  nixRaw`pkgs.python2Packages.tweepy`,
  "Twitter library for Python",
);

/**
 * Python client for Twente Milieu
 */
export const twentemilieu = mkPackage(
  nixRaw`pkgs.python2Packages.twentemilieu`,
  "Python client for Twente Milieu",
);

/**
 * Twiggy is the first totally new design for a logger since log4j
 */
export const twiggy = mkPackage(
  nixRaw`pkgs.python2Packages.twiggy`,
  "Twiggy is the first totally new design for a logger since log4j",
);

/**
 * Twilio API client and TwiML generator
 */
export const twilio = mkPackage(
  nixRaw`pkgs.python2Packages.twilio`,
  "Twilio API client and TwiML generator",
);

/**
 * A simple scripting language for Web browsing
 */
export const twill = mkPackage(
  nixRaw`pkgs.python2Packages.twill`,
  "A simple scripting language for Web browsing",
);

/**
 * Collection of utilities for interacting with PyPI
 */
export const twine = mkPackage(
  nixRaw`pkgs.python2Packages.twine`,
  "Collection of utilities for interacting with PyPI",
);

/**
 * Python module to communicate with Twinkly LED strings
 */
export const twinkly_client = mkPackage(
  nixRaw`pkgs.python2Packages.twinkly-client`,
  "Python module to communicate with Twinkly LED strings",
);

/**
 * Asynchronous networking framework written in Python
 */
export const twisted = mkPackage(
  nixRaw`pkgs.python2Packages.twisted`,
  "Asynchronous networking framework written in Python",
);

/**
 * Twitch module for Python
 */
export const twitch_python = mkPackage(
  nixRaw`pkgs.python2Packages.twitch-python`,
  "Twitch module for Python",
);

/**
 * Python implementation of the Twitch Helix API, its Webhook, PubSub and EventSub
 */
export const twitchapi = mkPackage(
  nixRaw`pkgs.python2Packages.twitchapi`,
  "Python implementation of the Twitch Helix API, its Webhook, PubSub and EventSub",
);

/**
 * Twitter API library
 */
export const twitter = mkPackage(
  nixRaw`pkgs.python2Packages.twitter`,
  "Twitter API library",
);

/**
 * Twitter's common collections
 */
export const twitter_common_collections = mkPackage(
  nixRaw`pkgs.python2Packages.twitter-common-collections`,
  "Twitter's common collections",
);

/**
 * Twitter's API to the confluence wiki
 */
export const twitter_common_confluence = mkPackage(
  nixRaw`pkgs.python2Packages.twitter-common-confluence`,
  "Twitter's API to the confluence wiki",
);

/**
 * Utilities for manipulating and finding files and directories
 */
export const twitter_common_dirutil = mkPackage(
  nixRaw`pkgs.python2Packages.twitter-common-dirutil`,
  "Utilities for manipulating and finding files and directories",
);

/**
 * Twitter's 2.x / 3.x compatibility swiss-army knife
 */
export const twitter_common_lang = mkPackage(
  nixRaw`pkgs.python2Packages.twitter-common-lang`,
  "Twitter's 2.x / 3.x compatibility swiss-army knife",
);

/**
 * Twitter's common logging library
 */
export const twitter_common_log = mkPackage(
  nixRaw`pkgs.python2Packages.twitter-common-log`,
  "Twitter's common logging library",
);

/**
 * Twitter's optparse wrapper
 */
export const twitter_common_options = mkPackage(
  nixRaw`pkgs.python2Packages.twitter-common-options`,
  "Twitter's optparse wrapper",
);

/**
 * Python wrapper for Twitter's REST and Streaming APIs
 */
export const twitterapi = mkPackage(
  nixRaw`pkgs.python2Packages.twitterapi`,
  "Python wrapper for Twitter's REST and Streaming APIs",
);

/**
 * Bindings for the Twofish implementation by Niels Ferguson
 */
export const twofish = mkPackage(
  nixRaw`pkgs.python2Packages.twofish`,
  "Bindings for the Twofish implementation by Niels Ferguson",
);

/**
 * Utilities to support code that runs unmodified on Twisted and asyncio
 */
export const txaio = mkPackage(
  nixRaw`pkgs.python2Packages.txaio`,
  "Utilities to support code that runs unmodified on Twisted and asyncio",
);

/**
 * Library for communicating with AMQP peers and brokers using Twisted
 */
export const txamqp = mkPackage(
  nixRaw`pkgs.python2Packages.txamqp`,
  "Library for communicating with AMQP peers and brokers using Twisted",
);

/**
 * Native Python implementation of DBus for Twisted
 */
export const txdbus = mkPackage(
  nixRaw`pkgs.python2Packages.txdbus`,
  "Native Python implementation of DBus for Twisted",
);

/**
 * GitHub API client implemented using Twisted.
 */
export const txgithub = mkPackage(
  nixRaw`pkgs.python2Packages.txgithub`,
  "GitHub API client implemented using Twisted.",
);

/**
 * I2P bindings for Twisted
 */
export const txi2p_tahoe = mkPackage(
  nixRaw`pkgs.python2Packages.txi2p-tahoe`,
  "I2P bindings for Twisted",
);

/**
 * non-blocking redis client for python
 */
export const txredisapi = mkPackage(
  nixRaw`pkgs.python2Packages.txredisapi`,
  "non-blocking redis client for python",
);

/**
 * Asynchronous Python HTTP for Humans.
 */
export const txrequests = mkPackage(
  nixRaw`pkgs.python2Packages.txrequests`,
  "Asynchronous Python HTTP for Humans.",
);

/**
 * Semantic search and workflows powered by language models
 */
export const txtai = mkPackage(
  nixRaw`pkgs.python2Packages.txtai`,
  "Semantic search and workflows powered by language models",
);

/**
 * Twisted-based Tor controller client, with state-tracking and configuration abstractions
 */
export const txtorcon = mkPackage(
  nixRaw`pkgs.python2Packages.txtorcon`,
  "Twisted-based Tor controller client, with state-tracking and configuration abstractions",
);

/**
 * Twisted bindings for ZeroMQ
 */
export const txzmq = mkPackage(
  nixRaw`pkgs.python2Packages.txzmq`,
  "Twisted bindings for ZeroMQ",
);

/**
 * Automated type inference for Machine Learning pipelines
 */
export const type_infer = mkPackage(
  nixRaw`pkgs.python2Packages.type-infer`,
  "Automated type inference for Machine Learning pipelines",
);

/**
 * Type checking helpers for Python
 */
export const typechecks = mkPackage(
  nixRaw`pkgs.python2Packages.typechecks`,
  "Type checking helpers for Python",
);

/**
 * Comprehensive filetype and mimetype detection using libmagic and Pygments
 */
export const typecode = mkPackage(
  nixRaw`pkgs.python2Packages.typecode`,
  "Comprehensive filetype and mimetype detection using libmagic and Pygments",
);

/**
 * A ScanCode Toolkit plugin to provide pre-built binary libraries and utilities and their locations
 */
export const typecode_libmagic = mkPackage(
  nixRaw`pkgs.python2Packages.typecode-libmagic`,
  "A ScanCode Toolkit plugin to provide pre-built binary libraries and utilities and their locations",
);

/**
 * Python AST modules with type comment support
 */
export const typed_ast = mkPackage(
  nixRaw`pkgs.python2Packages.typed-ast`,
  "Python AST modules with type comment support",
);

/**
 * Typed settings based on attrs classes
 */
export const typed_settings = mkPackage(
  nixRaw`pkgs.python2Packages.typed-settings`,
  "Typed settings based on attrs classes",
);

/**
 * This library provides run-time type checking for functions defined with argument type annotations
 */
export const typeguard = mkPackage(
  nixRaw`pkgs.python2Packages.typeguard`,
  "This library provides run-time type checking for functions defined with argument type annotations",
);

/**
 * Library for variable type checker/validator/converter at a run time
 */
export const typepy = mkPackage(
  nixRaw`pkgs.python2Packages.typepy`,
  "Library for variable type checker/validator/converter at a run time",
);

/**
 * Library for building CLI applications
 */
export const typer = mkPackage(
  nixRaw`pkgs.python2Packages.typer`,
  "Library for building CLI applications",
);

/**
 * Type annotations for aiobotocore generated with mypy-boto3-builder
 */
export const types_aiobotocore = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore`,
  "Type annotations for aiobotocore generated with mypy-boto3-builder",
);

/**
 * Type annotations for aiobotocore accessanalyzer
 */
export const types_aiobotocore_accessanalyzer = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-accessanalyzer`,
  "Type annotations for aiobotocore accessanalyzer",
);

/**
 * Type annotations for aiobotocore account
 */
export const types_aiobotocore_account = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-account`,
  "Type annotations for aiobotocore account",
);

/**
 * Type annotations for aiobotocore acm
 */
export const types_aiobotocore_acm = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-acm`,
  "Type annotations for aiobotocore acm",
);

/**
 * Type annotations for aiobotocore acm-pca
 */
export const types_aiobotocore_acm_pca = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-acm-pca`,
  "Type annotations for aiobotocore acm-pca",
);

/**
 * Type annotations for aiobotocore alexaforbusiness
 */
export const types_aiobotocore_alexaforbusiness = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-alexaforbusiness`,
  "Type annotations for aiobotocore alexaforbusiness",
);

/**
 * Type annotations for aiobotocore amp
 */
export const types_aiobotocore_amp = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-amp`,
  "Type annotations for aiobotocore amp",
);

/**
 * Type annotations for aiobotocore amplify
 */
export const types_aiobotocore_amplify = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-amplify`,
  "Type annotations for aiobotocore amplify",
);

/**
 * Type annotations for aiobotocore amplifybackend
 */
export const types_aiobotocore_amplifybackend = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-amplifybackend`,
  "Type annotations for aiobotocore amplifybackend",
);

/**
 * Type annotations for aiobotocore amplifyuibuilder
 */
export const types_aiobotocore_amplifyuibuilder = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-amplifyuibuilder`,
  "Type annotations for aiobotocore amplifyuibuilder",
);

/**
 * Type annotations for aiobotocore apigateway
 */
export const types_aiobotocore_apigateway = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-apigateway`,
  "Type annotations for aiobotocore apigateway",
);

/**
 * Type annotations for aiobotocore apigatewaymanagementapi
 */
export const types_aiobotocore_apigatewaymanagementapi = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-apigatewaymanagementapi`,
  "Type annotations for aiobotocore apigatewaymanagementapi",
);

/**
 * Type annotations for aiobotocore apigatewayv2
 */
export const types_aiobotocore_apigatewayv2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-apigatewayv2`,
  "Type annotations for aiobotocore apigatewayv2",
);

/**
 * Type annotations for aiobotocore appconfig
 */
export const types_aiobotocore_appconfig = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-appconfig`,
  "Type annotations for aiobotocore appconfig",
);

/**
 * Type annotations for aiobotocore appconfigdata
 */
export const types_aiobotocore_appconfigdata = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-appconfigdata`,
  "Type annotations for aiobotocore appconfigdata",
);

/**
 * Type annotations for aiobotocore appfabric
 */
export const types_aiobotocore_appfabric = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-appfabric`,
  "Type annotations for aiobotocore appfabric",
);

/**
 * Type annotations for aiobotocore appflow
 */
export const types_aiobotocore_appflow = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-appflow`,
  "Type annotations for aiobotocore appflow",
);

/**
 * Type annotations for aiobotocore appintegrations
 */
export const types_aiobotocore_appintegrations = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-appintegrations`,
  "Type annotations for aiobotocore appintegrations",
);

/**
 * Type annotations for aiobotocore application-autoscaling
 */
export const types_aiobotocore_application_autoscaling = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-application-autoscaling`,
  "Type annotations for aiobotocore application-autoscaling",
);

/**
 * Type annotations for aiobotocore application-insights
 */
export const types_aiobotocore_application_insights = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-application-insights`,
  "Type annotations for aiobotocore application-insights",
);

/**
 * Type annotations for aiobotocore applicationcostprofiler
 */
export const types_aiobotocore_applicationcostprofiler = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-applicationcostprofiler`,
  "Type annotations for aiobotocore applicationcostprofiler",
);

/**
 * Type annotations for aiobotocore appmesh
 */
export const types_aiobotocore_appmesh = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-appmesh`,
  "Type annotations for aiobotocore appmesh",
);

/**
 * Type annotations for aiobotocore apprunner
 */
export const types_aiobotocore_apprunner = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-apprunner`,
  "Type annotations for aiobotocore apprunner",
);

/**
 * Type annotations for aiobotocore appstream
 */
export const types_aiobotocore_appstream = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-appstream`,
  "Type annotations for aiobotocore appstream",
);

/**
 * Type annotations for aiobotocore appsync
 */
export const types_aiobotocore_appsync = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-appsync`,
  "Type annotations for aiobotocore appsync",
);

/**
 * Type annotations for aiobotocore arc-zonal-shift
 */
export const types_aiobotocore_arc_zonal_shift = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-arc-zonal-shift`,
  "Type annotations for aiobotocore arc-zonal-shift",
);

/**
 * Type annotations for aiobotocore athena
 */
export const types_aiobotocore_athena = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-athena`,
  "Type annotations for aiobotocore athena",
);

/**
 * Type annotations for aiobotocore auditmanager
 */
export const types_aiobotocore_auditmanager = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-auditmanager`,
  "Type annotations for aiobotocore auditmanager",
);

/**
 * Type annotations for aiobotocore autoscaling
 */
export const types_aiobotocore_autoscaling = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-autoscaling`,
  "Type annotations for aiobotocore autoscaling",
);

/**
 * Type annotations for aiobotocore autoscaling-plans
 */
export const types_aiobotocore_autoscaling_plans = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-autoscaling-plans`,
  "Type annotations for aiobotocore autoscaling-plans",
);

/**
 * Type annotations for aiobotocore backup
 */
export const types_aiobotocore_backup = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-backup`,
  "Type annotations for aiobotocore backup",
);

/**
 * Type annotations for aiobotocore backup-gateway
 */
export const types_aiobotocore_backup_gateway = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-backup-gateway`,
  "Type annotations for aiobotocore backup-gateway",
);

/**
 * Type annotations for aiobotocore backupstorage
 */
export const types_aiobotocore_backupstorage = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-backupstorage`,
  "Type annotations for aiobotocore backupstorage",
);

/**
 * Type annotations for aiobotocore batch
 */
export const types_aiobotocore_batch = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-batch`,
  "Type annotations for aiobotocore batch",
);

/**
 * Type annotations for aiobotocore billingconductor
 */
export const types_aiobotocore_billingconductor = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-billingconductor`,
  "Type annotations for aiobotocore billingconductor",
);

/**
 * Type annotations for aiobotocore braket
 */
export const types_aiobotocore_braket = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-braket`,
  "Type annotations for aiobotocore braket",
);

/**
 * Type annotations for aiobotocore budgets
 */
export const types_aiobotocore_budgets = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-budgets`,
  "Type annotations for aiobotocore budgets",
);

/**
 * Type annotations for aiobotocore ce
 */
export const types_aiobotocore_ce = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ce`,
  "Type annotations for aiobotocore ce",
);

/**
 * Type annotations for aiobotocore chime
 */
export const types_aiobotocore_chime = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-chime`,
  "Type annotations for aiobotocore chime",
);

/**
 * Type annotations for aiobotocore chime-sdk-identity
 */
export const types_aiobotocore_chime_sdk_identity = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-chime-sdk-identity`,
  "Type annotations for aiobotocore chime-sdk-identity",
);

/**
 * Type annotations for aiobotocore chime-sdk-media-pipelines
 */
export const types_aiobotocore_chime_sdk_media_pipelines = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-chime-sdk-media-pipelines`,
  "Type annotations for aiobotocore chime-sdk-media-pipelines",
);

/**
 * Type annotations for aiobotocore chime-sdk-meetings
 */
export const types_aiobotocore_chime_sdk_meetings = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-chime-sdk-meetings`,
  "Type annotations for aiobotocore chime-sdk-meetings",
);

/**
 * Type annotations for aiobotocore chime-sdk-messaging
 */
export const types_aiobotocore_chime_sdk_messaging = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-chime-sdk-messaging`,
  "Type annotations for aiobotocore chime-sdk-messaging",
);

/**
 * Type annotations for aiobotocore chime-sdk-voice
 */
export const types_aiobotocore_chime_sdk_voice = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-chime-sdk-voice`,
  "Type annotations for aiobotocore chime-sdk-voice",
);

/**
 * Type annotations for aiobotocore cleanrooms
 */
export const types_aiobotocore_cleanrooms = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cleanrooms`,
  "Type annotations for aiobotocore cleanrooms",
);

/**
 * Type annotations for aiobotocore cloud9
 */
export const types_aiobotocore_cloud9 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloud9`,
  "Type annotations for aiobotocore cloud9",
);

/**
 * Type annotations for aiobotocore cloudcontrol
 */
export const types_aiobotocore_cloudcontrol = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloudcontrol`,
  "Type annotations for aiobotocore cloudcontrol",
);

/**
 * Type annotations for aiobotocore clouddirectory
 */
export const types_aiobotocore_clouddirectory = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-clouddirectory`,
  "Type annotations for aiobotocore clouddirectory",
);

/**
 * Type annotations for aiobotocore cloudformation
 */
export const types_aiobotocore_cloudformation = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloudformation`,
  "Type annotations for aiobotocore cloudformation",
);

/**
 * Type annotations for aiobotocore cloudfront
 */
export const types_aiobotocore_cloudfront = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloudfront`,
  "Type annotations for aiobotocore cloudfront",
);

/**
 * Type annotations for aiobotocore cloudhsm
 */
export const types_aiobotocore_cloudhsm = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloudhsm`,
  "Type annotations for aiobotocore cloudhsm",
);

/**
 * Type annotations for aiobotocore cloudhsmv2
 */
export const types_aiobotocore_cloudhsmv2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloudhsmv2`,
  "Type annotations for aiobotocore cloudhsmv2",
);

/**
 * Type annotations for aiobotocore cloudsearch
 */
export const types_aiobotocore_cloudsearch = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloudsearch`,
  "Type annotations for aiobotocore cloudsearch",
);

/**
 * Type annotations for aiobotocore cloudsearchdomain
 */
export const types_aiobotocore_cloudsearchdomain = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloudsearchdomain`,
  "Type annotations for aiobotocore cloudsearchdomain",
);

/**
 * Type annotations for aiobotocore cloudtrail
 */
export const types_aiobotocore_cloudtrail = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloudtrail`,
  "Type annotations for aiobotocore cloudtrail",
);

/**
 * Type annotations for aiobotocore cloudtrail-data
 */
export const types_aiobotocore_cloudtrail_data = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloudtrail-data`,
  "Type annotations for aiobotocore cloudtrail-data",
);

/**
 * Type annotations for aiobotocore cloudwatch
 */
export const types_aiobotocore_cloudwatch = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cloudwatch`,
  "Type annotations for aiobotocore cloudwatch",
);

/**
 * Type annotations for aiobotocore codeartifact
 */
export const types_aiobotocore_codeartifact = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codeartifact`,
  "Type annotations for aiobotocore codeartifact",
);

/**
 * Type annotations for aiobotocore codebuild
 */
export const types_aiobotocore_codebuild = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codebuild`,
  "Type annotations for aiobotocore codebuild",
);

/**
 * Type annotations for aiobotocore codecatalyst
 */
export const types_aiobotocore_codecatalyst = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codecatalyst`,
  "Type annotations for aiobotocore codecatalyst",
);

/**
 * Type annotations for aiobotocore codecommit
 */
export const types_aiobotocore_codecommit = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codecommit`,
  "Type annotations for aiobotocore codecommit",
);

/**
 * Type annotations for aiobotocore codedeploy
 */
export const types_aiobotocore_codedeploy = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codedeploy`,
  "Type annotations for aiobotocore codedeploy",
);

/**
 * Type annotations for aiobotocore codeguru-reviewer
 */
export const types_aiobotocore_codeguru_reviewer = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codeguru-reviewer`,
  "Type annotations for aiobotocore codeguru-reviewer",
);

/**
 * Type annotations for aiobotocore codeguru-security
 */
export const types_aiobotocore_codeguru_security = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codeguru-security`,
  "Type annotations for aiobotocore codeguru-security",
);

/**
 * Type annotations for aiobotocore codeguruprofiler
 */
export const types_aiobotocore_codeguruprofiler = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codeguruprofiler`,
  "Type annotations for aiobotocore codeguruprofiler",
);

/**
 * Type annotations for aiobotocore codepipeline
 */
export const types_aiobotocore_codepipeline = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codepipeline`,
  "Type annotations for aiobotocore codepipeline",
);

/**
 * Type annotations for aiobotocore codestar
 */
export const types_aiobotocore_codestar = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codestar`,
  "Type annotations for aiobotocore codestar",
);

/**
 * Type annotations for aiobotocore codestar-connections
 */
export const types_aiobotocore_codestar_connections = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codestar-connections`,
  "Type annotations for aiobotocore codestar-connections",
);

/**
 * Type annotations for aiobotocore codestar-notifications
 */
export const types_aiobotocore_codestar_notifications = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-codestar-notifications`,
  "Type annotations for aiobotocore codestar-notifications",
);

/**
 * Type annotations for aiobotocore cognito-identity
 */
export const types_aiobotocore_cognito_identity = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cognito-identity`,
  "Type annotations for aiobotocore cognito-identity",
);

/**
 * Type annotations for aiobotocore cognito-idp
 */
export const types_aiobotocore_cognito_idp = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cognito-idp`,
  "Type annotations for aiobotocore cognito-idp",
);

/**
 * Type annotations for aiobotocore cognito-sync
 */
export const types_aiobotocore_cognito_sync = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cognito-sync`,
  "Type annotations for aiobotocore cognito-sync",
);

/**
 * Type annotations for aiobotocore comprehend
 */
export const types_aiobotocore_comprehend = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-comprehend`,
  "Type annotations for aiobotocore comprehend",
);

/**
 * Type annotations for aiobotocore comprehendmedical
 */
export const types_aiobotocore_comprehendmedical = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-comprehendmedical`,
  "Type annotations for aiobotocore comprehendmedical",
);

/**
 * Type annotations for aiobotocore compute-optimizer
 */
export const types_aiobotocore_compute_optimizer = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-compute-optimizer`,
  "Type annotations for aiobotocore compute-optimizer",
);

/**
 * Type annotations for aiobotocore config
 */
export const types_aiobotocore_config = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-config`,
  "Type annotations for aiobotocore config",
);

/**
 * Type annotations for aiobotocore connect
 */
export const types_aiobotocore_connect = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-connect`,
  "Type annotations for aiobotocore connect",
);

/**
 * Type annotations for aiobotocore connect-contact-lens
 */
export const types_aiobotocore_connect_contact_lens = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-connect-contact-lens`,
  "Type annotations for aiobotocore connect-contact-lens",
);

/**
 * Type annotations for aiobotocore connectcampaigns
 */
export const types_aiobotocore_connectcampaigns = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-connectcampaigns`,
  "Type annotations for aiobotocore connectcampaigns",
);

/**
 * Type annotations for aiobotocore connectcases
 */
export const types_aiobotocore_connectcases = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-connectcases`,
  "Type annotations for aiobotocore connectcases",
);

/**
 * Type annotations for aiobotocore connectparticipant
 */
export const types_aiobotocore_connectparticipant = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-connectparticipant`,
  "Type annotations for aiobotocore connectparticipant",
);

/**
 * Type annotations for aiobotocore controltower
 */
export const types_aiobotocore_controltower = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-controltower`,
  "Type annotations for aiobotocore controltower",
);

/**
 * Type annotations for aiobotocore cur
 */
export const types_aiobotocore_cur = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-cur`,
  "Type annotations for aiobotocore cur",
);

/**
 * Type annotations for aiobotocore customer-profiles
 */
export const types_aiobotocore_customer_profiles = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-customer-profiles`,
  "Type annotations for aiobotocore customer-profiles",
);

/**
 * Type annotations for aiobotocore databrew
 */
export const types_aiobotocore_databrew = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-databrew`,
  "Type annotations for aiobotocore databrew",
);

/**
 * Type annotations for aiobotocore dataexchange
 */
export const types_aiobotocore_dataexchange = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-dataexchange`,
  "Type annotations for aiobotocore dataexchange",
);

/**
 * Type annotations for aiobotocore datapipeline
 */
export const types_aiobotocore_datapipeline = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-datapipeline`,
  "Type annotations for aiobotocore datapipeline",
);

/**
 * Type annotations for aiobotocore datasync
 */
export const types_aiobotocore_datasync = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-datasync`,
  "Type annotations for aiobotocore datasync",
);

/**
 * Type annotations for aiobotocore dax
 */
export const types_aiobotocore_dax = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-dax`,
  "Type annotations for aiobotocore dax",
);

/**
 * Type annotations for aiobotocore detective
 */
export const types_aiobotocore_detective = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-detective`,
  "Type annotations for aiobotocore detective",
);

/**
 * Type annotations for aiobotocore devicefarm
 */
export const types_aiobotocore_devicefarm = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-devicefarm`,
  "Type annotations for aiobotocore devicefarm",
);

/**
 * Type annotations for aiobotocore devops-guru
 */
export const types_aiobotocore_devops_guru = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-devops-guru`,
  "Type annotations for aiobotocore devops-guru",
);

/**
 * Type annotations for aiobotocore directconnect
 */
export const types_aiobotocore_directconnect = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-directconnect`,
  "Type annotations for aiobotocore directconnect",
);

/**
 * Type annotations for aiobotocore discovery
 */
export const types_aiobotocore_discovery = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-discovery`,
  "Type annotations for aiobotocore discovery",
);

/**
 * Type annotations for aiobotocore dlm
 */
export const types_aiobotocore_dlm = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-dlm`,
  "Type annotations for aiobotocore dlm",
);

/**
 * Type annotations for aiobotocore dms
 */
export const types_aiobotocore_dms = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-dms`,
  "Type annotations for aiobotocore dms",
);

/**
 * Type annotations for aiobotocore docdb
 */
export const types_aiobotocore_docdb = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-docdb`,
  "Type annotations for aiobotocore docdb",
);

/**
 * Type annotations for aiobotocore docdb-elastic
 */
export const types_aiobotocore_docdb_elastic = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-docdb-elastic`,
  "Type annotations for aiobotocore docdb-elastic",
);

/**
 * Type annotations for aiobotocore drs
 */
export const types_aiobotocore_drs = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-drs`,
  "Type annotations for aiobotocore drs",
);

/**
 * Type annotations for aiobotocore ds
 */
export const types_aiobotocore_ds = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ds`,
  "Type annotations for aiobotocore ds",
);

/**
 * Type annotations for aiobotocore dynamodb
 */
export const types_aiobotocore_dynamodb = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-dynamodb`,
  "Type annotations for aiobotocore dynamodb",
);

/**
 * Type annotations for aiobotocore dynamodbstreams
 */
export const types_aiobotocore_dynamodbstreams = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-dynamodbstreams`,
  "Type annotations for aiobotocore dynamodbstreams",
);

/**
 * Type annotations for aiobotocore ebs
 */
export const types_aiobotocore_ebs = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ebs`,
  "Type annotations for aiobotocore ebs",
);

/**
 * Type annotations for aiobotocore ec2
 */
export const types_aiobotocore_ec2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ec2`,
  "Type annotations for aiobotocore ec2",
);

/**
 * Type annotations for aiobotocore ec2-instance-connect
 */
export const types_aiobotocore_ec2_instance_connect = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ec2-instance-connect`,
  "Type annotations for aiobotocore ec2-instance-connect",
);

/**
 * Type annotations for aiobotocore ecr
 */
export const types_aiobotocore_ecr = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ecr`,
  "Type annotations for aiobotocore ecr",
);

/**
 * Type annotations for aiobotocore ecr-public
 */
export const types_aiobotocore_ecr_public = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ecr-public`,
  "Type annotations for aiobotocore ecr-public",
);

/**
 * Type annotations for aiobotocore ecs
 */
export const types_aiobotocore_ecs = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ecs`,
  "Type annotations for aiobotocore ecs",
);

/**
 * Type annotations for aiobotocore efs
 */
export const types_aiobotocore_efs = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-efs`,
  "Type annotations for aiobotocore efs",
);

/**
 * Type annotations for aiobotocore eks
 */
export const types_aiobotocore_eks = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-eks`,
  "Type annotations for aiobotocore eks",
);

/**
 * Type annotations for aiobotocore elastic-inference
 */
export const types_aiobotocore_elastic_inference = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-elastic-inference`,
  "Type annotations for aiobotocore elastic-inference",
);

/**
 * Type annotations for aiobotocore elasticache
 */
export const types_aiobotocore_elasticache = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-elasticache`,
  "Type annotations for aiobotocore elasticache",
);

/**
 * Type annotations for aiobotocore elasticbeanstalk
 */
export const types_aiobotocore_elasticbeanstalk = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-elasticbeanstalk`,
  "Type annotations for aiobotocore elasticbeanstalk",
);

/**
 * Type annotations for aiobotocore elastictranscoder
 */
export const types_aiobotocore_elastictranscoder = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-elastictranscoder`,
  "Type annotations for aiobotocore elastictranscoder",
);

/**
 * Type annotations for aiobotocore elb
 */
export const types_aiobotocore_elb = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-elb`,
  "Type annotations for aiobotocore elb",
);

/**
 * Type annotations for aiobotocore elbv2
 */
export const types_aiobotocore_elbv2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-elbv2`,
  "Type annotations for aiobotocore elbv2",
);

/**
 * Type annotations for aiobotocore emr
 */
export const types_aiobotocore_emr = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-emr`,
  "Type annotations for aiobotocore emr",
);

/**
 * Type annotations for aiobotocore emr-containers
 */
export const types_aiobotocore_emr_containers = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-emr-containers`,
  "Type annotations for aiobotocore emr-containers",
);

/**
 * Type annotations for aiobotocore emr-serverless
 */
export const types_aiobotocore_emr_serverless = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-emr-serverless`,
  "Type annotations for aiobotocore emr-serverless",
);

/**
 * Type annotations for aiobotocore entityresolution
 */
export const types_aiobotocore_entityresolution = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-entityresolution`,
  "Type annotations for aiobotocore entityresolution",
);

/**
 * Type annotations for aiobotocore es
 */
export const types_aiobotocore_es = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-es`,
  "Type annotations for aiobotocore es",
);

/**
 * Type annotations for aiobotocore events
 */
export const types_aiobotocore_events = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-events`,
  "Type annotations for aiobotocore events",
);

/**
 * Type annotations for aiobotocore evidently
 */
export const types_aiobotocore_evidently = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-evidently`,
  "Type annotations for aiobotocore evidently",
);

/**
 * Type annotations for aiobotocore finspace
 */
export const types_aiobotocore_finspace = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-finspace`,
  "Type annotations for aiobotocore finspace",
);

/**
 * Type annotations for aiobotocore finspace-data
 */
export const types_aiobotocore_finspace_data = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-finspace-data`,
  "Type annotations for aiobotocore finspace-data",
);

/**
 * Type annotations for aiobotocore firehose
 */
export const types_aiobotocore_firehose = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-firehose`,
  "Type annotations for aiobotocore firehose",
);

/**
 * Type annotations for aiobotocore fis
 */
export const types_aiobotocore_fis = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-fis`,
  "Type annotations for aiobotocore fis",
);

/**
 * Type annotations for aiobotocore fms
 */
export const types_aiobotocore_fms = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-fms`,
  "Type annotations for aiobotocore fms",
);

/**
 * Type annotations for aiobotocore forecast
 */
export const types_aiobotocore_forecast = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-forecast`,
  "Type annotations for aiobotocore forecast",
);

/**
 * Type annotations for aiobotocore forecastquery
 */
export const types_aiobotocore_forecastquery = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-forecastquery`,
  "Type annotations for aiobotocore forecastquery",
);

/**
 * Type annotations for aiobotocore frauddetector
 */
export const types_aiobotocore_frauddetector = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-frauddetector`,
  "Type annotations for aiobotocore frauddetector",
);

/**
 * Type annotations for aiobotocore fsx
 */
export const types_aiobotocore_fsx = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-fsx`,
  "Type annotations for aiobotocore fsx",
);

/**
 * Type annotations for aiobotocore gamelift
 */
export const types_aiobotocore_gamelift = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-gamelift`,
  "Type annotations for aiobotocore gamelift",
);

/**
 * Type annotations for aiobotocore gamesparks
 */
export const types_aiobotocore_gamesparks = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-gamesparks`,
  "Type annotations for aiobotocore gamesparks",
);

/**
 * Type annotations for aiobotocore glacier
 */
export const types_aiobotocore_glacier = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-glacier`,
  "Type annotations for aiobotocore glacier",
);

/**
 * Type annotations for aiobotocore globalaccelerator
 */
export const types_aiobotocore_globalaccelerator = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-globalaccelerator`,
  "Type annotations for aiobotocore globalaccelerator",
);

/**
 * Type annotations for aiobotocore glue
 */
export const types_aiobotocore_glue = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-glue`,
  "Type annotations for aiobotocore glue",
);

/**
 * Type annotations for aiobotocore grafana
 */
export const types_aiobotocore_grafana = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-grafana`,
  "Type annotations for aiobotocore grafana",
);

/**
 * Type annotations for aiobotocore greengrass
 */
export const types_aiobotocore_greengrass = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-greengrass`,
  "Type annotations for aiobotocore greengrass",
);

/**
 * Type annotations for aiobotocore greengrassv2
 */
export const types_aiobotocore_greengrassv2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-greengrassv2`,
  "Type annotations for aiobotocore greengrassv2",
);

/**
 * Type annotations for aiobotocore groundstation
 */
export const types_aiobotocore_groundstation = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-groundstation`,
  "Type annotations for aiobotocore groundstation",
);

/**
 * Type annotations for aiobotocore guardduty
 */
export const types_aiobotocore_guardduty = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-guardduty`,
  "Type annotations for aiobotocore guardduty",
);

/**
 * Type annotations for aiobotocore health
 */
export const types_aiobotocore_health = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-health`,
  "Type annotations for aiobotocore health",
);

/**
 * Type annotations for aiobotocore healthlake
 */
export const types_aiobotocore_healthlake = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-healthlake`,
  "Type annotations for aiobotocore healthlake",
);

/**
 * Type annotations for aiobotocore honeycode
 */
export const types_aiobotocore_honeycode = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-honeycode`,
  "Type annotations for aiobotocore honeycode",
);

/**
 * Type annotations for aiobotocore iam
 */
export const types_aiobotocore_iam = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iam`,
  "Type annotations for aiobotocore iam",
);

/**
 * Type annotations for aiobotocore identitystore
 */
export const types_aiobotocore_identitystore = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-identitystore`,
  "Type annotations for aiobotocore identitystore",
);

/**
 * Type annotations for aiobotocore imagebuilder
 */
export const types_aiobotocore_imagebuilder = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-imagebuilder`,
  "Type annotations for aiobotocore imagebuilder",
);

/**
 * Type annotations for aiobotocore importexport
 */
export const types_aiobotocore_importexport = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-importexport`,
  "Type annotations for aiobotocore importexport",
);

/**
 * Type annotations for aiobotocore inspector
 */
export const types_aiobotocore_inspector = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-inspector`,
  "Type annotations for aiobotocore inspector",
);

/**
 * Type annotations for aiobotocore inspector2
 */
export const types_aiobotocore_inspector2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-inspector2`,
  "Type annotations for aiobotocore inspector2",
);

/**
 * Type annotations for aiobotocore internetmonitor
 */
export const types_aiobotocore_internetmonitor = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-internetmonitor`,
  "Type annotations for aiobotocore internetmonitor",
);

/**
 * Type annotations for aiobotocore iot
 */
export const types_aiobotocore_iot = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iot`,
  "Type annotations for aiobotocore iot",
);

/**
 * Type annotations for aiobotocore iot1click-devices
 */
export const types_aiobotocore_iot1click_devices = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iot1click-devices`,
  "Type annotations for aiobotocore iot1click-devices",
);

/**
 * Type annotations for aiobotocore iot1click-projects
 */
export const types_aiobotocore_iot1click_projects = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iot1click-projects`,
  "Type annotations for aiobotocore iot1click-projects",
);

/**
 * Type annotations for aiobotocore iot-data
 */
export const types_aiobotocore_iot_data = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iot-data`,
  "Type annotations for aiobotocore iot-data",
);

/**
 * Type annotations for aiobotocore iot-jobs-data
 */
export const types_aiobotocore_iot_jobs_data = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iot-jobs-data`,
  "Type annotations for aiobotocore iot-jobs-data",
);

/**
 * Type annotations for aiobotocore iot-roborunner
 */
export const types_aiobotocore_iot_roborunner = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iot-roborunner`,
  "Type annotations for aiobotocore iot-roborunner",
);

/**
 * Type annotations for aiobotocore iotanalytics
 */
export const types_aiobotocore_iotanalytics = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iotanalytics`,
  "Type annotations for aiobotocore iotanalytics",
);

/**
 * Type annotations for aiobotocore iotdeviceadvisor
 */
export const types_aiobotocore_iotdeviceadvisor = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iotdeviceadvisor`,
  "Type annotations for aiobotocore iotdeviceadvisor",
);

/**
 * Type annotations for aiobotocore iotevents
 */
export const types_aiobotocore_iotevents = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iotevents`,
  "Type annotations for aiobotocore iotevents",
);

/**
 * Type annotations for aiobotocore iotevents-data
 */
export const types_aiobotocore_iotevents_data = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iotevents-data`,
  "Type annotations for aiobotocore iotevents-data",
);

/**
 * Type annotations for aiobotocore iotfleethub
 */
export const types_aiobotocore_iotfleethub = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iotfleethub`,
  "Type annotations for aiobotocore iotfleethub",
);

/**
 * Type annotations for aiobotocore iotfleetwise
 */
export const types_aiobotocore_iotfleetwise = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iotfleetwise`,
  "Type annotations for aiobotocore iotfleetwise",
);

/**
 * Type annotations for aiobotocore iotsecuretunneling
 */
export const types_aiobotocore_iotsecuretunneling = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iotsecuretunneling`,
  "Type annotations for aiobotocore iotsecuretunneling",
);

/**
 * Type annotations for aiobotocore iotsitewise
 */
export const types_aiobotocore_iotsitewise = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iotsitewise`,
  "Type annotations for aiobotocore iotsitewise",
);

/**
 * Type annotations for aiobotocore iotthingsgraph
 */
export const types_aiobotocore_iotthingsgraph = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iotthingsgraph`,
  "Type annotations for aiobotocore iotthingsgraph",
);

/**
 * Type annotations for aiobotocore iottwinmaker
 */
export const types_aiobotocore_iottwinmaker = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iottwinmaker`,
  "Type annotations for aiobotocore iottwinmaker",
);

/**
 * Type annotations for aiobotocore iotwireless
 */
export const types_aiobotocore_iotwireless = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-iotwireless`,
  "Type annotations for aiobotocore iotwireless",
);

/**
 * Type annotations for aiobotocore ivs
 */
export const types_aiobotocore_ivs = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ivs`,
  "Type annotations for aiobotocore ivs",
);

/**
 * Type annotations for aiobotocore ivs-realtime
 */
export const types_aiobotocore_ivs_realtime = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ivs-realtime`,
  "Type annotations for aiobotocore ivs-realtime",
);

/**
 * Type annotations for aiobotocore ivschat
 */
export const types_aiobotocore_ivschat = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ivschat`,
  "Type annotations for aiobotocore ivschat",
);

/**
 * Type annotations for aiobotocore kafka
 */
export const types_aiobotocore_kafka = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kafka`,
  "Type annotations for aiobotocore kafka",
);

/**
 * Type annotations for aiobotocore kafkaconnect
 */
export const types_aiobotocore_kafkaconnect = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kafkaconnect`,
  "Type annotations for aiobotocore kafkaconnect",
);

/**
 * Type annotations for aiobotocore kendra
 */
export const types_aiobotocore_kendra = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kendra`,
  "Type annotations for aiobotocore kendra",
);

/**
 * Type annotations for aiobotocore kendra-ranking
 */
export const types_aiobotocore_kendra_ranking = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kendra-ranking`,
  "Type annotations for aiobotocore kendra-ranking",
);

/**
 * Type annotations for aiobotocore keyspaces
 */
export const types_aiobotocore_keyspaces = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-keyspaces`,
  "Type annotations for aiobotocore keyspaces",
);

/**
 * Type annotations for aiobotocore kinesis
 */
export const types_aiobotocore_kinesis = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kinesis`,
  "Type annotations for aiobotocore kinesis",
);

/**
 * Type annotations for aiobotocore kinesis-video-archived-media
 */
export const types_aiobotocore_kinesis_video_archived_media = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kinesis-video-archived-media`,
  "Type annotations for aiobotocore kinesis-video-archived-media",
);

/**
 * Type annotations for aiobotocore kinesis-video-media
 */
export const types_aiobotocore_kinesis_video_media = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kinesis-video-media`,
  "Type annotations for aiobotocore kinesis-video-media",
);

/**
 * Type annotations for aiobotocore kinesis-video-signaling
 */
export const types_aiobotocore_kinesis_video_signaling = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kinesis-video-signaling`,
  "Type annotations for aiobotocore kinesis-video-signaling",
);

/**
 * Type annotations for aiobotocore kinesis-video-webrtc-storage
 */
export const types_aiobotocore_kinesis_video_webrtc_storage = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kinesis-video-webrtc-storage`,
  "Type annotations for aiobotocore kinesis-video-webrtc-storage",
);

/**
 * Type annotations for aiobotocore kinesisanalytics
 */
export const types_aiobotocore_kinesisanalytics = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kinesisanalytics`,
  "Type annotations for aiobotocore kinesisanalytics",
);

/**
 * Type annotations for aiobotocore kinesisanalyticsv2
 */
export const types_aiobotocore_kinesisanalyticsv2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kinesisanalyticsv2`,
  "Type annotations for aiobotocore kinesisanalyticsv2",
);

/**
 * Type annotations for aiobotocore kinesisvideo
 */
export const types_aiobotocore_kinesisvideo = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kinesisvideo`,
  "Type annotations for aiobotocore kinesisvideo",
);

/**
 * Type annotations for aiobotocore kms
 */
export const types_aiobotocore_kms = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-kms`,
  "Type annotations for aiobotocore kms",
);

/**
 * Type annotations for aiobotocore lakeformation
 */
export const types_aiobotocore_lakeformation = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-lakeformation`,
  "Type annotations for aiobotocore lakeformation",
);

/**
 * Type annotations for aiobotocore lambda
 */
export const types_aiobotocore_lambda = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-lambda`,
  "Type annotations for aiobotocore lambda",
);

/**
 * Type annotations for aiobotocore lex-models
 */
export const types_aiobotocore_lex_models = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-lex-models`,
  "Type annotations for aiobotocore lex-models",
);

/**
 * Type annotations for aiobotocore lex-runtime
 */
export const types_aiobotocore_lex_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-lex-runtime`,
  "Type annotations for aiobotocore lex-runtime",
);

/**
 * Type annotations for aiobotocore lexv2-models
 */
export const types_aiobotocore_lexv2_models = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-lexv2-models`,
  "Type annotations for aiobotocore lexv2-models",
);

/**
 * Type annotations for aiobotocore lexv2-runtime
 */
export const types_aiobotocore_lexv2_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-lexv2-runtime`,
  "Type annotations for aiobotocore lexv2-runtime",
);

/**
 * Type annotations for aiobotocore license-manager
 */
export const types_aiobotocore_license_manager = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-license-manager`,
  "Type annotations for aiobotocore license-manager",
);

/**
 * Type annotations for aiobotocore license-manager-linux-subscriptions
 */
export const types_aiobotocore_license_manager_linux_subscriptions = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-license-manager-linux-subscriptions`,
  "Type annotations for aiobotocore license-manager-linux-subscriptions",
);

/**
 * Type annotations for aiobotocore license-manager-user-subscriptions
 */
export const types_aiobotocore_license_manager_user_subscriptions = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-license-manager-user-subscriptions`,
  "Type annotations for aiobotocore license-manager-user-subscriptions",
);

/**
 * Type annotations for aiobotocore lightsail
 */
export const types_aiobotocore_lightsail = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-lightsail`,
  "Type annotations for aiobotocore lightsail",
);

/**
 * Type annotations for aiobotocore location
 */
export const types_aiobotocore_location = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-location`,
  "Type annotations for aiobotocore location",
);

/**
 * Type annotations for aiobotocore logs
 */
export const types_aiobotocore_logs = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-logs`,
  "Type annotations for aiobotocore logs",
);

/**
 * Type annotations for aiobotocore lookoutequipment
 */
export const types_aiobotocore_lookoutequipment = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-lookoutequipment`,
  "Type annotations for aiobotocore lookoutequipment",
);

/**
 * Type annotations for aiobotocore lookoutmetrics
 */
export const types_aiobotocore_lookoutmetrics = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-lookoutmetrics`,
  "Type annotations for aiobotocore lookoutmetrics",
);

/**
 * Type annotations for aiobotocore lookoutvision
 */
export const types_aiobotocore_lookoutvision = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-lookoutvision`,
  "Type annotations for aiobotocore lookoutvision",
);

/**
 * Type annotations for aiobotocore m2
 */
export const types_aiobotocore_m2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-m2`,
  "Type annotations for aiobotocore m2",
);

/**
 * Type annotations for aiobotocore machinelearning
 */
export const types_aiobotocore_machinelearning = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-machinelearning`,
  "Type annotations for aiobotocore machinelearning",
);

/**
 * Type annotations for aiobotocore macie
 */
export const types_aiobotocore_macie = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-macie`,
  "Type annotations for aiobotocore macie",
);

/**
 * Type annotations for aiobotocore macie2
 */
export const types_aiobotocore_macie2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-macie2`,
  "Type annotations for aiobotocore macie2",
);

/**
 * Type annotations for aiobotocore managedblockchain
 */
export const types_aiobotocore_managedblockchain = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-managedblockchain`,
  "Type annotations for aiobotocore managedblockchain",
);

/**
 * Type annotations for aiobotocore managedblockchain-query
 */
export const types_aiobotocore_managedblockchain_query = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-managedblockchain-query`,
  "Type annotations for aiobotocore managedblockchain-query",
);

/**
 * Type annotations for aiobotocore marketplace-catalog
 */
export const types_aiobotocore_marketplace_catalog = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-marketplace-catalog`,
  "Type annotations for aiobotocore marketplace-catalog",
);

/**
 * Type annotations for aiobotocore marketplace-entitlement
 */
export const types_aiobotocore_marketplace_entitlement = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-marketplace-entitlement`,
  "Type annotations for aiobotocore marketplace-entitlement",
);

/**
 * Type annotations for aiobotocore marketplacecommerceanalytics
 */
export const types_aiobotocore_marketplacecommerceanalytics = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-marketplacecommerceanalytics`,
  "Type annotations for aiobotocore marketplacecommerceanalytics",
);

/**
 * Type annotations for aiobotocore mediaconnect
 */
export const types_aiobotocore_mediaconnect = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mediaconnect`,
  "Type annotations for aiobotocore mediaconnect",
);

/**
 * Type annotations for aiobotocore mediaconvert
 */
export const types_aiobotocore_mediaconvert = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mediaconvert`,
  "Type annotations for aiobotocore mediaconvert",
);

/**
 * Type annotations for aiobotocore medialive
 */
export const types_aiobotocore_medialive = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-medialive`,
  "Type annotations for aiobotocore medialive",
);

/**
 * Type annotations for aiobotocore mediapackage
 */
export const types_aiobotocore_mediapackage = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mediapackage`,
  "Type annotations for aiobotocore mediapackage",
);

/**
 * Type annotations for aiobotocore mediapackage-vod
 */
export const types_aiobotocore_mediapackage_vod = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mediapackage-vod`,
  "Type annotations for aiobotocore mediapackage-vod",
);

/**
 * Type annotations for aiobotocore mediapackagev2
 */
export const types_aiobotocore_mediapackagev2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mediapackagev2`,
  "Type annotations for aiobotocore mediapackagev2",
);

/**
 * Type annotations for aiobotocore mediastore
 */
export const types_aiobotocore_mediastore = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mediastore`,
  "Type annotations for aiobotocore mediastore",
);

/**
 * Type annotations for aiobotocore mediastore-data
 */
export const types_aiobotocore_mediastore_data = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mediastore-data`,
  "Type annotations for aiobotocore mediastore-data",
);

/**
 * Type annotations for aiobotocore mediatailor
 */
export const types_aiobotocore_mediatailor = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mediatailor`,
  "Type annotations for aiobotocore mediatailor",
);

/**
 * Type annotations for aiobotocore medical-imaging
 */
export const types_aiobotocore_medical_imaging = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-medical-imaging`,
  "Type annotations for aiobotocore medical-imaging",
);

/**
 * Type annotations for aiobotocore memorydb
 */
export const types_aiobotocore_memorydb = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-memorydb`,
  "Type annotations for aiobotocore memorydb",
);

/**
 * Type annotations for aiobotocore meteringmarketplace
 */
export const types_aiobotocore_meteringmarketplace = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-meteringmarketplace`,
  "Type annotations for aiobotocore meteringmarketplace",
);

/**
 * Type annotations for aiobotocore mgh
 */
export const types_aiobotocore_mgh = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mgh`,
  "Type annotations for aiobotocore mgh",
);

/**
 * Type annotations for aiobotocore mgn
 */
export const types_aiobotocore_mgn = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mgn`,
  "Type annotations for aiobotocore mgn",
);

/**
 * Type annotations for aiobotocore migration-hub-refactor-spaces
 */
export const types_aiobotocore_migration_hub_refactor_spaces = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-migration-hub-refactor-spaces`,
  "Type annotations for aiobotocore migration-hub-refactor-spaces",
);

/**
 * Type annotations for aiobotocore migrationhub-config
 */
export const types_aiobotocore_migrationhub_config = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-migrationhub-config`,
  "Type annotations for aiobotocore migrationhub-config",
);

/**
 * Type annotations for aiobotocore migrationhuborchestrator
 */
export const types_aiobotocore_migrationhuborchestrator = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-migrationhuborchestrator`,
  "Type annotations for aiobotocore migrationhuborchestrator",
);

/**
 * Type annotations for aiobotocore migrationhubstrategy
 */
export const types_aiobotocore_migrationhubstrategy = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-migrationhubstrategy`,
  "Type annotations for aiobotocore migrationhubstrategy",
);

/**
 * Type annotations for aiobotocore mobile
 */
export const types_aiobotocore_mobile = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mobile`,
  "Type annotations for aiobotocore mobile",
);

/**
 * Type annotations for aiobotocore mq
 */
export const types_aiobotocore_mq = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mq`,
  "Type annotations for aiobotocore mq",
);

/**
 * Type annotations for aiobotocore mturk
 */
export const types_aiobotocore_mturk = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mturk`,
  "Type annotations for aiobotocore mturk",
);

/**
 * Type annotations for aiobotocore mwaa
 */
export const types_aiobotocore_mwaa = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-mwaa`,
  "Type annotations for aiobotocore mwaa",
);

/**
 * Type annotations for aiobotocore neptune
 */
export const types_aiobotocore_neptune = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-neptune`,
  "Type annotations for aiobotocore neptune",
);

/**
 * Type annotations for aiobotocore network-firewall
 */
export const types_aiobotocore_network_firewall = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-network-firewall`,
  "Type annotations for aiobotocore network-firewall",
);

/**
 * Type annotations for aiobotocore networkmanager
 */
export const types_aiobotocore_networkmanager = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-networkmanager`,
  "Type annotations for aiobotocore networkmanager",
);

/**
 * Type annotations for aiobotocore nimble
 */
export const types_aiobotocore_nimble = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-nimble`,
  "Type annotations for aiobotocore nimble",
);

/**
 * Type annotations for aiobotocore oam
 */
export const types_aiobotocore_oam = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-oam`,
  "Type annotations for aiobotocore oam",
);

/**
 * Type annotations for aiobotocore omics
 */
export const types_aiobotocore_omics = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-omics`,
  "Type annotations for aiobotocore omics",
);

/**
 * Type annotations for aiobotocore opensearch
 */
export const types_aiobotocore_opensearch = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-opensearch`,
  "Type annotations for aiobotocore opensearch",
);

/**
 * Type annotations for aiobotocore opensearchserverless
 */
export const types_aiobotocore_opensearchserverless = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-opensearchserverless`,
  "Type annotations for aiobotocore opensearchserverless",
);

/**
 * Type annotations for aiobotocore opsworks
 */
export const types_aiobotocore_opsworks = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-opsworks`,
  "Type annotations for aiobotocore opsworks",
);

/**
 * Type annotations for aiobotocore opsworkscm
 */
export const types_aiobotocore_opsworkscm = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-opsworkscm`,
  "Type annotations for aiobotocore opsworkscm",
);

/**
 * Type annotations for aiobotocore organizations
 */
export const types_aiobotocore_organizations = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-organizations`,
  "Type annotations for aiobotocore organizations",
);

/**
 * Type annotations for aiobotocore osis
 */
export const types_aiobotocore_osis = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-osis`,
  "Type annotations for aiobotocore osis",
);

/**
 * Type annotations for aiobotocore outposts
 */
export const types_aiobotocore_outposts = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-outposts`,
  "Type annotations for aiobotocore outposts",
);

/**
 * Type annotations for aiobotocore panorama
 */
export const types_aiobotocore_panorama = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-panorama`,
  "Type annotations for aiobotocore panorama",
);

/**
 * Type annotations for aiobotocore payment-cryptography
 */
export const types_aiobotocore_payment_cryptography = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-payment-cryptography`,
  "Type annotations for aiobotocore payment-cryptography",
);

/**
 * Type annotations for aiobotocore payment-cryptography-data
 */
export const types_aiobotocore_payment_cryptography_data = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-payment-cryptography-data`,
  "Type annotations for aiobotocore payment-cryptography-data",
);

/**
 * Type annotations for aiobotocore personalize
 */
export const types_aiobotocore_personalize = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-personalize`,
  "Type annotations for aiobotocore personalize",
);

/**
 * Type annotations for aiobotocore personalize-events
 */
export const types_aiobotocore_personalize_events = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-personalize-events`,
  "Type annotations for aiobotocore personalize-events",
);

/**
 * Type annotations for aiobotocore personalize-runtime
 */
export const types_aiobotocore_personalize_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-personalize-runtime`,
  "Type annotations for aiobotocore personalize-runtime",
);

/**
 * Type annotations for aiobotocore pi
 */
export const types_aiobotocore_pi = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-pi`,
  "Type annotations for aiobotocore pi",
);

/**
 * Type annotations for aiobotocore pinpoint
 */
export const types_aiobotocore_pinpoint = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-pinpoint`,
  "Type annotations for aiobotocore pinpoint",
);

/**
 * Type annotations for aiobotocore pinpoint-email
 */
export const types_aiobotocore_pinpoint_email = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-pinpoint-email`,
  "Type annotations for aiobotocore pinpoint-email",
);

/**
 * Type annotations for aiobotocore pinpoint-sms-voice
 */
export const types_aiobotocore_pinpoint_sms_voice = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-pinpoint-sms-voice`,
  "Type annotations for aiobotocore pinpoint-sms-voice",
);

/**
 * Type annotations for aiobotocore pinpoint-sms-voice-v2
 */
export const types_aiobotocore_pinpoint_sms_voice_v2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-pinpoint-sms-voice-v2`,
  "Type annotations for aiobotocore pinpoint-sms-voice-v2",
);

/**
 * Type annotations for aiobotocore pipes
 */
export const types_aiobotocore_pipes = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-pipes`,
  "Type annotations for aiobotocore pipes",
);

/**
 * Type annotations for aiobotocore polly
 */
export const types_aiobotocore_polly = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-polly`,
  "Type annotations for aiobotocore polly",
);

/**
 * Type annotations for aiobotocore pricing
 */
export const types_aiobotocore_pricing = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-pricing`,
  "Type annotations for aiobotocore pricing",
);

/**
 * Type annotations for aiobotocore privatenetworks
 */
export const types_aiobotocore_privatenetworks = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-privatenetworks`,
  "Type annotations for aiobotocore privatenetworks",
);

/**
 * Type annotations for aiobotocore proton
 */
export const types_aiobotocore_proton = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-proton`,
  "Type annotations for aiobotocore proton",
);

/**
 * Type annotations for aiobotocore qldb
 */
export const types_aiobotocore_qldb = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-qldb`,
  "Type annotations for aiobotocore qldb",
);

/**
 * Type annotations for aiobotocore qldb-session
 */
export const types_aiobotocore_qldb_session = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-qldb-session`,
  "Type annotations for aiobotocore qldb-session",
);

/**
 * Type annotations for aiobotocore quicksight
 */
export const types_aiobotocore_quicksight = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-quicksight`,
  "Type annotations for aiobotocore quicksight",
);

/**
 * Type annotations for aiobotocore ram
 */
export const types_aiobotocore_ram = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ram`,
  "Type annotations for aiobotocore ram",
);

/**
 * Type annotations for aiobotocore rbin
 */
export const types_aiobotocore_rbin = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-rbin`,
  "Type annotations for aiobotocore rbin",
);

/**
 * Type annotations for aiobotocore rds
 */
export const types_aiobotocore_rds = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-rds`,
  "Type annotations for aiobotocore rds",
);

/**
 * Type annotations for aiobotocore rds-data
 */
export const types_aiobotocore_rds_data = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-rds-data`,
  "Type annotations for aiobotocore rds-data",
);

/**
 * Type annotations for aiobotocore redshift
 */
export const types_aiobotocore_redshift = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-redshift`,
  "Type annotations for aiobotocore redshift",
);

/**
 * Type annotations for aiobotocore redshift-data
 */
export const types_aiobotocore_redshift_data = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-redshift-data`,
  "Type annotations for aiobotocore redshift-data",
);

/**
 * Type annotations for aiobotocore redshift-serverless
 */
export const types_aiobotocore_redshift_serverless = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-redshift-serverless`,
  "Type annotations for aiobotocore redshift-serverless",
);

/**
 * Type annotations for aiobotocore rekognition
 */
export const types_aiobotocore_rekognition = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-rekognition`,
  "Type annotations for aiobotocore rekognition",
);

/**
 * Type annotations for aiobotocore resiliencehub
 */
export const types_aiobotocore_resiliencehub = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-resiliencehub`,
  "Type annotations for aiobotocore resiliencehub",
);

/**
 * Type annotations for aiobotocore resource-explorer-2
 */
export const types_aiobotocore_resource_explorer_2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-resource-explorer-2`,
  "Type annotations for aiobotocore resource-explorer-2",
);

/**
 * Type annotations for aiobotocore resource-groups
 */
export const types_aiobotocore_resource_groups = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-resource-groups`,
  "Type annotations for aiobotocore resource-groups",
);

/**
 * Type annotations for aiobotocore resourcegroupstaggingapi
 */
export const types_aiobotocore_resourcegroupstaggingapi = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-resourcegroupstaggingapi`,
  "Type annotations for aiobotocore resourcegroupstaggingapi",
);

/**
 * Type annotations for aiobotocore robomaker
 */
export const types_aiobotocore_robomaker = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-robomaker`,
  "Type annotations for aiobotocore robomaker",
);

/**
 * Type annotations for aiobotocore rolesanywhere
 */
export const types_aiobotocore_rolesanywhere = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-rolesanywhere`,
  "Type annotations for aiobotocore rolesanywhere",
);

/**
 * Type annotations for aiobotocore route53
 */
export const types_aiobotocore_route53 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-route53`,
  "Type annotations for aiobotocore route53",
);

/**
 * Type annotations for aiobotocore route53-recovery-cluster
 */
export const types_aiobotocore_route53_recovery_cluster = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-route53-recovery-cluster`,
  "Type annotations for aiobotocore route53-recovery-cluster",
);

/**
 * Type annotations for aiobotocore route53-recovery-control-config
 */
export const types_aiobotocore_route53_recovery_control_config = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-route53-recovery-control-config`,
  "Type annotations for aiobotocore route53-recovery-control-config",
);

/**
 * Type annotations for aiobotocore route53-recovery-readiness
 */
export const types_aiobotocore_route53_recovery_readiness = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-route53-recovery-readiness`,
  "Type annotations for aiobotocore route53-recovery-readiness",
);

/**
 * Type annotations for aiobotocore route53domains
 */
export const types_aiobotocore_route53domains = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-route53domains`,
  "Type annotations for aiobotocore route53domains",
);

/**
 * Type annotations for aiobotocore route53resolver
 */
export const types_aiobotocore_route53resolver = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-route53resolver`,
  "Type annotations for aiobotocore route53resolver",
);

/**
 * Type annotations for aiobotocore rum
 */
export const types_aiobotocore_rum = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-rum`,
  "Type annotations for aiobotocore rum",
);

/**
 * Type annotations for aiobotocore s3
 */
export const types_aiobotocore_s3 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-s3`,
  "Type annotations for aiobotocore s3",
);

/**
 * Type annotations for aiobotocore s3control
 */
export const types_aiobotocore_s3control = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-s3control`,
  "Type annotations for aiobotocore s3control",
);

/**
 * Type annotations for aiobotocore s3outposts
 */
export const types_aiobotocore_s3outposts = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-s3outposts`,
  "Type annotations for aiobotocore s3outposts",
);

/**
 * Type annotations for aiobotocore sagemaker
 */
export const types_aiobotocore_sagemaker = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sagemaker`,
  "Type annotations for aiobotocore sagemaker",
);

/**
 * Type annotations for aiobotocore sagemaker-a2i-runtime
 */
export const types_aiobotocore_sagemaker_a2i_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sagemaker-a2i-runtime`,
  "Type annotations for aiobotocore sagemaker-a2i-runtime",
);

/**
 * Type annotations for aiobotocore sagemaker-edge
 */
export const types_aiobotocore_sagemaker_edge = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sagemaker-edge`,
  "Type annotations for aiobotocore sagemaker-edge",
);

/**
 * Type annotations for aiobotocore sagemaker-featurestore-runtime
 */
export const types_aiobotocore_sagemaker_featurestore_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sagemaker-featurestore-runtime`,
  "Type annotations for aiobotocore sagemaker-featurestore-runtime",
);

/**
 * Type annotations for aiobotocore sagemaker-geospatial
 */
export const types_aiobotocore_sagemaker_geospatial = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sagemaker-geospatial`,
  "Type annotations for aiobotocore sagemaker-geospatial",
);

/**
 * Type annotations for aiobotocore sagemaker-metrics
 */
export const types_aiobotocore_sagemaker_metrics = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sagemaker-metrics`,
  "Type annotations for aiobotocore sagemaker-metrics",
);

/**
 * Type annotations for aiobotocore sagemaker-runtime
 */
export const types_aiobotocore_sagemaker_runtime = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sagemaker-runtime`,
  "Type annotations for aiobotocore sagemaker-runtime",
);

/**
 * Type annotations for aiobotocore savingsplans
 */
export const types_aiobotocore_savingsplans = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-savingsplans`,
  "Type annotations for aiobotocore savingsplans",
);

/**
 * Type annotations for aiobotocore scheduler
 */
export const types_aiobotocore_scheduler = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-scheduler`,
  "Type annotations for aiobotocore scheduler",
);

/**
 * Type annotations for aiobotocore schemas
 */
export const types_aiobotocore_schemas = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-schemas`,
  "Type annotations for aiobotocore schemas",
);

/**
 * Type annotations for aiobotocore sdb
 */
export const types_aiobotocore_sdb = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sdb`,
  "Type annotations for aiobotocore sdb",
);

/**
 * Type annotations for aiobotocore secretsmanager
 */
export const types_aiobotocore_secretsmanager = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-secretsmanager`,
  "Type annotations for aiobotocore secretsmanager",
);

/**
 * Type annotations for aiobotocore securityhub
 */
export const types_aiobotocore_securityhub = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-securityhub`,
  "Type annotations for aiobotocore securityhub",
);

/**
 * Type annotations for aiobotocore securitylake
 */
export const types_aiobotocore_securitylake = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-securitylake`,
  "Type annotations for aiobotocore securitylake",
);

/**
 * Type annotations for aiobotocore serverlessrepo
 */
export const types_aiobotocore_serverlessrepo = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-serverlessrepo`,
  "Type annotations for aiobotocore serverlessrepo",
);

/**
 * Type annotations for aiobotocore service-quotas
 */
export const types_aiobotocore_service_quotas = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-service-quotas`,
  "Type annotations for aiobotocore service-quotas",
);

/**
 * Type annotations for aiobotocore servicecatalog
 */
export const types_aiobotocore_servicecatalog = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-servicecatalog`,
  "Type annotations for aiobotocore servicecatalog",
);

/**
 * Type annotations for aiobotocore servicecatalog-appregistry
 */
export const types_aiobotocore_servicecatalog_appregistry = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-servicecatalog-appregistry`,
  "Type annotations for aiobotocore servicecatalog-appregistry",
);

/**
 * Type annotations for aiobotocore servicediscovery
 */
export const types_aiobotocore_servicediscovery = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-servicediscovery`,
  "Type annotations for aiobotocore servicediscovery",
);

/**
 * Type annotations for aiobotocore ses
 */
export const types_aiobotocore_ses = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ses`,
  "Type annotations for aiobotocore ses",
);

/**
 * Type annotations for aiobotocore sesv2
 */
export const types_aiobotocore_sesv2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sesv2`,
  "Type annotations for aiobotocore sesv2",
);

/**
 * Type annotations for aiobotocore shield
 */
export const types_aiobotocore_shield = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-shield`,
  "Type annotations for aiobotocore shield",
);

/**
 * Type annotations for aiobotocore signer
 */
export const types_aiobotocore_signer = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-signer`,
  "Type annotations for aiobotocore signer",
);

/**
 * Type annotations for aiobotocore simspaceweaver
 */
export const types_aiobotocore_simspaceweaver = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-simspaceweaver`,
  "Type annotations for aiobotocore simspaceweaver",
);

/**
 * Type annotations for aiobotocore sms
 */
export const types_aiobotocore_sms = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sms`,
  "Type annotations for aiobotocore sms",
);

/**
 * Type annotations for aiobotocore sms-voice
 */
export const types_aiobotocore_sms_voice = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sms-voice`,
  "Type annotations for aiobotocore sms-voice",
);

/**
 * Type annotations for aiobotocore snow-device-management
 */
export const types_aiobotocore_snow_device_management = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-snow-device-management`,
  "Type annotations for aiobotocore snow-device-management",
);

/**
 * Type annotations for aiobotocore snowball
 */
export const types_aiobotocore_snowball = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-snowball`,
  "Type annotations for aiobotocore snowball",
);

/**
 * Type annotations for aiobotocore sns
 */
export const types_aiobotocore_sns = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sns`,
  "Type annotations for aiobotocore sns",
);

/**
 * Type annotations for aiobotocore sqs
 */
export const types_aiobotocore_sqs = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sqs`,
  "Type annotations for aiobotocore sqs",
);

/**
 * Type annotations for aiobotocore ssm
 */
export const types_aiobotocore_ssm = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ssm`,
  "Type annotations for aiobotocore ssm",
);

/**
 * Type annotations for aiobotocore ssm-contacts
 */
export const types_aiobotocore_ssm_contacts = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ssm-contacts`,
  "Type annotations for aiobotocore ssm-contacts",
);

/**
 * Type annotations for aiobotocore ssm-incidents
 */
export const types_aiobotocore_ssm_incidents = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ssm-incidents`,
  "Type annotations for aiobotocore ssm-incidents",
);

/**
 * Type annotations for aiobotocore ssm-sap
 */
export const types_aiobotocore_ssm_sap = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-ssm-sap`,
  "Type annotations for aiobotocore ssm-sap",
);

/**
 * Type annotations for aiobotocore sso
 */
export const types_aiobotocore_sso = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sso`,
  "Type annotations for aiobotocore sso",
);

/**
 * Type annotations for aiobotocore sso-admin
 */
export const types_aiobotocore_sso_admin = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sso-admin`,
  "Type annotations for aiobotocore sso-admin",
);

/**
 * Type annotations for aiobotocore sso-oidc
 */
export const types_aiobotocore_sso_oidc = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sso-oidc`,
  "Type annotations for aiobotocore sso-oidc",
);

/**
 * Type annotations for aiobotocore stepfunctions
 */
export const types_aiobotocore_stepfunctions = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-stepfunctions`,
  "Type annotations for aiobotocore stepfunctions",
);

/**
 * Type annotations for aiobotocore storagegateway
 */
export const types_aiobotocore_storagegateway = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-storagegateway`,
  "Type annotations for aiobotocore storagegateway",
);

/**
 * Type annotations for aiobotocore sts
 */
export const types_aiobotocore_sts = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-sts`,
  "Type annotations for aiobotocore sts",
);

/**
 * Type annotations for aiobotocore support
 */
export const types_aiobotocore_support = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-support`,
  "Type annotations for aiobotocore support",
);

/**
 * Type annotations for aiobotocore support-app
 */
export const types_aiobotocore_support_app = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-support-app`,
  "Type annotations for aiobotocore support-app",
);

/**
 * Type annotations for aiobotocore swf
 */
export const types_aiobotocore_swf = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-swf`,
  "Type annotations for aiobotocore swf",
);

/**
 * Type annotations for aiobotocore synthetics
 */
export const types_aiobotocore_synthetics = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-synthetics`,
  "Type annotations for aiobotocore synthetics",
);

/**
 * Type annotations for aiobotocore textract
 */
export const types_aiobotocore_textract = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-textract`,
  "Type annotations for aiobotocore textract",
);

/**
 * Type annotations for aiobotocore timestream-query
 */
export const types_aiobotocore_timestream_query = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-timestream-query`,
  "Type annotations for aiobotocore timestream-query",
);

/**
 * Type annotations for aiobotocore timestream-write
 */
export const types_aiobotocore_timestream_write = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-timestream-write`,
  "Type annotations for aiobotocore timestream-write",
);

/**
 * Type annotations for aiobotocore tnb
 */
export const types_aiobotocore_tnb = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-tnb`,
  "Type annotations for aiobotocore tnb",
);

/**
 * Type annotations for aiobotocore transcribe
 */
export const types_aiobotocore_transcribe = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-transcribe`,
  "Type annotations for aiobotocore transcribe",
);

/**
 * Type annotations for aiobotocore transfer
 */
export const types_aiobotocore_transfer = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-transfer`,
  "Type annotations for aiobotocore transfer",
);

/**
 * Type annotations for aiobotocore translate
 */
export const types_aiobotocore_translate = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-translate`,
  "Type annotations for aiobotocore translate",
);

/**
 * Type annotations for aiobotocore verifiedpermissions
 */
export const types_aiobotocore_verifiedpermissions = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-verifiedpermissions`,
  "Type annotations for aiobotocore verifiedpermissions",
);

/**
 * Type annotations for aiobotocore voice-id
 */
export const types_aiobotocore_voice_id = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-voice-id`,
  "Type annotations for aiobotocore voice-id",
);

/**
 * Type annotations for aiobotocore vpc-lattice
 */
export const types_aiobotocore_vpc_lattice = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-vpc-lattice`,
  "Type annotations for aiobotocore vpc-lattice",
);

/**
 * Type annotations for aiobotocore waf
 */
export const types_aiobotocore_waf = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-waf`,
  "Type annotations for aiobotocore waf",
);

/**
 * Type annotations for aiobotocore waf-regional
 */
export const types_aiobotocore_waf_regional = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-waf-regional`,
  "Type annotations for aiobotocore waf-regional",
);

/**
 * Type annotations for aiobotocore wafv2
 */
export const types_aiobotocore_wafv2 = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-wafv2`,
  "Type annotations for aiobotocore wafv2",
);

/**
 * Type annotations for aiobotocore wellarchitected
 */
export const types_aiobotocore_wellarchitected = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-wellarchitected`,
  "Type annotations for aiobotocore wellarchitected",
);

/**
 * Type annotations for aiobotocore wisdom
 */
export const types_aiobotocore_wisdom = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-wisdom`,
  "Type annotations for aiobotocore wisdom",
);

/**
 * Type annotations for aiobotocore workdocs
 */
export const types_aiobotocore_workdocs = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-workdocs`,
  "Type annotations for aiobotocore workdocs",
);

/**
 * Type annotations for aiobotocore worklink
 */
export const types_aiobotocore_worklink = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-worklink`,
  "Type annotations for aiobotocore worklink",
);

/**
 * Type annotations for aiobotocore workmail
 */
export const types_aiobotocore_workmail = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-workmail`,
  "Type annotations for aiobotocore workmail",
);

/**
 * Type annotations for aiobotocore workmailmessageflow
 */
export const types_aiobotocore_workmailmessageflow = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-workmailmessageflow`,
  "Type annotations for aiobotocore workmailmessageflow",
);

/**
 * Type annotations for aiobotocore workspaces
 */
export const types_aiobotocore_workspaces = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-workspaces`,
  "Type annotations for aiobotocore workspaces",
);

/**
 * Type annotations for aiobotocore workspaces-web
 */
export const types_aiobotocore_workspaces_web = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-workspaces-web`,
  "Type annotations for aiobotocore workspaces-web",
);

/**
 * Type annotations for aiobotocore xray
 */
export const types_aiobotocore_xray = mkPackage(
  nixRaw`pkgs.python2Packages.types-aiobotocore-xray`,
  "Type annotations for aiobotocore xray",
);

/**
 * This is a PEP 561 type stub package for the appdirs package. It can be used by type-checking tools like mypy, pyright, pytype, PyCharm, etc. to check code that uses appdirs. 
 */
export const types_appdirs = mkPackage(
  nixRaw`pkgs.python2Packages.types-appdirs`,
  "This is a PEP 561 type stub package for the appdirs package. It can be used by type-checking tools like mypy, pyright, pytype, PyCharm, etc. to check code that uses appdirs. ",
);

/**
 * Type annotations and code completion for awscrt
 */
export const types_awscrt = mkPackage(
  nixRaw`pkgs.python2Packages.types-awscrt`,
  "Type annotations and code completion for awscrt",
);

/**
 * Typing stubs for beautifulsoup4
 */
export const types_beautifulsoup4 = mkPackage(
  nixRaw`pkgs.python2Packages.types-beautifulsoup4`,
  "Typing stubs for beautifulsoup4",
);

/**
 * Collection of library stubs for Python, with static types
 */
export const types_click = mkPackage(
  nixRaw`pkgs.python2Packages.types-click`,
  "Collection of library stubs for Python, with static types",
);

/**
 * Typing stubs for colorama
 */
export const types_colorama = mkPackage(
  nixRaw`pkgs.python2Packages.types-colorama`,
  "Typing stubs for colorama",
);

/**
 * Typing stubs for python-dateutil
 */
export const types_dateutil = mkPackage(
  nixRaw`pkgs.python2Packages.types-dateutil`,
  "Typing stubs for python-dateutil",
);

/**
 * Typing stubs for decorator
 */
export const types_decorator = mkPackage(
  nixRaw`pkgs.python2Packages.types-decorator`,
  "Typing stubs for decorator",
);

/**
 * Typing stubs for Deprecated
 */
export const types_deprecated = mkPackage(
  nixRaw`pkgs.python2Packages.types-deprecated`,
  "Typing stubs for Deprecated",
);

/**
 * Typing stubs for docopt
 */
export const types_docopt = mkPackage(
  nixRaw`pkgs.python2Packages.types-docopt`,
  "Typing stubs for docopt",
);

/**
 * Typing stubs for docutils
 */
export const types_docutils = mkPackage(
  nixRaw`pkgs.python2Packages.types-docutils`,
  "Typing stubs for docutils",
);

/**
 * Typing stubs for enum34
 */
export const types_enum34 = mkPackage(
  nixRaw`pkgs.python2Packages.types-enum34`,
  "Typing stubs for enum34",
);

/**
 * Typing stubs for freezegun
 */
export const types_freezegun = mkPackage(
  nixRaw`pkgs.python2Packages.types-freezegun`,
  "Typing stubs for freezegun",
);

/**
 * Typing stubs for futures
 */
export const types_futures = mkPackage(
  nixRaw`pkgs.python2Packages.types-futures`,
  "Typing stubs for futures",
);

/**
 * Typing stubs for html5lib
 */
export const types_html5lib = mkPackage(
  nixRaw`pkgs.python2Packages.types-html5lib`,
  "Typing stubs for html5lib",
);

/**
 * Typing stubs for ipaddress
 */
export const types_ipaddress = mkPackage(
  nixRaw`pkgs.python2Packages.types-ipaddress`,
  "Typing stubs for ipaddress",
);

/**
 * Type stub package for the mock package
 */
export const types_mock = mkPackage(
  nixRaw`pkgs.python2Packages.types-mock`,
  "Type stub package for the mock package",
);

/**
 * Typing stubs for Pillow
 */
export const types_pillow = mkPackage(
  nixRaw`pkgs.python2Packages.types-pillow`,
  "Typing stubs for Pillow",
);

/**
 * Typing stubs for protobuf
 */
export const types_protobuf = mkPackage(
  nixRaw`pkgs.python2Packages.types-protobuf`,
  "Typing stubs for protobuf",
);

/**
 * Typing stubs for psutil
 */
export const types_psutil = mkPackage(
  nixRaw`pkgs.python2Packages.types-psutil`,
  "Typing stubs for psutil",
);

/**
 * Typing stubs for pyopenssl
 */
export const types_pyopenssl = mkPackage(
  nixRaw`pkgs.python2Packages.types-pyopenssl`,
  "Typing stubs for pyopenssl",
);

/**
 * Typing stubs for python-dateutil
 */
export const types_python_dateutil = mkPackage(
  nixRaw`pkgs.python2Packages.types-python-dateutil`,
  "Typing stubs for python-dateutil",
);

/**
 * Typing stubs for pytz
 */
export const types_pytz = mkPackage(
  nixRaw`pkgs.python2Packages.types-pytz`,
  "Typing stubs for pytz",
);

/**
 * Typing stubs for PyYAML
 */
export const types_pyyaml = mkPackage(
  nixRaw`pkgs.python2Packages.types-pyyaml`,
  "Typing stubs for PyYAML",
);

/**
 * Typing stubs for redis
 */
export const types_redis = mkPackage(
  nixRaw`pkgs.python2Packages.types-redis`,
  "Typing stubs for redis",
);

/**
 * Typing stubs for requests
 */
export const types_requests = mkPackage(
  nixRaw`pkgs.python2Packages.types-requests`,
  "Typing stubs for requests",
);

/**
 * Typing stubs for retry
 */
export const types_retry = mkPackage(
  nixRaw`pkgs.python2Packages.types-retry`,
  "Typing stubs for retry",
);

/**
 * Type annotations and code completion for s3transfer
 */
export const types_s3transfer = mkPackage(
  nixRaw`pkgs.python2Packages.types-s3transfer`,
  "Type annotations and code completion for s3transfer",
);

/**
 * Typing stubs for setuptools
 */
export const types_setuptools = mkPackage(
  nixRaw`pkgs.python2Packages.types-setuptools`,
  "Typing stubs for setuptools",
);

/**
 * Typing stubs for tabulate
 */
export const types_tabulate = mkPackage(
  nixRaw`pkgs.python2Packages.types-tabulate`,
  "Typing stubs for tabulate",
);

/**
 * Typing stubs for toml
 */
export const types_toml = mkPackage(
  nixRaw`pkgs.python2Packages.types-toml`,
  "Typing stubs for toml",
);

/**
 * Typing stubs for typed-ast
 */
export const types_typed_ast = mkPackage(
  nixRaw`pkgs.python2Packages.types-typed-ast`,
  "Typing stubs for typed-ast",
);

/**
 * Typing stubs for ujson
 */
export const types_ujson = mkPackage(
  nixRaw`pkgs.python2Packages.types-ujson`,
  "Typing stubs for ujson",
);

/**
 * Typing stubs for urllib3
 */
export const types_urllib3 = mkPackage(
  nixRaw`pkgs.python2Packages.types-urllib3`,
  "Typing stubs for urllib3",
);

/**
 * Python 2.7 & 3.5+ runtime type-checker
 */
export const typesentry = mkPackage(
  nixRaw`pkgs.python2Packages.typesentry`,
  "Python 2.7 & 3.5+ runtime type-checker",
);

/**
 * A type system library for Python
 */
export const typesystem = mkPackage(
  nixRaw`pkgs.python2Packages.typesystem`,
  "A type system library for Python",
);

/**
 * Python library for runtime analysis, inference and validation of Python types
 */
export const typical = mkPackage(
  nixRaw`pkgs.python2Packages.typical`,
  "Python library for runtime analysis, inference and validation of Python types",
);

/**
 * Backport of typing module to Python versions older than 3.5
 */
export const typing = mkPackage(
  nixRaw`pkgs.python2Packages.typing`,
  "Backport of typing module to Python versions older than 3.5",
);

/**
 * Backported and Experimental Type Hints for Python
 */
export const typing_extensions = mkPackage(
  nixRaw`pkgs.python2Packages.typing-extensions`,
  "Backported and Experimental Type Hints for Python",
);

/**
 * Runtime inspection utilities for Python typing module
 */
export const typing_inspect = mkPackage(
  nixRaw`pkgs.python2Packages.typing-inspect`,
  "Runtime inspection utilities for Python typing module",
);

/**
 * Python module for checking types of objects
 */
export const typish = mkPackage(
  nixRaw`pkgs.python2Packages.typish`,
  "Python module for checking types of objects",
);

/**
 * Filters to enhance web typography, including support for Django & Jinja templates
 */
export const typogrify = mkPackage(
  nixRaw`pkgs.python2Packages.typogrify`,
  "Filters to enhance web typography, including support for Django & Jinja templates",
);

/**
 * Provider of IANA time zone data
 */
export const tzdata = mkPackage(
  nixRaw`pkgs.python2Packages.tzdata`,
  "Provider of IANA time zone data",
);

/**
 * Tzinfo object for the local timezone
 */
export const tzlocal = mkPackage(
  nixRaw`pkgs.python2Packages.tzlocal`,
  "Tzinfo object for the local timezone",
);

/**
 * A portable, lightweight MessagePack serializer and deserializer written in pure Python
 */
export const u_msgpack_python = mkPackage(
  nixRaw`pkgs.python2Packages.u-msgpack-python`,
  "A portable, lightweight MessagePack serializer and deserializer written in pure Python",
);

/**
 * A python implementation of the UA Parser
 */
export const ua_parser = mkPackage(
  nixRaw`pkgs.python2Packages.ua-parser`,
  "A python implementation of the UA Parser",
);

/**
 * An AMQP 1.0 client library for Python
 */
export const uamqp = mkPackage(
  nixRaw`pkgs.python2Packages.uamqp`,
  "An AMQP 1.0 client library for Python",
);

/**
 * Universal array library
 */
export const uarray = mkPackage(
  nixRaw`pkgs.python2Packages.uarray`,
  "Universal array library",
);

/**
 * Implements siren.pp.ua API - public wrapper for api.ukrainealarm.com API that returns info about Ukraine air-raid alarms
 */
export const uasiren = mkPackage(
  nixRaw`pkgs.python2Packages.uasiren`,
  "Implements siren.pp.ua API - public wrapper for api.ukrainealarm.com API that returns info about Ukraine air-raid alarms",
);

/**
 * Micro subset of unicode data files for linkify-it-py
 */
export const uc_micro_py = mkPackage(
  nixRaw`pkgs.python2Packages.uc-micro-py`,
  "Micro subset of unicode data files for linkify-it-py",
);

/**
 * Python SDK for Cisco UCS
 */
export const ucsmsdk = mkPackage(
  nixRaw`pkgs.python2Packages.ucsmsdk`,
  "Python SDK for Cisco UCS",
);

/**
 * Fast RFC3339 compliant Python date-time library
 */
export const udatetime = mkPackage(
  nixRaw`pkgs.python2Packages.udatetime`,
  "Fast RFC3339 compliant Python date-time library",
);

/**
 * Python library Rainforest EAGLE devices
 */
export const ueagle = mkPackage(
  nixRaw`pkgs.python2Packages.ueagle`,
  "Python library Rainforest EAGLE devices",
);

/**
 * An alternative for w3mimgdisplay
 */
export const ueberzug = mkPackage(
  nixRaw`pkgs.python2Packages.ueberzug`,
  "An alternative for w3mimgdisplay",
);

/**
 * Safe, atomic formatting with black and usort
 */
export const ufmt = mkPackage(
  nixRaw`pkgs.python2Packages.ufmt`,
  "Safe, atomic formatting with black and usort",
);

/**
 * Bridge from UFOs to FontTools objects
 */
export const ufo2ft = mkPackage(
  nixRaw`pkgs.python2Packages.ufo2ft`,
  "Bridge from UFOs to FontTools objects",
);

/**
 * Library to deal with UFO font sources
 */
export const ufoLib2 = mkPackage(
  nixRaw`pkgs.python2Packages.ufoLib2`,
  "Library to deal with UFO font sources",
);

/**
 * Script to normalize the XML and other data inside of a UFO
 */
export const ufonormalizer = mkPackage(
  nixRaw`pkgs.python2Packages.ufonormalizer`,
  "Script to normalize the XML and other data inside of a UFO",
);

/**
 * Read, write and generate UFOs with designspace data
 */
export const ufoprocessor = mkPackage(
  nixRaw`pkgs.python2Packages.ufoprocessor`,
  "Read, write and generate UFOs with designspace data",
);

/**
 * Streamlined Cython bindings for the harfbuzz shaping engine
 */
export const uharfbuzz = mkPackage(
  nixRaw`pkgs.python2Packages.uharfbuzz`,
  "Streamlined Cython bindings for the harfbuzz shaping engine",
);

/**
 * Universal Histogram Interface
 */
export const uhi = mkPackage(
  nixRaw`pkgs.python2Packages.uhi`,
  "Universal Histogram Interface",
);

/**
 * Ultra fast JSON encoder and decoder
 */
export const ujson = mkPackage(
  nixRaw`pkgs.python2Packages.ujson`,
  "Ultra fast JSON encoder and decoder",
);

/**
 * Python implementation of bounded Levenshtein distance (Ukkonen)
 */
export const ukkonen = mkPackage(
  nixRaw`pkgs.python2Packages.ukkonen`,
  "Python implementation of bounded Levenshtein distance (Ukkonen)",
);

/**
 * UK Postcode parser
 */
export const ukpostcodeparser = mkPackage(
  nixRaw`pkgs.python2Packages.ukpostcodeparser`,
  "UK Postcode parser",
);

/**
 * Implements api.ukrainealarm.com API that returns info about Ukraine air raid alarms
 */
export const ukrainealarm = mkPackage(
  nixRaw`pkgs.python2Packages.ukrainealarm`,
  "Implements api.ukrainealarm.com API that returns info about Ukraine air raid alarms",
);

/**
 * Library to create and transform ULIDs
 */
export const ulid_transform = mkPackage(
  nixRaw`pkgs.python2Packages.ulid-transform`,
  "Library to create and transform ULIDs",
);

/**
 * Module for working with data from Landis+Gyr Ultraheat heat meter unit
 */
export const ultraheat_api = mkPackage(
  nixRaw`pkgs.python2Packages.ultraheat-api`,
  "Module for working with data from Landis+Gyr Ultraheat heat meter unit",
);

/**
 * Date Api that support Hijri Umalqurra calendar
 */
export const umalqurra = mkPackage(
  nixRaw`pkgs.python2Packages.umalqurra`,
  "Date Api that support Hijri Umalqurra calendar",
);

/**
 * Uniform Manifold Approximation and Projection
 */
export const umap_learn = mkPackage(
  nixRaw`pkgs.python2Packages.umap-learn`,
  "Uniform Manifold Approximation and Projection",
);

/**
 * Implementation of the Modbus protocol
 */
export const umodbus = mkPackage(
  nixRaw`pkgs.python2Packages.umodbus`,
  "Implementation of the Modbus protocol",
);

/**
 * Project that can transform your asynchronous code into synchronous code
 */
export const unasync = mkPackage(
  nixRaw`pkgs.python2Packages.unasync`,
  "Project that can transform your asynchronous code into synchronous code",
);

/**
 * Transparent calculations with uncertainties on the quantities involved (aka error propagation)
 */
export const uncertainties = mkPackage(
  nixRaw`pkgs.python2Packages.uncertainties`,
  "Transparent calculations with uncertainties on the quantities involved (aka error propagation)",
);

/**
 * Python cross-version byte-code deparser
 */
export const uncompyle6 = mkPackage(
  nixRaw`pkgs.python2Packages.uncompyle6`,
  "Python cross-version byte-code deparser",
);

/**
 * A utility to fetch and download Python packages
 */
export const unearth = mkPackage(
  nixRaw`pkgs.python2Packages.unearth`,
  "A utility to fetch and download Python packages",
);

/**
 * Generates unicode slugs
 */
export const unicode_slugify = mkPackage(
  nixRaw`pkgs.python2Packages.unicode-slugify`,
  "Generates unicode slugs",
);

/**
 * Drop-in replacement for Python2's stdlib csv module, with unicode support
 */
export const unicodecsv = mkPackage(
  nixRaw`pkgs.python2Packages.unicodecsv`,
  "Drop-in replacement for Python2's stdlib csv module, with unicode support",
);

/**
 * Backport and updates for the unicodedata module
 */
export const unicodedata2 = mkPackage(
  nixRaw`pkgs.python2Packages.unicodedata2`,
  "Backport and updates for the unicodedata module",
);

/**
 * Python bindings for Unicorn CPU emulator engine
 */
export const unicorn = mkPackage(
  nixRaw`pkgs.python2Packages.unicorn`,
  "Python bindings for Unicorn CPU emulator engine",
);

/**
 * Unified interface for cryptographic libraries
 */
export const unicrypto = mkPackage(
  nixRaw`pkgs.python2Packages.unicrypto`,
  "Unified interface for cryptographic libraries",
);

/**
 * Unified Curses Wrapper for Python
 */
export const unicurses = mkPackage(
  nixRaw`pkgs.python2Packages.unicurses`,
  "Unified Curses Wrapper for Python",
);

/**
 * ASCII transliterations of Unicode text
 */
export const unidecode = mkPackage(
  nixRaw`pkgs.python2Packages.unidecode`,
  "ASCII transliterations of Unicode text",
);

/**
 * Contemporary Written Japanese dictionary
 */
export const unidic = mkPackage(
  nixRaw`pkgs.python2Packages.unidic`,
  "Contemporary Written Japanese dictionary",
);

/**
 * A small version of UniDic
 */
export const unidic_lite = mkPackage(
  nixRaw`pkgs.python2Packages.unidic-lite`,
  "A small version of UniDic",
);

/**
 * Unified diff python parsing/metadata extraction library
 */
export const unidiff = mkPackage(
  nixRaw`pkgs.python2Packages.unidiff`,
  "Unified diff python parsing/metadata extraction library",
);

/**
 * An API towards the Ubiquity Networks UniFi controller
 */
export const unifi = mkPackage(
  nixRaw`pkgs.python2Packages.unifi`,
  "An API towards the Ubiquity Networks UniFi controller",
);

/**
 * Module to discover Unifi devices
 */
export const unifi_discovery = mkPackage(
  nixRaw`pkgs.python2Packages.unifi-discovery`,
  "Module to discover Unifi devices",
);

/**
 * Python module for Ubiquiti Unifi LED controller
 */
export const unifiled = mkPackage(
  nixRaw`pkgs.python2Packages.unifiled`,
  "Python module for Ubiquiti Unifi LED controller",
);

/**
 * Modifies strings to all use the same quote where possible
 */
export const unify = mkPackage(
  nixRaw`pkgs.python2Packages.unify`,
  "Modifies strings to all use the same quote where possible",
);

/**
 * Python support for quantities with units
 */
export const units = mkPackage(
  nixRaw`pkgs.python2Packages.units`,
  "Python support for quantities with units",
);

export const unittestCheckHook = mkPackage(
  nixRaw`pkgs.python2Packages.unittestCheckHook`,
  "",
);

/**
 * PHPUnit-like @dataprovider decorator for unittest
 */
export const unittest_data_provider = mkPackage(
  nixRaw`pkgs.python2Packages.unittest-data-provider`,
  "PHPUnit-like @dataprovider decorator for unittest",
);

/**
 * unittest-based test runner with Ant/JUnit like XML reporting
 */
export const unittest_xml_reporting = mkPackage(
  nixRaw`pkgs.python2Packages.unittest-xml-reporting`,
  "unittest-based test runner with Ant/JUnit like XML reporting",
);

/**
 * Library for parsing version ranges and expressions
 */
export const univers = mkPackage(
  nixRaw`pkgs.python2Packages.univers`,
  "Library for parsing version ranges and expressions",
);

/**
 * Pathlib api extended to use fsspec backends
 */
export const universal_pathlib = mkPackage(
  nixRaw`pkgs.python2Packages.universal-pathlib`,
  "Pathlib api extended to use fsspec backends",
);

/**
 * Flashes Silicon Labs radios running EmberZNet or CPC multi-pan firmware
 */
export const universal_silabs_flasher = mkPackage(
  nixRaw`pkgs.python2Packages.universal-silabs-flasher`,
  "Flashes Silicon Labs radios running EmberZNet or CPC multi-pan firmware",
);

/**
 * Unpadded Base64
 */
export const unpaddedbase64 = mkPackage(
  nixRaw`pkgs.python2Packages.unpaddedbase64`,
  "Unpadded Base64",
);

/**
 * Wrap the Unrar DLL to enable unraring of files in python
 */
export const unrardll = mkPackage(
  nixRaw`pkgs.python2Packages.unrardll`,
  "Wrap the Unrar DLL to enable unraring of files in python",
);

/**
 * A program to extract files from the RPA archive format
 */
export const unrpa = mkPackage(
  nixRaw`pkgs.python2Packages.unrpa`,
  "A program to extract files from the RPA archive format",
);

/**
 * Open source libraries and APIs to build custom preprocessing pipelines for labeling, training, or production machine learning pipelines
 */
export const unstructured = mkPackage(
  nixRaw`pkgs.python2Packages.unstructured`,
  "Open source libraries and APIs to build custom preprocessing pipelines for labeling, training, or production machine learning pipelines",
);

/**
 * 
 */
export const unstructured_api_tools = mkPackage(
  nixRaw`pkgs.python2Packages.unstructured-api-tools`,
  "",
);

/**
 * hosted model inference code for layout parsing models
 */
export const unstructured_inference = mkPackage(
  nixRaw`pkgs.python2Packages.unstructured-inference`,
  "hosted model inference code for layout parsing models",
);

/**
 * Convert XML documents into Python objects
 */
export const untangle = mkPackage(
  nixRaw`pkgs.python2Packages.untangle`,
  "Convert XML documents into Python objects",
);

/**
 * Transforms tokens into original source code while preserving whitespace
 */
export const untokenize = mkPackage(
  nixRaw`pkgs.python2Packages.untokenize`,
  "Transforms tokens into original source code while preserving whitespace",
);

/**
 * UONET+ (hebe) request signer for Python
 */
export const uonet_request_signer_hebe = mkPackage(
  nixRaw`pkgs.python2Packages.uonet-request-signer-hebe`,
  "UONET+ (hebe) request signer for Python",
);

/**
 * Console UI for pass
 */
export const upass = mkPackage(
  nixRaw`pkgs.python2Packages.upass`,
  "Console UI for pass",
);

/**
 * Library for interacting with UPB PIM
 */
export const upb_lib = mkPackage(
  nixRaw`pkgs.python2Packages.upb-lib`,
  "Library for interacting with UPB PIM",
);

/**
 * UpCloud API Client
 */
export const upcloud_api = mkPackage(
  nixRaw`pkgs.python2Packages.upcloud-api`,
  "UpCloud API Client",
);

/**
 * A python module that will check for package updates
 */
export const update_checker = mkPackage(
  nixRaw`pkgs.python2Packages.update_checker`,
  "A python module that will check for package updates",
);

/**
 * An automatic copyright update tool
 */
export const update_copyright = mkPackage(
  nixRaw`pkgs.python2Packages.update-copyright`,
  "An automatic copyright update tool",
);

/**
 * Generic modularized configuration file manager
 */
export const update_dotdee = mkPackage(
  nixRaw`pkgs.python2Packages.update-dotdee`,
  "Generic modularized configuration file manager",
);

/**
 * UPnP client library for Python
 */
export const upnpy = mkPackage(
  nixRaw`pkgs.python2Packages.upnpy`,
  "UPnP client library for Python",
);

/**
 * ROOT I/O in pure Python and Numpy
 */
export const uproot = mkPackage(
  nixRaw`pkgs.python2Packages.uproot`,
  "ROOT I/O in pure Python and Numpy",
);

/**
 * Cross-platform way to retrieve system uptime and boot time
 */
export const uptime = mkPackage(
  nixRaw`pkgs.python2Packages.uptime`,
  "Cross-platform way to retrieve system uptime and boot time",
);

/**
 * A Python wrapper for the Uptime Kuma Socket.IO API
 */
export const uptime_kuma_api = mkPackage(
  nixRaw`pkgs.python2Packages.uptime-kuma-api`,
  "A Python wrapper for the Uptime Kuma Socket.IO API",
);

/**
 * Python wrapper around UptimeKuma /metrics endpoint
 */
export const uptime_kuma_monitor = mkPackage(
  nixRaw`pkgs.python2Packages.uptime-kuma-monitor`,
  "Python wrapper around UptimeKuma /metrics endpoint",
);

/**
 * A Python framework for building Desktop applications
 */
export const uranium = mkPackage(
  nixRaw`pkgs.python2Packages.uranium`,
  "A Python framework for building Desktop applications",
);

/**
 * An implementation of RFC 6570 URI Templates
 */
export const uri_template = mkPackage(
  nixRaw`pkgs.python2Packages.uri-template`,
  "An implementation of RFC 6570 URI Templates",
);

/**
 * Implementation of RFC 6570 URI templates
 */
export const uritemplate = mkPackage(
  nixRaw`pkgs.python2Packages.uritemplate`,
  "Implementation of RFC 6570 URI templates",
);

/**
 * RFC 3986 compliant, Unicode-aware, scheme-agnostic replacement for urlparse
 */
export const uritools = mkPackage(
  nixRaw`pkgs.python2Packages.uritools`,
  "RFC 3986 compliant, Unicode-aware, scheme-agnostic replacement for urlparse",
);

/**
 * URL normalization for Python
 */
export const url_normalize = mkPackage(
  nixRaw`pkgs.python2Packages.url-normalize`,
  "URL normalization for Python",
);

/**
 * Collects and extracts URLs from given text
 */
export const urlextract = mkPackage(
  nixRaw`pkgs.python2Packages.urlextract`,
  "Collects and extracts URLs from given text",
);

/**
 * Python module for downloading files
 */
export const urlgrabber = mkPackage(
  nixRaw`pkgs.python2Packages.urlgrabber`,
  "Python module for downloading files",
);

/**
 * Powerful, sanity-friendly HTTP client for Python
 */
export const urllib3 = mkPackage(
  nixRaw`pkgs.python2Packages.urllib3`,
  "Powerful, sanity-friendly HTTP client for Python",
);

/**
 * Django URL pattern helpers
 */
export const urlman = mkPackage(
  nixRaw`pkgs.python2Packages.urlman`,
  "Django URL pattern helpers",
);

/**
 * Simple URL parsing, canonicalization and equivalence
 */
export const urlpy = mkPackage(
  nixRaw`pkgs.python2Packages.urlpy`,
  "Simple URL parsing, canonicalization and equivalence",
);

/**
 * A full-featured console (xterm et al.) user interface library
 */
export const urwid = mkPackage(
  nixRaw`pkgs.python2Packages.urwid`,
  "A full-featured console (xterm et al.) user interface library",
);

/**
 * Urwid fork used by mitmproxy
 */
export const urwid_mitmproxy = mkPackage(
  nixRaw`pkgs.python2Packages.urwid-mitmproxy`,
  "Urwid fork used by mitmproxy",
);

/**
 * A textbox edit widget for urwid that supports readline shortcuts
 */
export const urwid_readline = mkPackage(
  nixRaw`pkgs.python2Packages.urwid-readline`,
  "A textbox edit widget for urwid that supports readline shortcuts",
);

/**
 * Tree widgets for urwid
 */
export const urwidtrees = mkPackage(
  nixRaw`pkgs.python2Packages.urwidtrees`,
  "Tree widgets for urwid",
);

/**
 * A package for easily working with US and state metadata
 */
export const us = mkPackage(
  nixRaw`pkgs.python2Packages.us`,
  "A package for easily working with US and state metadata",
);

/**
 * Library for for mapping, describing, and resetting USB devices
 */
export const usb_devices = mkPackage(
  nixRaw`pkgs.python2Packages.usb-devices`,
  "Library for for mapping, describing, and resetting USB devices",
);

/**
 * Tool to control USB HID relays
 */
export const usbrelay_py = mkPackage(
  nixRaw`pkgs.python2Packages.usbrelay-py`,
  "Tool to control USB HID relays",
);

/**
 * Python implementation of the USBTMC instrument control protocol
 */
export const usbtmc = mkPackage(
  nixRaw`pkgs.python2Packages.usbtmc`,
  "Python implementation of the USBTMC instrument control protocol",
);

/**
 * A Python library to identify devices by parsing user agent strings
 */
export const user_agents = mkPackage(
  nixRaw`pkgs.python2Packages.user-agents`,
  "A Python library to identify devices by parsing user agent strings",
);

/**
 * Cross-platform tool for adding locations to the user PATH
 */
export const userpath = mkPackage(
  nixRaw`pkgs.python2Packages.userpath`,
  "Cross-platform tool for adding locations to the user PATH",
);

/**
 * Powerful API for invoking with external commands
 */
export const ush = mkPackage(
  nixRaw`pkgs.python2Packages.ush`,
  "Powerful API for invoking with external commands",
);

/**
 * Safe, minimal import sorting for Python projects
 */
export const usort = mkPackage(
  nixRaw`pkgs.python2Packages.usort`,
  "Safe, minimal import sorting for Python projects",
);

/**
 * Python set of utility functions and objects
 */
export const utils = mkPackage(
  nixRaw`pkgs.python2Packages.utils`,
  "Python set of utility functions and objects",
);

/**
 * UUID object and generation functions (Python 2.3 or higher)
 */
export const uuid = mkPackage(
  nixRaw`pkgs.python2Packages.uuid`,
  "UUID object and generation functions (Python 2.3 or higher)",
);

/**
 * Client for Ubiquiti's Unifi Camera NVR
 */
export const uvcclient = mkPackage(
  nixRaw`pkgs.python2Packages.uvcclient`,
  "Client for Ubiquiti's Unifi Camera NVR",
);

/**
 * The lightning-fast ASGI server
 */
export const uvicorn = mkPackage(
  nixRaw`pkgs.python2Packages.uvicorn`,
  "The lightning-fast ASGI server",
);

/**
 * Fast implementation of asyncio event loop on top of libuv
 */
export const uvloop = mkPackage(
  nixRaw`pkgs.python2Packages.uvloop`,
  "Fast implementation of asyncio event loop on top of libuv",
);

/**
 * VAlidators Adapter makes validation by any existing validator with the same interface
 */
export const vaa = mkPackage(
  nixRaw`pkgs.python2Packages.vaa`,
  "VAlidators Adapter makes validation by any existing validator with the same interface",
);

/**
 * Verify if an email address is valid and really exists
 */
export const validate_email = mkPackage(
  nixRaw`pkgs.python2Packages.validate-email`,
  "Verify if an email address is valid and really exists",
);

/**
 * Python Data Validation for Humans
 */
export const validators = mkPackage(
  nixRaw`pkgs.python2Packages.validators`,
  "Python Data Validation for Humans",
);

/**
 * Validobj is library that takes semistructured data (for example JSON and YAML configuration files) and converts it to more structured Python objects
 */
export const validobj = mkPackage(
  nixRaw`pkgs.python2Packages.validobj`,
  "Validobj is library that takes semistructured data (for example JSON and YAML configuration files) and converts it to more structured Python objects",
);

/**
 * NNPDF analysis framework
 */
export const validphys2 = mkPackage(
  nixRaw`pkgs.python2Packages.validphys2`,
  "NNPDF analysis framework",
);

/**
 * Async API for Vallox ventilation units
 */
export const vallox_websocket_api = mkPackage(
  nixRaw`pkgs.python2Packages.vallox-websocket-api`,
  "Async API for Vallox ventilation units",
);

/**
 * A video processing framework with the future in mind
 */
export const vapoursynth = mkPackage(
  nixRaw`pkgs.python2Packages.vapoursynth`,
  "A video processing framework with the future in mind",
);

/**
 * Library providing syntactic sugar for creating variant forms of a canonical function
 */
export const variants = mkPackage(
  nixRaw`pkgs.python2Packages.variants`,
  "Library providing syntactic sugar for creating variant forms of a canonical function",
);

/**
 * A basic varint implementation in python
 */
export const varint = mkPackage(
  nixRaw`pkgs.python2Packages.varint`,
  "A basic varint implementation in python",
);

/**
 * A Python library for dealing with VAT MOSS and Norway VAT on digital services. Includes VAT ID validation, rate calculation based on place of supply, exchange rate and currency tools for invoices
 */
export const vat_moss = mkPackage(
  nixRaw`pkgs.python2Packages.vat-moss`,
  "A Python library for dealing with VAT MOSS and Norway VAT on digital services. Includes VAT ID validation, rate calculation based on place of supply, exchange rate and currency tools for invoices",
);

/**
 * vCard validator, class and utility functions
 */
export const vcard = mkPackage(
  nixRaw`pkgs.python2Packages.vcard`,
  "vCard validator, class and utility functions",
);

/**
 * Automatically mock your HTTP interactions to simplify and speed up testing
 */
export const vcrpy = mkPackage(
  nixRaw`pkgs.python2Packages.vcrpy`,
  "Automatically mock your HTTP interactions to simplify and speed up testing",
);

/**
 * Reference Implementation of vcver
 */
export const vcver = mkPackage(
  nixRaw`pkgs.python2Packages.vcver`,
  "Reference Implementation of vcver",
);

/**
 * take version numbers from version control
 */
export const vcversioner = mkPackage(
  nixRaw`pkgs.python2Packages.vcversioner`,
  "take version numbers from version control",
);

/**
 * Library for working with Valve's VDF text format
 */
export const vdf = mkPackage(
  nixRaw`pkgs.python2Packages.vdf`,
  "Library for working with Valve's VDF text format",
);

/**
 * Synchronize calendars and contacts
 */
export const vdirsyncer = mkPackage(
  nixRaw`pkgs.python2Packages.vdirsyncer`,
  "Synchronize calendars and contacts",
);

/**
 * Library for 2D, 3D, and Lorentz vectors, especially arrays of vectors, to solve common physics problems in a NumPy-like way
 */
export const vector = mkPackage(
  nixRaw`pkgs.python2Packages.vector`,
  "Library for 2D, 3D, and Lorentz vectors, especially arrays of vectors, to solve common physics problems in a NumPy-like way",
);

/**
 * An IPython/Jupyter widget for Vega and Vega-Lite
 */
export const vega = mkPackage(
  nixRaw`pkgs.python2Packages.vega`,
  "An IPython/Jupyter widget for Vega and Vega-Lite",
);

/**
 * A Python package for offline access to vega datasets
 */
export const vega_datasets = mkPackage(
  nixRaw`pkgs.python2Packages.vega_datasets`,
  "A Python package for offline access to vega datasets",
);

/**
 * Python client providing RDW vehicle information
 */
export const vehicle = mkPackage(
  nixRaw`pkgs.python2Packages.vehicle`,
  "Python client providing RDW vehicle information",
);

/**
 * Python library to support the Velbus home automation system
 */
export const velbus_aio = mkPackage(
  nixRaw`pkgs.python2Packages.velbus-aio`,
  "Python library to support the Velbus home automation system",
);

/**
 * Python interface for Venstar ColorTouch thermostats Resources
 */
export const venstarcolortouch = mkPackage(
  nixRaw`pkgs.python2Packages.venstarcolortouch`,
  "Python interface for Venstar ColorTouch thermostats Resources",
);

/**
 * A library for deferring decorator actions
 */
export const venusian = mkPackage(
  nixRaw`pkgs.python2Packages.venusian`,
  "A library for deferring decorator actions",
);

/**
 * Verbose logging for Python's logging module
 */
export const verboselogs = mkPackage(
  nixRaw`pkgs.python2Packages.verboselogs`,
  "Verbose logging for Python's logging module",
);

/**
 * Version-string management for VCS-controlled trees
 */
export const versioneer = mkPackage(
  nixRaw`pkgs.python2Packages.versioneer`,
  "Version-string management for VCS-controlled trees",
);

/**
 * Find the version of another package, whether installed via pip, setuptools or git
 */
export const versionfinder = mkPackage(
  nixRaw`pkgs.python2Packages.versionfinder`,
  "Find the version of another package, whether installed via pip, setuptools or git",
);

/**
 * setuptools plugin for determining package version from VCS
 */
export const versioningit = mkPackage(
  nixRaw`pkgs.python2Packages.versioningit`,
  "setuptools plugin for determining package version from VCS",
);

/**
 * Python library designed to make accessing the current version number of your software easy
 */
export const versiontag = mkPackage(
  nixRaw`pkgs.python2Packages.versiontag`,
  "Python library designed to make accessing the current version number of your software easy",
);

/**
 * Smart replacement for plain tuple used in __version__
 */
export const versiontools = mkPackage(
  nixRaw`pkgs.python2Packages.versiontools`,
  "Smart replacement for plain tuple used in __version__",
);

/**
 * Flexible version handling
 */
export const verspec = mkPackage(
  nixRaw`pkgs.python2Packages.verspec`,
  "Flexible version handling",
);

/**
 * Native Python client for Vertica database
 */
export const vertica_python = mkPackage(
  nixRaw`pkgs.python2Packages.vertica-python`,
  "Native Python client for Vertica database",
);

/**
 * A simple Python library for easily displaying tabular data in a visually appealing ASCII table format
 */
export const veryprettytable = mkPackage(
  nixRaw`pkgs.python2Packages.veryprettytable`,
  "A simple Python library for easily displaying tabular data in a visually appealing ASCII table format",
);

/**
 * Linear algebra for humans: a very good vector-geometry and linear-algebra toolbelt
 */
export const vg = mkPackage(
  nixRaw`pkgs.python2Packages.vg`,
  "Linear algebra for humans: a very good vector-geometry and linear-algebra toolbelt",
);

/**
 * Extract hardcoded subtitles from videos using machine learning
 */
export const videocr = mkPackage(
  nixRaw`pkgs.python2Packages.videocr`,
  "Extract hardcoded subtitles from videos using machine learning",
);

/**
 * Video Stabilization using OpenCV
 */
export const vidstab = mkPackage(
  nixRaw`pkgs.python2Packages.vidstab`,
  "Video Stabilization using OpenCV",
);

/**
 * Prediction and comparison of RNA secondary structures
 */
export const viennarna = mkPackage(
  nixRaw`pkgs.python2Packages.viennarna`,
  "Prediction and comparison of RNA secondary structures",
);

/**
 * .NET viewstate decoder
 */
export const viewstate = mkPackage(
  nixRaw`pkgs.python2Packages.viewstate`,
  ".NET viewstate decoder",
);

/**
 * Simple wrapper client for the Vilfo router API
 */
export const vilfo_api_client = mkPackage(
  nixRaw`pkgs.python2Packages.vilfo-api-client`,
  "Simple wrapper client for the Vilfo router API",
);

/**
 * One of the fastest and most widely used open-source docking engines
 */
export const vina = mkPackage(
  nixRaw`pkgs.python2Packages.vina`,
  "One of the fastest and most widely used open-source docking engines",
);

/**
 * Calculate the geographical distance between 2 points with extreme accuracy
 */
export const vincenty = mkPackage(
  nixRaw`pkgs.python2Packages.vincenty`,
  "Calculate the geographical distance between 2 points with extreme accuracy",
);

/**
 * Python promises
 */
export const vine = mkPackage(
  nixRaw`pkgs.python2Packages.vine`,
  "Python promises",
);

/**
 * Extension to emulate keypresses and to get the layout information from the X server
 */
export const virtkey = mkPackage(
  nixRaw`pkgs.python2Packages.virtkey`,
  "Extension to emulate keypresses and to get the layout information from the X server",
);

/**
 * A tool to create isolated Python environments
 */
export const virtualenv = mkPackage(
  nixRaw`pkgs.python2Packages.virtualenv`,
  "A tool to create isolated Python environments",
);

/**
 * Script to clone virtualenvs
 */
export const virtualenv_clone = mkPackage(
  nixRaw`pkgs.python2Packages.virtualenv-clone`,
  "Script to clone virtualenvs",
);

/**
 * Enhancements to virtualenv
 */
export const virtualenvwrapper = mkPackage(
  nixRaw`pkgs.python2Packages.virtualenvwrapper`,
  "Enhancements to virtualenv",
);

/**
 * A tiny pythonic visitor implementation
 */
export const visitor = mkPackage(
  nixRaw`pkgs.python2Packages.visitor`,
  "A tiny pythonic visitor implementation",
);

/**
 * Interactive scientific visualization in Python
 */
export const vispy = mkPackage(
  nixRaw`pkgs.python2Packages.vispy`,
  "Interactive scientific visualization in Python",
);

/**
 * Utilities for working with vivisect
 */
export const viv_utils = mkPackage(
  nixRaw`pkgs.python2Packages.viv-utils`,
  "Utilities for working with vivisect",
);

/**
 * Python disassembler, debugger, emulator, and static analysis framework
 */
export const vivisect = mkPackage(
  nixRaw`pkgs.python2Packages.vivisect`,
  "Python disassembler, debugger, emulator, and static analysis framework",
);

/**
 * A vmprof client
 */
export const vmprof = mkPackage(
  nixRaw`pkgs.python2Packages.vmprof`,
  "A vmprof client",
);

/**
 * A command line VNC client and python library
 */
export const vncdo = mkPackage(
  nixRaw`pkgs.python2Packages.vncdo`,
  "A command line VNC client and python library",
);

/**
 * Module for reading vCard and vCalendar files
 */
export const vobject = mkPackage(
  nixRaw`pkgs.python2Packages.vobject`,
  "Module for reading vCard and vCalendar files",
);

/**
 * A small extension for the tempfile module
 */
export const volatile = mkPackage(
  nixRaw`pkgs.python2Packages.volatile`,
  "A small extension for the tempfile module",
);

/**
 * Python module for interacting with the Volkszahler API
 */
export const volkszaehler = mkPackage(
  nixRaw`pkgs.python2Packages.volkszaehler`,
  "Python module for interacting with the Volkszahler API",
);

/**
 * Python data validation library
 */
export const voluptuous = mkPackage(
  nixRaw`pkgs.python2Packages.voluptuous`,
  "Python data validation library",
);

/**
 * Convert Voluptuous schemas to dictionaries so they can be serialized
 */
export const voluptuous_serialize = mkPackage(
  nixRaw`pkgs.python2Packages.voluptuous-serialize`,
  "Convert Voluptuous schemas to dictionaries so they can be serialized",
);

/**
 * Typing stubs for voluptuous
 */
export const voluptuous_stubs = mkPackage(
  nixRaw`pkgs.python2Packages.voluptuous-stubs`,
  "Typing stubs for voluptuous",
);

/**
 * Retrieve information from the Volvo On Call web service
 */
export const volvooncall = mkPackage(
  nixRaw`pkgs.python2Packages.volvooncall`,
  "Retrieve information from the Volvo On Call web service",
);

/**
 * Vowpal Wabbit is a fast machine learning library for online learning, and this is the python wrapper for the project.
 */
export const vowpalwabbit = mkPackage(
  nixRaw`pkgs.python2Packages.vowpalwabbit`,
  "Vowpal Wabbit is a fast machine learning library for online learning, and this is the python wrapper for the project.",
);

/**
 * Library for working with Valve Pak files
 */
export const vpk = mkPackage(
  nixRaw`pkgs.python2Packages.vpk`,
  "Library for working with Valve Pak files",
);

/**
 * JAX implementation of VQGAN
 */
export const vqgan_jax = mkPackage(
  nixRaw`pkgs.python2Packages.vqgan-jax`,
  "JAX implementation of VQGAN",
);

/**
 * Python APIs for interacting with and managing Azure DevOps
 */
export const vsts = mkPackage(
  nixRaw`pkgs.python2Packages.vsts`,
  "Python APIs for interacting with and managing Azure DevOps",
);

/**
 * Microsoft Azure API Management Client Library for Python
 */
export const vsts_cd_manager = mkPackage(
  nixRaw`pkgs.python2Packages.vsts-cd-manager`,
  "Microsoft Azure API Management Client Library for Python",
);

/**
 * Python library for working with verisure devices
 */
export const vsure = mkPackage(
  nixRaw`pkgs.python2Packages.vsure`,
  "Python library for working with verisure devices",
);

/**
 * Python client library for VirusTotal
 */
export const vt_py = mkPackage(
  nixRaw`pkgs.python2Packages.vt-py`,
  "Python client library for VirusTotal",
);

/**
 * Open source libraries for 3D computer graphics, image processing and visualization
 */
export const vtk = mkPackage(
  nixRaw`pkgs.python2Packages.vtk`,
  "Open source libraries for 3D computer graphics, image processing and visualization",
);

/**
 * Python library for UONET+ e-register API
 */
export const vulcan_api = mkPackage(
  nixRaw`pkgs.python2Packages.vulcan-api`,
  "Python library for UONET+ e-register API",
);

/**
 * Vultr.com API Client
 */
export const vultr = mkPackage(
  nixRaw`pkgs.python2Packages.vultr`,
  "Vultr.com API Client",
);

/**
 * Finds unused code in Python programs
 */
export const vulture = mkPackage(
  nixRaw`pkgs.python2Packages.vulture`,
  "Finds unused code in Python programs",
);

/**
 * VXI-11 driver for controlling instruments over Ethernet
 */
export const vxi11 = mkPackage(
  nixRaw`pkgs.python2Packages.vxi11`,
  "VXI-11 driver for controlling instruments over Ethernet",
);

/**
 * Pythonic Smart Contract Language for the EVM
 */
export const vyper = mkPackage(
  nixRaw`pkgs.python2Packages.vyper`,
  "Pythonic Smart Contract Language for the EVM",
);

/**
 * Python interface to 1-Wire temperature sensors
 */
export const w1thermsensor = mkPackage(
  nixRaw`pkgs.python2Packages.w1thermsensor`,
  "Python interface to 1-Wire temperature sensors",
);

/**
 * Library of web-related functions
 */
export const w3lib = mkPackage(
  nixRaw`pkgs.python2Packages.w3lib`,
  "Library of web-related functions",
);

/**
 * Navigate HTTP resources using WADL files as guides
 */
export const wadllib = mkPackage(
  nixRaw`pkgs.python2Packages.wadllib`,
  "Navigate HTTP resources using WADL files as guides",
);

/**
 * A Django content management system focused on flexibility and user experience
 */
export const wagtail = mkPackage(
  nixRaw`pkgs.python2Packages.wagtail`,
  "A Django content management system focused on flexibility and user experience",
);

/**
 * Factory boy classes for wagtail
 */
export const wagtail_factories = mkPackage(
  nixRaw`pkgs.python2Packages.wagtail-factories`,
  "Factory boy classes for wagtail",
);

/**
 * Translation plugin for Wagtail CMS
 */
export const wagtail_localize = mkPackage(
  nixRaw`pkgs.python2Packages.wagtail-localize`,
  "Translation plugin for Wagtail CMS",
);

/**
 * Waitress WSGI server
 */
export const waitress = mkPackage(
  nixRaw`pkgs.python2Packages.waitress`,
  "Waitress WSGI server",
);

/**
 * A waitress WSGI server serving django
 */
export const waitress_django = mkPackage(
  nixRaw`pkgs.python2Packages.waitress-django`,
  "A waitress WSGI server serving django",
);

/**
 * Python module for wake on lan
 */
export const wakeonlan = mkPackage(
  nixRaw`pkgs.python2Packages.wakeonlan`,
  "Python module for wake on lan",
);

/**
 * Module for interacting with Wallbox EV charger api
 */
export const wallbox = mkPackage(
  nixRaw`pkgs.python2Packages.wallbox`,
  "Module for interacting with Wallbox EV charger api",
);

/**
 * Lightweight Python utilities for working with Redis
 */
export const walrus = mkPackage(
  nixRaw`pkgs.python2Packages.walrus`,
  "Lightweight Python utilities for working with Redis",
);

/**
 * Ctypes-based simple MagickWand API binding for Python
 */
export const wand = mkPackage(
  nixRaw`pkgs.python2Packages.wand`,
  "Ctypes-based simple MagickWand API binding for Python",
);

/**
 * A CLI and library for interacting with the Weights and Biases API
 */
export const wandb = mkPackage(
  nixRaw`pkgs.python2Packages.wandb`,
  "A CLI and library for interacting with the Weights and Biases API",
);

/**
 * Python library for http://aqicn.org
 */
export const waqiasync = mkPackage(
  nixRaw`pkgs.python2Packages.waqiasync`,
  "Python library for http://aqicn.org",
);

/**
 * Python bindings for MbientLab's Warble library
 */
export const warble = mkPackage(
  nixRaw`pkgs.python2Packages.warble`,
  "Python bindings for MbientLab's Warble library",
);

/**
 * Streaming WARC/ARC library for fast web archive IO
 */
export const warcio = mkPackage(
  nixRaw`pkgs.python2Packages.warcio`,
  "Streaming WARC/ARC library for fast web archive IO",
);

/**
 * Test framework for Python
 */
export const ward = mkPackage(
  nixRaw`pkgs.python2Packages.ward`,
  "Test framework for Python",
);

/**
 * Python object model built on JSON schema and JSON patch
 */
export const warlock = mkPackage(
  nixRaw`pkgs.python2Packages.warlock`,
  "Python object model built on JSON schema and JSON patch",
);

/**
 * Python library for using AWS Cognito with support for SRP
 */
export const warrant = mkPackage(
  nixRaw`pkgs.python2Packages.warrant`,
  "Python library for using AWS Cognito with support for SRP",
);

/**
 * Module for process SRP requests for AWS Cognito
 */
export const warrant_lite = mkPackage(
  nixRaw`pkgs.python2Packages.warrant-lite`,
  "Module for process SRP requests for AWS Cognito",
);

/**
 * A lightweight console printing and formatting toolkit
 */
export const wasabi = mkPackage(
  nixRaw`pkgs.python2Packages.wasabi`,
  "A lightweight console printing and formatting toolkit",
);

/**
 * Python extension to run WebAssembly binaries
 */
export const wasmer = mkPackage(
  nixRaw`pkgs.python2Packages.wasmer`,
  "Python extension to run WebAssembly binaries",
);

/**
 * Python extension to run WebAssembly binaries
 */
export const wasmer_compiler_cranelift = mkPackage(
  nixRaw`pkgs.python2Packages.wasmer-compiler-cranelift`,
  "Python extension to run WebAssembly binaries",
);

/**
 * Python extension to run WebAssembly binaries
 */
export const wasmer_compiler_llvm = mkPackage(
  nixRaw`pkgs.python2Packages.wasmer-compiler-llvm`,
  "Python extension to run WebAssembly binaries",
);

/**
 * Python extension to run WebAssembly binaries
 */
export const wasmer_compiler_singlepass = mkPackage(
  nixRaw`pkgs.python2Packages.wasmer-compiler-singlepass`,
  "Python extension to run WebAssembly binaries",
);

/**
 * Python/C++ library for computing Wasserstein distances efficiently
 */
export const wasserstein = mkPackage(
  nixRaw`pkgs.python2Packages.wasserstein`,
  "Python/C++ library for computing Wasserstein distances efficiently",
);

/**
 * Python API and shell utilities to monitor file system events
 */
export const watchdog = mkPackage(
  nixRaw`pkgs.python2Packages.watchdog`,
  "Python API and shell utilities to monitor file system events",
);

/**
 * A gevent-based observer for watchdog
 */
export const watchdog_gevent = mkPackage(
  nixRaw`pkgs.python2Packages.watchdog-gevent`,
  "A gevent-based observer for watchdog",
);

/**
 * File watching and code reload
 */
export const watchfiles = mkPackage(
  nixRaw`pkgs.python2Packages.watchfiles`,
  "File watching and code reload",
);

/**
 * Simple, modern file watching and code reload in python
 */
export const watchgod = mkPackage(
  nixRaw`pkgs.python2Packages.watchgod`,
  "Simple, modern file watching and code reload in python",
);

/**
 * Python interface to waterfurnace geothermal systems
 */
export const waterfurnace = mkPackage(
  nixRaw`pkgs.python2Packages.waterfurnace`,
  "Python interface to waterfurnace geothermal systems",
);

/**
 * IPython extension for printing date and timestamps, version numbers, and hardware information
 */
export const watermark = mkPackage(
  nixRaw`pkgs.python2Packages.watermark`,
  "IPython extension for printing date and timestamps, version numbers, and hardware information",
);

/**
 * WaveDrom compatible Python command line
 */
export const wavedrom = mkPackage(
  nixRaw`pkgs.python2Packages.wavedrom`,
  "WaveDrom compatible Python command line",
);

/**
 * Pythonic libsndfile wrapper to read and write audio files
 */
export const wavefile = mkPackage(
  nixRaw`pkgs.python2Packages.wavefile`,
  "Pythonic libsndfile wrapper to read and write audio files",
);

/**
 * Python module to interact with the Wavin Sentio underfloor heating system
 */
export const wavinsentio = mkPackage(
  nixRaw`pkgs.python2Packages.wavinsentio`,
  "Python module to interact with the Wavin Sentio underfloor heating system",
);

/**
 * Calculate actual route time and distance with Waze API
 */
export const wazeroutecalculator = mkPackage(
  nixRaw`pkgs.python2Packages.wazeroutecalculator`,
  "Calculate actual route time and distance with Waze API",
);

/**
 * Library for computing contrast ratios, as required by WCAG 2.0
 */
export const wcag_contrast_ratio = mkPackage(
  nixRaw`pkgs.python2Packages.wcag-contrast-ratio`,
  "Library for computing contrast ratios, as required by WCAG 2.0",
);

/**
 * Wilcard File Name matching library
 */
export const wcmatch = mkPackage(
  nixRaw`pkgs.python2Packages.wcmatch`,
  "Wilcard File Name matching library",
);

/**
 * Measures number of Terminal column cells of wide-character codes
 */
export const wcwidth = mkPackage(
  nixRaw`pkgs.python2Packages.wcwidth`,
  "Measures number of Terminal column cells of wide-character codes",
);

/**
 * Weasel: A small and easy workflow system
 */
export const weasel = mkPackage(
  nixRaw`pkgs.python2Packages.weasel`,
  "Weasel: A small and easy workflow system",
);

/**
 * Converts web documents to PDF
 */
export const weasyprint = mkPackage(
  nixRaw`pkgs.python2Packages.weasyprint`,
  "Converts web documents to PDF",
);

/**
 * Python native client for easy interaction with a Weaviate instance
 */
export const weaviate_client = mkPackage(
  nixRaw`pkgs.python2Packages.weaviate-client`,
  "Python native client for easy interaction with a Weaviate instance",
);

/**
 * Makes web apps
 */
export const web = mkPackage(
  nixRaw`pkgs.python2Packages.web`,
  "Makes web apps",
);

/**
 * A python interface for interacting with the Ethereum blockchain and ecosystem
 */
export const web3 = mkPackage(
  nixRaw`pkgs.python2Packages.web3`,
  "A python interface for interacting with the Ethereum blockchain and ecosystem",
);

/**
 * Simple Python key-value storage backed up by sqlite3 database
 */
export const web_cache = mkPackage(
  nixRaw`pkgs.python2Packages.web-cache`,
  "Simple Python key-value storage backed up by sqlite3 database",
);

/**
 * Declarative parsing and validation of HTTP request objects, with built-in support for popular web frameworks
 */
export const webargs = mkPackage(
  nixRaw`pkgs.python2Packages.webargs`,
  "Declarative parsing and validation of HTTP request objects, with built-in support for popular web frameworks",
);

/**
 * Media asset management for Python, with glue code for various web frameworks
 */
export const webassets = mkPackage(
  nixRaw`pkgs.python2Packages.webassets`,
  "Media asset management for Python, with glue code for various web frameworks",
);

/**
 * Implementation of the WebAuthn API
 */
export const webauthn = mkPackage(
  nixRaw`pkgs.python2Packages.webauthn`,
  "Implementation of the WebAuthn API",
);

/**
 * Library for working with color names/values defined by the HTML and CSS specifications
 */
export const webcolors = mkPackage(
  nixRaw`pkgs.python2Packages.webcolors`,
  "Library for working with color names/values defined by the HTML and CSS specifications",
);

/**
 * Library for interacting with WebDAV
 */
export const webdav4 = mkPackage(
  nixRaw`pkgs.python2Packages.webdav4`,
  "Library for interacting with WebDAV",
);

/**
 * Easy to use WebDAV Client for Python 3.x
 */
export const webdavclient3 = mkPackage(
  nixRaw`pkgs.python2Packages.webdavclient3`,
  "Easy to use WebDAV Client for Python 3.x",
);

/**
 * Character encoding aliases for legacy web content
 */
export const webencodings = mkPackage(
  nixRaw`pkgs.python2Packages.webencodings`,
  "Character encoding aliases for legacy web content",
);

/**
 * Python module for Webex Teams APIs
 */
export const webexteamssdk = mkPackage(
  nixRaw`pkgs.python2Packages.webexteamssdk`,
  "Python module for Webex Teams APIs",
);

/**
 * Web Helpers
 */
export const webhelpers = mkPackage(
  nixRaw`pkgs.python2Packages.webhelpers`,
  "Web Helpers",
);

/**
 * WSGI request and response object
 */
export const webob = mkPackage(
  nixRaw`pkgs.python2Packages.webob`,
  "WSGI request and response object",
);

/**
 * Collection of applications and APIs to interact with websites
 */
export const weboob = mkPackage(
  nixRaw`pkgs.python2Packages.weboob`,
  "Collection of applications and APIs to interact with websites",
);

/**
 * Tiny wrapper around webrtc-audio-processing for noise suppression/auto gain only
 */
export const webrtc_noise_gain = mkPackage(
  nixRaw`pkgs.python2Packages.webrtc-noise-gain`,
  "Tiny wrapper around webrtc-audio-processing for noise suppression/auto gain only",
);

/**
 * Interface to the Google WebRTC Voice Activity Detector (VAD)
 */
export const webrtcvad = mkPackage(
  nixRaw`pkgs.python2Packages.webrtcvad`,
  "Interface to the Google WebRTC Voice Activity Detector (VAD)",
);

/**
 * Websocket client for Python
 */
export const websocket_client = mkPackage(
  nixRaw`pkgs.python2Packages.websocket-client`,
  "Websocket client for Python",
);

/**
 * WebSocket implementation in Python
 */
export const websockets = mkPackage(
  nixRaw`pkgs.python2Packages.websockets`,
  "WebSocket implementation in Python",
);

/**
 * WebSockets support for any application/server
 */
export const websockify = mkPackage(
  nixRaw`pkgs.python2Packages.websockify`,
  "WebSockets support for any application/server",
);

/**
 * Web based SSH client
 */
export const webssh = mkPackage(
  nixRaw`pkgs.python2Packages.webssh`,
  "Web based SSH client",
);

/**
 * Helper to test WSGI applications
 */
export const webtest = mkPackage(
  nixRaw`pkgs.python2Packages.webtest`,
  "Helper to test WSGI applications",
);

/**
 * Provides integration of WebTest with aiohttp.web applications
 */
export const webtest_aiohttp = mkPackage(
  nixRaw`pkgs.python2Packages.webtest-aiohttp`,
  "Provides integration of WebTest with aiohttp.web applications",
);

/**
 * Python implementation of a Web Thing server
 */
export const webthing = mkPackage(
  nixRaw`pkgs.python2Packages.webthing`,
  "Python implementation of a Web Thing server",
);

/**
 * WebThing WebSocket consumer and API client
 */
export const webthing_ws = mkPackage(
  nixRaw`pkgs.python2Packages.webthing-ws`,
  "WebThing WebSocket consumer and API client",
);

/**
 * Python client for the Volkswagen WeConnect Services
 */
export const weconnect = mkPackage(
  nixRaw`pkgs.python2Packages.weconnect`,
  "Python client for the Volkswagen WeConnect Services",
);

/**
 * Python client that publishes data from Volkswagen WeConnect
 */
export const weconnect_mqtt = mkPackage(
  nixRaw`pkgs.python2Packages.weconnect-mqtt`,
  "Python client that publishes data from Volkswagen WeConnect",
);

/**
 * The comprehensive WSGI web application library
 */
export const werkzeug = mkPackage(
  nixRaw`pkgs.python2Packages.werkzeug`,
  "The comprehensive WSGI web application library",
);

/**
 * Zephyr RTOS meta tool
 */
export const west = mkPackage(
  nixRaw`pkgs.python2Packages.west`,
  "Zephyr RTOS meta tool",
);

/**
 * Web content fuzzer to facilitate web applications assessments
 */
export const wfuzz = mkPackage(
  nixRaw`pkgs.python2Packages.wfuzz`,
  "Web content fuzzer to facilitate web applications assessments",
);

/**
 * Pure python download utility
 */
export const wget = mkPackage(
  nixRaw`pkgs.python2Packages.wget`,
  "Pure python download utility",
);

/**
 * Python library for both parsing and applying patch files
 */
export const whatthepatch = mkPackage(
  nixRaw`pkgs.python2Packages.whatthepatch`,
  "Python library for both parsing and applying patch files",
);

/**
 * A built-package format for Python
 */
export const wheel = mkPackage(
  nixRaw`pkgs.python2Packages.wheel`,
  "A built-package format for Python",
);

export const wheelUnpackHook = mkPackage(
  nixRaw`pkgs.python2Packages.wheelUnpackHook`,
  "",
);

/**
 * Parse wheel filenames
 */
export const wheel_filename = mkPackage(
  nixRaw`pkgs.python2Packages.wheel-filename`,
  "Parse wheel filenames",
);

/**
 * Extract information from wheels
 */
export const wheel_inspect = mkPackage(
  nixRaw`pkgs.python2Packages.wheel-inspect`,
  "Extract information from wheels",
);

/**
 * A lightweight CAPTCHA library
 */
export const wheezy_captcha = mkPackage(
  nixRaw`pkgs.python2Packages.wheezy-captcha`,
  "A lightweight CAPTCHA library",
);

/**
 * A lightweight template library
 */
export const wheezy_template = mkPackage(
  nixRaw`pkgs.python2Packages.wheezy-template`,
  "A lightweight template library",
);

/**
 * Cross-platform cross-python shutil.which functionality
 */
export const whichcraft = mkPackage(
  nixRaw`pkgs.python2Packages.whichcraft`,
  "Cross-platform cross-python shutil.which functionality",
);

/**
 * Python library for Whirlpool 6th Sense appliances
 */
export const whirlpool_sixth_sense = mkPackage(
  nixRaw`pkgs.python2Packages.whirlpool-sixth-sense`,
  "Python library for Whirlpool 6th Sense appliances",
);

/**
 * Fixed size round-robin style database
 */
export const whisper = mkPackage(
  nixRaw`pkgs.python2Packages.whisper`,
  "Fixed size round-robin style database",
);

/**
 * Tool to identify hardcoded secrets in static structured text
 */
export const whispers = mkPackage(
  nixRaw`pkgs.python2Packages.whispers`,
  "Tool to identify hardcoded secrets in static structured text",
);

/**
 * Library to serve static file for WSGI applications
 */
export const whitenoise = mkPackage(
  nixRaw`pkgs.python2Packages.whitenoise`,
  "Library to serve static file for WSGI applications",
);

/**
 * Python RDAP utility for querying and parsing information about domain names
 */
export const whodap = mkPackage(
  nixRaw`pkgs.python2Packages.whodap`,
  "Python RDAP utility for querying and parsing information about domain names",
);

/**
 * Python module/library for retrieving WHOIS information
 */
export const whois = mkPackage(
  nixRaw`pkgs.python2Packages.whois`,
  "Python module/library for retrieving WHOIS information",
);

/**
 * Whois API client library for Python
 */
export const whois_api = mkPackage(
  nixRaw`pkgs.python2Packages.whois-api`,
  "Whois API client library for Python",
);

        /**
         * Fast, pure-Python full text indexing, search, and spell
checking library.
         */
export const whoosh = mkPackage(
  nixRaw`pkgs.python2Packages.whoosh`,
  "Fast, pure-Python full text indexing, search, and spell\nchecking library.",
);

/**
 * IPython HTML widgets for Jupyter
 */
export const widgetsnbextension = mkPackage(
  nixRaw`pkgs.python2Packages.widgetsnbextension`,
  "IPython HTML widgets for Jupyter",
);

/**
 * Stand-alone WebIDL Parser in Python
 */
export const widlparser = mkPackage(
  nixRaw`pkgs.python2Packages.widlparser`,
  "Stand-alone WebIDL Parser in Python",
);

/**
 * Python module to interface with STALL WIFFI devices
 */
export const wiffi = mkPackage(
  nixRaw`pkgs.python2Packages.wiffi`,
  "Python module to interface with STALL WIFFI devices",
);

/**
 * Provides a command line wrapper for iwlist and /etc/network/interfaces
 */
export const wifi = mkPackage(
  nixRaw`pkgs.python2Packages.wifi`,
  "Provides a command line wrapper for iwlist and /etc/network/interfaces",
);

/**
 * A Pythonic wrapper for the Wikipedia API
 */
export const wikipedia = mkPackage(
  nixRaw`pkgs.python2Packages.wikipedia`,
  "A Pythonic wrapper for the Wikipedia API",
);

/**
 * Python wrapper for Wikipedia
 */
export const wikipedia_api = mkPackage(
  nixRaw`pkgs.python2Packages.wikipedia-api`,
  "Python wrapper for Wikipedia",
);

/**
 * A simple parsing tool for MediaWiki's wikitext markup
 */
export const wikitextparser = mkPackage(
  nixRaw`pkgs.python2Packages.wikitextparser`,
  "A simple parsing tool for MediaWiki's wikitext markup",
);

/**
 * A Python image library that sits on top of Pillow, Wand and OpenCV
 */
export const willow = mkPackage(
  nixRaw`pkgs.python2Packages.willow`,
  "A Python image library that sits on top of Pillow, Wand and OpenCV",
);

/**
 * Python module for ACL/ACE/Security descriptor manipulation
 */
export const winacl = mkPackage(
  nixRaw`pkgs.python2Packages.winacl`,
  "Python module for ACL/ACE/Security descriptor manipulation",
);

/**
 * Python module for ACL/ACE/Security descriptor manipulation
 */
export const winsspi = mkPackage(
  nixRaw`pkgs.python2Packages.winsspi`,
  "Python module for ACL/ACE/Security descriptor manipulation",
);

/**
 * Library for the Withings Health API
 */
export const withings_api = mkPackage(
  nixRaw`pkgs.python2Packages.withings-api`,
  "Library for the Withings Health API",
);

/**
 * Collection of tools for handling WKTs
 */
export const wktutils = mkPackage(
  nixRaw`pkgs.python2Packages.wktutils`,
  "Collection of tools for handling WKTs",
);

/**
 * Asynchronous Python client for WLED
 */
export const wled = mkPackage(
  nixRaw`pkgs.python2Packages.wled`,
  "Asynchronous Python client for WLED",
);

/**
 * A modern, interlingual wordnet interface for Python
 */
export const wn = mkPackage(
  nixRaw`pkgs.python2Packages.wn`,
  "A modern, interlingual wordnet interface for Python",
);

/**
 * Collection of applications and APIs to interact with websites
 */
export const woob = mkPackage(
  nixRaw`pkgs.python2Packages.woob`,
  "Collection of applications and APIs to interact with websites",
);

/**
 * A framework to generate file carving test data
 */
export const woodblock = mkPackage(
  nixRaw`pkgs.python2Packages.woodblock`,
  "A framework to generate file carving test data",
);

/**
 * Word cloud generator in Python
 */
export const wordcloud = mkPackage(
  nixRaw`pkgs.python2Packages.wordcloud`,
  "Word cloud generator in Python",
);

/**
 * A library for looking up the frequencies of words in many languages, based on many sources of data
 */
export const wordfreq = mkPackage(
  nixRaw`pkgs.python2Packages.wordfreq`,
  "A library for looking up the frequencies of words in many languages, based on many sources of data",
);

export const wrapPython = mkPackage(
  nixRaw`pkgs.python2Packages.wrapPython`,
  "",
);

/**
 * Handling event-based streams
 */
export const wrapio = mkPackage(
  nixRaw`pkgs.python2Packages.wrapio`,
  "Handling event-based streams",
);

/**
 * Module for decorators, wrappers and monkey patching
 */
export const wrapt = mkPackage(
  nixRaw`pkgs.python2Packages.wrapt`,
  "Module for decorators, wrappers and monkey patching",
);

/**
 * WRF postprocessing library for Python
 */
export const wrf_python = mkPackage(
  nixRaw`pkgs.python2Packages.wrf-python`,
  "WRF postprocessing library for Python",
);

/**
 * A WebSocket package for Python
 */
export const ws4py = mkPackage(
  nixRaw`pkgs.python2Packages.ws4py`,
  "A WebSocket package for Python",
);

/**
 * WS-Discovery implementation for Python
 */
export const wsdiscovery = mkPackage(
  nixRaw`pkgs.python2Packages.wsdiscovery`,
  "WS-Discovery implementation for Python",
);

/**
 * Module that acts as a WSGI application in place of a real URI for testing
 */
export const wsgi_intercept = mkPackage(
  nixRaw`pkgs.python2Packages.wsgi-intercept`,
  "Module that acts as a WSGI application in place of a real URI for testing",
);

/**
 * Generic and extendable WebDAV server based on WSGI
 */
export const wsgidav = mkPackage(
  nixRaw`pkgs.python2Packages.wsgidav`,
  "Generic and extendable WebDAV server based on WSGI",
);

/**
 * Python WSGI Middleware for adding HTTP/S proxy support to any WSGI Application
 */
export const wsgiprox = mkPackage(
  nixRaw`pkgs.python2Packages.wsgiprox`,
  "Python WSGI Middleware for adding HTTP/S proxy support to any WSGI Application",
);

/**
 * HTTP proxying tools for WSGI apps
 */
export const wsgiproxy2 = mkPackage(
  nixRaw`pkgs.python2Packages.wsgiproxy2`,
  "HTTP proxying tools for WSGI apps",
);

/**
 * A set of tools working with WSGI
 */
export const wsgitools = mkPackage(
  nixRaw`pkgs.python2Packages.wsgitools`,
  "A set of tools working with WSGI",
);

/**
 * Simplify the writing of REST APIs, and extend them with additional protocols
 */
export const wsme = mkPackage(
  nixRaw`pkgs.python2Packages.wsme`,
  "Simplify the writing of REST APIs, and extend them with additional protocols",
);

/**
 * SimPy-based WSN Simulator
 */
export const wsnsimpy = mkPackage(
  nixRaw`pkgs.python2Packages.wsnsimpy`,
  "SimPy-based WSN Simulator",
);

/**
 * Pure Python, pure state-machine WebSocket implementation
 */
export const wsproto = mkPackage(
  nixRaw`pkgs.python2Packages.wsproto`,
  "Pure Python, pure state-machine WebSocket implementation",
);

/**
 * WTForms integration for peewee models
 */
export const wtf_peewee = mkPackage(
  nixRaw`pkgs.python2Packages.wtf-peewee`,
  "WTForms integration for peewee models",
);

/**
 * A flexible forms validation and rendering library for Python
 */
export const wtforms = mkPackage(
  nixRaw`pkgs.python2Packages.wtforms`,
  "A flexible forms validation and rendering library for Python",
);

/**
 * Capture C-level output in context managers
 */
export const wurlitzer = mkPackage(
  nixRaw`pkgs.python2Packages.wurlitzer`,
  "Capture C-level output in context managers",
);

/**
 * Cross platform GUI toolkit for Python, Phoenix version
 */
export const wxPython_4_2 = mkPackage(
  nixRaw`pkgs.python2Packages.wxPython_4_2`,
  "Cross platform GUI toolkit for Python, Phoenix version",
);

/**
 * Protocol for Rhasspy Voice Assistant
 */
export const wyoming = mkPackage(
  nixRaw`pkgs.python2Packages.wyoming`,
  "Protocol for Rhasspy Voice Assistant",
);

/**
 * Binding for X11 proof of work hashing
 */
export const x11_hash = mkPackage(
  nixRaw`pkgs.python2Packages.x11_hash`,
  "Binding for X11 proof of work hashing",
);

/**
 * Find the nearest xterm 256 color index for an RGB
 */
export const x256 = mkPackage(
  nixRaw`pkgs.python2Packages.x256`,
  "Find the nearest xterm 256 color index for an RGB",
);

/**
 * Convert calendars using X-WR-TIMEZONE to standard ones
 */
export const x_wr_timezone = mkPackage(
  nixRaw`pkgs.python2Packages.x-wr-timezone`,
  "Convert calendars using X-WR-TIMEZONE to standard ones",
);

/**
 * Python Bindings for Xapian
 */
export const xapian = mkPackage(
  nixRaw`pkgs.python2Packages.xapian`,
  "Python Bindings for Xapian",
);

/**
 * Cross-desktop libraries and common resources for python
 */
export const xapp = mkPackage(
  nixRaw`pkgs.python2Packages.xapp`,
  "Cross-desktop libraries and common resources for python",
);

/**
 * N-D labeled arrays and datasets in Python
 */
export const xarray = mkPackage(
  nixRaw`pkgs.python2Packages.xarray`,
  "N-D labeled arrays and datasets in Python",
);

/**
 * Stats, linear algebra and einops for xarray
 */
export const xarray_einstats = mkPackage(
  nixRaw`pkgs.python2Packages.xarray-einstats`,
  "Stats, linear algebra and einops for xarray",
);

/**
 * Python wrapper for extended filesystem attributes
 */
export const xattr = mkPackage(
  nixRaw`pkgs.python2Packages.xattr`,
  "Python wrapper for extended filesystem attributes",
);

/**
 * Library to authenticate with Windows Live/Xbox Live and use their API
 */
export const xbox_webapi = mkPackage(
  nixRaw`pkgs.python2Packages.xbox-webapi`,
  "Library to authenticate with Windows Live/Xbox Live and use their API",
);

/**
 * Python XBOX One API wrapper
 */
export const xboxapi = mkPackage(
  nixRaw`pkgs.python2Packages.xboxapi`,
  "Python XBOX One API wrapper",
);

/**
 * A drop in replacement for xpyb, an XCB python binding
 */
export const xcffib = mkPackage(
  nixRaw`pkgs.python2Packages.xcffib`,
  "A drop in replacement for xpyb, an XCB python binding",
);

/**
 * XDG Base Directory Specification for Python
 */
export const xdg = mkPackage(
  nixRaw`pkgs.python2Packages.xdg`,
  "XDG Base Directory Specification for Python",
);

/**
 * An implementation of the XDG Base Directory Specification in Python
 */
export const xdg_base_dirs = mkPackage(
  nixRaw`pkgs.python2Packages.xdg-base-dirs`,
  "An implementation of the XDG Base Directory Specification in Python",
);

/**
 * Python cross-version byte-code disassembler and marshal routines
 */
export const xdis = mkPackage(
  nixRaw`pkgs.python2Packages.xdis`,
  "Python cross-version byte-code disassembler and marshal routines",
);

/**
 * An interactive viewer for graphs written in Graphviz's dot
 */
export const xdot = mkPackage(
  nixRaw`pkgs.python2Packages.xdot`,
  "An interactive viewer for graphs written in Graphviz's dot",
);

/**
 * XFormers: A collection of composable Transformer building blocks
 */
export const xformers = mkPackage(
  nixRaw`pkgs.python2Packages.xformers`,
  "XFormers: A collection of composable Transformer building blocks",
);

/**
 * Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library
 */
export const xgboost = mkPackage(
  nixRaw`pkgs.python2Packages.xgboost`,
  "Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library",
);

/**
 * A PDF generator using HTML and CSS
 */
export const xhtml2pdf = mkPackage(
  nixRaw`pkgs.python2Packages.xhtml2pdf`,
  "A PDF generator using HTML and CSS",
);

/**
 * Library for Xiaomi BLE devices
 */
export const xiaomi_ble = mkPackage(
  nixRaw`pkgs.python2Packages.xiaomi-ble`,
  "Library for Xiaomi BLE devices",
);

/**
 * Python bindings for libxkbcommon using cffi
 */
export const xkbcommon = mkPackage(
  nixRaw`pkgs.python2Packages.xkbcommon`,
  "Python bindings for libxkbcommon using cffi",
);

/**
 * Generate secure multiword passwords/passphrases, inspired by XKCD
 */
export const xkcdpass = mkPackage(
  nixRaw`pkgs.python2Packages.xkcdpass`,
  "Generate secure multiword passwords/passphrases, inspired by XKCD",
);

/**
 * KNX Library Written in Python
 */
export const xknx = mkPackage(
  nixRaw`pkgs.python2Packages.xknx`,
  "KNX Library Written in Python",
);

/**
 * ETS project parser
 */
export const xknxproject = mkPackage(
  nixRaw`pkgs.python2Packages.xknxproject`,
  "ETS project parser",
);

/**
 * Fully functional X client library for Python programs
 */
export const xlib = mkPackage(
  nixRaw`pkgs.python2Packages.xlib`,
  "Fully functional X client library for Python programs",
);

/**
 * Library for developers to extract data from Microsoft Excel (tm) spreadsheet files
 */
export const xlrd = mkPackage(
  nixRaw`pkgs.python2Packages.xlrd`,
  "Library for developers to extract data from Microsoft Excel (tm) spreadsheet files",
);

/**
 * Convert xlsx to csv
 */
export const xlsx2csv = mkPackage(
  nixRaw`pkgs.python2Packages.xlsx2csv`,
  "Convert xlsx to csv",
);

/**
 * Module for creating Excel XLSX files
 */
export const xlsxwriter = mkPackage(
  nixRaw`pkgs.python2Packages.xlsxwriter`,
  "Module for creating Excel XLSX files",
);

/**
 * Library to create spreadsheet files compatible with MS
 */
export const xlwt = mkPackage(
  nixRaw`pkgs.python2Packages.xlwt`,
  "Library to create spreadsheet files compatible with MS",
);

/**
 * Python module to create mindmaps
 */
export const xmind = mkPackage(
  nixRaw`pkgs.python2Packages.xmind`,
  "Python module to create mindmaps",
);

/**
 * Tool generating IETF RFCs and drafts from XML sources
 */
export const xml2rfc = mkPackage(
  nixRaw`pkgs.python2Packages.xml2rfc`,
  "Tool generating IETF RFCs and drafts from XML sources",
);

/**
 * This module allows one to marshal simple Python data types into a custom XML format.
 */
export const xml_marshaller = mkPackage(
  nixRaw`pkgs.python2Packages.xml-marshaller`,
  "This module allows one to marshal simple Python data types into a custom XML format.",
);

/**
 * Creates diffs of XML files
 */
export const xmldiff = mkPackage(
  nixRaw`pkgs.python2Packages.xmldiff`,
  "Creates diffs of XML files",
);

/**
 * Converts XML into dictionary structures and vice-versa
 */
export const xmljson = mkPackage(
  nixRaw`pkgs.python2Packages.xmljson`,
  "Converts XML into dictionary structures and vice-versa",
);

/**
 * XML Schema validator and data conversion library for Python
 */
export const xmlschema = mkPackage(
  nixRaw`pkgs.python2Packages.xmlschema`,
  "XML Schema validator and data conversion library for Python",
);

/**
 * Python bindings for the XML Security Library
 */
export const xmlsec = mkPackage(
  nixRaw`pkgs.python2Packages.xmlsec`,
  "Python bindings for the XML Security Library",
);

/**
 * Makes working with XML feel like you are working with JSON
 */
export const xmltodict = mkPackage(
  nixRaw`pkgs.python2Packages.xmltodict`,
  "Makes working with XML feel like you are working with JSON",
);

/**
 * Pure python implementation of the XMODEM protocol
 */
export const xmodem = mkPackage(
  nixRaw`pkgs.python2Packages.xmodem`,
  "Pure python implementation of the XMODEM protocol",
);

/**
 * A new XNAT client (distinct from pyxnat) that exposes XNAT objects/functions as Python objects/functions
 */
export const xnatpy = mkPackage(
  nixRaw`pkgs.python2Packages.xnatpy`,
  "A new XNAT client (distinct from pyxnat) that exposes XNAT objects/functions as Python objects/functions",
);

/**
 * C library for managing typed memory blocks and Python container module
 */
export const xnd = mkPackage(
  nixRaw`pkgs.python2Packages.xnd`,
  "C library for managing typed memory blocks and Python container module",
);

/**
 * Python module to handle XPath expressions
 */
export const xpath_expressions = mkPackage(
  nixRaw`pkgs.python2Packages.xpath-expressions`,
  "Python module to handle XPath expressions",
);

/**
 * An incomplete xcb-util port plus some extras
 */
export const xpybutil = mkPackage(
  nixRaw`pkgs.python2Packages.xpybutil`,
  "An incomplete xcb-util port plus some extras",
);

/**
 * Python XML Binding
 */
export const xsdata = mkPackage(
  nixRaw`pkgs.python2Packages.xsdata`,
  "Python XML Binding",
);

/**
 * Base packaged static files for python
 */
export const xstatic = mkPackage(
  nixRaw`pkgs.python2Packages.xstatic`,
  "Base packaged static files for python",
);

/**
 * Asciinema-player packaged for python
 */
export const xstatic_asciinema_player = mkPackage(
  nixRaw`pkgs.python2Packages.xstatic-asciinema-player`,
  "Asciinema-player packaged for python",
);

/**
 * Bootboxjs packaged static files for python
 */
export const xstatic_bootbox = mkPackage(
  nixRaw`pkgs.python2Packages.xstatic-bootbox`,
  "Bootboxjs packaged static files for python",
);

/**
 * Bootstrap packaged static files for python
 */
export const xstatic_bootstrap = mkPackage(
  nixRaw`pkgs.python2Packages.xstatic-bootstrap`,
  "Bootstrap packaged static files for python",
);

/**
 * Font Awesome packaged for python
 */
export const xstatic_font_awesome = mkPackage(
  nixRaw`pkgs.python2Packages.xstatic-font-awesome`,
  "Font Awesome packaged for python",
);

/**
 * jquery packaged static files for python
 */
export const xstatic_jquery = mkPackage(
  nixRaw`pkgs.python2Packages.xstatic-jquery`,
  "jquery packaged static files for python",
);

/**
 * jquery-file-upload packaged static files for python
 */
export const xstatic_jquery_file_upload = mkPackage(
  nixRaw`pkgs.python2Packages.xstatic-jquery-file-upload`,
  "jquery-file-upload packaged static files for python",
);

/**
 * jquery-ui packaged static files for python
 */
export const xstatic_jquery_ui = mkPackage(
  nixRaw`pkgs.python2Packages.xstatic-jquery-ui`,
  "jquery-ui packaged static files for python",
);

/**
 * pygments packaged static files for python
 */
export const xstatic_pygments = mkPackage(
  nixRaw`pkgs.python2Packages.xstatic-pygments`,
  "pygments packaged static files for python",
);

/**
 * Python bindings for the xtensor C++ multi-dimensional array library
 */
export const xtensor_python = mkPackage(
  nixRaw`pkgs.python2Packages.xtensor-python`,
  "Python bindings for the xtensor C++ multi-dimensional array library",
);

/**
 * Run headless display inside X virtual framebuffer (Xvfb)
 */
export const xvfbwrapper = mkPackage(
  nixRaw`pkgs.python2Packages.xvfbwrapper`,
  "Run headless display inside X virtual framebuffer (Xvfb)",
);

/**
 * Python Binding for xxHash https://pypi.org/project/xxhash/
 */
export const xxhash = mkPackage(
  nixRaw`pkgs.python2Packages.xxhash`,
  "Python Binding for xxHash https://pypi.org/project/xxhash/",
);

/**
 * Source of XYZ tiles providers
 */
export const xyzservices = mkPackage(
  nixRaw`pkgs.python2Packages.xyzservices`,
  "Source of XYZ tiles providers",
);

/**
 * Python bindings for Y-CRDT
 */
export const y_py = mkPackage(
  nixRaw`pkgs.python2Packages.y-py`,
  "Python bindings for Y-CRDT",
);

/**
 * Abstraction layer allowing for common interactions with databases and records
 */
export const yabadaba = mkPackage(
  nixRaw`pkgs.python2Packages.yabadaba`,
  "Abstraction layer allowing for common interactions with databases and records",
);

/**
 * Yet Another Configuration System
 */
export const yacs = mkPackage(
  nixRaw`pkgs.python2Packages.yacs`,
  "Yet Another Configuration System",
);

/**
 * Rule-based facts extraction for Russian language
 */
export const yagry = mkPackage(
  nixRaw`pkgs.python2Packages.yagry`,
  "Rule-based facts extraction for Russian language",
);

/**
 * Provide an interface to the Yahoo! Weather RSS feed
 */
export const yahooweather = mkPackage(
  nixRaw`pkgs.python2Packages.yahooweather`,
  "Provide an interface to the Yahoo! Weather RSS feed",
);

/**
 * Python module to interface with Yale Smart Alarm Systems
 */
export const yalesmartalarmclient = mkPackage(
  nixRaw`pkgs.python2Packages.yalesmartalarmclient`,
  "Python module to interface with Yale Smart Alarm Systems",
);

/**
 * Python API for Yale Access (formerly August) Smart Lock and Doorbell
 */
export const yalexs = mkPackage(
  nixRaw`pkgs.python2Packages.yalexs`,
  "Python API for Yale Access (formerly August) Smart Lock and Doorbell",
);

/**
 * Library for Yale BLE devices
 */
export const yalexs_ble = mkPackage(
  nixRaw`pkgs.python2Packages.yalexs-ble`,
  "Library for Yale BLE devices",
);

/**
 * A schema and validator for YAML
 */
export const yamale = mkPackage(
  nixRaw`pkgs.python2Packages.yamale`,
  "A schema and validator for YAML",
);

/**
 * Python YAML formatter that keeps your comments
 */
export const yamlfix = mkPackage(
  nixRaw`pkgs.python2Packages.yamlfix`,
  "Python YAML formatter that keeps your comments",
);

/**
 * A linter for YAML files
 */
export const yamllint = mkPackage(
  nixRaw`pkgs.python2Packages.yamllint`,
  "A linter for YAML files",
);

/**
 * A case-insensitive list for Python
 */
export const yamlloader = mkPackage(
  nixRaw`pkgs.python2Packages.yamlloader`,
  "A case-insensitive list for Python",
);

/**
 * YAML loader and dump for PyYAML allowing to keep keys order
 */
export const yamlordereddictloader = mkPackage(
  nixRaw`pkgs.python2Packages.yamlordereddictloader`,
  "YAML loader and dump for PyYAML allowing to keep keys order",
);

/**
 * Yet another nose colorer
 */
export const yanc = mkPackage(
  nixRaw`pkgs.python2Packages.yanc`,
  "Yet another nose colorer",
);

/**
 * Library for working with data modelled in YANG
 */
export const yangson = mkPackage(
  nixRaw`pkgs.python2Packages.yangson`,
  "Library for working with data modelled in YANG",
);

/**
 * Yet Another Python Formatter
 */
export const yapf = mkPackage(
  nixRaw`pkgs.python2Packages.yapf`,
  "Yet Another Python Formatter",
);

/**
 * Python profiler that supports multithreading and measuring CPU time
 */
export const yappi = mkPackage(
  nixRaw`pkgs.python2Packages.yappi`,
  "Python profiler that supports multithreading and measuring CPU time",
);

/**
 * Yet another plugin system
 */
export const yapsy = mkPackage(
  nixRaw`pkgs.python2Packages.yapsy`,
  "Yet another plugin system",
);

/**
 * Python interface for YARA
 */
export const yara_python = mkPackage(
  nixRaw`pkgs.python2Packages.yara-python`,
  "Python interface for YARA",
);

/**
 * Parsing of YARA rules into AST and building new rulesets in C++
 */
export const yaramod = mkPackage(
  nixRaw`pkgs.python2Packages.yaramod`,
  "Parsing of YARA rules into AST and building new rulesets in C++",
);

/**
 * An easy to use PyPI client
 */
export const yarg = mkPackage(
  nixRaw`pkgs.python2Packages.yarg`,
  "An easy to use PyPI client",
);

/**
 * YouTube archiving made simple
 */
export const yark = mkPackage(
  nixRaw`pkgs.python2Packages.yark`,
  "YouTube archiving made simple",
);

/**
 * Yet another URL library
 */
export const yarl = mkPackage(
  nixRaw`pkgs.python2Packages.yarl`,
  "Yet another URL library",
);

/**
 * A dialect-aware s-expression indenter written in Python and newLISP
 */
export const yasi = mkPackage(
  nixRaw`pkgs.python2Packages.yasi`,
  "A dialect-aware s-expression indenter written in Python and newLISP",
);

/**
 * Yet Another Terminal Spinner
 */
export const yaspin = mkPackage(
  nixRaw`pkgs.python2Packages.yaspin`,
  "Yet Another Terminal Spinner",
);

/**
 * Python SWF Parser
 */
export const yaswfp = mkPackage(
  nixRaw`pkgs.python2Packages.yaswfp`,
  "Python SWF Parser",
);

/**
 * Library to generate HTML or XML
 */
export const yattag = mkPackage(
  nixRaw`pkgs.python2Packages.yattag`,
  "Library to generate HTML or XML",
);

/**
 * View colored, incremental diff in workspace or from stdin with side by side and auto pager support (Was "cdiff")
 */
export const ydiff = mkPackage(
  nixRaw`pkgs.python2Packages.ydiff`,
  "View colored, incremental diff in workspace or from stdin with side by side and auto pager support (Was \"cdiff\")",
);

/**
 * Python library for controlling YeeLight RGB bulbs
 */
export const yeelight = mkPackage(
  nixRaw`pkgs.python2Packages.yeelight`,
  "Python library for controlling YeeLight RGB bulbs",
);

/**
 * Module to doiwnload Yahoo! Finance market data
 */
export const yfinance = mkPackage(
  nixRaw`pkgs.python2Packages.yfinance`,
  "Module to doiwnload Yahoo! Finance market data",
);

/**
 * Provides small set of data analysis (specifically histogramming) classes
 */
export const yoda = mkPackage(
  nixRaw`pkgs.python2Packages.yoda`,
  "Provides small set of data analysis (specifically histogramming) classes",
);

/**
 * Library to interface with Yolink
 */
export const yolink_api = mkPackage(
  nixRaw`pkgs.python2Packages.yolink-api`,
  "Library to interface with Yolink",
);

/**
 * Python library for YouLess sensors
 */
export const youless_api = mkPackage(
  nixRaw`pkgs.python2Packages.youless-api`,
  "Python library for YouLess sensors",
);

/**
 * Command-line tool to download videos from YouTube.com and other sites
 */
export const youtube_dl = mkPackage(
  nixRaw`pkgs.python2Packages.youtube-dl`,
  "Command-line tool to download videos from YouTube.com and other sites",
);

/**
 * Command-line tool to download videos from YouTube.com and other sites
 */
export const youtube_dl_light = mkPackage(
  nixRaw`pkgs.python2Packages.youtube-dl-light`,
  "Command-line tool to download videos from YouTube.com and other sites",
);

/**
 * Tool for searching for youtube videos to avoid using their heavily rate-limited API
 */
export const youtube_search = mkPackage(
  nixRaw`pkgs.python2Packages.youtube-search`,
  "Tool for searching for youtube videos to avoid using their heavily rate-limited API",
);

/**
 * Search for YouTube videos, channels & playlists & get video information using link without YouTube Data API
 */
export const youtube_search_python = mkPackage(
  nixRaw`pkgs.python2Packages.youtube-search-python`,
  "Search for YouTube videos, channels & playlists & get video information using link without YouTube Data API",
);

/**
 * Python API which allows you to get the transcripts/subtitles for a given YouTube video
 */
export const youtube_transcript_api = mkPackage(
  nixRaw`pkgs.python2Packages.youtube-transcript-api`,
  "Python API which allows you to get the transcripts/subtitles for a given YouTube video",
);

/**
 * The python WhatsApp library
 */
export const yowsup = mkPackage(
  nixRaw`pkgs.python2Packages.yowsup`,
  "The python WhatsApp library",
);

/**
 * Database schema migration tool
 */
export const yoyo_migrations = mkPackage(
  nixRaw`pkgs.python2Packages.yoyo-migrations`,
  "Database schema migration tool",
);

/**
 * WebSocket Connector for Ypy
 */
export const ypy_websocket = mkPackage(
  nixRaw`pkgs.python2Packages.ypy-websocket`,
  "WebSocket Connector for Ypy",
);

/**
 * Command-line YAML/XML/TOML processor - jq wrapper for YAML, XML, TOML documents
 */
export const yq = mkPackage(
  nixRaw`pkgs.python2Packages.yq`,
  "Command-line YAML/XML/TOML processor - jq wrapper for YAML, XML, TOML documents",
);

/**
 * Command-line tool to download videos from YouTube.com and other sites (youtube-dl fork)
 */
export const yt_dlp = mkPackage(
  nixRaw`pkgs.python2Packages.yt-dlp`,
  "Command-line tool to download videos from YouTube.com and other sites (youtube-dl fork)",
);

/**
 * Command-line tool to download videos from YouTube.com and other sites (youtube-dl fork)
 */
export const yt_dlp_light = mkPackage(
  nixRaw`pkgs.python2Packages.yt-dlp-light`,
  "Command-line tool to download videos from YouTube.com and other sites (youtube-dl fork)",
);

/**
 * YAML template engine with Python expressions
 */
export const yte = mkPackage(
  nixRaw`pkgs.python2Packages.yte`,
  "YAML template engine with Python expressions",
);

/**
 * Python API for YouTube Music
 */
export const ytmusicapi = mkPackage(
  nixRaw`pkgs.python2Packages.ytmusicapi`,
  "Python API for YouTube Music",
);

/**
 * Python code to talk to YubiKeys
 */
export const yubico = mkPackage(
  nixRaw`pkgs.python2Packages.yubico`,
  "Python code to talk to YubiKeys",
);

/**
 * Verifying Yubico OTPs based on the validation protocol version 2.0
 */
export const yubico_client = mkPackage(
  nixRaw`pkgs.python2Packages.yubico-client`,
  "Verifying Yubico OTPs based on the validation protocol version 2.0",
);

/**
 * A high-performance theorem prover and SMT solver
 */
export const z3 = mkPackage(
  nixRaw`pkgs.python2Packages.z3`,
  "A high-performance theorem prover and SMT solver",
);

/**
 * Find newer package versions on PyPI
 */
export const z3c_checkversions = mkPackage(
  nixRaw`pkgs.python2Packages.z3c-checkversions`,
  "Find newer package versions on PyPI",
);

/**
 * Python wrapper for getting allergen concentration data from Żadnego Ale servers
 */
export const zadnegoale = mkPackage(
  nixRaw`pkgs.python2Packages.zadnegoale`,
  "Python wrapper for getting allergen concentration data from Żadnego Ale servers",
);

/**
 * Library to read weather data from ZAMG Austria
 */
export const zamg = mkPackage(
  nixRaw`pkgs.python2Packages.zamg`,
  "Library to read weather data from ZAMG Austria",
);

/**
 * An implementation of chunked, compressed, N-dimensional arrays for Python
 */
export const zarr = mkPackage(
  nixRaw`pkgs.python2Packages.zarr`,
  "An implementation of chunked, compressed, N-dimensional arrays for Python",
);

/**
 * A software build and configuration system
 */
export const zc_buildout = mkPackage(
  nixRaw`pkgs.python2Packages.zc-buildout`,
  "A software build and configuration system",
);

/**
 * Inter-process locks
 */
export const zc_lockfile = mkPackage(
  nixRaw`pkgs.python2Packages.zc_lockfile`,
  "Inter-process locks",
);

/**
 * Structured Configuration Library
 */
export const zconfig = mkPackage(
  nixRaw`pkgs.python2Packages.zconfig`,
  "Structured Configuration Library",
);

/**
 * Configuration system which takes advantage of both argparse and yacs
 */
export const zcs = mkPackage(
  nixRaw`pkgs.python2Packages.zcs`,
  "Configuration system which takes advantage of both argparse and yacs",
);

/**
 * A daemon process control library and tools for Unix-based systems
 */
export const zdaemon = mkPackage(
  nixRaw`pkgs.python2Packages.zdaemon`,
  "A daemon process control library and tools for Unix-based systems",
);

/**
 * Python SOAP client
 */
export const zeep = mkPackage(
  nixRaw`pkgs.python2Packages.zeep`,
  "Python SOAP client",
);

/**
 * A service which logs the users’s activities and events
 */
export const zeitgeist = mkPackage(
  nixRaw`pkgs.python2Packages.zeitgeist`,
  "A service which logs the users’s activities and events",
);

/**
 * A set of wrappers for Zephyr Scale (TM4J) REST API
 */
export const zephyr_python_api = mkPackage(
  nixRaw`pkgs.python2Packages.zephyr-python-api`,
  "A set of wrappers for Zephyr Scale (TM4J) REST API",
);

/**
 * Comprehensive RPC framework with support for Python, C++, .NET, Java, JavaScript and more.
 */
export const zeroc_ice = mkPackage(
  nixRaw`pkgs.python2Packages.zeroc-ice`,
  "Comprehensive RPC framework with support for Python, C++, .NET, Java, JavaScript and more.",
);

/**
 * Python implementation of multicast DNS service discovery
 */
export const zeroconf = mkPackage(
  nixRaw`pkgs.python2Packages.zeroconf`,
  "Python implementation of multicast DNS service discovery",
);

/**
 * An easy to use, intuitive, and cross-language RPC
 */
export const zerorpc = mkPackage(
  nixRaw`pkgs.python2Packages.zerorpc`,
  "An easy to use, intuitive, and cross-language RPC",
);

/**
 * Zimmermann's Extensible Tools for Unified Project setups
 */
export const zetup = mkPackage(
  nixRaw`pkgs.python2Packages.zetup`,
  "Zimmermann's Extensible Tools for Unified Project setups",
);

/**
 * Python module to interact with Zeversolar inverters
 */
export const zeversolarlocal = mkPackage(
  nixRaw`pkgs.python2Packages.zeversolarlocal`,
  "Python module to interact with Zeversolar inverters",
);

/**
 * Zfec, a fast erasure codec which can be used with the command-line, C, Python, or Haskell
 */
export const zfec = mkPackage(
  nixRaw`pkgs.python2Packages.zfec`,
  "Zfec, a fast erasure codec which can be used with the command-line, C, Python, or Haskell",
);

/**
 * ZHA Device Handlers are custom quirks implementations for Zigpy
 */
export const zha_quirks = mkPackage(
  nixRaw`pkgs.python2Packages.zha-quirks`,
  "ZHA Device Handlers are custom quirks implementations for Zigpy",
);

/**
 * Convert TTF/OTF font glyphs to SVG paths
 */
export const ziafont = mkPackage(
  nixRaw`pkgs.python2Packages.ziafont`,
  "Convert TTF/OTF font glyphs to SVG paths",
);

/**
 * Render MathML and LaTeX Math to SVG without Latex installation
 */
export const ziamath = mkPackage(
  nixRaw`pkgs.python2Packages.ziamath`,
  "Render MathML and LaTeX Math to SVG without Latex installation",
);

/**
 * Mutable mapping tools.
 */
export const zict = mkPackage(
  nixRaw`pkgs.python2Packages.zict`,
  "Mutable mapping tools.",
);

/**
 * Library implementing a ZigBee stack
 */
export const zigpy = mkPackage(
  nixRaw`pkgs.python2Packages.zigpy`,
  "Library implementing a ZigBee stack",
);

/**
 * Library which communicates with Texas Instruments CC2531 radios for zigpy
 */
export const zigpy_cc = mkPackage(
  nixRaw`pkgs.python2Packages.zigpy-cc`,
  "Library which communicates with Texas Instruments CC2531 radios for zigpy",
);

/**
 * Library which communicates with Deconz radios for zigpy
 */
export const zigpy_deconz = mkPackage(
  nixRaw`pkgs.python2Packages.zigpy-deconz`,
  "Library which communicates with Deconz radios for zigpy",
);

/**
 * A library which communicates with XBee radios for zigpy
 */
export const zigpy_xbee = mkPackage(
  nixRaw`pkgs.python2Packages.zigpy-xbee`,
  "A library which communicates with XBee radios for zigpy",
);

/**
 * Library which communicates with ZiGate radios for zigpy
 */
export const zigpy_zigate = mkPackage(
  nixRaw`pkgs.python2Packages.zigpy-zigate`,
  "Library which communicates with ZiGate radios for zigpy",
);

/**
 * Library for zigpy which communicates with TI ZNP radios
 */
export const zigpy_znp = mkPackage(
  nixRaw`pkgs.python2Packages.zigpy-znp`,
  "Library for zigpy which communicates with TI ZNP radios",
);

/**
 * Python import rewriter
 */
export const zimports = mkPackage(
  nixRaw`pkgs.python2Packages.zimports`,
  "Python import rewriter",
);

/**
 * A backwards-compatible improved zipfile class
 */
export const zipfile2 = mkPackage(
  nixRaw`pkgs.python2Packages.zipfile2`,
  "A backwards-compatible improved zipfile class",
);

/**
 * Pathlib-compatible object wrapper for zip files
 */
export const zipp = mkPackage(
  nixRaw`pkgs.python2Packages.zipp`,
  "Pathlib-compatible object wrapper for zip files",
);

/**
 * A zip archive generator
 */
export const zipstream = mkPackage(
  nixRaw`pkgs.python2Packages.zipstream`,
  "A zip archive generator",
);

/**
 * Like Python's ZipFile module, except it works as a generator that provides the file in many small chunks
 */
export const zipstream_new = mkPackage(
  nixRaw`pkgs.python2Packages.zipstream-new`,
  "Like Python's ZipFile module, except it works as a generator that provides the file in many small chunks",
);

/**
 * Library to generate streamable zip files
 */
export const zipstream_ng = mkPackage(
  nixRaw`pkgs.python2Packages.zipstream-ng`,
  "Library to generate streamable zip files",
);

/**
 * A loose python wrapper around the ZoneMinder REST API
 */
export const zm_py = mkPackage(
  nixRaw`pkgs.python2Packages.zm-py`,
  "A loose python wrapper around the ZoneMinder REST API",
);

/**
 * Zope Object Database: object database and persistence
 */
export const zodb = mkPackage(
  nixRaw`pkgs.python2Packages.zodb`,
  "Zope Object Database: object database and persistence",
);

/**
 * Fork of Python's pickle module to work with ZODB
 */
export const zodbpickle = mkPackage(
  nixRaw`pkgs.python2Packages.zodbpickle`,
  "Fork of Python's pickle module to work with ZODB",
);

/**
 * Method and property caching decorators
 */
export const zope_cachedescriptors = mkPackage(
  nixRaw`pkgs.python2Packages.zope-cachedescriptors`,
  "Method and property caching decorators",
);

/**
 * Zope Component Architecture
 */
export const zope_component = mkPackage(
  nixRaw`pkgs.python2Packages.zope-component`,
  "Zope Component Architecture",
);

/**
 * Zope Configuration Markup Language (ZCML)
 */
export const zope_configuration = mkPackage(
  nixRaw`pkgs.python2Packages.zope_configuration`,
  "Zope Configuration Markup Language (ZCML)",
);

/**
 * A utility module for content-type (MIME type) handling
 */
export const zope_contenttype = mkPackage(
  nixRaw`pkgs.python2Packages.zope-contenttype`,
  "A utility module for content-type (MIME type) handling",
);

export const zope_copy = mkPackage(
  nixRaw`pkgs.python2Packages.zope_copy`,
  "",
);

/**
 * Allows you to perform imports names that will only be resolved when used in the code
 */
export const zope_deferredimport = mkPackage(
  nixRaw`pkgs.python2Packages.zope-deferredimport`,
  "Allows you to perform imports names that will only be resolved when used in the code",
);

/**
 * Zope Deprecation Infrastructure
 */
export const zope_deprecation = mkPackage(
  nixRaw`pkgs.python2Packages.zope-deprecation`,
  "Zope Deprecation Infrastructure",
);

/**
 * Resolver for Python dotted names
 */
export const zope_dottedname = mkPackage(
  nixRaw`pkgs.python2Packages.zope_dottedname`,
  "Resolver for Python dotted names",
);

/**
 * An event publishing system
 */
export const zope_event = mkPackage(
  nixRaw`pkgs.python2Packages.zope_event`,
  "An event publishing system",
);

/**
 * Exception interfaces and implementations
 */
export const zope_exceptions = mkPackage(
  nixRaw`pkgs.python2Packages.zope_exceptions`,
  "Exception interfaces and implementations",
);

/**
 * File-system Representation Interfaces
 */
export const zope_filerepresentation = mkPackage(
  nixRaw`pkgs.python2Packages.zope_filerepresentation`,
  "File-system Representation Interfaces",
);

/**
 * Supports the efficient creation of “hookable” objects
 */
export const zope_hookable = mkPackage(
  nixRaw`pkgs.python2Packages.zope-hookable`,
  "Supports the efficient creation of “hookable” objects",
);

/**
 * Message Identifiers for internationalization
 */
export const zope_i18nmessageid = mkPackage(
  nixRaw`pkgs.python2Packages.zope-i18nmessageid`,
  "Message Identifiers for internationalization",
);

/**
 * Zope.Interface
 */
export const zope_interface = mkPackage(
  nixRaw`pkgs.python2Packages.zope_interface`,
  "Zope.Interface",
);

/**
 * Object life-cycle events
 */
export const zope_lifecycleevent = mkPackage(
  nixRaw`pkgs.python2Packages.zope-lifecycleevent`,
  "Object life-cycle events",
);

/**
 * Zope Location
 */
export const zope_location = mkPackage(
  nixRaw`pkgs.python2Packages.zope_location`,
  "Zope Location",
);

/**
 * Generic Transparent Proxies
 */
export const zope_proxy = mkPackage(
  nixRaw`pkgs.python2Packages.zope-proxy`,
  "Generic Transparent Proxies",
);

/**
 * zope.interface extension for defining data schemas
 */
export const zope_schema = mkPackage(
  nixRaw`pkgs.python2Packages.zope_schema`,
  "zope.interface extension for defining data schemas",
);

/**
 * Interfaces and simple adapter that give the size of an object
 */
export const zope_size = mkPackage(
  nixRaw`pkgs.python2Packages.zope_size`,
  "Interfaces and simple adapter that give the size of an object",
);

/**
 * Programmable browser for functional black-box tests
 */
export const zope_testbrowser = mkPackage(
  nixRaw`pkgs.python2Packages.zope-testbrowser`,
  "Programmable browser for functional black-box tests",
);

/**
 * Zope testing helpers
 */
export const zope_testing = mkPackage(
  nixRaw`pkgs.python2Packages.zope_testing`,
  "Zope testing helpers",
);

/**
 * A flexible test runner with layer support
 */
export const zope_testrunner = mkPackage(
  nixRaw`pkgs.python2Packages.zope_testrunner`,
  "A flexible test runner with layer support",
);

/**
 * cPython bindings for zopfli
 */
export const zopfli = mkPackage(
  nixRaw`pkgs.python2Packages.zopfli`,
  "cPython bindings for zopfli",
);

/**
 * zstandard bindings for Python
 */
export const zstandard = mkPackage(
  nixRaw`pkgs.python2Packages.zstandard`,
  "zstandard bindings for Python",
);

/**
 * Simple python bindings to Yann Collet ZSTD compression library
 */
export const zstd = mkPackage(
  nixRaw`pkgs.python2Packages.zstd`,
  "Simple python bindings to Yann Collet ZSTD compression library",
);

/**
 * Bindings for the Zulip message API
 */
export const zulip = mkPackage(
  nixRaw`pkgs.python2Packages.zulip`,
  "Bindings for the Zulip message API",
);

/**
 * Python wrapper for zwave-js-server
 */
export const zwave_js_server_python = mkPackage(
  nixRaw`pkgs.python2Packages.zwave-js-server-python`,
  "Python wrapper for zwave-js-server",
);

/**
 * Library to connect to a ZWave-Me instance
 */
export const zwave_me_ws = mkPackage(
  nixRaw`pkgs.python2Packages.zwave-me-ws`,
  "Library to connect to a ZWave-Me instance",
);

/**
 * Python implementation of Dropbox's realistic password strength estimator
 */
export const zxcvbn = mkPackage(
  nixRaw`pkgs.python2Packages.zxcvbn`,
  "Python implementation of Dropbox's realistic password strength estimator",
);

/**
 * C++ port of zxing (a Java barcode image processing library)
 */
export const zxing_cpp = mkPackage(
  nixRaw`pkgs.python2Packages.zxing_cpp`,
  "C++ port of zxing (a Java barcode image processing library)",
);
