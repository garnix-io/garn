import { mkPackage } from "../../package.ts";
import { nixRaw } from "../../nix.ts";

/**
 * A set of ambisonics ladspa plugins
 */
export const AMB_plugins = mkPackage(
  nixRaw`pkgs.AMB-plugins`,
  "A set of ambisonics ladspa plugins",
);

/**
 * Application with primary purpose of idling Steam cards from multiple accounts simultaneously
 */
export const ArchiSteamFarm = mkPackage(
  nixRaw`pkgs.ArchiSteamFarm`,
  "Application with primary purpose of idling Steam cards from multiple accounts simultaneously",
);

/**
 * Authentication software for the German ID card
 */
export const AusweisApp2 = mkPackage(
  nixRaw`pkgs.AusweisApp2`,
  "Authentication software for the German ID card",
);

/**
 * Yet another mod installer for Beat Saber, heavily inspired by ModAssistant
 */
export const BeatSaberModManager = mkPackage(
  nixRaw`pkgs.BeatSaberModManager`,
  "Yet another mod installer for Beat Saber, heavily inspired by ModAssistant",
);

/**
 * Physical modelling signal processing for analog tape recording. LV2, VST3 and standalone
 */
export const CHOWTapeModel = mkPackage(
  nixRaw`pkgs.CHOWTapeModel`,
  "Physical modelling signal processing for analog tape recording. LV2, VST3 and standalone",
);

/**
 * Digital emulation of the Klon Centaur guitar pedal using RNNs, Wave Digital Filters, and more
 */
export const ChowCentaur = mkPackage(
  nixRaw`pkgs.ChowCentaur`,
  "Digital emulation of the Klon Centaur guitar pedal using RNNs, Wave Digital Filters, and more",
);

/**
 * Kick synthesizer based on old-school drum machine circuits
 */
export const ChowKick = mkPackage(
  nixRaw`pkgs.ChowKick`,
  "Kick synthesizer based on old-school drum machine circuits",
);

/**
 * Phaser effect based loosely on the Schulte Compact Phasing 'A'
 */
export const ChowPhaser = mkPackage(
  nixRaw`pkgs.ChowPhaser`,
  "Phaser effect based loosely on the Schulte Compact Phasing 'A'",
);

/**
 * COIN-OR lightweight API for COIN-OR libraries CLP, CBC, and CGL
 */
export const CoinMP = mkPackage(
  nixRaw`pkgs.CoinMP`,
  "COIN-OR lightweight API for COIN-OR libraries CLP, CBC, and CGL",
);

/**
 * A SOAP interface and client for Disnix
 */
export const DisnixWebService = mkPackage(
  nixRaw`pkgs.DisnixWebService`,
  "A SOAP interface and client for Disnix",
);

/**
 * Library for working with MINC files
 */
export const EBTKS = mkPackage(
  nixRaw`pkgs.EBTKS`,
  "Library for working with MINC files",
);

/**
 * Open source bridge simulator based on Artemis
 */
export const EmptyEpsilon = mkPackage(
  nixRaw`pkgs.EmptyEpsilon`,
  "Open source bridge simulator based on Artemis",
);

/**
 * a four-band parametric equaliser, which has the nice property of being stable even while parameters are being changed
 */
export const FIL_plugins = mkPackage(
  nixRaw`pkgs.FIL-plugins`,
  "a four-band parametric equaliser, which has the nice property of being stable even while parameters are being changed",
);

/**
 * Pythonic remote execution
 */
export const Fabric = mkPackage(
  nixRaw`pkgs.Fabric`,
  "Pythonic remote execution",
);

/**
 * Hentai@Home is an open-source P2P gallery distribution system which reduces the load on the E-Hentai Galleries
 */
export const HentaiAtHome = mkPackage(
  nixRaw`pkgs.HentaiAtHome`,
  "Hentai@Home is an open-source P2P gallery distribution system which reduces the load on the E-Hentai Galleries",
);

/**
 * Software for rapid LiDAR processing
 */
export const LAStools = mkPackage(
  nixRaw`pkgs.LAStools`,
  "Software for rapid LiDAR processing",
);

/**
 * Turn quickly bulky LAS files into compact LAZ files without information loss
 */
export const LASzip = mkPackage(
  nixRaw`pkgs.LASzip`,
  "Turn quickly bulky LAS files into compact LAZ files without information loss",
);

/**
 * Turn quickly bulky LAS files into compact LAZ files without information loss
 */
export const LASzip2 = mkPackage(
  nixRaw`pkgs.LASzip2`,
  "Turn quickly bulky LAS files into compact LAZ files without information loss",
);

/**
 * A pattern-based arpeggio generator plugin.
 */
export const LibreArp = mkPackage(
  nixRaw`pkgs.LibreArp`,
  "A pattern-based arpeggio generator plugin.",
);

/**
 * A pattern-based arpeggio generator plugin.
 */
export const LibreArp_lv2 = mkPackage(
  nixRaw`pkgs.LibreArp-lv2`,
  "A pattern-based arpeggio generator plugin.",
);

/**
 * A literate programming tool for any language
 */
export const Literate = mkPackage(
  nixRaw`pkgs.Literate`,
  "A literate programming tool for any language",
);

/**
 * A small MIDI visualizer tool, using OpenGL
 */
export const MIDIVisualizer = mkPackage(
  nixRaw`pkgs.MIDIVisualizer`,
  "A small MIDI visualizer tool, using OpenGL",
);

/**
 * Creates MIDI tracks for a soloist to perform over from a user supplied file containing chords
 */
export const MMA = mkPackage(
  nixRaw`pkgs.MMA`,
  "Creates MIDI tracks for a soloist to perform over from a user supplied file containing chords",
);

/**
 * Parses .plist files
 */
export const NSPlist = mkPackage(
  nixRaw`pkgs.NSPlist`,
  "Parses .plist files",
);

/**
 * Software for reviewing and exploring data produced by CPAP and related machines used in the treatment of sleep apnea
 */
export const OSCAR = mkPackage(
  nixRaw`pkgs.OSCAR`,
  "Software for reviewing and exploring data produced by CPAP and related machines used in the treatment of sleep apnea",
);

/**
 * Sample UEFI firmware for QEMU and KVM
 */
export const OVMF = mkPackage(
  nixRaw`pkgs.OVMF`,
  "Sample UEFI firmware for QEMU and KVM",
);

/**
 * Sample UEFI firmware for QEMU and KVM
 */
export const OVMFFull = mkPackage(
  nixRaw`pkgs.OVMFFull`,
  "Sample UEFI firmware for QEMU and KVM",
);

/**
 * ePub XHTML Visual Editor
 */
export const PageEdit = mkPackage(
  nixRaw`pkgs.PageEdit`,
  "ePub XHTML Visual Editor",
);

/**
 * CPP bindings for Plist
 */
export const PlistCpp = mkPackage(
  nixRaw`pkgs.PlistCpp`,
  "CPP bindings for Plist",
);

        /**
         * A C++ library for Quadratic Programming which implements the
Goldfarb-Idnani active-set dual method.

         */
export const QuadProgpp = mkPackage(
  nixRaw`pkgs.QuadProgpp`,
  "A C++ library for Quadratic Programming which implements the\nGoldfarb-Idnani active-set dual method.\n",
);

/**
 * Free software environment for statistical computing and graphics
 */
export const R = mkPackage(
  nixRaw`pkgs.R`,
  "Free software environment for statistical computing and graphics",
);

/**
 * A cross-platform multimedia library
 */
export const SDL = mkPackage(
  nixRaw`pkgs.SDL`,
  "A cross-platform multimedia library",
);

/**
 * A cross-platform multimedia library
 */
export const SDL2 = mkPackage(
  nixRaw`pkgs.SDL2`,
  "A cross-platform multimedia library",
);

/**
 * SDL graphics drawing primitives and support functions
 */
export const SDL2_gfx = mkPackage(
  nixRaw`pkgs.SDL2_gfx`,
  "SDL graphics drawing primitives and support functions",
);

/**
 * SDL image library
 */
export const SDL2_image = mkPackage(
  nixRaw`pkgs.SDL2_image`,
  "SDL image library",
);

/**
 * SDL image library
 */
export const SDL2_image_2_0_5 = mkPackage(
  nixRaw`pkgs.SDL2_image_2_0_5`,
  "SDL image library",
);

/**
 * SDL multi-channel audio mixer library
 */
export const SDL2_mixer = mkPackage(
  nixRaw`pkgs.SDL2_mixer`,
  "SDL multi-channel audio mixer library",
);

/**
 * SDL multi-channel audio mixer library
 */
export const SDL2_mixer_2_0 = mkPackage(
  nixRaw`pkgs.SDL2_mixer_2_0`,
  "SDL multi-channel audio mixer library",
);

/**
 * SDL multiplatform networking library
 */
export const SDL2_net = mkPackage(
  nixRaw`pkgs.SDL2_net`,
  "SDL multiplatform networking library",
);

/**
 * SDL2 sound library
 */
export const SDL2_sound = mkPackage(
  nixRaw`pkgs.SDL2_sound`,
  "SDL2 sound library",
);

/**
 * Support for TrueType (.ttf) font files with Simple Directmedia Layer
 */
export const SDL2_ttf = mkPackage(
  nixRaw`pkgs.SDL2_ttf`,
  "Support for TrueType (.ttf) font files with Simple Directmedia Layer",
);

/**
 * Connects the Pango rendering engine to SDL
 */
export const SDL_Pango = mkPackage(
  nixRaw`pkgs.SDL_Pango`,
  "Connects the Pango rendering engine to SDL",
);

/**
 * Audio decoding, resampling and mixing library for SDL
 */
export const SDL_audiolib = mkPackage(
  nixRaw`pkgs.SDL_audiolib`,
  "Audio decoding, resampling and mixing library for SDL",
);

/**
 * A cross-platform multimedia library
 */
export const SDL_classic = mkPackage(
  nixRaw`pkgs.SDL_classic`,
  "A cross-platform multimedia library",
);

/**
 * A cross-platform multimedia library - build SDL 1.2 applications against 2.0
 */
export const SDL_compat = mkPackage(
  nixRaw`pkgs.SDL_compat`,
  "A cross-platform multimedia library - build SDL 1.2 applications against 2.0",
);

/**
 * SDL graphics drawing primitives and support functions
 */
export const SDL_gfx = mkPackage(
  nixRaw`pkgs.SDL_gfx`,
  "SDL graphics drawing primitives and support functions",
);

/**
 * A library for high-performance, modern 2D graphics with SDL written in C
 */
export const SDL_gpu = mkPackage(
  nixRaw`pkgs.SDL_gpu`,
  "A library for high-performance, modern 2D graphics with SDL written in C",
);

/**
 * SDL image library
 */
export const SDL_image = mkPackage(
  nixRaw`pkgs.SDL_image`,
  "SDL image library",
);

/**
 * SDL multi-channel audio mixer library
 */
export const SDL_mixer = mkPackage(
  nixRaw`pkgs.SDL_mixer`,
  "SDL multi-channel audio mixer library",
);

/**
 * SDL networking library
 */
export const SDL_net = mkPackage(
  nixRaw`pkgs.SDL_net`,
  "SDL networking library",
);

/**
 * A cross-platform multimedia library, that supports sixel graphics on consoles
 */
export const SDL_sixel = mkPackage(
  nixRaw`pkgs.SDL_sixel`,
  "A cross-platform multimedia library, that supports sixel graphics on consoles",
);

/**
 * SDL sound library
 */
export const SDL_sound = mkPackage(
  nixRaw`pkgs.SDL_sound`,
  "SDL sound library",
);

/**
 * Stretch Functions For SDL
 */
export const SDL_stretch = mkPackage(
  nixRaw`pkgs.SDL_stretch`,
  "Stretch Functions For SDL",
);

/**
 * SDL TrueType library
 */
export const SDL_ttf = mkPackage(
  nixRaw`pkgs.SDL_ttf`,
  "SDL TrueType library",
);

/**
 * Implementation of min-entropy assessment methods included in Special Publication 800-90B.
 */
export const SP800_90B_EntropyAssessment = mkPackage(
  nixRaw`pkgs.SP800-90B_EntropyAssessment`,
  "Implementation of min-entropy assessment methods included in Special Publication 800-90B.",
);

/**
 * St. Petersburg genome assembler: assembly toolkit containing various assembly pipelines
 */
export const SPAdes = mkPackage(
  nixRaw`pkgs.SPAdes`,
  "St. Petersburg genome assembler: assembly toolkit containing various assembly pipelines",
);

/**
 * Export Skype history to HTML
 */
export const SkypeExport = mkPackage(
  nixRaw`pkgs.SkypeExport`,
  "Export Skype history to HTML",
);

/**
 * An open-source project that can work with Blizzard MPQ archives
 */
export const StormLib = mkPackage(
  nixRaw`pkgs.StormLib`,
  "An open-source project that can work with Blizzard MPQ archives",
);

/**
 * Sylk WebRTC client
 */
export const Sylk = mkPackage(
  nixRaw`pkgs.Sylk`,
  "Sylk WebRTC client",
);

/**
 * 3D widget set based on the Athena Widget set
 */
export const Xaw3d = mkPackage(
  nixRaw`pkgs.Xaw3d`,
  "3D widget set based on the Athena Widget set",
);

/**
 * ASCII-ART bloody 2D action deathmatch-like game
 */
export const _0verkill = mkPackage(
  nixRaw`pkgs._0verkill`,
  "ASCII-ART bloody 2D action deathmatch-like game",
);

/**
 * A colorful, configurable xxd
 */
export const _0x = mkPackage(
  nixRaw`pkgs._0x`,
  "A colorful, configurable xxd",
);

/**
 * Master of Orion (1993) game engine recreation
 */
export const _1oom = mkPackage(
  nixRaw`pkgs._1oom`,
  "Master of Orion (1993) game engine recreation",
);

/**
 * 1Password command-line tool
 */
export const _1password = mkPackage(
  nixRaw`pkgs._1password`,
  "1Password command-line tool",
);

/**
 * Multi-platform password manager
 */
export const _1password_gui = mkPackage(
  nixRaw`pkgs._1password-gui`,
  "Multi-platform password manager",
);

/**
 * Multi-platform password manager
 */
export const _1password_gui_beta = mkPackage(
  nixRaw`pkgs._1password-gui-beta`,
  "Multi-platform password manager",
);

/**
 * The game 2048 for your Linux terminal
 */
export const _2048_cli = mkPackage(
  nixRaw`pkgs._2048-cli`,
  "The game 2048 for your Linux terminal",
);

/**
 * The game 2048 for your Linux terminal
 */
export const _2048_cli_curses = mkPackage(
  nixRaw`pkgs._2048-cli-curses`,
  "The game 2048 for your Linux terminal",
);

/**
 * The game 2048 for your Linux terminal
 */
export const _2048_cli_terminal = mkPackage(
  nixRaw`pkgs._2048-cli-terminal`,
  "The game 2048 for your Linux terminal",
);

/**
 * Animated console version of the 2048 game
 */
export const _2048_in_terminal = mkPackage(
  nixRaw`pkgs._2048-in-terminal`,
  "Animated console version of the 2048 game",
);

/**
 * A steampunk-themed strategy game where you have to manage a steam supply network
 */
export const _20kly = mkPackage(
  nixRaw`pkgs._20kly`,
  "A steampunk-themed strategy game where you have to manage a steam supply network",
);

/**
 * A fast floating WM written over the XCB library and derived from mcwm
 */
export const _2bwm = mkPackage(
  nixRaw`pkgs._2bwm`,
  "A fast floating WM written over the XCB library and derived from mcwm",
);

/**
 * Monospaced font based on IBM 3270 terminals
 */
export const _3270font = mkPackage(
  nixRaw`pkgs._3270font`,
  "Monospaced font based on IBM 3270 terminals",
);

/**
 * Enterprise-class Open Source LDAP server for Linux
 */
export const _389_ds_base = mkPackage(
  nixRaw`pkgs._389-ds-base`,
  "Enterprise-class Open Source LDAP server for Linux",
);

/**
 * Trello interactive CLI on terminal
 */
export const _3llo = mkPackage(
  nixRaw`pkgs._3llo`,
  "Trello interactive CLI on terminal",
);

/**
 * Terminal multiplexer inspired by i3
 */
export const _3mux = mkPackage(
  nixRaw`pkgs._3mux`,
  "Terminal multiplexer inspired by i3",
);

/**
 * Tiny free proxy server
 */
export const _3proxy = mkPackage(
  nixRaw`pkgs._3proxy`,
  "Tiny free proxy server",
);

/**
 * A portable Forth compiler
 */
export const _4th = mkPackage(
  nixRaw`pkgs._4th`,
  "A portable Forth compiler",
);

/**
 * A software package for algebraic, geometric and combinatorial problems on linear spaces
 */
export const _4ti2 = mkPackage(
  nixRaw`pkgs._4ti2`,
  "A software package for algebraic, geometric and combinatorial problems on linear spaces",
);

/**
 * A suite of browser-based tools for players and DMs of D&D 5e
 */
export const _5etools = mkPackage(
  nixRaw`pkgs._5etools`,
  "A suite of browser-based tools for players and DMs of D&D 5e",
);

/**
 * Tunnelling for application that don't speak IPv6
 */
export const _6tunnel = mkPackage(
  nixRaw`pkgs._6tunnel`,
  "Tunnelling for application that don't speak IPv6",
);

/**
 * GPL release of the Seven Kingdoms with multiplayer (available only on x86 platforms)
 */
export const _7kaa = mkPackage(
  nixRaw`pkgs._7kaa`,
  "GPL release of the Seven Kingdoms with multiplayer (available only on x86 platforms)",
);

/**
 * Command line archiver utility
 */
export const _7zz = mkPackage(
  nixRaw`pkgs._7zz`,
  "Command line archiver utility",
);

/**
 * Emulator of x86-based machines based on PCem.
 */
export const _86Box = mkPackage(
  nixRaw`pkgs._86Box`,
  "Emulator of x86-based machines based on PCem.",
);

/**
 * A silly speed painting game
 */
export const _90secondportraits = mkPackage(
  nixRaw`pkgs._90secondportraits`,
  "A silly speed painting game",
);

/**
 * A tool to modify Intel 800/900 video BIOS
 */
export const _915resolution = mkPackage(
  nixRaw`pkgs._915resolution`,
  "A tool to modify Intel 800/900 video BIOS",
);

/**
 * 9base is a port of various original Plan 9 tools for Unix, based on plan9port
 */
export const _9base = mkPackage(
  nixRaw`pkgs._9base`,
  "9base is a port of various original Plan 9 tools for Unix, based on plan9port",
);

/**
 * Simple X11 menu program for running commands
 */
export const _9menu = mkPackage(
  nixRaw`pkgs._9menu`,
  "Simple X11 menu program for running commands",
);

/**
 * FUSE-based client of the 9P network filesystem protocol
 */
export const _9pfs = mkPackage(
  nixRaw`pkgs._9pfs`,
  "FUSE-based client of the 9P network filesystem protocol",
);

/**
 * mount.9ptls mount helper
 */
export const _9ptls = mkPackage(
  nixRaw`pkgs._9ptls`,
  "mount.9ptls mount helper",
);

/**
 * Daemon for exposing legacy ALSA sequencer applications in JACK MIDI system
 */
export const a2jmidid = mkPackage(
  nixRaw`pkgs.a2jmidid`,
  "Daemon for exposing legacy ALSA sequencer applications in JACK MIDI system",
);

/**
 * An Anything to PostScript converter and pretty-printer
 */
export const a2ps = mkPackage(
  nixRaw`pkgs.a2ps`,
  "An Anything to PostScript converter and pretty-printer",
);

/**
 * A dynamic terminal window manager
 */
export const a4 = mkPackage(
  nixRaw`pkgs.a4`,
  "A dynamic terminal window manager",
);

/**
 * ATSC A/52 stream decoder
 */
export const a52dec = mkPackage(
  nixRaw`pkgs.a52dec`,
  "ATSC A/52 stream decoder",
);

/**
 * Terminal viewer for 3a format
 */
export const aaa = mkPackage(
  nixRaw`pkgs.aaa`,
  "Terminal viewer for 3a format",
);

/**
 * A nonlinear 2D puzzle platformer taking place in impossible spaces
 */
export const aaaaxy = mkPackage(
  nixRaw`pkgs.aaaaxy`,
  "A nonlinear 2D puzzle platformer taking place in impossible spaces",
);

/**
 * ReplayGain for AAC files
 */
export const aacgain = mkPackage(
  nixRaw`pkgs.aacgain`,
  "ReplayGain for AAC files",
);

/**
 * ASCII art graphics library
 */
export const aalib = mkPackage(
  nixRaw`pkgs.aalib`,
  "ASCII art graphics library",
);

/**
 * Free and open source automatic photo adjusting software
 */
export const aaphoto = mkPackage(
  nixRaw`pkgs.aaphoto`,
  "Free and open source automatic photo adjusting software",
);

/**
 * A build tool that compiles and packages Android app's resources
 */
export const aapt = mkPackage(
  nixRaw`pkgs.aapt`,
  "A build tool that compiles and packages Android app's resources",
);

/**
 * A utility for decoding aarch64 ESR register values
 */
export const aarch64_esr_decoder = mkPackage(
  nixRaw`pkgs.aarch64-esr-decoder`,
  "A utility for decoding aarch64 ESR register values",
);

/**
 * Authoritative dns server for A/AAAA container records
 */
export const aardvark_dns = mkPackage(
  nixRaw`pkgs.aardvark-dns`,
  "Authoritative dns server for A/AAAA container records",
);

/**
 * Convert Audible's .aax filetype to MP3, FLAC, M4A, or OPUS
 */
export const aaxtomp3 = mkPackage(
  nixRaw`pkgs.aaxtomp3`,
  "Convert Audible's .aax filetype to MP3, FLAC, M4A, or OPUS",
);

/**
 * A discord client reimplementation, written in C++
 */
export const abaddon = mkPackage(
  nixRaw`pkgs.abaddon`,
  "A discord client reimplementation, written in C++",
);

/**
 * A retro arcade video game
 */
export const abbaye_des_morts = mkPackage(
  nixRaw`pkgs.abbaye-des-morts`,
  "A retro arcade video game",
);

/**
 * Shorten your strings using common abbreviations
 */
export const abbreviate = mkPackage(
  nixRaw`pkgs.abbreviate`,
  "Shorten your strings using common abbreviations",
);

/**
 * A tool for squential logic synthesis and formal verification
 */
export const abc_verifier = mkPackage(
  nixRaw`pkgs.abc-verifier`,
  "A tool for squential logic synthesis and formal verification",
);

/**
 * Command-line audio CD ripper
 */
export const abcde = mkPackage(
  nixRaw`pkgs.abcde`,
  "Command-line audio CD ripper",
);

/**
 * A JVM-based Common Lisp implementation
 */
export const abcl = mkPackage(
  nixRaw`pkgs.abcl`,
  "A JVM-based Common Lisp implementation",
);

/**
 * A command line program which converts ABC to music sheet in PostScript or SVG format
 */
export const abcm2ps = mkPackage(
  nixRaw`pkgs.abcm2ps`,
  "A command line program which converts ABC to music sheet in PostScript or SVG format",
);

/**
 * Utilities for converting between abc and MIDI
 */
export const abcmidi = mkPackage(
  nixRaw`pkgs.abcmidi`,
  "Utilities for converting between abc and MIDI",
);

/**
 * Allows programs to be run independently from its controlling terminal
 */
export const abduco = mkPackage(
  nixRaw`pkgs.abduco`,
  "Allows programs to be run independently from its controlling terminal",
);

/**
 * Interactive theorem prover
 */
export const abella = mkPackage(
  nixRaw`pkgs.abella`,
  "Interactive theorem prover",
);

/**
 * A tool for checking backward API/ABI compatibility of a C/C++ library
 */
export const abi_compliance_checker = mkPackage(
  nixRaw`pkgs.abi-compliance-checker`,
  "A tool for checking backward API/ABI compatibility of a C/C++ library",
);

/**
 * Dump ABI of an ELF object containing DWARF debug info
 */
export const abi_dumper = mkPackage(
  nixRaw`pkgs.abi-dumper`,
  "Dump ABI of an ELF object containing DWARF debug info",
);

/**
 * Word processing program, similar to Microsoft Word
 */
export const abiword = mkPackage(
  nixRaw`pkgs.abiword`,
  "Word processing program, similar to Microsoft Word",
);

/**
 * ABlog for blogging with Sphinx
 */
export const ablog = mkPackage(
  nixRaw`pkgs.ablog`,
  "ABlog for blogging with Sphinx",
);

/**
 * Text-based addressbook program designed to use with mutt mail client
 */
export const abook = mkPackage(
  nixRaw`pkgs.abook`,
  "Text-based addressbook program designed to use with mutt mail client",
);

/**
 * Manipulate Android Boot Images
 */
export const abootimg = mkPackage(
  nixRaw`pkgs.abootimg`,
  "Manipulate Android Boot Images",
);

/**
 * DAB/DAB+ radio application
 */
export const abracadabra = mkPackage(
  nixRaw`pkgs.abracadabra`,
  "DAB/DAB+ radio application",
);

/**
 * An open-source collection of C++ code designed to augment the C++ standard library
 */
export const abseil_cpp = mkPackage(
  nixRaw`pkgs.abseil-cpp`,
  "An open-source collection of C++ code designed to augment the C++ standard library",
);

/**
 * An open-source collection of C++ code designed to augment the C++ standard library
 */
export const abseil_cpp_202103 = mkPackage(
  nixRaw`pkgs.abseil-cpp_202103`,
  "An open-source collection of C++ code designed to augment the C++ standard library",
);

/**
 * An open-source collection of C++ code designed to augment the C++ standard library
 */
export const abseil_cpp_202206 = mkPackage(
  nixRaw`pkgs.abseil-cpp_202206`,
  "An open-source collection of C++ code designed to augment the C++ standard library",
);

/**
 * An open-source collection of C++ code designed to augment the C++ standard library
 */
export const abseil_cpp_202301 = mkPackage(
  nixRaw`pkgs.abseil-cpp_202301`,
  "An open-source collection of C++ code designed to augment the C++ standard library",
);

/**
 * An open-source collection of C++ code designed to augment the C++ standard library
 */
export const abseil_cpp_202308 = mkPackage(
  nixRaw`pkgs.abseil-cpp_202308`,
  "An open-source collection of C++ code designed to augment the C++ standard library",
);

/**
 * Alpine Linux build tools
 */
export const abuild = mkPackage(
  nixRaw`pkgs.abuild`,
  "Alpine Linux build tools",
);

/**
 * Side-scroller action game that pits you against ruthless alien killers
 */
export const abuse = mkPackage(
  nixRaw`pkgs.abuse`,
  "Side-scroller action game that pits you against ruthless alien killers",
);

/**
 * An architecture-level energy/area estimator for accelerator designs
 */
export const accelergy = mkPackage(
  nixRaw`pkgs.accelergy`,
  "An architecture-level energy/area estimator for accelerator designs",
);

/**
 * D-Bus interface for user account query and manipulation
 */
export const accountsservice = mkPackage(
  nixRaw`pkgs.accountsservice`,
  "D-Bus interface for user account query and manipulation",
);

/**
 * GNU Accounting Utilities, login and process accounting utilities
 */
export const acct = mkPackage(
  nixRaw`pkgs.acct`,
  "GNU Accounting Utilities, login and process accounting utilities",
);

/**
 * Program for computing the AccurateRip checksum of singletrack WAV files
 */
export const accuraterip_checksum = mkPackage(
  nixRaw`pkgs.accuraterip-checksum`,
  "Program for computing the AccurateRip checksum of singletrack WAV files",
);

/**
 * A command line interface and FUSE filesystem for Amazon Cloud Drive
 */
export const acd_cli = mkPackage(
  nixRaw`pkgs.acd-cli`,
  "A command line interface and FUSE filesystem for Amazon Cloud Drive",
);

/**
 * ADAPTIVE Communication Environment
 */
export const ace = mkPackage(
  nixRaw`pkgs.ace`,
  "ADAPTIVE Communication Environment",
);

/**
 * Solitaire games in X11
 */
export const ace_of_penguins = mkPackage(
  nixRaw`pkgs.ace-of-penguins`,
  "Solitaire games in X11",
);

/**
 * A toolkit for developing ACG signatures and lexicon
 */
export const acgtk = mkPackage(
  nixRaw`pkgs.acgtk`,
  "A toolkit for developing ACG signatures and lexicon",
);

/**
 * A grep-like tool tailored to working with large trees of source code
 */
export const ack = mkPackage(
  nixRaw`pkgs.ack`,
  "A grep-like tool tailored to working with large trees of source code",
);

/**
 * Library and tools for manipulating access control lists
 */
export const acl = mkPackage(
  nixRaw`pkgs.acl`,
  "Library and tools for manipulating access control lists",
);

/**
 * An interpreter and a prover for a Lisp dialect
 */
export const acl2 = mkPackage(
  nixRaw`pkgs.acl2`,
  "An interpreter and a prover for a Lisp dialect",
);

/**
 * An interpreter and a prover for a Lisp dialect
 */
export const acl2_minimal = mkPackage(
  nixRaw`pkgs.acl2-minimal`,
  "An interpreter and a prover for a Lisp dialect",
);

/**
 * ACL abuse swiss-knife
 */
export const acltoolkit = mkPackage(
  nixRaw`pkgs.acltoolkit`,
  "ACL abuse swiss-knife",
);

/**
 * A multi-platform cross assembler for 6502/6510/65816 CPUs
 */
export const acme = mkPackage(
  nixRaw`pkgs.acme`,
  "A multi-platform cross assembler for 6502/6510/65816 CPUs",
);

/**
 * Secure ACME/Let's Encrypt client
 */
export const acme_client = mkPackage(
  nixRaw`pkgs.acme-client`,
  "Secure ACME/Let's Encrypt client",
);

/**
 * Limited DNS server to handle ACME DNS challenges easily and securely
 */
export const acme_dns = mkPackage(
  nixRaw`pkgs.acme-dns`,
  "Limited DNS server to handle ACME DNS challenges easily and securely",
);

/**
 * A pure Unix shell script implementing ACME client protocol
 */
export const acme_sh = mkPackage(
  nixRaw`pkgs.acme-sh`,
  "A pure Unix shell script implementing ACME client protocol",
);

/**
 * A simple application deployment framework for Kubernetes
 */
export const acorn = mkPackage(
  nixRaw`pkgs.acorn`,
  "A simple application deployment framework for Kubernetes",
);

/**
 * A client to upload data to an AcousticBrainz server
 */
export const acousticbrainz_client = mkPackage(
  nixRaw`pkgs.acousticbrainz-client`,
  "A client to upload data to an AcousticBrainz server",
);

/**
 * Show battery status and other ACPI information
 */
export const acpi = mkPackage(
  nixRaw`pkgs.acpi`,
  "Show battery status and other ACPI information",
);

/**
 * Daemon extending acpid event handling capabilities.
 */
export const acpic = mkPackage(
  nixRaw`pkgs.acpic`,
  "Daemon extending acpid event handling capabilities.",
);

/**
 * ACPICA Tools
 */
export const acpica_tools = mkPackage(
  nixRaw`pkgs.acpica-tools`,
  "ACPICA Tools",
);

/**
 * A daemon for delivering ACPI events to userspace programs
 */
export const acpid = mkPackage(
  nixRaw`pkgs.acpid`,
  "A daemon for delivering ACPI events to userspace programs",
);

/**
 * Walk through all ACPI tables with their addresses
 */
export const acpidump_all = mkPackage(
  nixRaw`pkgs.acpidump-all`,
  "Walk through all ACPI tables with their addresses",
);

/**
 * ACPI backlight control
 */
export const acpilight = mkPackage(
  nixRaw`pkgs.acpilight`,
  "ACPI backlight control",
);

/**
 * A small, convenient command-line ACPI client with a lot of features
 */
export const acpitool = mkPackage(
  nixRaw`pkgs.acpitool`,
  "A small, convenient command-line ACPI client with a lot of features",
);

/**
 * Tool to quickly gather forensic artifacts from disk images or a live system
 */
export const acquire = mkPackage(
  nixRaw`pkgs.acquire`,
  "Tool to quickly gather forensic artifacts from disk images or a live system",
);

/**
 * Pure shell autoconf replacement
 */
export const acr = mkPackage(
  nixRaw`pkgs.acr`,
  "Pure shell autoconf replacement",
);

/**
 * A PC/SC driver for Linux/Mac OS X and it supports ACS CCID smart card readers
 */
export const acsccid = mkPackage(
  nixRaw`pkgs.acsccid`,
  "A PC/SC driver for Linux/Mac OS X and it supports ACS CCID smart card readers",
);

/**
 * Run your GitHub Actions locally
 */
export const act = mkPackage(
  nixRaw`pkgs.act`,
  "Run your GitHub Actions locally",
);

/**
 * Generate activity-diagram image from spec-text file (similar to Graphviz)
 */
export const actdiag = mkPackage(
  nixRaw`pkgs.actdiag`,
  "Generate activity-diagram image from spec-text file (similar to Graphviz)",
);

/**
 * Tool to validate GitHub Action and Workflow YAML files
 */
export const action_validator = mkPackage(
  nixRaw`pkgs.action-validator`,
  "Tool to validate GitHub Action and Workflow YAML files",
);

/**
 * Static checker for GitHub Actions workflow files
 */
export const actionlint = mkPackage(
  nixRaw`pkgs.actionlint`,
  "Static checker for GitHub Actions workflow files",
);

/**
 * The "Activate Windows" watermark ported to Linux
 */
export const activate_linux = mkPackage(
  nixRaw`pkgs.activate-linux`,
  "The \"Activate Windows\" watermark ported to Linux",
);

/**
 * Messaging and Integration Patterns server written in Java
 */
export const activemq = mkPackage(
  nixRaw`pkgs.activemq`,
  "Messaging and Integration Patterns server written in Java",
);

export const activitywatch = mkPackage(
  nixRaw`pkgs.activitywatch`,
  "",
);

/**
 * A keyboard shortcut daemon
 */
export const actkbd = mkPackage(
  nixRaw`pkgs.actkbd`,
  "A keyboard shortcut daemon",
);

/**
 * Utility to interact with a MicroPython board over a serial connection
 */
export const adafruit_ampy = mkPackage(
  nixRaw`pkgs.adafruit-ampy`,
  "Utility to interact with a MicroPython board over a serial connection",
);

/**
 * Wallpaper collection for adapta-project
 */
export const adapta_backgrounds = mkPackage(
  nixRaw`pkgs.adapta-backgrounds`,
  "Wallpaper collection for adapta-project",
);

/**
 * An adaptive GTK theme based on Material Design Guidelines
 */
export const adapta_gtk_theme = mkPackage(
  nixRaw`pkgs.adapta-gtk-theme`,
  "An adaptive GTK theme based on Material Design Guidelines",
);

/**
 * A port of the Adapta theme for Plasma
 */
export const adapta_kde_theme = mkPackage(
  nixRaw`pkgs.adapta-kde-theme`,
  "A port of the Adapta theme for Plasma",
);

/**
 * A tool to synchronise files between a PC and an Android devices using ADB (Android Debug Bridge)
 */
export const adb_sync = mkPackage(
  nixRaw`pkgs.adb-sync`,
  "A tool to synchronise files between a PC and an Android devices using ADB (Android Debug Bridge)",
);

/**
 * Mount Android phones on Linux with adb, no root required
 */
export const adbfs_rootless = mkPackage(
  nixRaw`pkgs.adbfs-rootless`,
  "Mount Android phones on Linux with adb, no root required",
);

/**
 * A helper library and tools for Active Directory client operations.
 */
export const adcli = mkPackage(
  nixRaw`pkgs.adcli`,
  "A helper library and tools for Active Directory client operations.",
);

export const addOpenGLRunpath = mkPackage(
  nixRaw`pkgs.addOpenGLRunpath`,
  "",
);

/**
 * A commandline access to addic7ed subtitles
 */
export const addic7ed_cli = mkPackage(
  nixRaw`pkgs.addic7ed-cli`,
  "A commandline access to addic7ed subtitles",
);

/**
 * Ensures source code files have copyright license headers by scanning directory patterns recursively
 */
export const addlicense = mkPackage(
  nixRaw`pkgs.addlicense`,
  "Ensures source code files have copyright license headers by scanning directory patterns recursively",
);

/**
 * Adwaita-based GTK theme with design influence from elementary OS and Vertex GTK theme
 */
export const adementary_theme = mkPackage(
  nixRaw`pkgs.adementary-theme`,
  "Adwaita-based GTK theme with design influence from elementary OS and Vertex GTK theme",
);

/**
 * Tool to find misconfiguration through LDAP
 */
export const adenum = mkPackage(
  nixRaw`pkgs.adenum`,
  "Tool to find misconfiguration through LDAP",
);

/**
 * Network-wide ads & trackers blocking DNS server
 */
export const adguardhome = mkPackage(
  nixRaw`pkgs.adguardhome`,
  "Network-wide ads & trackers blocking DNS server",
);

/**
 * Terminal-based, real-time traffic monitoring and statistics for your AdGuard Home instance
 */
export const adguardian = mkPackage(
  nixRaw`pkgs.adguardian`,
  "Terminal-based, real-time traffic monitoring and statistics for your AdGuard Home instance",
);

/**
 * Plymouth boot themes from adi1090x
 */
export const adi1090x_plymouth_themes = mkPackage(
  nixRaw`pkgs.adi1090x-plymouth-themes`,
  "Plymouth boot themes from adi1090x",
);

/**
 * popcorn anime-downloader + trackma wrapper
 */
export const adl = mkPackage(
  nixRaw`pkgs.adl`,
  "popcorn anime-downloader + trackma wrapper",
);

/**
 * OPL3 FM Chip Synthesizer
 */
export const adlplug = mkPackage(
  nixRaw`pkgs.adlplug`,
  "OPL3 FM Chip Synthesizer",
);

/**
 * Database management in a single PHP file
 */
export const adminer = mkPackage(
  nixRaw`pkgs.adminer`,
  "Database management in a single PHP file",
);

/**
 * automatic device model synthesizer
 */
export const adms = mkPackage(
  nixRaw`pkgs.adms`,
  "automatic device model synthesizer",
);

/**
 * Asynchronous DNS Resolver Library
 */
export const adns = mkPackage(
  nixRaw`pkgs.adns`,
  "Asynchronous DNS Resolver Library",
);

/**
 * Adobe Reader, a viewer for PDF documents
 */
export const adobe_reader = mkPackage(
  nixRaw`pkgs.adobe-reader`,
  "Adobe Reader, a viewer for PDF documents",
);

/**
 * Automatic Differentiation of C/C++
 */
export const adolc = mkPackage(
  nixRaw`pkgs.adolc`,
  "Automatic Differentiation of C/C++",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_bin = mkPackage(
  nixRaw`pkgs.adoptopenjdk-bin`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_hotspot_bin_11 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-hotspot-bin-11`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_hotspot_bin_15 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-hotspot-bin-15`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_hotspot_bin_16 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-hotspot-bin-16`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_hotspot_bin_8 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-hotspot-bin-8`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * Java web browser plugin and an implementation of Java Web Start
 */
export const adoptopenjdk_icedtea_web = mkPackage(
  nixRaw`pkgs.adoptopenjdk-icedtea-web`,
  "Java web browser plugin and an implementation of Java Web Start",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_jre_bin = mkPackage(
  nixRaw`pkgs.adoptopenjdk-jre-bin`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_jre_hotspot_bin_11 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-jre-hotspot-bin-11`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_jre_hotspot_bin_15 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-jre-hotspot-bin-15`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_jre_hotspot_bin_16 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-jre-hotspot-bin-16`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_jre_hotspot_bin_8 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-jre-hotspot-bin-8`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_jre_openj9_bin_11 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-jre-openj9-bin-11`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_jre_openj9_bin_15 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-jre-openj9-bin-15`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_jre_openj9_bin_16 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-jre-openj9-bin-16`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_jre_openj9_bin_8 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-jre-openj9-bin-8`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_openj9_bin_11 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-openj9-bin-11`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_openj9_bin_15 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-openj9-bin-15`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_openj9_bin_16 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-openj9-bin-16`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const adoptopenjdk_openj9_bin_8 = mkPackage(
  nixRaw`pkgs.adoptopenjdk-openj9-bin-8`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * Enumeration tool for Windows Active Directories
 */
export const adreaper = mkPackage(
  nixRaw`pkgs.adreaper`,
  "Enumeration tool for Windows Active Directories",
);

/**
 * A command-line tool for generating and managing Architecture Decision Records
 */
export const adrgen = mkPackage(
  nixRaw`pkgs.adrgen`,
  "A command-line tool for generating and managing Architecture Decision Records",
);

/**
 * A GUI tool used to configure open source graphics drivers
 */
export const adriconf = mkPackage(
  nixRaw`pkgs.adriconf`,
  "A GUI tool used to configure open source graphics drivers",
);

/**
 * Beckhoff protocol to communicate with TwinCAT devices
 */
export const adslib = mkPackage(
  nixRaw`pkgs.adslib`,
  "Beckhoff protocol to communicate with TwinCAT devices",
);

/**
 * A set of tools to optimize deflate-compressed files
 */
export const advancecomp = mkPackage(
  nixRaw`pkgs.advancecomp`,
  "A set of tools to optimize deflate-compressed files",
);

/**
 * Active-DVI is a Unix-platform DVI previewer and a programmable presenter for slides written in LaTeX.
 */
export const advi = mkPackage(
  nixRaw`pkgs.advi`,
  "Active-DVI is a Unix-platform DVI previewer and a programmable presenter for slides written in LaTeX.",
);

/**
 * The theme from libadwaita ported to GTK-3
 */
export const adw_gtk3 = mkPackage(
  nixRaw`pkgs.adw-gtk3`,
  "The theme from libadwaita ported to GTK-3",
);

/**
 * A style to bend Qt applications to look like they belong into GNOME Shell
 */
export const adwaita_qt = mkPackage(
  nixRaw`pkgs.adwaita-qt`,
  "A style to bend Qt applications to look like they belong into GNOME Shell",
);

/**
 * A style to bend Qt applications to look like they belong into GNOME Shell
 */
export const adwaita_qt6 = mkPackage(
  nixRaw`pkgs.adwaita-qt6`,
  "A style to bend Qt applications to look like they belong into GNOME Shell",
);

/**
 * A cryptographic filesystem implemented in userspace using FUSE
 */
export const aefs = mkPackage(
  nixRaw`pkgs.aefs`,
  "A cryptographic filesystem implemented in userspace using FUSE",
);

/**
 * Aegean
 */
export const aegan = mkPackage(
  nixRaw`pkgs.aegan`,
  "Aegean",
);

/**
 * An advanced subtitle editor
 */
export const aegisub = mkPackage(
  nixRaw`pkgs.aegisub`,
  "An advanced subtitle editor",
);

/**
 * Egyptian Hieroglyphs, Coptic, Meroitic
 */
export const aegyptus = mkPackage(
  nixRaw`pkgs.aegyptus`,
  "Egyptian Hieroglyphs, Coptic, Meroitic",
);

/**
 * Synthetized (not sampled) pipe organ emulator
 */
export const aeolus = mkPackage(
  nixRaw`pkgs.aeolus`,
  "Synthetized (not sampled) pipe organ emulator",
);

/**
 * aeolus synthesizer instrument definitions
 */
export const aeolus_stops = mkPackage(
  nixRaw`pkgs.aeolus-stops`,
  "aeolus synthesizer instrument definitions",
);

/**
 * Private, secure, untraceable currency
 */
export const aeon = mkPackage(
  nixRaw`pkgs.aeon`,
  "Private, secure, untraceable currency",
);

/**
 * An email client for your terminal
 */
export const aerc = mkPackage(
  nixRaw`pkgs.aerc`,
  "An email client for your terminal",
);

/**
 * Low-latency messaging library
 */
export const aeron = mkPackage(
  nixRaw`pkgs.aeron`,
  "Low-latency messaging library",
);

/**
 * Flash-optimized, in-memory, NoSQL database
 */
export const aerospike = mkPackage(
  nixRaw`pkgs.aerospike`,
  "Flash-optimized, in-memory, NoSQL database",
);

/**
 * Encrypt files with Advanced Encryption Standard (AES)
 */
export const aescrypt = mkPackage(
  nixRaw`pkgs.aescrypt`,
  "Encrypt files with Advanced Encryption Standard (AES)",
);

/**
 * Correct bit errors in an AES key schedules
 */
export const aesfix = mkPackage(
  nixRaw`pkgs.aesfix`,
  "Correct bit errors in an AES key schedules",
);

/**
 * Locates 128-bit and 256-bit AES keys in a captured memory image
 */
export const aeskeyfind = mkPackage(
  nixRaw`pkgs.aeskeyfind`,
  "Locates 128-bit and 256-bit AES keys in a captured memory image",
);

/**
 * AES encrypting or decrypting pipe
 */
export const aespipe = mkPackage(
  nixRaw`pkgs.aespipe`,
  "AES encrypting or decrypting pipe",
);

/**
 * An algorithmic reverb LV2 based on Cloudseed
 */
export const aether_lv2 = mkPackage(
  nixRaw`pkgs.aether-lv2`,
  "An algorithmic reverb LV2 based on Cloudseed",
);

/**
 * Ascii-art Editor Without A Name
 */
export const aewan = mkPackage(
  nixRaw`pkgs.aewan`,
  "Ascii-art Editor Without A Name",
);

/**
 * A fetch program written in C
 */
export const afetch = mkPackage(
  nixRaw`pkgs.afetch`,
  "A fetch program written in C",
);

/**
 * An initial tagging script for notmuch mail
 */
export const afew = mkPackage(
  nixRaw`pkgs.afew`,
  "An initial tagging script for notmuch mail",
);

/**
 * Advanced forensic format library
 */
export const afflib = mkPackage(
  nixRaw`pkgs.afflib`,
  "Advanced forensic format library",
);

/**
 * Fault tolerant cpio archiver targeting backups
 */
export const afio = mkPackage(
  nixRaw`pkgs.afio`,
  "Fault tolerant cpio archiver targeting backups",
);

/**
 * Powerful fuzzer via genetic algorithms and instrumentation
 */
export const afl = mkPackage(
  nixRaw`pkgs.afl`,
  "Powerful fuzzer via genetic algorithms and instrumentation",
);

        /**
         * A heavily enhanced version of AFL, incorporating many features
and improvements from the community

         */
export const aflplusplus = mkPackage(
  nixRaw`pkgs.aflplusplus`,
  "A heavily enhanced version of AFL, incorporating many features\nand improvements from the community\n",
);

/**
 * A client implementation of the Apple Filing Protocol
 */
export const afpfs_ng = mkPackage(
  nixRaw`pkgs.afpfs-ng`,
  "A client implementation of the Apple Filing Protocol",
);

/**
 * Utility that allows end-users to leverage HFS+/APFS compression
 */
export const afsctool = mkPackage(
  nixRaw`pkgs.afsctool`,
  "Utility that allows end-users to leverage HFS+/APFS compression",
);

/**
 * An audio encoder which generates compressed audio streams based on ATSC A/52 specification
 */
export const aften = mkPackage(
  nixRaw`pkgs.aften`,
  "An audio encoder which generates compressed audio streams based on ATSC A/52 specification",
);

/**
 * This is a small utility, typically used in conjunction with Ignition, which reads metadata from a given cloud-provider and applies it to the system.
 */
export const afterburn = mkPackage(
  nixRaw`pkgs.afterburn`,
  "This is a small utility, typically used in conjunction with Ignition, which reads metadata from a given cloud-provider and applies it to the system.",
);

/**
 * A NEXTStep-inspired window manager
 */
export const afterstep = mkPackage(
  nixRaw`pkgs.afterstep`,
  "A NEXTStep-inspired window manager",
);

/**
 * Automounter in userspace
 */
export const afuse = mkPackage(
  nixRaw`pkgs.afuse`,
  "Automounter in userspace",
);

/**
 * Very simple server for the Gemini hypertext protocol
 */
export const agate = mkPackage(
  nixRaw`pkgs.agate`,
  "Very simple server for the Gemini hypertext protocol",
);

/**
 * truetype monospaced typeface designed for X environments
 */
export const agave = mkPackage(
  nixRaw`pkgs.agave`,
  "truetype monospaced typeface designed for X environments",
);

/**
 * A dependently typed functional programming language and proof assistant
 */
export const agda = mkPackage(
  nixRaw`pkgs.agda`,
  "A dependently typed functional programming language and proof assistant",
);

/**
 * Package manager for Agda
 */
export const agda_pkg = mkPackage(
  nixRaw`pkgs.agda-pkg`,
  "Package manager for Agda",
);

/**
 * A modified version of the Grml Zsh configuration specialised for the needs of system administration
 */
export const agdsn_zsh_config = mkPackage(
  nixRaw`pkgs.agdsn-zsh-config`,
  "A modified version of the Grml Zsh configuration specialised for the needs of system administration",
);

/**
 * Modern encryption tool with small explicit keys
 */
export const age = mkPackage(
  nixRaw`pkgs.age`,
  "Modern encryption tool with small explicit keys",
);

/**
 * A Ledger Nano plugin for age
 */
export const age_plugin_ledger = mkPackage(
  nixRaw`pkgs.age-plugin-ledger`,
  "A Ledger Nano plugin for age",
);

/**
 * TPM 2.0 plugin for age (This software is experimental, use it at your own risk)
 */
export const age_plugin_tpm = mkPackage(
  nixRaw`pkgs.age-plugin-tpm`,
  "TPM 2.0 plugin for age (This software is experimental, use it at your own risk)",
);

/**
 * YubiKey plugin for age
 */
export const age_plugin_yubikey = mkPackage(
  nixRaw`pkgs.age-plugin-yubikey`,
  "YubiKey plugin for age",
);

/**
 * Age based repository file encryption gitops tool
 */
export const agebox = mkPackage(
  nixRaw`pkgs.agebox`,
  "Age based repository file encryption gitops tool",
);

/**
 * A Unix utility for tracking down wasted disk space
 */
export const agedu = mkPackage(
  nixRaw`pkgs.agedu`,
  "A Unix utility for tracking down wasted disk space",
);

/**
 * A simple, fast, no-nonsense to-do (task) list designed for elementary OS
 */
export const agenda = mkPackage(
  nixRaw`pkgs.agenda`,
  "A simple, fast, no-nonsense to-do (task) list designed for elementary OS",
);

/**
 * High quality rendering engine for C++
 */
export const agg = mkPackage(
  nixRaw`pkgs.agg`,
  "High quality rendering engine for C++",
);

/**
 * Android GPU Inspector
 */
export const agi = mkPackage(
  nixRaw`pkgs.agi`,
  "Android GPU Inspector",
);

/**
 * A fast, asynchronous Zsh prompt
 */
export const agkozak_zsh_prompt = mkPackage(
  nixRaw`pkgs.agkozak-zsh-prompt`,
  "A fast, asynchronous Zsh prompt",
);

/**
 * Agola: CI/CD Redefined 
 */
export const agola = mkPackage(
  nixRaw`pkgs.agola`,
  "Agola: CI/CD Redefined ",
);

/**
 * Approximate grep for fast fuzzy string searching
 */
export const agrep = mkPackage(
  nixRaw`pkgs.agrep`,
  "Approximate grep for fast fuzzy string searching",
);

/**
 * ANSI HTML Adapter
 */
export const aha = mkPackage(
  nixRaw`pkgs.aha`,
  "ANSI HTML Adapter",
);

/**
 * Autoconfiguration protocol for IPv6 and dual-stack IPv6/IPv4 networks
 */
export const ahcpd = mkPackage(
  nixRaw`pkgs.ahcpd`,
  "Autoconfiguration protocol for IPv6 and dual-stack IPv6/IPv4 networks",
);

/**
 * A GTK2 image viewer, manga reader, and booru browser
 */
export const ahoviewer = mkPackage(
  nixRaw`pkgs.ahoviewer`,
  "A GTK2 image viewer, manga reader, and booru browser",
);

/**
 * Artificial Intelligence Infrastructure-as-Code Generator.
 */
export const aiac = mkPackage(
  nixRaw`pkgs.aiac`,
  "Artificial Intelligence Infrastructure-as-Code Generator.",
);

/**
 * Chat with gpt-3.5/chatgpt in terminal.
 */
export const aichat = mkPackage(
  nixRaw`pkgs.aichat`,
  "Chat with gpt-3.5/chatgpt in terminal.",
);

/**
 * A file and directory integrity checker
 */
export const aide = mkPackage(
  nixRaw`pkgs.aide`,
  "A file and directory integrity checker",
);

/**
 * And-Inverter Graph (AIG) utilities
 */
export const aiger = mkPackage(
  nixRaw`pkgs.aiger`,
  "And-Inverter Graph (AIG) utilities",
);

/**
 * A helvetica font in nine weights
 */
export const aileron = mkPackage(
  nixRaw`pkgs.aileron`,
  "A helvetica font in nine weights",
);

/**
 * A HTTP API client for the terminal
 */
export const ain = mkPackage(
  nixRaw`pkgs.ain`,
  "A HTTP API client for the terminal",
);

/**
 * Library to listen for BLE advertized packets
 */
export const aioblescan = mkPackage(
  nixRaw`pkgs.aioblescan`,
  "Library to listen for BLE advertized packets",
);

/**
 * DNS brute force utility
 */
export const aiodnsbrute = mkPackage(
  nixRaw`pkgs.aiodnsbrute`,
  "DNS brute force utility",
);

/**
 * Live reload for Go apps
 */
export const air = mkPackage(
  nixRaw`pkgs.air`,
  "Live reload for Go apps",
);

/**
 * Take Control of Your Wireless Devices on macOS
 */
export const airbuddy = mkPackage(
  nixRaw`pkgs.airbuddy`,
  "Take Control of Your Wireless Devices on macOS",
);

/**
 * Wireless encryption cracking tools
 */
export const aircrack_ng = mkPackage(
  nixRaw`pkgs.aircrack-ng`,
  "Wireless encryption cracking tools",
);

/**
 * Multi-use TUI to audit wireless networks
 */
export const airgeddon = mkPackage(
  nixRaw`pkgs.airgeddon`,
  "Multi-use TUI to audit wireless networks",
);

/**
 * Package to scan paper documents using the Apple AirScan (eSCL) protocol
 */
export const airscan = mkPackage(
  nixRaw`pkgs.airscan`,
  "Package to scan paper documents using the Apple AirScan (eSCL) protocol",
);

/**
 * Provides automatic updates for the voxel RPG Veloren.
 */
export const airshipper = mkPackage(
  nixRaw`pkgs.airshipper`,
  "Provides automatic updates for the voxel RPG Veloren.",
);

/**
 * Personal media streamer
 */
export const airsonic = mkPackage(
  nixRaw`pkgs.airsonic`,
  "Personal media streamer",
);

/**
 * Host tools and driver library for the AirSpy SDR
 */
export const airspy = mkPackage(
  nixRaw`pkgs.airspy`,
  "Host tools and driver library for the AirSpy SDR",
);

/**
 * User mode driver for Airspy HF+
 */
export const airspyhf = mkPackage(
  nixRaw`pkgs.airspyhf`,
  "User mode driver for Airspy HF+",
);

/**
 * A 2d dogfighting game
 */
export const airstrike = mkPackage(
  nixRaw`pkgs.airstrike`,
  "A 2d dogfighting game",
);

/**
 * WINE-based VST bridge for Linux VST hosts
 */
export const airwave = mkPackage(
  nixRaw`pkgs.airwave`,
  "WINE-based VST bridge for Linux VST hosts",
);

/**
 * Airwindows plugins (ported to LV2)
 */
export const airwindows_lv2 = mkPackage(
  nixRaw`pkgs.airwindows-lv2`,
  "Airwindows plugins (ported to LV2)",
);

/**
 * 6DoF Head tracking software
 */
export const aitrack = mkPackage(
  nixRaw`pkgs.aitrack`,
  "6DoF Head tracking software",
);

/**
 * Header-only C++ logging library
 */
export const aixlog = mkPackage(
  nixRaw`pkgs.aixlog`,
  "Header-only C++ logging library",
);

/**
 * Tool for storing/restoring JACK and/or ALSA connections to/from cml files
 */
export const aj_snapshot = mkPackage(
  nixRaw`pkgs.aj-snapshot`,
  "Tool for storing/restoring JACK and/or ALSA connections to/from cml files",
);

/**
 * World of Warcraft addon manager written in Rust
 */
export const ajour = mkPackage(
  nixRaw`pkgs.ajour`,
  "World of Warcraft addon manager written in Rust",
);

/**
 * Native Linux Design application built in Vala and GTK
 */
export const akira_unstable = mkPackage(
  nixRaw`pkgs.akira-unstable`,
  "Native Linux Design application built in Vala and GTK",
);

/**
 * Sumero-Akkadian Cuneiform
 */
export const akkadian = mkPackage(
  nixRaw`pkgs.akkadian`,
  "Sumero-Akkadian Cuneiform",
);

/**
 * ActivityPub microblogging server
 */
export const akkoma = mkPackage(
  nixRaw`pkgs.akkoma`,
  "ActivityPub microblogging server",
);

/**
 * Language package manager for Scheme
 */
export const akku = mkPackage(
  nixRaw`pkgs.akku`,
  "Language package manager for Scheme",
);

/**
 * A cross-platform, GPU-accelerated terminal emulator
 */
export const alacritty = mkPackage(
  nixRaw`pkgs.alacritty`,
  "A cross-platform, GPU-accelerated terminal emulator",
);

/**
 * The Alan interactive fiction language
 */
export const alan = mkPackage(
  nixRaw`pkgs.alan`,
  "The Alan interactive fiction language",
);

/**
 * The Alan interactive fiction language (legacy version)
 */
export const alan_2 = mkPackage(
  nixRaw`pkgs.alan_2`,
  "The Alan interactive fiction language (legacy version)",
);

/**
 * A fully-featured alarm clock with an indicator
 */
export const alarm_clock_applet = mkPackage(
  nixRaw`pkgs.alarm-clock-applet`,
  "A fully-featured alarm clock with an indicator",
);

/**
 * Automatic Language-Agnostic Subtitles Synchronization
 */
export const alass = mkPackage(
  nixRaw`pkgs.alass`,
  "Automatic Language-Agnostic Subtitles Synchronization",
);

/**
 * A desktop Suite for Xfce
 */
export const albatross = mkPackage(
  nixRaw`pkgs.albatross`,
  "A desktop Suite for Xfce",
);

/**
 * A fast and flexible keyboard launcher
 */
export const albert = mkPackage(
  nixRaw`pkgs.albert`,
  "A fast and flexible keyboard launcher",
);

/**
 * Drawing application
 */
export const alchemy = mkPackage(
  nixRaw`pkgs.alchemy`,
  "Drawing application",
);

/**
 * A music programming language for musicians
 */
export const alda = mkPackage(
  nixRaw`pkgs.alda`,
  "A music programming language for musicians",
);

/**
 * macOS tool to limit maximum charging percentage
 */
export const aldente = mkPackage(
  nixRaw`pkgs.aldente`,
  "macOS tool to limit maximum charging percentage",
);

/**
 * Morse code training program
 */
export const aldo = mkPackage(
  nixRaw`pkgs.aldo`,
  "Morse code training program",
);

/**
 * An elegant and versatile font family for comfortable reading
 */
export const alegreya = mkPackage(
  nixRaw`pkgs.alegreya`,
  "An elegant and versatile font family for comfortable reading",
);

/**
 * Humanist sans serif family with a calligraphic feeling
 */
export const alegreya_sans = mkPackage(
  nixRaw`pkgs.alegreya-sans`,
  "Humanist sans serif family with a calligraphic feeling",
);

/**
 * The Uncompromising Nix Code Formatter
 */
export const alejandra = mkPackage(
  nixRaw`pkgs.alejandra`,
  "The Uncompromising Nix Code Formatter",
);

/**
 * An open framework for storing and sharing scene data
 */
export const alembic = mkPackage(
  nixRaw`pkgs.alembic`,
  "An open framework for storing and sharing scene data",
);

/**
 * Aleph One is the open source continuation of Bungie’s Marathon 2 game engine
 */
export const alephone = mkPackage(
  nixRaw`pkgs.alephone`,
  "Aleph One is the open source continuation of Bungie’s Marathon 2 game engine",
);

/**
 * Total conversion for Marathon Infinity running on the Aleph One engine
 */
export const alephone_apotheosis_x = mkPackage(
  nixRaw`pkgs.alephone-apotheosis-x`,
  "Total conversion for Marathon Infinity running on the Aleph One engine",
);

/**
 * Second chapter of the Marathon trilogy
 */
export const alephone_durandal = mkPackage(
  nixRaw`pkgs.alephone-durandal`,
  "Second chapter of the Marathon trilogy",
);

/**
 * Picking up from the end of the Marathon trilogy, you find yourself suddenly ninety-four years in the future, in the year 2905
 */
export const alephone_eternal = mkPackage(
  nixRaw`pkgs.alephone-eternal`,
  "Picking up from the end of the Marathon trilogy, you find yourself suddenly ninety-four years in the future, in the year 2905",
);

/**
 * The first conversion for Marathon Infinity
 */
export const alephone_evil = mkPackage(
  nixRaw`pkgs.alephone-evil`,
  "The first conversion for Marathon Infinity",
);

/**
 * Third chapter of the Marathon trilogy
 */
export const alephone_infinity = mkPackage(
  nixRaw`pkgs.alephone-infinity`,
  "Third chapter of the Marathon trilogy",
);

/**
 * First chapter of the Marathon trilogy
 */
export const alephone_marathon = mkPackage(
  nixRaw`pkgs.alephone-marathon`,
  "First chapter of the Marathon trilogy",
);

/**
 * Port of the 1993 mac game "Pathways Into Darkness" by Bungie to the Aleph One engine
 */
export const alephone_pathways_into_darkness = mkPackage(
  nixRaw`pkgs.alephone-pathways-into-darkness`,
  "Port of the 1993 mac game \"Pathways Into Darkness\" by Bungie to the Aleph One engine",
);

/**
 * A 35-level single player major Marathon conversion
 */
export const alephone_pheonix = mkPackage(
  nixRaw`pkgs.alephone-pheonix`,
  "A 35-level single player major Marathon conversion",
);

/**
 * Survival horror-esque Marathon conversion
 */
export const alephone_red = mkPackage(
  nixRaw`pkgs.alephone-red`,
  "Survival horror-esque Marathon conversion",
);

/**
 * Unofficial forth chapter of the Marathon series
 */
export const alephone_rubicon_x = mkPackage(
  nixRaw`pkgs.alephone-rubicon-x`,
  "Unofficial forth chapter of the Marathon series",
);

/**
 * 30 level Marathon scenario, plus 225 secret levels for many extra hours of gameplay
 */
export const alephone_yuge = mkPackage(
  nixRaw`pkgs.alephone-yuge`,
  "30 level Marathon scenario, plus 225 secret levels for many extra hours of gameplay",
);

/**
 * Alerta Monitoring System command-line interface
 */
export const alerta = mkPackage(
  nixRaw`pkgs.alerta`,
  "Alerta Monitoring System command-line interface",
);

/**
 * Alerta Monitoring System server
 */
export const alerta_server = mkPackage(
  nixRaw`pkgs.alerta-server`,
  "Alerta Monitoring System server",
);

/**
 * Alertmanager IRC Relay is a bot relaying Prometheus alerts to IRC
 */
export const alertmanager_irc_relay = mkPackage(
  nixRaw`pkgs.alertmanager-irc-relay`,
  "Alertmanager IRC Relay is a bot relaying Prometheus alerts to IRC",
);

/**
 * Alex is a tool for generating lexical analysers in Haskell
 */
export const alex = mkPackage(
  nixRaw`pkgs.alex`,
  "Alex is a tool for generating lexical analysers in Haskell",
);

/**
 * Video-conferencing application, specialized in virtual online meetings, seminars, training sessions and conferences
 */
export const alfaview = mkPackage(
  nixRaw`pkgs.alfaview`,
  "Video-conferencing application, specialized in virtual online meetings, seminars, training sessions and conferences",
);

/**
 * Alternative Free Identity System
 */
export const alfis = mkPackage(
  nixRaw`pkgs.alfis`,
  "Alternative Free Identity System",
);

/**
 * Alternative Free Identity System
 */
export const alfis_nogui = mkPackage(
  nixRaw`pkgs.alfis-nogui`,
  "Alternative Free Identity System",
);

/**
 * B.A.T.M.A.N. routing protocol in a linux kernel module for layer 2, information distribution tool
 */
export const alfred = mkPackage(
  nixRaw`pkgs.alfred`,
  "B.A.T.M.A.N. routing protocol in a linux kernel module for layer 2, information distribution tool",
);

/**
 * Numerical analysis and data processing library
 */
export const alglib = mkPackage(
  nixRaw`pkgs.alglib`,
  "Numerical analysis and data processing library",
);

/**
 * Algol 68 Genie compiler-interpreter
 */
export const algol68g = mkPackage(
  nixRaw`pkgs.algol68g`,
  "Algol 68 Genie compiler-interpreter",
);

/**
 * Algolia’s official CLI devtool
 */
export const algolia_cli = mkPackage(
  nixRaw`pkgs.algolia-cli`,
  "Algolia’s official CLI devtool",
);

/**
 * Generate HTTP load and plot the results in real-time
 */
export const ali = mkPackage(
  nixRaw`pkgs.ali`,
  "Generate HTTP load and plot the results in real-time",
);

/**
 * Build tool for ALICE experiment software
 */
export const alibuild = mkPackage(
  nixRaw`pkgs.alibuild`,
  "Build tool for ALICE experiment software",
);

/**
 * Open-source font by Ksenia Erulevich
 */
export const alice = mkPackage(
  nixRaw`pkgs.alice`,
  "Open-source font by Ksenia Erulevich",
);

/**
 * A looking-glass for BGP sessions
 */
export const alice_lg = mkPackage(
  nixRaw`pkgs.alice-lg`,
  "A looking-glass for BGP sessions",
);

/**
 * Tools for extracting/editing files from AliceSoft games
 */
export const alice_tools = mkPackage(
  nixRaw`pkgs.alice-tools`,
  "Tools for extracting/editing files from AliceSoft games",
);

/**
 * Tools for extracting/editing files from AliceSoft games
 */
export const alice_tools_qt5 = mkPackage(
  nixRaw`pkgs.alice-tools-qt5`,
  "Tools for extracting/editing files from AliceSoft games",
);

/**
 * Tools for extracting/editing files from AliceSoft games
 */
export const alice_tools_qt6 = mkPackage(
  nixRaw`pkgs.alice-tools-qt6`,
  "Tools for extracting/editing files from AliceSoft games",
);

/**
 * A free, stand-alone first-person shooter computer game
 */
export const alienarena = mkPackage(
  nixRaw`pkgs.alienarena`,
  "A free, stand-alone first-person shooter computer game",
);

/**
 * A general purpose application and library for aligning text
 */
export const align = mkPackage(
  nixRaw`pkgs.align`,
  "A general purpose application and library for aligning text",
);

/**
 * A source-based package manager for the Ada and SPARK programming languages
 */
export const alire = mkPackage(
  nixRaw`pkgs.alire`,
  "A source-based package manager for the Ada and SPARK programming languages",
);

/**
 * Tool to manage and use Alibaba Cloud resources through a command line interface
 */
export const aliyun_cli = mkPackage(
  nixRaw`pkgs.aliyun-cli`,
  "Tool to manage and use Alibaba Cloud resources through a command line interface",
);

/**
 * A font for Arabic-based writing systems in the Kano region of Nigeria and in Niger
 */
export const alkalami = mkPackage(
  nixRaw`pkgs.alkalami`,
  "A font for Arabic-based writing systems in the Kano region of Nigeria and in Niger",
);

export const all_cabal_hashes = mkPackage(
  nixRaw`pkgs.all-cabal-hashes`,
  "",
);

/**
 * A game programming library
 */
export const allegro = mkPackage(
  nixRaw`pkgs.allegro`,
  "A game programming library",
);

/**
 * A game programming library
 */
export const allegro4 = mkPackage(
  nixRaw`pkgs.allegro4`,
  "A game programming library",
);

/**
 * A game programming library
 */
export const allegro5 = mkPackage(
  nixRaw`pkgs.allegro5`,
  "A game programming library",
);

/**
 * (deprecated) Complete set of free CAD tools and portable libraries for VLSI design
 */
export const alliance = mkPackage(
  nixRaw`pkgs.alliance`,
  "(deprecated) Complete set of free CAD tools and portable libraries for VLSI design",
);

/**
 * A cross-platform markdown web server
 */
export const allmark = mkPackage(
  nixRaw`pkgs.allmark`,
  "A cross-platform markdown web server",
);

/**
 * Language & tool for relational models
 */
export const alloy = mkPackage(
  nixRaw`pkgs.alloy`,
  "Language & tool for relational models",
);

/**
 * Language & tool for relational models
 */
export const alloy5 = mkPackage(
  nixRaw`pkgs.alloy5`,
  "Language & tool for relational models",
);

/**
 * Language & tool for relational models
 */
export const alloy6 = mkPackage(
  nixRaw`pkgs.alloy6`,
  "Language & tool for relational models",
);

/**
 * Allure Report is a flexible, lightweight multi-language test reporting tool.
 */
export const allure = mkPackage(
  nixRaw`pkgs.allure`,
  "Allure Report is a flexible, lightweight multi-language test reporting tool.",
);

/**
 * Small GTK application to allow to keep a diary of your life
 */
export const almanah = mkPackage(
  nixRaw`pkgs.almanah`,
  "Small GTK application to allow to keep a diary of your life",
);

/**
 * Terminal Mandelbrot fractal viewer
 */
export const almonds = mkPackage(
  nixRaw`pkgs.almonds`,
  "Terminal Mandelbrot fractal viewer",
);

/**
 * Simple screen lock application for X server
 */
export const alock = mkPackage(
  nixRaw`pkgs.alock`,
  "Simple screen lock application for X server",
);

/**
 * Terminal MUA using notmuch mail
 */
export const alot = mkPackage(
  nixRaw`pkgs.alot`,
  "Terminal MUA using notmuch mail",
);

/**
 * Console mail reader
 */
export const alpine = mkPackage(
  nixRaw`pkgs.alpine`,
  "Console mail reader",
);

/**
 * Make customized Alpine Linux rootfs (base image) for containers
 */
export const alpine_make_rootfs = mkPackage(
  nixRaw`pkgs.alpine-make-rootfs`,
  "Make customized Alpine Linux rootfs (base image) for containers",
);

/**
 * Make customized Alpine Linux disk image for virtual machines
 */
export const alpine_make_vm_image = mkPackage(
  nixRaw`pkgs.alpine-make-vm-image`,
  "Make customized Alpine Linux disk image for virtual machines",
);

/**
 * Inspect the plaintext payload inside of proxied TLS connections
 */
export const alpnpass = mkPackage(
  nixRaw`pkgs.alpnpass`,
  "Inspect the plaintext payload inside of proxied TLS connections",
);

/**
 * A simple and extensible webmail.
 */
export const alps = mkPackage(
  nixRaw`pkgs.alps`,
  "A simple and extensible webmail.",
);

/**
 * Soundcard firmwares from the alsa project
 */
export const alsa_firmware = mkPackage(
  nixRaw`pkgs.alsa-firmware`,
  "Soundcard firmwares from the alsa project",
);

/**
 * ALSA, the Advanced Linux Sound Architecture libraries
 */
export const alsa_lib = mkPackage(
  nixRaw`pkgs.alsa-lib`,
  "ALSA, the Advanced Linux Sound Architecture libraries",
);

/**
 * ALSA, the Advanced Linux Sound Architecture alsa-oss emulation
 */
export const alsa_oss = mkPackage(
  nixRaw`pkgs.alsa-oss`,
  "ALSA, the Advanced Linux Sound Architecture alsa-oss emulation",
);

/**
 * Various plugins for ALSA
 */
export const alsa_plugins = mkPackage(
  nixRaw`pkgs.alsa-plugins`,
  "Various plugins for ALSA",
);

export const alsa_plugins_wrapper = mkPackage(
  nixRaw`pkgs.alsa-plugins-wrapper`,
  "",
);

/**
 * GUI for alsa controls presented by Focusrite Scarlett Gen 2/3 Mixer Driver
 */
export const alsa_scarlett_gui = mkPackage(
  nixRaw`pkgs.alsa-scarlett-gui`,
  "GUI for alsa controls presented by Focusrite Scarlett Gen 2/3 Mixer Driver",
);

/**
 * ALSA Tools
 */
export const alsa_tools = mkPackage(
  nixRaw`pkgs.alsa-tools`,
  "ALSA Tools",
);

/**
 * ALSA topology configuration files
 */
export const alsa_topology_conf = mkPackage(
  nixRaw`pkgs.alsa-topology-conf`,
  "ALSA topology configuration files",
);

/**
 * ALSA Use Case Manager configuration
 */
export const alsa_ucm_conf = mkPackage(
  nixRaw`pkgs.alsa-ucm-conf`,
  "ALSA Use Case Manager configuration",
);

/**
 * ALSA, the Advanced Linux Sound Architecture utils
 */
export const alsa_utils = mkPackage(
  nixRaw`pkgs.alsa-utils`,
  "ALSA, the Advanced Linux Sound Architecture utils",
);

/**
 * Real-time adjustable equalizer plugin for ALSA
 */
export const alsaequal = mkPackage(
  nixRaw`pkgs.alsaequal`,
  "Real-time adjustable equalizer plugin for ALSA",
);

/**
 * High-performance theorem prover and SMT solver
 */
export const alt_ergo = mkPackage(
  nixRaw`pkgs.alt-ergo`,
  "High-performance theorem prover and SMT solver",
);

/**
 * Windows alt-tab on macOS
 */
export const alt_tab_macos = mkPackage(
  nixRaw`pkgs.alt-tab-macos`,
  "Windows alt-tab on macOS",
);

/**
 * A feature-rich GraphQL Client IDE
 */
export const altair = mkPackage(
  nixRaw`pkgs.altair`,
  "A feature-rich GraphQL Client IDE",
);

/**
 * MIME alteration tool
 */
export const altermime = mkPackage(
  nixRaw`pkgs.altermime`,
  "MIME alteration tool",
);

/**
 * Fast and customizable subdomain wordlist generator using DSL
 */
export const alterx = mkPackage(
  nixRaw`pkgs.alterx`,
  "Fast and customizable subdomain wordlist generator using DSL",
);

/**
 * The Althttpd webserver
 */
export const althttpd = mkPackage(
  nixRaw`pkgs.althttpd`,
  "The Althttpd webserver",
);

/**
 * AltServer for AltStore, but on-device. Requires root privileges as well as running a custom anisette server currently.
 */
export const altserver_linux = mkPackage(
  nixRaw`pkgs.altserver-linux`,
  "AltServer for AltStore, but on-device. Requires root privileges as well as running a custom anisette server currently.",
);

/**
 * X11 window switcher designed for minimalistic window managers or standalone X11 session
 */
export const alttab = mkPackage(
  nixRaw`pkgs.alttab`,
  "X11 window switcher designed for minimalistic window managers or standalone X11 session",
);

/**
 * A tracking application for A Link to the Past Randomizer
 */
export const alttpr_opentracker = mkPackage(
  nixRaw`pkgs.alttpr-opentracker`,
  "A tracking application for A Link to the Past Randomizer",
);

/**
 * A utility library to help manage common tasks with OpenAL applications
 */
export const alure = mkPackage(
  nixRaw`pkgs.alure`,
  "A utility library to help manage common tasks with OpenAL applications",
);

/**
 * A utility library for OpenAL, providing a C++ API and managing common tasks that include file loading, caching, and streaming
 */
export const alure2 = mkPackage(
  nixRaw`pkgs.alure2`,
  "A utility library for OpenAL, providing a C++ API and managing common tasks that include file loading, caching, and streaming",
);

export const amarena_theme = mkPackage(
  nixRaw`pkgs.amarena-theme`,
  "",
);

/**
 * A powerful music player with an intuitive interface
 */
export const amarok = mkPackage(
  nixRaw`pkgs.amarok`,
  "A powerful music player with an intuitive interface",
);

/**
 * A powerful music player with an intuitive interface
 */
export const amarok_kf5 = mkPackage(
  nixRaw`pkgs.amarok-kf5`,
  "A powerful music player with an intuitive interface",
);

/**
 * In-Depth DNS Enumeration and Network Mapping
 */
export const amass = mkPackage(
  nixRaw`pkgs.amass`,
  "In-Depth DNS Enumeration and Network Mapping",
);

/**
 * Contains a set of utilities and settings for Linux deployments in EC2
 */
export const amazon_ec2_utils = mkPackage(
  nixRaw`pkgs.amazon-ec2-utils`,
  "Contains a set of utilities and settings for Linux deployments in EC2",
);

/**
 * The Amazon ECR Docker Credential Helper is a credential helper for the Docker daemon that makes it easier to use Amazon Elastic Container Registry
 */
export const amazon_ecr_credential_helper = mkPackage(
  nixRaw`pkgs.amazon-ecr-credential-helper`,
  "The Amazon ECR Docker Credential Helper is a credential helper for the Docker daemon that makes it easier to use Amazon Elastic Container Registry",
);

/**
 * The Amazon ECS command line interface
 */
export const amazon_ecs_cli = mkPackage(
  nixRaw`pkgs.amazon-ecs-cli`,
  "The Amazon ECS command line interface",
);

/**
 * An interface to send PartiQL statements to Amazon Quantum Ledger Database (QLDB)
 */
export const amazon_qldb_shell = mkPackage(
  nixRaw`pkgs.amazon-qldb-shell`,
  "An interface to send PartiQL statements to Amazon Quantum Ledger Database (QLDB)",
);

/**
 * Agent to enable remote management of your Amazon EC2 instance configuration
 */
export const amazon_ssm_agent = mkPackage(
  nixRaw`pkgs.amazon-ssm-agent`,
  "Agent to enable remote management of your Amazon EC2 instance configuration",
);

/**
 * A code search-and-replace tool
 */
export const amber = mkPackage(
  nixRaw`pkgs.amber`,
  "A code search-and-replace tool",
);

/**
 * Manage secret values in-repo via public key cryptography
 */
export const amber_secret = mkPackage(
  nixRaw`pkgs.amber-secret`,
  "Manage secret values in-repo via public key cryptography",
);

/**
 * GTK, gnome-shell and Xfce theme based on Ubuntu Ambiance
 */
export const amber_theme = mkPackage(
  nixRaw`pkgs.amber-theme`,
  "GTK, gnome-shell and Xfce theme based on Ubuntu Ambiance",
);

/**
 * A small and simple sound and music player
 */
export const amberol = mkPackage(
  nixRaw`pkgs.amberol`,
  "A small and simple sound and music player",
);

/**
 * BLAS-compatible library optimized for AMD CPUs
 */
export const amd_blis = mkPackage(
  nixRaw`pkgs.amd-blis`,
  "BLAS-compatible library optimized for AMD CPUs",
);

/**
 * LAPACK-compatible linear algebra library optimized for AMD CPUs
 */
export const amd_libflame = mkPackage(
  nixRaw`pkgs.amd-libflame`,
  "LAPACK-compatible linear algebra library optimized for AMD CPUs",
);

/**
 * Set P-State voltages and clock speeds on recent AMD CPUs on Linux.
 */
export const amdctl = mkPackage(
  nixRaw`pkgs.amdctl`,
  "Set P-State voltages and clock speeds on recent AMD CPUs on Linux.",
);

/**
 * Create AMD firmware combination
 */
export const amdfwtool = mkPackage(
  nixRaw`pkgs.amdfwtool`,
  "Create AMD firmware combination",
);

/**
 * Tool to display AMDGPU usage
 */
export const amdgpu_top = mkPackage(
  nixRaw`pkgs.amdgpu_top`,
  "Tool to display AMDGPU usage",
);

/**
 * AMD Open Source Driver For Vulkan
 */
export const amdvlk = mkPackage(
  nixRaw`pkgs.amdvlk`,
  "AMD Open Source Driver For Vulkan",
);

/**
 * A static code analysis tool for Crystal
 */
export const ameba = mkPackage(
  nixRaw`pkgs.ameba`,
  "A static code analysis tool for Crystal",
);

/**
 * Headers for The Advanced Media Framework (AMF)
 */
export const amf_headers = mkPackage(
  nixRaw`pkgs.amf-headers`,
  "Headers for The Advanced Media Framework (AMF)",
);

/**
 * A fancy terminal browser for the Gemini protocol
 */
export const amfora = mkPackage(
  nixRaw`pkgs.amfora`,
  "A fancy terminal browser for the Gemini protocol",
);

/**
 * Advanced Minecraft Interface and Data/Structure Tracking
 */
export const amidst = mkPackage(
  nixRaw`pkgs.amidst`,
  "Advanced Minecraft Interface and Data/Structure Tracking",
);

/**
 * A classical Arabic typeface in Naskh style
 */
export const amiri = mkPackage(
  nixRaw`pkgs.amiri`,
  "A classical Arabic typeface in Naskh style",
);

/**
 * Another main loop
 */
export const aml = mkPackage(
  nixRaw`pkgs.aml`,
  "Another main loop",
);

/**
 * Improved Scala REPL
 */
export const ammonite = mkPackage(
  nixRaw`pkgs.ammonite`,
  "Improved Scala REPL",
);

/**
 * Improved Scala REPL
 */
export const ammonite_2_12 = mkPackage(
  nixRaw`pkgs.ammonite_2_12`,
  "Improved Scala REPL",
);

/**
 * Improved Scala REPL
 */
export const ammonite_2_13 = mkPackage(
  nixRaw`pkgs.ammonite_2_13`,
  "Improved Scala REPL",
);

/**
 * Tool for analysing binaries
 */
export const amoco = mkPackage(
  nixRaw`pkgs.amoco`,
  "Tool for analysing binaries",
);

/**
 * Fast-paced, polished OpenGL demonstration by Excess
 */
export const amoeba = mkPackage(
  nixRaw`pkgs.amoeba`,
  "Fast-paced, polished OpenGL demonstration by Excess",
);

/**
 * Fast-paced, polished OpenGL demonstration by Excess (data files)
 */
export const amoeba_data = mkPackage(
  nixRaw`pkgs.amoeba-data`,
  "Fast-paced, polished OpenGL demonstration by Excess (data files)",
);

/**
 * Among us, but it's a text adventure
 */
export const among_sus = mkPackage(
  nixRaw`pkgs.among-sus`,
  "Among us, but it's a text adventure",
);

/**
 * A modern text editor inspired by Vim
 */
export const amp = mkPackage(
  nixRaw`pkgs.amp`,
  "A modern text editor inspired by Vim",
);

/**
 * A CLI tool for publishing to and consuming from AMQP servers
 */
export const amqpcat = mkPackage(
  nixRaw`pkgs.amqpcat`,
  "A CLI tool for publishing to and consuming from AMQP servers",
);

/**
 * AMR Narrow-Band Codec
 */
export const amrnb = mkPackage(
  nixRaw`pkgs.amrnb`,
  "AMR Narrow-Band Codec",
);

/**
 * AMR Wide-Band Codec
 */
export const amrwb = mkPackage(
  nixRaw`pkgs.amrwb`,
  "AMR Wide-Band Codec",
);

/**
 * Realtime modular synthesizer for ALSA
 */
export const ams = mkPackage(
  nixRaw`pkgs.ams`,
  "Realtime modular synthesizer for ALSA",
);

/**
 * An LV2 port of the internal modules found in Alsa Modular Synth
 */
export const ams_lv2 = mkPackage(
  nixRaw`pkgs.ams-lv2`,
  "An LV2 port of the internal modules found in Alsa Modular Synth",
);

/**
 * Actions, Menus and Toolbars Kit for GTK applications
 */
export const amtk = mkPackage(
  nixRaw`pkgs.amtk`,
  "Actions, Menus and Toolbars Kit for GTK applications",
);

/**
 * Intel AMT® SoL client + tools
 */
export const amtterm = mkPackage(
  nixRaw`pkgs.amtterm`,
  "Intel AMT® SoL client + tools",
);

/**
 * Peer-to-peer client for the eD2K and Kademlia networks
 */
export const amule = mkPackage(
  nixRaw`pkgs.amule`,
  "Peer-to-peer client for the eD2K and Kademlia networks",
);

/**
 * Peer-to-peer client for the eD2K and Kademlia networks
 */
export const amule_daemon = mkPackage(
  nixRaw`pkgs.amule-daemon`,
  "Peer-to-peer client for the eD2K and Kademlia networks",
);

/**
 * Peer-to-peer client for the eD2K and Kademlia networks
 */
export const amule_gui = mkPackage(
  nixRaw`pkgs.amule-gui`,
  "Peer-to-peer client for the eD2K and Kademlia networks",
);

/**
 * Peer-to-peer client for the eD2K and Kademlia networks
 */
export const amule_web = mkPackage(
  nixRaw`pkgs.amule-web`,
  "Peer-to-peer client for the eD2K and Kademlia networks",
);

/**
 * Powerful tool to generate web server statistics
 */
export const analog = mkPackage(
  nixRaw`pkgs.analog`,
  "Powerful tool to generate web server statistics",
);

/**
 * Another auto nice daemon, with community rules support
 */
export const ananicy = mkPackage(
  nixRaw`pkgs.ananicy`,
  "Another auto nice daemon, with community rules support",
);

/**
 * Rewrite of ananicy in c++ for lower cpu and memory usage
 */
export const ananicy_cpp = mkPackage(
  nixRaw`pkgs.ananicy-cpp`,
  "Rewrite of ananicy in c++ for lower cpu and memory usage",
);

/**
 * ananicy-cpp-rules for CachyOS 
 */
export const ananicy_rules_cachyos = mkPackage(
  nixRaw`pkgs.ananicy-rules-cachyos`,
  "ananicy-cpp-rules for CachyOS ",
);

/**
 * Exhaustive exploration of Anarchist theory and practice
 */
export const anarchism = mkPackage(
  nixRaw`pkgs.anarchism`,
  "Exhaustive exploration of Anarchist theory and practice",
);

/**
 * Android in a box
 */
export const anbox = mkPackage(
  nixRaw`pkgs.anbox`,
  "Android in a box",
);

/**
 * Unicode Plane 1 Osmanya script font
 */
export const andagii = mkPackage(
  nixRaw`pkgs.andagii`,
  "Unicode Plane 1 Osmanya script font",
);

/**
 * Modal Homotopy Type System
 */
export const anders = mkPackage(
  nixRaw`pkgs.anders`,
  "Modal Homotopy Type System",
);

/**
 * A family designed especially for literacy use taking into account the needs of beginning readers
 */
export const andika = mkPackage(
  nixRaw`pkgs.andika`,
  "A family designed especially for literacy use taking into account the needs of beginning readers",
);

/**
 * Tool and Python library to interact with Android Files
 */
export const androguard = mkPackage(
  nixRaw`pkgs.androguard`,
  "Tool and Python library to interact with Android Files",
);

/**
 * Utility to extract and repack Android backups created with adb backup
 */
export const android_backup_extractor = mkPackage(
  nixRaw`pkgs.android-backup-extractor`,
  "Utility to extract and repack Android backups created with adb backup",
);

/**
 * Reliable MTP client with minimalistic UI
 */
export const android_file_transfer = mkPackage(
  nixRaw`pkgs.android-file-transfer`,
  "Reliable MTP client with minimalistic UI",
);

/**
 * The Official IDE for Android (stable channel)
 */
export const android_studio = mkPackage(
  nixRaw`pkgs.android-studio`,
  "The Official IDE for Android (stable channel)",
);

/**
 * Android SDK platform tools
 */
export const android_tools = mkPackage(
  nixRaw`pkgs.android-tools`,
  "Android SDK platform tools",
);

/**
 * Android udev rules list aimed to be the most comprehensive on the net
 */
export const android_udev_rules = mkPackage(
  nixRaw`pkgs.android-udev-rules`,
  "Android udev rules list aimed to be the most comprehensive on the net",
);

/**
 * Physics/Gravity Platform game
 */
export const andyetitmoves = mkPackage(
  nixRaw`pkgs.andyetitmoves`,
  "Physics/Gravity Platform game",
);

/**
 * UDP-based load generator
 */
export const anevicon = mkPackage(
  nixRaw`pkgs.anevicon`,
  "UDP-based load generator",
);

/**
 * A tool for adding new lines to files, skipping duplicates
 */
export const anew = mkPackage(
  nixRaw`pkgs.anew`,
  "A tool for adding new lines to files, skipping duplicates",
);

/**
 * Append lines from stdin to a file if they don't already exist in the file
 */
export const anewer = mkPackage(
  nixRaw`pkgs.anewer`,
  "Append lines from stdin to a file if they don't already exist in the file",
);

/**
 * A single-player roguelike dungeon exploration game
 */
export const angband = mkPackage(
  nixRaw`pkgs.angband`,
  "A single-player roguelike dungeon exploration game",
);

/**
 * Light-weight scripting library
 */
export const angelscript = mkPackage(
  nixRaw`pkgs.angelscript`,
  "Light-weight scripting library",
);

/**
 * Slice and dice logs on the command line
 */
export const angle_grinder = mkPackage(
  nixRaw`pkgs.angle-grinder`,
  "Slice and dice logs on the command line",
);

/**
 * Angry IP Scanner - fast and friendly network scanner
 */
export const angryipscanner = mkPackage(
  nixRaw`pkgs.angryipscanner`,
  "Angry IP Scanner - fast and friendly network scanner",
);

/**
 * Program for analysing NGS data
 */
export const angsd = mkPackage(
  nixRaw`pkgs.angsd`,
  "Program for analysing NGS data",
);

/**
 * A cli tool to browse and play anime
 */
export const ani_cli = mkPackage(
  nixRaw`pkgs.ani-cli`,
  "A cli tool to browse and play anime",
);

/**
 * AniLibria cross platform desktop client
 */
export const anilibria_winmaclinux = mkPackage(
  nixRaw`pkgs.anilibria-winmaclinux`,
  "AniLibria cross platform desktop client",
);

/**
 * A simple but powerful anime downloader and streamer
 */
export const anime_downloader = mkPackage(
  nixRaw`pkgs.anime-downloader`,
  "A simple but powerful anime downloader and streamer",
);

/**
 * Anka/Coder fonts
 */
export const ankacoder = mkPackage(
  nixRaw`pkgs.ankacoder`,
  "Anka/Coder fonts",
);

/**
 * Anka/Coder Condensed font
 */
export const ankacoder_condensed = mkPackage(
  nixRaw`pkgs.ankacoder-condensed`,
  "Anka/Coder Condensed font",
);

/**
 * Spaced repetition flashcard program
 */
export const anki = mkPackage(
  nixRaw`pkgs.anki`,
  "Spaced repetition flashcard program",
);

/**
 * Spaced repetition flashcard program
 */
export const anki_bin = mkPackage(
  nixRaw`pkgs.anki-bin`,
  "Spaced repetition flashcard program",
);

/**
 * Standalone unofficial anki sync server
 */
export const ankisyncd = mkPackage(
  nixRaw`pkgs.ankisyncd`,
  "Standalone unofficial anki sync server",
);

/**
 * Scriptable interpreter written in golang
 */
export const anko = mkPackage(
  nixRaw`pkgs.anko`,
  "Scriptable interpreter written in golang",
);

/**
 * Unicode-based font family with broad support for writing systems that use the Devanagari script
 */
export const annapurna_sil = mkPackage(
  nixRaw`pkgs.annapurna-sil`,
  "Unicode-based font family with broad support for writing systems that use the Devanagari script",
);

/**
 * TrueType font set intended for source code
 */
export const anonymousPro = mkPackage(
  nixRaw`pkgs.anonymousPro`,
  "TrueType font set intended for source code",
);

/**
 * Quickly get ANSI escape sequences
 */
export const ansi = mkPackage(
  nixRaw`pkgs.ansi`,
  "Quickly get ANSI escape sequences",
);

/**
 * Convert text with ANSI color codes to HTML
 */
export const ansi2html = mkPackage(
  nixRaw`pkgs.ansi2html`,
  "Convert text with ANSI color codes to HTML",
);

/**
 * Radically simple IT automation
 */
export const ansible = mkPackage(
  nixRaw`pkgs.ansible`,
  "Radically simple IT automation",
);

/**
 * Radically simple IT automation
 */
export const ansible_2_13 = mkPackage(
  nixRaw`pkgs.ansible_2_13`,
  "Radically simple IT automation",
);

/**
 * Radically simple IT automation
 */
export const ansible_2_14 = mkPackage(
  nixRaw`pkgs.ansible_2_14`,
  "Radically simple IT automation",
);

/**
 * Radically simple IT automation
 */
export const ansible_2_15 = mkPackage(
  nixRaw`pkgs.ansible_2_15`,
  "Radically simple IT automation",
);

/**
 * Annotation based documentation for your Ansible roles
 */
export const ansible_doctor = mkPackage(
  nixRaw`pkgs.ansible-doctor`,
  "Annotation based documentation for your Ansible roles",
);

/**
 * Ansible Language Server
 */
export const ansible_language_server = mkPackage(
  nixRaw`pkgs.ansible-language-server`,
  "Ansible Language Server",
);

/**
 * Best practice scanner for Ansible roles and playbooks
 */
export const ansible_later = mkPackage(
  nixRaw`pkgs.ansible-later`,
  "Best practice scanner for Ansible roles and playbooks",
);

/**
 * Best practices checker for Ansible
 */
export const ansible_lint = mkPackage(
  nixRaw`pkgs.ansible-lint`,
  "Best practices checker for Ansible",
);

/**
 * Tool to convert ANSI to other formats
 */
export const ansifilter = mkPackage(
  nixRaw`pkgs.ansifilter`,
  "Tool to convert ANSI to other formats",
);

/**
 * A Java-based build tool
 */
export const ant = mkPackage(
  nixRaw`pkgs.ant`,
  "A Java-based build tool",
);

/**
 * Bloody variant of the Ant theme
 */
export const ant_bloody_theme = mkPackage(
  nixRaw`pkgs.ant-bloody-theme`,
  "Bloody variant of the Ant theme",
);

/**
 * Nebula variant of the Ant theme
 */
export const ant_nebula_theme = mkPackage(
  nixRaw`pkgs.ant-nebula-theme`,
  "Nebula variant of the Ant theme",
);

/**
 * A flat and light theme with a modern look
 */
export const ant_theme = mkPackage(
  nixRaw`pkgs.ant-theme`,
  "A flat and light theme with a modern look",
);

/**
 * A low-level functional language for exploring refinement types, lifetime inference, and algebraic effects
 */
export const ante = mkPackage(
  nixRaw`pkgs.ante`,
  "A low-level functional language for exploring refinement types, lifetime inference, and algebraic effects",
);

/**
 * HDHomeRun emulator for Plex DVR to connect to Tvheadend
 */
export const antennas = mkPackage(
  nixRaw`pkgs.antennas`,
  "HDHomeRun emulator for Plex DVR to connect to Tvheadend",
);

/**
 * Extracts FIT files from ANT-FS based sport watches
 */
export const antfs_cli = mkPackage(
  nixRaw`pkgs.antfs-cli`,
  "Extracts FIT files from ANT-FS based sport watches",
);

/**
 * Hiragana text to Kana Kanji mixed text Japanese input method
 */
export const anthy = mkPackage(
  nixRaw`pkgs.anthy`,
  "Hiragana text to Kana Kanji mixed text Japanese input method",
);

/**
 * The fastest shell plugin manager
 */
export const antibody = mkPackage(
  nixRaw`pkgs.antibody`,
  "The fastest shell plugin manager",
);

/**
 * An algebraic number theory library
 */
export const antic = mkPackage(
  nixRaw`pkgs.antic`,
  "An algebraic number theory library",
);

/**
 * A zsh plugin manager made from the ground up thinking about performance
 */
export const antidote = mkPackage(
  nixRaw`pkgs.antidote`,
  "A zsh plugin manager made from the ground up thinking about performance",
);

/**
 * The plugin manager for zsh
 */
export const antigen = mkPackage(
  nixRaw`pkgs.antigen`,
  "The plugin manager for zsh",
);

/**
 * GUI for mapping keyboard and mouse controls to a gamepad
 */
export const antimicrox = mkPackage(
  nixRaw`pkgs.antimicrox`,
  "GUI for mapping keyboard and mouse controls to a gamepad",
);

/**
 * A computer-aided design (CAD) tool from a parallel universe
 */
export const antimony = mkPackage(
  nixRaw`pkgs.antimony`,
  "A computer-aided design (CAD) tool from a parallel universe",
);

/**
 * A collection of programs for generating, manipulating, transforming and viewing polyhedra
 */
export const antiprism = mkPackage(
  nixRaw`pkgs.antiprism`,
  "A collection of programs for generating, manipulating, transforming and viewing polyhedra",
);

/**
 * Convert MS Word documents to plain text or PostScript
 */
export const antiword = mkPackage(
  nixRaw`pkgs.antiword`,
  "Convert MS Word documents to plain text or PostScript",
);

/**
 * Powerful parser generator
 */
export const antlr = mkPackage(
  nixRaw`pkgs.antlr`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr2 = mkPackage(
  nixRaw`pkgs.antlr2`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr3 = mkPackage(
  nixRaw`pkgs.antlr3`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr3_4 = mkPackage(
  nixRaw`pkgs.antlr3_4`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr3_5 = mkPackage(
  nixRaw`pkgs.antlr3_5`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr4 = mkPackage(
  nixRaw`pkgs.antlr4`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr4_10 = mkPackage(
  nixRaw`pkgs.antlr4_10`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr4_11 = mkPackage(
  nixRaw`pkgs.antlr4_11`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr4_12 = mkPackage(
  nixRaw`pkgs.antlr4_12`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr4_13 = mkPackage(
  nixRaw`pkgs.antlr4_13`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr4_8 = mkPackage(
  nixRaw`pkgs.antlr4_8`,
  "Powerful parser generator",
);

/**
 * Powerful parser generator
 */
export const antlr4_9 = mkPackage(
  nixRaw`pkgs.antlr4_9`,
  "Powerful parser generator",
);

/**
 * A modular documentation site generator. Designed for users of Asciidoctor.
 */
export const antora = mkPackage(
  nixRaw`pkgs.antora`,
  "A modular documentation site generator. Designed for users of Asciidoctor.",
);

/**
 * Advanced normalization toolkit for medical image registration and other processing
 */
export const ants = mkPackage(
  nixRaw`pkgs.ants`,
  "Advanced normalization toolkit for medical image registration and other processing",
);

/**
 * Simple Ants simulator
 */
export const antsimulator = mkPackage(
  nixRaw`pkgs.antsimulator`,
  "Simple Ants simulator",
);

/**
 * Add a light/intuitive GUI to OpenGL applications
 */
export const anttweakbar = mkPackage(
  nixRaw`pkgs.anttweakbar`,
  "Add a light/intuitive GUI to OpenGL applications",
);

/**
 * Simple, easy to use, open source time tracking system
 */
export const anuko_time_tracker = mkPackage(
  nixRaw`pkgs.anuko-time-tracker`,
  "Simple, easy to use, open source time tracking system",
);

/**
 * An anime tracker for AniList featuring a TUI
 */
export const anup = mkPackage(
  nixRaw`pkgs.anup`,
  "An anime tracker for AniList featuring a TUI",
);

/**
 * fish and zsh support for nix-shell
 */
export const any_nix_shell = mkPackage(
  nixRaw`pkgs.any-nix-shell`,
  "fish and zsh support for nix-shell",
);

/**
 * Python tool for generating badges for your projects
 */
export const anybadge = mkPackage(
  nixRaw`pkgs.anybadge`,
  "Python tool for generating badges for your projects",
);

/**
 * Desktop sharing application, providing remote support and online meetings
 */
export const anydesk = mkPackage(
  nixRaw`pkgs.anydesk`,
  "Desktop sharing application, providing remote support and online meetings",
);

/**
 * Command line interface to the AnyStyle Parser and Finder
 */
export const anystyle_cli = mkPackage(
  nixRaw`pkgs.anystyle-cli`,
  "Command line interface to the AnyStyle Parser and Finder",
);

/**
 * A tiny emulator for AnyTone radios
 */
export const anytone_emu = mkPackage(
  nixRaw`pkgs.anytone-emu`,
  "A tiny emulator for AnyTone radios",
);

/**
 * P2P note-taking tool
 */
export const anytype = mkPackage(
  nixRaw`pkgs.anytype`,
  "P2P note-taking tool",
);

/**
 * Infrastructure for solid modeling with F-Reps in C, C++, and Guile
 */
export const ao = mkPackage(
  nixRaw`pkgs.ao`,
  "Infrastructure for solid modeling with F-Reps in C, C++, and Guile",
);

/**
 * Advent of code command line tool
 */
export const aoc_cli = mkPackage(
  nixRaw`pkgs.aoc-cli`,
  "Advent of code command line tool",
);

/**
 * Get your Advent of Code data with a single import statement
 */
export const aocd = mkPackage(
  nixRaw`pkgs.aocd`,
  "Get your Advent of Code data with a single import statement",
);

/**
 * Interface to all AMD AOCL libraries to access CPU features
 */
export const aocl_utils = mkPackage(
  nixRaw`pkgs.aocl-utils`,
  "Interface to all AMD AOCL libraries to access CPU features",
);

/**
 * A Java-based build tool
 */
export const apacheAnt = mkPackage(
  nixRaw`pkgs.apacheAnt`,
  "A Java-based build tool",
);

/**
 * A Java-based build tool
 */
export const apacheAnt_1_9 = mkPackage(
  nixRaw`pkgs.apacheAnt_1_9`,
  "A Java-based build tool",
);

/**
 * Apache HTTPD, the world's most popular web server
 */
export const apacheHttpd = mkPackage(
  nixRaw`pkgs.apacheHttpd`,
  "Apache HTTPD, the world's most popular web server",
);

/**
 * Apache HTTPD, the world's most popular web server
 */
export const apacheHttpd_2_4 = mkPackage(
  nixRaw`pkgs.apacheHttpd_2_4`,
  "Apache HTTPD, the world's most popular web server",
);

/**
 * A high-throughput distributed messaging system
 */
export const apacheKafka = mkPackage(
  nixRaw`pkgs.apacheKafka`,
  "A high-throughput distributed messaging system",
);

/**
 * A high-throughput distributed messaging system
 */
export const apacheKafka_2_8 = mkPackage(
  nixRaw`pkgs.apacheKafka_2_8`,
  "A high-throughput distributed messaging system",
);

/**
 * A high-throughput distributed messaging system
 */
export const apacheKafka_3_0 = mkPackage(
  nixRaw`pkgs.apacheKafka_3_0`,
  "A high-throughput distributed messaging system",
);

/**
 * A high-throughput distributed messaging system
 */
export const apacheKafka_3_1 = mkPackage(
  nixRaw`pkgs.apacheKafka_3_1`,
  "A high-throughput distributed messaging system",
);

/**
 * A high-throughput distributed messaging system
 */
export const apacheKafka_3_2 = mkPackage(
  nixRaw`pkgs.apacheKafka_3_2`,
  "A high-throughput distributed messaging system",
);

/**
 * A high-throughput distributed messaging system
 */
export const apacheKafka_3_3 = mkPackage(
  nixRaw`pkgs.apacheKafka_3_3`,
  "A high-throughput distributed messaging system",
);

/**
 * A high-throughput distributed messaging system
 */
export const apacheKafka_3_4 = mkPackage(
  nixRaw`pkgs.apacheKafka_3_4`,
  "A high-throughput distributed messaging system",
);

/**
 * A high-throughput distributed messaging system
 */
export const apacheKafka_3_5 = mkPackage(
  nixRaw`pkgs.apacheKafka_3_5`,
  "A high-throughput distributed messaging system",
);

/**
 * Programmatically author, schedule and monitor data pipelines
 */
export const apache_airflow = mkPackage(
  nixRaw`pkgs.apache-airflow`,
  "Programmatically author, schedule and monitor data pipelines",
);

/**
 * An extensible and embeddable directory server
 */
export const apache_directory_server = mkPackage(
  nixRaw`pkgs.apache-directory-server`,
  "An extensible and embeddable directory server",
);

/**
 * Eclipse-based LDAP browser and directory client
 */
export const apache_directory_studio = mkPackage(
  nixRaw`pkgs.apache-directory-studio`,
  "Eclipse-based LDAP browser and directory client",
);

/**
 * Flex SDK for Adobe Flash / ActionScript
 */
export const apache_flex_sdk = mkPackage(
  nixRaw`pkgs.apache-flex-sdk`,
  "Flex SDK for Adobe Flash / ActionScript",
);

/**
 * RDF database
 */
export const apache_jena = mkPackage(
  nixRaw`pkgs.apache-jena`,
  "RDF database",
);

/**
 * SPARQL server
 */
export const apache_jena_fuseki = mkPackage(
  nixRaw`pkgs.apache-jena-fuseki`,
  "SPARQL server",
);

/**
 * Tool to scan for Apache Tomcat server vulnerabilities
 */
export const apachetomcatscanner = mkPackage(
  nixRaw`pkgs.apachetomcatscanner`,
  "Tool to scan for Apache Tomcat server vulnerabilities",
);

/**
 * Software for biomolecular electrostatics and solvation calculations
 */
export const apbs = mkPackage(
  nixRaw`pkgs.apbs`,
  "Software for biomolecular electrostatics and solvation calculations",
);

/**
 * unified temperature fetcher interface to several UPS network adapters
 */
export const apc_temp_fetch = mkPackage(
  nixRaw`pkgs.apc-temp-fetch`,
  "unified temperature fetcher interface to several UPS network adapters",
);

/**
 * Daemon for controlling APC UPSes
 */
export const apcupsd = mkPackage(
  nixRaw`pkgs.apcupsd`,
  "Daemon for controlling APC UPSes",
);

/**
 * Parser for Attempto Controlled English (ACE)
 */
export const ape = mkPackage(
  nixRaw`pkgs.ape`,
  "Parser for Attempto Controlled English (ACE)",
);

/**
 * Parser for Attempto Controlled English (ACE) with a large lexicon (~100,000 entries)
 */
export const apeClex = mkPackage(
  nixRaw`pkgs.apeClex`,
  "Parser for Attempto Controlled English (ACE) with a large lexicon (~100,000 entries)",
);

/**
 * L402 (Lightning HTTP 402) Reverse Proxy
 */
export const aperture = mkPackage(
  nixRaw`pkgs.aperture`,
  "L402 (Lightning HTTP 402) Reverse Proxy",
);

/**
 * A PDF Evolution Library
 */
export const apfel = mkPackage(
  nixRaw`pkgs.apfel`,
  "A PDF Evolution Library",
);

/**
 * Ultra-fast theory predictions for collider observables
 */
export const apfelgrid = mkPackage(
  nixRaw`pkgs.apfelgrid`,
  "Ultra-fast theory predictions for collider observables",
);

/**
 * FUSE driver for APFS (Apple File System)
 */
export const apfs_fuse = mkPackage(
  nixRaw`pkgs.apfs-fuse`,
  "FUSE driver for APFS (Apple File System)",
);

/**
 * Experimental APFS tools for linux
 */
export const apfsprogs = mkPackage(
  nixRaw`pkgs.apfsprogs`,
  "Experimental APFS tools for linux",
);

/**
 * Tools for random password generation
 */
export const apg = mkPackage(
  nixRaw`pkgs.apg`,
  "Tools for random password generation",
);

/**
 * Another PostgreSQL diff tool
 */
export const apgdiff = mkPackage(
  nixRaw`pkgs.apgdiff`,
  "Another PostgreSQL diff tool",
);

/**
 * Linter for APIs defined in protocol buffers
 */
export const api_linter = mkPackage(
  nixRaw`pkgs.api-linter`,
  "Linter for APIs defined in protocol buffers",
);

/**
 * Open source ecosystem for open FPGA boards
 */
export const apio = mkPackage(
  nixRaw`pkgs.apio`,
  "Open source ecosystem for open FPGA boards",
);

/**
 * Tools to trace OpenGL, OpenGL ES, Direct3D, and DirectDraw APIs
 */
export const apitrace = mkPackage(
  nixRaw`pkgs.apitrace`,
  "Tools to trace OpenGL, OpenGL ES, Direct3D, and DirectDraw APIs",
);

/**
 * Alpine Package Keeper
 */
export const apk_tools = mkPackage(
  nixRaw`pkgs.apk-tools`,
  "Alpine Package Keeper",
);

/**
 * A command-line tool for downloading APK files from various sources
 */
export const apkeep = mkPackage(
  nixRaw`pkgs.apkeep`,
  "A command-line tool for downloading APK files from various sources",
);

/**
 * Upstream packaging automation tool
 */
export const apkg = mkPackage(
  nixRaw`pkgs.apkg`,
  "Upstream packaging automation tool",
);

/**
 * Android Application Identifier
 */
export const apkid = mkPackage(
  nixRaw`pkgs.apkid`,
  "Android Application Identifier",
);

/**
 * Scanning APK file for URIs, endpoints and secrets
 */
export const apkleaks = mkPackage(
  nixRaw`pkgs.apkleaks`,
  "Scanning APK file for URIs, endpoints and secrets",
);

/**
 * Build OCI images using APK directly without Dockerfile
 */
export const apko = mkPackage(
  nixRaw`pkgs.apko`,
  "Build OCI images using APK directly without Dockerfile",
);

/**
 * Copy/extract/patch android apk signatures & compare APKs
 */
export const apksigcopier = mkPackage(
  nixRaw`pkgs.apksigcopier`,
  "Copy/extract/patch android apk signatures & compare APKs",
);

/**
 * Command line tool to sign and verify Android APKs
 */
export const apksigner = mkPackage(
  nixRaw`pkgs.apksigner`,
  "Command line tool to sign and verify Android APKs",
);

/**
 * A tool for reverse engineering Android apk files
 */
export const apktool = mkPackage(
  nixRaw`pkgs.apktool`,
  "A tool for reverse engineering Android apk files",
);

/**
 * APL385 Unicode font evolved
 */
export const apl386 = mkPackage(
  nixRaw`pkgs.apl386`,
  "APL385 Unicode font evolved",
);

/**
 * Ground station software for autonomous vehicles
 */
export const apmplanner2 = mkPackage(
  nixRaw`pkgs.apmplanner2`,
  "Ground station software for autonomous vehicles",
);

/**
 * Create an APNG from multiple PNG files
 */
export const apngasm = mkPackage(
  nixRaw`pkgs.apngasm`,
  "Create an APNG from multiple PNG files",
);

/**
 * Create highly optimized Animated PNG files from PNG/TGA images
 */
export const apngasm_2 = mkPackage(
  nixRaw`pkgs.apngasm_2`,
  "Create highly optimized Animated PNG files from PNG/TGA images",
);

/**
 * A distraction free Markdown editor for GNU/Linux
 */
export const apostrophe = mkPackage(
  nixRaw`pkgs.apostrophe`,
  "A distraction free Markdown editor for GNU/Linux",
);

/**
 * The App That Opens Apps
 */
export const apparency = mkPackage(
  nixRaw`pkgs.apparency`,
  "The App That Opens Apps",
);

/**
 * Add directory bookmarks, distant listing, and distant editing to the command line
 */
export const apparix = mkPackage(
  nixRaw`pkgs.apparix`,
  "Add directory bookmarks, distant listing, and distant editing to the command line",
);

/**
 * A mandatory access control system - binary user-land utilities
 */
export const apparmor_bin_utils = mkPackage(
  nixRaw`pkgs.apparmor-bin-utils`,
  "A mandatory access control system - binary user-land utilities",
);

/**
 * A mandatory access control system - kernel patches
 */
export const apparmor_kernel_patches = mkPackage(
  nixRaw`pkgs.apparmor-kernel-patches`,
  "A mandatory access control system - kernel patches",
);

/**
 * A mandatory access control system - PAM service
 */
export const apparmor_pam = mkPackage(
  nixRaw`pkgs.apparmor-pam`,
  "A mandatory access control system - PAM service",
);

/**
 * A mandatory access control system - rule parser
 */
export const apparmor_parser = mkPackage(
  nixRaw`pkgs.apparmor-parser`,
  "A mandatory access control system - rule parser",
);

/**
 * A mandatory access control system - profiles
 */
export const apparmor_profiles = mkPackage(
  nixRaw`pkgs.apparmor-profiles`,
  "A mandatory access control system - profiles",
);

/**
 * A mandatory access control system - user-land utilities
 */
export const apparmor_utils = mkPackage(
  nixRaw`pkgs.apparmor-utils`,
  "A mandatory access control system - user-land utilities",
);

/**
 * Uninstall unwanted apps
 */
export const appcleaner = mkPackage(
  nixRaw`pkgs.appcleaner`,
  "Uninstall unwanted apps",
);

/**
 * Minimal Application using the QCSXCAD library
 */
export const appcsxcad = mkPackage(
  nixRaw`pkgs.appcsxcad`,
  "Minimal Application using the QCSXCAD library",
);

/**
 * Sandboxed Python execution environment for writing automation apps for Home Assistant
 */
export const appdaemon = mkPackage(
  nixRaw`pkgs.appdaemon`,
  "Sandboxed Python execution environment for writing automation apps for Home Assistant",
);

/**
 * Edit the Pantheon desktop application menu
 */
export const appeditor = mkPackage(
  nixRaw`pkgs.appeditor`,
  "Edit the Pantheon desktop application menu",
);

/**
 * An open-source alternative to Notion
 */
export const appflowy = mkPackage(
  nixRaw`pkgs.appflowy`,
  "An open-source alternative to Notion",
);

/**
 * Appgate SDP (Software Defined Perimeter) desktop client
 */
export const appgate_sdp = mkPackage(
  nixRaw`pkgs.appgate-sdp`,
  "Appgate SDP (Software Defined Perimeter) desktop client",
);

export const appimage_run = mkPackage(
  nixRaw`pkgs.appimage-run`,
  "",
);

export const appimage_run_tests = mkPackage(
  nixRaw`pkgs.appimage-run-tests`,
  "",
);

/**
 * A tool to package desktop applications as AppImages
 */
export const appimagekit = mkPackage(
  nixRaw`pkgs.appimagekit`,
  "A tool to package desktop applications as AppImages",
);

/**
 * Bindings for appindicator using gobject-introspection
 */
export const appindicator_sharp = mkPackage(
  nixRaw`pkgs.appindicator-sharp`,
  "Bindings for appindicator using gobject-introspection",
);

/**
 * Opensource macOS Cursors.
 */
export const apple_cursor = mkPackage(
  nixRaw`pkgs.apple-cursor`,
  "Opensource macOS Cursors.",
);

/**
 * The APPLgrid project provides a fast and flexible way to reproduce the results of full NLO calculations with any input parton distribution set in only a few milliseconds rather than the weeks normally required to gain adequate statistics
 */
export const applgrid = mkPackage(
  nixRaw`pkgs.applgrid`,
  "The APPLgrid project provides a fast and flexible way to reproduce the results of full NLO calculations with any input parton distribution set in only a few milliseconds rather than the weeks normally required to gain adequate statistics",
);

/**
 * Push Notifications that work with just about every platform
 */
export const apprise = mkPackage(
  nixRaw`pkgs.apprise`,
  "Push Notifications that work with just about every platform",
);

/**
 * Software metadata handling library
 */
export const appstream = mkPackage(
  nixRaw`pkgs.appstream`,
  "Software metadata handling library",
);

/**
 * Objects and helper methods to read and write AppStream metadata
 */
export const appstream_glib = mkPackage(
  nixRaw`pkgs.appstream-glib`,
  "Objects and helper methods to read and write AppStream metadata",
);

/**
 * Application containers for linux (previously known as Singularity)
 */
export const apptainer = mkPackage(
  nixRaw`pkgs.apptainer`,
  "Application containers for linux (previously known as Singularity)",
);

/**
 * 
 */
export const apptainer_overriden_nixos = mkPackage(
  nixRaw`pkgs.apptainer-overriden-nixos`,
  "",
);

/**
 * Tool to audit dependencies based on known vulnerabilities and advisories
 */
export const appthreat_depscan = mkPackage(
  nixRaw`pkgs.appthreat-depscan`,
  "Tool to audit dependencies based on known vulnerabilities and advisories",
);

/**
 * Nix-based app VMs
 */
export const appvm = mkPackage(
  nixRaw`pkgs.appvm`,
  "Nix-based app VMs",
);

/**
 * The Apache Portable Runtime library
 */
export const apr = mkPackage(
  nixRaw`pkgs.apr`,
  "The Apache Portable Runtime library",
);

/**
 * A companion library to APR, the Apache Portable Runtime
 */
export const aprutil = mkPackage(
  nixRaw`pkgs.aprutil`,
  "A companion library to APR, the Apache Portable Runtime",
);

/**
 * Command-line package management tools used on Debian-based systems
 */
export const apt = mkPackage(
  nixRaw`pkgs.apt`,
  "Command-line package management tools used on Debian-based systems",
);

/**
 * A caching proxy specialized for Linux distribution files
 */
export const apt_cacher_ng = mkPackage(
  nixRaw`pkgs.apt-cacher-ng`,
  "A caching proxy specialized for Linux distribution files",
);

/**
 * Terminal-based remote package update manager
 */
export const apt_dater = mkPackage(
  nixRaw`pkgs.apt-dater`,
  "Terminal-based remote package update manager",
);

/**
 * Offline APT package manager
 */
export const apt_offline = mkPackage(
  nixRaw`pkgs.apt-offline`,
  "Offline APT package manager",
);

/**
 * NOAA APT satellite imagery decoding library
 */
export const aptdec = mkPackage(
  nixRaw`pkgs.aptdec`,
  "NOAA APT satellite imagery decoding library",
);

/**
 * Debian repository management tool
 */
export const aptly = mkPackage(
  nixRaw`pkgs.aptly`,
  "Debian repository management tool",
);

/**
 * PulseAudio emulation for ALSA
 */
export const apulse = mkPackage(
  nixRaw`pkgs.apulse`,
  "PulseAudio emulation for ALSA",
);

/**
 * PDF viewer with Vim-like behaviour
 */
export const apvlv = mkPackage(
  nixRaw`pkgs.apvlv`,
  "PDF viewer with Vim-like behaviour",
);

/**
 * The Vanilla OS package manager
 */
export const apx = mkPackage(
  nixRaw`pkgs.apx`,
  "The Vanilla OS package manager",
);

/**
 * An interface to banking tasks, file formats and country information
 */
export const aqbanking = mkPackage(
  nixRaw`pkgs.aqbanking`,
  "An interface to banking tasks, file formats and country information",
);

/**
 * Sharp Aquos television RS-232 control application
 */
export const aquosctl = mkPackage(
  nixRaw`pkgs.aquosctl`,
  "Sharp Aquos television RS-232 control application",
);

/**
 * Place and route tool for FPGAs
 */
export const arachne_pnr = mkPackage(
  nixRaw`pkgs.arachne-pnr`,
  "Place and route tool for FPGAs",
);

/**
 * Detects tRNA, mtRNA, and tmRNA genes in nucleotide sequences
 */
export const aragorn = mkPackage(
  nixRaw`pkgs.aragorn`,
  "Detects tRNA, mtRNA, and tmRNA genes in nucleotide sequences",
);

/**
 * A simple visual front end for XRandR
 */
export const arandr = mkPackage(
  nixRaw`pkgs.arandr`,
  "A simple visual front end for XRandR",
);

/**
 * A native multi-model database with flexible data models for documents, graphs, and key-values
 */
export const arangodb = mkPackage(
  nixRaw`pkgs.arangodb`,
  "A native multi-model database with flexible data models for documents, graphs, and key-values",
);

/**
 * Library for video acquisition using GenICam cameras
 */
export const aravis = mkPackage(
  nixRaw`pkgs.aravis`,
  "Library for video acquisition using GenICam cameras",
);

/**
 * A library for arbitrary-precision interval arithmetic
 */
export const arb = mkPackage(
  nixRaw`pkgs.arb`,
  "A library for arbitrary-precision interval arithmetic",
);

/**
 * Arc icon theme
 */
export const arc_icon_theme = mkPackage(
  nixRaw`pkgs.arc-icon-theme`,
  "Arc icon theme",
);

/**
 * A port of the arc theme for Plasma
 */
export const arc_kde_theme = mkPackage(
  nixRaw`pkgs.arc-kde-theme`,
  "A port of the arc theme for Plasma",
);

/**
 * Flat theme with transparent elements for GTK 3, GTK 2 and Gnome Shell
 */
export const arc_theme = mkPackage(
  nixRaw`pkgs.arc-theme`,
  "Flat theme with transparent elements for GTK 3, GTK 2 and Gnome Shell",
);

/**
 * A tool to extract files from visual novel archives
 */
export const arc_unpacker = mkPackage(
  nixRaw`pkgs.arc_unpacker`,
  "A tool to extract files from visual novel archives",
);

/**
 * Command line interface to Phabricator
 */
export const arcanist = mkPackage(
  nixRaw`pkgs.arcanist`,
  "Command line interface to Phabricator",
);

/**
 * Useful scripts for installing Arch Linux
 */
export const arch_install_scripts = mkPackage(
  nixRaw`pkgs.arch-install-scripts`,
  "Useful scripts for installing Arch Linux",
);

/**
 * ArchiMate modelling toolkit
 */
export const archi = mkPackage(
  nixRaw`pkgs.archi`,
  "ArchiMate modelling toolkit",
);

/**
 * GNU package for semiconductor device simulations
 */
export const archimedes = mkPackage(
  nixRaw`pkgs.archimedes`,
  "GNU package for semiconductor device simulations",
);

/**
 * Open source self-hosted web archiving
 */
export const archivebox = mkPackage(
  nixRaw`pkgs.archivebox`,
  "Open source self-hosted web archiving",
);

/**
 * Gateway between FUSE and libarchive: allows mounting of cpio, .tar.gz, .tar.bz2 archives
 */
export const archivemount = mkPackage(
  nixRaw`pkgs.archivemount`,
  "Gateway between FUSE and libarchive: allows mounting of cpio, .tar.gz, .tar.bz2 archives",
);

/**
 * An advanced PostgreSQL-based IMAP/POP server
 */
export const archiveopteryx = mkPackage(
  nixRaw`pkgs.archiveopteryx`,
  "An advanced PostgreSQL-based IMAP/POP server",
);

/**
 * Easily create & extract archives, and compress & decompress files of various formats
 */
export const archiver = mkPackage(
  nixRaw`pkgs.archiver`,
  "Easily create & extract archives, and compress & decompress files of various formats",
);

/**
 * Self-hosted knowledge repository
 */
export const archivy = mkPackage(
  nixRaw`pkgs.archivy`,
  "Self-hosted knowledge repository",
);

/**
 * Multi-track hard disk recording software
 */
export const ardour = mkPackage(
  nixRaw`pkgs.ardour`,
  "Multi-track hard disk recording software",
);

/**
 * Multi-track hard disk recording software
 */
export const ardour_7 = mkPackage(
  nixRaw`pkgs.ardour_7`,
  "Multi-track hard disk recording software",
);

/**
 * Open-source electronics prototyping platform
 */
export const arduino = mkPackage(
  nixRaw`pkgs.arduino`,
  "Open-source electronics prototyping platform",
);

/**
 * A tool for uploading programs to Arduino boards over a network
 */
export const arduinoOTA = mkPackage(
  nixRaw`pkgs.arduinoOTA`,
  "A tool for uploading programs to Arduino boards over a network",
);

/**
 * CI for Arduino Libraries
 */
export const arduino_ci = mkPackage(
  nixRaw`pkgs.arduino-ci`,
  "CI for Arduino Libraries",
);

/**
 * Arduino from the command line
 */
export const arduino_cli = mkPackage(
  nixRaw`pkgs.arduino-cli`,
  "Arduino from the command line",
);

/**
 * Open-source electronics prototyping platform
 */
export const arduino_core = mkPackage(
  nixRaw`pkgs.arduino-core`,
  "Open-source electronics prototyping platform",
);

/**
 * Open-source electronics prototyping platform
 */
export const arduino_core_unwrapped = mkPackage(
  nixRaw`pkgs.arduino-core-unwrapped`,
  "Open-source electronics prototyping platform",
);

/**
 * An Arduino Language Server based on Clangd to Arduino code autocompletion
 */
export const arduino_language_server = mkPackage(
  nixRaw`pkgs.arduino-language-server`,
  "An Arduino Language Server based on Clangd to Arduino code autocompletion",
);

/**
 * Makefile for Arduino sketches
 */
export const arduino_mk = mkPackage(
  nixRaw`pkgs.arduino-mk`,
  "Makefile for Arduino sketches",
);

        /**
         * An open source facility for XBRL, the eXtensible Business Reporting
Language supporting various standards, exposed through a Python or
REST API and a graphical user interface
         */
export const arelle = mkPackage(
  nixRaw`pkgs.arelle`,
  "An open source facility for XBRL, the eXtensible Business Reporting\nLanguage supporting various standards, exposed through a Python or\nREST API and a graphical user interface",
);

/**
 * Chess GUI for analyzing with and playing against various engines
 */
export const arena = mkPackage(
  nixRaw`pkgs.arena`,
  "Chess GUI for analyzing with and playing against various engines",
);

/**
 * Open-source multi-system emulator with a focus on accuracy and preservation
 */
export const ares = mkPackage(
  nixRaw`pkgs.ares`,
  "Open-source multi-system emulator with a focus on accuracy and preservation",
);

/**
 * Automated decoding of encrypted text without knowing the key or ciphers used
 */
export const ares_rs = mkPackage(
  nixRaw`pkgs.ares-rs`,
  "Automated decoding of encrypted text without knowing the key or ciphers used",
);

/**
 * Argument Aggregator
 */
export const argagg = mkPackage(
  nixRaw`pkgs.argagg`,
  "Argument Aggregator",
);

/**
 * Bash argument parsing code generator
 */
export const argbash = mkPackage(
  nixRaw`pkgs.argbash`,
  "Bash argument parsing code generator",
);

/**
 * A command-line options, arguments and sub-commands parser for bash
 */
export const argc = mkPackage(
  nixRaw`pkgs.argc`,
  "A command-line options, arguments and sub-commands parser for bash",
);

/**
 * Container native workflow engine for Kubernetes
 */
export const argo = mkPackage(
  nixRaw`pkgs.argo`,
  "Container native workflow engine for Kubernetes",
);

/**
 * Kubernetes Progressive Delivery Controller
 */
export const argo_rollouts = mkPackage(
  nixRaw`pkgs.argo-rollouts`,
  "Kubernetes Progressive Delivery Controller",
);

/**
 * Declarative continuous deployment for Kubernetes
 */
export const argocd = mkPackage(
  nixRaw`pkgs.argocd`,
  "Declarative continuous deployment for Kubernetes",
);

/**
 * ArgoCD Autopilot
 */
export const argocd_autopilot = mkPackage(
  nixRaw`pkgs.argocd-autopilot`,
  "ArgoCD Autopilot",
);

/**
 * An Argo CD plugin to retrieve secrets from Secret Management tools and inject them into Kubernetes secrets
 */
export const argocd_vault_plugin = mkPackage(
  nixRaw`pkgs.argocd-vault-plugin`,
  "An Argo CD plugin to retrieve secrets from Secret Management tools and inject them into Kubernetes secrets",
);

/**
 * A replacement daemon for the Argon One Raspberry Pi case
 */
export const argononed = mkPackage(
  nixRaw`pkgs.argononed`,
  "A replacement daemon for the Argon One Raspberry Pi case",
);

/**
 * Standalone version of arguments parsing functions from Glibc
 */
export const argp_standalone = mkPackage(
  nixRaw`pkgs.argp-standalone`,
  "Standalone version of arguments parsing functions from Glibc",
);

/**
 * Argument Parser for Modern C++
 */
export const argparse = mkPackage(
  nixRaw`pkgs.argparse`,
  "Argument Parser for Modern C++",
);

/**
 * A single-file, ANSI C command-line parsing library
 */
export const argtable = mkPackage(
  nixRaw`pkgs.argtable`,
  "A single-file, ANSI C command-line parsing library",
);

/**
 * Library for argument handling for MINC programs
 */
export const arguments_ = mkPackage(
  nixRaw`pkgs.arguments`,
  "Library for argument handling for MINC programs",
);

/**
 * Audit Record Generation and Utilization System for networks
 */
export const argus = mkPackage(
  nixRaw`pkgs.argus`,
  "Audit Record Generation and Utilization System for networks",
);

/**
 * Clients for ARGUS
 */
export const argus_clients = mkPackage(
  nixRaw`pkgs.argus-clients`,
  "Clients for ARGUS",
);

/**
 * Color management system (compatible with ICC)
 */
export const argyllcms = mkPackage(
  nixRaw`pkgs.argyllcms`,
  "Color management system (compatible with ICC)",
);

/**
 * A lightweight, multi-protocol, multi-source, command-line download utility
 */
export const aria = mkPackage(
  nixRaw`pkgs.aria`,
  "A lightweight, multi-protocol, multi-source, command-line download utility",
);

/**
 * A lightweight, multi-protocol, multi-source, command-line download utility
 */
export const aria2 = mkPackage(
  nixRaw`pkgs.aria2`,
  "A lightweight, multi-protocol, multi-source, command-line download utility",
);

/**
 * a modern web frontend making aria2 easier to use
 */
export const ariang = mkPackage(
  nixRaw`pkgs.ariang`,
  "a modern web frontend making aria2 easier to use",
);

/**
 * Sample implementation of the ARIB STD-B25 standard
 */
export const aribb25 = mkPackage(
  nixRaw`pkgs.aribb25`,
  "Sample implementation of the ARIB STD-B25 standard",
);

/**
 * GTK client for MPD (Music player daemon)
 */
export const ario = mkPackage(
  nixRaw`pkgs.ario`,
  "GTK client for MPD (Music player daemon)",
);

/**
 * Run docker-compose with help from Nix/NixOS
 */
export const arion = mkPackage(
  nixRaw`pkgs.arion`,
  "Run docker-compose with help from Nix/NixOS",
);

/**
 * Open-source implementation of the world-famous ARJ archiver
 */
export const arj = mkPackage(
  nixRaw`pkgs.arj`,
  "Open-source implementation of the world-famous ARJ archiver",
);

/**
 * HTTP parameter discovery suite
 */
export const arjun = mkPackage(
  nixRaw`pkgs.arjun`,
  "HTTP parameter discovery suite",
);

/**
 * Open Source Kubernetes Marketplace
 */
export const arkade = mkPackage(
  nixRaw`pkgs.arkade`,
  "Open Source Kubernetes Marketplace",
);

/**
 * Font, metrically identical to Arial and Times New Roman
 */
export const arkpandora_ttf = mkPackage(
  nixRaw`pkgs.arkpandora_ttf`,
  "Font, metrically identical to Arial and Times New Roman",
);

/**
 * A reference implementation of secure world software for ARMv8-A
 */
export const armTrustedFirmwareAllwinner = mkPackage(
  nixRaw`pkgs.armTrustedFirmwareAllwinner`,
  "A reference implementation of secure world software for ARMv8-A",
);

/**
 * A reference implementation of secure world software for ARMv8-A
 */
export const armTrustedFirmwareAllwinnerH6 = mkPackage(
  nixRaw`pkgs.armTrustedFirmwareAllwinnerH6`,
  "A reference implementation of secure world software for ARMv8-A",
);

/**
 * A reference implementation of secure world software for ARMv8-A
 */
export const armTrustedFirmwareAllwinnerH616 = mkPackage(
  nixRaw`pkgs.armTrustedFirmwareAllwinnerH616`,
  "A reference implementation of secure world software for ARMv8-A",
);

/**
 * A reference implementation of secure world software for ARMv8-A
 */
export const armTrustedFirmwareQemu = mkPackage(
  nixRaw`pkgs.armTrustedFirmwareQemu`,
  "A reference implementation of secure world software for ARMv8-A",
);

/**
 * A reference implementation of secure world software for ARMv8-A
 */
export const armTrustedFirmwareRK3328 = mkPackage(
  nixRaw`pkgs.armTrustedFirmwareRK3328`,
  "A reference implementation of secure world software for ARMv8-A",
);

/**
 * A reference implementation of secure world software for ARMv8-A
 */
export const armTrustedFirmwareRK3399 = mkPackage(
  nixRaw`pkgs.armTrustedFirmwareRK3399`,
  "A reference implementation of secure world software for ARMv8-A",
);

/**
 * A reference implementation of secure world software for ARMv8-A
 */
export const armTrustedFirmwareS905 = mkPackage(
  nixRaw`pkgs.armTrustedFirmwareS905`,
  "A reference implementation of secure world software for ARMv8-A",
);

/**
 * A reference implementation of secure world software for ARMv8-A
 */
export const armTrustedFirmwareTools = mkPackage(
  nixRaw`pkgs.armTrustedFirmwareTools`,
  "A reference implementation of secure world software for ARMv8-A",
);

/**
 * C++ linear algebra library
 */
export const armadillo = mkPackage(
  nixRaw`pkgs.armadillo`,
  "C++ linear algebra library",
);

/**
 * A multiplayer networked arcade racing game in 3D similar to Tron
 */
export const armagetronad = mkPackage(
  nixRaw`pkgs.armagetronad`,
  "A multiplayer networked arcade racing game in 3D similar to Tron",
);

/**
 * A multiplayer networked arcade racing game in 3D similar to Tron
 */
export const armagetronad_dedicated = mkPackage(
  nixRaw`pkgs.armagetronad-dedicated`,
  "A multiplayer networked arcade racing game in 3D similar to Tron",
);

/**
 * Firmware from Armbian
 */
export const armbian_firmware = mkPackage(
  nixRaw`pkgs.armbian-firmware`,
  "Firmware from Armbian",
);

/**
 * Lightweight, alternative desktop client for Discord
 */
export const armcord = mkPackage(
  nixRaw`pkgs.armcord`,
  "Lightweight, alternative desktop client for Discord",
);

/**
 * Assembler for various ARM and MIPS platforms.
 */
export const armips = mkPackage(
  nixRaw`pkgs.armips`,
  "Assembler for various ARM and MIPS platforms.",
);

/**
 * ARP scanning and fingerprinting tool
 */
export const arp_scan = mkPackage(
  nixRaw`pkgs.arp-scan`,
  "ARP scanning and fingerprinting tool",
);

/**
 * CMake Module library for the ARPA2 project
 */
export const arpa2cm = mkPackage(
  nixRaw`pkgs.arpa2cm`,
  "CMake Module library for the ARPA2 project",
);

/**
 * ARPA2 ID and ACL libraries and other core data structures for ARPA2
 */
export const arpa2common = mkPackage(
  nixRaw`pkgs.arpa2common`,
  "ARPA2 ID and ACL libraries and other core data structures for ARPA2",
);

        /**
         * A collection of Fortran77 subroutines to solve large scale eigenvalue
problems.

         */
export const arpack = mkPackage(
  nixRaw`pkgs.arpack`,
  "A collection of Fortran77 subroutines to solve large scale eigenvalue\nproblems.\n",
);

/**
 * CJK Unicode font Kai style
 */
export const arphic_ukai = mkPackage(
  nixRaw`pkgs.arphic-ukai`,
  "CJK Unicode font Kai style",
);

/**
 * CJK Unicode font Ming style
 */
export const arphic_uming = mkPackage(
  nixRaw`pkgs.arphic-uming`,
  "CJK Unicode font Ming style",
);

/**
 * Broadcasts a who-has ARP packet on the network and prints answers
 */
export const arping = mkPackage(
  nixRaw`pkgs.arping`,
  "Broadcasts a who-has ARP packet on the network and prints answers",
);

/**
 * UNIX arp cache update utility
 */
export const arpoison = mkPackage(
  nixRaw`pkgs.arpoison`,
  "UNIX arp cache update utility",
);

/**
 * A general-purpose library for parallel and massively-parallel computations
 */
export const arrayfire = mkPackage(
  nixRaw`pkgs.arrayfire`,
  "A general-purpose library for parallel and massively-parallel computations",
);

/**
 * A cross-language development platform for in-memory data
 */
export const arrow_cpp = mkPackage(
  nixRaw`pkgs.arrow-cpp`,
  "A cross-language development platform for in-memory data",
);

/**
 * GLib bindings for Apache Arrow
 */
export const arrow_glib = mkPackage(
  nixRaw`pkgs.arrow-glib`,
  "GLib bindings for Apache Arrow",
);

/**
 * Open Discord RPC server for atypical setups
 */
export const arrpc = mkPackage(
  nixRaw`pkgs.arrpc`,
  "Open Discord RPC server for atypical setups",
);

/**
 * Tool to generate commands for security and network tools
 */
export const arsenal = mkPackage(
  nixRaw`pkgs.arsenal`,
  "Tool to generate commands for security and network tools",
);

/**
 * A small CLI program to convert images to ASCII art
 */
export const artem = mkPackage(
  nixRaw`pkgs.artem`,
  "A small CLI program to convert images to ASCII art",
);

/**
 * An offline thesaurus based on WordNet
 */
export const artha = mkPackage(
  nixRaw`pkgs.artha`,
  "An offline thesaurus based on WordNet",
);

/**
 * An implementation of Tor in Rust
 */
export const arti = mkPackage(
  nixRaw`pkgs.arti`,
  "An implementation of Tor in Rust",
);

/**
 * Dark theme deeply inspired by the Ayu Dark color palette
 */
export const artim_dark = mkPackage(
  nixRaw`pkgs.artim-dark`,
  "Dark theme deeply inspired by the Ayu Dark color palette",
);

/**
 * A LV2 plugin bundle of artistic realtime effects
 */
export const artyFX = mkPackage(
  nixRaw`pkgs.artyFX`,
  "A LV2 plugin bundle of artistic realtime effects",
);

/**
 * Extract TOTP seed instead of using ArubaOTP app
 */
export const arubaotp_seed_extractor = mkPackage(
  nixRaw`pkgs.arubaotp-seed-extractor`,
  "Extract TOTP seed instead of using ArubaOTP app",
);

        /**
         * A cross-platform, open source port of Arx Fatalis, a 2002
first-person role-playing game / dungeon crawler
developed by Arkane Studios.

         */
export const arx_libertatis = mkPackage(
  nixRaw`pkgs.arx-libertatis`,
  "A cross-platform, open source port of Arx Fatalis, a 2002\nfirst-person role-playing game / dungeon crawler\ndeveloped by Arkane Studios.\n",
);

/**
 * Easily clean the LaTeX code of your paper to submit to arXiv
 */
export const arxiv_latex_cleaner = mkPackage(
  nixRaw`pkgs.arxiv-latex-cleaner`,
  "Easily clean the LaTeX code of your paper to submit to arXiv",
);

/**
 * An 8031/8051 assembler
 */
export const as31 = mkPackage(
  nixRaw`pkgs.as31`,
  "An 8031/8051 assembler",
);

/**
 * Print a list of paths as a tree of paths
 */
export const as_tree = mkPackage(
  nixRaw`pkgs.as-tree`,
  "Print a list of paths as a tree of paths",
);

/**
 * Another Slight Atari Player
 */
export const asap = mkPackage(
  nixRaw`pkgs.asap`,
  "Another Slight Atari Player",
);

/**
 * Simple extensive tar-like archive format with indexing
 */
export const asar = mkPackage(
  nixRaw`pkgs.asar`,
  "Simple extensive tar-like archive format with indexing",
);

/**
 * Turn based strategy game
 */
export const asc = mkPackage(
  nixRaw`pkgs.asc`,
  "Turn based strategy game",
);

/**
 * Convert ASCII-armored PGP keys to animated QR code
 */
export const asc_key_to_qr_code_gif = mkPackage(
  nixRaw`pkgs.asc-key-to-qr-code-gif`,
  "Convert ASCII-armored PGP keys to animated QR code",
);

/**
 * Interactive ASCII name and synonym chart
 */
export const ascii = mkPackage(
  nixRaw`pkgs.ascii`,
  "Interactive ASCII name and synonym chart",
);

/**
 * Convert images into ASCII art on the console
 */
export const ascii_image_converter = mkPackage(
  nixRaw`pkgs.ascii-image-converter`,
  "Convert images into ASCII art on the console",
);

/**
 * Displays your webcam on the terminal
 */
export const asciicam = mkPackage(
  nixRaw`pkgs.asciicam`,
  "Displays your webcam on the terminal",
);

/**
 * Text-based document generation system
 */
export const asciidoc = mkPackage(
  nixRaw`pkgs.asciidoc`,
  "Text-based document generation system",
);

/**
 * Text-based document generation system
 */
export const asciidoc_full = mkPackage(
  nixRaw`pkgs.asciidoc-full`,
  "Text-based document generation system",
);

/**
 * Text-based document generation system
 */
export const asciidoc_full_with_plugins = mkPackage(
  nixRaw`pkgs.asciidoc-full-with-plugins`,
  "Text-based document generation system",
);

/**
 * A faster Asciidoc processor written in Ruby
 */
export const asciidoctor = mkPackage(
  nixRaw`pkgs.asciidoctor`,
  "A faster Asciidoc processor written in Ruby",
);

/**
 * A faster Asciidoc processor written in Ruby, with many extensions enabled
 */
export const asciidoctor_with_extensions = mkPackage(
  nixRaw`pkgs.asciidoctor-with-extensions`,
  "A faster Asciidoc processor written in Ruby, with many extensions enabled",
);

/**
 * Official library for running Asciidoctor on the JVM
 */
export const asciidoctorj = mkPackage(
  nixRaw`pkgs.asciidoctorj`,
  "Official library for running Asciidoctor on the JVM",
);

/**
 * Lightweight ASCII line graph ╭┈╯ command line app
 */
export const asciigraph = mkPackage(
  nixRaw`pkgs.asciigraph`,
  "Lightweight ASCII line graph ╭┈╯ command line app",
);

/**
 * Terminal session recorder and the best companion of asciinema.org
 */
export const asciinema = mkPackage(
  nixRaw`pkgs.asciinema`,
  "Terminal session recorder and the best companion of asciinema.org",
);

/**
 * A command-line tool for generating animated GIF files from asciicast v2 files produced by asciinema terminal recorder
 */
export const asciinema_agg = mkPackage(
  nixRaw`pkgs.asciinema-agg`,
  "A command-line tool for generating animated GIF files from asciicast v2 files produced by asciinema terminal recorder",
);

/**
 * Create asciinema videos from a text file
 */
export const asciinema_scenario = mkPackage(
  nixRaw`pkgs.asciinema-scenario`,
  "Create asciinema videos from a text file",
);

/**
 * Enjoy the mysteries of the sea from the safety of your own terminal!
 */
export const asciiquarium = mkPackage(
  nixRaw`pkgs.asciiquarium`,
  "Enjoy the mysteries of the sea from the safety of your own terminal!",
);

/**
 * An aquarium/sea animation in ASCII art (with option of transparent background)
 */
export const asciiquarium_transparent = mkPackage(
  nixRaw`pkgs.asciiquarium-transparent`,
  "An aquarium/sea animation in ASCII art (with option of transparent background)",
);

/**
 * Standard software-system definition library for Common Lisp
 */
export const asdf = mkPackage(
  nixRaw`pkgs.asdf`,
  "Standard software-system definition library for Common Lisp",
);

/**
 * Standard software-system definition library for Common Lisp
 */
export const asdf_2_26 = mkPackage(
  nixRaw`pkgs.asdf_2_26`,
  "Standard software-system definition library for Common Lisp",
);

/**
 * Standard software-system definition library for Common Lisp
 */
export const asdf_3_1 = mkPackage(
  nixRaw`pkgs.asdf_3_1`,
  "Standard software-system definition library for Common Lisp",
);

/**
 * Standard software-system definition library for Common Lisp
 */
export const asdf_3_3 = mkPackage(
  nixRaw`pkgs.asdf_3_3`,
  "Standard software-system definition library for Common Lisp",
);

/**
 * Extendable version manager with support for Ruby, Node.js, Erlang & more
 */
export const asdf_vm = mkPackage(
  nixRaw`pkgs.asdf-vm`,
  "Extendable version manager with support for Ruby, Node.js, Erlang & more",
);

/**
 * Animated sprite editor & pixel art tool
 */
export const aseprite = mkPackage(
  nixRaw`pkgs.aseprite`,
  "Animated sprite editor & pixel art tool",
);

/**
 * Listens for MIDI events on the Alsa sequencer and outputs as JSON to stdout
 */
export const aseq2json = mkPackage(
  nixRaw`pkgs.aseq2json`,
  "Listens for MIDI events on the Alsa sequencer and outputs as JSON to stdout",
);

/**
 * Tool for playing with XDG desktop portals
 */
export const ashpd_demo = mkPackage(
  nixRaw`pkgs.ashpd-demo`,
  "Tool for playing with XDG desktop portals",
);

/**
 * Automatic library-wide shuffle for mpd
 */
export const ashuffle = mkPackage(
  nixRaw`pkgs.ashuffle`,
  "Automatic library-wide shuffle for mpd",
);

/**
 * Cross-platform C++ library for network and low-level I/O programming
 */
export const asio = mkPackage(
  nixRaw`pkgs.asio`,
  "Cross-platform C++ library for network and low-level I/O programming",
);

/**
 * Cross-platform C++ library for network and low-level I/O programming
 */
export const asio_1_10 = mkPackage(
  nixRaw`pkgs.asio_1_10`,
  "Cross-platform C++ library for network and low-level I/O programming",
);

/**
 * Perf monitoring CLI tool for Apple Silicon
 */
export const asitop = mkPackage(
  nixRaw`pkgs.asitop`,
  "Perf monitoring CLI tool for Apple Silicon",
);

/**
 * A tool to detect open source licenses from texts
 */
export const askalono = mkPackage(
  nixRaw`pkgs.askalono`,
  "A tool to detect open source licenses from texts",
);

/**
 * Portable macro cross assembler
 */
export const asl = mkPackage(
  nixRaw`pkgs.asl`,
  "Portable macro cross assembler",
);

/**
 * Recovers weak LEAP and PPTP passwords
 */
export const asleap = mkPackage(
  nixRaw`pkgs.asleap`,
  "Recovers weak LEAP and PPTP passwords",
);

/**
 * Go assembler formatter
 */
export const asmfmt = mkPackage(
  nixRaw`pkgs.asmfmt`,
  "Go assembler formatter",
);

/**
 * Machine code generation for C++
 */
export const asmjit = mkPackage(
  nixRaw`pkgs.asmjit`,
  "Machine code generation for C++",
);

/**
 * A REPL for x86-64 assembly language
 */
export const asmrepl = mkPackage(
  nixRaw`pkgs.asmrepl`,
  "A REPL for x86-64 assembly language",
);

/**
 * OSINT command line tool for investigating network data
 */
export const asn = mkPackage(
  nixRaw`pkgs.asn`,
  "OSINT command line tool for investigating network data",
);

/**
 * Open Source ASN.1 Compiler
 */
export const asn1c = mkPackage(
  nixRaw`pkgs.asn1c`,
  "Open Source ASN.1 Compiler",
);

/**
 * An ASN.1 compiler with a backend for Quick DER
 */
export const asn2quickder = mkPackage(
  nixRaw`pkgs.asn2quickder`,
  "An ASN.1 compiler with a backend for Quick DER",
);

/**
 * Tool to gather network ranges using ASN information
 */
export const asnmap = mkPackage(
  nixRaw`pkgs.asnmap`,
  "Tool to gather network ranges using ASN information",
);

/**
 * Web server for multi-language, real-time synchronization and searchable documentation
 */
export const asouldocs = mkPackage(
  nixRaw`pkgs.asouldocs`,
  "Web server for multi-language, real-time synchronization and searchable documentation",
);

/**
 * Solver for package problems in CUDF format using ASP
 */
export const aspcud = mkPackage(
  nixRaw`pkgs.aspcud`,
  "Solver for package problems in CUDF format using ASP",
);

/**
 * A seamless aspect-oriented extension to the Java programming language
 */
export const aspectj = mkPackage(
  nixRaw`pkgs.aspectj`,
  "A seamless aspect-oriented extension to the Java programming language",
);

/**
 * Spell checker for many languages
 */
export const aspell = mkPackage(
  nixRaw`pkgs.aspell`,
  "Spell checker for many languages",
);

/**
 * SAT/PseudoBoolean/MaxSat/ASP solver using glucose
 */
export const aspino = mkPackage(
  nixRaw`pkgs.aspino`,
  "SAT/PseudoBoolean/MaxSat/ASP solver using glucose",
);

/**
 * Fast and fun first-person-shooter based on the Cube fps
 */
export const assaultcube = mkPackage(
  nixRaw`pkgs.assaultcube`,
  "Fast and fun first-person-shooter based on the Cube fps",
);

/**
 * A TypeScript-like language for WebAssembly
 */
export const assemblyscript = mkPackage(
  nixRaw`pkgs.assemblyscript`,
  "A TypeScript-like language for WebAssembly",
);

/**
 * Advanced SSH config - Regex, aliases, gateways, includes and dynamic hosts
 */
export const assh = mkPackage(
  nixRaw`pkgs.assh`,
  "Advanced SSH config - Regex, aliases, gateways, includes and dynamic hosts",
);

/**
 * Assigns loadBalancerIP address to a Kubernetes service for testing purposes
 */
export const assign_lb_ip = mkPackage(
  nixRaw`pkgs.assign-lb-ip`,
  "Assigns loadBalancerIP address to a Kubernetes service for testing purposes",
);

/**
 * A library to import various 3D model formats
 */
export const assimp = mkPackage(
  nixRaw`pkgs.assimp`,
  "A library to import various 3D model formats",
);

/**
 * Neo-Assyrian in Unicode with OpenType
 */
export const assyrian = mkPackage(
  nixRaw`pkgs.assyrian`,
  "Neo-Assyrian in Unicode with OpenType",
);

/**
 * A fast and polyglot tool for code searching, linting, rewriting at large scale
 */
export const ast_grep = mkPackage(
  nixRaw`pkgs.ast-grep`,
  "A fast and polyglot tool for code searching, linting, rewriting at large scale",
);

/**
 * An encoder for the ASTC texture compression format
 */
export const astc_encoder = mkPackage(
  nixRaw`pkgs.astc-encoder`,
  "An encoder for the ASTC texture compression format",
);

/**
 * Software implementation of a telephone private branch exchange (PBX)
 */
export const asterisk = mkPackage(
  nixRaw`pkgs.asterisk`,
  "Software implementation of a telephone private branch exchange (PBX)",
);

/**
 * Software implementation of a telephone private branch exchange (PBX)
 */
export const asterisk_18 = mkPackage(
  nixRaw`pkgs.asterisk_18`,
  "Software implementation of a telephone private branch exchange (PBX)",
);

/**
 * Software implementation of a telephone private branch exchange (PBX)
 */
export const asterisk_20 = mkPackage(
  nixRaw`pkgs.asterisk_20`,
  "Software implementation of a telephone private branch exchange (PBX)",
);

/**
 * Software implementation of a telephone private branch exchange (PBX)
 */
export const asterisk_ldap = mkPackage(
  nixRaw`pkgs.asterisk-ldap`,
  "Software implementation of a telephone private branch exchange (PBX)",
);

/**
 * Software implementation of a telephone private branch exchange (PBX)
 */
export const asterisk_lts = mkPackage(
  nixRaw`pkgs.asterisk-lts`,
  "Software implementation of a telephone private branch exchange (PBX)",
);

/**
 * Replacement for the SCCP channel driver in Asterisk
 */
export const asterisk_module_sccp = mkPackage(
  nixRaw`pkgs.asterisk-module-sccp`,
  "Replacement for the SCCP channel driver in Asterisk",
);

/**
 * Software implementation of a telephone private branch exchange (PBX)
 */
export const asterisk_stable = mkPackage(
  nixRaw`pkgs.asterisk-stable`,
  "Software implementation of a telephone private branch exchange (PBX)",
);

/**
 * Tool for estimating an unrooted species tree given a set of unrooted gene trees
 */
export const astral = mkPackage(
  nixRaw`pkgs.astral`,
  "Tool for estimating an unrooted species tree given a set of unrooted gene trees",
);

/**
 * GTK frontend to the notmuch mail system
 */
export const astroid = mkPackage(
  nixRaw`pkgs.astroid`,
  "GTK frontend to the notmuch mail system",
);

/**
 * A Java-based tool for generating EPS files for constructing astrolabes and related tools
 */
export const astrolabe_generator = mkPackage(
  nixRaw`pkgs.astrolabe-generator`,
  "A Java-based tool for generating EPS files for constructing astrolabes and related tools",
);

/**
 * Freeware astrology program
 */
export const astrolog = mkPackage(
  nixRaw`pkgs.astrolog`,
  "Freeware astrology program",
);

/**
 * Hardcore 3D space shooter with spaceship upgrade possibilities
 */
export const astromenace = mkPackage(
  nixRaw`pkgs.astromenace`,
  "Hardcore 3D space shooter with spaceship upgrade possibilities",
);

/**
 * A tool to detect illegitimate stars from bot accounts on GitHub projects
 */
export const astronomer = mkPackage(
  nixRaw`pkgs.astronomer`,
  "A tool to detect illegitimate stars from bot accounts on GitHub projects",
);

/**
 * Source code indenter, formatter, and beautifier for C, C++, C# and Java
 */
export const astyle = mkPackage(
  nixRaw`pkgs.astyle`,
  "Source code indenter, formatter, and beautifier for C, C++, C# and Java",
);

/**
 * Gemini Project client written in Rust with NCurses
 */
export const asuka = mkPackage(
  nixRaw`pkgs.asuka`,
  "Gemini Project client written in Rust with NCurses",
);

/**
 * A graphical Audio CD ripper and encoder for Linux
 */
export const asunder = mkPackage(
  nixRaw`pkgs.asunder`,
  "A graphical Audio CD ripper and encoder for Linux",
);

/**
 * A control daemon, CLI tools, and a collection of crates for interacting with ASUS ROG laptops
 */
export const asusctl = mkPackage(
  nixRaw`pkgs.asusctl`,
  "A control daemon, CLI tools, and a collection of crates for interacting with ASUS ROG laptops",
);

/**
 * A tool for programming graphics intended to replace Metapost
 */
export const asymptote = mkPackage(
  nixRaw`pkgs.asymptote`,
  "A tool for programming graphics intended to replace Metapost",
);

/**
 * A tool to parallelize shell commands
 */
export const async = mkPackage(
  nixRaw`pkgs.async`,
  "A tool to parallelize shell commands",
);

/**
 * A low overhead sampling profiler for Java that does not suffer from Safepoint bias problem
 */
export const async_profiler = mkPackage(
  nixRaw`pkgs.async-profiler`,
  "A low overhead sampling profiler for Java that does not suffer from Safepoint bias problem",
);

/**
 * The classical Unix `at' job scheduling command
 */
export const at = mkPackage(
  nixRaw`pkgs.at`,
  "The classical Unix `at' job scheduling command",
);

/**
 * Assistive Technology Service Provider Interface protocol definitions and daemon for D-Bus
 */
export const at_spi2_atk = mkPackage(
  nixRaw`pkgs.at-spi2-atk`,
  "Assistive Technology Service Provider Interface protocol definitions and daemon for D-Bus",
);

/**
 * Assistive Technology Service Provider Interface protocol definitions and daemon for D-Bus
 */
export const at_spi2_core = mkPackage(
  nixRaw`pkgs.at-spi2-core`,
  "Assistive Technology Service Provider Interface protocol definitions and daemon for D-Bus",
);

/**
 * Atomic Tanks ballistics game
 */
export const atanks = mkPackage(
  nixRaw`pkgs.atanks`,
  "Atomic Tanks ballistics game",
);

/**
 * An Atari 8-bit emulator
 */
export const atari800 = mkPackage(
  nixRaw`pkgs.atari800`,
  "An Atari 8-bit emulator",
);

/**
 * An enhanced, cycle-accurated Atari emulator
 */
export const ataripp = mkPackage(
  nixRaw`pkgs.ataripp`,
  "An enhanced, cycle-accurated Atari emulator",
);

/**
 * A commandline 6502 assembler compatible with Mac/65
 */
export const atasm = mkPackage(
  nixRaw`pkgs.atasm`,
  "A commandline 6502 assembler compatible with Mac/65",
);

/**
 * Advanced tftp tools
 */
export const atftp = mkPackage(
  nixRaw`pkgs.atftp`,
  "Advanced tftp tools",
);

/**
 * Blobless, open source wifi firmware for ath9k_htc.ko
 */
export const ath9k_htc_blobless_firmware = mkPackage(
  nixRaw`pkgs.ath9k-htc-blobless-firmware`,
  "Blobless, open source wifi firmware for ath9k_htc.ko",
);

/**
 * Blobless, open source wifi firmware for ath9k_htc.ko
 */
export const ath9k_htc_blobless_firmware_unstable = mkPackage(
  nixRaw`pkgs.ath9k-htc-blobless-firmware-unstable`,
  "Blobless, open source wifi firmware for ath9k_htc.ko",
);

/**
 * A set of services for IRC networks
 */
export const atheme = mkPackage(
  nixRaw`pkgs.atheme`,
  "A set of services for IRC networks",
);

/**
 * Tool for talking to modems
 */
export const atinout = mkPackage(
  nixRaw`pkgs.atinout`,
  "Tool for talking to modems",
);

/**
 * Assistive Technology Service Provider Interface protocol definitions and daemon for D-Bus
 */
export const atk = mkPackage(
  nixRaw`pkgs.atk`,
  "Assistive Technology Service Provider Interface protocol definitions and daemon for D-Bus",
);

/**
 * Typeface designed to offer greater legibility and readability for low vision readers
 */
export const atkinson_hyperlegible = mkPackage(
  nixRaw`pkgs.atkinson-hyperlegible`,
  "Typeface designed to offer greater legibility and readability for low vision readers",
);

/**
 * C++ wrappers for ATK accessibility toolkit
 */
export const atkmm = mkPackage(
  nixRaw`pkgs.atkmm`,
  "C++ wrappers for ATK accessibility toolkit",
);

/**
 * C++ wrappers for ATK accessibility toolkit
 */
export const atkmm_2_36 = mkPackage(
  nixRaw`pkgs.atkmm_2_36`,
  "C++ wrappers for ATK accessibility toolkit",
);

/**
 * Terraform Pull Request Automation
 */
export const atlantis = mkPackage(
  nixRaw`pkgs.atlantis`,
  "Terraform Pull Request Automation",
);

/**
 * A modern tool for managing database schemas
 */
export const atlas = mkPackage(
  nixRaw`pkgs.atlas`,
  "A modern tool for managing database schemas",
);

/**
 * Bamboo Data Center is a continuous delivery server.
 */
export const atlassian_bamboo = mkPackage(
  nixRaw`pkgs.atlassian-bamboo`,
  "Bamboo Data Center is a continuous delivery server.",
);

/**
 * An integrated family of CLI’s for various Atlassian applications
 */
export const atlassian_cli = mkPackage(
  nixRaw`pkgs.atlassian-cli`,
  "An integrated family of CLI’s for various Atlassian applications",
);

/**
 * Team collaboration software written in Java and mainly used in corporate environments
 */
export const atlassian_confluence = mkPackage(
  nixRaw`pkgs.atlassian-confluence`,
  "Team collaboration software written in Java and mainly used in corporate environments",
);

/**
 * Single sign-on and identity management tool
 */
export const atlassian_crowd = mkPackage(
  nixRaw`pkgs.atlassian-crowd`,
  "Single sign-on and identity management tool",
);

/**
 * Proprietary issue tracking product, also providing project management functions
 */
export const atlassian_jira = mkPackage(
  nixRaw`pkgs.atlassian-jira`,
  "Proprietary issue tracking product, also providing project management functions",
);

/**
 * A simple and easy to use Minecraft launcher which contains many different modpacks for you to choose from and play
 */
export const atlauncher = mkPackage(
  nixRaw`pkgs.atlauncher`,
  "A simple and easy to use Minecraft launcher which contains many different modpacks for you to choose from and play",
);

/**
 * Universal Tool for DevOps and Cloud Automation (works with terraform, helm, helmfile, etc)
 */
export const atmos = mkPackage(
  nixRaw`pkgs.atmos`,
  "Universal Tool for DevOps and Cloud Automation (works with terraform, helm, helmfile, etc)",
);

/**
 * Tool to execute Atomic Red Team tests (Atomics)
 */
export const atomic_operator = mkPackage(
  nixRaw`pkgs.atomic-operator`,
  "Tool to execute Atomic Red Team tests (Atomics)",
);

/**
 * ETH-XMR atomic swap implementation
 */
export const atomic_swap = mkPackage(
  nixRaw`pkgs.atomic-swap`,
  "ETH-XMR atomic swap implementation",
);

/**
 * A CLI program for reading, parsing and setting metadata into MPEG-4 files
 */
export const atomicparsley = mkPackage(
  nixRaw`pkgs.atomicparsley`,
  "A CLI program for reading, parsing and setting metadata into MPEG-4 files",
);

/**
 * Archive command line helper
 */
export const atool = mkPackage(
  nixRaw`pkgs.atool`,
  "Archive command line helper",
);

/**
 * Console system performance monitor
 */
export const atop = mkPackage(
  nixRaw`pkgs.atop`,
  "Console system performance monitor",
);

/**
 * Functional programming language with dependent types
 */
export const ats = mkPackage(
  nixRaw`pkgs.ats`,
  "Functional programming language with dependent types",
);

/**
 * Functional programming language with dependent types
 */
export const ats2 = mkPackage(
  nixRaw`pkgs.ats2`,
  "Functional programming language with dependent types",
);

/**
 * Pretty-print error messages of the ATS Compiler
 */
export const ats_acc = mkPackage(
  nixRaw`pkgs.ats-acc`,
  "Pretty-print error messages of the ATS Compiler",
);

/**
 * Large lexicon for APE (~100,000 entries)
 */
export const attemptoClex = mkPackage(
  nixRaw`pkgs.attemptoClex`,
  "Large lexicon for APE (~100,000 entries)",
);

/**
 * Library and tools for manipulating extended attributes
 */
export const attr = mkPackage(
  nixRaw`pkgs.attr`,
  "Library and tools for manipulating extended attributes",
);

/**
 * A frontend for arcade cabinets and media PCs
 */
export const attract_mode = mkPackage(
  nixRaw`pkgs.attract-mode`,
  "A frontend for arcade cabinets and media PCs",
);

/**
 * Replacement for a shell history which records additional commands context with optional encrypted synchronization between machines
 */
export const atuin = mkPackage(
  nixRaw`pkgs.atuin`,
  "Replacement for a shell history which records additional commands context with optional encrypted synchronization between machines",
);

/**
 * Library for audio labelling
 */
export const aubio = mkPackage(
  nixRaw`pkgs.aubio`,
  "Library for audio labelling",
);

/**
 * The aucatctl utility sends MIDI messages to control sndiod and/or aucat volumes
 */
export const aucatctl = mkPackage(
  nixRaw`pkgs.aucatctl`,
  "The aucatctl utility sends MIDI messages to control sndiod and/or aucat volumes",
);

/**
 * Extensible package for writing and formatting TeX files in GNU Emacs and XEmacs
 */
export const auctex = mkPackage(
  nixRaw`pkgs.auctex`,
  "Extensible package for writing and formatting TeX files in GNU Emacs and XEmacs",
);

/**
 * A lightweight and versatile audio player
 */
export const audacious = mkPackage(
  nixRaw`pkgs.audacious`,
  "A lightweight and versatile audio player",
);

/**
 * A lightweight and versatile audio player
 */
export const audaciousQt5 = mkPackage(
  nixRaw`pkgs.audaciousQt5`,
  "A lightweight and versatile audio player",
);

/**
 * Plugins for Audacious music player
 */
export const audacious_plugins = mkPackage(
  nixRaw`pkgs.audacious-plugins`,
  "Plugins for Audacious music player",
);

/**
 * Sound editor with graphical UI
 */
export const audacity = mkPackage(
  nixRaw`pkgs.audacity`,
  "Sound editor with graphical UI",
);

/**
 * A realtime scripted modular audio engine for video games and musical applications
 */
export const audiality2 = mkPackage(
  nixRaw`pkgs.audiality2`,
  "A realtime scripted modular audio engine for video games and musical applications",
);

/**
 * A command line interface for audible package. With the cli you can download your Audible books, cover, chapter files
 */
export const audible_cli = mkPackage(
  nixRaw`pkgs.audible-cli`,
  "A command line interface for audible package. With the cli you can download your Audible books, cover, chapter files",
);

/**
 * Audio recorder for GNOME and Unity Desktops
 */
export const audio_recorder = mkPackage(
  nixRaw`pkgs.audio-recorder`,
  "Audio recorder for GNOME and Unity Desktops",
);

/**
 * Self-hosted audiobook and podcast server
 */
export const audiobookshelf = mkPackage(
  nixRaw`pkgs.audiobookshelf`,
  "Self-hosted audiobook and podcast server",
);

/**
 * Library for reading and writing audio files in various formats
 */
export const audiofile = mkPackage(
  nixRaw`pkgs.audiofile`,
  "Library for reading and writing audio files in various formats",
);

/**
 * C++ program to generate waveform data and render waveform images from audio files
 */
export const audiowaveform = mkPackage(
  nixRaw`pkgs.audiowaveform`,
  "C++ program to generate waveform data and render waveform images from audio files",
);

/**
 * Audit Library
 */
export const audit = mkPackage(
  nixRaw`pkgs.audit`,
  "Audit Library",
);

export const auditBlasHook = mkPackage(
  nixRaw`pkgs.auditBlasHook`,
  "",
);

/**
 * Lightweight shipper for audit data
 */
export const auditbeat = mkPackage(
  nixRaw`pkgs.auditbeat`,
  "Lightweight shipper for audit data",
);

/**
 * Lightweight shipper for audit data
 */
export const auditbeat7 = mkPackage(
  nixRaw`pkgs.auditbeat7`,
  "Lightweight shipper for audit data",
);

/**
 * Auditing and relabeling cross-distribution Linux wheels
 */
export const auditwheel = mkPackage(
  nixRaw`pkgs.auditwheel`,
  "Auditing and relabeling cross-distribution Linux wheels",
);

/**
 * Configuration editing tool
 */
export const augeas = mkPackage(
  nixRaw`pkgs.augeas`,
  "Configuration editing tool",
);

/**
 * An Emmet-like language that produces JSON, TOML, or YAML
 */
export const august = mkPackage(
  nixRaw`pkgs.august`,
  "An Emmet-like language that produces JSON, TOML, or YAML",
);

/**
 * An open source re-implementation of Caesar III. Fork of Julius incorporating gameplay changes
 */
export const augustus = mkPackage(
  nixRaw`pkgs.augustus`,
  "An open source re-implementation of Caesar III. Fork of Julius incorporating gameplay changes",
);

/**
 * Audio mixer for X and the console
 */
export const aumix = mkPackage(
  nixRaw`pkgs.aumix`,
  "Audio mixer for X and the console",
);

/**
 * Aurulent Sans
 */
export const aurulent_sans = mkPackage(
  nixRaw`pkgs.aurulent-sans`,
  "Aurulent Sans",
);

/**
 * Supercharge your developer workflow
 */
export const auth0_cli = mkPackage(
  nixRaw`pkgs.auth0-cli`,
  "Supercharge your developer workflow",
);

/**
 * A Single Sign-On Multi-Factor portal for web apps
 */
export const authelia = mkPackage(
  nixRaw`pkgs.authelia`,
  "A Single Sign-On Multi-Factor portal for web apps",
);

/**
 * Two-factor authentication code generator for GNOME
 */
export const authenticator = mkPackage(
  nixRaw`pkgs.authenticator`,
  "Two-factor authentication code generator for GNOME",
);

/**
 * Scriptable network authentication cracker
 */
export const authoscope = mkPackage(
  nixRaw`pkgs.authoscope`,
  "Scriptable network authentication cracker",
);

/**
 * Twilio Authy two factor authentication desktop application
 */
export const authy = mkPackage(
  nixRaw`pkgs.authy`,
  "Twilio Authy two factor authentication desktop application",
);

/**
 * Automated authorization test tool
 */
export const authz0 = mkPackage(
  nixRaw`pkgs.authz0`,
  "Automated authorization test tool",
);

export const autoPatchelfHook = mkPackage(
  nixRaw`pkgs.autoPatchelfHook`,
  "",
);

/**
 * Automatic CPU speed & power optimizer for Linux
 */
export const auto_cpufreq = mkPackage(
  nixRaw`pkgs.auto-cpufreq`,
  "Automatic CPU speed & power optimizer for Linux",
);

/**
 * Create and manage multiple choice questionnaires with automated marking.
 */
export const auto_multiple_choice = mkPackage(
  nixRaw`pkgs.auto-multiple-choice`,
  "Create and manage multiple choice questionnaires with automated marking.",
);

/**
 * Execute a command whenever a device is adb-connected
 */
export const autoadb = mkPackage(
  nixRaw`pkgs.autoadb`,
  "Execute a command whenever a device is adb-connected",
);

/**
 * Continuous integration tool
 */
export const autobuild = mkPackage(
  nixRaw`pkgs.autobuild`,
  "Continuous integration tool",
);

/**
 * Part of the GNU Build System
 */
export const autoconf = mkPackage(
  nixRaw`pkgs.autoconf`,
  "Part of the GNU Build System",
);

/**
 * Part of the GNU Build System
 */
export const autoconf213 = mkPackage(
  nixRaw`pkgs.autoconf213`,
  "Part of the GNU Build System",
);

/**
 * Part of the GNU Build System
 */
export const autoconf264 = mkPackage(
  nixRaw`pkgs.autoconf264`,
  "Part of the GNU Build System",
);

/**
 * Part of the GNU Build System
 */
export const autoconf269 = mkPackage(
  nixRaw`pkgs.autoconf269`,
  "Part of the GNU Build System",
);

/**
 * Part of the GNU Build System
 */
export const autoconf271 = mkPackage(
  nixRaw`pkgs.autoconf271`,
  "Part of the GNU Build System",
);

/**
 * Archive of autoconf m4 macros
 */
export const autoconf_archive = mkPackage(
  nixRaw`pkgs.autoconf-archive`,
  "Archive of autoconf m4 macros",
);

/**
 * A linter and formatter for help you improve copywriting, to correct spaces, punctuations between CJK (Chinese, Japanese, Korean)
 */
export const autocorrect = mkPackage(
  nixRaw`pkgs.autocorrect`,
  "A linter and formatter for help you improve copywriting, to correct spaces, punctuations between CJK (Chinese, Japanese, Korean)",
);

/**
 * Tracks changes in the server's cutbuffer and CLIPBOARD selection
 */
export const autocutsel = mkPackage(
  nixRaw`pkgs.autocutsel`,
  "Tracks changes in the server's cutbuffer and CLIPBOARD selection",
);

/**
 * One of the fastest and most widely used open-source docking engines
 */
export const autodock_vina = mkPackage(
  nixRaw`pkgs.autodock-vina`,
  "One of the fastest and most widely used open-source docking engines",
);

/**
 * Tool to remove unused imports and unused variables
 */
export const autoflake = mkPackage(
  nixRaw`pkgs.autoflake`,
  "Tool to remove unused imports and unused variables",
);

/**
 * Kernel-based automounter
 */
export const autofs5 = mkPackage(
  nixRaw`pkgs.autofs5`,
  "Kernel-based automounter",
);

/**
 * Automated text and program generation tool
 */
export const autogen = mkPackage(
  nixRaw`pkgs.autogen`,
  "Automated text and program generation tool",
);

/**
 * A `cd' command that learns
 */
export const autojump = mkPackage(
  nixRaw`pkgs.autojump`,
  "A `cd' command that learns",
);

/**
 * Desktop automation utility for Linux and X11
 */
export const autokey = mkPackage(
  nixRaw`pkgs.autokey`,
  "Desktop automation utility for Linux and X11",
);

/**
 * GNU standard-compliant makefile generator
 */
export const automake = mkPackage(
  nixRaw`pkgs.automake`,
  "GNU standard-compliant makefile generator",
);

/**
 * GNU standard-compliant makefile generator
 */
export const automake111x = mkPackage(
  nixRaw`pkgs.automake111x`,
  "GNU standard-compliant makefile generator",
);

/**
 * GNU standard-compliant makefile generator
 */
export const automake115x = mkPackage(
  nixRaw`pkgs.automake115x`,
  "GNU standard-compliant makefile generator",
);

/**
 * GNU standard-compliant makefile generator
 */
export const automake116x = mkPackage(
  nixRaw`pkgs.automake116x`,
  "GNU standard-compliant makefile generator",
);

/**
 * Automatically update system timezone based on location
 */
export const automatic_timezoned = mkPackage(
  nixRaw`pkgs.automatic-timezoned`,
  "Automatically update system timezone based on location",
);

/**
 * Toolkit to automatically generate software components: abstract API, implementation stubs and language bindings
 */
export const automaticcomponenttoolkit = mkPackage(
  nixRaw`pkgs.automaticcomponenttoolkit`,
  "Toolkit to automatically generate software components: abstract API, implementation stubs and language bindings",
);

/**
 * Automatic Display Mirror
 */
export const automirror = mkPackage(
  nixRaw`pkgs.automirror`,
  "Automatic Display Mirror",
);

/**
 * A script to run daily, weekly and monthly backups for your MySQL database
 */
export const automysqlbackup = mkPackage(
  nixRaw`pkgs.automysqlbackup`,
  "A script to run daily, weekly and monthly backups for your MySQL database",
);

/**
 * Implementation in C of the autopano-sift algorithm for automatically stitching panoramas
 */
export const autopanosiftc = mkPackage(
  nixRaw`pkgs.autopanosiftc`,
  "Implementation in C of the autopano-sift algorithm for automatically stitching panoramas",
);

/**
 * Automatically select a display configuration based on connected devices
 */
export const autorandr = mkPackage(
  nixRaw`pkgs.autorandr`,
  "Automatically select a display configuration based on connected devices",
);

export const autoreconfHook = mkPackage(
  nixRaw`pkgs.autoreconfHook`,
  "",
);

export const autoreconfHook264 = mkPackage(
  nixRaw`pkgs.autoreconfHook264`,
  "",
);

export const autoreconfHook269 = mkPackage(
  nixRaw`pkgs.autoreconfHook269`,
  "",
);

/**
 * High level CLI utility for restic
 */
export const autorestic = mkPackage(
  nixRaw`pkgs.autorestic`,
  "High level CLI utility for restic",
);

/**
 * Extracts revision metadata from your VCS repository
 */
export const autorevision = mkPackage(
  nixRaw`pkgs.autorevision`,
  "Extracts revision metadata from your VCS repository",
);

/**
 * Automatically convert your existing AutoScaling groups to up to 90% cheaper spot instances with minimal configuration changes
 */
export const autospotting = mkPackage(
  nixRaw`pkgs.autospotting`,
  "Automatically convert your existing AutoScaling groups to up to 90% cheaper spot instances with minimal configuration changes",
);

/**
 * Automatically restart SSH sessions and tunnels
 */
export const autossh = mkPackage(
  nixRaw`pkgs.autossh`,
  "Automatically restart SSH sessions and tunnels",
);

/**
 * A daemon to automatically suspend and wake up a system
 */
export const autosuspend = mkPackage(
  nixRaw`pkgs.autosuspend`,
  "A daemon to automatically suspend and wake up a system",
);

/**
 * A real-time pitch correction LADSPA plugin (no MIDI control)
 */
export const autotalent = mkPackage(
  nixRaw`pkgs.autotalent`,
  "A real-time pitch correction LADSPA plugin (no MIDI control)",
);

/**
 * Script for sway and i3 to automatically switch the horizontal / vertical window split orientation
 */
export const autotiling = mkPackage(
  nixRaw`pkgs.autotiling`,
  "Script for sway and i3 to automatically switch the horizontal / vertical window split orientation",
);

/**
 * Autotiling for sway (and possibly i3)
 */
export const autotiling_rs = mkPackage(
  nixRaw`pkgs.autotiling-rs`,
  "Autotiling for sway (and possibly i3)",
);

/**
 * Utility for converting bitmap into vector graphics
 */
export const autotrace = mkPackage(
  nixRaw`pkgs.autotrace`,
  "Utility for converting bitmap into vector graphics",
);

/**
 * Experimental console client for the Gemini protocol
 */
export const av_98 = mkPackage(
  nixRaw`pkgs.av-98`,
  "Experimental console client for the Gemini protocol",
);

/**
 * mDNS/DNS-SD implementation
 */
export const avahi = mkPackage(
  nixRaw`pkgs.avahi`,
  "mDNS/DNS-SD implementation",
);

/**
 * mDNS/DNS-SD implementation
 */
export const avahi_compat = mkPackage(
  nixRaw`pkgs.avahi-compat`,
  "mDNS/DNS-SD implementation",
);

/**
 * Go implementation of an Avalanche node
 */
export const avalanchego = mkPackage(
  nixRaw`pkgs.avalanchego`,
  "Go implementation of an Avalanche node",
);

/**
 * .NET assembly browser and decompiler
 */
export const avalonia_ilspy = mkPackage(
  nixRaw`pkgs.avalonia-ilspy`,
  ".NET assembly browser and decompiler",
);

/**
 * Software for controlling RGB keyboard lights on some gaming laptops that use ITE Device(8291) Rev 0.03
 */
export const avell_unofficial_control_center = mkPackage(
  nixRaw`pkgs.avell-unofficial-control-center`,
  "Software for controlling RGB keyboard lights on some gaming laptops that use ITE Device(8291) Rev 0.03",
);

/**
 * Virtual filesystem that allows browsing of compressed files
 */
export const avfs = mkPackage(
  nixRaw`pkgs.avfs`,
  "Virtual filesystem that allows browsing of compressed files",
);

/**
 * Merge YAML/JSON files in a in a convenient fashion
 */
export const aviator = mkPackage(
  nixRaw`pkgs.aviator`,
  "Merge YAML/JSON files in a in a convenient fashion",
);

/**
 * Free video editor designed for simple video editing tasks
 */
export const avidemux = mkPackage(
  nixRaw`pkgs.avidemux`,
  "Free video editor designed for simple video editing tasks",
);

/**
 * A neat notification daemon for Wayland
 */
export const avizo = mkPackage(
  nixRaw`pkgs.avizo`,
  "A neat notification daemon for Wayland",
);

/**
 * The bridge between designers and developers
 */
export const avocode = mkPackage(
  nixRaw`pkgs.avocode`,
  "The bridge between designers and developers",
);

/**
 * Molecule editor and visualizer
 */
export const avogadro2 = mkPackage(
  nixRaw`pkgs.avogadro2`,
  "Molecule editor and visualizer",
);

/**
 * Molecule editor and visualizer
 */
export const avogadrolibs = mkPackage(
  nixRaw`pkgs.avogadrolibs`,
  "Molecule editor and visualizer",
);

/**
 * GUI tool for avrdude
 */
export const avr8burnomat = mkPackage(
  nixRaw`pkgs.avr8burnomat`,
  "GUI tool for avrdude",
);

/**
 * Assembler for the Atmel AVR microcontroller family
 */
export const avra = mkPackage(
  nixRaw`pkgs.avra`,
  "Assembler for the Atmel AVR microcontroller family",
);

/**
 * Command-line tool for programming Atmel AVR microcontrollers
 */
export const avrdude = mkPackage(
  nixRaw`pkgs.avrdude`,
  "Command-line tool for programming Atmel AVR microcontrollers",
);

/**
 * GUI for AVRDUDE (AVR microcontroller programmer)
 */
export const avrdudess = mkPackage(
  nixRaw`pkgs.avrdudess`,
  "GUI for AVRDUDE (AVR microcontroller programmer)",
);

/**
 * a C runtime library for AVR microcontrollers
 */
export const avrlibc = mkPackage(
  nixRaw`pkgs.avrlibc`,
  "a C runtime library for AVR microcontrollers",
);

/**
 * a C runtime library for AVR microcontrollers
 */
export const avrlibcCross = mkPackage(
  nixRaw`pkgs.avrlibcCross`,
  "a C runtime library for AVR microcontrollers",
);

/**
 * A C library which implements parts of the Avro Specification
 */
export const avro_c = mkPackage(
  nixRaw`pkgs.avro-c`,
  "A C library which implements parts of the Avro Specification",
);

/**
 * A C++ library which implements parts of the Avro Specification
 */
export const avro_cpp = mkPackage(
  nixRaw`pkgs.avro-cpp`,
  "A C++ library which implements parts of the Avro Specification",
);

/**
 * Avro command-line tools and utilities
 */
export const avro_tools = mkPackage(
  nixRaw`pkgs.avro-tools`,
  "Avro command-line tools and utilities",
);

/**
 * AIGER model checking for Property Directed Reachability
 */
export const avy = mkPackage(
  nixRaw`pkgs.avy`,
  "AIGER model checking for Property Directed Reachability",
);

/**
 * Tray icon that manages ActivityWatch processes, built with Qt
 */
export const aw_qt = mkPackage(
  nixRaw`pkgs.aw-qt`,
  "Tray icon that manages ActivityWatch processes, built with Qt",
);

/**
 * High-performance implementation of the ActivityWatch server, written in Rust
 */
export const aw_server_rust = mkPackage(
  nixRaw`pkgs.aw-server-rust`,
  "High-performance implementation of the ActivityWatch server, written in Rust",
);

/**
 * Watches keyboard and mouse activity to determine if you are AFK or not (for use with ActivityWatch)
 */
export const aw_watcher_afk = mkPackage(
  nixRaw`pkgs.aw-watcher-afk`,
  "Watches keyboard and mouse activity to determine if you are AFK or not (for use with ActivityWatch)",
);

/**
 * Cross-platform window watcher (for use with ActivityWatch)
 */
export const aw_watcher_window = mkPackage(
  nixRaw`pkgs.aw-watcher-window`,
  "Cross-platform window watcher (for use with ActivityWatch)",
);

/**
 * WIP window and afk watcher for wayland 
 */
export const aw_watcher_window_wayland = mkPackage(
  nixRaw`pkgs.aw-watcher-window-wayland`,
  "WIP window and afk watcher for wayland ",
);

/**
 * Highly configurable, dynamic window manager for X
 */
export const awesome = mkPackage(
  nixRaw`pkgs.awesome`,
  "Highly configurable, dynamic window manager for X",
);

/**
 * A program to generate normal, height, specular or ambient occlusion textures from a single image
 */
export const awesomebump = mkPackage(
  nixRaw`pkgs.awesomebump`,
  "A program to generate normal, height, specular or ambient occlusion textures from a single image",
);

/**
 * A Widget Factory
 */
export const awf = mkPackage(
  nixRaw`pkgs.awf`,
  "A Widget Factory",
);

/**
 * Command line tool to ease AWS CLI authentication against ADFS
 */
export const aws_adfs = mkPackage(
  nixRaw`pkgs.aws-adfs`,
  "Command line tool to ease AWS CLI authentication against ADFS",
);

/**
 * Easily assume AWS roles in your terminal.
 */
export const aws_assume_role = mkPackage(
  nixRaw`pkgs.aws-assume-role`,
  "Easily assume AWS roles in your terminal.",
);

/**
 * Use Azure AD SSO to log into the AWS via CLI
 */
export const aws_azure_login = mkPackage(
  nixRaw`pkgs.aws-azure-login`,
  "Use Azure AD SSO to log into the AWS via CLI",
);

/**
 * C99 library implementation of AWS client-side authentication
 */
export const aws_c_auth = mkPackage(
  nixRaw`pkgs.aws-c-auth`,
  "C99 library implementation of AWS client-side authentication",
);

/**
 * AWS Crypto Abstraction Layer 
 */
export const aws_c_cal = mkPackage(
  nixRaw`pkgs.aws-c-cal`,
  "AWS Crypto Abstraction Layer ",
);

/**
 * AWS SDK for C common core
 */
export const aws_c_common = mkPackage(
  nixRaw`pkgs.aws-c-common`,
  "AWS SDK for C common core",
);

/**
 * C99 implementation of huffman encoding/decoding
 */
export const aws_c_compression = mkPackage(
  nixRaw`pkgs.aws-c-compression`,
  "C99 implementation of huffman encoding/decoding",
);

/**
 * C99 implementation of the vnd.amazon.eventstream content-type
 */
export const aws_c_event_stream = mkPackage(
  nixRaw`pkgs.aws-c-event-stream`,
  "C99 implementation of the vnd.amazon.eventstream content-type",
);

/**
 * C99 implementation of the HTTP/1.1 and HTTP/2 specifications
 */
export const aws_c_http = mkPackage(
  nixRaw`pkgs.aws-c-http`,
  "C99 implementation of the HTTP/1.1 and HTTP/2 specifications",
);

/**
 * AWS SDK for C module for IO and TLS
 */
export const aws_c_io = mkPackage(
  nixRaw`pkgs.aws-c-io`,
  "AWS SDK for C module for IO and TLS",
);

/**
 * C99 implementation of the MQTT 3.1.1 specification
 */
export const aws_c_mqtt = mkPackage(
  nixRaw`pkgs.aws-c-mqtt`,
  "C99 implementation of the MQTT 3.1.1 specification",
);

/**
 * C99 library implementation for communicating with the S3 service
 */
export const aws_c_s3 = mkPackage(
  nixRaw`pkgs.aws-c-s3`,
  "C99 library implementation for communicating with the S3 service",
);

/**
 * AWS SDK utility library
 */
export const aws_c_sdkutils = mkPackage(
  nixRaw`pkgs.aws-c-sdkutils`,
  "AWS SDK utility library",
);

/**
 * HW accelerated CRC32c and CRC32
 */
export const aws_checksums = mkPackage(
  nixRaw`pkgs.aws-checksums`,
  "HW accelerated CRC32c and CRC32",
);

/**
 * C++ wrapper around the aws-c-* libraries
 */
export const aws_crt_cpp = mkPackage(
  nixRaw`pkgs.aws-crt-cpp`,
  "C++ wrapper around the aws-c-* libraries",
);

/**
 * CLI wrapper around aws-encryption-sdk-python
 */
export const aws_encryption_sdk_cli = mkPackage(
  nixRaw`pkgs.aws-encryption-sdk-cli`,
  "CLI wrapper around aws-encryption-sdk-python",
);

/**
 * Secure way to handle environment variables in Docker and envfile with AWS Parameter Store
 */
export const aws_env = mkPackage(
  nixRaw`pkgs.aws-env`,
  "Secure way to handle environment variables in Docker and envfile with AWS Parameter Store",
);

/**
 * Acquire AWS STS (temporary) credentials via Google Apps SAML Single Sign On
 */
export const aws_google_auth = mkPackage(
  nixRaw`pkgs.aws-google-auth`,
  "Acquire AWS STS (temporary) credentials via Google Apps SAML Single Sign On",
);

/**
 * AWS IAM credentials for Kubernetes authentication
 */
export const aws_iam_authenticator = mkPackage(
  nixRaw`pkgs.aws-iam-authenticator`,
  "AWS IAM credentials for Kubernetes authentication",
);

/**
 * To locally test their Lambda function packaged as a container image.
 */
export const aws_lambda_rie = mkPackage(
  nixRaw`pkgs.aws-lambda-rie`,
  "To locally test their Lambda function packaged as a container image.",
);

/**
 * Manage AWS MFA Security Credentials
 */
export const aws_mfa = mkPackage(
  nixRaw`pkgs.aws-mfa`,
  "Manage AWS MFA Security Credentials",
);

/**
 * Command line tools for interacting with the Amazon Mechanical Turk
 */
export const aws_mturk_clt = mkPackage(
  nixRaw`pkgs.aws_mturk_clt`,
  "Command line tools for interacting with the Amazon Mechanical Turk",
);

/**
 * Nuke a whole AWS account and delete all its resources
 */
export const aws_nuke = mkPackage(
  nixRaw`pkgs.aws-nuke`,
  "Nuke a whole AWS account and delete all its resources",
);

/**
 * Easily rotate your AWS key
 */
export const aws_rotate_key = mkPackage(
  nixRaw`pkgs.aws-rotate-key`,
  "Easily rotate your AWS key",
);

/**
 * CLI tool for local development and testing of Serverless applications
 */
export const aws_sam_cli = mkPackage(
  nixRaw`pkgs.aws-sam-cli`,
  "CLI tool for local development and testing of Serverless applications",
);

/**
 * A C++ interface for Amazon Web Services
 */
export const aws_sdk_cpp = mkPackage(
  nixRaw`pkgs.aws-sdk-cpp`,
  "A C++ interface for Amazon Web Services",
);

/**
 * AWS SSO CLI is a secure replacement for using the aws configure sso wizard
 */
export const aws_sso_cli = mkPackage(
  nixRaw`pkgs.aws-sso-cli`,
  "AWS SSO CLI is a secure replacement for using the aws configure sso wizard",
);

/**
 * Get AWS SSO temporary creds from an SSO profile
 */
export const aws_sso_creds = mkPackage(
  nixRaw`pkgs.aws-sso-creds`,
  "Get AWS SSO temporary creds from an SSO profile",
);

/**
 * A vault for securely storing and accessing AWS credentials in development environments
 */
export const aws_vault = mkPackage(
  nixRaw`pkgs.aws-vault`,
  "A vault for securely storing and accessing AWS credentials in development environments",
);

/**
 * Client for Amazon WorkSpaces, a managed, secure Desktop-as-a-Service (DaaS) solution
 */
export const aws_workspaces = mkPackage(
  nixRaw`pkgs.aws-workspaces`,
  "Client for Amazon WorkSpaces, a managed, secure Desktop-as-a-Service (DaaS) solution",
);

/**
 * Backup a folder to AWS S3, once or periodically
 */
export const awsbck = mkPackage(
  nixRaw`pkgs.awsbck`,
  "Backup a folder to AWS S3, once or periodically",
);

/**
 * Unified tool to manage your AWS services
 */
export const awscli = mkPackage(
  nixRaw`pkgs.awscli`,
  "Unified tool to manage your AWS services",
);

/**
 * Unified tool to manage your AWS services
 */
export const awscli2 = mkPackage(
  nixRaw`pkgs.awscli2`,
  "Unified tool to manage your AWS services",
);

/**
 * A command line interface for Elastic Beanstalk
 */
export const awsebcli = mkPackage(
  nixRaw`pkgs.awsebcli`,
  "A command line interface for Elastic Beanstalk",
);

/**
 * A script and python package to check your AWS service limits and usage via boto3
 */
export const awslimitchecker = mkPackage(
  nixRaw`pkgs.awslimitchecker`,
  "A script and python package to check your AWS service limits and usage via boto3",
);

/**
 * AWS CloudWatch logs for Humans
 */
export const awslogs = mkPackage(
  nixRaw`pkgs.awslogs`,
  "AWS CloudWatch logs for Humans",
);

/**
 * A list command for AWS resources
 */
export const awsls = mkPackage(
  nixRaw`pkgs.awsls`,
  "A list command for AWS resources",
);

/**
 * A remove command for AWS resources
 */
export const awsrm = mkPackage(
  nixRaw`pkgs.awsrm`,
  "A remove command for AWS resources",
);

/**
 * Real-time logfile analyzer to get advanced statistics
 */
export const awstats = mkPackage(
  nixRaw`pkgs.awstats`,
  "Real-time logfile analyzer to get advanced statistics",
);

/**
 * A utility for easily assuming AWS IAM roles from the command line
 */
export const awsume = mkPackage(
  nixRaw`pkgs.awsume`,
  "A utility for easily assuming AWS IAM roles from the command line",
);

/**
 * A tool to clean out your AWS account
 */
export const awsweeper = mkPackage(
  nixRaw`pkgs.awsweeper`,
  "A tool to clean out your AWS account",
);

/**
 * AX.25 ham radio applications
 */
export const ax25_apps = mkPackage(
  nixRaw`pkgs.ax25-apps`,
  "AX.25 ham radio applications",
);

/**
 * Non-GUI tools used to configure an AX.25 enabled computer
 */
export const ax25_tools = mkPackage(
  nixRaw`pkgs.ax25-tools`,
  "Non-GUI tools used to configure an AX.25 enabled computer",
);

/**
 * Console downloading program with some features for parallel connections for faster downloading
 */
export const axel = mkPackage(
  nixRaw`pkgs.axel`,
  "Console downloading program with some features for parallel connections for faster downloading",
);

/**
 * Web Services / SOAP / WSDL engine, the successor to the widely used Apache Axis SOAP stack
 */
export const axis2 = mkPackage(
  nixRaw`pkgs.axis2`,
  "Web Services / SOAP / WSDL engine, the successor to the widely used Apache Axis SOAP stack",
);

/**
 * Ayatana Display Indicator Objects
 */
export const ayatana_ido = mkPackage(
  nixRaw`pkgs.ayatana-ido`,
  "Ayatana Display Indicator Objects",
);

/**
 * Webmail notifications and actions for any desktop
 */
export const ayatana_webmail = mkPackage(
  nixRaw`pkgs.ayatana-webmail`,
  "Webmail notifications and actions for any desktop",
);

/**
 * Ayu colored GTK and Kvantum themes based on Arc
 */
export const ayu_theme_gtk = mkPackage(
  nixRaw`pkgs.ayu-theme-gtk`,
  "Ayu colored GTK and Kvantum themes based on Arc",
);

/**
 * Azeret Mono
 */
export const azeret_mono = mkPackage(
  nixRaw`pkgs.azeret-mono`,
  "Azeret Mono",
);

/**
 * A metroidvania game using only vectorial graphic
 */
export const azimuth = mkPackage(
  nixRaw`pkgs.azimuth`,
  "A metroidvania game using only vectorial graphic",
);

/**
 * C++ language binding library integrating ZeroMQ with Boost Asio
 */
export const azmq = mkPackage(
  nixRaw`pkgs.azmq`,
  "C++ language binding library integrating ZeroMQ with Boost Asio",
);

/**
 * Full color painting software for illustration drawing
 */
export const azpainter = mkPackage(
  nixRaw`pkgs.azpainter`,
  "Full color painting software for illustration drawing",
);

/**
 * Next generation multi-platform command line experience for Azure
 */
export const azure_cli = mkPackage(
  nixRaw`pkgs.azure-cli`,
  "Next generation multi-platform command line experience for Azure",
);

/**
 * Command line tools for Azure Functions
 */
export const azure_functions_core_tools = mkPackage(
  nixRaw`pkgs.azure-functions-core-tools`,
  "Command line tools for Azure Functions",
);

/**
 * Azure static sites client
 */
export const azure_static_sites_client = mkPackage(
  nixRaw`pkgs.azure-static-sites-client`,
  "Azure static sites client",
);

/**
 * The new Azure Storage data transfer utility - AzCopy v10
 */
export const azure_storage_azcopy = mkPackage(
  nixRaw`pkgs.azure-storage-azcopy`,
  "The new Azure Storage data transfer utility - AzCopy v10",
);

/**
 * A data management tool that enables working with SQL Server, Azure SQL DB and SQL DW
 */
export const azuredatastudio = mkPackage(
  nixRaw`pkgs.azuredatastudio`,
  "A data management tool that enables working with SQL Server, Azure SQL DB and SQL DW",
);

/**
 * The b2sum utility is similar to the md5sum or shasum utilities but for BLAKE2
 */
export const b2sum = mkPackage(
  nixRaw`pkgs.b2sum`,
  "The b2sum utility is similar to the md5sum or shasum utilities but for BLAKE2",
);

/**
 * BLAKE3 cryptographic hash function
 */
export const b3sum = mkPackage(
  nixRaw`pkgs.b3sum`,
  "BLAKE3 cryptographic hash function",
);

/**
 * A helper utility to work with patches made available via a public-inbox archive
 */
export const b4 = mkPackage(
  nixRaw`pkgs.b4`,
  "A helper utility to work with patches made available via a public-inbox archive",
);

/**
 * Firmware extractor for cards supported by the b43 kernel module
 */
export const b43FirmwareCutter = mkPackage(
  nixRaw`pkgs.b43FirmwareCutter`,
  "Firmware extractor for cards supported by the b43 kernel module",
);

/**
 * Firmware for cards supported by the b43 kernel module
 */
export const b43Firmware_5_1_138 = mkPackage(
  nixRaw`pkgs.b43Firmware_5_1_138`,
  "Firmware for cards supported by the b43 kernel module",
);

/**
 * Firmware for cards supported by the b43 kernel module
 */
export const b43Firmware_6_30_163_46 = mkPackage(
  nixRaw`pkgs.b43Firmware_6_30_163_46`,
  "Firmware for cards supported by the b43 kernel module",
);

/**
 * Highly legible font family for use on aircraft cockpit screens
 */
export const b612 = mkPackage(
  nixRaw`pkgs.b612`,
  "Highly legible font family for use on aircraft cockpit screens",
);

/**
 * A Clojure babushka for the grey areas of Bash
 */
export const babashka = mkPackage(
  nixRaw`pkgs.babashka`,
  "A Clojure babushka for the grey areas of Bash",
);

/**
 * A Clojure babushka for the grey areas of Bash
 */
export const babashka_unwrapped = mkPackage(
  nixRaw`pkgs.babashka-unwrapped`,
  "A Clojure babushka for the grey areas of Bash",
);

/**
 * Loop-avoiding distance-vector routing protocol
 */
export const babeld = mkPackage(
  nixRaw`pkgs.babeld`,
  "Loop-avoiding distance-vector routing protocol",
);

/**
 * Translate bash scripts to fish
 */
export const babelfish = mkPackage(
  nixRaw`pkgs.babelfish`,
  "Translate bash scripts to fish",
);

/**
 * Unicode CJK font with over 36000 Han characters
 */
export const babelstone_han = mkPackage(
  nixRaw`pkgs.babelstone-han`,
  "Unicode CJK font with over 36000 Han characters",
);

/**
 * Command-line tool and library to read and convert LTTng tracefiles
 */
export const babeltrace = mkPackage(
  nixRaw`pkgs.babeltrace`,
  "Command-line tool and library to read and convert LTTng tracefiles",
);

/**
 * Image pixel format conversion library
 */
export const babl = mkPackage(
  nixRaw`pkgs.babl`,
  "Image pixel format conversion library",
);

/**
 * Tool to do SSH spreading
 */
export const baboossh = mkPackage(
  nixRaw`pkgs.baboossh`,
  "Tool to do SSH spreading",
);

/**
 * Command-line tool for accessing the Backblaze B2 storage service
 */
export const backblaze_b2 = mkPackage(
  nixRaw`pkgs.backblaze-b2`,
  "Command-line tool for accessing the Backblaze B2 storage service",
);

/**
 * A file deduplicator
 */
export const backdown = mkPackage(
  nixRaw`pkgs.backdown`,
  "A file deduplicator",
);

/**
 * Simple backup tool for Linux
 */
export const backintime = mkPackage(
  nixRaw`pkgs.backintime`,
  "Simple backup tool for Linux",
);

/**
 * Simple backup tool for Linux
 */
export const backintime_common = mkPackage(
  nixRaw`pkgs.backintime-common`,
  "Simple backup tool for Linux",
);

/**
 * Simple backup tool for Linux
 */
export const backintime_qt = mkPackage(
  nixRaw`pkgs.backintime-qt`,
  "Simple backup tool for Linux",
);

/**
 * Automatically set screen brightness with a webcam
 */
export const backlight_auto = mkPackage(
  nixRaw`pkgs.backlight-auto`,
  "Automatically set screen brightness with a webcam",
);

/**
 * Beautiful stack trace pretty printer for C++
 */
export const backward_cpp = mkPackage(
  nixRaw`pkgs.backward-cpp`,
  "Beautiful stack trace pretty printer for C++",
);

/**
 * BACnet open source protocol stack for embedded systems, Linux, and Windows
 */
export const bacnet_stack = mkPackage(
  nixRaw`pkgs.bacnet-stack`,
  "BACnet open source protocol stack for embedded systems, Linux, and Windows",
);

/**
 * Background rust code checker
 */
export const bacon = mkPackage(
  nixRaw`pkgs.bacon`,
  "Background rust code checker",
);

/**
 * Enterprise ready, Network Backup Tool
 */
export const bacula = mkPackage(
  nixRaw`pkgs.bacula`,
  "Enterprise ready, Network Backup Tool",
);

/**
 * A simple BibTeX Viewer and Editor
 */
export const bada_bib = mkPackage(
  nixRaw`pkgs.bada-bib`,
  "A simple BibTeX Viewer and Editor",
);

/**
 * HEX badchar generator for different programming languages
 */
export const badchars = mkPackage(
  nixRaw`pkgs.badchars`,
  "HEX badchar generator for different programming languages",
);

/**
 * Fast key-value DB in Go
 */
export const badger = mkPackage(
  nixRaw`pkgs.badger`,
  "Fast key-value DB in Go",
);

/**
 * Operator Security Audit Tool
 */
export const badrobot = mkPackage(
  nixRaw`pkgs.badrobot`,
  "Operator Security Audit Tool",
);

/**
 * A set of network-related (mostly VPN-related) tools
 */
export const badvpn = mkPackage(
  nixRaw`pkgs.badvpn`,
  "A set of network-related (mostly VPN-related) tools",
);

/**
 * Minimalist and privacy-oriented WebKitGTK+ browser
 */
export const badwolf = mkPackage(
  nixRaw`pkgs.badwolf`,
  "Minimalist and privacy-oriented WebKitGTK+ browser",
);

/**
 * Korean font
 */
export const baekmuk_ttf = mkPackage(
  nixRaw`pkgs.baekmuk-ttf`,
  "Korean font",
);

/**
 * Incremental backup with strong cryptographic confidentality
 */
export const bakelite = mkPackage(
  nixRaw`pkgs.bakelite`,
  "Incremental backup with strong cryptographic confidentality",
);

/**
 * TrueType versions of the Computer Modern and AMS TeX Fonts
 */
export const bakoma_ttf = mkPackage(
  nixRaw`pkgs.bakoma_ttf`,
  "TrueType versions of the Computer Modern and AMS TeX Fonts",
);

/**
 * Tool for working with the balance of your satoshis on LND
 */
export const balanceofsatoshis = mkPackage(
  nixRaw`pkgs.balanceofsatoshis`,
  "Tool for working with the balance of your satoshis on LND",
);

/**
 * A command line interface for balenaCloud or openBalena
 */
export const balena_cli = mkPackage(
  nixRaw`pkgs.balena-cli`,
  "A command line interface for balenaCloud or openBalena",
);

/**
 * Classic cannon combat game
 */
export const ballerburg = mkPackage(
  nixRaw`pkgs.ballerburg`,
  "Classic cannon combat game",
);

/**
 * An open-source programming language for the cloud
 */
export const ballerina = mkPackage(
  nixRaw`pkgs.ballerina`,
  "An open-source programming language for the cloud",
);

/**
 * An e-mail client for GNOME
 */
export const balsa = mkPackage(
  nixRaw`pkgs.balsa`,
  "An e-mail client for GNOME",
);

/**
 * Yet another build manager
 */
export const bam = mkPackage(
  nixRaw`pkgs.bam`,
  "Yet another build manager",
);

/**
 * A tracker for YM2608 (OPNA) which was used in NEC PC-8801/9801 series computers
 */
export const bambootracker = mkPackage(
  nixRaw`pkgs.bambootracker`,
  "A tracker for YM2608 (OPNA) which was used in NEC PC-8801/9801 series computers",
);

/**
 * A tracker for YM2608 (OPNA) which was used in NEC PC-8801/9801 series computers
 */
export const bambootracker_qt6 = mkPackage(
  nixRaw`pkgs.bambootracker-qt6`,
  "A tracker for YM2608 (OPNA) which was used in NEC PC-8801/9801 series computers",
);

/**
 * Application matching framework
 */
export const bamf = mkPackage(
  nixRaw`pkgs.bamf`,
  "Application matching framework",
);

/**
 * C++ API & command-line toolkit for working with BAM data
 */
export const bamtools = mkPackage(
  nixRaw`pkgs.bamtools`,
  "C++ API & command-line toolkit for working with BAM data",
);

/**
 * Accounting Software for small companies, associations and individuals
 */
export const banana_accounting = mkPackage(
  nixRaw`pkgs.banana-accounting`,
  "Accounting Software for small companies, associations and individuals",
);

/**
 * The banana cursor theme
 */
export const banana_cursor = mkPackage(
  nixRaw`pkgs.banana-cursor`,
  "The banana cursor theme",
);

/**
 * A fork of vera using python3.10
 */
export const banana_vera = mkPackage(
  nixRaw`pkgs.banana-vera`,
  "A fork of vera using python3.10",
);

/**
 * Security oriented static analyser for python code
 */
export const bandit = mkPackage(
  nixRaw`pkgs.bandit`,
  "Security oriented static analyser for python code",
);

/**
 * A CLI utility for displaying current network utilization
 */
export const bandwhich = mkPackage(
  nixRaw`pkgs.bandwhich`,
  "A CLI utility for displaying current network utilization",
);

/**
 * Artificial benchmark for identifying weaknesses in the memory subsystem
 */
export const bandwidth = mkPackage(
  nixRaw`pkgs.bandwidth`,
  "Artificial benchmark for identifying weaknesses in the memory subsystem",
);

/**
 * Banking application for small screens
 */
export const banking = mkPackage(
  nixRaw`pkgs.banking`,
  "Banking application for small screens",
);

/**
 * Print large banners to ASCII terminals
 */
export const banner = mkPackage(
  nixRaw`pkgs.banner`,
  "Print large banners to ASCII terminals",
);

/**
 * An implementation of BLAKE3 verified streaming
 */
export const bao = mkPackage(
  nixRaw`pkgs.bao`,
  "An implementation of BLAKE3 verified streaming",
);

/**
 * Graphical application to analyse disk usage in any GNOME environment
 */
export const baobab = mkPackage(
  nixRaw`pkgs.baobab`,
  "Graphical application to analyse disk usage in any GNOME environment",
);

/**
 * Console progress bar
 */
export const bar = mkPackage(
  nixRaw`pkgs.bar`,
  "Console progress bar",
);

/**
 * GNU barcode generator
 */
export const barcode = mkPackage(
  nixRaw`pkgs.barcode`,
  "GNU barcode generator",
);

/**
 * The Swiss Army Knive for bare metal
 */
export const bareboxTools = mkPackage(
  nixRaw`pkgs.bareboxTools`,
  "The Swiss Army Knive for bare metal",
);

/**
 * A modular SIP User-Agent with audio and video support
 */
export const baresip = mkPackage(
  nixRaw`pkgs.baresip`,
  "A modular SIP User-Agent with audio and video support",
);

/**
 * Live sync audio streaming for local networks
 */
export const bark = mkPackage(
  nixRaw`pkgs.bark`,
  "Live sync audio streaming for local networks",
);

/**
 * A grotesk variable font superfamily
 */
export const barlow = mkPackage(
  nixRaw`pkgs.barlow`,
  "A grotesk variable font superfamily",
);

/**
 * Backup and Recovery Manager for PostgreSQL
 */
export const barman = mkPackage(
  nixRaw`pkgs.barman`,
  "Backup and Recovery Manager for PostgreSQL",
);

/**
 * A destructive action game
 */
export const barrage = mkPackage(
  nixRaw`pkgs.barrage`,
  "A destructive action game",
);

/**
 * Open-source KVM software
 */
export const barrier = mkPackage(
  nixRaw`pkgs.barrier`,
  "Open-source KVM software",
);

/**
 * Take control of your menu bar
 */
export const bartender = mkPackage(
  nixRaw`pkgs.bartender`,
  "Take control of your menu bar",
);

/**
 * A simple timetracker for the command line
 */
export const bartib = mkPackage(
  nixRaw`pkgs.bartib`,
  "A simple timetracker for the command line",
);

/**
 * Encode binary files to printable utf16be
 */
export const base16384 = mkPackage(
  nixRaw`pkgs.base16384`,
  "Encode binary files to printable utf16be",
);

/**
 * Base16 Builder is a nimble command-line tool that generates themes for your favourite programs.
 */
export const base16_builder = mkPackage(
  nixRaw`pkgs.base16-builder`,
  "Base16 Builder is a nimble command-line tool that generates themes for your favourite programs.",
);

/**
 * All the color schemes for use in base16 packages
 */
export const base16_schemes = mkPackage(
  nixRaw`pkgs.base16-schemes`,
  "All the color schemes for use in base16 packages",
);

/**
 * Browse and preview Base16 Shell themes in your terminal
 */
export const base16_shell_preview = mkPackage(
  nixRaw`pkgs.base16-shell-preview`,
  "Browse and preview Base16 Shell themes in your terminal",
);

/**
 * A universal manager to set base16 themes for any supported application
 */
export const base16_universal_manager = mkPackage(
  nixRaw`pkgs.base16-universal-manager`,
  "A universal manager to set base16 themes for any supported application",
);

/**
 * No-code database and Airtable alternative
 */
export const baserow = mkPackage(
  nixRaw`pkgs.baserow`,
  "No-code database and Airtable alternative",
);

/**
 * XML database and XPath/XQuery processor
 */
export const basex = mkPackage(
  nixRaw`pkgs.basex`,
  "XML database and XPath/XQuery processor",
);

/**
 * Base 16/32/64 encode/decode data to standard output
 */
export const basez = mkPackage(
  nixRaw`pkgs.basez`,
  "Base 16/32/64 encode/decode data to standard output",
);

/**
 * GNU Bourne-Again Shell, the de facto standard shell on Linux
 */
export const bash = mkPackage(
  nixRaw`pkgs.bash`,
  "GNU Bourne-Again Shell, the de facto standard shell on Linux",
);

/**
 * GNU Bourne-Again Shell, the de facto standard shell on Linux (for interactive use)
 */
export const bashInteractive = mkPackage(
  nixRaw`pkgs.bashInteractive`,
  "GNU Bourne-Again Shell, the de facto standard shell on Linux (for interactive use)",
);

/**
 * GNU Bourne-Again Shell, the de facto standard shell on Linux (for interactive use)
 */
export const bashInteractiveFHS = mkPackage(
  nixRaw`pkgs.bashInteractiveFHS`,
  "GNU Bourne-Again Shell, the de facto standard shell on Linux (for interactive use)",
);

/**
 * A collection of small bash scripts for heavy terminal users
 */
export const bashSnippets = mkPackage(
  nixRaw`pkgs.bashSnippets`,
  "A collection of small bash scripts for heavy terminal users",
);

/**
 * Programmable completion for the bash shell
 */
export const bash_completion = mkPackage(
  nixRaw`pkgs.bash-completion`,
  "Programmable completion for the bash shell",
);

/**
 * CLI commands for AWS
 */
export const bash_my_aws = mkPackage(
  nixRaw`pkgs.bash-my-aws`,
  "CLI commands for AWS",
);

/**
 * preexec and precmd functions for Bash just like Zsh
 */
export const bash_preexec = mkPackage(
  nixRaw`pkgs.bash-preexec`,
  "preexec and precmd functions for Bash just like Zsh",
);

/**
 * Bash shell-script implementation of SuperGenPass password generation
 */
export const bash_supergenpass = mkPackage(
  nixRaw`pkgs.bash-supergenpass`,
  "Bash shell-script implementation of SuperGenPass password generation",
);

/**
 * Bash unit testing enterprise edition framework for professionals
 */
export const bash_unit = mkPackage(
  nixRaw`pkgs.bash_unit`,
  "Bash unit testing enterprise edition framework for professionals",
);

/**
 * Style enforcement for bash programs
 */
export const bashate = mkPackage(
  nixRaw`pkgs.bashate`,
  "Style enforcement for bash programs",
);

/**
 * A single Bash script to create blogs
 */
export const bashblog = mkPackage(
  nixRaw`pkgs.bashblog`,
  "A single Bash script to create blogs",
);

/**
 * Practice flashcards in bash
 */
export const bashcards = mkPackage(
  nixRaw`pkgs.bashcards`,
  "Practice flashcards in bash",
);

/**
 * Bash script debugger
 */
export const bashdb = mkPackage(
  nixRaw`pkgs.bashdb`,
  "Bash script debugger",
);

/**
 * Bash command line framework and CLI generator
 */
export const bashly = mkPackage(
  nixRaw`pkgs.bashly`,
  "Bash command line framework and CLI generator",
);

/**
 * A menu-driven bash script for the management of removable media with udisks
 */
export const bashmount = mkPackage(
  nixRaw`pkgs.bashmount`,
  "A menu-driven bash script for the management of removable media with udisks",
);

/**
 * Plotting in the terminal
 */
export const bashplotlib = mkPackage(
  nixRaw`pkgs.bashplotlib`,
  "Plotting in the terminal",
);

/**
 * An event listener/callback API for creating extensible bash programs
 */
export const bashup_events32 = mkPackage(
  nixRaw`pkgs.bashup-events32`,
  "An event listener/callback API for creating extensible bash programs",
);

/**
 * An event listener/callback API for creating extensible bash programs
 */
export const bashup_events44 = mkPackage(
  nixRaw`pkgs.bashup-events44`,
  "An event listener/callback API for creating extensible bash programs",
);

/**
 * 68k Macintosh emulator
 */
export const basiliskii = mkPackage(
  nixRaw`pkgs.basiliskii`,
  "68k Macintosh emulator",
);

/**
 * Tetris clone with 'bastard' block-choosing AI
 */
export const bastet = mkPackage(
  nixRaw`pkgs.bastet`,
  "Tetris clone with 'bastard' block-choosing AI",
);

/**
 * The sd-bus library, extracted from systemd
 */
export const basu = mkPackage(
  nixRaw`pkgs.basu`,
  "The sd-bus library, extracted from systemd",
);

/**
 * A cat(1) clone with syntax highlighting and Git integration
 */
export const bat = mkPackage(
  nixRaw`pkgs.bat`,
  "A cat(1) clone with syntax highlighting and Git integration",
);

/**
 * B.A.T.M.A.N. routing protocol in a linux kernel module for layer 2, control tool
 */
export const batctl = mkPackage(
  nixRaw`pkgs.batctl`,
  "B.A.T.M.A.N. routing protocol in a linux kernel module for layer 2, control tool",
);

/**
 * Java based toolkit for handling SVG
 */
export const batik = mkPackage(
  nixRaw`pkgs.batik`,
  "Java based toolkit for handling SVG",
);

/**
 * Bash Automated Testing System
 */
export const bats = mkPackage(
  nixRaw`pkgs.bats`,
  "Bash Automated Testing System",
);

/**
 * Lightweight battery daemon written in C
 */
export const batsignal = mkPackage(
  nixRaw`pkgs.batsignal`,
  "Lightweight battery daemon written in C",
);

/**
 * Scientific signal analysis application
 */
export const baudline = mkPackage(
  nixRaw`pkgs.baudline`,
  "Scientific signal analysis application",
);

/**
 * Detecting natural selection from population-based genetic data
 */
export const bayescan = mkPackage(
  nixRaw`pkgs.bayescan`,
  "Detecting natural selection from population-based genetic data",
);

/**
 * Subtitle manager for Sonarr and Radarr
 */
export const bazarr = mkPackage(
  nixRaw`pkgs.bazarr`,
  "Subtitle manager for Sonarr and Radarr",
);

/**
 * Build tool that builds code quickly and reliably
 */
export const bazel = mkPackage(
  nixRaw`pkgs.bazel`,
  "Build tool that builds code quickly and reliably",
);

/**
 * Build tool that builds code quickly and reliably
 */
export const bazel_4 = mkPackage(
  nixRaw`pkgs.bazel_4`,
  "Build tool that builds code quickly and reliably",
);

/**
 * Build tool that builds code quickly and reliably
 */
export const bazel_5 = mkPackage(
  nixRaw`pkgs.bazel_5`,
  "Build tool that builds code quickly and reliably",
);

/**
 * Build tool that builds code quickly and reliably
 */
export const bazel_6 = mkPackage(
  nixRaw`pkgs.bazel_6`,
  "Build tool that builds code quickly and reliably",
);

/**
 * Tools for working with Google's bazel buildtool. Includes buildifier, buildozer, and unused_deps
 */
export const bazel_buildtools = mkPackage(
  nixRaw`pkgs.bazel-buildtools`,
  "Tools for working with Google's bazel buildtool. Includes buildifier, buildozer, and unused_deps",
);

        /**
         * Gazelle is a Bazel build file generator for Bazel projects. It natively
supports Go and protobuf, and it may be extended to support new languages
and custom rule sets.

         */
export const bazel_gazelle = mkPackage(
  nixRaw`pkgs.bazel-gazelle`,
  "Gazelle is a Bazel build file generator for Bazel projects. It natively\nsupports Go and protobuf, and it may be extended to support new languages\nand custom rule sets.\n",
);

/**
 * kazel - a BUILD file generator for go and bazel
 */
export const bazel_kazel = mkPackage(
  nixRaw`pkgs.bazel-kazel`,
  "kazel - a BUILD file generator for go and bazel",
);

/**
 * A remote HTTP/1.1 cache for Bazel
 */
export const bazel_remote = mkPackage(
  nixRaw`pkgs.bazel-remote`,
  "A remote HTTP/1.1 cache for Bazel",
);

/**
 * Tools for building Bazel targets when source files change
 */
export const bazel_watcher = mkPackage(
  nixRaw`pkgs.bazel-watcher`,
  "Tools for building Bazel targets when source files change",
);

/**
 * A user-friendly launcher for Bazel
 */
export const bazelisk = mkPackage(
  nixRaw`pkgs.bazelisk`,
  "A user-friendly launcher for Bazel",
);

/**
 * AA-lib demo
 */
export const bb = mkPackage(
  nixRaw`pkgs.bb`,
  "AA-lib demo",
);

/**
 * A sed-like editor for binary files
 */
export const bbe = mkPackage(
  nixRaw`pkgs.bbe`,
  "A sed-like editor for binary files",
);

/**
 * Install any Babashka script or project with one command
 */
export const bbin = mkPackage(
  nixRaw`pkgs.bbin`,
  "Install any Babashka script or project with one command",
);

/**
 * GNU software calculator
 */
export const bc = mkPackage(
  nixRaw`pkgs.bc`,
  "GNU software calculator",
);

/**
 * Elliptic curve library supporting Ed448-Goldilocks and Curve25519. Belledonne Communications' fork for Linphone.
 */
export const bc_decaf = mkPackage(
  nixRaw`pkgs.bc-decaf`,
  "Elliptic curve library supporting Ed448-Goldilocks and Curve25519. Belledonne Communications' fork for Linphone.",
);

/**
 * Database access library for C++. Belledonne Communications' fork for Linphone.
 */
export const bc_soci = mkPackage(
  nixRaw`pkgs.bc-soci`,
  "Database access library for C++. Belledonne Communications' fork for Linphone.",
);

/**
 * User-space tools required for bcache (Linux block layer cache)
 */
export const bcache_tools = mkPackage(
  nixRaw`pkgs.bcache-tools`,
  "User-space tools required for bcache (Linux block layer cache)",
);

/**
 * Tool for managing bcachefs filesystems
 */
export const bcachefs_tools = mkPackage(
  nixRaw`pkgs.bcachefs-tools`,
  "Tool for managing bcachefs filesystems",
);

/**
 * Storage conversion and expression calculator
 */
export const bcal = mkPackage(
  nixRaw`pkgs.bcal`,
  "Storage conversion and expression calculator",
);

/**
 * Dynamic Tracing Tools for Linux
 */
export const bcc = mkPackage(
  nixRaw`pkgs.bcc`,
  "Dynamic Tracing Tools for Linux",
);

/**
 * Tools for manipulating BCF2/VCF/gVCF format, SNP and short indel sequence variants
 */
export const bcftools = mkPackage(
  nixRaw`pkgs.bcftools`,
  "Tools for manipulating BCF2/VCF/gVCF format, SNP and short indel sequence variants",
);

/**
 * Opensource implementation of both encoder and decoder of the ITU G729 Annex A/B speech codec
 */
export const bcg729 = mkPackage(
  nixRaw`pkgs.bcg729`,
  "Opensource implementation of both encoder and decoder of the ITU G729 Annex A/B speech codec",
);

/**
 * An audio stream chopping LV2 plugin
 */
export const bchoppr = mkPackage(
  nixRaw`pkgs.bchoppr`,
  "An audio stream chopping LV2 plugin",
);

/**
 * A program that converts CD images in BIN/CUE format into a set of ISO and CDR tracks
 */
export const bchunk = mkPackage(
  nixRaw`pkgs.bchunk`,
  "A program that converts CD images in BIN/CUE format into a set of ISO and CDR tracks",
);

/**
 * GUI application that allows to quickly and easily compare files and folders
 */
export const bcompare = mkPackage(
  nixRaw`pkgs.bcompare`,
  "GUI application that allows to quickly and easily compare files and folders",
);

/**
 * Utilities library for Linphone
 */
export const bctoolbox = mkPackage(
  nixRaw`pkgs.bctoolbox`,
  "Utilities library for Linphone",
);

/**
 * Belledonne Communications' fork of CUnit test framework. Part of the Linphone project.
 */
export const bcunit = mkPackage(
  nixRaw`pkgs.bcunit`,
  "Belledonne Communications' fork of CUnit test framework. Part of the Linphone project.",
);

/**
 * build2 project dependency manager
 */
export const bdep = mkPackage(
  nixRaw`pkgs.bdep`,
  "build2 project dependency manager",
);

/**
 * BDF to PSF converter
 */
export const bdf2psf = mkPackage(
  nixRaw`pkgs.bdf2psf`,
  "BDF to PSF converter",
);

/**
 * BDF to SFD converter
 */
export const bdf2sfd = mkPackage(
  nixRaw`pkgs.bdf2sfd`,
  "BDF to SFD converter",
);

/**
 * Tool to resize BDF fonts
 */
export const bdfresize = mkPackage(
  nixRaw`pkgs.bdfresize`,
  "Tool to resize BDF fonts",
);

/**
 * Fast block device synchronizing tool
 */
export const bdsync = mkPackage(
  nixRaw`pkgs.bdsync`,
  "Fast block device synchronizing tool",
);

/**
 * Modular multi screen pdf presentation viewer
 */
export const beamerpresenter = mkPackage(
  nixRaw`pkgs.beamerpresenter`,
  "Modular multi screen pdf presentation viewer",
);

/**
 * Modular multi screen pdf presentation viewer
 */
export const beamerpresenter_mupdf = mkPackage(
  nixRaw`pkgs.beamerpresenter-mupdf`,
  "Modular multi screen pdf presentation viewer",
);

/**
 * Modular multi screen pdf presentation viewer
 */
export const beamerpresenter_poppler = mkPackage(
  nixRaw`pkgs.beamerpresenter-poppler`,
  "Modular multi screen pdf presentation viewer",
);

/**
 * beancount transaction entry assistant
 */
export const bean_add = mkPackage(
  nixRaw`pkgs.bean-add`,
  "beancount transaction entry assistant",
);

/**
 * Double-entry bookkeeping computer language
 */
export const beancount = mkPackage(
  nixRaw`pkgs.beancount`,
  "Double-entry bookkeeping computer language",
);

/**
 * Opinioned code formatter for Beancount
 */
export const beancount_black = mkPackage(
  nixRaw`pkgs.beancount-black`,
  "Opinioned code formatter for Beancount",
);

/**
 * Beancount Importers for ING-DiBa (Germany) CSV Exports
 */
export const beancount_ing_diba = mkPackage(
  nixRaw`pkgs.beancount-ing-diba`,
  "Beancount Importers for ING-DiBa (Germany) CSV Exports",
);

/**
 * A Language Server Protocol (LSP) for beancount files
 */
export const beancount_language_server = mkPackage(
  nixRaw`pkgs.beancount-language-server`,
  "A Language Server Protocol (LSP) for beancount files",
);

/**
 * A simple, fast work queue
 */
export const beanstalkd = mkPackage(
  nixRaw`pkgs.beanstalkd`,
  "A simple, fast work queue",
);

/**
 * Tool that generates a compilation database for clang tooling
 */
export const bear = mkPackage(
  nixRaw`pkgs.bear`,
  "Tool that generates a compilation database for clang tooling",
);

/**
 * Code security scanning tool (SAST) to discover, filter and prioritize security and privacy risks
 */
export const bearer = mkPackage(
  nixRaw`pkgs.bearer`,
  "Code security scanning tool (SAST) to discover, filter and prioritize security and privacy risks",
);

/**
 * An implementation of the SSL/TLS protocol written in C
 */
export const bearssl = mkPackage(
  nixRaw`pkgs.bearssl`,
  "An implementation of the SSL/TLS protocol written in C",
);

/**
 * Swatch Internet Time implemented as a C program
 */
export const beats = mkPackage(
  nixRaw`pkgs.beats`,
  "Swatch Internet Time implemented as a C program",
);

/**
 * BeautyLine icon theme
 */
export const beauty_line_icon_theme = mkPackage(
  nixRaw`pkgs.beauty-line-icon-theme`,
  "BeautyLine icon theme",
);

/**
 * Tool for beautifying Bash scripts
 */
export const beautysh = mkPackage(
  nixRaw`pkgs.beautysh`,
  "Tool for beautifying Bash scripts",
);

/**
 * Suite of tools for addressing questions arising in genomics studies
 */
export const bedops = mkPackage(
  nixRaw`pkgs.bedops`,
  "Suite of tools for addressing questions arising in genomics studies",
);

/**
 * A powerful toolset for genome arithmetic
 */
export const bedtools = mkPackage(
  nixRaw`pkgs.bedtools`,
  "A powerful toolset for genome arithmetic",
);

/**
 * Ethereum Swarm Bee
 */
export const bee = mkPackage(
  nixRaw`pkgs.bee`,
  "Ethereum Swarm Bee",
);

/**
 * External signer for Ethereum Swarm Bee
 */
export const bee_clef = mkPackage(
  nixRaw`pkgs.bee-clef`,
  "External signer for Ethereum Swarm Bee",
);

/**
 * Ethereum Swarm Bee
 */
export const bee_unstable = mkPackage(
  nixRaw`pkgs.bee-unstable`,
  "Ethereum Swarm Bee",
);

/**
 * BeeBEEP is the free office messenger that is indispensable in all those places where privacy and security are an essential requirement.
 */
export const beebeep = mkPackage(
  nixRaw`pkgs.beebeep`,
  "BeeBEEP is the free office messenger that is indispensable in all those places where privacy and security are an essential requirement.",
);

export const beecrypt = mkPackage(
  nixRaw`pkgs.beecrypt`,
  "",
);

/**
 * A small script to create bootable EFISTUB kernel images
 */
export const beefi = mkPackage(
  nixRaw`pkgs.beefi`,
  "A small script to create bootable EFISTUB kernel images",
);

/**
 * Modern and easy to use SQL client for MySQL, Postgres, SQLite, SQL Server, and more. Linux, MacOS, and Windows
 */
export const beekeeper_studio = mkPackage(
  nixRaw`pkgs.beekeeper-studio`,
  "Modern and easy to use SQL client for MySQL, Postgres, SQLite, SQL Server, and more. Linux, MacOS, and Windows",
);

/**
 * The advanced PC speaker beeper
 */
export const beep = mkPackage(
  nixRaw`pkgs.beep`,
  "The advanced PC speaker beeper",
);

/**
 * Universal chat app.
 */
export const beeper = mkPackage(
  nixRaw`pkgs.beeper`,
  "Universal chat app.",
);

export const bees = mkPackage(
  nixRaw`pkgs.bees`,
  "",
);

/**
 * Music tagger and library organizer
 */
export const beets = mkPackage(
  nixRaw`pkgs.beets`,
  "Music tagger and library organizer",
);

/**
 * Music tagger and library organizer
 */
export const beets_unstable = mkPackage(
  nixRaw`pkgs.beets-unstable`,
  "Music tagger and library organizer",
);

/**
 * behaviour-driven development, Python style
 */
export const behave = mkPackage(
  nixRaw`pkgs.behave`,
  "behaviour-driven development, Python style",
);

/**
 * A Persian/Arabic Open Source Font
 */
export const behdad_fonts = mkPackage(
  nixRaw`pkgs.behdad-fonts`,
  "A Persian/Arabic Open Source Font",
);

/**
 * OpenCL Library for Intel Ivy Bridge and newer GPUs
 */
export const beignet = mkPackage(
  nixRaw`pkgs.beignet`,
  "OpenCL Library for Intel Ivy Bridge and newer GPUs",
);

/**
 * C++ library to manipulate VCard standard format. Part of the Linphone project.
 */
export const belcard = mkPackage(
  nixRaw`pkgs.belcard`,
  "C++ library to manipulate VCard standard format. Part of the Linphone project.",
);

/**
 * Modern library implementing SIP (RFC 3261) transport, transaction and dialog layers. Part of the Linphone project.
 */
export const belle_sip = mkPackage(
  nixRaw`pkgs.belle-sip`,
  "Modern library implementing SIP (RFC 3261) transport, transaction and dialog layers. Part of the Linphone project.",
);

/**
 * A time traveling resource monitor for modern Linux systems
 */
export const below = mkPackage(
  nixRaw`pkgs.below`,
  "A time traveling resource monitor for modern Linux systems",
);

/**
 * Belledonne Communications' language recognition library. Part of the Linphone project.
 */
export const belr = mkPackage(
  nixRaw`pkgs.belr`,
  "Belledonne Communications' language recognition library. Part of the Linphone project.",
);

/**
 * A functional language for reasoning about formal systems
 */
export const beluga = mkPackage(
  nixRaw`pkgs.beluga`,
  "A functional language for reasoning about formal systems",
);

/**
 * Dynamic menu library and client program inspired by dmenu
 */
export const bemenu = mkPackage(
  nixRaw`pkgs.bemenu`,
  "Dynamic menu library and client program inspired by dmenu",
);

/**
 * Emoji picker with support for bemenu/wofi/rofi/dmenu and wayland/X11
 */
export const bemoji = mkPackage(
  nixRaw`pkgs.bemoji`,
  "Emoji picker with support for bemenu/wofi/rofi/dmenu and wayland/X11",
);

/**
 * Command-line benchmark tool
 */
export const bench = mkPackage(
  nixRaw`pkgs.bench`,
  "Command-line benchmark tool",
);

/**
 * A header-only C++20 bencode serialization/deserialization library
 */
export const bencode = mkPackage(
  nixRaw`pkgs.bencode`,
  "A header-only C++20 bencode serialization/deserialization library",
);

/**
 * Collection of tools for manipulating bencoded data
 */
export const bencodetools = mkPackage(
  nixRaw`pkgs.bencodetools`,
  "Collection of tools for manipulating bencoded data",
);

/**
 * 2D point-and-click science fiction thriller set in a bleak vision of the future
 */
export const beneath_a_steel_sky = mkPackage(
  nixRaw`pkgs.beneath-a-steel-sky`,
  "2D point-and-click science fiction thriller set in a bleak vision of the future",
);

/**
 * Fancy stream processing made operationally mundane
 */
export const benthos = mkPackage(
  nixRaw`pkgs.benthos`,
  "Fancy stream processing made operationally mundane",
);

/**
 * Full-featured MP4 format and MPEG DASH library and tools
 */
export const bento4 = mkPackage(
  nixRaw`pkgs.bento4`,
  "Full-featured MP4 format and MPEG DASH library and tools",
);

/**
 * Binary pastebin server
 */
export const bepasty = mkPackage(
  nixRaw`pkgs.bepasty`,
  "Binary pastebin server",
);

/**
 * Multi-Stage Programming extension for OCaml
 */
export const ber_metaocaml = mkPackage(
  nixRaw`pkgs.ber_metaocaml`,
  "Multi-Stage Programming extension for OCaml",
);

/**
 * A tool for managing secrets on Google Cloud
 */
export const berglas = mkPackage(
  nixRaw`pkgs.berglas`,
  "A tool for managing secrets on Google Cloud",
);

/**
 * A healthy, bite-sized window manager
 */
export const berry = mkPackage(
  nixRaw`pkgs.berry`,
  "A healthy, bite-sized window manager",
);

/**
 * Software modular synth with controllers support, scripting and VST
 */
export const bespokesynth = mkPackage(
  nixRaw`pkgs.bespokesynth`,
  "Software modular synth with controllers support, scripting and VST",
);

/**
 * Software modular synth with controllers support, scripting and VST
 */
export const bespokesynth_with_vst2 = mkPackage(
  nixRaw`pkgs.bespokesynth-with-vst2`,
  "Software modular synth with controllers support, scripting and VST",
);

/**
 * An enterprise-grade Java-based, Apache 2.0 licensed Ethereum client
 */
export const besu = mkPackage(
  nixRaw`pkgs.besu`,
  "An enterprise-grade Java-based, Apache 2.0 licensed Ethereum client",
);

/**
 * The Betaflight flight control system configuration tool
 */
export const betaflight_configurator = mkPackage(
  nixRaw`pkgs.betaflight-configurator`,
  "The Betaflight flight control system configuration tool",
);

/**
 * Betterbird is a fine-tuned version of Mozilla Thunderbird, Thunderbird on steroids, if you will
 */
export const betterbird = mkPackage(
  nixRaw`pkgs.betterbird`,
  "Betterbird is a fine-tuned version of Mozilla Thunderbird, Thunderbird on steroids, if you will",
);

/**
 * Betterbird is a fine-tuned version of Mozilla Thunderbird, Thunderbird on steroids, if you will
 */
export const betterbird_unwrapped = mkPackage(
  nixRaw`pkgs.betterbird-unwrapped`,
  "Betterbird is a fine-tuned version of Mozilla Thunderbird, Thunderbird on steroids, if you will",
);

/**
 * A man in the middle tool
 */
export const bettercap = mkPackage(
  nixRaw`pkgs.bettercap`,
  "A man in the middle tool",
);

/**
 * Installer for BetterDiscord
 */
export const betterdiscord_installer = mkPackage(
  nixRaw`pkgs.betterdiscord-installer`,
  "Installer for BetterDiscord",
);

/**
 * A utility for managing BetterDiscord on Linux
 */
export const betterdiscordctl = mkPackage(
  nixRaw`pkgs.betterdiscordctl`,
  "A utility for managing BetterDiscord on Linux",
);

/**
 * Fast and sweet looking lockscreen for linux systems with effects!
 */
export const betterlockscreen = mkPackage(
  nixRaw`pkgs.betterlockscreen`,
  "Fast and sweet looking lockscreen for linux systems with effects!",
);

/**
 * X11 status bar with beveled borders
 */
export const bevelbar = mkPackage(
  nixRaw`pkgs.bevelbar`,
  "X11 status bar with beveled borders",
);

/**
 * Passwordless MFA identities for workforces, customers, and developers
 */
export const beyond_identity = mkPackage(
  nixRaw`pkgs.beyond-identity`,
  "Passwordless MFA identities for workforces, customers, and developers",
);

/**
 * An industrial-grade brainfuck compiler
 */
export const bfc = mkPackage(
  nixRaw`pkgs.bfc`,
  "An industrial-grade brainfuck compiler",
);

/**
 * Quickly display a calendar
 */
export const bfcal = mkPackage(
  nixRaw`pkgs.bfcal`,
  "Quickly display a calendar",
);

/**
 * A SuperB general-purpose fetch displayer written in portable sh
 */
export const bfetch = mkPackage(
  nixRaw`pkgs.bfetch`,
  "A SuperB general-purpose fetch displayer written in portable sh",
);

/**
 * Removes large or troublesome blobs in a git repository like git-filter-branch does, but faster
 */
export const bfg_repo_cleaner = mkPackage(
  nixRaw`pkgs.bfg-repo-cleaner`,
  "Removes large or troublesome blobs in a git repository like git-filter-branch does, but faster",
);

/**
 * A general-purpose command-line pipe buffer
 */
export const bfr = mkPackage(
  nixRaw`pkgs.bfr`,
  "A general-purpose command-line pipe buffer",
);

/**
 * A breadth-first version of the UNIX find command
 */
export const bfs = mkPackage(
  nixRaw`pkgs.bfs`,
  "A breadth-first version of the UNIX find command",
);

/**
 * Collection of scripts used for BlueField SoC system management
 */
export const bfscripts = mkPackage(
  nixRaw`pkgs.bfscripts`,
  "Collection of scripts used for BlueField SoC system management",
);

/**
 * A bundle of scripts for using Bio-Formats on the command line with bioformats_package.jar already included
 */
export const bftools = mkPackage(
  nixRaw`pkgs.bftools`,
  "A bundle of scripts for using Bio-Formats on the command line with bioformats_package.jar already included",
);

/**
 * A minimal ftp server
 */
export const bftpd = mkPackage(
  nixRaw`pkgs.bftpd`,
  "A minimal ftp server",
);

/**
 * Beej’s Guide to Network Programming
 */
export const bgnet = mkPackage(
  nixRaw`pkgs.bgnet`,
  "Beej’s Guide to Network Programming",
);

/**
 * Analyze dump files produced by Zebra/Quagga or MRT
 */
export const bgpdump = mkPackage(
  nixRaw`pkgs.bgpdump`,
  "Analyze dump files produced by Zebra/Quagga or MRT",
);

/**
 * bgp filtering automation tool
 */
export const bgpq3 = mkPackage(
  nixRaw`pkgs.bgpq3`,
  "bgp filtering automation tool",
);

/**
 * BGP filtering automation tool
 */
export const bgpq4 = mkPackage(
  nixRaw`pkgs.bgpq4`,
  "BGP filtering automation tool",
);

/**
 * Extremely fast and small background setter for X
 */
export const bgs = mkPackage(
  nixRaw`pkgs.bgs`,
  "Extremely fast and small background setter for X",
);

/**
 * Material Based Cursor Theme
 */
export const bibata_cursors = mkPackage(
  nixRaw`pkgs.bibata-cursors`,
  "Material Based Cursor Theme",
);

/**
 * Translucent Varient of the Material Based Cursor
 */
export const bibata_cursors_translucent = mkPackage(
  nixRaw`pkgs.bibata-cursors-translucent`,
  "Translucent Varient of the Material Based Cursor",
);

/**
 * Prettyprint and syntax check BibTeX and Scribe bibliography data base files
 */
export const bibclean = mkPackage(
  nixRaw`pkgs.bibclean`,
  "Prettyprint and syntax check BibTeX and Scribe bibliography data base files",
);

/**
 * Backend for BibLaTeX
 */
export const biber = mkPackage(
  nixRaw`pkgs.biber`,
  "Backend for BibLaTeX",
);

/**
 * Backend for BibLaTeX (multiscript version)
 */
export const biber_ms = mkPackage(
  nixRaw`pkgs.biber-ms`,
  "Backend for BibLaTeX (multiscript version)",
);

/**
 * Python2/3 script for checking BibLatex .bib files
 */
export const biblatex_check = mkPackage(
  nixRaw`pkgs.biblatex-check`,
  "Python2/3 script for checking BibLatex .bib files",
);

/**
 * A multicast protocol to Bible software shared conavigation
 */
export const biblesync = mkPackage(
  nixRaw`pkgs.biblesync`,
  "A multicast protocol to Bible software shared conavigation",
);

/**
 * A powerful cross platform Bible study tool
 */
export const bibletime = mkPackage(
  nixRaw`pkgs.bibletime`,
  "A powerful cross platform Bible study tool",
);

/**
 * Modern XMPP IRC gateway
 */
export const biboumi = mkPackage(
  nixRaw`pkgs.biboumi`,
  "Modern XMPP IRC gateway",
);

/**
 * A collection of tools for translating from BibTeX to HTML
 */
export const bibtex2html = mkPackage(
  nixRaw`pkgs.bibtex2html`,
  "A collection of tools for translating from BibTeX to HTML",
);

/**
 * Cleaner and Formatter for BibTeX files
 */
export const bibtex_tidy = mkPackage(
  nixRaw`pkgs.bibtex-tidy`,
  "Cleaner and Formatter for BibTeX files",
);

/**
 * Tool for manipulating BibTeX bibliographies
 */
export const bibtool = mkPackage(
  nixRaw`pkgs.bibtool`,
  "Tool for manipulating BibTeX bibliographies",
);

/**
 * Bibliography format interconversion
 */
export const bibutils = mkPackage(
  nixRaw`pkgs.bibutils`,
  "Bibliography format interconversion",
);

/**
 * A C interpreter and API explorer
 */
export const bic = mkPackage(
  nixRaw`pkgs.bic`,
  "A C interpreter and API explorer",
);

/**
 * Brain Imaging Centre graphics library
 */
export const bicgl = mkPackage(
  nixRaw`pkgs.bicgl`,
  "Brain Imaging Centre graphics library",
);

/**
 * A bidirectional console
 */
export const bicon = mkPackage(
  nixRaw`pkgs.bicon`,
  "A bidirectional console",
);

/**
 * Brain Imaging Centre programming library
 */
export const bicpl = mkPackage(
  nixRaw`pkgs.bicpl`,
  "Brain Imaging Centre programming library",
);

/**
 * Efficient Scheme compiler
 */
export const bigloo = mkPackage(
  nixRaw`pkgs.bigloo`,
  "Efficient Scheme compiler",
);

/**
 * Preprocessor for anyone writing specifications that converts source files into actual specs
 */
export const bikeshed = mkPackage(
  nixRaw`pkgs.bikeshed`,
  "Preprocessor for anyone writing specifications that converts source files into actual specs",
);

/**
 * Convert Bilibili XML/protobuf danmaku to ASS subtitle
 */
export const biliass = mkPackage(
  nixRaw`pkgs.biliass`,
  "Convert Bilibili XML/protobuf danmaku to ASS subtitle",
);

/**
 * Electron-based bilibili desktop client
 */
export const bilibili = mkPackage(
  nixRaw`pkgs.bilibili`,
  "Electron-based bilibili desktop client",
);

/**
 * A convenient free open source bilibili live recording tool
 */
export const bililiverecorder = mkPackage(
  nixRaw`pkgs.bililiverecorder`,
  "A convenient free open source bilibili live recording tool",
);

/**
 * Embed binary & text files inside C binaries
 */
export const bin2c = mkPackage(
  nixRaw`pkgs.bin2c`,
  "Embed binary & text files inside C binaries",
);

/**
 * Binance Cryptoexchange Official Desktop Client
 */
export const binance = mkPackage(
  nixRaw`pkgs.binance`,
  "Binance Cryptoexchange Official Desktop Client",
);

/**
 * Compiler infrastructure and toolchain library for WebAssembly, in C++
 */
export const binaryen = mkPackage(
  nixRaw`pkgs.binaryen`,
  "Compiler infrastructure and toolchain library for WebAssembly, in C++",
);

/**
 * Raw binary firmware analysis software
 */
export const binbloom = mkPackage(
  nixRaw`pkgs.binbloom`,
  "Raw binary firmware analysis software",
);

/**
 * Domain name server
 */
export const bind = mkPackage(
  nixRaw`pkgs.bind`,
  "Domain name server",
);

/**
 * A FUSE filesystem for mounting a directory to another location
 */
export const bindfs = mkPackage(
  nixRaw`pkgs.bindfs`,
  "A FUSE filesystem for mounting a directory to another location",
);

/**
 * Bindle: Aggregate Object Storage
 */
export const bindle = mkPackage(
  nixRaw`pkgs.bindle`,
  "Bindle: Aggregate Object Storage",
);

/**
 * Like `go get` but for Go tools! CI Automating versioning of Go binaries in a nested, isolated Go modules.
 */
export const bingo = mkPackage(
  nixRaw`pkgs.bingo`,
  "Like `go get` but for Go tools! CI Automating versioning of Go binaries in a nested, isolated Go modules.",
);

/**
 * Greps through binaries from various OSs and architectures, and colors them
 */
export const bingrep = mkPackage(
  nixRaw`pkgs.bingrep`,
  "Greps through binaries from various OSs and architectures, and colors them",
);

/**
 * Stereoscopic 3D and multi-display video player
 */
export const bino3d = mkPackage(
  nixRaw`pkgs.bino3d`,
  "Stereoscopic 3D and multi-display video player",
);

/**
 * Graphical tool to visualize binary data
 */
export const binocle = mkPackage(
  nixRaw`pkgs.binocle`,
  "Graphical tool to visualize binary data",
);

/**
 * A fast production-ready static web server
 */
export const binserve = mkPackage(
  nixRaw`pkgs.binserve`,
  "A fast production-ready static web server",
);

/**
 * Sort files by binary similarity
 */
export const binsort = mkPackage(
  nixRaw`pkgs.binsort`,
  "Sort files by binary similarity",
);

/**
 * Tools for manipulating binaries (linker, assembler, etc.) (wrapper script)
 */
export const bintools = mkPackage(
  nixRaw`pkgs.bintools`,
  "Tools for manipulating binaries (linker, assembler, etc.) (wrapper script)",
);

/**
 * System binary utilities (wrapper script)
 */
export const bintoolsDualAs = mkPackage(
  nixRaw`pkgs.bintoolsDualAs`,
  "System binary utilities (wrapper script)",
);

/**
 * Tools for manipulating binaries (linker, assembler, etc.) (wrapper script)
 */
export const bintoolsNoLibc = mkPackage(
  nixRaw`pkgs.bintoolsNoLibc`,
  "Tools for manipulating binaries (linker, assembler, etc.) (wrapper script)",
);

/**
 * Tools for manipulating binaries (linker, assembler, etc.)
 */
export const bintools_unwrapped = mkPackage(
  nixRaw`pkgs.bintools-unwrapped`,
  "Tools for manipulating binaries (linker, assembler, etc.)",
);

/**
 * Tools for manipulating binaries (linker, assembler, etc.) (wrapper script)
 */
export const binutils = mkPackage(
  nixRaw`pkgs.binutils`,
  "Tools for manipulating binaries (linker, assembler, etc.) (wrapper script)",
);

/**
 * Tools for manipulating binaries (linker, assembler, etc.) (wrapper script)
 */
export const binutilsNoLibc = mkPackage(
  nixRaw`pkgs.binutilsNoLibc`,
  "Tools for manipulating binaries (linker, assembler, etc.) (wrapper script)",
);

/**
 * Tools for manipulating binaries (linker, assembler, etc.) (wrapper script)
 */
export const binutils_nogold = mkPackage(
  nixRaw`pkgs.binutils_nogold`,
  "Tools for manipulating binaries (linker, assembler, etc.) (wrapper script)",
);

/**
 * Tools for manipulating binaries (linker, assembler, etc.)
 */
export const binutils_unwrapped = mkPackage(
  nixRaw`pkgs.binutils-unwrapped`,
  "Tools for manipulating binaries (linker, assembler, etc.)",
);

/**
 * Tools for manipulating binaries (linker, assembler, etc.)
 */
export const binutils_unwrapped_2_38 = mkPackage(
  nixRaw`pkgs.binutils-unwrapped_2_38`,
  "Tools for manipulating binaries (linker, assembler, etc.)",
);

/**
 * Tools for manipulating binaries (linker, assembler, etc.)
 */
export const binutils_unwrapped_all_targets = mkPackage(
  nixRaw`pkgs.binutils-unwrapped-all-targets`,
  "Tools for manipulating binaries (linker, assembler, etc.)",
);

/**
 * A tool for searching a given binary image for embedded files
 */
export const binwalk = mkPackage(
  nixRaw`pkgs.binwalk`,
  "A tool for searching a given binary image for embedded files",
);

/**
 * BWK awk modified for biological data
 */
export const bioawk = mkPackage(
  nixRaw`pkgs.bioawk`,
  "BWK awk modified for biological data",
);

/**
 * Hex diff viewer using alignment algorithms from biology
 */
export const biodiff = mkPackage(
  nixRaw`pkgs.biodiff`,
  "Hex diff viewer using alignment algorithms from biology",
);

/**
 * Toolchain of the web
 */
export const biome = mkPackage(
  nixRaw`pkgs.biome`,
  "Toolchain of the web",
);

/**
 * The Android libc implementation
 */
export const bionic = mkPackage(
  nixRaw`pkgs.bionic`,
  "The Android libc implementation",
);

/**
 * Udev helper for naming devices per BIOS names
 */
export const biosdevname = mkPackage(
  nixRaw`pkgs.biosdevname`,
  "Udev helper for naming devices per BIOS names",
);

/**
 * An IRC proxy (bouncer)
 */
export const bip = mkPackage(
  nixRaw`pkgs.bip`,
  "An IRC proxy (bouncer)",
);

/**
 * BIRD Internet Routing Daemon
 */
export const bird = mkPackage(
  nixRaw`pkgs.bird`,
  "BIRD Internet Routing Daemon",
);

/**
 * Bird Looking Glass
 */
export const bird_lg = mkPackage(
  nixRaw`pkgs.bird-lg`,
  "Bird Looking Glass",
);

/**
 * Font editor which can generate fonts in TTF, EOT, SVG and BIRDFONT format
 */
export const birdfont = mkPackage(
  nixRaw`pkgs.birdfont`,
  "Font editor which can generate fonts in TTF, EOT, SVG and BIRDFONT format",
);

/**
 * Mail system tray notification icon for Thunderbird
 */
export const birdtray = mkPackage(
  nixRaw`pkgs.birdtray`,
  "Mail system tray notification icon for Thunderbird",
);

/**
 * A small HTTP server meant to provide an API defined by Barry O'Donovan's birds-eye to the BIRD internet routing daemon
 */
export const birdwatcher = mkPackage(
  nixRaw`pkgs.birdwatcher`,
  "A small HTTP server meant to provide an API defined by Barry O'Donovan's birds-eye to the BIRD internet routing daemon",
);

/**
 * CLI to generate and inspect biscuit tokens
 */
export const biscuit_cli = mkPackage(
  nixRaw`pkgs.biscuit-cli`,
  "CLI to generate and inspect biscuit tokens",
);

/**
 * Yacc-compatible parser generator
 */
export const bison = mkPackage(
  nixRaw`pkgs.bison`,
  "Yacc-compatible parser generator",
);

/**
 * A parser generator like bison, but it generates C++ code
 */
export const bisoncpp = mkPackage(
  nixRaw`pkgs.bisoncpp`,
  "A parser generator like bison, but it generates C++ code",
);

/**
 * A decentralized bitcoin exchange network
 */
export const bisq_desktop = mkPackage(
  nixRaw`pkgs.bisq-desktop`,
  "A decentralized bitcoin exchange network",
);

/**
 * Command-line tool for git
 */
export const bit = mkPackage(
  nixRaw`pkgs.bit`,
  "Command-line tool for git",
);

/**
 * Language server for bitbake
 */
export const bitbake_language_server = mkPackage(
  nixRaw`pkgs.bitbake-language-server`,
  "Language server for bitbake",
);

/**
 * A command line interface to interact with BitBucket Server (formerly Atlassian Stash)
 */
export const bitbucket_server_cli = mkPackage(
  nixRaw`pkgs.bitbucket-server-cli`,
  "A command line interface to interact with BitBucket Server (formerly Atlassian Stash)",
);

/**
 * Peer-to-peer electronic cash system
 */
export const bitcoin = mkPackage(
  nixRaw`pkgs.bitcoin`,
  "Peer-to-peer electronic cash system",
);

/**
 * Peer-to-peer electronic cash system (Cash client)
 */
export const bitcoin_abc = mkPackage(
  nixRaw`pkgs.bitcoin-abc`,
  "Peer-to-peer electronic cash system (Cash client)",
);

/**
 * Peer-to-peer electronic cash system
 */
export const bitcoind = mkPackage(
  nixRaw`pkgs.bitcoind`,
  "Peer-to-peer electronic cash system",
);

/**
 * Peer-to-peer electronic cash system (Cash client)
 */
export const bitcoind_abc = mkPackage(
  nixRaw`pkgs.bitcoind-abc`,
  "Peer-to-peer electronic cash system (Cash client)",
);

/**
 * A derivative of Bitcoin Core with a collection of improvements
 */
export const bitcoind_knots = mkPackage(
  nixRaw`pkgs.bitcoind-knots`,
  "A derivative of Bitcoin Core with a collection of improvements",
);

/**
 * IRC instant messaging gateway
 */
export const bitlbee = mkPackage(
  nixRaw`pkgs.bitlbee`,
  "IRC instant messaging gateway",
);

/**
 * Bitlbee plugin for Discord
 */
export const bitlbee_discord = mkPackage(
  nixRaw`pkgs.bitlbee-discord`,
  "Bitlbee plugin for Discord",
);

/**
 * The Facebook protocol plugin for bitlbee
 */
export const bitlbee_facebook = mkPackage(
  nixRaw`pkgs.bitlbee-facebook`,
  "The Facebook protocol plugin for bitlbee",
);

/**
 * Bitlbee plugin for Mastodon
 */
export const bitlbee_mastodon = mkPackage(
  nixRaw`pkgs.bitlbee-mastodon`,
  "Bitlbee plugin for Mastodon",
);

/**
 * Steam protocol plugin for BitlBee
 */
export const bitlbee_steam = mkPackage(
  nixRaw`pkgs.bitlbee-steam`,
  "Steam protocol plugin for BitlBee",
);

/**
 * A self-hosted BitTorrent indexer, DHT crawler, and torrent search engine
 */
export const bitmagnet = mkPackage(
  nixRaw`pkgs.bitmagnet`,
  "A self-hosted BitTorrent indexer, DHT crawler, and torrent search engine",
);

/**
 * Also known as jack bitscope. Useful to detect denormals
 */
export const bitmeter = mkPackage(
  nixRaw`pkgs.bitmeter`,
  "Also known as jack bitscope. Useful to detect denormals",
);

/**
 * A secure and free password manager for all of your devices
 */
export const bitwarden = mkPackage(
  nixRaw`pkgs.bitwarden`,
  "A secure and free password manager for all of your devices",
);

/**
 * A secure and free password manager for all of your devices
 */
export const bitwarden_cli = mkPackage(
  nixRaw`pkgs.bitwarden-cli`,
  "A secure and free password manager for all of your devices",
);

/**
 * Dmenu/Rofi frontend for managing Bitwarden vaults. Uses the Bitwarden CLI tool to interact with the Bitwarden database.
 */
export const bitwarden_menu = mkPackage(
  nixRaw`pkgs.bitwarden-menu`,
  "Dmenu/Rofi frontend for managing Bitwarden vaults. Uses the Bitwarden CLI tool to interact with the Bitwarden database.",
);

/**
 * A digital audio workstation
 */
export const bitwig_studio = mkPackage(
  nixRaw`pkgs.bitwig-studio`,
  "A digital audio workstation",
);

/**
 * A digital audio workstation
 */
export const bitwig_studio3 = mkPackage(
  nixRaw`pkgs.bitwig-studio3`,
  "A digital audio workstation",
);

/**
 * A digital audio workstation
 */
export const bitwig_studio4 = mkPackage(
  nixRaw`pkgs.bitwig-studio4`,
  "A digital audio workstation",
);

/**
 * A digital audio workstation
 */
export const bitwig_studio5 = mkPackage(
  nixRaw`pkgs.bitwig-studio5`,
  "A digital audio workstation",
);

/**
 * Terminal based bitwise calculator in curses
 */
export const bitwise = mkPackage(
  nixRaw`pkgs.bitwise`,
  "Terminal based bitwise calculator in curses",
);

/**
 * A SMT solver for fixed-size bit-vectors, floating-point arithmetic, arrays, and uninterpreted functions
 */
export const bitwuzla = mkPackage(
  nixRaw`pkgs.bitwuzla`,
  "A SMT solver for fixed-size bit-vectors, floating-point arithmetic, arrays, and uninterpreted functions",
);

/**
 * Pattern-controlled audio stream / sample re-sequencer LV2 plugin
 */
export const bjumblr = mkPackage(
  nixRaw`pkgs.bjumblr`,
  "Pattern-controlled audio stream / sample re-sequencer LV2 plugin",
);

/**
 * Crack legacy zip encryption with Biham and Kocher's known plaintext attack
 */
export const bkcrack = mkPackage(
  nixRaw`pkgs.bkcrack`,
  "Crack legacy zip encryption with Biham and Kocher's known plaintext attack",
);

/**
 * Ncurses Binary Clock
 */
export const bklk = mkPackage(
  nixRaw`pkgs.bklk`,
  "Ncurses Binary Clock",
);

/**
 * A subprocess caching utility
 */
export const bkt = mkPackage(
  nixRaw`pkgs.bkt`,
  "A subprocess caching utility",
);

/**
 * A CLI tool to generate a pipeline.yaml file for Buildkite on the fly.
 */
export const bkyml = mkPackage(
  nixRaw`pkgs.bkyml`,
  "A CLI tool to generate a pipeline.yaml file for Buildkite on the fly.",
);

/**
 * The uncompromising Python code formatter
 */
export const black = mkPackage(
  nixRaw`pkgs.black`,
  "The uncompromising Python code formatter",
);

/**
 * A solver for Solitaire variants Golf, Black Hole, and All in a Row.
 */
export const black_hole_solver = mkPackage(
  nixRaw`pkgs.black-hole-solver`,
  "A solver for Solitaire variants Golf, Black Hole, and All in a Row.",
);

/**
 * This is a small utility built on top of the black Python code formatter to enable formatting of partial files
 */
export const black_macchiato = mkPackage(
  nixRaw`pkgs.black-macchiato`,
  "This is a small utility built on top of the black Python code formatter to enable formatting of partial files",
);

/**
 * Dark Desktop Suite for Gtk, Xfce and Metacity
 */
export const blackbird = mkPackage(
  nixRaw`pkgs.blackbird`,
  "Dark Desktop Suite for Gtk, Xfce and Metacity",
);

/**
 * Safely store secrets in a VCS repo
 */
export const blackbox = mkPackage(
  nixRaw`pkgs.blackbox`,
  "Safely store secrets in a VCS repo",
);

/**
 * Beautiful GTK 4 terminal
 */
export const blackbox_terminal = mkPackage(
  nixRaw`pkgs.blackbox-terminal`,
  "Beautiful GTK 4 terminal",
);

/**
 * Run Black on Python code blocks in documentation files
 */
export const blacken_docs = mkPackage(
  nixRaw`pkgs.blacken-docs`,
  "Run Black on Python code blocks in documentation files",
);

/**
 * Blackfire Profiler agent and client
 */
export const blackfire = mkPackage(
  nixRaw`pkgs.blackfire`,
  "Blackfire Profiler agent and client",
);

/**
 * In-application debugger for ARM Cortex microcontrollers
 */
export const blackmagic = mkPackage(
  nixRaw`pkgs.blackmagic`,
  "In-application debugger for ARM Cortex microcontrollers",
);

/**
 * Supporting applications for Blackmagic Decklink. Doesn't include the desktop applications, only the helper required to make the driver work
 */
export const blackmagic_desktop_video = mkPackage(
  nixRaw`pkgs.blackmagic-desktop-video`,
  "Supporting applications for Blackmagic Decklink. Doesn't include the desktop applications, only the helper required to make the driver work",
);

/**
 * A bad-ass, unholy-mother-shut-your-mouth stencil sans-serif
 */
export const blackout = mkPackage(
  nixRaw`pkgs.blackout`,
  "A bad-ass, unholy-mother-shut-your-mouth stencil sans-serif",
);

/**
 * A psychic bodyguard FPS
 */
export const blackshades = mkPackage(
  nixRaw`pkgs.blackshades`,
  "A psychic bodyguard FPS",
);

/**
 * Gay sharks at your local terminal - lolcat-like CLI tool
 */
export const blahaj = mkPackage(
  nixRaw`pkgs.blahaj`,
  "Gay sharks at your local terminal - lolcat-like CLI tool",
);

/**
 * A TeX to MathML converter
 */
export const blahtexml = mkPackage(
  nixRaw`pkgs.blahtexml`,
  "A TeX to MathML converter",
);

/**
 * Listen to different sounds
 */
export const blanket = mkPackage(
  nixRaw`pkgs.blanket`,
  "Listen to different sounds",
);

/**
 * openblas with just the BLAS C and FORTRAN ABI
 */
export const blas = mkPackage(
  nixRaw`pkgs.blas`,
  "openblas with just the BLAS C and FORTRAN ABI",
);

/**
 * openblas with just the BLAS C and FORTRAN ABI
 */
export const blas_ilp64 = mkPackage(
  nixRaw`pkgs.blas-ilp64`,
  "openblas with just the BLAS C and FORTRAN ABI",
);

/**
 * Basic Linear Algebra Subprograms
 */
export const blas_reference = mkPackage(
  nixRaw`pkgs.blas-reference`,
  "Basic Linear Algebra Subprograms",
);

    /**
     * Basic Local Alignment Search Tool (BLAST) finds regions of
similarity between biological sequences
     */
export const blast = mkPackage(
  nixRaw`pkgs.blast`,
  "Basic Local Alignment Search Tool (BLAST) finds regions of\n    similarity between biological sequences",
);

    /**
     * Basic Local Alignment Search Tool (BLAST) finds regions of
similarity between biological sequences
     */
export const blast_bin = mkPackage(
  nixRaw`pkgs.blast-bin`,
  "Basic Local Alignment Search Tool (BLAST) finds regions of\n    similarity between biological sequences",
);

/**
 * high performance C++ math library
 */
export const blaze = mkPackage(
  nixRaw`pkgs.blaze`,
  "high performance C++ math library",
);

/**
 * A program to clean your computer
 */
export const bleachbit = mkPackage(
  nixRaw`pkgs.bleachbit`,
  "A program to clean your computer",
);

/**
 * 3D Creation/Animation/Publishing System
 */
export const blender = mkPackage(
  nixRaw`pkgs.blender`,
  "3D Creation/Animation/Publishing System",
);

/**
 * 3D Creation/Animation/Publishing System
 */
export const blender_hip = mkPackage(
  nixRaw`pkgs.blender-hip`,
  "3D Creation/Animation/Publishing System",
);

/**
 * Bash Line Editor -- a full-featured line editor written in pure Bash
 */
export const blesh = mkPackage(
  nixRaw`pkgs.blesh`,
  "Bash Line Editor -- a full-featured line editor written in pure Bash",
);

/**
 * Gtk# Hex Editor
 */
export const bless = mkPackage(
  nixRaw`pkgs.bless`,
  "Gtk# Hex Editor",
);

/**
 * An bl602 serial flasher written in Rust
 */
export const blflash = mkPackage(
  nixRaw`pkgs.blflash`,
  "An bl602 serial flasher written in Rust",
);

/**
 * A terminal MUD client written in Rust
 */
export const blightmud = mkPackage(
  nixRaw`pkgs.blightmud`,
  "A terminal MUD client written in Rust",
);

/**
 * A terminal MUD client written in Rust
 */
export const blightmud_tts = mkPackage(
  nixRaw`pkgs.blightmud-tts`,
  "A terminal MUD client written in Rust",
);

/**
 * Tiniest x86-64-linux emulator
 */
export const blink = mkPackage(
  nixRaw`pkgs.blink`,
  "Tiniest x86-64-linux emulator",
);

/**
 * Command line client for the blink(1) notification light
 */
export const blink1_tool = mkPackage(
  nixRaw`pkgs.blink1-tool`,
  "Command line client for the blink(1) notification light",
);

/**
 * BLAS-compatible linear algebra library
 */
export const blis = mkPackage(
  nixRaw`pkgs.blis`,
  "BLAS-compatible linear algebra library",
);

/**
 * An In-System-Programming (ISP) tool & library for Bouffalo Labs RISC-V Microcontrollers and SoCs
 */
export const blisp = mkPackage(
  nixRaw`pkgs.blisp`,
  "An In-System-Programming (ISP) tool & library for Bouffalo Labs RISC-V Microcontrollers and SoCs",
);

/**
 * An open source tool for computing automorphism groups and canonical forms of graphs. It has both a command line user interface as well as C++ and C programming language APIs
 */
export const bliss = mkPackage(
  nixRaw`pkgs.bliss`,
  "An open source tool for computing automorphism groups and canonical forms of graphs. It has both a command line user interface as well as C++ and C programming language APIs",
);

/**
 * Fast multi-dimensional array library for C++
 */
export const blitz = mkPackage(
  nixRaw`pkgs.blitz`,
  "Fast multi-dimensional array library for C++",
);

/**
 * Block layer IO tracing mechanism
 */
export const blktrace = mkPackage(
  nixRaw`pkgs.blktrace`,
  "Block layer IO tracing mechanism",
);

/**
 * A web client for Pleroma and Mastodon
 */
export const bloat = mkPackage(
  nixRaw`pkgs.bloat`,
  "A web client for Pleroma and Mastodon",
);

/**
 * a size profiler for binaries
 */
export const bloaty = mkPackage(
  nixRaw`pkgs.bloaty`,
  "a size profiler for binaries",
);

/**
 * A blobby volleyball game
 */
export const blobby = mkPackage(
  nixRaw`pkgs.blobby`,
  "A blobby volleyball game",
);

/**
 * Mount an Azure Blob storage as filesystem through FUSE
 */
export const blobfuse = mkPackage(
  nixRaw`pkgs.blobfuse`,
  "Mount an Azure Blob storage as filesystem through FUSE",
);

/**
 * Platform action game featuring a blob with lots of weapons
 */
export const blobwars = mkPackage(
  nixRaw`pkgs.blobwars`,
  "Platform action game featuring a blob with lots of weapons",
);

/**
 * An open source clone of Panel de Pon (aka Tetris Attack)
 */
export const blockattack = mkPackage(
  nixRaw`pkgs.blockattack`,
  "An open source clone of Panel de Pon (aka Tetris Attack)",
);

/**
 * A boxy 3D model editor powered by Electron
 */
export const blockbench_electron = mkPackage(
  nixRaw`pkgs.blockbench-electron`,
  "A boxy 3D model editor powered by Electron",
);

/**
 * Trezor address/account balance backend
 */
export const blockbook = mkPackage(
  nixRaw`pkgs.blockbook`,
  "Trezor address/account balance backend",
);

/**
 * Generate block-diagram image from spec-text file (similar to Graphviz)
 */
export const blockdiag = mkPackage(
  nixRaw`pkgs.blockdiag`,
  "Generate block-diagram image from spec-text file (similar to Graphviz)",
);

        /**
         * This is a perceptual image hash calculation tool based on algorithm
descibed in Block Mean Value Based Image Perceptual Hashing by Bian Yang,
Fan Gu and Xiamu Niu.

         */
export const blockhash = mkPackage(
  nixRaw`pkgs.blockhash`,
  "This is a perceptual image hash calculation tool based on algorithm\ndescibed in Block Mean Value Based Image Perceptual Hashing by Bian Yang,\nFan Gu and Xiamu Niu.\n",
);

/**
 * Blockstream Satellite CLI
 */
export const blocksat_cli = mkPackage(
  nixRaw`pkgs.blocksat-cli`,
  "Blockstream Satellite CLI",
);

/**
 * Fast and lightweight DNS proxy as ad-blocker for local network with many features.
 */
export const blocky = mkPackage(
  nixRaw`pkgs.blocky`,
  "Fast and lightweight DNS proxy as ad-blocker for local network with many features.",
);

/**
 * A blog compiler
 */
export const blogc = mkPackage(
  nixRaw`pkgs.blogc`,
  "A blog compiler",
);

/**
 * Active Directory reconnaissance and attack path management tool
 */
export const bloodhound = mkPackage(
  nixRaw`pkgs.bloodhound`,
  "Active Directory reconnaissance and attack path management tool",
);

/**
 * Ingestor for BloodHound
 */
export const bloodhound_py = mkPackage(
  nixRaw`pkgs.bloodhound-py`,
  "Ingestor for BloodHound",
);

/**
 * A multiplayer space combat game (client part)
 */
export const bloodspilot_client = mkPackage(
  nixRaw`pkgs.bloodspilot-client`,
  "A multiplayer space combat game (client part)",
);

/**
 * A multiplayer X11 space combat game (server part)
 */
export const bloodspilot_server = mkPackage(
  nixRaw`pkgs.bloodspilot-server`,
  "A multiplayer X11 space combat game (server part)",
);

/**
 * GUI Client for GRPC Services
 */
export const bloomrpc = mkPackage(
  nixRaw`pkgs.bloomrpc`,
  "GUI Client for GRPC Services",
);

/**
 * A Scala build server and command-line tool to make the compile and test developer workflows fast and productive in a build-tool-agnostic way
 */
export const bloop = mkPackage(
  nixRaw`pkgs.bloop`,
  "A Scala build server and command-line tool to make the compile and test developer workflows fast and productive in a build-tool-agnostic way",
);

/**
 * Multilingual BLS12-381 signature library
 */
export const blst = mkPackage(
  nixRaw`pkgs.blst`,
  "Multilingual BLS12-381 signature library",
);

/**
 * Configurable blue light filter
 */
export const blucontrol = mkPackage(
  nixRaw`pkgs.blucontrol`,
  "Configurable blue light filter",
);

/**
 * Bluetooth configuration tool
 */
export const blueberry = mkPackage(
  nixRaw`pkgs.blueberry`,
  "Bluetooth configuration tool",
);

/**
 * A powerful editor targeted towards programmers and webdevelopers
 */
export const bluefish = mkPackage(
  nixRaw`pkgs.bluefish`,
  "A powerful editor targeted towards programmers and webdevelopers",
);

/**
 * A simple integrated development environment for Java
 */
export const bluej = mkPackage(
  nixRaw`pkgs.bluej`,
  "A simple integrated development environment for Java",
);

/**
 * Video, audio, and web conferencing that works together with the collaboration tools you use every day
 */
export const bluejeans_gui = mkPackage(
  nixRaw`pkgs.bluejeans-gui`,
  "Video, audio, and web conferencing that works together with the collaboration tools you use every day",
);

/**
 * Free, secure, universal email app, capable of managing an unlimited number of mail accounts
 */
export const bluemail = mkPackage(
  nixRaw`pkgs.bluemail`,
  "Free, secure, universal email app, capable of managing an unlimited number of mail accounts",
);

/**
 * GTK-based Bluetooth Manager
 */
export const blueman = mkPackage(
  nixRaw`pkgs.blueman`,
  "GTK-based Bluetooth Manager",
);

/**
 * Administration CLI for IBM BlueMix
 */
export const bluemix_cli = mkPackage(
  nixRaw`pkgs.bluemix-cli`,
  "Administration CLI for IBM BlueMix",
);

/**
 * A markup language for GTK user interface files
 */
export const blueprint_compiler = mkPackage(
  nixRaw`pkgs.blueprint-compiler`,
  "A markup language for GTK user interface files",
);

/**
 * Toolchain for the Bluespec Hardware Definition Language
 */
export const bluespec = mkPackage(
  nixRaw`pkgs.bluespec`,
  "Toolchain for the Bluespec Hardware Definition Language",
);

/**
 * Fetch the battery charge level of some Bluetooth headsets
 */
export const bluetooth_battery = mkPackage(
  nixRaw`pkgs.bluetooth_battery`,
  "Fetch the battery charge level of some Bluetooth headsets",
);

/**
 * TUI-based bluetooth connection manager
 */
export const bluetuith = mkPackage(
  nixRaw`pkgs.bluetuith`,
  "TUI-based bluetooth connection manager",
);

/**
 * Simple command line Bluetooth LE scanner
 */
export const bluewalker = mkPackage(
  nixRaw`pkgs.bluewalker`,
  "Simple command line Bluetooth LE scanner",
);

/**
 * Bluetooth support for Linux
 */
export const bluez = mkPackage(
  nixRaw`pkgs.bluez`,
  "Bluetooth support for Linux",
);

/**
 * Bluetooth support for Linux
 */
export const bluez5 = mkPackage(
  nixRaw`pkgs.bluez5`,
  "Bluetooth support for Linux",
);

/**
 * Bluetooth support for Linux
 */
export const bluez5_experimental = mkPackage(
  nixRaw`pkgs.bluez5-experimental`,
  "Bluetooth support for Linux",
);

/**
 * Bluez 5 Bluetooth Audio ALSA Backend
 */
export const bluez_alsa = mkPackage(
  nixRaw`pkgs.bluez-alsa`,
  "Bluez 5 Bluetooth Audio ALSA Backend",
);

/**
 * Command line bluetooth manager for Bluez5
 */
export const bluez_tools = mkPackage(
  nixRaw`pkgs.bluez-tools`,
  "Command line bluetooth manager for Bluez5",
);

/**
 * Simple and configurable Blue Light Filter for X
 */
export const blugon = mkPackage(
  nixRaw`pkgs.blugon`,
  "Simple and configurable Blue Light Filter for X",
);

/**
 * Off-screen image blurring utility using OpenGL ES 3.0
 */
export const blur_effect = mkPackage(
  nixRaw`pkgs.blur-effect`,
  "Off-screen image blurring utility using OpenGL ES 3.0",
);

/**
 * Portable version of NetBSD 'make'
 */
export const bmake = mkPackage(
  nixRaw`pkgs.bmake`,
  "Portable version of NetBSD 'make'",
);

/**
 * bmap-related tools
 */
export const bmap_tools = mkPackage(
  nixRaw`pkgs.bmap-tools`,
  "bmap-related tools",
);

/**
 * Network bandwidth monitor
 */
export const bmon = mkPackage(
  nixRaw`pkgs.bmon`,
  "Network bandwidth monitor",
);

/**
 * RSA utility
 */
export const bmrsa = mkPackage(
  nixRaw`pkgs.bmrsa`,
  "RSA utility",
);

/**
 * An embeddable and experimental Javascript engine written in Rust
 */
export const boa = mkPackage(
  nixRaw`pkgs.boa`,
  "An embeddable and experimental Javascript engine written in Rust",
);

/**
 * Control Elgato Stream Deck devices.
 */
export const boatswain = mkPackage(
  nixRaw`pkgs.boatswain`,
  "Control Elgato Stream Deck devices.",
);

/**
 * A build system for microservices
 */
export const bob = mkPackage(
  nixRaw`pkgs.bob`,
  "A build system for microservices",
);

/**
 * Brokken's Own Base Classes And Templates
 */
export const bobcat = mkPackage(
  nixRaw`pkgs.bobcat`,
  "Brokken's Own Base Classes And Templates",
);

/**
 * A component library used by the fre:ac audio converter
 */
export const boca = mkPackage(
  nixRaw`pkgs.boca`,
  "A component library used by the fre:ac audio converter",
);

/**
 * An open-source IA-32 (x86) PC emulator
 */
export const bochs = mkPackage(
  nixRaw`pkgs.bochs`,
  "An open-source IA-32 (x86) PC emulator",
);

/**
 * Golang linter to check whether HTTP response body is closed and a re-use of TCP connection is not blocked
 */
export const bodyclose = mkPackage(
  nixRaw`pkgs.bodyclose`,
  "Golang linter to check whether HTTP response body is closed and a re-use of TCP connection is not blocked",
);

/**
 * The Boehm-Demers-Weiser conservative garbage collector for C and C++
 */
export const boehmgc = mkPackage(
  nixRaw`pkgs.boehmgc`,
  "The Boehm-Demers-Weiser conservative garbage collector for C and C++",
);

export const bogofilter = mkPackage(
  nixRaw`pkgs.bogofilter`,
  "",
);

/**
 * Free software for distributed and grid computing
 */
export const boinc = mkPackage(
  nixRaw`pkgs.boinc`,
  "Free software for distributed and grid computing",
);

/**
 * Free software for distributed and grid computing
 */
export const boinc_headless = mkPackage(
  nixRaw`pkgs.boinc-headless`,
  "Free software for distributed and grid computing",
);

/**
 * A flexible LV2 delay plugin
 */
export const bolliedelayxt_lv2 = mkPackage(
  nixRaw`pkgs.bolliedelayxt-lv2`,
  "A flexible LV2 delay plugin",
);

/**
 * Thunderbolt 3 device management daemon
 */
export const bolt = mkPackage(
  nixRaw`pkgs.bolt`,
  "Thunderbolt 3 device management daemon",
);

/**
 * CLI Browser for BoltDB files
 */
export const boltbrowser = mkPackage(
  nixRaw`pkgs.boltbrowser`,
  "CLI Browser for BoltDB files",
);

/**
 * A utility to generate SPDX-compliant Bill of Materials manifests
 */
export const bom = mkPackage(
  nixRaw`pkgs.bom`,
  "A utility to generate SPDX-compliant Bill of Materials manifests",
);

/**
 * Non-web client for the terminal, supporting Gopher, Gemini and more
 */
export const bombadillo = mkPackage(
  nixRaw`pkgs.bombadillo`,
  "Non-web client for the terminal, supporting Gopher, Gemini and more",
);

/**
 * Fast cross-platform HTTP benchmarking tool written in Go
 */
export const bombardier = mkPackage(
  nixRaw`pkgs.bombardier`,
  "Fast cross-platform HTTP benchmarking tool written in Go",
);

/**
 * Tool to scans Software Bill of Materials (SBOMs) for vulnerabilities
 */
export const bomber_go = mkPackage(
  nixRaw`pkgs.bomber-go`,
  "Tool to scans Software Bill of Materials (SBOMs) for vulnerabilities",
);

/**
 * a DVD authoring program for personal computers
 */
export const bombono = mkPackage(
  nixRaw`pkgs.bombono`,
  "a DVD authoring program for personal computers",
);

/**
 * Open source tools to create bill-of-materials files used in macOS installers
 */
export const bomutils = mkPackage(
  nixRaw`pkgs.bomutils`,
  "Open source tools to create bill-of-materials files used in macOS installers",
);

/**
 * The blazingly fast touch alternative written in Rust
 */
export const bonk = mkPackage(
  nixRaw`pkgs.bonk`,
  "The blazingly fast touch alternative written in Rust",
);

/**
 * An open-source code for solving general MINLP (Mixed Integer NonLinear Programming) problems
 */
export const bonmin = mkPackage(
  nixRaw`pkgs.bonmin`,
  "An open-source code for solving general MINLP (Mixed Integer NonLinear Programming) problems",
);

/**
 * Hard drive and file system benchmark suite
 */
export const bonnie = mkPackage(
  nixRaw`pkgs.bonnie`,
  "Hard drive and file system benchmark suite",
);

/**
 * A mobility scenario generation and analysis tool
 */
export const bonnmotion = mkPackage(
  nixRaw`pkgs.bonnmotion`,
  "A mobility scenario generation and analysis tool",
);

/**
 * Live shader coding tool and Shader Showdown workhorse
 */
export const bonzomatic = mkPackage(
  nixRaw`pkgs.bonzomatic`,
  "Live shader coding tool and Shader Showdown workhorse",
);

/**
 * Network protocol fuzzing tool
 */
export const boofuzz = mkPackage(
  nixRaw`pkgs.boofuzz`,
  "Network protocol fuzzing tool",
);

/**
 * An intermediate verification language
 */
export const boogie = mkPackage(
  nixRaw`pkgs.boogie`,
  "An intermediate verification language",
);

/**
 * A new coffee-break roguelike game
 */
export const boohu = mkPackage(
  nixRaw`pkgs.boohu`,
  "A new coffee-break roguelike game",
);

/**
 * Book auto-summary for gitbook and mdBook
 */
export const book_summary = mkPackage(
  nixRaw`pkgs.book-summary`,
  "Book auto-summary for gitbook and mdBook",
);

/**
 * A utility to achieve some basic imposition on PDF documents, especially designed to work on booklets
 */
export const bookletimposer = mkPackage(
  nixRaw`pkgs.bookletimposer`,
  "A utility to achieve some basic imposition on PDF documents, especially designed to work on booklets",
);

/**
 * A platform to create documentation/wiki content built with PHP & Laravel
 */
export const bookstack = mkPackage(
  nixRaw`pkgs.bookstack`,
  "A platform to create documentation/wiki content built with PHP & Laravel",
);

/**
 * A simple, focused eBook reader
 */
export const bookworm = mkPackage(
  nixRaw`pkgs.bookworm`,
  "A simple, focused eBook reader",
);

/**
 * An extremely fast SMT solver for bit-vectors and arrays
 */
export const boolector = mkPackage(
  nixRaw`pkgs.boolector`,
  "An extremely fast SMT solver for bit-vectors and arrays",
);

/**
 * Library for operations on boolean expression binary trees
 */
export const boolstuff = mkPackage(
  nixRaw`pkgs.boolstuff`,
  "Library for operations on boolean expression binary trees",
);

/**
 * A general, open source, retargetable decompiler
 */
export const boomerang = mkPackage(
  nixRaw`pkgs.boomerang`,
  "A general, open source, retargetable decompiler",
);

/**
 * Sound glitch effect sequencer LV2 plugin
 */
export const boops = mkPackage(
  nixRaw`pkgs.boops`,
  "Sound glitch effect sequencer LV2 plugin",
);

/**
 * Collection of C++ libraries
 */
export const boost = mkPackage(
  nixRaw`pkgs.boost`,
  "Collection of C++ libraries",
);

/**
 * Collection of C++ libraries
 */
export const boost175 = mkPackage(
  nixRaw`pkgs.boost175`,
  "Collection of C++ libraries",
);

/**
 * Collection of C++ libraries
 */
export const boost177 = mkPackage(
  nixRaw`pkgs.boost177`,
  "Collection of C++ libraries",
);

/**
 * Collection of C++ libraries
 */
export const boost178 = mkPackage(
  nixRaw`pkgs.boost178`,
  "Collection of C++ libraries",
);

/**
 * Collection of C++ libraries
 */
export const boost179 = mkPackage(
  nixRaw`pkgs.boost179`,
  "Collection of C++ libraries",
);

/**
 * Collection of C++ libraries
 */
export const boost180 = mkPackage(
  nixRaw`pkgs.boost180`,
  "Collection of C++ libraries",
);

/**
 * Collection of C++ libraries
 */
export const boost181 = mkPackage(
  nixRaw`pkgs.boost181`,
  "Collection of C++ libraries",
);

/**
 * Collection of C++ libraries
 */
export const boost182 = mkPackage(
  nixRaw`pkgs.boost182`,
  "Collection of C++ libraries",
);

/**
 * Collection of C++ libraries
 */
export const boost183 = mkPackage(
  nixRaw`pkgs.boost183`,
  "Collection of C++ libraries",
);

export const boost_build = mkPackage(
  nixRaw`pkgs.boost-build`,
  "",
);

/**
 * Library to manage system processes
 */
export const boost_process = mkPackage(
  nixRaw`pkgs.boost_process`,
  "Library to manage system processes",
);

/**
 * Header only state machine library with no dependencies
 */
export const boost_sml = mkPackage(
  nixRaw`pkgs.boost-sml`,
  "Header only state machine library with no dependencies",
);

/**
 * Fast and secure initramfs generator 
 */
export const booster = mkPackage(
  nixRaw`pkgs.booster`,
  "Fast and secure initramfs generator ",
);

/**
 * Build tooling for Clojure
 */
export const boot = mkPackage(
  nixRaw`pkgs.boot`,
  "Build tooling for Clojure",
);

/**
 * Garry Newman's personal utility library
 */
export const bootil = mkPackage(
  nixRaw`pkgs.bootil`,
  "Garry Newman's personal utility library",
);

/**
 * Script for securely creating a bootable USB device from one image file
 */
export const bootiso = mkPackage(
  nixRaw`pkgs.bootiso`,
  "Script for securely creating a bootable USB device from one image file",
);

/**
 * Implementation of RFC-0125's datatype and synthesis tooling
 */
export const bootspec = mkPackage(
  nixRaw`pkgs.bootspec`,
  "Implementation of RFC-0125's datatype and synthesis tooling",
);

/**
 * Drag-and-drop designer for bootstrap
 */
export const bootstrap_studio = mkPackage(
  nixRaw`pkgs.bootstrap-studio`,
  "Drag-and-drop designer for bootstrap",
);

/**
 * DNS query tool
 */
export const bore = mkPackage(
  nixRaw`pkgs.bore`,
  "DNS query tool",
);

/**
 * Rust tool to create TCP tunnels
 */
export const bore_cli = mkPackage(
  nixRaw`pkgs.bore-cli`,
  "Rust tool to create TCP tunnels",
);

/**
 * Droid Sans Mono Slashed + Hasklig-style ligatures
 */
export const borg_sans_mono = mkPackage(
  nixRaw`pkgs.borg-sans-mono`,
  "Droid Sans Mono Slashed + Hasklig-style ligatures",
);

/**
 * Deduplicating archiver with compression and encryption
 */
export const borgbackup = mkPackage(
  nixRaw`pkgs.borgbackup`,
  "Deduplicating archiver with compression and encryption",
);

/**
 * Simple, configuration-driven backup software for servers and workstations
 */
export const borgmatic = mkPackage(
  nixRaw`pkgs.borgmatic`,
  "Simple, configuration-driven backup software for servers and workstations",
);

/**
 * Free TLS/SSL implementation
 */
export const boringssl = mkPackage(
  nixRaw`pkgs.boringssl`,
  "Free TLS/SSL implementation",
);

/**
 * Userspace WireGuard® implementation in Rust
 */
export const boringtun = mkPackage(
  nixRaw`pkgs.boringtun`,
  "Userspace WireGuard® implementation in Rust",
);

/**
 * Scripting language and C library useful for building DSLs
 */
export const boron = mkPackage(
  nixRaw`pkgs.boron`,
  "Scripting language and C library useful for building DSLs",
);

/**
 * A command line interface to CloudFoundry BOSH
 */
export const bosh_cli = mkPackage(
  nixRaw`pkgs.bosh-cli`,
  "A command line interface to CloudFoundry BOSH",
);

/**
 * A flash programming utility for Atmel's SAM family of flash-based ARM microcontrollers
 */
export const bossa = mkPackage(
  nixRaw`pkgs.bossa`,
  "A flash programming utility for Atmel's SAM family of flash-based ARM microcontrollers",
);

/**
 * A flash programming utility for Atmel's SAM family of flash-based ARM microcontrollers
 */
export const bossa_arduino = mkPackage(
  nixRaw`pkgs.bossa-arduino`,
  "A flash programming utility for Atmel's SAM family of flash-based ARM microcontrollers",
);

/**
 * Time Series Alerting Framework
 */
export const bosun = mkPackage(
  nixRaw`pkgs.bosun`,
  "Time Series Alerting Framework",
);

/**
 * Bot to play youtube / soundcloud / radio / local music on Mumble
 */
export const botamusique = mkPackage(
  nixRaw`pkgs.botamusique`,
  "Bot to play youtube / soundcloud / radio / local music on Mumble",
);

/**
 * Cryptographic algorithms library
 */
export const botan2 = mkPackage(
  nixRaw`pkgs.botan2`,
  "Cryptographic algorithms library",
);

/**
 * Cryptographic algorithms library
 */
export const botan3 = mkPackage(
  nixRaw`pkgs.botan3`,
  "Cryptographic algorithms library",
);

/**
 * An easy-to-use wineprefix manager
 */
export const bottles = mkPackage(
  nixRaw`pkgs.bottles`,
  "An easy-to-use wineprefix manager",
);

/**
 * An easy-to-use wineprefix manager
 */
export const bottles_unwrapped = mkPackage(
  nixRaw`pkgs.bottles-unwrapped`,
  "An easy-to-use wineprefix manager",
);

/**
 * A cross-platform graphical process/system monitor with a customizable interface
 */
export const bottom = mkPackage(
  nixRaw`pkgs.bottom`,
  "A cross-platform graphical process/system monitor with a customizable interface",
);

/**
 * Fantastic (maybe) CLI for translating between bottom and human-readable text
 */
export const bottom_rs = mkPackage(
  nixRaw`pkgs.bottom-rs`,
  "Fantastic (maybe) CLI for translating between bottom and human-readable text",
);

/**
 * An ACME-based certificate authority, written in Go
 */
export const boulder = mkPackage(
  nixRaw`pkgs.boulder`,
  "An ACME-based certificate authority, written in Go",
);

/**
 * Enables identity-based access management for dynamic infrastructure
 */
export const boundary = mkPackage(
  nixRaw`pkgs.boundary`,
  "Enables identity-based access management for dynamic infrastructure",
);

/**
 * An ultrafast memory-efficient short read aligner
 */
export const bowtie = mkPackage(
  nixRaw`pkgs.bowtie`,
  "An ultrafast memory-efficient short read aligner",
);

/**
 * An ultrafast and memory-efficient tool for aligning sequencing reads to long reference sequences
 */
export const bowtie2 = mkPackage(
  nixRaw`pkgs.bowtie2`,
  "An ultrafast and memory-efficient tool for aligning sequencing reads to long reference sequences",
);

/**
 * 2D physics engine
 */
export const box2d = mkPackage(
  nixRaw`pkgs.box2d`,
  "2D physics engine",
);

/**
 * Lets you run x86_64 Linux programs on non-x86_64 Linux systems
 */
export const box64 = mkPackage(
  nixRaw`pkgs.box64`,
  "Lets you run x86_64 Linux programs on non-x86_64 Linux systems",
);

/**
 * Command line ASCII boxes unlimited!
 */
export const boxes = mkPackage(
  nixRaw`pkgs.boxes`,
  "Command line ASCII boxes unlimited!",
);

/**
 * Convenient & cross-platform sandboxing C library
 */
export const boxfort = mkPackage(
  nixRaw`pkgs.boxfort`,
  "Convenient & cross-platform sandboxing C library",
);

/**
 * FUSE file system for box.com accounts
 */
export const boxfs = mkPackage(
  nixRaw`pkgs.boxfs`,
  "FUSE file system for box.com accounts",
);

/**
 * Puts bad Linux applications in a box with only their files
 */
export const boxxy = mkPackage(
  nixRaw`pkgs.boxxy`,
  "Puts bad Linux applications in a box with only their files",
);

/**
 * Bozotic HTTP server; small and secure
 */
export const bozohttpd = mkPackage(
  nixRaw`pkgs.bozohttpd`,
  "Bozotic HTTP server; small and secure",
);

/**
 * Bozotic HTTP server; small and secure
 */
export const bozohttpd_minimal = mkPackage(
  nixRaw`pkgs.bozohttpd-minimal`,
  "Bozotic HTTP server; small and secure",
);

/**
 * Tool to automatically sign git commits, replacing gpg for that purpose
 */
export const bpb = mkPackage(
  nixRaw`pkgs.bpb`,
  "Tool to automatically sign git commits, replacing gpg for that purpose",
);

/**
 * Simple BPF static linker
 */
export const bpf_linker = mkPackage(
  nixRaw`pkgs.bpf-linker`,
  "Simple BPF static linker",
);

/**
 * BPF based visual packet rate monitor
 */
export const bpfmon = mkPackage(
  nixRaw`pkgs.bpfmon`,
  "BPF based visual packet rate monitor",
);

/**
 * Debugging/program analysis tools for the eBPF subsystem
 */
export const bpftools = mkPackage(
  nixRaw`pkgs.bpftools`,
  "Debugging/program analysis tools for the eBPF subsystem",
);

/**
 * High-level tracing language for Linux eBPF
 */
export const bpftrace = mkPackage(
  nixRaw`pkgs.bpftrace`,
  "High-level tracing language for Linux eBPF",
);

/**
 * BPF-based auto-tuning of Linux system parameters
 */
export const bpftune = mkPackage(
  nixRaw`pkgs.bpftune`,
  "BPF-based auto-tuning of Linux system parameters",
);

/**
 * build2 package dependency manager
 */
export const bpkg = mkPackage(
  nixRaw`pkgs.bpkg`,
  "build2 package dependency manager",
);

/**
 * Automatically calculate BPM (tempo) of music files
 */
export const bpm_tools = mkPackage(
  nixRaw`pkgs.bpm-tools`,
  "Automatically calculate BPM (tempo) of music files",
);

/**
 * C++ bioinformatics libraries and tools
 */
export const bpp_core = mkPackage(
  nixRaw`pkgs.bpp-core`,
  "C++ bioinformatics libraries and tools",
);

/**
 * C++ bioinformatics libraries and tools
 */
export const bpp_phyl = mkPackage(
  nixRaw`pkgs.bpp-phyl`,
  "C++ bioinformatics libraries and tools",
);

/**
 * C++ bioinformatics libraries and tools
 */
export const bpp_popgen = mkPackage(
  nixRaw`pkgs.bpp-popgen`,
  "C++ bioinformatics libraries and tools",
);

/**
 * C++ bioinformatics libraries and tools
 */
export const bpp_seq = mkPackage(
  nixRaw`pkgs.bpp-seq`,
  "C++ bioinformatics libraries and tools",
);

/**
 * C++ bioinformatics libraries and tools
 */
export const bppsuite = mkPackage(
  nixRaw`pkgs.bppsuite`,
  "C++ bioinformatics libraries and tools",
);

/**
 * An APL and BQN font extending on APL386
 */
export const bqn386 = mkPackage(
  nixRaw`pkgs.bqn386`,
  "An APL and BQN font extending on APL386",
);

/**
 * A version of the classic game Mastermind
 */
export const braincurses = mkPackage(
  nixRaw`pkgs.braincurses`,
  "A version of the classic game Mastermind",
);

/**
 * Static analysis security scanner for Ruby on Rails
 */
export const brakeman = mkPackage(
  nixRaw`pkgs.brakeman`,
  "Static analysis security scanner for Ruby on Rails",
);

/**
 * A Gnome CD/DVD Burner
 */
export const brasero = mkPackage(
  nixRaw`pkgs.brasero`,
  "A Gnome CD/DVD Burner",
);

/**
 * A Gnome CD/DVD Burner
 */
export const brasero_original = mkPackage(
  nixRaw`pkgs.brasero-original`,
  "A Gnome CD/DVD Burner",
);

/**
 * Privacy-oriented browser for Desktop and Laptop computers
 */
export const brave = mkPackage(
  nixRaw`pkgs.brave`,
  "Privacy-oriented browser for Desktop and Laptop computers",
);

/**
 * Break timer that forces you to take a break
 */
export const break_time = mkPackage(
  nixRaw`pkgs.break-time`,
  "Break timer that forces you to take a break",
);

/**
 * An open-source multi-platform crash reporting system
 */
export const breakpad = mkPackage(
  nixRaw`pkgs.breakpad`,
  "An open-source multi-platform crash reporting system",
);

export const breakpointHook = mkPackage(
  nixRaw`pkgs.breakpointHook`,
  "",
);

/**
 * Manjaro KDE default theme
 */
export const breath_theme = mkPackage(
  nixRaw`pkgs.breath-theme`,
  "Manjaro KDE default theme",
);

/**
 * Friendly distributed version control system
 */
export const breezy = mkPackage(
  nixRaw`pkgs.breezy`,
  "Friendly distributed version control system",
);

/**
 * Broadband internet speed test app from the german Bundesnetzagentur
 */
export const breitbandmessung = mkPackage(
  nixRaw`pkgs.breitbandmessung`,
  "Broadband internet speed test app from the german Bundesnetzagentur",
);

/**
 * Connect your laptop to cloud computers
 */
export const brev_cli = mkPackage(
  nixRaw`pkgs.brev-cli`,
  "Connect your laptop to cloud computers",
);

/**
 * Open source beer recipe creation tool
 */
export const brewtarget = mkPackage(
  nixRaw`pkgs.brewtarget`,
  "Open source beer recipe creation tool",
);

/**
 * Brother BrGenML1 CUPS wrapper driver
 */
export const brgenml1cupswrapper = mkPackage(
  nixRaw`pkgs.brgenml1cupswrapper`,
  "Brother BrGenML1 CUPS wrapper driver",
);

/**
 * Brother BrGenML1 LPR driver
 */
export const brgenml1lpr = mkPackage(
  nixRaw`pkgs.brgenml1lpr`,
  "Brother BrGenML1 LPR driver",
);

/**
 * Legacy version of PolyBoRi maintained by sagemath developers
 */
export const brial = mkPackage(
  nixRaw`pkgs.brial`,
  "Legacy version of PolyBoRi maintained by sagemath developers",
);

/**
 * Decentalized and secure messnger
 */
export const briar_desktop = mkPackage(
  nixRaw`pkgs.briar-desktop`,
  "Decentalized and secure messnger",
);

/**
 * A daemon (or service on Windows) that acts as a bridge between the Bricks/Bricklets and the API bindings for the different programming languages
 */
export const brickd = mkPackage(
  nixRaw`pkgs.brickd`,
  "A daemon (or service on Windows) that acts as a bridge between the Bricks/Bricklets and the API bindings for the different programming languages",
);

/**
 * An userspace tool to configure linux bridges (deprecated in favour or iproute2).
 */
export const bridge_utils = mkPackage(
  nixRaw`pkgs.bridge-utils`,
  "An userspace tool to configure linux bridges (deprecated in favour or iproute2).",
);

/**
 * File synchronization on top of IPFS with a git-like interface and a FUSE filesystem
 */
export const brig = mkPackage(
  nixRaw`pkgs.brig`,
  "File synchronization on top of IPFS with a git-like interface and a FUSE filesystem",
);

/**
 * Instant compile time C++ 11 metaprogramming library
 */
export const brigand = mkPackage(
  nixRaw`pkgs.brigand`,
  "Instant compile time C++ 11 metaprogramming library",
);

/**
 * This program allows you read and control device brightness
 */
export const brightnessctl = mkPackage(
  nixRaw`pkgs.brightnessctl`,
  "This program allows you read and control device brightness",
);

/**
 * Backlight and Keyboard LED control tool
 */
export const brillo = mkPackage(
  nixRaw`pkgs.brillo`,
  "Backlight and Keyboard LED control tool",
);

/**
 * Rime Schema Repository
 */
export const brise = mkPackage(
  nixRaw`pkgs.brise`,
  "Rime Schema Repository",
);

/**
 * Java application for cropping PDF files
 */
export const briss = mkPackage(
  nixRaw`pkgs.briss`,
  "Java application for cropping PDF files",
);

/**
 * A range of synthesiser, electric piano and organ emulations
 */
export const bristol = mkPackage(
  nixRaw`pkgs.bristol`,
  "A range of synthesiser, electric piano and organ emulations",
);

/**
 * A CUPS driver for Brother laser printers
 */
export const brlaser = mkPackage(
  nixRaw`pkgs.brlaser`,
  "A CUPS driver for Brother laser printers",
);

/**
 * BRL-CAD is a powerful cross-platform open source combinatorial solid modeling system
 */
export const brlcad = mkPackage(
  nixRaw`pkgs.brlcad`,
  "BRL-CAD is a powerful cross-platform open source combinatorial solid modeling system",
);

/**
 * Access software for a blind person using a braille display
 */
export const brltty = mkPackage(
  nixRaw`pkgs.brltty`,
  "Access software for a blind person using a braille display",
);

/**
 * Entity-relationship diagram tool for making conceptual and logical database models
 */
export const brmodelo = mkPackage(
  nixRaw`pkgs.brmodelo`,
  "Entity-relationship diagram tool for making conceptual and logical database models",
);

/**
 * Firmware for Broadcom WIDCOMM® Bluetooth devices
 */
export const broadcom_bt_firmware = mkPackage(
  nixRaw`pkgs.broadcom-bt-firmware`,
  "Firmware for Broadcom WIDCOMM® Bluetooth devices",
);

/**
 * Tools for interfacing with Broadlink RM2/3 (Pro) remote controls, A1 sensor platforms and SP2/3 smartplugs
 */
export const broadlink_cli = mkPackage(
  nixRaw`pkgs.broadlink-cli`,
  "Tools for interfacing with Broadlink RM2/3 (Pro) remote controls, A1 sensor platforms and SP2/3 smartplugs",
);

/**
 * A roguelike game
 */
export const brogue = mkPackage(
  nixRaw`pkgs.brogue`,
  "A roguelike game",
);

/**
 * A fan game of the Broken Sword series
 */
export const broken_sword_25 = mkPackage(
  nixRaw`pkgs.broken-sword-25`,
  "A fan game of the Broken Sword series",
);

/**
 * Bront Fonts
 */
export const bront_fonts = mkPackage(
  nixRaw`pkgs.bront_fonts`,
  "Bront Fonts",
);

/**
 * A cross-platform Proxy/VPN software
 */
export const brook = mkPackage(
  nixRaw`pkgs.brook`,
  "A cross-platform Proxy/VPN software",
);

/**
 * An interactive tree view, a fuzzy search, a balanced BFS descent and customizable commands
 */
export const broot = mkPackage(
  nixRaw`pkgs.broot`,
  "An interactive tree view, a fuzzy search, a balanced BFS descent and customizable commands",
);

/**
 * Control your browser's tabs from the command line
 */
export const brotab = mkPackage(
  nixRaw`pkgs.brotab`,
  "Control your browser's tabs from the command line",
);

/**
 * A generic-purpose lossless compression algorithm and tool
 */
export const brotli = mkPackage(
  nixRaw`pkgs.brotli`,
  "A generic-purpose lossless compression algorithm and tool",
);

/**
 * Browserpass native client app
 */
export const browserpass = mkPackage(
  nixRaw`pkgs.browserpass`,
  "Browserpass native client app",
);

/**
 * A fully-modern text-based browser, rendering to TTY and browsers
 */
export const browsh = mkPackage(
  nixRaw`pkgs.browsh`,
  "A fully-modern text-based browser, rendering to TTY and browsers",
);

/**
 * A file explorer in your terminal
 */
export const browsr = mkPackage(
  nixRaw`pkgs.browsr`,
  "A file explorer in your terminal",
);

/**
 * Brother brscan4 sane backend driver
 */
export const brscan4 = mkPackage(
  nixRaw`pkgs.brscan4`,
  "Brother brscan4 sane backend driver",
);

/**
 * Brother brscan5 sane backend driver
 */
export const brscan5 = mkPackage(
  nixRaw`pkgs.brscan5`,
  "Brother brscan5 sane backend driver",
);

/**
 * Open-source IDE For exploring and testing APIs.
 */
export const bruno = mkPackage(
  nixRaw`pkgs.bruno`,
  "Open-source IDE For exploring and testing APIs.",
);

/**
 * Lossless JPEG repacking library
 */
export const brunsli = mkPackage(
  nixRaw`pkgs.brunsli`,
  "Lossless JPEG repacking library",
);

/**
 * Minimalist thrilling shoot 'em up game
 */
export const brutalmaze = mkPackage(
  nixRaw`pkgs.brutalmaze`,
  "Minimalist thrilling shoot 'em up game",
);

/**
 * A software convolution engine
 */
export const brutefir = mkPackage(
  nixRaw`pkgs.brutefir`,
  "A software convolution engine",
);

/**
 * Cracks passwords of LUKS encrypted volumes
 */
export const bruteforce_luks = mkPackage(
  nixRaw`pkgs.bruteforce-luks`,
  "Cracks passwords of LUKS encrypted volumes",
);

/**
 * Tool to do brute-forcing from Nmap output
 */
export const brutespray = mkPackage(
  nixRaw`pkgs.brutespray`,
  "Tool to do brute-forcing from Nmap output",
);

/**
 * A JavaScript backend for OCaml focused on smooth integration and clean generated code
 */
export const bs_platform = mkPackage(
  nixRaw`pkgs.bs-platform`,
  "A JavaScript backend for OCaml focused on smooth integration and clean generated code",
);

/**
 * High performance block-sorting data compression library
 */
export const bsc = mkPackage(
  nixRaw`pkgs.bsc`,
  "High performance block-sorting data compression library",
);

/**
 * Pattern-controlled MIDI amp & time stretch LV2 plugin
 */
export const bschaffl = mkPackage(
  nixRaw`pkgs.bschaffl`,
  "Pattern-controlled MIDI amp & time stretch LV2 plugin",
);

export const bsdSetupHook = mkPackage(
  nixRaw`pkgs.bsdSetupHook`,
  "",
);

/**
 * User information lookup program
 */
export const bsd_finger = mkPackage(
  nixRaw`pkgs.bsd-finger`,
  "User information lookup program",
);

/**
 * Remote user information server
 */
export const bsd_fingerd = mkPackage(
  nixRaw`pkgs.bsd-fingerd`,
  "Remote user information server",
);

/**
 * A cross-platform build system
 */
export const bsdbuild = mkPackage(
  nixRaw`pkgs.bsdbuild`,
  "A cross-platform build system",
);

/**
 * Ports of all the games from NetBSD-current that are free
 */
export const bsdgames = mkPackage(
  nixRaw`pkgs.bsdgames`,
  "Ports of all the games from NetBSD-current that are free",
);

/**
 * An efficient binary diff/patch tool
 */
export const bsdiff = mkPackage(
  nixRaw`pkgs.bsdiff`,
  "An efficient binary diff/patch tool",
);

/**
 * Multi channel MIDI step sequencer LV2 plugin
 */
export const bsequencer = mkPackage(
  nixRaw`pkgs.bsequencer`,
  "Multi channel MIDI step sequencer LV2 plugin",
);

export const bsh = mkPackage(
  nixRaw`pkgs.bsh`,
  "",
);

/**
 * Beat / envelope shaper LV2 plugin
 */
export const bshapr = mkPackage(
  nixRaw`pkgs.bshapr`,
  "Beat / envelope shaper LV2 plugin",
);

/**
 * Sequenced audio slicing effect LV2 plugin (step sequencer effect)
 */
export const bslizr = mkPackage(
  nixRaw`pkgs.bslizr`,
  "Sequenced audio slicing effect LV2 plugin (step sequencer effect)",
);

/**
 * A fork of bsnes that adds HD video features
 */
export const bsnes_hd = mkPackage(
  nixRaw`pkgs.bsnes-hd`,
  "A fork of bsnes that adds HD video features",
);

/**
 * Manage layouts in bspwm
 */
export const bsp_layout = mkPackage(
  nixRaw`pkgs.bsp-layout`,
  "Manage layouts in bspwm",
);

/**
 * A tiling window manager based on binary space partitioning
 */
export const bspwm = mkPackage(
  nixRaw`pkgs.bspwm`,
  "A tiling window manager based on binary space partitioning",
);

/**
 * A tool that converts hex to hcd based on inf file
 */
export const bt_fw_converter = mkPackage(
  nixRaw`pkgs.bt-fw-converter`,
  "A tool that converts hex to hcd based on inf file",
);

/**
 * Fast 2d tank arcade game
 */
export const btanks = mkPackage(
  nixRaw`pkgs.btanks`,
  "Fast 2d tank arcade game",
);

/**
 * Tar-compatible block-based archiver
 */
export const btar = mkPackage(
  nixRaw`pkgs.btar`,
  "Tar-compatible block-based archiver",
);

/**
 * Database-free, self-hosted Bitcoin explorer, via RPC to Bitcoin Core
 */
export const btc_rpc_explorer = mkPackage(
  nixRaw`pkgs.btc-rpc-explorer`,
  "Database-free, self-hosted Bitcoin explorer, via RPC to Bitcoin Core",
);

/**
 * An alternative full node bitcoin implementation written in Go (golang)
 */
export const btcd = mkPackage(
  nixRaw`pkgs.btcd`,
  "An alternative full node bitcoin implementation written in Go (golang)",
);

/**
 * Bitcoin Script Debugger
 */
export const btcdeb = mkPackage(
  nixRaw`pkgs.btcdeb`,
  "Bitcoin Script Debugger",
);

/**
 * Self-hosted, open-source cryptocurrency payment processor
 */
export const btcpayserver = mkPackage(
  nixRaw`pkgs.btcpayserver`,
  "Self-hosted, open-source cryptocurrency payment processor",
);

/**
 * Self-hosted, open-source cryptocurrency payment processor
 */
export const btcpayserver_altcoins = mkPackage(
  nixRaw`pkgs.btcpayserver-altcoins`,
  "Self-hosted, open-source cryptocurrency payment processor",
);

/**
 * Sampling disk usage profiler for btrfs
 */
export const btdu = mkPackage(
  nixRaw`pkgs.btdu`,
  "Sampling disk usage profiler for btrfs",
);

/**
 * A bittorrent filesystem based on FUSE
 */
export const btfs = mkPackage(
  nixRaw`pkgs.btfs`,
  "A bittorrent filesystem based on FUSE",
);

/**
 * Bluetooth Low Energy Swiss-army knife
 */
export const btlejack = mkPackage(
  nixRaw`pkgs.btlejack`,
  "Bluetooth Low Energy Swiss-army knife",
);

/**
 * A monitor of resources
 */
export const btop = mkPackage(
  nixRaw`pkgs.btop`,
  "A monitor of resources",
);

/**
 * A generic parser and tool package for the BTOR2 format
 */
export const btor2tools = mkPackage(
  nixRaw`pkgs.btor2tools`,
  "A generic parser and tool package for the BTOR2 format",
);

/**
 * A backup tool for btrfs subvolumes
 */
export const btrbk = mkPackage(
  nixRaw`pkgs.btrbk`,
  "A backup tool for btrfs subvolumes",
);

/**
 * A GUI management tool to make managing a Btrfs filesystem easier
 */
export const btrfs_assistant = mkPackage(
  nixRaw`pkgs.btrfs-assistant`,
  "A GUI management tool to make managing a Btrfs filesystem easier",
);

/**
 * Visualize the layout of a mounted btrfs
 */
export const btrfs_heatmap = mkPackage(
  nixRaw`pkgs.btrfs-heatmap`,
  "Visualize the layout of a mounted btrfs",
);

/**
 * Utilities for the btrfs filesystem
 */
export const btrfs_progs = mkPackage(
  nixRaw`pkgs.btrfs-progs`,
  "Utilities for the btrfs filesystem",
);

/**
 * btrfs-snap creates and maintains the history of snapshots of btrfs filesystems.
 */
export const btrfs_snap = mkPackage(
  nixRaw`pkgs.btrfs-snap`,
  "btrfs-snap creates and maintains the history of snapshots of btrfs filesystems.",
);

/**
 * An extensible mail notification service.
 */
export const bubblemail = mkPackage(
  nixRaw`pkgs.bubblemail`,
  "An extensible mail notification service.",
);

/**
 * Unprivileged sandboxing tool
 */
export const bubblewrap = mkPackage(
  nixRaw`pkgs.bubblewrap`,
  "Unprivileged sandboxing tool",
);

/**
 * A high-performance build tool
 */
export const buck = mkPackage(
  nixRaw`pkgs.buck`,
  "A high-performance build tool",
);

/**
 * Fast, hermetic, multi-language build system
 */
export const buck2 = mkPackage(
  nixRaw`pkgs.buck2`,
  "Fast, hermetic, multi-language build system",
);

/**
 * Nostalgia bucklespring keyboard sound
 */
export const bucklespring = mkPackage(
  nixRaw`pkgs.bucklespring`,
  "Nostalgia bucklespring keyboard sound",
);

/**
 * Nostalgia bucklespring keyboard sound
 */
export const bucklespring_libinput = mkPackage(
  nixRaw`pkgs.bucklespring-libinput`,
  "Nostalgia bucklespring keyboard sound",
);

/**
 * Nostalgia bucklespring keyboard sound
 */
export const bucklespring_x11 = mkPackage(
  nixRaw`pkgs.bucklespring-x11`,
  "Nostalgia bucklespring keyboard sound",
);

/**
 * Binary decision diagram package
 */
export const buddy = mkPackage(
  nixRaw`pkgs.buddy`,
  "Binary decision diagram package",
);

/**
 * Create consistent Protobuf APIs that preserve compatibility and comply with design best-practices
 */
export const buf = mkPackage(
  nixRaw`pkgs.buf`,
  "Create consistent Protobuf APIs that preserve compatibility and comply with design best-practices",
);

/**
 * Language server for protocol buffers
 */
export const buf_language_server = mkPackage(
  nixRaw`pkgs.buf-language-server`,
  "Language server for protocol buffers",
);

/**
 * A port of Bugdom, a 1999 Macintosh game by Pangea Software, for modern operating systems
 */
export const bugdom = mkPackage(
  nixRaw`pkgs.bugdom`,
  "A port of Bugdom, a 1999 Macintosh game by Pangea Software, for modern operating systems",
);

/**
 * build2 build system
 */
export const build2 = mkPackage(
  nixRaw`pkgs.build2`,
  "build2 build system",
);

/**
 * A tool which facilitates building OCI images
 */
export const buildah = mkPackage(
  nixRaw`pkgs.buildah`,
  "A tool which facilitates building OCI images",
);

/**
 * A tool which facilitates building OCI images
 */
export const buildah_unwrapped = mkPackage(
  nixRaw`pkgs.buildah-unwrapped`,
  "A tool which facilitates building OCI images",
);

/**
 * An open-source continuous integration framework for automating software build, test, and release processes
 */
export const buildbot = mkPackage(
  nixRaw`pkgs.buildbot`,
  "An open-source continuous integration framework for automating software build, test, and release processes",
);

export const buildbot_full = mkPackage(
  nixRaw`pkgs.buildbot-full`,
  "",
);

export const buildbot_ui = mkPackage(
  nixRaw`pkgs.buildbot-ui`,
  "",
);

/**
 * Buildbot Worker Daemon
 */
export const buildbot_worker = mkPackage(
  nixRaw`pkgs.buildbot-worker`,
  "Buildbot Worker Daemon",
);

/**
 * Build SSL/TLS trust stores
 */
export const buildcatrust = mkPackage(
  nixRaw`pkgs.buildcatrust`,
  "Build SSL/TLS trust stores",
);

/**
 * Tools for working with Google's bazel buildtool. Includes buildifier, buildozer, and unused_deps
 */
export const buildifier = mkPackage(
  nixRaw`pkgs.buildifier`,
  "Tools for working with Google's bazel buildtool. Includes buildifier, buildozer, and unused_deps",
);

/**
 * Concurrent, cache-efficient, and Dockerfile-agnostic builder toolkit
 */
export const buildkit = mkPackage(
  nixRaw`pkgs.buildkit`,
  "Concurrent, cache-efficient, and Dockerfile-agnostic builder toolkit",
);

/**
 * Nix frontend for BuildKit
 */
export const buildkit_nix = mkPackage(
  nixRaw`pkgs.buildkit-nix`,
  "Nix frontend for BuildKit",
);

/**
 * Build runner for buildkite.com
 */
export const buildkite_agent = mkPackage(
  nixRaw`pkgs.buildkite-agent`,
  "Build runner for buildkite.com",
);

/**
 * A command-line tool (and Lambda) for collecting Buildkite agent metrics
 */
export const buildkite_agent_metrics = mkPackage(
  nixRaw`pkgs.buildkite-agent-metrics`,
  "A command-line tool (and Lambda) for collecting Buildkite agent metrics",
);

/**
 * A command line interface for Buildkite
 */
export const buildkite_cli = mkPackage(
  nixRaw`pkgs.buildkite-cli`,
  "A command line interface for Buildkite",
);

/**
 * Rust adapter for Buildkite Test Analytics
 */
export const buildkite_test_collector_rust = mkPackage(
  nixRaw`pkgs.buildkite-test-collector-rust`,
  "Rust adapter for Buildkite Test Analytics",
);

/**
 * Tools for working with Google's bazel buildtool. Includes buildifier, buildozer, and unused_deps
 */
export const buildozer = mkPackage(
  nixRaw`pkgs.buildozer`,
  "Tools for working with Google's bazel buildtool. Includes buildifier, buildozer, and unused_deps",
);

/**
 * CLI for building apps using Cloud Native Buildpacks
 */
export const buildpack = mkPackage(
  nixRaw`pkgs.buildpack`,
  "CLI for building apps using Cloud Native Buildpacks",
);

/**
 * A simple commandline torrent creator
 */
export const buildtorrent = mkPackage(
  nixRaw`pkgs.buildtorrent`,
  "A simple commandline torrent creator",
);

/**
 * Private cmdline bookmark manager
 */
export const buku = mkPackage(
  nixRaw`pkgs.buku`,
  "Private cmdline bookmark manager",
);

/**
 * A WebExtension for Buku, a command-line bookmark manager
 */
export const bukubrow = mkPackage(
  nixRaw`pkgs.bukubrow`,
  "A WebExtension for Buku, a command-line bookmark manager",
);

/**
 * A professional free 3D Game Multiphysics Library
 */
export const bullet = mkPackage(
  nixRaw`pkgs.bullet`,
  "A professional free 3D Game Multiphysics Library",
);

/**
 * A professional free 3D Game Multiphysics Library
 */
export const bullet_roboschool = mkPackage(
  nixRaw`pkgs.bullet-roboschool`,
  "A professional free 3D Game Multiphysics Library",
);

/**
 * C++ library to handle BulletML easily
 */
export const bulletml = mkPackage(
  nixRaw`pkgs.bulletml`,
  "C++ library to handle BulletML easily",
);

/**
 * Retrieve WPA/WPA2 passphrase from a WPS enabled access point
 */
export const bully = mkPackage(
  nixRaw`pkgs.bully`,
  "Retrieve WPA/WPA2 passphrase from a WPS enabled access point",
);

/**
 * Daemon for managing Optimus videocards (power-on/off, spawns xservers)
 */
export const bumblebee = mkPackage(
  nixRaw`pkgs.bumblebee`,
  "Daemon for managing Optimus videocards (power-on/off, spawns xservers)",
);

/**
 * CLI tool to draft a GitHub Release for the next semantic version
 */
export const bump = mkPackage(
  nixRaw`pkgs.bump`,
  "CLI tool to draft a GitHub Release for the next semantic version",
);

/**
 * Version-bump your software with a single command
 */
export const bump2version = mkPackage(
  nixRaw`pkgs.bump2version`,
  "Version-bump your software with a single command",
);

/**
 * Bump version numbers in project files
 */
export const bumpver = mkPackage(
  nixRaw`pkgs.bumpver`,
  "Bump version numbers in project files",
);

/**
 * Incredibly fast JavaScript runtime, bundler, transpiler and package manager – all in one
 */
export const bun = mkPackage(
  nixRaw`pkgs.bun`,
  "Incredibly fast JavaScript runtime, bundler, transpiler and package manager – all in one",
);

/**
 * Creates Nix packages from Gemfiles
 */
export const bundix = mkPackage(
  nixRaw`pkgs.bundix`,
  "Creates Nix packages from Gemfiles",
);

/**
 * Manage your Ruby application's gem dependencies
 */
export const bundler = mkPackage(
  nixRaw`pkgs.bundler`,
  "Manage your Ruby application's gem dependencies",
);

/**
 * Patch-level verification for Bundler
 */
export const bundler_audit = mkPackage(
  nixRaw`pkgs.bundler-audit`,
  "Patch-level verification for Bundler",
);

/**
 * Command-line tool to manipulate Android App Bundles
 */
export const bundletool = mkPackage(
  nixRaw`pkgs.bundletool`,
  "Command-line tool to manipulate Android App Bundles",
);

/**
 * Easy, Concise and Decentralized Config management with Python
 */
export const bundlewrap = mkPackage(
  nixRaw`pkgs.bundlewrap`,
  "Easy, Concise and Decentralized Config management with Python",
);

/**
 * Tiny system info fetch utility
 */
export const bunnyfetch = mkPackage(
  nixRaw`pkgs.bunnyfetch`,
  "Tiny system info fetch utility",
);

/**
 * A CLI to pretty print logs in bunyan format (Rust port of the original JavaScript bunyan CLI)
 */
export const bunyan_rs = mkPackage(
  nixRaw`pkgs.bunyan-rs`,
  "A CLI to pretty print logs in bunyan format (Rust port of the original JavaScript bunyan CLI)",
);

/**
 * Efficient file backup system based on the git packfile format
 */
export const bup = mkPackage(
  nixRaw`pkgs.bup`,
  "Efficient file backup system based on the git packfile format",
);

/**
 * A compiler for the Berkely Unified Parallel C language
 */
export const bupc = mkPackage(
  nixRaw`pkgs.bupc`,
  "A compiler for the Berkely Unified Parallel C language",
);

/**
 * Easy and efficient encrypted backups
 */
export const bupstash = mkPackage(
  nixRaw`pkgs.bupstash`,
  "Easy and efficient encrypted backups",
);

/**
 * BURP - BackUp and Restore Program
 */
export const burp = mkPackage(
  nixRaw`pkgs.burp`,
  "BURP - BackUp and Restore Program",
);

/**
 * An integrated platform for performing security testing of web applications
 */
export const burpsuite = mkPackage(
  nixRaw`pkgs.burpsuite`,
  "An integrated platform for performing security testing of web applications",
);

/**
 * Draw sequence diagrams of D-Bus traffic
 */
export const bustle = mkPackage(
  nixRaw`pkgs.bustle`,
  "Draw sequence diagrams of D-Bus traffic",
);

/**
 * Tiny versions of common UNIX utilities in a single small executable
 */
export const busybox = mkPackage(
  nixRaw`pkgs.busybox`,
  "Tiny versions of common UNIX utilities in a single small executable",
);

/**
 * Tiny versions of common UNIX utilities in a single small executable
 */
export const busybox_sandbox_shell = mkPackage(
  nixRaw`pkgs.busybox-sandbox-shell`,
  "Tiny versions of common UNIX utilities in a single small executable",
);

/**
 * Translates human-readable Butane configs into machine-readable Ignition configs
 */
export const butane = mkPackage(
  nixRaw`pkgs.butane`,
  "Translates human-readable Butane configs into machine-readable Ignition configs",
);

/**
 * Command-line itch.io helper
 */
export const butler = mkPackage(
  nixRaw`pkgs.butler`,
  "Command-line itch.io helper",
);

/**
 * butt (broadcast using this tool) is an easy to use, multi OS streaming tool
 */
export const butt = mkPackage(
  nixRaw`pkgs.butt`,
  "butt (broadcast using this tool) is an easy to use, multi OS streaming tool",
);

/**
 * Cross-Platform Passwords & Secrets Vault
 */
export const buttercup_desktop = mkPackage(
  nixRaw`pkgs.buttercup-desktop`,
  "Cross-Platform Passwords & Secrets Vault",
);

/**
 * Buzztrax is a modular music composer for Linux.
 */
export const buzztrax = mkPackage(
  nixRaw`pkgs.buzztrax`,
  "Buzztrax is a modular music composer for Linux.",
);

/**
 * Hex editor with vim style keybindings
 */
export const bvi = mkPackage(
  nixRaw`pkgs.bvi`,
  "Hex editor with vim style keybindings",
);

/**
 * Ncurses based hex editor with a vim-like interface
 */
export const bviplus = mkPackage(
  nixRaw`pkgs.bviplus`,
  "Ncurses based hex editor with a vim-like interface",
);

/**
 * A software package for mapping low-divergent sequences against a large reference genome, such as the human genome
 */
export const bwa = mkPackage(
  nixRaw`pkgs.bwa`,
  "A software package for mapping low-divergent sequences against a large reference genome, such as the human genome",
);

/**
 * Next version of the bwa-mem algorithm in bwa, a software package for mapping low-divergent sequences against a large reference genome
 */
export const bwa_mem2 = mkPackage(
  nixRaw`pkgs.bwa-mem2`,
  "Next version of the bwa-mem algorithm in bwa, a software package for mapping low-divergent sequences against a large reference genome",
);

/**
 * Bywater BASIC Interpreter
 */
export const bwbasic = mkPackage(
  nixRaw`pkgs.bwbasic`,
  "Bywater BASIC Interpreter",
);

/**
 * High-level widget set for Tcl/Tk
 */
export const bwidget = mkPackage(
  nixRaw`pkgs.bwidget`,
  "High-level widget set for Tcl/Tk",
);

/**
 * A small and simple console-based live network and disk io bandwidth monitor
 */
export const bwm_ng = mkPackage(
  nixRaw`pkgs.bwm_ng`,
  "A small and simple console-based live network and disk io bandwidth monitor",
);

/**
 * Bitwarden Secrets Manager CLI
 */
export const bws = mkPackage(
  nixRaw`pkgs.bws`,
  "Bitwarden Secrets Manager CLI",
);

/**
 * Berkeley YACC
 */
export const byacc = mkPackage(
  nixRaw`pkgs.byacc`,
  "Berkeley YACC",
);

/**
 * Text-based window manager and terminal multiplexer
 */
export const byobu = mkPackage(
  nixRaw`pkgs.byobu`,
  "Text-based window manager and terminal multiplexer",
);

/**
 * Tool to record a running X desktop to an animation suitable for presentation in a web browser
 */
export const byzanz = mkPackage(
  nixRaw`pkgs.byzanz`,
  "Tool to record a running X desktop to an animation suitable for presentation in a web browser",
);

/**
 * Multiplayer 3D Tank game
 */
export const bzflag = mkPackage(
  nixRaw`pkgs.bzflag`,
  "Multiplayer 3D Tank game",
);

/**
 * High-quality data compression program
 */
export const bzip2 = mkPackage(
  nixRaw`pkgs.bzip2`,
  "High-quality data compression program",
);

/**
 * High-quality data compression program
 */
export const bzip2_1_1 = mkPackage(
  nixRaw`pkgs.bzip2_1_1`,
  "High-quality data compression program",
);

/**
 * A better and stronger spiritual successor to BZip2
 */
export const bzip3 = mkPackage(
  nixRaw`pkgs.bzip3`,
  "A better and stronger spiritual successor to BZip2",
);

/**
 * An opensource implementation of ZRTP keys exchange protocol. Part of the Linphone project.
 */
export const bzrtp = mkPackage(
  nixRaw`pkgs.bzrtp`,
  "An opensource implementation of ZRTP keys exchange protocol. Part of the Linphone project.",
);

/**
 * An LLVM based tool for extracting definitions from C, C++, and Objective C header files for use with foreign function call interfaces
 */
export const c2ffi = mkPackage(
  nixRaw`pkgs.c2ffi`,
  "An LLVM based tool for extracting definitions from C, C++, and Objective C header files for use with foreign function call interfaces",
);

/**
 * Securely encrypt, store, and share files, including but not limited to pictures and videos
 */
export const c2fmzq = mkPackage(
  nixRaw`pkgs.c2fmzq`,
  "Securely encrypt, store, and share files, including but not limited to pictures and videos",
);

/**
 * Compiler for the C3 language
 */
export const c3c = mkPackage(
  nixRaw`pkgs.c3c`,
  "Compiler for the C3 language",
);

/**
 * Medical imaging processing tool
 */
export const c3d = mkPackage(
  nixRaw`pkgs.c3d`,
  "Medical imaging processing tool",
);

/**
 * Commodore 64, Atari XL/XE and NES code and memory debugger that works in real time
 */
export const c64_debugger = mkPackage(
  nixRaw`pkgs.c64-debugger`,
  "Commodore 64, Atari XL/XE and NES code and memory debugger that works in real time",
);

/**
 * A C library for asynchronous DNS requests
 */
export const c_ares = mkPackage(
  nixRaw`pkgs.c-ares`,
  "A C library for asynchronous DNS requests",
);

/**
 * A C library for asynchronous DNS requests
 */
export const c_aresMinimal = mkPackage(
  nixRaw`pkgs.c-aresMinimal`,
  "A C library for asynchronous DNS requests",
);

/**
 * A blocking, shuffling and loss-less compression library
 */
export const c_blosc = mkPackage(
  nixRaw`pkgs.c-blosc`,
  "A blocking, shuffling and loss-less compression library",
);

/**
 * Convert Cabal files into Nix build instructions
 */
export const cabal2nix = mkPackage(
  nixRaw`pkgs.cabal2nix`,
  "Convert Cabal files into Nix build instructions",
);

/**
 * Convert Cabal files into Nix build instructions
 */
export const cabal2nix_unwrapped = mkPackage(
  nixRaw`pkgs.cabal2nix-unwrapped`,
  "Convert Cabal files into Nix build instructions",
);

/**
 * The command-line interface for Cabal and Hackage
 */
export const cabal_install = mkPackage(
  nixRaw`pkgs.cabal-install`,
  "The command-line interface for Cabal and Hackage",
);

/**
 * Free Software for extracting Microsoft cabinet files
 */
export const cabextract = mkPackage(
  nixRaw`pkgs.cabextract`,
  "Free Software for extracting Microsoft cabinet files",
);

/**
 * A humanist sans with 4 weights and true italics
 */
export const cabin = mkPackage(
  nixRaw`pkgs.cabin`,
  "A humanist sans with 4 weights and true italics",
);

/**
 * A bundle of X.509 certificates of public Certificate Authorities (CA)
 */
export const cacert = mkPackage(
  nixRaw`pkgs.cacert`,
  "A bundle of X.509 certificates of public Certificate Authorities (CA)",
);

/**
 * Instant startup time for nix-shell
 */
export const cached_nix_shell = mkPackage(
  nixRaw`pkgs.cached-nix-shell`,
  "Instant startup time for nix-shell",
);

/**
 * Local network file caching management daemon
 */
export const cachefilesd = mkPackage(
  nixRaw`pkgs.cachefilesd`,
  "Local network file caching management daemon",
);

/**
 * Command-line client for Nix binary cache hosting https://cachix.org
 */
export const cachix = mkPackage(
  nixRaw`pkgs.cachix`,
  "Command-line client for Nix binary cache hosting https://cachix.org",
);

/**
 * A command-line WebDAV client
 */
export const cadaver = mkPackage(
  nixRaw`pkgs.cadaver`,
  "A command-line WebDAV client",
);

/**
 * Fast and extensible multi-platform HTTP/1-2-3 web server with automatic HTTPS
 */
export const caddy = mkPackage(
  nixRaw`pkgs.caddy`,
  "Fast and extensible multi-platform HTTP/1-2-3 web server with automatic HTTPS",
);

/**
 * Collection of tools useful for audio production
 */
export const cadence = mkPackage(
  nixRaw`pkgs.cadence`,
  "Collection of tools useful for audio production",
);

/**
 * Simplified Satisfiability Solver
 */
export const cadical = mkPackage(
  nixRaw`pkgs.cadical`,
  "Simplified Satisfiability Solver",
);

/**
 * Toolkit to add Ruby development - in-editor coverage, libnotify of test runs
 */
export const cadre = mkPackage(
  nixRaw`pkgs.cadre`,
  "Toolkit to add Ruby development - in-editor coverage, libnotify of test runs",
);

/**
 * Analyzes resource usage and performance characteristics of running docker containers
 */
export const cadvisor = mkPackage(
  nixRaw`pkgs.cadvisor`,
  "Analyzes resource usage and performance characteristics of running docker containers",
);

/**
 * cat eml files
 */
export const caeml = mkPackage(
  nixRaw`pkgs.caeml`,
  "cat eml files",
);

/**
 * Mobile-friendly Gtk frontend for password-store
 */
export const caerbannog = mkPackage(
  nixRaw`pkgs.caerbannog`,
  "Mobile-friendly Gtk frontend for password-store",
);

/**
 * An open source implementation of the actor model in C++
 */
export const caf = mkPackage(
  nixRaw`pkgs.caf`,
  "An open source implementation of the actor model in C++",
);

/**
 * Deep learning framework
 */
export const caffe = mkPackage(
  nixRaw`pkgs.caffe`,
  "Deep learning framework",
);

/**
 * Deep learning framework
 */
export const caffeWithCuda = mkPackage(
  nixRaw`pkgs.caffeWithCuda`,
  "Deep learning framework",
);

/**
 * Don't let your Mac fall asleep
 */
export const caffeine = mkPackage(
  nixRaw`pkgs.caffeine`,
  "Don't let your Mac fall asleep",
);

/**
 * Status bar application to temporarily inhibit screensaver and sleep mode
 */
export const caffeine_ng = mkPackage(
  nixRaw`pkgs.caffeine-ng`,
  "Status bar application to temporarily inhibit screensaver and sleep mode",
);

/**
 * A Wayland kiosk that runs a single, maximized application
 */
export const cage = mkPackage(
  nixRaw`pkgs.cage`,
  "A Wayland kiosk that runs a single, maximized application",
);

/**
 * A Wayland tiling compositor inspired by ratpoison
 */
export const cagebreak = mkPackage(
  nixRaw`pkgs.cagebreak`,
  "A Wayland tiling compositor inspired by ratpoison",
);

/**
 * A 2D graphics library with support for multiple output devices
 */
export const cairo = mkPackage(
  nixRaw`pkgs.cairo`,
  "A 2D graphics library with support for multiple output devices",
);

/**
 * Turing-complete language for creating provable programs for general computation
 */
export const cairo_lang = mkPackage(
  nixRaw`pkgs.cairo-lang`,
  "Turing-complete language for creating provable programs for general computation",
);

/**
 * A 2D graphics library with support for multiple output devices
 */
export const cairomm = mkPackage(
  nixRaw`pkgs.cairomm`,
  "A 2D graphics library with support for multiple output devices",
);

/**
 * A 2D graphics library with support for multiple output devices
 */
export const cairomm_1_16 = mkPackage(
  nixRaw`pkgs.cairomm_1_16`,
  "A 2D graphics library with support for multiple output devices",
);

/**
 * A performance-oriented Lisp-like language
 */
export const cakelisp = mkPackage(
  nixRaw`pkgs.cakelisp`,
  "A performance-oriented Lisp-like language",
);

/**
 * A serif font metric-compatible with Microsoft Cambria
 */
export const caladea = mkPackage(
  nixRaw`pkgs.caladea`,
  "A serif font metric-compatible with Microsoft Cambria",
);

/**
 * Distribution-independent installer framework
 */
export const calamares = mkPackage(
  nixRaw`pkgs.calamares`,
  "Distribution-independent installer framework",
);

/**
 * Distribution-independent installer framework
 */
export const calamares_nixos = mkPackage(
  nixRaw`pkgs.calamares-nixos`,
  "Distribution-independent installer framework",
);

/**
 * Calamares modules for NixOS
 */
export const calamares_nixos_extensions = mkPackage(
  nixRaw`pkgs.calamares-nixos-extensions`,
  "Calamares modules for NixOS",
);

/**
 * Calaos Installer, a tool to create calaos configuration
 */
export const calaos_installer = mkPackage(
  nixRaw`pkgs.calaos_installer`,
  "Calaos Installer, a tool to create calaos configuration",
);

/**
 * C-style arbitrary precision calculator
 */
export const calc = mkPackage(
  nixRaw`pkgs.calc`,
  "C-style arbitrary precision calculator",
);

/**
 * A C library for exact computation with real and complex numbers
 */
export const calcium = mkPackage(
  nixRaw`pkgs.calcium`,
  "A C library for exact computation with real and complex numbers",
);

/**
 * Simulator of light scattering by planetary atmospheres
 */
export const calcmysky = mkPackage(
  nixRaw`pkgs.calcmysky`,
  "Simulator of light scattering by planetary atmospheres",
);

/**
 * RPN and algebraic scientific calculator
 */
export const calcoo = mkPackage(
  nixRaw`pkgs.calcoo`,
  "RPN and algebraic scientific calculator",
);

/**
 * Three-dimensional structural finite element program
 */
export const calculix = mkPackage(
  nixRaw`pkgs.calculix`,
  "Three-dimensional structural finite element program",
);

/**
 * Modern TUI calendar and task manager with minimal and customizable UI
 */
export const calcure = mkPackage(
  nixRaw`pkgs.calcure`,
  "Modern TUI calendar and task manager with minimal and customizable UI",
);

/**
 * A calendar and scheduling application for the command line
 */
export const calcurse = mkPackage(
  nixRaw`pkgs.calcurse`,
  "A calendar and scheduling application for the command line",
);

/**
 * Simple command-line CalDav client
 */
export const calendar_cli = mkPackage(
  nixRaw`pkgs.calendar-cli`,
  "Simple command-line CalDav client",
);

/**
 * A set of high quality open source audio plugins for musicians
 */
export const calf = mkPackage(
  nixRaw`pkgs.calf`,
  "A set of high quality open source audio plugins for musicians",
);

/**
 * Comprehensive e-book software
 */
export const calibre = mkPackage(
  nixRaw`pkgs.calibre`,
  "Comprehensive e-book software",
);

/**
 * Web app for browsing, reading and downloading eBooks stored in a Calibre database
 */
export const calibre_web = mkPackage(
  nixRaw`pkgs.calibre-web`,
  "Web app for browsing, reading and downloading eBooks stored in a Calibre database",
);

/**
 * Cloud native networking and network security
 */
export const calico_apiserver = mkPackage(
  nixRaw`pkgs.calico-apiserver`,
  "Cloud native networking and network security",
);

/**
 * Cloud native networking and network security
 */
export const calico_app_policy = mkPackage(
  nixRaw`pkgs.calico-app-policy`,
  "Cloud native networking and network security",
);

/**
 * Cloud native networking and network security
 */
export const calico_cni_plugin = mkPackage(
  nixRaw`pkgs.calico-cni-plugin`,
  "Cloud native networking and network security",
);

/**
 * Cloud native networking and network security
 */
export const calico_kube_controllers = mkPackage(
  nixRaw`pkgs.calico-kube-controllers`,
  "Cloud native networking and network security",
);

/**
 * Cloud native networking and network security
 */
export const calico_pod2daemon = mkPackage(
  nixRaw`pkgs.calico-pod2daemon`,
  "Cloud native networking and network security",
);

/**
 * Cloud native networking and network security
 */
export const calico_typha = mkPackage(
  nixRaw`pkgs.calico-typha`,
  "Cloud native networking and network security",
);

/**
 * Cloud native networking and network security
 */
export const calicoctl = mkPackage(
  nixRaw`pkgs.calicoctl`,
  "Cloud native networking and network security",
);

/**
 * Daemon for dealing with audio routing during phone calls
 */
export const callaudiod = mkPackage(
  nixRaw`pkgs.callaudiod`,
  "Daemon for dealing with audio routing during phone calls",
);

/**
 * A suite of productivity applications
 */
export const calligra = mkPackage(
  nixRaw`pkgs.calligra`,
  "A suite of productivity applications",
);

/**
 * A phone dialer and call handler
 */
export const calls = mkPackage(
  nixRaw`pkgs.calls`,
  "A phone dialer and call handler",
);

/**
 * Generic VPN client by LEAP
 */
export const calyx_vpn = mkPackage(
  nixRaw`pkgs.calyx-vpn`,
  "Generic VPN client by LEAP",
);

/**
 * RAD tool for GTK 4 and 3 with data model first philosophy
 */
export const cambalache = mkPackage(
  nixRaw`pkgs.cambalache`,
  "RAD tool for GTK 4 and 3 with data model first philosophy",
);

/**
 * Cambridge dictionary in a terminal
 */
export const cambrinary = mkPackage(
  nixRaw`pkgs.cambrinary`,
  "Cambridge dictionary in a terminal",
);

/**
 * A monospaced typeface designed for source-code editors
 */
export const camingo_code = mkPackage(
  nixRaw`pkgs.camingo-code`,
  "A monospaced typeface designed for source-code editors",
);

/**
 * An integrated modeling solution for BPMN, DMN and Forms based on bpmn.io
 */
export const camunda_modeler = mkPackage(
  nixRaw`pkgs.camunda-modeler`,
  "An integrated modeling solution for BPMN, DMN and Forms based on bpmn.io",
);

/**
 * CAN userspace utilities and tools (for use with Linux SocketCAN)
 */
export const can_utils = mkPackage(
  nixRaw`pkgs.can-utils`,
  "CAN userspace utilities and tools (for use with Linux SocketCAN)",
);

/**
 * GRBL controller application with G-Code visualizer written in Qt
 */
export const candle = mkPackage(
  nixRaw`pkgs.candle`,
  "GRBL controller application with G-Code visualizer written in Qt",
);

/**
 * Open source EDA software focused on easy of use and portability
 */
export const caneda = mkPackage(
  nixRaw`pkgs.caneda`,
  "Open source EDA software focused on easy of use and portability",
);

/**
 * A SocketCAN over Ethernet tunnel
 */
export const cannelloni = mkPackage(
  nixRaw`pkgs.cannelloni`,
  "A SocketCAN over Ethernet tunnel",
);

/**
 * CanoKey QEMU Virt Card
 */
export const canokey_qemu = mkPackage(
  nixRaw`pkgs.canokey-qemu`,
  "CanoKey QEMU Virt Card",
);

/**
 * CUPS Linux drivers for Canon printers
 */
export const canon_cups_ufr2 = mkPackage(
  nixRaw`pkgs.canon-cups-ufr2`,
  "CUPS Linux drivers for Canon printers",
);

export const canonicalize_jar = mkPackage(
  nixRaw`pkgs.canonicalize-jar`,
  "",
);

export const canonicalize_jars_hook = mkPackage(
  nixRaw`pkgs.canonicalize-jars-hook`,
  "",
);

/**
 * Flat Design theme for GTK based desktop environments
 */
export const canta_theme = mkPackage(
  nixRaw`pkgs.canta-theme`,
  "Flat Design theme for GTK based desktop environments",
);

/**
 * Default typeface used in the user interface of GNOME since version 3.0
 */
export const cantarell_fonts = mkPackage(
  nixRaw`pkgs.cantarell-fonts`,
  "Default typeface used in the user interface of GNOME since version 3.0",
);

/**
 * A graphical client for MPD
 */
export const cantata = mkPackage(
  nixRaw`pkgs.cantata`,
  "A graphical client for MPD",
);

/**
 * An ncurses-based console Atom/RSS feed reader
 */
export const canto_curses = mkPackage(
  nixRaw`pkgs.canto-curses`,
  "An ncurses-based console Atom/RSS feed reader",
);

/**
 * Daemon for the canto Atom/RSS feed reader
 */
export const canto_daemon = mkPackage(
  nixRaw`pkgs.canto-daemon`,
  "Daemon for the canto Atom/RSS feed reader",
);

/**
 * Black-box CAN network analysis framework
 */
export const cantoolz = mkPackage(
  nixRaw`pkgs.cantoolz`,
  "Black-box CAN network analysis framework",
);

/**
 * Front end to powerful mathematics and statistics packages
 */
export const cantor = mkPackage(
  nixRaw`pkgs.cantor`,
  "Front end to powerful mathematics and statistics packages",
);

/**
 * An x-cursor theme inspired by macOS and based on KDE Breeze
 */
export const capitaine_cursors = mkPackage(
  nixRaw`pkgs.capitaine-cursors`,
  "An x-cursor theme inspired by macOS and based on KDE Breeze",
);

/**
 * A fork of the capitaine cursor theme, with some additional variants (Gruvbox, Nord, Palenight) and support for HiDPI
 */
export const capitaine_cursors_themed = mkPackage(
  nixRaw`pkgs.capitaine-cursors-themed`,
  "A fork of the capitaine cursor theme, with some additional variants (Gruvbox, Nord, Palenight) and support for HiDPI",
);

/**
 * Cap'n Proto cerealization protocol
 */
export const capnproto = mkPackage(
  nixRaw`pkgs.capnproto`,
  "Cap'n Proto cerealization protocol",
);

/**
 * Cap'n Proto codegen plugin for Java
 */
export const capnproto_java = mkPackage(
  nixRaw`pkgs.capnproto-java`,
  "Cap'n Proto codegen plugin for Java",
);

/**
 * Cap'n Proto codegen plugin for Rust
 */
export const capnproto_rust = mkPackage(
  nixRaw`pkgs.capnproto-rust`,
  "Cap'n Proto codegen plugin for Rust",
);

/**
 * A complete emulation of CPC464, CPC664 and CPC6128
 */
export const caprice32 = mkPackage(
  nixRaw`pkgs.caprice32`,
  "A complete emulation of CPC464, CPC664 and CPC6128",
);

/**
 * An elegant Facebook Messenger desktop app
 */
export const caprine_bin = mkPackage(
  nixRaw`pkgs.caprine-bin`,
  "An elegant Facebook Messenger desktop app",
);

/**
 * A selection of LADSPA plugins implementing classic effects
 */
export const caps = mkPackage(
  nixRaw`pkgs.caps`,
  "A selection of LADSPA plugins implementing classic effects",
);

/**
 * Advanced disassembly library
 */
export const capstone = mkPackage(
  nixRaw`pkgs.capstone`,
  "Advanced disassembly library",
);

/**
 * Dedicated Chrome instance to log into captive portals without messing with DNS settings
 */
export const captive_browser = mkPackage(
  nixRaw`pkgs.captive-browser`,
  "Dedicated Chrome instance to log into captive portals without messing with DNS settings",
);

/**
 * A no bullshit screen capture tool
 */
export const capture = mkPackage(
  nixRaw`pkgs.capture`,
  "A no bullshit screen capture tool",
);

/**
 * Multi-shell multi-command argument completer
 */
export const carapace = mkPackage(
  nixRaw`pkgs.carapace`,
  "Multi-shell multi-command argument completer",
);

/**
 * Beautiful images of your code — from right inside your terminal
 */
export const carbon_now_cli = mkPackage(
  nixRaw`pkgs.carbon-now-cli`,
  "Beautiful images of your code — from right inside your terminal",
);

/**
 * A scrollable, tiling Wayland compositor inspired on PaperWM
 */
export const cardboard = mkPackage(
  nixRaw`pkgs.cardboard`,
  "A scrollable, tiling Wayland compositor inspired on PaperWM",
);

/**
 * A CardDAV import/export utility
 */
export const carddav_util = mkPackage(
  nixRaw`pkgs.carddav-util`,
  "A CardDAV import/export utility",
);

/**
 * Plugin wrapper around VCV Rack
 */
export const cardinal = mkPackage(
  nixRaw`pkgs.cardinal`,
  "Plugin wrapper around VCV Rack",
);

/**
 * Cardo is a large Unicode font specifically designed for the needs of classicists, Biblical scholars, medievalists, and linguists
 */
export const cardo = mkPackage(
  nixRaw`pkgs.cardo`,
  "Cardo is a large Unicode font specifically designed for the needs of classicists, Biblical scholars, medievalists, and linguists",
);

/**
 * A tool to read the contents of ISO7816 smart cards
 */
export const cardpeek = mkPackage(
  nixRaw`pkgs.cardpeek`,
  "A tool to read the contents of ISO7816 smart cards",
);

/**
 * Downloads your Rust project's dependencies and builds your project
 */
export const cargo = mkPackage(
  nixRaw`pkgs.cargo`,
  "Downloads your Rust project's dependencies and builds your project",
);

/**
 * Converts cargo's json output (from stdin) to JUnit XML (to stdout).
 */
export const cargo2junit = mkPackage(
  nixRaw`pkgs.cargo2junit`,
  "Converts cargo's json output (from stdin) to JUnit XML (to stdout).",
);

/**
 * Cargo plugin to generate list of all licenses for a crate
 */
export const cargo_about = mkPackage(
  nixRaw`pkgs.cargo-about`,
  "Cargo plugin to generate list of all licenses for a crate",
);

/**
 * A Cargo subcommand to build and test all feature flag combinations
 */
export const cargo_all_features = mkPackage(
  nixRaw`pkgs.cargo-all-features`,
  "A Cargo subcommand to build and test all feature flag combinations",
);

/**
 * Tool for creating Android packages
 */
export const cargo_apk = mkPackage(
  nixRaw`pkgs.cargo-apk`,
  "Tool for creating Android packages",
);

/**
 * Display the assembly or LLVM-IR generated for Rust source code
 */
export const cargo_asm = mkPackage(
  nixRaw`pkgs.cargo-asm`,
  "Display the assembly or LLVM-IR generated for Rust source code",
);

/**
 * Audit Cargo.lock files for crates with security vulnerabilities
 */
export const cargo_audit = mkPackage(
  nixRaw`pkgs.cargo-audit`,
  "Audit Cargo.lock files for crates with security vulnerabilities",
);

/**
 * A tool to make production Rust binaries auditable
 */
export const cargo_auditable = mkPackage(
  nixRaw`pkgs.cargo-auditable`,
  "A tool to make production Rust binaries auditable",
);

/**
 * A tool to make production Rust binaries auditable
 */
export const cargo_auditable_cargo_wrapper = mkPackage(
  nixRaw`pkgs.cargo-auditable-cargo-wrapper`,
  "A tool to make production Rust binaries auditable",
);

/**
 * Part of the `crate_universe` collection of tools which use Cargo to generate build targets for Bazel
 */
export const cargo_bazel = mkPackage(
  nixRaw`pkgs.cargo-bazel`,
  "Part of the `crate_universe` collection of tools which use Cargo to generate build targets for Bazel",
);

/**
 * A small utility to compare Rust micro-benchmarks
 */
export const cargo_benchcmp = mkPackage(
  nixRaw`pkgs.cargo-benchcmp`,
  "A small utility to compare Rust micro-benchmarks",
);

/**
 * A tool for installing rust binaries as an alternative to building from source
 */
export const cargo_binstall = mkPackage(
  nixRaw`pkgs.cargo-binstall`,
  "A tool for installing rust binaries as an alternative to building from source",
);

/**
 * Cargo subcommands to invoke the LLVM tools shipped with the Rust toolchain
 */
export const cargo_binutils = mkPackage(
  nixRaw`pkgs.cargo-binutils`,
  "Cargo subcommands to invoke the LLVM tools shipped with the Rust toolchain",
);

/**
 * Bisects rustc, either nightlies or CI artifacts
 */
export const cargo_bisect_rustc = mkPackage(
  nixRaw`pkgs.cargo-bisect-rustc`,
  "Bisects rustc, either nightlies or CI artifacts",
);

/**
 * Cargo extension that can generate BitBake recipes utilizing the classes from meta-rust
 */
export const cargo_bitbake = mkPackage(
  nixRaw`pkgs.cargo-bitbake`,
  "Cargo extension that can generate BitBake recipes utilizing the classes from meta-rust",
);

/**
 * A tool and Cargo subcommand that helps you find out what takes most of the space in your executable
 */
export const cargo_bloat = mkPackage(
  nixRaw`pkgs.cargo-bloat`,
  "A tool and Cargo subcommand that helps you find out what takes most of the space in your executable",
);

/**
 * Fuzzing and property testing front-end framework for Rust
 */
export const cargo_bolero = mkPackage(
  nixRaw`pkgs.cargo-bolero`,
  "Fuzzing and property testing front-end framework for Rust",
);

/**
 * Creates a bootable disk image from a Rust OS kernel.
 */
export const cargo_bootimage = mkPackage(
  nixRaw`pkgs.cargo-bootimage`,
  "Creates a bootable disk image from a Rust OS kernel.",
);

/**
 * Increments the version number of the current project.
 */
export const cargo_bump = mkPackage(
  nixRaw`pkgs.cargo-bump`,
  "Increments the version number of the current project.",
);

/**
 * Wrap rust executables in OS-specific app bundles
 */
export const cargo_bundle = mkPackage(
  nixRaw`pkgs.cargo-bundle`,
  "Wrap rust executables in OS-specific app bundles",
);

/**
 * Generate a THIRDPARTY file with all licenses in a cargo project
 */
export const cargo_bundle_licenses = mkPackage(
  nixRaw`pkgs.cargo-bundle-licenses`,
  "Generate a THIRDPARTY file with all licenses in a cargo project",
);

/**
 * A cargo subcommand to build and install C-ABI compatible dynamic and static libraries
 */
export const cargo_c = mkPackage(
  nixRaw`pkgs.cargo-c`,
  "A cargo subcommand to build and install C-ABI compatible dynamic and static libraries",
);

/**
 * Manage cargo cache (${CARGO_HOME}, ~/.cargo/), print sizes of dirs and remove dirs selectively
 */
export const cargo_cache = mkPackage(
  nixRaw`pkgs.cargo-cache`,
  "Manage cargo cache (${CARGO_HOME}, ~/.cargo/), print sizes of dirs and remove dirs selectively",
);

/**
 * A tool to execute Rust code carefully, with extra checking along the way
 */
export const cargo_careful = mkPackage(
  nixRaw`pkgs.cargo-careful`,
  "A tool to execute Rust code carefully, with extra checking along the way",
);

/**
 * A cargo-subcommand to speed up Rust Docker builds using Docker layer caching
 */
export const cargo_chef = mkPackage(
  nixRaw`pkgs.cargo-chef`,
  "A cargo-subcommand to speed up Rust Docker builds using Docker layer caching",
);

/**
 * A cargo subcommand to fetch the source code of a Rust crate
 */
export const cargo_clone = mkPackage(
  nixRaw`pkgs.cargo-clone`,
  "A cargo subcommand to fetch the source code of a Rust crate",
);

/**
 * Cargo extension to build & run your codspeed benchmarks
 */
export const cargo_codspeed = mkPackage(
  nixRaw`pkgs.cargo-codspeed`,
  "Cargo extension to build & run your codspeed benchmarks",
);

/**
 * A Cargo subcommand for creating WebAssembly components based on the component model proposal
 */
export const cargo_component = mkPackage(
  nixRaw`pkgs.cargo-component`,
  "A Cargo subcommand for creating WebAssembly components based on the component model proposal",
);

/**
 * An easy to configure wrapper for Rust's clippy
 */
export const cargo_cranky = mkPackage(
  nixRaw`pkgs.cargo-cranky`,
  "An easy to configure wrapper for Rust's clippy",
);

/**
 * A cryptographically verifiable code review system for the cargo (Rust) package manager
 */
export const cargo_crev = mkPackage(
  nixRaw`pkgs.cargo-crev`,
  "A cryptographically verifiable code review system for the cargo (Rust) package manager",
);

/**
 * Cargo extension for running Criterion.rs benchmarks
 */
export const cargo_criterion = mkPackage(
  nixRaw`pkgs.cargo-criterion`,
  "Cargo extension for running Criterion.rs benchmarks",
);

/**
 * Zero setup cross compilation and cross testing
 */
export const cargo_cross = mkPackage(
  nixRaw`pkgs.cargo-cross`,
  "Zero setup cross compilation and cross testing",
);

/**
 * Creates CycloneDX Software Bill of Materials (SBOM) from Rust (Cargo) projects
 */
export const cargo_cyclonedx = mkPackage(
  nixRaw`pkgs.cargo-cyclonedx`,
  "Creates CycloneDX Software Bill of Materials (SBOM) from Rust (Cargo) projects",
);

/**
 * Cargo subcommand to check rust documentation for broken links
 */
export const cargo_deadlinks = mkPackage(
  nixRaw`pkgs.cargo-deadlinks`,
  "Cargo subcommand to check rust documentation for broken links",
);

/**
 * A cargo subcommand that generates Debian packages from information in Cargo.toml
 */
export const cargo_deb = mkPackage(
  nixRaw`pkgs.cargo-deb`,
  "A cargo subcommand that generates Debian packages from information in Cargo.toml",
);

/**
 * Cargo plugin to generate list of all licenses for a crate
 */
export const cargo_deny = mkPackage(
  nixRaw`pkgs.cargo-deny`,
  "Cargo plugin to generate list of all licenses for a crate",
);

/**
 * Create dependency graphs for cargo projects using `cargo metadata` and graphviz
 */
export const cargo_depgraph = mkPackage(
  nixRaw`pkgs.cargo-depgraph`,
  "Create dependency graphs for cargo projects using `cargo metadata` and graphviz",
);

/**
 * A tool to analyze the third-party dependencies imported by a rust crate or rust workspace
 */
export const cargo_dephell = mkPackage(
  nixRaw`pkgs.cargo-dephell`,
  "A tool to analyze the third-party dependencies imported by a rust crate or rust workspace",
);

/**
 * Cargo subcommand for building dependency graphs of Rust projects
 */
export const cargo_deps = mkPackage(
  nixRaw`pkgs.cargo-deps`,
  "Cargo subcommand for building dependency graphs of Rust projects",
);

/**
 * Help computing optimal include directives for your Cargo.toml manifest
 */
export const cargo_diet = mkPackage(
  nixRaw`pkgs.cargo-diet`,
  "Help computing optimal include directives for your Cargo.toml manifest",
);

/**
 * A tool for building final distributable artifacts and uploading them to an archive
 */
export const cargo_dist = mkPackage(
  nixRaw`pkgs.cargo-dist`,
  "A tool for building final distributable artifacts and uploading them to an archive",
);

/**
 * Cargo subcommand to generate a Dash/Zeal docset for your Rust packages
 */
export const cargo_docset = mkPackage(
  nixRaw`pkgs.cargo-docset`,
  "Cargo subcommand to generate a Dash/Zeal docset for your Rust packages",
);

/**
 * A cargo subcommand for displaying when different versions of a same dependency are pulled in
 */
export const cargo_duplicates = mkPackage(
  nixRaw`pkgs.cargo-duplicates`,
  "A cargo subcommand for displaying when different versions of a same dependency are pulled in",
);

/**
 * A utility for managing cargo dependencies from the command line
 */
export const cargo_edit = mkPackage(
  nixRaw`pkgs.cargo-edit`,
  "A utility for managing cargo dependencies from the command line",
);

/**
 * Serial flasher utility for Espressif SoCs and modules based on esptool.py
 */
export const cargo_espflash = mkPackage(
  nixRaw`pkgs.cargo-espflash`,
  "Serial flasher utility for Espressif SoCs and modules based on esptool.py",
);

/**
 * Cargo tool for monitoring ESP32/ESP8266 execution
 */
export const cargo_espmonitor = mkPackage(
  nixRaw`pkgs.cargo-espmonitor`,
  "Cargo tool for monitoring ESP32/ESP8266 execution",
);

/**
 * A utility and Cargo subcommand designed to let people expand macros in their Rust source code
 */
export const cargo_expand = mkPackage(
  nixRaw`pkgs.cargo-expand`,
  "A utility and Cargo subcommand designed to let people expand macros in their Rust source code",
);

/**
 * Cargo plugin to manage dependency features
 */
export const cargo_feature = mkPackage(
  nixRaw`pkgs.cargo-feature`,
  "Cargo plugin to manage dependency features",
);

/**
 * Easy flamegraphs for Rust projects and everything else, without Perl or pipes <3
 */
export const cargo_flamegraph = mkPackage(
  nixRaw`pkgs.cargo-flamegraph`,
  "Easy flamegraphs for Rust projects and everything else, without Perl or pipes <3",
);

/**
 * Discover funding links for your project's dependencies
 */
export const cargo_fund = mkPackage(
  nixRaw`pkgs.cargo-fund`,
  "Discover funding links for your project's dependencies",
);

/**
 * Command line helpers for fuzzing
 */
export const cargo_fuzz = mkPackage(
  nixRaw`pkgs.cargo-fuzz`,
  "Command line helpers for fuzzing",
);

/**
 * Detects usage of unsafe Rust in a Rust crate and its dependencies
 */
export const cargo_geiger = mkPackage(
  nixRaw`pkgs.cargo-geiger`,
  "Detects usage of unsafe Rust in a Rust crate and its dependencies",
);

/**
 * A tool to generaet a new Rust project by leveraging a pre-existing git repository as a template
 */
export const cargo_generate = mkPackage(
  nixRaw`pkgs.cargo-generate`,
  "A tool to generaet a new Rust project by leveraging a pre-existing git repository as a template",
);

/**
 * A cargo subcommand for creating GraphViz DOT files and dependency graphs
 */
export const cargo_graph = mkPackage(
  nixRaw`pkgs.cargo-graph`,
  "A cargo subcommand for creating GraphViz DOT files and dependency graphs",
);

/**
 * A command-line frontend for guppy
 */
export const cargo_guppy = mkPackage(
  nixRaw`pkgs.cargo-guppy`,
  "A command-line frontend for guppy",
);

/**
 * Cargo subcommand to provide various options useful for testing and continuous integration
 */
export const cargo_hack = mkPackage(
  nixRaw`pkgs.cargo-hack`,
  "Cargo subcommand to provide various options useful for testing and continuous integration",
);

/**
 * Manage workspace-hack packages to speed up builds in large workspaces.
 */
export const cargo_hakari = mkPackage(
  nixRaw`pkgs.cargo-hakari`,
  "Manage workspace-hack packages to speed up builds in large workspaces.",
);

/**
 * Cargo Subcommand for Microsoft HID Flashing Library for UF2 Bootloaders 
 */
export const cargo_hf2 = mkPackage(
  nixRaw`pkgs.cargo-hf2`,
  "Cargo Subcommand for Microsoft HID Flashing Library for UF2 Bootloaders ",
);

/**
 * Rust Cargo sub-command and libraries to extract and build localization resources to embed in your application/library
 */
export const cargo_i18n = mkPackage(
  nixRaw`pkgs.cargo-i18n`,
  "Rust Cargo sub-command and libraries to extract and build localization resources to embed in your application/library",
);

/**
 * Cargo subcommand to show crates info from crates.io
 */
export const cargo_info = mkPackage(
  nixRaw`pkgs.cargo-info`,
  "Cargo subcommand to show crates info from crates.io",
);

/**
 * See what Rust is doing behind the curtains
 */
export const cargo_inspect = mkPackage(
  nixRaw`pkgs.cargo-inspect`,
  "See what Rust is doing behind the curtains",
);

/**
 * A Cargo subcommand for snapshot testing
 */
export const cargo_insta = mkPackage(
  nixRaw`pkgs.cargo-insta`,
  "A Cargo subcommand for snapshot testing",
);

/**
 * Cargo subcommand to run kcov to get coverage report on Linux
 */
export const cargo_kcov = mkPackage(
  nixRaw`pkgs.cargo-kcov`,
  "Cargo subcommand to run kcov to get coverage report on Linux",
);

/**
 * A Cargo subcommand to help you work with AWS Lambda
 */
export const cargo_lambda = mkPackage(
  nixRaw`pkgs.cargo-lambda`,
  "A Cargo subcommand to help you work with AWS Lambda",
);

/**
 * A build tool for the Leptos web framework
 */
export const cargo_leptos = mkPackage(
  nixRaw`pkgs.cargo-leptos`,
  "A build tool for the Leptos web framework",
);

/**
 * Cargo subcommand to see license of dependencies
 */
export const cargo_license = mkPackage(
  nixRaw`pkgs.cargo-license`,
  "Cargo subcommand to see license of dependencies",
);

/**
 * Cargo subcommand "limit": reduces the noise of compiler messages
 */
export const cargo_limit = mkPackage(
  nixRaw`pkgs.cargo-limit`,
  "Cargo subcommand \"limit\": reduces the noise of compiler messages",
);

/**
 * Cargo subcommand to easily use LLVM source-based code coverage
 */
export const cargo_llvm_cov = mkPackage(
  nixRaw`pkgs.cargo-llvm-cov`,
  "Cargo subcommand to easily use LLVM source-based code coverage",
);

/**
 * Count the number of lines of LLVM IR across all instantiations of a generic function
 */
export const cargo_llvm_lines = mkPackage(
  nixRaw`pkgs.cargo-llvm-lines`,
  "Count the number of lines of LLVM IR across all instantiations of a generic function",
);

/**
 * A cargo subcommand to manage local registries
 */
export const cargo_local_registry = mkPackage(
  nixRaw`pkgs.cargo-local-registry`,
  "A cargo subcommand to manage local registries",
);

/**
 * Self-contained Cargo.lock parser with graph analysis
 */
export const cargo_lock = mkPackage(
  nixRaw`pkgs.cargo-lock`,
  "Self-contained Cargo.lock parser with graph analysis",
);

/**
 * A Cargo tool that detects unused dependencies in Rust projects
 */
export const cargo_machete = mkPackage(
  nixRaw`pkgs.cargo-machete`,
  "A Cargo tool that detects unused dependencies in Rust projects",
);

/**
 * A Rust task runner and build tool
 */
export const cargo_make = mkPackage(
  nixRaw`pkgs.cargo-make`,
  "A Rust task runner and build tool",
);

/**
 * Rust on mobile made easy! 
 */
export const cargo_mobile2 = mkPackage(
  nixRaw`pkgs.cargo-mobile2`,
  "Rust on mobile made easy! ",
);

/**
 * A cargo plugin for showing a tree-like overview of a crate's modules
 */
export const cargo_modules = mkPackage(
  nixRaw`pkgs.cargo-modules`,
  "A cargo plugin for showing a tree-like overview of a crate's modules",
);

/**
 * Cargo wrapper that encourages you after running commands
 */
export const cargo_mommy = mkPackage(
  nixRaw`pkgs.cargo-mommy`,
  "Cargo wrapper that encourages you after running commands",
);

/**
 * Cargo subcommand "msrv": assists with finding your minimum supported Rust version (MSRV)
 */
export const cargo_msrv = mkPackage(
  nixRaw`pkgs.cargo-msrv`,
  "Cargo subcommand \"msrv\": assists with finding your minimum supported Rust version (MSRV)",
);

/**
 * A mutation testing tool for Rust
 */
export const cargo_mutants = mkPackage(
  nixRaw`pkgs.cargo-mutants`,
  "A mutation testing tool for Rust",
);

/**
 * Cargo extension for building Android NDK projects
 */
export const cargo_ndk = mkPackage(
  nixRaw`pkgs.cargo-ndk`,
  "Cargo extension for building Android NDK projects",
);

/**
 * Next-generation test runner for Rust projects
 */
export const cargo_nextest = mkPackage(
  nixRaw`pkgs.cargo-nextest`,
  "Next-generation test runner for Rust projects",
);

/**
 * A cargo subcommand for displaying when Rust dependencies are out of date
 */
export const cargo_outdated = mkPackage(
  nixRaw`pkgs.cargo-outdated`,
  "A cargo subcommand for displaying when Rust dependencies are out of date",
);

/**
 * Build Postgres Extensions with Rust!
 */
export const cargo_pgrx = mkPackage(
  nixRaw`pkgs.cargo-pgrx`,
  "Build Postgres Extensions with Rust!",
);

/**
 * Cargo subcommand for ‘pgx’ to make Postgres extension development easy
 */
export const cargo_pgx = mkPackage(
  nixRaw`pkgs.cargo-pgx`,
  "Cargo subcommand for ‘pgx’ to make Postgres extension development easy",
);

/**
 * Cargo subcommand for ‘pgx’ to make Postgres extension development easy
 */
export const cargo_pgx_0_6_1 = mkPackage(
  nixRaw`pkgs.cargo-pgx_0_6_1`,
  "Cargo subcommand for ‘pgx’ to make Postgres extension development easy",
);

/**
 * Cargo subcommand for ‘pgx’ to make Postgres extension development easy
 */
export const cargo_pgx_0_7_1 = mkPackage(
  nixRaw`pkgs.cargo-pgx_0_7_1`,
  "Cargo subcommand for ‘pgx’ to make Postgres extension development easy",
);

/**
 * Cargo subcommand for ‘pgx’ to make Postgres extension development easy
 */
export const cargo_pgx_0_7_4 = mkPackage(
  nixRaw`pkgs.cargo-pgx_0_7_4`,
  "Cargo subcommand for ‘pgx’ to make Postgres extension development easy",
);

/**
 * Run your rust code without setting up cargo
 */
export const cargo_play = mkPackage(
  nixRaw`pkgs.cargo-play`,
  "Run your rust code without setting up cargo",
);

/**
 * Cargo subcommand for profiling Rust binaries
 */
export const cargo_profiler = mkPackage(
  nixRaw`pkgs.cargo-profiler`,
  "Cargo subcommand for profiling Rust binaries",
);

/**
 * List and diff the public API of Rust library crates between releases and commits. Detect breaking API changes and semver violations
 */
export const cargo_public_api = mkPackage(
  nixRaw`pkgs.cargo-public-api`,
  "List and diff the public API of Rust library crates between releases and commits. Detect breaking API changes and semver violations",
);

/**
 * Generate Bazel BUILD files from Cargo dependencies
 */
export const cargo_raze = mkPackage(
  nixRaw`pkgs.cargo-raze`,
  "Generate Bazel BUILD files from Cargo dependencies",
);

/**
 * Cargo command to create the README.md from your crate's documentation
 */
export const cargo_rdme = mkPackage(
  nixRaw`pkgs.cargo-rdme`,
  "Cargo command to create the README.md from your crate's documentation",
);

/**
 * Generate README.md from docstrings
 */
export const cargo_readme = mkPackage(
  nixRaw`pkgs.cargo-readme`,
  "Generate README.md from docstrings",
);

/**
 * Cargo subcommand "release": everything about releasing a rust crate
 */
export const cargo_release = mkPackage(
  nixRaw`pkgs.cargo-release`,
  "Cargo subcommand \"release\": everything about releasing a rust crate",
);

/**
 * Cargo extension to help create, manage, and test RISC Zero projects.
 */
export const cargo_risczero = mkPackage(
  nixRaw`pkgs.cargo-risczero`,
  "Cargo extension to help create, manage, and test RISC Zero projects.",
);

/**
 * Cargo subcommand "rr": a light wrapper around rr, the time-travelling debugger
 */
export const cargo_rr = mkPackage(
  nixRaw`pkgs.cargo-rr`,
  "Cargo subcommand \"rr\": a light wrapper around rr, the time-travelling debugger",
);

/**
 * Build, cache, and run binaries scoped in Cargo.toml rather than installing globally. This acts similarly to npm run and gomodrun, and allows your teams to always be running the same tooling versions
 */
export const cargo_run_bin = mkPackage(
  nixRaw`pkgs.cargo-run-bin`,
  "Build, cache, and run binaries scoped in Cargo.toml rather than installing globally. This acts similarly to npm run and gomodrun, and allows your teams to always be running the same tooling versions",
);

/**
 * A tool to scan your Rust crate for semver violations
 */
export const cargo_semver_checks = mkPackage(
  nixRaw`pkgs.cargo-semver-checks`,
  "A tool to scan your Rust crate for semver violations",
);

/**
 * Cargo subcommand showing the assembly, LLVM-IR and MIR generated for Rust code
 */
export const cargo_show_asm = mkPackage(
  nixRaw`pkgs.cargo-show-asm`,
  "Cargo subcommand showing the assembly, LLVM-IR and MIR generated for Rust code",
);

/**
 * A cargo command for the shuttle platform
 */
export const cargo_shuttle = mkPackage(
  nixRaw`pkgs.cargo-shuttle`,
  "A cargo command for the shuttle platform",
);

/**
 * A tool to check that your Cargo.toml dependencies are sorted alphabetically
 */
export const cargo_sort = mkPackage(
  nixRaw`pkgs.cargo-sort`,
  "A tool to check that your Cargo.toml dependencies are sorted alphabetically",
);

/**
 * Checks rust documentation for spelling and grammar mistakes
 */
export const cargo_spellcheck = mkPackage(
  nixRaw`pkgs.cargo-spellcheck`,
  "Checks rust documentation for spelling and grammar mistakes",
);

/**
 * Gather author, contributor and publisher data on crates in your dependency graph
 */
export const cargo_supply_chain = mkPackage(
  nixRaw`pkgs.cargo-supply-chain`,
  "Gather author, contributor and publisher data on crates in your dependency graph",
);

/**
 * A Cargo subcommand for cleaning up unused build files generated by Cargo
 */
export const cargo_sweep = mkPackage(
  nixRaw`pkgs.cargo-sweep`,
  "A Cargo subcommand for cleaning up unused build files generated by Cargo",
);

/**
 * A cargo plugin that generates a Markdown section in your README based on your Rust documentation
 */
export const cargo_sync_readme = mkPackage(
  nixRaw`pkgs.cargo-sync-readme`,
  "A cargo plugin that generates a Markdown section in your README based on your Rust documentation",
);

/**
 * Graph the number of crates that depend on your crate over time
 */
export const cargo_tally = mkPackage(
  nixRaw`pkgs.cargo-tally`,
  "Graph the number of crates that depend on your crate over time",
);

/**
 * A code coverage tool for Rust projects
 */
export const cargo_tarpaulin = mkPackage(
  nixRaw`pkgs.cargo-tarpaulin`,
  "A code coverage tool for Rust projects",
);

/**
 * Build smaller, faster, and more secure desktop applications with a web frontend
 */
export const cargo_tauri = mkPackage(
  nixRaw`pkgs.cargo-tauri`,
  "Build smaller, faster, and more secure desktop applications with a web frontend",
);

/**
 * A CLI tool that allow you to create a temporary new Rust project using cargo with already installed dependencies
 */
export const cargo_temp = mkPackage(
  nixRaw`pkgs.cargo-temp`,
  "A CLI tool that allow you to create a temporary new Rust project using cargo with already installed dependencies",
);

/**
 * A simple linter for Cargo.toml manifests
 */
export const cargo_toml_lint = mkPackage(
  nixRaw`pkgs.cargo-toml-lint`,
  "A simple linter for Cargo.toml manifests",
);

/**
 * Find unused dependencies in Cargo.toml
 */
export const cargo_udeps = mkPackage(
  nixRaw`pkgs.cargo-udeps`,
  "Find unused dependencies in Cargo.toml",
);

/**
 * A GUI for Cargo
 */
export const cargo_ui = mkPackage(
  nixRaw`pkgs.cargo-ui`,
  "A GUI for Cargo",
);

/**
 * A tool to find potential unused enabled feature flags and prune them
 */
export const cargo_unused_features = mkPackage(
  nixRaw`pkgs.cargo-unused-features`,
  "A tool to find potential unused enabled feature flags and prune them",
);

/**
 * A cargo subcommand for checking and applying updates to installed executables
 */
export const cargo_update = mkPackage(
  nixRaw`pkgs.cargo-update`,
  "A cargo subcommand for checking and applying updates to installed executables",
);

/**
 * Cargo subcommand "valgrind": runs valgrind and collects its output in a helpful manner
 */
export const cargo_valgrind = mkPackage(
  nixRaw`pkgs.cargo-valgrind`,
  "Cargo subcommand \"valgrind\": runs valgrind and collects its output in a helpful manner",
);

/**
 * A tool to help projects ensure that third-party Rust dependencies have been audited by a trusted source
 */
export const cargo_vet = mkPackage(
  nixRaw`pkgs.cargo-vet`,
  "A tool to help projects ensure that third-party Rust dependencies have been audited by a trusted source",
);

/**
 * A lightweight Cargo subcommand to build code for the wasm32-wasi target
 */
export const cargo_wasi = mkPackage(
  nixRaw`pkgs.cargo-wasi`,
  "A lightweight Cargo subcommand to build code for the wasm32-wasi target",
);

/**
 * A Cargo subcommand for watching over Cargo project's source
 */
export const cargo_watch = mkPackage(
  nixRaw`pkgs.cargo-watch`,
  "A Cargo subcommand for watching over Cargo project's source",
);

/**
 * A Cargo subcommand for the client-side Web
 */
export const cargo_web = mkPackage(
  nixRaw`pkgs.cargo-web`,
  "A Cargo subcommand for the client-side Web",
);

/**
 * A simple cargo plugin to get a list of features for a specific crate
 */
export const cargo_whatfeatures = mkPackage(
  nixRaw`pkgs.cargo-whatfeatures`,
  "A simple cargo plugin to get a list of features for a specific crate",
);

/**
 * Cargo subcommand "wipe": recursively finds and optionally wipes all "target" or "node_modules" folders
 */
export const cargo_wipe = mkPackage(
  nixRaw`pkgs.cargo-wipe`,
  "Cargo subcommand \"wipe\": recursively finds and optionally wipes all \"target\" or \"node_modules\" folders",
);

/**
 * A tool for managing cargo workspaces and their crates, inspired by lerna
 */
export const cargo_workspaces = mkPackage(
  nixRaw`pkgs.cargo-workspaces`,
  "A tool for managing cargo workspaces and their crates, inspired by lerna",
);

/**
 * Automatically cross-compiles the sysroot crates core, compiler_builtins, and alloc
 */
export const cargo_xbuild = mkPackage(
  nixRaw`pkgs.cargo-xbuild`,
  "Automatically cross-compiles the sysroot crates core, compiler_builtins, and alloc",
);

/**
 * Cross compile Cargo project to Windows MSVC target with ease
 */
export const cargo_xwin = mkPackage(
  nixRaw`pkgs.cargo-xwin`,
  "Cross compile Cargo project to Windows MSVC target with ease",
);

/**
 * A tool to compile Cargo projects with zig as the linker
 */
export const cargo_zigbuild = mkPackage(
  nixRaw`pkgs.cargo-zigbuild`,
  "A tool to compile Cargo projects with zig as the linker",
);

/**
 * Crawler for URLs and endpoints
 */
export const cariddi = mkPackage(
  nixRaw`pkgs.cariddi`,
  "Crawler for URLs and endpoints",
);

/**
 * An audio plugin host
 */
export const carla = mkPackage(
  nixRaw`pkgs.carla`,
  "An audio plugin host",
);

/**
 * A sans-serif font metric-compatible with Microsoft Calibri
 */
export const carlito = mkPackage(
  nixRaw`pkgs.carlito`,
  "A sans-serif font metric-compatible with Microsoft Calibri",
);

/**
 *  A simple Cairo Chart Library for GTK and Vala
 */
export const caroline = mkPackage(
  nixRaw`pkgs.caroline`,
  " A simple Cairo Chart Library for GTK and Vala",
);

/**
 * A statically typed lisp, without a GC, for real-time applications
 */
export const carp = mkPackage(
  nixRaw`pkgs.carp`,
  "A statically typed lisp, without a GC, for real-time applications",
);

/**
 * CUPS Linux drivers for Canon printers
 */
export const carps_cups = mkPackage(
  nixRaw`pkgs.carps-cups`,
  "CUPS Linux drivers for Canon printers",
);

/**
 * Mapnik stylesheet compiler
 */
export const carto = mkPackage(
  nixRaw`pkgs.carto`,
  "Mapnik stylesheet compiler",
);

/**
 * A GTK4 + Libadwaita game launcher
 */
export const cartridges = mkPackage(
  nixRaw`pkgs.cartridges`,
  "A GTK4 + Libadwaita game launcher",
);

/**
 * Monospaced font that includes programming ligatures and is designed to enhance the modern look and feel of the Windows Terminal
 */
export const cascadia_code = mkPackage(
  nixRaw`pkgs.cascadia-code`,
  "Monospaced font that includes programming ligatures and is designed to enhance the modern look and feel of the Windows Terminal",
);

/**
 * Public server and API to interface with Cask features
 */
export const cask_server = mkPackage(
  nixRaw`pkgs.cask-server`,
  "Public server and API to interface with Cask features",
);

/**
 * A massively scalable open source NoSQL database
 */
export const cassandra = mkPackage(
  nixRaw`pkgs.cassandra`,
  "A massively scalable open source NoSQL database",
);

/**
 * A massively scalable open source NoSQL database
 */
export const cassandra_3_0 = mkPackage(
  nixRaw`pkgs.cassandra_3_0`,
  "A massively scalable open source NoSQL database",
);

/**
 * A massively scalable open source NoSQL database
 */
export const cassandra_3_11 = mkPackage(
  nixRaw`pkgs.cassandra_3_11`,
  "A massively scalable open source NoSQL database",
);

/**
 * A massively scalable open source NoSQL database
 */
export const cassandra_4 = mkPackage(
  nixRaw`pkgs.cassandra_4`,
  "A massively scalable open source NoSQL database",
);

/**
 * DataStax CPP cassandra driver
 */
export const cassandra_cpp_driver = mkPackage(
  nixRaw`pkgs.cassandra-cpp-driver`,
  "DataStax CPP cassandra driver",
);

/**
 * Modern cross-platform HTTP load-testing tool written in Go
 */
export const cassowary = mkPackage(
  nixRaw`pkgs.cassowary`,
  "Modern cross-platform HTTP load-testing tool written in Go",
);

/**
 * A simple, command-line based RSS enclosure downloader
 */
export const castget = mkPackage(
  nixRaw`pkgs.castget`,
  "A simple, command-line based RSS enclosure downloader",
);

/**
 * Command-line Chromecast player
 */
export const castnow = mkPackage(
  nixRaw`pkgs.castnow`,
  "Command-line Chromecast player",
);

/**
 * An open-source hosting platform made for podcasters who want to engage and interact with their audience
 */
export const castopod = mkPackage(
  nixRaw`pkgs.castopod`,
  "An open-source hosting platform made for podcasters who want to engage and interact with their audience",
);

/**
 * A graphical client for plain-text protocols written in Rust with GTK. It currently supports the Gemini, Gopher and Finger protocols
 */
export const castor = mkPackage(
  nixRaw`pkgs.castor`,
  "A graphical client for plain-text protocols written in Rust with GTK. It currently supports the Gemini, Gopher and Finger protocols",
);

/**
 * CLI tool to record audio-enabled screencasts of your terminal, for the web
 */
export const castty = mkPackage(
  nixRaw`pkgs.castty`,
  "CLI tool to record audio-enabled screencasts of your terminal, for the web",
);

/**
 * C-family Abstract Syntax Tree XML Output
 */
export const castxml = mkPackage(
  nixRaw`pkgs.castxml`,
  "C-family Abstract Syntax Tree XML Output",
);

/**
 * Content-Addressable Data Synchronizer
 */
export const casync = mkPackage(
  nixRaw`pkgs.casync`,
  "Content-Addressable Data Synchronizer",
);

/**
 * A free, post apocalyptic, zombie infested rogue-like
 */
export const cataclysm_dda = mkPackage(
  nixRaw`pkgs.cataclysm-dda`,
  "A free, post apocalyptic, zombie infested rogue-like",
);

/**
 * A free, post apocalyptic, zombie infested rogue-like
 */
export const cataclysm_dda_git = mkPackage(
  nixRaw`pkgs.cataclysm-dda-git`,
  "A free, post apocalyptic, zombie infested rogue-like",
);

/**
 * A simple static web photo gallery, designed to be clean and easily usable
 */
export const cataract = mkPackage(
  nixRaw`pkgs.cataract`,
  "A simple static web photo gallery, designed to be clean and easily usable",
);

/**
 * A simple static web photo gallery, designed to be clean and easily usable
 */
export const cataract_unstable = mkPackage(
  nixRaw`pkgs.cataract-unstable`,
  "A simple static web photo gallery, designed to be clean and easily usable",
);

/**
 * A container init that is so simple it's effectively brain-dead
 */
export const catatonit = mkPackage(
  nixRaw`pkgs.catatonit`,
  "A container init that is so simple it's effectively brain-dead",
);

/**
 * High-performance library for gradient boosting on decision trees
 */
export const catboost = mkPackage(
  nixRaw`pkgs.catboost`,
  "High-performance library for gradient boosting on decision trees",
);

/**
 * A multi-paradigm automated test framework for C++ and Objective-C (and, maybe, C)
 */
export const catch2 = mkPackage(
  nixRaw`pkgs.catch2`,
  "A multi-paradigm automated test framework for C++ and Objective-C (and, maybe, C)",
);

/**
 * Modern, C++-native, test framework for unit-tests
 */
export const catch2_3 = mkPackage(
  nixRaw`pkgs.catch2_3`,
  "Modern, C++-native, test framework for unit-tests",
);

/**
 * A multi-paradigm automated test framework for C++ and Objective-C (and, maybe, C)
 */
export const catch_ = mkPackage(
  nixRaw`pkgs.catch`,
  "A multi-paradigm automated test framework for C++ and Objective-C (and, maybe, C)",
);

/**
 * The command line catalog tool for your offline data
 */
export const catcli = mkPackage(
  nixRaw`pkgs.catcli`,
  "The command line catalog tool for your offline data",
);

/**
 * Analog / Digital / Cat clock for X
 */
export const catclock = mkPackage(
  nixRaw`pkgs.catclock`,
  "Analog / Digital / Cat clock for X",
);

/**
 * MS-Word/Excel/PowerPoint to text converter
 */
export const catdoc = mkPackage(
  nixRaw`pkgs.catdoc`,
  "MS-Word/Excel/PowerPoint to text converter",
);

/**
 * Extracts plain text from docx files
 */
export const catdocx = mkPackage(
  nixRaw`pkgs.catdocx`,
  "Extracts plain text from docx files",
);

/**
 * A DVI to plain text translator
 */
export const catdvi = mkPackage(
  nixRaw`pkgs.catdvi`,
  "A DVI to plain text translator",
);

/**
 * Caching filesystem written in Rust
 */
export const catfs = mkPackage(
  nixRaw`pkgs.catfs`,
  "Caching filesystem written in Rust",
);

/**
 * A TLS-only terminal IRC client
 */
export const catgirl = mkPackage(
  nixRaw`pkgs.catgirl`,
  "A TLS-only terminal IRC client",
);

/**
 * Insanely fast image printing in your terminal
 */
export const catimg = mkPackage(
  nixRaw`pkgs.catimg`,
  "Insanely fast image printing in your terminal",
);

/**
 * Terminal audio visualizer for linux/unix/macOS/windows
 */
export const catnip = mkPackage(
  nixRaw`pkgs.catnip`,
  "Terminal audio visualizer for linux/unix/macOS/windows",
);

/**
 * GTK4 frontend for catnip
 */
export const catnip_gtk4 = mkPackage(
  nixRaw`pkgs.catnip-gtk4`,
  "GTK4 frontend for catnip",
);

/**
 * Soothing pastel themes
 */
export const catppuccin = mkPackage(
  nixRaw`pkgs.catppuccin`,
  "Soothing pastel themes",
);

/**
 * A CLI for Catppuccin that takes in four showcase images and displays them all at once
 */
export const catppuccin_catwalk = mkPackage(
  nixRaw`pkgs.catppuccin-catwalk`,
  "A CLI for Catppuccin that takes in four showcase images and displays them all at once",
);

/**
 * Catppuccin cursor theme based on Volantes
 */
export const catppuccin_cursors = mkPackage(
  nixRaw`pkgs.catppuccin-cursors`,
  "Catppuccin cursor theme based on Volantes",
);

/**
 * Soothing pastel theme for GTK
 */
export const catppuccin_gtk = mkPackage(
  nixRaw`pkgs.catppuccin-gtk`,
  "Soothing pastel theme for GTK",
);

/**
 * Soothing pastel theme for KDE
 */
export const catppuccin_kde = mkPackage(
  nixRaw`pkgs.catppuccin-kde`,
  "Soothing pastel theme for KDE",
);

/**
 * Soothing pastel theme for Kvantum
 */
export const catppuccin_kvantum = mkPackage(
  nixRaw`pkgs.catppuccin-kvantum`,
  "Soothing pastel theme for Kvantum",
);

/**
 * Soothing pastel theme for Papirus Icon Theme folders
 */
export const catppuccin_papirus_folders = mkPackage(
  nixRaw`pkgs.catppuccin-papirus-folders`,
  "Soothing pastel theme for Papirus Icon Theme folders",
);

/**
 * Soothing pastel theme for Plymouth
 */
export const catppuccin_plymouth = mkPackage(
  nixRaw`pkgs.catppuccin-plymouth`,
  "Soothing pastel theme for Plymouth",
);

/**
 * Soothing pastel theme for SDDM based on corners theme.
 */
export const catppuccin_sddm_corners = mkPackage(
  nixRaw`pkgs.catppuccin-sddm-corners`,
  "Soothing pastel theme for SDDM based on corners theme.",
);

/**
 * Tool to send media from online sources to Chromecast devices
 */
export const catt = mkPackage(
  nixRaw`pkgs.catt`,
  "Tool to send media from online sources to Chromecast devices",
);

/**
 * A multiprocess audio converter that supports many formats (FLAC, MP3, Ogg Vorbis, Windows codecs and many more)
 */
export const caudec = mkPackage(
  nixRaw`pkgs.caudec`,
  "A multiprocess audio converter that supports many formats (FLAC, MP3, Ogg Vorbis, Windows codecs and many more)",
);

/**
 * An alternative cargo frontend that implements dynamic shell completion for usual cargo commands
 */
export const cauwugo = mkPackage(
  nixRaw`pkgs.cauwugo`,
  "An alternative cargo frontend that implements dynamic shell completion for usual cargo commands",
);

/**
 * Console-based Audio Visualizer for Alsa
 */
export const cava = mkPackage(
  nixRaw`pkgs.cava`,
  "Console-based Audio Visualizer for Alsa",
);

/**
 * Audio visualizer based on CAVA with customizable LibAdwaita interface
 */
export const cavalier = mkPackage(
  nixRaw`pkgs.cavalier`,
  "Audio visualizer based on CAVA with customizable LibAdwaita interface",
);

/**
 * Graph database designed for ease of use and storing complex data
 */
export const cayley = mkPackage(
  nixRaw`pkgs.cayley`,
  "Graph database designed for ease of use and storing complex data",
);

/**
 * Rapidly extract unformatted, or unstandardized bibliographic references from email alerts, journal Web pages and PDF files
 */
export const cb2bib = mkPackage(
  nixRaw`pkgs.cb2bib`,
  "Rapidly extract unformatted, or unstandardized bibliographic references from email alerts, journal Web pages and PDF files",
);

/**
 * Lightweight and fast battery icon that sits in the system tray
 */
export const cbatticon = mkPackage(
  nixRaw`pkgs.cbatticon`,
  "Lightweight and fast battery icon that sits in the system tray",
);

/**
 * A mixed integer programming solver
 */
export const cbc = mkPackage(
  nixRaw`pkgs.cbc`,
  "A mixed integer programming solver",
);

/**
 * A tool to format codeblocks inside markdown and org documents
 */
export const cbfmt = mkPackage(
  nixRaw`pkgs.cbfmt`,
  "A tool to format codeblocks inside markdown and org documents",
);

/**
 * Management utility for CBFS formatted ROM images
 */
export const cbfstool = mkPackage(
  nixRaw`pkgs.cbfstool`,
  "Management utility for CBFS formatted ROM images",
);

/**
 *  An advanced multi-purpose FTP/FXP client
 */
export const cbftp = mkPackage(
  nixRaw`pkgs.cbftp`,
  " An advanced multi-purpose FTP/FXP client",
);

/**
 * Portable version of Commodore's version of Microsoft BASIC 6502 as found on the Commodore 64
 */
export const cbmbasic = mkPackage(
  nixRaw`pkgs.cbmbasic`,
  "Portable version of Commodore's version of Microsoft BASIC 6502 as found on the Commodore 64",
);

/**
 * CBMC is a Bounded Model Checker for C and C++ programs
 */
export const cbmc = mkPackage(
  nixRaw`pkgs.cbmc`,
  "CBMC is a Bounded Model Checker for C and C++ programs",
);

/**
 * coreboot console log reader
 */
export const cbmem = mkPackage(
  nixRaw`pkgs.cbmem`,
  "coreboot console log reader",
);

/**
 * Grow bonsai trees in your terminal
 */
export const cbonsai = mkPackage(
  nixRaw`pkgs.cbonsai`,
  "Grow bonsai trees in your terminal",
);

/**
 * CBOR diagnostic utilities
 */
export const cbor_diag = mkPackage(
  nixRaw`pkgs.cbor-diag`,
  "CBOR diagnostic utilities",
);

/**
 * BQN implementation in C
 */
export const cbqn = mkPackage(
  nixRaw`pkgs.cbqn`,
  "BQN implementation in C",
);

/**
 * BQN implementation in C
 */
export const cbqn_replxx = mkPackage(
  nixRaw`pkgs.cbqn-replxx`,
  "BQN implementation in C",
);

/**
 * BQN implementation in C
 */
export const cbqn_standalone = mkPackage(
  nixRaw`pkgs.cbqn-standalone`,
  "BQN implementation in C",
);

/**
 * BQN implementation in C
 */
export const cbqn_standalone_replxx = mkPackage(
  nixRaw`pkgs.cbqn-standalone-replxx`,
  "BQN implementation in C",
);

/**
 * Tcl/Tk GUI front-end to cscope
 */
export const cbrowser = mkPackage(
  nixRaw`pkgs.cbrowser`,
  "Tcl/Tk GUI front-end to cscope",
);

/**
 * Flash TI SimpleLink chips (CC2538, CC13xx, CC26xx) over serial
 */
export const cc2538_bsl = mkPackage(
  nixRaw`pkgs.cc2538-bsl`,
  "Flash TI SimpleLink chips (CC2538, CC13xx, CC26xx) over serial",
);

/**
 * C compiler for processors of 6502 family
 */
export const cc65 = mkPackage(
  nixRaw`pkgs.cc65`,
  "C compiler for processors of 6502 family",
);

/**
 * Command line tool for the Texas Instruments CC Debugger
 */
export const cc_tool = mkPackage(
  nixRaw`pkgs.cc-tool`,
  "Command line tool for the Texas Instruments CC Debugger",
);

/**
 * Compiler cache for fast recompilation of C/C++ code
 */
export const ccache = mkPackage(
  nixRaw`pkgs.ccache`,
  "Compiler cache for fast recompilation of C/C++ code",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const ccacheStdenv = mkPackage(
  nixRaw`pkgs.ccacheStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * System C compiler (wrapper script)
 */
export const ccacheWrapper = mkPackage(
  nixRaw`pkgs.ccacheWrapper`,
  "System C compiler (wrapper script)",
);

/**
 * Command line Chinese calendar viewer, similar to cal
 */
export const ccal = mkPackage(
  nixRaw`pkgs.ccal`,
  "Command line Chinese calendar viewer, similar to cal",
);

/**
 * C and C++ Code Counter
 */
export const cccc = mkPackage(
  nixRaw`pkgs.cccc`,
  "C and C++ Code Counter",
);

/**
 * CloneCD to ISO converter
 */
export const ccd2iso = mkPackage(
  nixRaw`pkgs.ccd2iso`,
  "CloneCD to ISO converter",
);

/**
 * A modular ComputerCraft emulator
 */
export const ccemux = mkPackage(
  nixRaw`pkgs.ccemux`,
  "A modular ComputerCraft emulator",
);

/**
 * Tool that produces subtitles from closed caption data in videos
 */
export const ccextractor = mkPackage(
  nixRaw`pkgs.ccextractor`,
  "Tool that produces subtitles from closed caption data in videos",
);

/**
 * ccid drivers for pcsclite
 */
export const ccid = mkPackage(
  nixRaw`pkgs.ccid`,
  "ccid drivers for pcsclite",
);

/**
 * Clozure Common Lisp
 */
export const ccl = mkPackage(
  nixRaw`pkgs.ccl`,
  "Clozure Common Lisp",
);

/**
 * A c/c++ language server powered by clang
 */
export const ccls = mkPackage(
  nixRaw`pkgs.ccls`,
  "A c/c++ language server powered by clang",
);

/**
 * A iconv based simplified-traditional chinese conversion tool
 */
export const cconv = mkPackage(
  nixRaw`pkgs.cconv`,
  "A iconv based simplified-traditional chinese conversion tool",
);

/**
 * An implementation of the IETF real-time transport protocol (RTP)
 */
export const ccrtp = mkPackage(
  nixRaw`pkgs.ccrtp`,
  "An implementation of the IETF real-time transport protocol (RTP)",
);

/**
 * Utility for encrypting and decrypting files and streams with AES-256
 */
export const ccrypt = mkPackage(
  nixRaw`pkgs.ccrypt`,
  "Utility for encrypting and decrypting files and streams with AES-256",
);

/**
 * Creative Commons symbol font
 */
export const ccsymbols = mkPackage(
  nixRaw`pkgs.ccsymbols`,
  "Creative Commons symbol font",
);

/**
 * Detection of CCTag markers made up of concentric circles
 */
export const cctag = mkPackage(
  nixRaw`pkgs.cctag`,
  "Detection of CCTag markers made up of concentric circles",
);

/**
 * C++ library for translating between absolute and civil times
 */
export const cctz = mkPackage(
  nixRaw`pkgs.cctz`,
  "C++ library for translating between absolute and civil times",
);

/**
 * Fast, modular log colorizer
 */
export const ccze = mkPackage(
  nixRaw`pkgs.ccze`,
  "Fast, modular log colorizer",
);

/**
 * Clustering and comparing protein or nucleotide sequences
 */
export const cd_hit = mkPackage(
  nixRaw`pkgs.cd-hit`,
  "Clustering and comparing protein or nucleotide sequences",
);

export const cdb = mkPackage(
  nixRaw`pkgs.cdb`,
  "",
);

/**
 * Command-line utility to get CDDB discid information from a CD-ROM disc
 */
export const cddiscid = mkPackage(
  nixRaw`pkgs.cddiscid`,
  "Command-line utility to get CDDB discid information from a CD-ROM disc",
);

/**
 * A parser, generator, and validator for CDDL
 */
export const cddl = mkPackage(
  nixRaw`pkgs.cddl`,
  "A parser, generator, and validator for CDDL",
);

/**
 * An implementation of the Double Description Method for generating all vertices of a convex polyhedron
 */
export const cddlib = mkPackage(
  nixRaw`pkgs.cddlib`,
  "An implementation of the Double Description Method for generating all vertices of a convex polyhedron",
);

/**
 * A packaging tool for building portable packages
 */
export const cde = mkPackage(
  nixRaw`pkgs.cde`,
  "A packaging tool for building portable packages",
);

/**
 * Translator English -- C/C++ declarations
 */
export const cdecl = mkPackage(
  nixRaw`pkgs.cdecl`,
  "Translator English -- C/C++ declarations",
);

/**
 * A utility that decrypts Wii U NUS content files
 */
export const cdecrypt = mkPackage(
  nixRaw`pkgs.cdecrypt`,
  "A utility that decrypts Wii U NUS content files",
);

/**
 * A suite of tools for emulating optical drives and discs
 */
export const cdemu_client = mkPackage(
  nixRaw`pkgs.cdemu-client`,
  "A suite of tools for emulating optical drives and discs",
);

/**
 * A suite of tools for emulating optical drives and discs
 */
export const cdemu_daemon = mkPackage(
  nixRaw`pkgs.cdemu-daemon`,
  "A suite of tools for emulating optical drives and discs",
);

/**
 * Common Desktop Environment
 */
export const cdesktopenv = mkPackage(
  nixRaw`pkgs.cdesktopenv`,
  "Common Desktop Environment",
);

/**
 * A very simple utility for converting DiscJuggler images to the standard ISO-9660 format
 */
export const cdi2iso = mkPackage(
  nixRaw`pkgs.cdi2iso`,
  "A very simple utility for converting DiscJuggler images to the standard ISO-9660 format",
);

/**
 * Tools to inspect and manipulate CD/DVD optical disc images
 */
export const cdimgtools = mkPackage(
  nixRaw`pkgs.cdimgtools`,
  "Tools to inspect and manipulate CD/DVD optical disc images",
);

/**
 * Minimalistic configuration management system
 */
export const cdist = mkPackage(
  nixRaw`pkgs.cdist`,
  "Minimalistic configuration management system",
);

/**
 * Curses development kit
 */
export const cdk = mkPackage(
  nixRaw`pkgs.cdk`,
  "Curses development kit",
);

/**
 * Container penetration toolkit
 */
export const cdk_go = mkPackage(
  nixRaw`pkgs.cdk-go`,
  "Container penetration toolkit",
);

/**
 * Collection of command line Operators to manipulate and analyse Climate and NWP model Data
 */
export const cdo = mkPackage(
  nixRaw`pkgs.cdo`,
  "Collection of command line Operators to manipulate and analyse Climate and NWP model Data",
);

/**
 * Open source classic overhead run-and-gun game
 */
export const cdogs_sdl = mkPackage(
  nixRaw`pkgs.cdogs-sdl`,
  "Open source classic overhead run-and-gun game",
);

/**
 * A tool and library for reading digital audio from CDs
 */
export const cdparanoia = mkPackage(
  nixRaw`pkgs.cdparanoia`,
  "A tool and library for reading digital audio from CDs",
);

/**
 * A tool and library for reading digital audio from CDs
 */
export const cdparanoiaIII = mkPackage(
  nixRaw`pkgs.cdparanoiaIII`,
  "A tool and library for reading digital audio from CDs",
);

/**
 * Cisco Discovery Protocol Reporter
 */
export const cdpr = mkPackage(
  nixRaw`pkgs.cdpr`,
  "Cisco Discovery Protocol Reporter",
);

/**
 * A tool for recording audio or data CD-Rs in disk-at-once (DAO) mode
 */
export const cdrdao = mkPackage(
  nixRaw`pkgs.cdrdao`,
  "A tool for recording audio or data CD-Rs in disk-at-once (DAO) mode",
);

/**
 * Portable command-line CD/DVD recorder software, mostly compatible with cdrtools
 */
export const cdrkit = mkPackage(
  nixRaw`pkgs.cdrkit`,
  "Portable command-line CD/DVD recorder software, mostly compatible with cdrtools",
);

/**
 * Highly portable CD/DVD/BluRay command line recording software
 */
export const cdrtools = mkPackage(
  nixRaw`pkgs.cdrtools`,
  "Highly portable CD/DVD/BluRay command line recording software",
);

/**
 * A configurable cd wrapper that lets you define your environment per directory
 */
export const cdwe = mkPackage(
  nixRaw`pkgs.cdwe`,
  "A configurable cd wrapper that lets you define your environment per directory",
);

/**
 * Creates CycloneDX Software Bill-of-Materials (SBOM) for your projects from source and container images
 */
export const cdxgen = mkPackage(
  nixRaw`pkgs.cdxgen`,
  "Creates CycloneDX Software Bill-of-Materials (SBOM) for your projects from source and container images",
);

/**
 * A build system for C projects that is something of an extension around Ruby's Rake
 */
export const ceedling = mkPackage(
  nixRaw`pkgs.ceedling`,
  "A build system for C projects that is something of an extension around Ruby's Rake",
);

/**
 * C++ Library for creating GUIs
 */
export const cegui = mkPackage(
  nixRaw`pkgs.cegui`,
  "C++ Library for creating GUIs",
);

/**
 * Fast, portable, non-Turing complete expression evaluation with gradual typing
 */
export const cel_go = mkPackage(
  nixRaw`pkgs.cel-go`,
  "Fast, portable, non-Turing complete expression evaluation with gradual typing",
);

/**
 * GUI file synchronization client that can sync with any cloud provider
 */
export const celeste = mkPackage(
  nixRaw`pkgs.celeste`,
  "GUI file synchronization client that can sync with any cloud provider",
);

/**
 * Real-time 3D simulation of space
 */
export const celestia = mkPackage(
  nixRaw`pkgs.celestia`,
  "Real-time 3D simulation of space",
);

/**
 * Linear logic programming system
 */
export const celf = mkPackage(
  nixRaw`pkgs.celf`,
  "Linear logic programming system",
);

/**
 * Simple GTK frontend for the mpv video player
 */
export const celluloid = mkPackage(
  nixRaw`pkgs.celluloid`,
  "Simple GTK frontend for the mpv video player",
);

/**
 * Ultra-low delay audio codec
 */
export const celt = mkPackage(
  nixRaw`pkgs.celt`,
  "Ultra-low delay audio codec",
);

/**
 * Ultra-low delay audio codec
 */
export const celt_0_5_1 = mkPackage(
  nixRaw`pkgs.celt_0_5_1`,
  "Ultra-low delay audio codec",
);

/**
 * Ultra-low delay audio codec
 */
export const celt_0_7 = mkPackage(
  nixRaw`pkgs.celt_0_7`,
  "Ultra-low delay audio codec",
);

/**
 * Cemu is a Wii U emulator
 */
export const cemu = mkPackage(
  nixRaw`pkgs.cemu`,
  "Cemu is a Wii U emulator",
);

/**
 * Third-party TI-84 Plus CE / TI-83 Premium CE emulator, focused on developer features
 */
export const cemu_ti = mkPackage(
  nixRaw`pkgs.cemu-ti`,
  "Third-party TI-84 Plus CE / TI-83 Premium CE emulator, focused on developer features",
);

/**
 * A Cycle-Accurate Nintendo 64 Emulator
 */
export const cen64 = mkPackage(
  nixRaw`pkgs.cen64`,
  "A Cycle-Accurate Nintendo 64 Emulator",
);

/**
 * Fork of CenterICQ, a curses instant messaging program
 */
export const centerim = mkPackage(
  nixRaw`pkgs.centerim`,
  "Fork of CenterICQ, a curses instant messaging program",
);

/**
 * Distributed storage system
 */
export const ceph = mkPackage(
  nixRaw`pkgs.ceph`,
  "Distributed storage system",
);

/**
 * Tools needed to mount Ceph's RADOS Block Devices/Cephfs
 */
export const ceph_client = mkPackage(
  nixRaw`pkgs.ceph-client`,
  "Tools needed to mount Ceph's RADOS Block Devices/Cephfs",
);

/**
 * Container Storage Interface (CSI) driver for Ceph RBD and CephFS
 */
export const ceph_csi = mkPackage(
  nixRaw`pkgs.ceph-csi`,
  "Container Storage Interface (CSI) driver for Ceph RBD and CephFS",
);

/**
 * Distributed storage system
 */
export const ceph_dev = mkPackage(
  nixRaw`pkgs.ceph-dev`,
  "Distributed storage system",
);

/**
 * A linear logic programming language for modeling generative interactive systems
 */
export const ceptre = mkPackage(
  nixRaw`pkgs.ceptre`,
  "A linear logic programming language for modeling generative interactive systems",
);

/**
 * A header-only C++11 serialization library
 */
export const cereal = mkPackage(
  nixRaw`pkgs.cereal`,
  "A header-only C++11 serialization library",
);

/**
 * A header-only C++11 serialization library
 */
export const cereal_1_3_0 = mkPackage(
  nixRaw`pkgs.cereal_1_3_0`,
  "A header-only C++11 serialization library",
);

/**
 * A header-only C++11 serialization library
 */
export const cereal_1_3_2 = mkPackage(
  nixRaw`pkgs.cereal_1_3_2`,
  "A header-only C++11 serialization library",
);

/**
 * C++ library for modeling and solving large, complicated optimization problems
 */
export const ceres_solver = mkPackage(
  nixRaw`pkgs.ceres-solver`,
  "C++ library for modeling and solving large, complicated optimization problems",
);

/**
 * Legacy collection of libraries and modules for data analysis in high energy physics
 */
export const cernlib = mkPackage(
  nixRaw`pkgs.cernlib`,
  "Legacy collection of libraries and modules for data analysis in high energy physics",
);

/**
 * ACME client that can obtain certs and extensibly update server configurations
 */
export const certbot = mkPackage(
  nixRaw`pkgs.certbot`,
  "ACME client that can obtain certs and extensibly update server configurations",
);

export const certbot_full = mkPackage(
  nixRaw`pkgs.certbot-full`,
  "",
);

/**
 * Dump certificates from PE files in different formats
 */
export const certdump = mkPackage(
  nixRaw`pkgs.certdump`,
  "Dump certificates from PE files in different formats",
);

/**
 * Intelligence tool to crawl the graph of certificate alternate names
 */
export const certgraph = mkPackage(
  nixRaw`pkgs.certgraph`,
  "Intelligence tool to crawl the graph of certificate alternate names",
);

/**
 * A utility to examine and validate certificates in a variety of formats
 */
export const certigo = mkPackage(
  nixRaw`pkgs.certigo`,
  "A utility to examine and validate certificates in a variety of formats",
);

/**
 * Library and CLI tool to enumerate and abuse misconfigurations in Active Directory Certificate Services
 */
export const certipy = mkPackage(
  nixRaw`pkgs.certipy`,
  "Library and CLI tool to enumerate and abuse misconfigurations in Active Directory Certificate Services",
);

/**
 * Cloudflare's certificate manager
 */
export const certmgr = mkPackage(
  nixRaw`pkgs.certmgr`,
  "Cloudflare's certificate manager",
);

/**
 * Cloudflare's certificate manager
 */
export const certmgr_selfsigned = mkPackage(
  nixRaw`pkgs.certmgr-selfsigned`,
  "Cloudflare's certificate manager",
);

/**
 * Tools to bootstrap CAs, certificate requests, and signed certificates
 */
export const certstrap = mkPackage(
  nixRaw`pkgs.certstrap`,
  "Tools to bootstrap CAs, certificate requests, and signed certificates",
);

/**
 * Dump NTDS with golden certificates and UnPAC the hash
 */
export const certsync = mkPackage(
  nixRaw`pkgs.certsync`,
  "Dump NTDS with golden certificates and UnPAC the hash",
);

/**
 * Custom wordlist generator
 */
export const cewl = mkPackage(
  nixRaw`pkgs.cewl`,
  "Custom wordlist generator",
);

/**
 * A command line utility to facilitate terraforming your existing Cloudflare resources
 */
export const cf_terraforming = mkPackage(
  nixRaw`pkgs.cf-terraforming`,
  "A command line utility to facilitate terraforming your existing Cloudflare resources",
);

/**
 * A tool for managing your Cloudflare credentials, securely..

 */
export const cf_vault = mkPackage(
  nixRaw`pkgs.cf-vault`,
  "A tool for managing your Cloudflare credentials, securely..\n",
);

/**
 * Context-free design grammar - a tool for graphics generation
 */
export const cfdg = mkPackage(
  nixRaw`pkgs.cfdg`,
  "Context-free design grammar - a tool for graphics generation",
);

/**
 * CloudFlare Dynamic DNS Client
 */
export const cfdyndns = mkPackage(
  nixRaw`pkgs.cfdyndns`,
  "CloudFlare Dynamic DNS Client",
);

/**
 * Library for reading and writing FITS data files
 */
export const cfitsio = mkPackage(
  nixRaw`pkgs.cfitsio`,
  "Library for reading and writing FITS data files",
);

/**
 * Tool to analyze the control flow of C programs
 */
export const cflow = mkPackage(
  nixRaw`pkgs.cflow`,
  "Tool to analyze the control flow of C programs",
);

/**
 * Simple and fast TUI file manager with no dependencies
 */
export const cfm = mkPackage(
  nixRaw`pkgs.cfm`,
  "Simple and fast TUI file manager with no dependencies",
);

/**
 * Linting tool for CloudFormation templates
 */
export const cfn_nag = mkPackage(
  nixRaw`pkgs.cfn-nag`,
  "Linting tool for CloudFormation templates",
);

/**
 * A silly little command line tool for sexy ANSI fonts in the console
 */
export const cfonts = mkPackage(
  nixRaw`pkgs.cfonts`,
  "A silly little command line tool for sexy ANSI fonts in the console",
);

/**
 * Another java decompiler
 */
export const cfr = mkPackage(
  nixRaw`pkgs.cfr`,
  "Another java decompiler",
);

/**
 * Tool for analysing CloudFormation templates
 */
export const cfripper = mkPackage(
  nixRaw`pkgs.cfripper`,
  "Tool for analysing CloudFormation templates",
);

/**
 * Tweak Linux CPU scheduler for desktop responsiveness
 */
export const cfs_zen_tweaks = mkPackage(
  nixRaw`pkgs.cfs-zen-tweaks`,
  "Tweak Linux CPU scheduler for desktop responsiveness",
);

/**
 * Unofficial CLI for speed.cloudflare.com
 */
export const cfspeedtest = mkPackage(
  nixRaw`pkgs.cfspeedtest`,
  "Unofficial CLI for speed.cloudflare.com",
);

/**
 * Cloudflare's PKI and TLS toolkit
 */
export const cfssl = mkPackage(
  nixRaw`pkgs.cfssl`,
  "Cloudflare's PKI and TLS toolkit",
);

/**
 * Constraint Grammar interpreter, compiler and applicator vislcg3
 */
export const cg3 = mkPackage(
  nixRaw`pkgs.cg3`,
  "Constraint Grammar interpreter, compiler and applicator vislcg3",
);

/**
 * Computational Geometry Algorithms Library
 */
export const cgal = mkPackage(
  nixRaw`pkgs.cgal`,
  "Computational Geometry Algorithms Library",
);

/**
 * Computational Geometry Algorithms Library
 */
export const cgal_4 = mkPackage(
  nixRaw`pkgs.cgal_4`,
  "Computational Geometry Algorithms Library",
);

/**
 * Computational Geometry Algorithms Library
 */
export const cgal_5 = mkPackage(
  nixRaw`pkgs.cgal_5`,
  "Computational Geometry Algorithms Library",
);

/**
 * A curses interface to gdb
 */
export const cgdb = mkPackage(
  nixRaw`pkgs.cgdb`,
  "A curses interface to gdb",
);

/**
 * CGIF, a GIF encoder written in C.
 */
export const cgif = mkPackage(
  nixRaw`pkgs.cgif`,
  "CGIF, a GIF encoder written in C.",
);

/**
 * Lightweight web server for sandboxing CGI applications
 */
export const cgiserver = mkPackage(
  nixRaw`pkgs.cgiserver`,
  "Lightweight web server for sandboxing CGI applications",
);

/**
 * Web frontend for git repositories
 */
export const cgit = mkPackage(
  nixRaw`pkgs.cgit`,
  "Web frontend for git repositories",
);

/**
 * cgit fork aiming for better maintenance
 */
export const cgit_pink = mkPackage(
  nixRaw`pkgs.cgit-pink`,
  "cgit fork aiming for better maintenance",
);

/**
 * Highly Optimized Graphics Math (glm) for C
 */
export const cglm = mkPackage(
  nixRaw`pkgs.cglm`,
  "Highly Optimized Graphics Math (glm) for C",
);

/**
 * CPU/GPU miner in c for bitcoin
 */
export const cgminer = mkPackage(
  nixRaw`pkgs.cgminer`,
  "CPU/GPU miner in c for bitcoin",
);

/**
 * Client for the KGS Go Server
 */
export const cgoban = mkPackage(
  nixRaw`pkgs.cgoban`,
  "Client for the KGS Go Server",
);

/**
 * The Modern Unit Test and Mocking Framework for C and C++
 */
export const cgreen = mkPackage(
  nixRaw`pkgs.cgreen`,
  "The Modern Unit Test and Mocking Framework for C and C++",
);

/**
 * A multiplatform basic GUI library
 */
export const cgui = mkPackage(
  nixRaw`pkgs.cgui`,
  "A multiplatform basic GUI library",
);

/**
 * Terminal graphics for the 21st century
 */
export const chafa = mkPackage(
  nixRaw`pkgs.chafa`,
  "Terminal graphics for the 21st century",
);

/**
 * An open-source tool for auditing your software supply chain stack for security compliance based on a new CIS Software Supply Chain benchmark
 */
export const chain_bench = mkPackage(
  nixRaw`pkgs.chain-bench`,
  "An open-source tool for auditing your software supply chain stack for security compliance based on a new CIS Software Supply Chain benchmark",
);

/**
 * Rapidly Search and Hunt through Windows Forensic Artefacts
 */
export const chainsaw = mkPackage(
  nixRaw`pkgs.chainsaw`,
  "Rapidly Search and Hunt through Windows Forensic Artefacts",
);

/**
 * A tool for managing secrets by storing them in AWS SSM Parameter Store
 */
export const chamber = mkPackage(
  nixRaw`pkgs.chamber`,
  "A tool for managing secrets by storing them in AWS SSM Parameter Store",
);

/**
 * Self-hosted free open source website change detection tracking, monitoring and notification service
 */
export const changedetection_io = mkPackage(
  nixRaw`pkgs.changedetection-io`,
  "Self-hosted free open source website change detection tracking, monitoring and notification service",
);

/**
 * A tool to manage your changelog file in Markdown
 */
export const changelogger = mkPackage(
  nixRaw`pkgs.changelogger`,
  "A tool to manage your changelog file in Markdown",
);

/**
 * Tools to watch for webppage changes
 */
export const changetower = mkPackage(
  nixRaw`pkgs.changetower`,
  "Tools to watch for webppage changes",
);

/**
 * Automated changelog tool for preparing releases with lots of customization options
 */
export const changie = mkPackage(
  nixRaw`pkgs.changie`,
  "Automated changelog tool for preparing releases with lots of customization options",
);

/**
 * Tool to communicate with Chaos DNS API
 */
export const chaos = mkPackage(
  nixRaw`pkgs.chaos`,
  "Tool to communicate with Chaos DNS API",
);

/**
 * The future of cowsay - Colorful characters saying something
 */
export const charasay = mkPackage(
  nixRaw`pkgs.charasay`,
  "The future of cowsay - Colorful characters saying something",
);

/**
 * Simple policy-based fee manager for lightning network daemon
 */
export const charge_lnd = mkPackage(
  nixRaw`pkgs.charge-lnd`,
  "Simple policy-based fee manager for lightning network daemon",
);

/**
 * A family of highly readable fonts for broad multilingual use
 */
export const charis_sil = mkPackage(
  nixRaw`pkgs.charis-sil`,
  "A family of highly readable fonts for broad multilingual use",
);

/**
 * Web Debugging Proxy
 */
export const charles = mkPackage(
  nixRaw`pkgs.charles`,
  "Web Debugging Proxy",
);

/**
 * Web Debugging Proxy
 */
export const charles3 = mkPackage(
  nixRaw`pkgs.charles3`,
  "Web Debugging Proxy",
);

/**
 * Web Debugging Proxy
 */
export const charles4 = mkPackage(
  nixRaw`pkgs.charles4`,
  "Web Debugging Proxy",
);

/**
 * User-defined software stacks (UDSS) for high-performance computing (HPC) centers
 */
export const charliecloud = mkPackage(
  nixRaw`pkgs.charliecloud`,
  "User-defined software stacks (UDSS) for high-performance computing (HPC) centers",
);

/**
 * A JPEG-LS library implementation in C++
 */
export const charls = mkPackage(
  nixRaw`pkgs.charls`,
  "A JPEG-LS library implementation in C++",
);

/**
 * Manage your charm account on the CLI
 */
export const charm = mkPackage(
  nixRaw`pkgs.charm`,
  "Manage your charm account on the CLI",
);

/**
 * Commandline tool to display information about unicode characters
 */
export const chars = mkPackage(
  nixRaw`pkgs.chars`,
  "Commandline tool to display information about unicode characters",
);

/**
 * A tool for testing Helm charts
 */
export const chart_testing = mkPackage(
  nixRaw`pkgs.chart-testing`,
  "A tool for testing Helm charts",
);

/**
 * IRCv3 server designed to be highly scalable
 */
export const charybdis = mkPackage(
  nixRaw`pkgs.charybdis`,
  "IRCv3 server designed to be highly scalable",
);

/**
 * Follow a symlink and print out its target file
 */
export const chase = mkPackage(
  nixRaw`pkgs.chase`,
  "Follow a symlink and print out its target file",
);

/**
 * A CLI Swiss Army Knife for ChatGPT
 */
export const chatblade = mkPackage(
  nixRaw`pkgs.chatblade`,
  "A CLI Swiss Army Knife for ChatGPT",
);

/**
 * Interactive CLI for ChatGPT
 */
export const chatgpt_cli = mkPackage(
  nixRaw`pkgs.chatgpt-cli`,
  "Interactive CLI for ChatGPT",
);

/**
 * A chat client for Twitch chat
 */
export const chatterino2 = mkPackage(
  nixRaw`pkgs.chatterino2`,
  "A chat client for Twitch chat",
);

/**
 * XMPP and SMS messaging via libpurple and ModemManager
 */
export const chatty = mkPackage(
  nixRaw`pkgs.chatty`,
  "XMPP and SMS messaging via libpurple and ModemManager",
);

/**
 * Gradually dim the screen on Wayland
 */
export const chayang = mkPackage(
  nixRaw`pkgs.chayang`,
  "Gradually dim the screen on Wayland",
);

/**
 * Create and view interactive cheatsheets on the command-line
 */
export const cheat = mkPackage(
  nixRaw`pkgs.cheat`,
  "Create and view interactive cheatsheets on the command-line",
);

/**
 * Unit testing framework for C
 */
export const check = mkPackage(
  nixRaw`pkgs.check`,
  "Unit testing framework for C",
);

/**
 * Nagios plugin to check the CA and validity of an X.509 certificate
 */
export const checkSSLCert = mkPackage(
  nixRaw`pkgs.checkSSLCert`,
  "Nagios plugin to check the CA and validity of an X.509 certificate",
);

export const check_esxi_hardware = mkPackage(
  nixRaw`pkgs.check-esxi-hardware`,
  "",
);

/**
 * A jsonschema CLI and pre-commit hook
 */
export const check_jsonschema = mkPackage(
  nixRaw`pkgs.check-jsonschema`,
  "A jsonschema CLI and pre-commit hook",
);

/**
 * Check plugin for Microsoft SQL Server
 */
export const check_mssql_health = mkPackage(
  nixRaw`pkgs.check-mssql-health`,
  "Check plugin for Microsoft SQL Server",
);

/**
 * Check plugin for network equipment
 */
export const check_nwc_health = mkPackage(
  nixRaw`pkgs.check-nwc-health`,
  "Check plugin for network equipment",
);

/**
 * A nagios/icinga/sensu check plugin for OpenVPN
 */
export const check_openvpn = mkPackage(
  nixRaw`pkgs.check-openvpn`,
  "A nagios/icinga/sensu check plugin for OpenVPN",
);

/**
 * A Nagios-Plugin that uses smartmontools to check disk health status and temperature
 */
export const check_smartmon = mkPackage(
  nixRaw`pkgs.check_smartmon`,
  "A Nagios-Plugin that uses smartmontools to check disk health status and temperature",
);

/**
 * Nagios / Icinga monitoring plugin to check systemd for failed units
 */
export const check_systemd = mkPackage(
  nixRaw`pkgs.check_systemd`,
  "Nagios / Icinga monitoring plugin to check systemd for failed units",
);

/**
 * Check plugin for UPSs
 */
export const check_ups_health = mkPackage(
  nixRaw`pkgs.check-ups-health`,
  "Check plugin for UPSs",
);

/**
 * Uptime check plugin for Sensu/Nagios/others
 */
export const check_uptime = mkPackage(
  nixRaw`pkgs.check-uptime`,
  "Uptime check plugin for Sensu/Nagios/others",
);

/**
 * A sensu/nagios plugin using WMI to query Windows hosts
 */
export const check_wmiplus = mkPackage(
  nixRaw`pkgs.check-wmiplus`,
  "A sensu/nagios plugin using WMI to query Windows hosts",
);

/**
 * Check the health, capacity, fragmentation, and other things for use with Nagios monitoring
 */
export const check_zfs = mkPackage(
  nixRaw`pkgs.check_zfs`,
  "Check the health, capacity, fragmentation, and other things for use with Nagios monitoring",
);

/**
 * Check shell scripts for non-portable syntax
 */
export const checkbashisms = mkPackage(
  nixRaw`pkgs.checkbashisms`,
  "Check shell scripts for non-portable syntax",
);

/**
 * A tool for automatically generating Slackware, RPM or Debian packages when doing `make install'
 */
export const checkinstall = mkPackage(
  nixRaw`pkgs.checkinstall`,
  "A tool for automatically generating Slackware, RPM or Debian packages when doing `make install'",
);

/**
 * CLI tool that checks an IP address using various public services
 */
export const checkip = mkPackage(
  nixRaw`pkgs.checkip`,
  "CLI tool that checks an IP address using various public services",
);

/**
 * Experimental tool for linting and checking Makefiles
 */
export const checkmake = mkPackage(
  nixRaw`pkgs.checkmake`,
  "Experimental tool for linting and checking Makefiles",
);

/**
 * Pluggable code security analysis tool
 */
export const checkmate = mkPackage(
  nixRaw`pkgs.checkmate`,
  "Pluggable code security analysis tool",
);

/**
 * Static code analysis tool for infrastructure-as-code
 */
export const checkov = mkPackage(
  nixRaw`pkgs.checkov`,
  "Static code analysis tool for infrastructure-as-code",
);

/**
 * SELinux policy compiler
 */
export const checkpolicy = mkPackage(
  nixRaw`pkgs.checkpolicy`,
  "SELinux policy compiler",
);

/**
 * Check Have I Been Pwned and see if it's time for you to change passwords
 */
export const checkpwn = mkPackage(
  nixRaw`pkgs.checkpwn`,
  "Check Have I Been Pwned and see if it's time for you to change passwords",
);

/**
 * Jailbreak for iPhone 5s though iPhone X, iOS 12.0 and up
 */
export const checkra1n = mkPackage(
  nixRaw`pkgs.checkra1n`,
  "Jailbreak for iPhone 5s though iPhone X, iOS 12.0 and up",
);

/**
 * Tool for checking security bits on executables
 */
export const checksec = mkPackage(
  nixRaw`pkgs.checksec`,
  "Tool for checking security bits on executables",
);

/**
 * Checks Java source against a coding standard
 */
export const checkstyle = mkPackage(
  nixRaw`pkgs.checkstyle`,
  "Checks Java source against a coding standard",
);

/**
 * A tracker program for composing music for the SID chip
 */
export const cheesecutter = mkPackage(
  nixRaw`pkgs.cheesecutter`,
  "A tracker program for composing music for the SID chip",
);

/**
 * The Chef Infra Client is a powerful agent that applies your configurations on remote Linux, macOS, Windows and cloud-based systems
 */
export const chef_cli = mkPackage(
  nixRaw`pkgs.chef-cli`,
  "The Chef Infra Client is a powerful agent that applies your configurations on remote Linux, macOS, Windows and cloud-based systems",
);

/**
 * change or display the stack size of an ELF binary
 */
export const chelf = mkPackage(
  nixRaw`pkgs.chelf`,
  "change or display the stack size of an ELF binary",
);

/**
 * Draw chemical structures
 */
export const chemtool = mkPackage(
  nixRaw`pkgs.chemtool`,
  "Draw chemical structures",
);

/**
 * cherry font
 */
export const cherry = mkPackage(
  nixRaw`pkgs.cherry`,
  "cherry font",
);

/**
 * A CLI tool that helps you avoid undefined user behavior by validating your API specifications
 */
export const cherrybomb = mkPackage(
  nixRaw`pkgs.cherrybomb`,
  "A CLI tool that helps you avoid undefined user behavior by validating your API specifications",
);

/**
 * An hierarchical note taking application
 */
export const cherrytree = mkPackage(
  nixRaw`pkgs.cherrytree`,
  "An hierarchical note taking application",
);

/**
 * A free chess database
 */
export const chessdb = mkPackage(
  nixRaw`pkgs.chessdb`,
  "A free chess database",
);

/**
 * Browse and analyse chess games
 */
export const chessx = mkPackage(
  nixRaw`pkgs.chessx`,
  "Browse and analyse chess games",
);

/**
 * Cross platform chewing user phrase editor
 */
export const chewing_editor = mkPackage(
  nixRaw`pkgs.chewing-editor`,
  "Cross platform chewing user phrase editor",
);

/**
 * A powerful and incredibly fast R6RS Scheme compiler
 */
export const chez = mkPackage(
  nixRaw`pkgs.chez`,
  "A powerful and incredibly fast R6RS Scheme compiler",
);

/**
 * This is a Library for ChezScheme providing the portable hygenic pattern matcher by Alex Shinn
 */
export const chez_matchable = mkPackage(
  nixRaw`pkgs.chez-matchable`,
  "This is a Library for ChezScheme providing the portable hygenic pattern matcher by Alex Shinn",
);

/**
 * This is a MIT/GNU Scheme compatibility library for Chez Scheme
 */
export const chez_mit = mkPackage(
  nixRaw`pkgs.chez-mit`,
  "This is a MIT/GNU Scheme compatibility library for Chez Scheme",
);

/**
 * Fork of Chez Scheme for Racket
 */
export const chez_racket = mkPackage(
  nixRaw`pkgs.chez-racket`,
  "Fork of Chez Scheme for Racket",
);

/**
 * This is a port of the ‘MIT Scmutils’ library to Chez Scheme
 */
export const chez_scmutils = mkPackage(
  nixRaw`pkgs.chez-scmutils`,
  "This is a port of the ‘MIT Scmutils’ library to Chez Scheme",
);

/**
 * This package provides a collection of SRFI libraries for Chez Scheme
 */
export const chez_srfi = mkPackage(
  nixRaw`pkgs.chez-srfi`,
  "This package provides a collection of SRFI libraries for Chez Scheme",
);

/**
 * Manage your dotfiles across multiple machines, securely
 */
export const chezmoi = mkPackage(
  nixRaw`pkgs.chezmoi`,
  "Manage your dotfiles across multiple machines, securely",
);

/**
 * Chia is a modern cryptocurrency built from scratch, designed to be efficient, decentralized, and secure.
 */
export const chia = mkPackage(
  nixRaw`pkgs.chia`,
  "Chia is a modern cryptocurrency built from scratch, designed to be efficient, decentralized, and secure.",
);

/**
 * Utility for developing in the Chia ecosystem: Chialisp functions, object inspection, RPC client and more
 */
export const chia_dev_tools = mkPackage(
  nixRaw`pkgs.chia-dev-tools`,
  "Utility for developing in the Chia ecosystem: Chialisp functions, object inspection, RPC client and more",
);

/**
 * New implementation of a chia plotter which is designed as a processing pipeline
 */
export const chia_plotter = mkPackage(
  nixRaw`pkgs.chia-plotter`,
  "New implementation of a chia plotter which is designed as a processing pipeline",
);

/**
 * Free and Open Source PlayStation Remote Play Client
 */
export const chiaki = mkPackage(
  nixRaw`pkgs.chiaki`,
  "Free and Open Source PlayStation Remote Play Client",
);

/**
 * Fork of Chiaki (Open Source Playstation Remote Play) with Enhancements for Steam Deck
 */
export const chiaki4deck = mkPackage(
  nixRaw`pkgs.chiaki4deck`,
  "Fork of Chiaki (Open Source Playstation Remote Play) with Enhancements for Steam Deck",
);

/**
 * Small Footprint Scheme for use as a C Extension Language
 */
export const chibi = mkPackage(
  nixRaw`pkgs.chibi`,
  "Small Footprint Scheme for use as a C Extension Language",
);

/**
 * A portable compiler for the Scheme programming language
 */
export const chicken = mkPackage(
  nixRaw`pkgs.chicken`,
  "A portable compiler for the Scheme programming language",
);

/**
 * A fast and lightweight 2D game physics library
 */
export const chipmunk = mkPackage(
  nixRaw`pkgs.chipmunk`,
  "A fast and lightweight 2D game physics library",
);

/**
 * Platform Security Assessment Framework
 */
export const chipsec = mkPackage(
  nixRaw`pkgs.chipsec`,
  "Platform Security Assessment Framework",
);

/**
 * A free, open-source tool for programming your amateur radio
 */
export const chirp = mkPackage(
  nixRaw`pkgs.chirp`,
  "A free, open-source tool for programming your amateur radio",
);

/**
 * TCP/UDP tunnel over HTTP
 */
export const chisel = mkPackage(
  nixRaw`pkgs.chisel`,
  "TCP/UDP tunnel over HTTP",
);

/**
 * Crate help in terminal: A tool for looking up details about rust crates without going to crates.io
 */
export const chit = mkPackage(
  nixRaw`pkgs.chit`,
  "Crate help in terminal: A tool for looking up details about rust crates without going to crates.io",
);

/**
 * A tool to detect crontab errors
 */
export const chkcrontab = mkPackage(
  nixRaw`pkgs.chkcrontab`,
  "A tool to detect crontab errors",
);

/**
 * Locally checks for signs of a rootkit
 */
export const chkrootkit = mkPackage(
  nixRaw`pkgs.chkrootkit`,
  "Locally checks for signs of a rootkit",
);

/**
 * chkservice is a tool for managing systemd units in terminal.
 */
export const chkservice = mkPackage(
  nixRaw`pkgs.chkservice`,
  "chkservice is a tool for managing systemd units in terminal.",
);

/**
 * A library for dealing with Microsoft ITSS/CHM format files
 */
export const chmlib = mkPackage(
  nixRaw`pkgs.chmlib`,
  "A library for dealing with Microsoft ITSS/CHM format files",
);

/**
 * An utility to reset the password of any user that has a valid local account on a Windows system
 */
export const chntpw = mkPackage(
  nixRaw`pkgs.chntpw`,
  "An utility to reset the password of any user that has a valid local account on a Windows system",
);

/**
 * A Doom source port that accurately reproduces the experience of Doom as it was played in the 1990s
 */
export const chocolate_doom = mkPackage(
  nixRaw`pkgs.chocolate-doom`,
  "A Doom source port that accurately reproduces the experience of Doom as it was played in the 1990s",
);

/**
 * A set of additional routines for SuiteSparse CHOLMOD Module
 */
export const cholmod_extra = mkPackage(
  nixRaw`pkgs.cholmod-extra`,
  "A set of additional routines for SuiteSparse CHOLMOD Module",
);

/**
 * A Didonic Thai and Latin display typeface
 */
export const chonburi_font = mkPackage(
  nixRaw`pkgs.chonburi-font`,
  "A Didonic Thai and Latin display typeface",
);

/**
 * A human-friendly and fast alternative to cut and (sometimes) awk
 */
export const choose = mkPackage(
  nixRaw`pkgs.choose`,
  "A human-friendly and fast alternative to cut and (sometimes) awk",
);

/**
 * CLI to search for sensitive services/files/folders
 */
export const chopchop = mkPackage(
  nixRaw`pkgs.chopchop`,
  "CLI to search for sensitive services/files/folders",
);

/**
 * A general purpose syntax highlighter in pure Go
 */
export const chroma = mkPackage(
  nixRaw`pkgs.chroma`,
  "A general purpose syntax highlighter in pure Go",
);

/**
 * AcoustID audio fingerprinting library
 */
export const chromaprint = mkPackage(
  nixRaw`pkgs.chromaprint`,
  "AcoustID audio fingerprinting library",
);

/**
 * Scripts to save Google Chrome's bookmarks and history as HTML bookmarks files
 */
export const chrome_export = mkPackage(
  nixRaw`pkgs.chrome-export`,
  "Scripts to save Google Chrome's bookmarks and history as HTML bookmarks files",
);

/**
 * Chrome and Firefox extension for signing with your eID on the web
 */
export const chrome_token_signing = mkPackage(
  nixRaw`pkgs.chrome-token-signing`,
  "Chrome and Firefox extension for signing with your eID on the web",
);

/**
 * A WebDriver server for running Selenium tests on Chrome
 */
export const chromedriver = mkPackage(
  nixRaw`pkgs.chromedriver`,
  "A WebDriver server for running Selenium tests on Chrome",
);

/**
 * An open source web browser from Google
 */
export const chromium = mkPackage(
  nixRaw`pkgs.chromium`,
  "An open source web browser from Google",
);

/**
 * An open source web browser from Google
 */
export const chromiumBeta = mkPackage(
  nixRaw`pkgs.chromiumBeta`,
  "An open source web browser from Google",
);

/**
 * An open source web browser from Google
 */
export const chromiumDev = mkPackage(
  nixRaw`pkgs.chromiumDev`,
  "An open source web browser from Google",
);

/**
 * A fast paced, arcade-style, top-scrolling space shooter
 */
export const chromium_bsu = mkPackage(
  nixRaw`pkgs.chromium-bsu`,
  "A fast paced, arcade-style, top-scrolling space shooter",
);

export const chromium_xorg_conf = mkPackage(
  nixRaw`pkgs.chromium-xorg-conf`,
  "",
);

/**
 * Sets your computer's clock from time servers on the Net
 */
export const chrony = mkPackage(
  nixRaw`pkgs.chrony`,
  "Sets your computer's clock from time servers on the Net",
);

/**
 * Command line tool to adjust the RPATH or RUNPATH of ELF binaries
 */
export const chrpath = mkPackage(
  nixRaw`pkgs.chrpath`,
  "Command line tool to adjust the RPATH or RUNPATH of ELF binaries",
);

/**
 * Changes the current Ruby
 */
export const chruby = mkPackage(
  nixRaw`pkgs.chruby`,
  "Changes the current Ruby",
);

/**
 * Thin wrapper around chruby to make it work with the Fish shell
 */
export const chruby_fish = mkPackage(
  nixRaw`pkgs.chruby-fish`,
  "Thin wrapper around chruby to make it work with the Fish shell",
);

/**
 * A graphical configurator for Kaleidoscope-powered keyboards
 */
export const chrysalis = mkPackage(
  nixRaw`pkgs.chrysalis`,
  "A graphical configurator for Kaleidoscope-powered keyboards",
);

/**
 * CLI client for cheat.sh, a community driven cheat sheet
 */
export const cht_sh = mkPackage(
  nixRaw`pkgs.cht-sh`,
  "CLI client for cheat.sh, a community driven cheat sheet",
);

/**
 * Programming language for real-time sound synthesis and music creation
 */
export const chuck = mkPackage(
  nixRaw`pkgs.chuck`,
  "Programming language for real-time sound synthesis and music creation",
);

/**
 * An ultra-bold, ultra-awesome slab serif typeface
 */
export const chunk = mkPackage(
  nixRaw`pkgs.chunk`,
  "An ultra-bold, ultra-awesome slab serif typeface",
);

/**
 * FUSE filesystems for viewing chunksync-style directory trees as a block device and vice versa
 */
export const chunkfs = mkPackage(
  nixRaw`pkgs.chunkfs`,
  "FUSE filesystems for viewing chunksync-style directory trees as a block device and vice versa",
);

/**
 * Space-efficient incremental backups of large files or block devices
 */
export const chunksync = mkPackage(
  nixRaw`pkgs.chunksync`,
  "Space-efficient incremental backups of large files or block devices",
);

/**
 * A multimedia file converter focused on simplicity
 */
export const ciano = mkPackage(
  nixRaw`pkgs.ciano`,
  "A multimedia file converter focused on simplicity",
);

/**
 * A general purpose, multi-paradigm programming language in the Prolog family
 */
export const ciao = mkPackage(
  nixRaw`pkgs.ciao`,
  "A general purpose, multi-paradigm programming language in the Prolog family",
);

/**
 * Unicode tool with a terminal user interface
 */
export const cicero_tui = mkPackage(
  nixRaw`pkgs.cicero-tui`,
  "Unicode tool with a terminal user interface",
);

/**
 * A new look into listening and enjoying Apple Music in style and performance.
 */
export const cider = mkPackage(
  nixRaw`pkgs.cider`,
  "A new look into listening and enjoying Apple Music in style and performance.",
);

/**
 * A simple command line tool to merge ip/ip cidr/ip range, supports IPv4/IPv6
 */
export const cidr_merger = mkPackage(
  nixRaw`pkgs.cidr-merger`,
  "A simple command line tool to merge ip/ip cidr/ip range, supports IPv4/IPv6",
);

/**
 * Like grep but for IPv4 CIDRs
 */
export const cidrgrep = mkPackage(
  nixRaw`pkgs.cidrgrep`,
  "Like grep but for IPv4 CIDRs",
);

/**
 * Middleware for the Italian Electronic Identity Card (CIE)
 */
export const cie_middleware_linux = mkPackage(
  nixRaw`pkgs.cie-middleware-linux`,
  "Middleware for the Italian Electronic Identity Card (CIE)",
);

/**
 * A tool for controlling AOSC OS packaging environments using multi-layer filesystems and containers.
 */
export const ciel = mkPackage(
  nixRaw`pkgs.ciel`,
  "A tool for controlling AOSC OS packaging environments using multi-layer filesystems and containers.",
);

/**
 * Tools for managing Linux CIFS client filesystems
 */
export const cifs_utils = mkPackage(
  nixRaw`pkgs.cifs-utils`,
  "Tools for managing Linux CIFS client filesystems",
);

/**
 * Library for reading and writing CIFTI files
 */
export const ciftilib = mkPackage(
  nixRaw`pkgs.ciftilib`,
  "Library for reading and writing CIFTI files",
);

/**
 * CLI to install, manage & troubleshoot Kubernetes clusters running Cilium
 */
export const cilium_cli = mkPackage(
  nixRaw`pkgs.cilium-cli`,
  "CLI to install, manage & troubleshoot Kubernetes clusters running Cilium",
);

/**
 * A small, open source, C++ toolkit for image processing
 */
export const cimg = mkPackage(
  nixRaw`pkgs.cimg`,
  "A small, open source, C++ toolkit for image processing",
);

/**
 * Professional video editing and compositing environment (community version)
 */
export const cinelerra = mkPackage(
  nixRaw`pkgs.cinelerra`,
  "Professional video editing and compositing environment (community version)",
);

/**
 * Yet another Matrix client for the web
 */
export const cinny = mkPackage(
  nixRaw`pkgs.cinny`,
  "Yet another Matrix client for the web",
);

/**
 * Yet another matrix client for desktop
 */
export const cinny_desktop = mkPackage(
  nixRaw`pkgs.cinny-desktop`,
  "Yet another matrix client for desktop",
);

/**
 * A case-insensitive filesystem layered on top of any other filesystem
 */
export const ciopfs = mkPackage(
  nixRaw`pkgs.ciopfs`,
  "A case-insensitive filesystem layered on top of any other filesystem",
);

/**
 * A simple application for encoding and decoding text, designed for elementary OS
 */
export const cipher = mkPackage(
  nixRaw`pkgs.cipher`,
  "A simple application for encoding and decoding text, designed for elementary OS",
);

/**
 * Collection of 400+ minimal circular SVG country and state flags
 */
export const circle_flags = mkPackage(
  nixRaw`pkgs.circle-flags`,
  "Collection of 400+ minimal circular SVG country and state flags",
);

        /**
         * Command to enable you to reproduce the CircleCI environment locally and
run jobs as if they were running on the hosted CirleCI application.

         */
export const circleci_cli = mkPackage(
  nixRaw`pkgs.circleci-cli`,
  "Command to enable you to reproduce the CircleCI environment locally and\nrun jobs as if they were running on the hosted CirleCI application.\n",
);

/**
 * Circuit IR compilers and tools
 */
export const circt = mkPackage(
  nixRaw`pkgs.circt`,
  "Circuit IR compilers and tools",
);

/**
 * A command line tool for browsing Hacker News in your terminal
 */
export const circumflex = mkPackage(
  nixRaw`pkgs.circumflex`,
  "A command line tool for browsing Hacker News in your terminal",
);

/**
 * CircuitPython library updater
 */
export const circup = mkPackage(
  nixRaw`pkgs.circup`,
  "CircuitPython library updater",
);

/**
 * A process and socket manager
 */
export const circus = mkPackage(
  nixRaw`pkgs.circus`,
  "A process and socket manager",
);

/**
 * CLI for executing Cirrus tasks locally and in any CI
 */
export const cirrus_cli = mkPackage(
  nixRaw`pkgs.cirrus-cli`,
  "CLI for executing Cirrus tasks locally and in any CI",
);

/**
 * Tool to scan SAAS and PAAS applications
 */
export const cirrusgo = mkPackage(
  nixRaw`pkgs.cirrusgo`,
  "Tool to scan SAAS and PAAS applications",
);

/**
 * Network simulation tool from Cisco
 */
export const ciscoPacketTracer7 = mkPackage(
  nixRaw`pkgs.ciscoPacketTracer7`,
  "Network simulation tool from Cisco",
);

/**
 * Network simulation tool from Cisco
 */
export const ciscoPacketTracer8 = mkPackage(
  nixRaw`pkgs.ciscoPacketTracer8`,
  "Network simulation tool from Cisco",
);

/**
 * A simple, high-performance, zero-copy C++ serialization & reflection library
 */
export const cista = mkPackage(
  nixRaw`pkgs.cista`,
  "A simple, high-performance, zero-copy C++ serialization & reflection library",
);

/**
 * Manage your bibliographies using the BibTeX format
 */
export const citations = mkPackage(
  nixRaw`pkgs.citations`,
  "Manage your bibliographies using the BibTeX format",
);

/**
 * The canary branch of an open-source emulator for the Ninteno 3DS
 */
export const citra_canary = mkPackage(
  nixRaw`pkgs.citra-canary`,
  "The canary branch of an open-source emulator for the Ninteno 3DS",
);

/**
 * The nightly branch of an open-source emulator for the Ninteno 3DS
 */
export const citra_nightly = mkPackage(
  nixRaw`pkgs.citra-nightly`,
  "The nightly branch of an open-source emulator for the Ninteno 3DS",
);

/**
 * Citrix Workspace
 */
export const citrix_workspace = mkPackage(
  nixRaw`pkgs.citrix_workspace`,
  "Citrix Workspace",
);

/**
 * Citrix Workspace
 */
export const citrix_workspace_23_02_0 = mkPackage(
  nixRaw`pkgs.citrix_workspace_23_02_0`,
  "Citrix Workspace",
);

/**
 * Citrix Workspace
 */
export const citrix_workspace_23_07_0 = mkPackage(
  nixRaw`pkgs.citrix_workspace_23_07_0`,
  "Citrix Workspace",
);

/**
 * System data via on-demand notifications
 */
export const citron = mkPackage(
  nixRaw`pkgs.citron`,
  "System data via on-demand notifications",
);

/**
 * Embedded C/C++ web server
 */
export const civetweb = mkPackage(
  nixRaw`pkgs.civetweb`,
  "Embedded C/C++ web server",
);

/**
 * CLI for interacting with Civo resources
 */
export const civo = mkPackage(
  nixRaw`pkgs.civo`,
  "CLI for interacting with Civo resources",
);

/**
 * Encrypted networking for regular people
 */
export const cjdns = mkPackage(
  nixRaw`pkgs.cjdns`,
  "Encrypted networking for regular people",
);

/**
 * Tools for cjdns managment
 */
export const cjdns_tools = mkPackage(
  nixRaw`pkgs.cjdns-tools`,
  "Tools for cjdns managment",
);

/**
 * C library for Javascript Object Signing and Encryption. This is a maintained fork of the original project
 */
export const cjose = mkPackage(
  nixRaw`pkgs.cjose`,
  "C library for Javascript Object Signing and Encryption. This is a maintained fork of the original project",
);

/**
 * Ultralightweight JSON parser in ANSI C
 */
export const cjson = mkPackage(
  nixRaw`pkgs.cjson`,
  "Ultralightweight JSON parser in ANSI C",
);

/**
 * Mod manager for Kerbal Space Program
 */
export const ckan = mkPackage(
  nixRaw`pkgs.ckan`,
  "Mod manager for Kerbal Space Program",
);

/**
 * Driver and configuration tool for Corsair keyboards and mice
 */
export const ckb_next = mkPackage(
  nixRaw`pkgs.ckb-next`,
  "Driver and configuration tool for Corsair keyboards and mice",
);

/**
 * Compiles a XKB keyboard description to a keymap suitable for loadkeys
 */
export const ckbcomp = mkPackage(
  nixRaw`pkgs.ckbcomp`,
  "Compiles a XKB keyboard description to a keymap suitable for loadkeys",
);

/**
 * A tool for verifying files against a SFV checksum file
 */
export const cksfv = mkPackage(
  nixRaw`pkgs.cksfv`,
  "A tool for verifying files against a SFV checksum file",
);

/**
 * OpenCL binding for Erlang
 */
export const cl = mkPackage(
  nixRaw`pkgs.cl`,
  "OpenCL binding for Erlang",
);

/**
 * Common Lisp launcher script
 */
export const cl_launch = mkPackage(
  nixRaw`pkgs.cl-launch`,
  "Common Lisp launcher script",
);

/**
 * Wordle TUI in Rust
 */
export const cl_wordle = mkPackage(
  nixRaw`pkgs.cl-wordle`,
  "Wordle TUI in Rust",
);

/**
 * Interactive stack-based calculator
 */
export const clac = mkPackage(
  nixRaw`pkgs.clac`,
  "Interactive stack-based calculator",
);

/**
 * Vulnerability Static Analysis for Containers
 */
export const clair = mkPackage(
  nixRaw`pkgs.clair`,
  "Vulnerability Static Analysis for Containers",
);

/**
 * Tool to obtain GraphQL API schemas
 */
export const clairvoyance = mkPackage(
  nixRaw`pkgs.clairvoyance`,
  "Tool to obtain GraphQL API schemas",
);

/**
 * Antivirus engine designed for detecting Trojans, viruses, malware and other malicious threats
 */
export const clamav = mkPackage(
  nixRaw`pkgs.clamav`,
  "Antivirus engine designed for detecting Trojans, viruses, malware and other malicious threats",
);

/**
 * SMTP filter that allows to check for viruses using the ClamAV
           anti-virus software
 */
export const clamsmtp = mkPackage(
  nixRaw`pkgs.clamsmtp`,
  "SMTP filter that allows to check for viruses using the ClamAV\n                   anti-virus software",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang = mkPackage(
  nixRaw`pkgs.clang`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const clangMultiStdenv = mkPackage(
  nixRaw`pkgs.clangMultiStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const clangStdenv = mkPackage(
  nixRaw`pkgs.clangStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const clangStdenvNoLibs = mkPackage(
  nixRaw`pkgs.clangStdenvNoLibs`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_10 = mkPackage(
  nixRaw`pkgs.clang_10`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_11 = mkPackage(
  nixRaw`pkgs.clang_11`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_12 = mkPackage(
  nixRaw`pkgs.clang_12`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_13 = mkPackage(
  nixRaw`pkgs.clang_13`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_14 = mkPackage(
  nixRaw`pkgs.clang_14`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_15 = mkPackage(
  nixRaw`pkgs.clang_15`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_16 = mkPackage(
  nixRaw`pkgs.clang_16`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_5 = mkPackage(
  nixRaw`pkgs.clang_5`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_6 = mkPackage(
  nixRaw`pkgs.clang_6`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_7 = mkPackage(
  nixRaw`pkgs.clang_7`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_8 = mkPackage(
  nixRaw`pkgs.clang_8`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_9 = mkPackage(
  nixRaw`pkgs.clang_9`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * Clang Static Analyzer
 */
export const clang_analyzer = mkPackage(
  nixRaw`pkgs.clang-analyzer`,
  "Clang Static Analyzer",
);

/**
 * man page for Clang 11.1.0
 */
export const clang_manpages = mkPackage(
  nixRaw`pkgs.clang-manpages`,
  "man page for Clang 11.1.0",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_multi = mkPackage(
  nixRaw`pkgs.clang_multi`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * A C language family frontend for LLVM (wrapper script)
 */
export const clang_sierraHack = mkPackage(
  nixRaw`pkgs.clang-sierraHack`,
  "A C language family frontend for LLVM (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const clang_sierraHack_stdenv = mkPackage(
  nixRaw`pkgs.clang-sierraHack-stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools = mkPackage(
  nixRaw`pkgs.clang-tools`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_10 = mkPackage(
  nixRaw`pkgs.clang-tools_10`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_11 = mkPackage(
  nixRaw`pkgs.clang-tools_11`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_12 = mkPackage(
  nixRaw`pkgs.clang-tools_12`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_13 = mkPackage(
  nixRaw`pkgs.clang-tools_13`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_14 = mkPackage(
  nixRaw`pkgs.clang-tools_14`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_15 = mkPackage(
  nixRaw`pkgs.clang-tools_15`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_16 = mkPackage(
  nixRaw`pkgs.clang-tools_16`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_5 = mkPackage(
  nixRaw`pkgs.clang-tools_5`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_6 = mkPackage(
  nixRaw`pkgs.clang-tools_6`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_7 = mkPackage(
  nixRaw`pkgs.clang-tools_7`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_8 = mkPackage(
  nixRaw`pkgs.clang-tools_8`,
  "Standalone command line tools for C++ development",
);

/**
 * Standalone command line tools for C++ development
 */
export const clang_tools_9 = mkPackage(
  nixRaw`pkgs.clang-tools_9`,
  "Standalone command line tools for C++ development",
);

/**
 * A cross platform toolkit library with a primary focus on game creation
 */
export const clanlib = mkPackage(
  nixRaw`pkgs.clanlib`,
  "A cross platform toolkit library with a primary focus on game creation",
);

/**
 * Clever Audio Plugin API interface headers
 */
export const clap = mkPackage(
  nixRaw`pkgs.clap`,
  "Clever Audio Plugin API interface headers",
);

/**
 * Wayland clipboard manager that will make you clap
 */
export const clapboard = mkPackage(
  nixRaw`pkgs.clapboard`,
  "Wayland clipboard manager that will make you clap",
);

/**
 * A GNOME media player built using GJS with GTK4 toolkit and powered by GStreamer with OpenGL rendering. 
 */
export const clapper = mkPackage(
  nixRaw`pkgs.clapper`,
  "A GNOME media player built using GJS with GTK4 toolkit and powered by GStreamer with OpenGL rendering. ",
);

/**
 * An open source sans-serif typeface
 */
export const clarity_city = mkPackage(
  nixRaw`pkgs.clarity-city`,
  "An open source sans-serif typeface",
);

/**
 * A rule-based tunnel in Go
 */
export const clash = mkPackage(
  nixRaw`pkgs.clash`,
  "A rule-based tunnel in Go",
);

/**
 * A GeoLite2 data created by MaxMind
 */
export const clash_geoip = mkPackage(
  nixRaw`pkgs.clash-geoip`,
  "A GeoLite2 data created by MaxMind",
);

/**
 * Another Clash Kernel
 */
export const clash_meta = mkPackage(
  nixRaw`pkgs.clash-meta`,
  "Another Clash Kernel",
);

/**
 * A Clash GUI based on tauri
 */
export const clash_verge = mkPackage(
  nixRaw`pkgs.clash-verge`,
  "A Clash GUI based on tauri",
);

/**
 * A Common Lisp implementation based on LLVM with C++ integration
 */
export const clasp_common_lisp = mkPackage(
  nixRaw`pkgs.clasp-common-lisp`,
  "A Common Lisp implementation based on LLVM with C++ integration",
);

/**
 * The Classified Advertisements library provides a generic means for matching resources
 */
export const classads = mkPackage(
  nixRaw`pkgs.classads`,
  "The Classified Advertisements library provides a generic means for matching resources",
);

/**
 * A lightweight, custom Minecraft Classic/ClassiCube client with optional additions written from scratch in C
 */
export const classicube = mkPackage(
  nixRaw`pkgs.classicube`,
  "A lightweight, custom Minecraft Classic/ClassiCube client with optional additions written from scratch in C",
);

/**
 * Interactive command line client for testing websocket servers
 */
export const claws = mkPackage(
  nixRaw`pkgs.claws`,
  "Interactive command line client for testing websocket servers",
);

/**
 * The user-friendly, lightweight, and fast email client
 */
export const claws_mail = mkPackage(
  nixRaw`pkgs.claws-mail`,
  "The user-friendly, lightweight, and fast email client",
);

/**
 * Qt-oriented static code analyzer based on the Clang framework
 */
export const clazy = mkPackage(
  nixRaw`pkgs.clazy`,
  "Qt-oriented static code analyzer based on the Clang framework",
);

/**
 * A software library containing BLAS functions written in OpenCL
 */
export const clblas = mkPackage(
  nixRaw`pkgs.clblas`,
  "A software library containing BLAS functions written in OpenCL",
);

/**
 * The tuned OpenCL BLAS library
 */
export const clblast = mkPackage(
  nixRaw`pkgs.clblast`,
  "The tuned OpenCL BLAS library",
);

/**
 * Automated C-Lightning Node Manager
 */
export const clboss = mkPackage(
  nixRaw`pkgs.clboss`,
  "Automated C-Lightning Node Manager",
);

/**
 * Names and keywords for Unicode characters from the Common Locale Data Repository
 */
export const cldr_annotations = mkPackage(
  nixRaw`pkgs.cldr-annotations`,
  "Names and keywords for Unicode characters from the Common Locale Data Repository",
);

/**
 * General purpose, state-of-the-art, pure and lazy functional programming language
 */
export const clean = mkPackage(
  nixRaw`pkgs.clean`,
  "General purpose, state-of-the-art, pure and lazy functional programming language",
);

/**
 * Command-line interface to the clean-css CSS optimization library
 */
export const clean_css_cli = mkPackage(
  nixRaw`pkgs.clean-css-cli`,
  "Command-line interface to the clean-css CSS optimization library",
);

/**
 * GTK3 port of the Clearlooks theme
 */
export const clearlooks_phenix = mkPackage(
  nixRaw`pkgs.clearlooks-phenix`,
  "GTK3 port of the Clearlooks theme",
);

/**
 * A Unicode font
 */
export const clearlyU = mkPackage(
  nixRaw`pkgs.clearlyU`,
  "A Unicode font",
);

/**
 * Discord rich presence for MPRIS music players.
 */
export const clematis = mkPackage(
  nixRaw`pkgs.clematis`,
  "Discord rich presence for MPRIS music players.",
);

/**
 * A multiplatform music player
 */
export const clementine = mkPackage(
  nixRaw`pkgs.clementine`,
  "A multiplatform music player",
);

/**
 * An MPD client based on rofi/fzf
 */
export const clerk = mkPackage(
  nixRaw`pkgs.clerk`,
  "An MPD client based on rofi/fzf",
);

/**
 * CleverCSV is a Python package for handling messy CSV files
 */
export const clevercsv = mkPackage(
  nixRaw`pkgs.clevercsv`,
  "CleverCSV is a Python package for handling messy CSV files",
);

/**
 * Automated Encryption Framework
 */
export const clevis = mkPackage(
  nixRaw`pkgs.clevis`,
  "Automated Encryption Framework",
);

/**
 * File manager with full-screen terminal interface
 */
export const clex = mkPackage(
  nixRaw`pkgs.clex`,
  "File manager with full-screen terminal interface",
);

/**
 * Library containing FFT functions written in OpenCL
 */
export const clfft = mkPackage(
  nixRaw`pkgs.clfft`,
  "Library containing FFT functions written in OpenCL",
);

/**
 * Set of HEP-specific foundation and utility classes such as random generators, physics vectors, geometry and linear algebra
 */
export const clhep = mkPackage(
  nixRaw`pkgs.clhep`,
  "Set of HEP-specific foundation and utility classes such as random generators, physics vectors, geometry and linear algebra",
);

/**
 * Command line parser for C++11
 */
export const cli11 = mkPackage(
  nixRaw`pkgs.cli11`,
  "Command line parser for C++11",
);

/**
 * CLI tool for the Amazon Route 53 DNS service
 */
export const cli53 = mkPackage(
  nixRaw`pkgs.cli53`,
  "CLI tool for the Amazon Route 53 DNS service",
);

/**
 * CLI based audio visualizer
 */
export const cli_visualizer = mkPackage(
  nixRaw`pkgs.cli-visualizer`,
  "CLI based audio visualizer",
);

/**
 * Cloud agnostic IAM permissions enumerator
 */
export const cliam = mkPackage(
  nixRaw`pkgs.cliam`,
  "Cloud agnostic IAM permissions enumerator",
);

/**
 * C micro-package manager
 */
export const clib = mkPackage(
  nixRaw`pkgs.clib`,
  "C micro-package manager",
);

/**
 * The "Command Line Interactive Controller for Kubernetes"
 */
export const click = mkPackage(
  nixRaw`pkgs.click`,
  "The \"Command Line Interactive Controller for Kubernetes\"",
);

/**
 * A build system for Ubuntu Touch apps
 */
export const clickable = mkPackage(
  nixRaw`pkgs.clickable`,
  "A build system for Ubuntu Touch apps",
);

/**
 * A vibration/audio feedback tool to be used with virtual keyboards
 */
export const clickclack = mkPackage(
  nixRaw`pkgs.clickclack`,
  "A vibration/audio feedback tool to be used with virtual keyboards",
);

/**
 * The hassle-free cursor building toolbox
 */
export const clickgen = mkPackage(
  nixRaw`pkgs.clickgen`,
  "The hassle-free cursor building toolbox",
);

/**
 * Column-oriented database management system
 */
export const clickhouse = mkPackage(
  nixRaw`pkgs.clickhouse`,
  "Column-oriented database management system",
);

/**
 * Tool for easy ClickHouse backup and restore with cloud storages support
 */
export const clickhouse_backup = mkPackage(
  nixRaw`pkgs.clickhouse-backup`,
  "Tool for easy ClickHouse backup and restore with cloud storages support",
);

/**
 * A third-party client for the Clickhouse DBMS server
 */
export const clickhouse_cli = mkPackage(
  nixRaw`pkgs.clickhouse-cli`,
  "A third-party client for the Clickhouse DBMS server",
);

/**
 * accepts TCP connections and echoes the client's IP address back to it
 */
export const client_ip_echo = mkPackage(
  nixRaw`pkgs.client-ip-echo`,
  "accepts TCP connections and echoes the client's IP address back to it",
);

/**
 * CliFM is a CLI-based, shell-like, and non-curses terminal file manager written in C: simple, fast, extensible, and lightweight as hell
 */
export const clifm = mkPackage(
  nixRaw`pkgs.clifm`,
  "CliFM is a CLI-based, shell-like, and non-curses terminal file manager written in C: simple, fast, extensible, and lightweight as hell",
);

/**
 * A simple command-line interface to the facilities of Github
 */
export const cligh = mkPackage(
  nixRaw`pkgs.cligh`,
  "A simple command-line interface to the facilities of Github",
);

/**
 * A C daemon that turns your webcam into a light sensor
 */
export const clight = mkPackage(
  nixRaw`pkgs.clight`,
  "A C daemon that turns your webcam into a light sensor",
);

/**
 * Linux bus interface that changes screen brightness/temperature
 */
export const clightd = mkPackage(
  nixRaw`pkgs.clightd`,
  "Linux bus interface that changes screen brightness/temperature",
);

/**
 * A Bitcoin Lightning Network implementation in C
 */
export const clightning = mkPackage(
  nixRaw`pkgs.clightning`,
  "A Bitcoin Lightning Network implementation in C",
);

/**
 * A minimal viewer for Termimad
 */
export const clima = mkPackage(
  nixRaw`pkgs.clima`,
  "A minimal viewer for Termimad",
);

/**
 * Print all known information about all available OpenCL platforms and devices in the system
 */
export const clinfo = mkPackage(
  nixRaw`pkgs.clinfo`,
  "Print all known information about all available OpenCL platforms and devices in the system",
);

/**
 * The Interactive C++ Interpreter
 */
export const cling = mkPackage(
  nixRaw`pkgs.cling`,
  "The Interactive C++ Interpreter",
);

/**
 * Extension of clingo to handle constraints over integers
 */
export const clingcon = mkPackage(
  nixRaw`pkgs.clingcon`,
  "Extension of clingo to handle constraints over integers",
);

/**
 * ASP system to ground and solve logic programs
 */
export const clingo = mkPackage(
  nixRaw`pkgs.clingo`,
  "ASP system to ground and solve logic programs",
);

/**
 * A simple tool to do basic modification of ini files
 */
export const clini = mkPackage(
  nixRaw`pkgs.clini`,
  "A simple tool to do basic modification of ini files",
);

/**
 * Cut, copy, and paste anything, anywhere, all from the terminal
 */
export const clipboard_jh = mkPackage(
  nixRaw`pkgs.clipboard-jh`,
  "Cut, copy, and paste anything, anywhere, all from the terminal",
);

/**
 * Buzz on new X11 clipboard events
 */
export const clipbuzz = mkPackage(
  nixRaw`pkgs.clipbuzz`,
  "Buzz on new X11 clipboard events",
);

/**
 * Clipboard Manager written in Rust Programming Language
 */
export const clipcat = mkPackage(
  nixRaw`pkgs.clipcat`,
  "Clipboard Manager written in Rust Programming Language",
);

/**
 * Video downloader for YouTube and other sites
 */
export const clipgrab = mkPackage(
  nixRaw`pkgs.clipgrab`,
  "Video downloader for YouTube and other sites",
);

/**
 * Wayland clipboard manager
 */
export const cliphist = mkPackage(
  nixRaw`pkgs.cliphist`,
  "Wayland clipboard manager",
);

/**
 * Lightweight GTK Clipboard Manager
 */
export const clipit = mkPackage(
  nixRaw`pkgs.clipit`,
  "Lightweight GTK Clipboard Manager",
);

/**
 * A simple clipboard manager for Wayland
 */
export const clipman = mkPackage(
  nixRaw`pkgs.clipman`,
  "A simple clipboard manager for Wayland",
);

/**
 * Clipboard management using dmenu
 */
export const clipmenu = mkPackage(
  nixRaw`pkgs.clipmenu`,
  "Clipboard management using dmenu",
);

/**
 * Notify on new X clipboard events
 */
export const clipnotify = mkPackage(
  nixRaw`pkgs.clipnotify`,
  "Notify on new X clipboard events",
);

/**
 * Easy to use, powerful and expressive command line argument handling for C++11/14/17
 */
export const clipp = mkPackage(
  nixRaw`pkgs.clipp`,
  "Easy to use, powerful and expressive command line argument handling for C++11/14/17",
);

/**
 * A polygon and line clipping and offsetting library (C++, C#, Delphi)
 */
export const clipper = mkPackage(
  nixRaw`pkgs.clipper`,
  "A polygon and line clipping and offsetting library (C++, C#, Delphi)",
);

/**
 * Polygon Clipping and Offsetting - C++ Only
 */
export const clipper2 = mkPackage(
  nixRaw`pkgs.clipper2`,
  "Polygon Clipping and Offsetting - C++ Only",
);

/**
 * A bunch of lints to catch common mistakes and improve your Rust code
 */
export const clippy = mkPackage(
  nixRaw`pkgs.clippy`,
  "A bunch of lints to catch common mistakes and improve your Rust code",
);

/**
 * Scan QR codes on screen and from camera, the result is in your clipboard
 */
export const clipqr = mkPackage(
  nixRaw`pkgs.clipqr`,
  "Scan QR codes on screen and from camera, the result is in your clipboard",
);

/**
 * A Tool for Building Expert Systems
 */
export const clips = mkPackage(
  nixRaw`pkgs.clips`,
  "A Tool for Building Expert Systems",
);

/**
 * lightweight python clipboard manager
 */
export const clipster = mkPackage(
  nixRaw`pkgs.clipster`,
  "lightweight python clipboard manager",
);

/**
 * Routines for clique searching
 */
export const cliquer = mkPackage(
  nixRaw`pkgs.cliquer`,
  "Routines for clique searching",
);

/**
 * Simple command-line tool to send text and files to discord
 */
export const cliscord = mkPackage(
  nixRaw`pkgs.cliscord`,
  "Simple command-line tool to send text and files to discord",
);

/**
 * ANSI Common Lisp Implementation
 */
export const clisp = mkPackage(
  nixRaw`pkgs.clisp`,
  "ANSI Common Lisp Implementation",
);

/**
 * A linter for Clojure code that sparks joy
 */
export const clj_kondo = mkPackage(
  nixRaw`pkgs.clj-kondo`,
  "A linter for Clojure code that sparks joy",
);

/**
 * Matrix Algebra on GPU and Multicore Architectures, OpenCL port
 */
export const clmagma = mkPackage(
  nixRaw`pkgs.clmagma`,
  "Matrix Algebra on GPU and Multicore Architectures, OpenCL port",
);

/**
 * C/C++ library for numbers, a part of GiNaC
 */
export const cln = mkPackage(
  nixRaw`pkgs.cln`,
  "C/C++ library for numbers, a part of GiNaC",
);

/**
 * Command-line OTP authenticator application
 */
export const cloak = mkPackage(
  nixRaw`pkgs.cloak`,
  "Command-line OTP authenticator application",
);

/**
 * A program that counts lines of source code
 */
export const cloc = mkPackage(
  nixRaw`pkgs.cloc`,
  "A program that counts lines of source code",
);

/**
 * Free time tracker and timesheet app that lets you track work hours across projects
 */
export const clockify = mkPackage(
  nixRaw`pkgs.clockify`,
  "Free time tracker and timesheet app that lets you track work hours across projects",
);

/**
 * Generate changelogs from local git metadata
 */
export const clog_cli = mkPackage(
  nixRaw`pkgs.clog-cli`,
  "Generate changelogs from local git metadata",
);

/**
 * A Lisp dialect for the JVM
 */
export const clojure = mkPackage(
  nixRaw`pkgs.clojure`,
  "A Lisp dialect for the JVM",
);

/**
 * Language Server Protocol (LSP) for Clojure
 */
export const clojure_lsp = mkPackage(
  nixRaw`pkgs.clojure-lsp`,
  "Language Server Protocol (LSP) for Clojure",
);

/**
 * Much faster lolcat
 */
export const clolcat = mkPackage(
  nixRaw`pkgs.clolcat`,
  "Much faster lolcat",
);

/**
 * Clone of Guitar Hero and Rockband-style games
 */
export const clonehero = mkPackage(
  nixRaw`pkgs.clonehero`,
  "Clone of Guitar Hero and Rockband-style games",
);

/**
 * Library that generates loops for scanning polyhedra
 */
export const cloog = mkPackage(
  nixRaw`pkgs.cloog`,
  "Library that generates loops for scanning polyhedra",
);

/**
 * Library that generates loops for scanning polyhedra
 */
export const cloog_0_18_0 = mkPackage(
  nixRaw`pkgs.cloog_0_18_0`,
  "Library that generates loops for scanning polyhedra",
);

/**
 * CLooG-PPL, the Chunky Loop Generator
 */
export const cloogppl = mkPackage(
  nixRaw`pkgs.cloogppl`,
  "CLooG-PPL, the Chunky Loop Generator",
);

/**
 * A lightweight IDE for Clojure
 */
export const clooj = mkPackage(
  nixRaw`pkgs.clooj`,
  "A lightweight IDE for Clojure",
);

/**
 * A tool for making JavaScript download and run faster
 */
export const closurecompiler = mkPackage(
  nixRaw`pkgs.closurecompiler`,
  "A tool for making JavaScript download and run faster",
);

/**
 * Rules engine for cloud security, cost optimization, and governance
 */
export const cloud_custodian = mkPackage(
  nixRaw`pkgs.cloud-custodian`,
  "Rules engine for cloud security, cost optimization, and governance",
);

/**
 * Open source Virtual Machine Monitor (VMM) that runs on top of KVM
 */
export const cloud_hypervisor = mkPackage(
  nixRaw`pkgs.cloud-hypervisor`,
  "Open source Virtual Machine Monitor (VMM) that runs on top of KVM",
);

/**
 * Provides configuration and customization of cloud instance
 */
export const cloud_init = mkPackage(
  nixRaw`pkgs.cloud-init`,
  "Provides configuration and customization of cloud instance",
);

/**
 * A tool for cleaning up your cloud accounts by nuking (deleting) all resources within it
 */
export const cloud_nuke = mkPackage(
  nixRaw`pkgs.cloud-nuke`,
  "A tool for cleaning up your cloud accounts by nuking (deleting) all resources within it",
);

export const cloud_utils = mkPackage(
  nixRaw`pkgs.cloud-utils`,
  "",
);

/**
 * Cloud enumeration tool
 */
export const cloudbrute = mkPackage(
  nixRaw`pkgs.cloudbrute`,
  "Cloud enumeration tool",
);

/**
 * 3D point cloud and mesh processing software
 */
export const cloudcompare = mkPackage(
  nixRaw`pkgs.cloudcompare`,
  "3D point cloud and mesh processing software",
);

/**
 * CloudFlare Dynamic DNS client
 */
export const cloudflare_dyndns = mkPackage(
  nixRaw`pkgs.cloudflare-dyndns`,
  "CloudFlare Dynamic DNS client",
);

/**
 * Replaces the connection between your device and the Internet with a modern, optimized, protocol
 */
export const cloudflare_warp = mkPackage(
  nixRaw`pkgs.cloudflare-warp`,
  "Replaces the connection between your device and the Internet with a modern, optimized, protocol",
);

/**
 * Cloudflare Tunnel daemon, Cloudflare Access toolkit, and DNS-over-HTTPS client
 */
export const cloudflared = mkPackage(
  nixRaw`pkgs.cloudflared`,
  "Cloudflare Tunnel daemon, Cloudflare Access toolkit, and DNS-over-HTTPS client",
);

/**
 * The official command line client for Cloud Foundry
 */
export const cloudfoundry_cli = mkPackage(
  nixRaw`pkgs.cloudfoundry-cli`,
  "The official command line client for Cloud Foundry",
);

/**
 * Tool for situational awareness of cloud penetration tests
 */
export const cloudfox = mkPackage(
  nixRaw`pkgs.cloudfox`,
  "Tool for situational awareness of cloud penetration tests",
);

/**
 * Cloud bucket scanner
 */
export const cloudhunter = mkPackage(
  nixRaw`pkgs.cloudhunter`,
  "Cloud bucket scanner",
);

/**
 * Tool for listing assets from multiple cloud providers
 */
export const cloudlist = mkPackage(
  nixRaw`pkgs.cloudlist`,
  "Tool for listing assets from multiple cloud providers",
);

/**
 * Web based amateur radio logging application built using PHP & MySQL
 */
export const cloudlog = mkPackage(
  nixRaw`pkgs.cloudlog`,
  "Web based amateur radio logging application built using PHP & MySQL",
);

/**
 * CLI for Apache CloudStack
 */
export const cloudmonkey = mkPackage(
  nixRaw`pkgs.cloudmonkey`,
  "CLI for Apache CloudStack",
);

/**
 * Cloudsmith Command Line Interface
 */
export const cloudsmith_cli = mkPackage(
  nixRaw`pkgs.cloudsmith-cli`,
  "Cloudsmith Command Line Interface",
);

/**
 * An open-source linear programming solver written in C++
 */
export const clp = mkPackage(
  nixRaw`pkgs.clp`,
  "An open-source linear programming solver written in C++",
);

/**
 * A tool which profiles OpenCL devices to find their peak capacities
 */
export const clpeak = mkPackage(
  nixRaw`pkgs.clpeak`,
  "A tool which profiles OpenCL devices to find their peak capacities",
);

/**
 * Common Lisp Package Manager
 */
export const clpm = mkPackage(
  nixRaw`pkgs.clpm`,
  "Common Lisp Package Manager",
);

/**
 * Resolution-based theorem prover for Coalition Logic implemented in C++
 */
export const clprover = mkPackage(
  nixRaw`pkgs.clprover`,
  "Resolution-based theorem prover for Coalition Logic implemented in C++",
);

/**
 * A command line tool for viewing, creating and updating clubhouse.io stories
 */
export const clubhouse_cli = mkPackage(
  nixRaw`pkgs.clubhouse-cli`,
  "A command line tool for viewing, creating and updating clubhouse.io stories",
);

/**
 * Core library for full-featured text search engine
 */
export const clucene_core = mkPackage(
  nixRaw`pkgs.clucene_core`,
  "Core library for full-featured text search engine",
);

/**
 * Core library for full-featured text search engine
 */
export const clucene_core_1 = mkPackage(
  nixRaw`pkgs.clucene_core_1`,
  "Core library for full-featured text search engine",
);

/**
 * Core library for full-featured text search engine
 */
export const clucene_core_2 = mkPackage(
  nixRaw`pkgs.clucene_core_2`,
  "Core library for full-featured text search engine",
);

/**
 * General purpose multiple sequence alignment program for protein and DNA/RNA
 */
export const clustal_omega = mkPackage(
  nixRaw`pkgs.clustal-omega`,
  "General purpose multiple sequence alignment program for protein and DNA/RNA",
);

/**
 * Kubernetes cluster API tool
 */
export const clusterctl = mkPackage(
  nixRaw`pkgs.clusterctl`,
  "Kubernetes cluster API tool",
);

/**
 * Library for creating fast, dynamic graphical user interfaces
 */
export const clutter = mkPackage(
  nixRaw`pkgs.clutter`,
  "Library for creating fast, dynamic graphical user interfaces",
);

/**
 * GStreamer bindings for clutter
 */
export const clutter_gst = mkPackage(
  nixRaw`pkgs.clutter-gst`,
  "GStreamer bindings for clutter",
);

/**
 * Clutter-GTK
 */
export const clutter_gtk = mkPackage(
  nixRaw`pkgs.clutter-gtk`,
  "Clutter-GTK",
);

/**
 * C language version of lzip
 */
export const clzip = mkPackage(
  nixRaw`pkgs.clzip`,
  "C language version of lzip",
);

/**
 * Fast GF(256) Cauchy MDS Block Erasure Codec in C++
 */
export const cm256cc = mkPackage(
  nixRaw`pkgs.cm256cc`,
  "Fast GF(256) Cauchy MDS Block Erasure Codec in C++",
);

/**
 * Control AMD Wraith Prism RGB LEDs
 */
export const cm_rgb = mkPackage(
  nixRaw`pkgs.cm-rgb`,
  "Control AMD Wraith Prism RGB LEDs",
);

/**
 * Computer Modern Unicode fonts
 */
export const cm_unicode = mkPackage(
  nixRaw`pkgs.cm_unicode`,
  "Computer Modern Unicode fonts",
);

/**
 * Cross-platform, open-source build system generator
 */
export const cmake = mkPackage(
  nixRaw`pkgs.cmake`,
  "Cross-platform, open-source build system generator",
);

/**
 * Cross-platform, open-source build system generator
 */
export const cmakeCurses = mkPackage(
  nixRaw`pkgs.cmakeCurses`,
  "Cross-platform, open-source build system generator",
);

/**
 * Cross-platform, open-source build system generator
 */
export const cmakeMinimal = mkPackage(
  nixRaw`pkgs.cmakeMinimal`,
  "Cross-platform, open-source build system generator",
);

/**
 * Cross-platform, open-source build system generator
 */
export const cmakeWithGui = mkPackage(
  nixRaw`pkgs.cmakeWithGui`,
  "Cross-platform, open-source build system generator",
);

/**
 * Source code formatter for cmake listfiles
 */
export const cmake_format = mkPackage(
  nixRaw`pkgs.cmake-format`,
  "Source code formatter for cmake listfiles",
);

/**
 * CMake LSP Implementation
 */
export const cmake_language_server = mkPackage(
  nixRaw`pkgs.cmake-language-server`,
  "CMake LSP Implementation",
);

/**
 * CommonMark parsing and rendering library and program in C
 */
export const cmark = mkPackage(
  nixRaw`pkgs.cmark`,
  "CommonMark parsing and rendering library and program in C",
);

/**
 * GitHub's fork of cmark, a CommonMark parsing and rendering library and program in C
 */
export const cmark_gfm = mkPackage(
  nixRaw`pkgs.cmark-gfm`,
  "GitHub's fork of cmark, a CommonMark parsing and rendering library and program in C",
);

/**
 * Simulates the falling characters theme from The Matrix movie
 */
export const cmatrix = mkPackage(
  nixRaw`pkgs.cmatrix`,
  "Simulates the falling characters theme from The Matrix movie",
);

/**
 * A CLI tool for managing cert-manager service on Kubernetes clusters
 */
export const cmctl = mkPackage(
  nixRaw`pkgs.cmctl`,
  "A CLI tool for managing cert-manager service on Kubernetes clusters",
);

/**
 * Command-line interface to Stan
 */
export const cmdstan = mkPackage(
  nixRaw`pkgs.cmdstan`,
  "Command-line interface to Stan",
);

/**
 * A tool that supports Japanese incremental search with Romaji
 */
export const cmigemo = mkPackage(
  nixRaw`pkgs.cmigemo`,
  "A tool that supports Japanese incremental search with Romaji",
);

/**
 * Software for solving nonlinear equations and nonlinear least squares problems
 */
export const cminpack = mkPackage(
  nixRaw`pkgs.cminpack`,
  "Software for solving nonlinear equations and nonlinear least squares problems",
);

/**
 * Lightweight library to simplify and generalize unit tests for C
 */
export const cmocka = mkPackage(
  nixRaw`pkgs.cmocka`,
  "Lightweight library to simplify and generalize unit tests for C",
);

/**
 * Decrypt password stored in cmos used to access BIOS SETUP
 */
export const cmospwd = mkPackage(
  nixRaw`pkgs.cmospwd`,
  "Decrypt password stored in cmos used to access BIOS SETUP",
);

/**
 * Intel C for Media Runtime
 */
export const cmrt = mkPackage(
  nixRaw`pkgs.cmrt`,
  "Intel C for Media Runtime",
);

/**
 * QT GUI for Connman with system tray icon
 */
export const cmst = mkPackage(
  nixRaw`pkgs.cmst`,
  "QT GUI for Connman with system tray icon",
);

/**
 * Computer Music Toolkit
 */
export const cmt = mkPackage(
  nixRaw`pkgs.cmt`,
  "Computer Music Toolkit",
);

/**
 * Computational Morphometry Toolkit
 */
export const cmtk = mkPackage(
  nixRaw`pkgs.cmtk`,
  "Computational Morphometry Toolkit",
);

/**
 * The CMU implementation of Common Lisp
 */
export const cmucl_binary = mkPackage(
  nixRaw`pkgs.cmucl_binary`,
  "The CMU implementation of Common Lisp",
);

/**
 * Small, fast and powerful console music player for Linux and *BSD
 */
export const cmus = mkPackage(
  nixRaw`pkgs.cmus`,
  "Small, fast and powerful console music player for Linux and *BSD",
);

/**
 * Last.fm and Libre.fm standalone scrobbler for the cmus music player
 */
export const cmusfm = mkPackage(
  nixRaw`pkgs.cmusfm`,
  "Last.fm and Libre.fm standalone scrobbler for the cmus music player",
);

/**
 * Container Network Interface - networking for Linux containers
 */
export const cni = mkPackage(
  nixRaw`pkgs.cni`,
  "Container Network Interface - networking for Linux containers",
);

/**
 * flannel CNI plugin
 */
export const cni_plugin_flannel = mkPackage(
  nixRaw`pkgs.cni-plugin-flannel`,
  "flannel CNI plugin",
);

/**
 * Some standard networking plugins, maintained by the CNI team
 */
export const cni_plugins = mkPackage(
  nixRaw`pkgs.cni-plugins`,
  "Some standard networking plugins, maintained by the CNI team",
);

/**
 * Canon InkJet printer drivers for many Pixma series printers.
 */
export const cnijfilter2 = mkPackage(
  nixRaw`pkgs.cnijfilter2`,
  "Canon InkJet printer drivers for many Pixma series printers.",
);

/**
 * Canon InkJet printer drivers for the iP5400, MP520, MP210, MP140, iP3500, and MP610 series.  (MP520 drivers also work for MX700.)
 */
export const cnijfilter_2_80 = mkPackage(
  nixRaw`pkgs.cnijfilter_2_80`,
  "Canon InkJet printer drivers for the iP5400, MP520, MP210, MP140, iP3500, and MP610 series.  (MP520 drivers also work for MX700.)",
);

/**
 * Canon InkJet printer drivers for the MG2400 MG2500 MG3500 MG5500 MG6400 MG6500 MG7100 and P200 series
 */
export const cnijfilter_4_00 = mkPackage(
  nixRaw`pkgs.cnijfilter_4_00`,
  "Canon InkJet printer drivers for the MG2400 MG2500 MG3500 MG5500 MG6400 MG6500 MG7100 and P200 series",
);

/**
 * Minimal Graphical IPV4 Ping Tool
 */
export const cnping = mkPackage(
  nixRaw`pkgs.cnping`,
  "Minimal Graphical IPV4 Ping Tool",
);

/**
 * An open source, cloud-native security and policy project
 */
export const cnspec = mkPackage(
  nixRaw`pkgs.cnspec`,
  "An open source, cloud-native security and policy project",
);

/**
 * Chinese font that shows stroke order for HSK 1-4
 */
export const cnstrokeorder = mkPackage(
  nixRaw`pkgs.cnstrokeorder`,
  "Chinese font that shows stroke order for HSK 1-4",
);

/**
 * CLI tool for managing your products from Contabo like VPS and VDS
 */
export const cntb = mkPackage(
  nixRaw`pkgs.cntb`,
  "CLI tool for managing your products from Contabo like VPS and VDS",
);

/**
 * NTLM/NTLMv2 authenticating HTTP proxy
 */
export const cntlm = mkPackage(
  nixRaw`pkgs.cntlm`,
  "NTLM/NTLMv2 authenticating HTTP proxy",
);

/**
 * A container debugging tool based on FUSE
 */
export const cntr = mkPackage(
  nixRaw`pkgs.cntr`,
  "A container debugging tool based on FUSE",
);

/**
 * The C preprocessor chainsaw
 */
export const coan = mkPackage(
  nixRaw`pkgs.coan`,
  "The C preprocessor chainsaw",
);

/**
 * Static site generator written in Rust
 */
export const cobalt = mkPackage(
  nixRaw`pkgs.cobalt`,
  "Static site generator written in Rust",
);

/**
 * A QR code scanner desktop app for Linux
 */
export const cobang = mkPackage(
  nixRaw`pkgs.cobang`,
  "A QR code scanner desktop app for Linux",
);

/**
 * Cobra CLI tool to generate applications and commands
 */
export const cobra_cli = mkPackage(
  nixRaw`pkgs.cobra-cli`,
  "Cobra CLI tool to generate applications and commands",
);

/**
 * Program to apply semantic patches to C code
 */
export const coccinelle = mkPackage(
  nixRaw`pkgs.coccinelle`,
  "Program to apply semantic patches to C code",
);

/**
 * A cross-platform virtual tabletop for multiplayer card games
 */
export const cockatrice = mkPackage(
  nixRaw`pkgs.cockatrice`,
  "A cross-platform virtual tabletop for multiplayer card games",
);

/**
 * Web-based graphical interface for servers
 */
export const cockpit = mkPackage(
  nixRaw`pkgs.cockpit`,
  "Web-based graphical interface for servers",
);

/**
 * A scalable, survivable, strongly-consistent SQL database
 */
export const cockroachdb = mkPackage(
  nixRaw`pkgs.cockroachdb`,
  "A scalable, survivable, strongly-consistent SQL database",
);

/**
 * A scalable, survivable, strongly-consistent SQL database
 */
export const cockroachdb_bin = mkPackage(
  nixRaw`pkgs.cockroachdb-bin`,
  "A scalable, survivable, strongly-consistent SQL database",
);

/**
 * Manages dependencies for your Xcode projects
 */
export const cocoapods = mkPackage(
  nixRaw`pkgs.cocoapods`,
  "Manages dependencies for your Xcode projects",
);

/**
 * Manages dependencies for your Xcode projects
 */
export const cocoapods_beta = mkPackage(
  nixRaw`pkgs.cocoapods-beta`,
  "Manages dependencies for your Xcode projects",
);

/**
 * A set of cli tools for the conventional commit and semver specifications
 */
export const cocogitto = mkPackage(
  nixRaw`pkgs.cocogitto`,
  "A set of cli tools for the conventional commit and semver specifications",
);

/**
 * NTP client
 */
export const cocom = mkPackage(
  nixRaw`pkgs.cocom`,
  "NTP client",
);

/**
 * Simple, elegant, Pythonic functional programming
 */
export const coconut = mkPackage(
  nixRaw`pkgs.coconut`,
  "Simple, elegant, Pythonic functional programming",
);

/**
 * The standard for battery reading since 2005
 */
export const coconutbattery = mkPackage(
  nixRaw`pkgs.coconutbattery`,
  "The standard for battery reading since 2005",
);

/**
 * Tool for generating Bash/Fish/Zsh autocompletions based on `--help` output
 */
export const cod = mkPackage(
  nixRaw`pkgs.cod`,
  "Tool for generating Bash/Fish/Zsh autocompletions based on `--help` output",
);

/**
 * Folding text editor, designed to hierarchically structure any kind of text file and especially source code
 */
export const code_browser_gtk = mkPackage(
  nixRaw`pkgs.code-browser-gtk`,
  "Folding text editor, designed to hierarchically structure any kind of text file and especially source code",
);

/**
 * Folding text editor, designed to hierarchically structure any kind of text file and especially source code
 */
export const code_browser_gtk2 = mkPackage(
  nixRaw`pkgs.code-browser-gtk2`,
  "Folding text editor, designed to hierarchically structure any kind of text file and especially source code",
);

/**
 * Folding text editor, designed to hierarchically structure any kind of text file and especially source code
 */
export const code_browser_qt = mkPackage(
  nixRaw`pkgs.code-browser-qt`,
  "Folding text editor, designed to hierarchically structure any kind of text file and especially source code",
);

/**
 * A command line tool to mine and analyze data from version-control systems
 */
export const code_maat = mkPackage(
  nixRaw`pkgs.code-maat`,
  "A command line tool to mine and analyze data from version-control systems",
);

/**
 * A high performance code minimap render
 */
export const code_minimap = mkPackage(
  nixRaw`pkgs.code-minimap`,
  "A high performance code minimap render",
);

/**
 * Run VS Code on a remote server
 */
export const code_server = mkPackage(
  nixRaw`pkgs.code-server`,
  "Run VS Code on a remote server",
);

/**
 * CLI Tool for Codeberg similar to gh and glab
 */
export const codeberg_cli = mkPackage(
  nixRaw`pkgs.codeberg-cli`,
  "CLI Tool for Codeberg similar to gh and glab",
);

/**
 * Static websites hosting from Gitea repositories
 */
export const codeberg_pages = mkPackage(
  nixRaw`pkgs.codeberg-pages`,
  "Static websites hosting from Gitea repositories",
);

/**
 * The open source, cross platform, free C, C++ and Fortran IDE
 */
export const codeblocks = mkPackage(
  nixRaw`pkgs.codeblocks`,
  "The open source, cross platform, free C, C++ and Fortran IDE",
);

/**
 * The open source, cross platform, free C, C++ and Fortran IDE
 */
export const codeblocksFull = mkPackage(
  nixRaw`pkgs.codeblocksFull`,
  "The open source, cross platform, free C, C++ and Fortran IDE",
);

        /**
         * Live code in Pandoc Markdown.

Codebraid is a Python program that enables executable code in Pandoc
Markdown documents. Using Codebraid can be as simple as adding a class to
your code blocks' attributes, and then running codebraid rather than
pandoc to convert your document from Markdown to another format.
codebraid supports almost all of pandoc's options and passes them to
pandoc internally.

Codebraid provides two options for executing code. It includes a built-in
code execution system that currently supports Python 3.5+, Julia, Rust,
R, Bash, and JavaScript. Code can also be executed using Jupyter kernels,
with support for rich output like plots.

         */
export const codebraid = mkPackage(
  nixRaw`pkgs.codebraid`,
  "Live code in Pandoc Markdown.\n\nCodebraid is a Python program that enables executable code in Pandoc\nMarkdown documents. Using Codebraid can be as simple as adding a class to\nyour code blocks' attributes, and then running codebraid rather than\npandoc to convert your document from Markdown to another format.\ncodebraid supports almost all of pandoc's options and passes them to\npandoc internally.\n\nCodebraid provides two options for executing code. It includes a built-in\ncode execution system that currently supports Python 3.5+, Julia, Rust,\nR, Bash, and JavaScript. Code can also be executed using Jupyter kernels,\nwith support for rich output like plots.\n",
);

/**
 * Speech codec designed for communications quality speech at low data rates
 */
export const codec2 = mkPackage(
  nixRaw`pkgs.codec2`,
  "Speech codec designed for communications quality speech at low data rates",
);

/**
 * Modular audio codec server
 */
export const codecserver = mkPackage(
  nixRaw`pkgs.codecserver`,
  "Modular audio codec server",
);

/**
 * Codeium language server
 */
export const codeium = mkPackage(
  nixRaw`pkgs.codeium`,
  "Codeium language server",
);

/**
 * Create a video of how a git repository's code changes over time
 */
export const codemov = mkPackage(
  nixRaw`pkgs.codemov`,
  "Create a video of how a git repository's code changes over time",
);

/**
 * A CLI and Go library for Github's CODEOWNERS file
 */
export const codeowners = mkPackage(
  nixRaw`pkgs.codeowners`,
  "A CLI and Go library for Github's CODEOWNERS file",
);

/**
 * Semantic code analysis engine
 */
export const codeql = mkPackage(
  nixRaw`pkgs.codeql`,
  "Semantic code analysis engine",
);

/**
 * Provision software development environments via Terraform on Linux, macOS, Windows, X86, ARM, and of course, Kubernetes
 */
export const coder = mkPackage(
  nixRaw`pkgs.coder`,
  "Provision software development environments via Terraform on Linux, macOS, Windows, X86, ARM, and of course, Kubernetes",
);

/**
 * Fast, indexed regexp search over large file trees
 */
export const codesearch = mkPackage(
  nixRaw`pkgs.codesearch`,
  "Fast, indexed regexp search over large file trees",
);

/**
 * Fix common misspellings in source code
 */
export const codespell = mkPackage(
  nixRaw`pkgs.codespell`,
  "Fix common misspellings in source code",
);

/**
 * A command code search tool
 */
export const codespelunker = mkPackage(
  nixRaw`pkgs.codespelunker`,
  "A command code search tool",
);

/**
 * A tool to take all source code in a folder and render them to one image
 */
export const codevis = mkPackage(
  nixRaw`pkgs.codevis`,
  "A tool to take all source code in a folder and render them to one image",
);

/**
 * A high-performance, zero-overhead, extensible Python compiler using LLVM
 */
export const codon = mkPackage(
  nixRaw`pkgs.codon`,
  "A high-performance, zero-overhead, extensible Python compiler using LLVM",
);

/**
 * A visual IDE for React
 */
export const codux = mkPackage(
  nixRaw`pkgs.codux`,
  "A visual IDE for React",
);

/**
 * Tool to automatically coerce a Windows server
 */
export const coercer = mkPackage(
  nixRaw`pkgs.coercer`,
  "Tool to automatically coerce a Windows server",
);

/**
 * A simple async wrapper around CURL for C++
 */
export const coeurl = mkPackage(
  nixRaw`pkgs.coeurl`,
  "A simple async wrapper around CURL for C++",
);

/**
 * A little language that compiles into JavaScript
 */
export const coffeescript = mkPackage(
  nixRaw`pkgs.coffeescript`,
  "A little language that compiles into JavaScript",
);

/**
 * A small single “window” launcher for the WebKit WPE port
 */
export const cog = mkPackage(
  nixRaw`pkgs.cog`,
  "A small single “window” launcher for the WebKit WPE port",
);

/**
 * A small open source library for using 3D graphics hardware for rendering
 */
export const cogl = mkPackage(
  nixRaw`pkgs.cogl`,
  "A small open source library for using 3D graphics hardware for rendering",
);

/**
 * High-level, retained-mode toolkit for effective 3D graphics development
 */
export const coin3d = mkPackage(
  nixRaw`pkgs.coin3d`,
  "High-level, retained-mode toolkit for effective 3D graphics development",
);

/**
 * Collection of classes and helper functions that are generally useful to multiple COIN-OR projects
 */
export const coin_utils = mkPackage(
  nixRaw`pkgs.coin-utils`,
  "Collection of classes and helper functions that are generally useful to multiple COIN-OR projects",
);

/**
 * Live cryptocurrency prices CLI
 */
export const coinlive = mkPackage(
  nixRaw`pkgs.coinlive`,
  "Live cryptocurrency prices CLI",
);

/**
 * The fastest and most interactive terminal based UI application for tracking cryptocurrencies
 */
export const cointop = mkPackage(
  nixRaw`pkgs.cointop`,
  "The fastest and most interactive terminal based UI application for tracking cryptocurrencies",
);

/**
 * A command line interface for Amazon EBS snapshots
 */
export const coldsnap = mkPackage(
  nixRaw`pkgs.coldsnap`,
  "A command line interface for Amazon EBS snapshots",
);

/**
 * A Colemak mod for more comfortable typing
 */
export const colemak_dh = mkPackage(
  nixRaw`pkgs.colemak-dh`,
  "A Colemak mod for more comfortable typing",
);

/**
 * Container runtimes with minimal setup
 */
export const colima = mkPackage(
  nixRaw`pkgs.colima`,
  "Container runtimes with minimal setup",
);

/**
 * Lightweight version of collada-dom, with only the parser.
 */
export const collada_dom = mkPackage(
  nixRaw`pkgs.collada-dom`,
  "Lightweight version of collada-dom, with only the parser.",
);

/**
 * Virtual machine for Collapse OS (Forth operating system)
 */
export const collapseos_cvm = mkPackage(
  nixRaw`pkgs.collapseos-cvm`,
  "Virtual machine for Collapse OS (Forth operating system)",
);

/**
 * Daemon which collects system performance statistics periodically
 */
export const collectd = mkPackage(
  nixRaw`pkgs.collectd`,
  "Daemon which collects system performance statistics periodically",
);

/**
 * Daemon which collects system performance statistics periodically
 */
export const collectd_data = mkPackage(
  nixRaw`pkgs.collectd-data`,
  "Daemon which collects system performance statistics periodically",
);

/**
 * Check hashes for your files
 */
export const collision = mkPackage(
  nixRaw`pkgs.collision`,
  "Check hashes for your files",
);

/**
 * A modern and clean Gtk theme
 */
export const colloid_gtk_theme = mkPackage(
  nixRaw`pkgs.colloid-gtk-theme`,
  "A modern and clean Gtk theme",
);

/**
 * Colloid icon theme
 */
export const colloid_icon_theme = mkPackage(
  nixRaw`pkgs.colloid-icon-theme`,
  "Colloid icon theme",
);

/**
 * A clean and concise theme for KDE Plasma desktop
 */
export const colloid_kde = mkPackage(
  nixRaw`pkgs.colloid-kde`,
  "A clean and concise theme for KDE Plasma desktop",
);

/**
 * A programming language for the analysis and transformation of computer languages
 */
export const colm = mkPackage(
  nixRaw`pkgs.colm`,
  "A programming language for the analysis and transformation of computer languages",
);

/**
 * COLMAP - Structure-From-Motion and Multi-View Stereo pipeline
 */
export const colmap = mkPackage(
  nixRaw`pkgs.colmap`,
  "COLMAP - Structure-From-Motion and Multi-View Stereo pipeline",
);

/**
 * COLMAP - Structure-From-Motion and Multi-View Stereo pipeline
 */
export const colmapWithCuda = mkPackage(
  nixRaw`pkgs.colmapWithCuda`,
  "COLMAP - Structure-From-Motion and Multi-View Stereo pipeline",
);

/**
 * A simple, stateless NixOS deployment tool
 */
export const colmena = mkPackage(
  nixRaw`pkgs.colmena`,
  "A simple, stateless NixOS deployment tool",
);

/**
 * Colobot: Gold Edition is a real-time strategy game, where you can program your bots
 */
export const colobot = mkPackage(
  nixRaw`pkgs.colobot`,
  "Colobot: Gold Edition is a real-time strategy game, where you can program your bots",
);

/**
 * Placement library for electronic circuits
 */
export const coloquinte = mkPackage(
  nixRaw`pkgs.coloquinte`,
  "Placement library for electronic circuits",
);

/**
 * System service to manage, install and generate color profiles to accurately color manage input and output devices
 */
export const colord = mkPackage(
  nixRaw`pkgs.colord`,
  "System service to manage, install and generate color profiles to accurately color manage input and output devices",
);

export const colord_gtk = mkPackage(
  nixRaw`pkgs.colord-gtk`,
  "",
);

export const colord_gtk4 = mkPackage(
  nixRaw`pkgs.colord-gtk4`,
  "",
);

/**
 * Wrapper for 'diff' that produces the same output but with pretty 'syntax' highlighting
 */
export const colordiff = mkPackage(
  nixRaw`pkgs.colordiff`,
  "Wrapper for 'diff' that produces the same output but with pretty 'syntax' highlighting",
);

/**
 * Colored stream handler for Python's logging module
 */
export const coloredlogs = mkPackage(
  nixRaw`pkgs.coloredlogs`,
  "Colored stream handler for Python's logging module",
);

/**
 * Tools for logs with ANSI color
 */
export const colorized_logs = mkPackage(
  nixRaw`pkgs.colorized-logs`,
  "Tools for logs with ANSI color",
);

/**
 * Enable colorised command output and pipe it to less
 */
export const colorless = mkPackage(
  nixRaw`pkgs.colorless`,
  "Enable colorised command output and pipe it to less",
);

/**
 * Prettified LS
 */
export const colorls = mkPackage(
  nixRaw`pkgs.colorls`,
  "Prettified LS",
);

/**
 * Simple wrapper around make to colorize the output
 */
export const colormake = mkPackage(
  nixRaw`pkgs.colormake`,
  "Simple wrapper around make to colorize the output",
);

/**
 * Panes in the 8 bright terminal colors with shadows of the respective darker color
 */
export const colorpanes = mkPackage(
  nixRaw`pkgs.colorpanes`,
  "Panes in the 8 bright terminal colors with shadows of the respective darker color",
);

/**
 * Click on a pixel on your screen and print its color value in RGB
 */
export const colorpicker = mkPackage(
  nixRaw`pkgs.colorpicker`,
  "Click on a pixel on your screen and print its color value in RGB",
);

/**
 * A color theme generator for editors and terminal emulators
 */
export const colorstorm = mkPackage(
  nixRaw`pkgs.colorstorm`,
  "A color theme generator for editors and terminal emulators",
);

/**
 * A program for 'tinting' color values
 */
export const colort = mkPackage(
  nixRaw`pkgs.colort`,
  "A program for 'tinting' color values",
);

/**
 * Color scheme generator
 */
export const colorz = mkPackage(
  nixRaw`pkgs.colorz`,
  "Color scheme generator",
);

/**
 * Colourise your checksum output
 */
export const coloursum = mkPackage(
  nixRaw`pkgs.coloursum`,
  "Colourise your checksum output",
);

    /**
     * A package comprising of implementations of algorithms for
vertex coloring and derivative computation
     */
export const colpack = mkPackage(
  nixRaw`pkgs.colpack`,
  "A package comprising of implementations of algorithms for\n    vertex coloring and derivative computation",
);

/**
 * A music calculation library/CLI
 */
export const coltrane = mkPackage(
  nixRaw`pkgs.coltrane`,
  "A music calculation library/CLI",
);

/**
 * Data for Combinatorial Designs
 */
export const combinatorial_designs = mkPackage(
  nixRaw`pkgs.combinatorial_designs`,
  "Data for Combinatorial Designs",
);

/**
 * Tool for searching and changing code structure
 */
export const comby = mkPackage(
  nixRaw`pkgs.comby`,
  "Tool for searching and changing code structure",
);

/**
 * The Linux Control and Measurement Device Interface Library
 */
export const comedilib = mkPackage(
  nixRaw`pkgs.comedilib`,
  "The Linux Control and Measurement Device Interface Library",
);

/**
 * A clean and modern font suitable for headings and logos
 */
export const comfortaa = mkPackage(
  nixRaw`pkgs.comfortaa`,
  "A clean and modern font suitable for headings and logos",
);

/**
 * Comic/manga/webtoon downloader and CBZ/EPUB/MOBI/PDF converter
 */
export const comic_mandown = mkPackage(
  nixRaw`pkgs.comic-mandown`,
  "Comic/manga/webtoon downloader and CBZ/EPUB/MOBI/PDF converter",
);

/**
 * A legible monospace font that looks like Comic Sans
 */
export const comic_mono = mkPackage(
  nixRaw`pkgs.comic-mono`,
  "A legible monospace font that looks like Comic Sans",
);

/**
 * A casual type face: Make your lemonade stand look like a fortune 500 company
 */
export const comic_neue = mkPackage(
  nixRaw`pkgs.comic-neue`,
  "A casual type face: Make your lemonade stand look like a fortune 500 company",
);

/**
 * A font metric-compatible with Microsoft Comic Sans
 */
export const comic_relief = mkPackage(
  nixRaw`pkgs.comic-relief`,
  "A font metric-compatible with Microsoft Comic Sans",
);

/**
 * Viewer of CBR and CBZ files, often used to store scanned comics
 */
export const comical = mkPackage(
  nixRaw`pkgs.comical`,
  "Viewer of CBR and CBZ files, often used to store scanned comics",
);

/**
 * The Comix Cursors mouse themes
 */
export const comixcursors = mkPackage(
  nixRaw`pkgs.comixcursors`,
  "The Comix Cursors mouse themes",
);

/**
 * Runs programs without installing them
 */
export const comma = mkPackage(
  nixRaw`pkgs.comma`,
  "Runs programs without installing them",
);

/**
 * Modern Interpreter for the Commander Keen Games
 */
export const commandergenius = mkPackage(
  nixRaw`pkgs.commandergenius`,
  "Modern Interpreter for the Commander Keen Games",
);

/**
 * A CLI tool to help you write git commit
 */
export const commit_formatter = mkPackage(
  nixRaw`pkgs.commit-formatter`,
  "A CLI tool to help you write git commit",
);

/**
 * An anonymous and neutral programming typeface focused on creating a better reading experience
 */
export const commit_mono = mkPackage(
  nixRaw`pkgs.commit-mono`,
  "An anonymous and neutral programming typeface focused on creating a better reading experience",
);

/**
 * Tool to create committing rules for projects, auto bump versions, and generate changelogs
 */
export const commitizen = mkPackage(
  nixRaw`pkgs.commitizen`,
  "Tool to create committing rules for projects, auto bump versions, and generate changelogs",
);

/**
 * Lint your commit messages
 */
export const commitlint = mkPackage(
  nixRaw`pkgs.commitlint`,
  "Lint your commit messages",
);

/**
 * Automated Command Injection Exploitation Tool
 */
export const commix = mkPackage(
  nixRaw`pkgs.commix`,
  "Automated Command Injection Exploitation Tool",
);

/**
 * common-licenses extracted from debian base-files package
 */
export const common_licenses = mkPackage(
  nixRaw`pkgs.common-licenses`,
  "common-licenses extracted from debian base-files package",
);

export const common_updater_scripts = mkPackage(
  nixRaw`pkgs.common-updater-scripts`,
  "",
);

/**
 * Gives users a convenient way to analyze, create, and manipulate (binary) Java class files
 */
export const commonsBcel = mkPackage(
  nixRaw`pkgs.commonsBcel`,
  "Gives users a convenient way to analyze, create, and manipulate (binary) Java class files",
);

/**
 * Interface to scripting languages, including JSR-223
 */
export const commonsBsf = mkPackage(
  nixRaw`pkgs.commonsBsf`,
  "Interface to scripting languages, including JSR-223",
);

/**
 * Allows manipulation of ar, cpio, Unix dump, tar, zip, gzip, XZ, Pack200, bzip2, 7z, arj, lzma, snappy, DEFLATE and Z files
 */
export const commonsCompress = mkPackage(
  nixRaw`pkgs.commonsCompress`,
  "Allows manipulation of ar, cpio, Unix dump, tar, zip, gzip, XZ, Pack200, bzip2, 7z, arj, lzma, snappy, DEFLATE and Z files",
);

/**
 * Apache Commons Daemon software is a set of utilities and Java support classes for running Java applications as server processes.
 */
export const commonsDaemon = mkPackage(
  nixRaw`pkgs.commonsDaemon`,
  "Apache Commons Daemon software is a set of utilities and Java support classes for running Java applications as server processes.",
);

/**
 * Makes it easy to add robust, high-performance, file upload capability to your servlets and web applications
 */
export const commonsFileUpload = mkPackage(
  nixRaw`pkgs.commonsFileUpload`,
  "Makes it easy to add robust, high-performance, file upload capability to your servlets and web applications",
);

/**
 * A library of utilities to assist with developing IO functionality
 */
export const commonsIo = mkPackage(
  nixRaw`pkgs.commonsIo`,
  "A library of utilities to assist with developing IO functionality",
);

/**
 * Provides additional methods to manipulate standard Java library classes
 */
export const commonsLang = mkPackage(
  nixRaw`pkgs.commonsLang`,
  "Provides additional methods to manipulate standard Java library classes",
);

/**
 * Wrapper around a variety of logging API implementations
 */
export const commonsLogging = mkPackage(
  nixRaw`pkgs.commonsLogging`,
  "Wrapper around a variety of logging API implementations",
);

/**
 * A library of lightweight, self-contained mathematics and statistics components
 */
export const commonsMath = mkPackage(
  nixRaw`pkgs.commonsMath`,
  "A library of lightweight, self-contained mathematics and statistics components",
);

/**
 * A simple and elegant cross-platform IRC client
 */
export const communi = mkPackage(
  nixRaw`pkgs.communi`,
  "A simple and elegant cross-platform IRC client",
);

/**
 * CLI to manage your time.
 */
export const comodoro = mkPackage(
  nixRaw`pkgs.comodoro`,
  "CLI to manage your time.",
);

/**
 * Tools to capture DNS traffic and record it in C-DNS files
 */
export const compactor = mkPackage(
  nixRaw`pkgs.compactor`,
  "Tools to capture DNS traffic and record it in C-DNS files",
);

/**
 * Stylesheet Authoring Environment that makes your website design simpler to implement and easier to maintain
 */
export const compass = mkPackage(
  nixRaw`pkgs.compass`,
  "Stylesheet Authoring Environment that makes your website design simpler to implement and easier to maintain",
);

/**
 * Formally verified C compiler
 */
export const compcert = mkPackage(
  nixRaw`pkgs.compcert`,
  "Formally verified C compiler",
);

/**
 * Command line tool to manipulate compilation databases
 */
export const compdb = mkPackage(
  nixRaw`pkgs.compdb`,
  "Command line tool to manipulate compilation databases",
);

/**
 * Very simple compile daemon for Go
 */
export const compile_daemon = mkPackage(
  nixRaw`pkgs.compile-daemon`,
  "Very simple compile daemon for Go",
);

/**
 * Automagical shell alias completion
 */
export const complete_alias = mkPackage(
  nixRaw`pkgs.complete-alias`,
  "Automagical shell alias completion",
);

/**
 * Generate bash completion scripts using a simple configuration file
 */
export const completely = mkPackage(
  nixRaw`pkgs.completely`,
  "Generate bash completion scripts using a simple configuration file",
);

/**
 * C code complexity measurement tool
 */
export const complexity = mkPackage(
  nixRaw`pkgs.complexity`,
  "C code complexity measurement tool",
);

/**
 * Generate {bash,fish,zsh} completions from a single EBNF-like grammar
 */
export const complgen = mkPackage(
  nixRaw`pkgs.complgen`,
  "Generate {bash,fish,zsh} completions from a single EBNF-like grammar",
);

/**
 * A file system for mounting container images
 */
export const composefs = mkPackage(
  nixRaw`pkgs.composefs`,
  "A file system for mounting container images",
);

/**
 * btrfs: Find compression type/ratio on a file or set of files
 */
export const compsize = mkPackage(
  nixRaw`pkgs.compsize`,
  "btrfs: Find compression type/ratio on a file or set of files",
);

/**
 * Accelerate Complex C++ Applications on Heterogeneous Compute Systems using Open Standards (wrapper script)
 */
export const computecpp = mkPackage(
  nixRaw`pkgs.computecpp`,
  "Accelerate Complex C++ Applications on Heterogeneous Compute Systems using Open Standards (wrapper script)",
);

/**
 * Accelerate Complex C++ Applications on Heterogeneous Compute Systems using Open Standards
 */
export const computecpp_unwrapped = mkPackage(
  nixRaw`pkgs.computecpp-unwrapped`,
  "Accelerate Complex C++ Applications on Heterogeneous Compute Systems using Open Standards",
);

/**
 * A CommonMark-compatible GitHub Flavored Markdown parser and formatter
 */
export const comrak = mkPackage(
  nixRaw`pkgs.comrak`,
  "A CommonMark-compatible GitHub Flavored Markdown parser and formatter",
);

/**
 * Decentralized and portable C/C++ package manager
 */
export const conan = mkPackage(
  nixRaw`pkgs.conan`,
  "Decentralized and portable C/C++ package manager",
);

/**
 * A trash collector written in Rust
 */
export const conceal = mkPackage(
  nixRaw`pkgs.conceal`,
  "A trash collector written in Rust",
);

/**
 * Run commands concurrently
 */
export const concurrently = mkPackage(
  nixRaw`pkgs.concurrently`,
  "Run commands concurrently",
);

/**
 * Conda is a package manager for Python
 */
export const conda = mkPackage(
  nixRaw`pkgs.conda`,
  "Conda is a package manager for Python",
);

/**
 * Apache Kafka Desktop Client
 */
export const conduktor = mkPackage(
  nixRaw`pkgs.conduktor`,
  "Apache Kafka Desktop Client",
);

/**
 * Cone Programming Language
 */
export const cone = mkPackage(
  nixRaw`pkgs.cone`,
  "Cone Programming Language",
);

/**
 * Offline conference schedule viewer
 */
export const confclerk = mkPackage(
  nixRaw`pkgs.confclerk`,
  "Offline conference schedule viewer",
);

/**
 * Manage local application configuration files using templates and data from etcd or consul
 */
export const confd = mkPackage(
  nixRaw`pkgs.confd`,
  "Manage local application configuration files using templates and data from etcd or consul",
);

/**
 * Cloud native networking and network security
 */
export const confd_calico = mkPackage(
  nixRaw`pkgs.confd-calico`,
  "Cloud native networking and network security",
);

/**
 * Confetti in your TTY
 */
export const confetty = mkPackage(
  nixRaw`pkgs.confetty`,
  "Confetti in your TTY",
);

/**
 * A configurable-on-the-fly HTTP Proxy
 */
export const configurable_http_proxy = mkPackage(
  nixRaw`pkgs.configurable-http-proxy`,
  "A configurable-on-the-fly HTTP Proxy",
);

/**
 * Honeypot for the Atlassian Confluence OGNL injection vulnerability
 */
export const confluencepot = mkPackage(
  nixRaw`pkgs.confluencepot`,
  "Honeypot for the Atlassian Confluence OGNL injection vulnerability",
);

/**
 * Confluent CLI
 */
export const confluent_cli = mkPackage(
  nixRaw`pkgs.confluent-cli`,
  "Confluent CLI",
);

/**
 * Confluent event streaming platform based on Apache Kafka
 */
export const confluent_platform = mkPackage(
  nixRaw`pkgs.confluent-platform`,
  "Confluent event streaming platform based on Apache Kafka",
);

/**
 * Policy enforcement for your pipelines
 */
export const conform = mkPackage(
  nixRaw`pkgs.conform`,
  "Policy enforcement for your pipelines",
);

/**
 * Write tests against structured configuration data
 */
export const conftest = mkPackage(
  nixRaw`pkgs.conftest`,
  "Write tests against structured configuration data",
);

/**
 * Conferences schedule viewer
 */
export const confy = mkPackage(
  nixRaw`pkgs.confy`,
  "Conferences schedule viewer",
);

/**
 * More command-line utilities for working with MINC files
 */
export const conglomerate = mkPackage(
  nixRaw`pkgs.conglomerate`,
  "More command-line utilities for working with MINC files",
);

/**
 * Magically transform your images
 */
export const conjure = mkPackage(
  nixRaw`pkgs.conjure`,
  "Magically transform your images",
);

/**
 * Advanced, highly configurable system monitor based on torsmo
 */
export const conky = mkPackage(
  nixRaw`pkgs.conky`,
  "Advanced, highly configurable system monitor based on torsmo",
);

/**
 * An OCI container runtime monitor
 */
export const conmon = mkPackage(
  nixRaw`pkgs.conmon`,
  "An OCI container runtime monitor",
);

/**
 * An OCI container runtime monitor written in Rust
 */
export const conmon_rs = mkPackage(
  nixRaw`pkgs.conmon-rs`,
  "An OCI container runtime monitor written in Rust",
);

/**
 * Make network connection via SOCKS and https proxy
 */
export const connect = mkPackage(
  nixRaw`pkgs.connect`,
  "Make network connection via SOCKS and https proxy",
);

/**
 * A daemon for managing internet connections
 */
export const connman = mkPackage(
  nixRaw`pkgs.connman`,
  "A daemon for managing internet connections",
);

/**
 * A daemon for managing internet connections
 */
export const connmanFull = mkPackage(
  nixRaw`pkgs.connmanFull`,
  "A daemon for managing internet connections",
);

/**
 * A daemon for managing internet connections
 */
export const connmanMinimal = mkPackage(
  nixRaw`pkgs.connmanMinimal`,
  "A daemon for managing internet connections",
);

/**
 * A dmenu wrapper for connmann
 */
export const connman_dmenu = mkPackage(
  nixRaw`pkgs.connman_dmenu`,
  "A dmenu wrapper for connmann",
);

/**
 * GTK GUI for Connman
 */
export const connman_gtk = mkPackage(
  nixRaw`pkgs.connman-gtk`,
  "GTK GUI for Connman",
);

/**
 * Simple ncurses UI for connman
 */
export const connman_ncurses = mkPackage(
  nixRaw`pkgs.connman-ncurses`,
  "Simple ncurses UI for connman",
);

/**
 * Desktop notification integration for connman
 */
export const connman_notify = mkPackage(
  nixRaw`pkgs.connman-notify`,
  "Desktop notification integration for connman",
);

/**
 * Connection tracking userspace tools
 */
export const conntrack_tools = mkPackage(
  nixRaw`pkgs.conntrack-tools`,
  "Connection tracking userspace tools",
);

/**
 * Robust portable backup tool in Rust
 */
export const conserve = mkPackage(
  nixRaw`pkgs.conserve`,
  "Robust portable backup tool in Rust",
);

/**
 * An application that allows multiple users to watch a serial console at the same time
 */
export const conserver = mkPackage(
  nixRaw`pkgs.conserver`,
  "An application that allows multiple users to watch a serial console at the same time",
);

/**
 * A ROS-independent package for logging that seamlessly pipes into rosconsole/rosout for ROS-dependent packages
 */
export const console_bridge = mkPackage(
  nixRaw`pkgs.console-bridge`,
  "A ROS-independent package for logging that seamlessly pipes into rosconsole/rosout for ROS-dependent packages",
);

/**
 * Linux text console viewer
 */
export const conspy = mkPackage(
  nixRaw`pkgs.conspy`,
  "Linux text console viewer",
);

/**
 * Masses and springs simulation game
 */
export const construo = mkPackage(
  nixRaw`pkgs.construo`,
  "Masses and springs simulation game",
);

/**
 * Masses and springs simulation game
 */
export const construoBase = mkPackage(
  nixRaw`pkgs.construoBase`,
  "Masses and springs simulation game",
);

/**
 * Tool for service discovery, monitoring and configuration
 */
export const consul = mkPackage(
  nixRaw`pkgs.consul`,
  "Tool for service discovery, monitoring and configuration",
);

/**
 * An extendable open source continuous integration server
 */
export const consul_alerts = mkPackage(
  nixRaw`pkgs.consul-alerts`,
  "An extendable open source continuous integration server",
);

/**
 * Generic template rendering and notifications with Consul
 */
export const consul_template = mkPackage(
  nixRaw`pkgs.consul-template`,
  "Generic template rendering and notifications with Consul",
);

/**
 * Access contacts from the Mac address book from command-line
 */
export const contacts = mkPackage(
  nixRaw`pkgs.contacts`,
  "Access contacts from the Mac address book from command-line",
);

/**
 * Container to WASM converter
 */
export const container2wasm = mkPackage(
  nixRaw`pkgs.container2wasm`,
  "Container to WASM converter",
);

/**
 * A daemon to control runC
 */
export const containerd = mkPackage(
  nixRaw`pkgs.containerd`,
  "A daemon to control runC",
);

/**
 * Container-based networking lab
 */
export const containerlab = mkPackage(
  nixRaw`pkgs.containerlab`,
  "Container-based networking lab",
);

/**
 * An application centric micro-orchestrator.
 */
export const containerpilot = mkPackage(
  nixRaw`pkgs.containerpilot`,
  "An application centric micro-orchestrator.",
);

/**
 * Modern C++ Terminal Emulator
 */
export const contour = mkPackage(
  nixRaw`pkgs.contour`,
  "Modern C++ Terminal Emulator",
);

/**
 * Checks whether the contrast between two colors meet the WCAG requirements
 */
export const contrast = mkPackage(
  nixRaw`pkgs.contrast`,
  "Checks whether the contrast between two colors meet the WCAG requirements",
);

/**
 * Control Roku devices from the comfort of your own desktop
 */
export const controku = mkPackage(
  nixRaw`pkgs.controku`,
  "Control Roku devices from the comfort of your own desktop",
);

/**
 * Converts files to other formats
 */
export const convbin = mkPackage(
  nixRaw`pkgs.convbin`,
  "Converts files to other formats",
);

/**
 * Bitmap generation from a single example with convolutions and MCMC
 */
export const convchain = mkPackage(
  nixRaw`pkgs.convchain`,
  "Bitmap generation from a single example with convolutions and MCMC",
);

/**
 * A Conventional commit cli
 */
export const convco = mkPackage(
  nixRaw`pkgs.convco`,
  "A Conventional commit cli",
);

/**
 * Graphical unit converter
 */
export const convertall = mkPackage(
  nixRaw`pkgs.convertall`,
  "Graphical unit converter",
);

/**
 * A tool for converting Microsoft Reader ebooks to more open formats
 */
export const convertlit = mkPackage(
  nixRaw`pkgs.convertlit`,
  "A tool for converting Microsoft Reader ebooks to more open formats",
);

/**
 * Converts font for use with FontLibC
 */
export const convfont = mkPackage(
  nixRaw`pkgs.convfont`,
  "Converts font for use with FontLibC",
);

/**
 * Image palette quantization
 */
export const convimg = mkPackage(
  nixRaw`pkgs.convimg`,
  "Image palette quantization",
);

/**
 * Converts filenames from one encoding to another
 */
export const convmv = mkPackage(
  nixRaw`pkgs.convmv`,
  "Converts filenames from one encoding to another",
);

/**
 * Convos is the simplest way to use IRC in your browser
 */
export const convos = mkPackage(
  nixRaw`pkgs.convos`,
  "Convos is the simplest way to use IRC in your browser",
);

/**
 * A Docker volume plugin, managing persistent container volumes
 */
export const convoy = mkPackage(
  nixRaw`pkgs.convoy`,
  "A Docker volume plugin, managing persistent container volumes",
);

/**
 * Contains a small database of Conway polynomials
 */
export const conway_polynomials = mkPackage(
  nixRaw`pkgs.conway_polynomials`,
  "Contains a small database of Conway polynomials",
);

/**
 * A command-line utility that creates projects from project templates
 */
export const cookiecutter = mkPackage(
  nixRaw`pkgs.cookiecutter`,
  "A command-line utility that creates projects from project templates",
);

/**
 * Terminal emulator which mimics the old cathode display
 */
export const cool_retro_term = mkPackage(
  nixRaw`pkgs.cool-retro-term`,
  "Terminal emulator which mimics the old cathode display",
);

/**
 * Cross platform open source e-book reader
 */
export const coolreader = mkPackage(
  nixRaw`pkgs.coolreader`,
  "Cross platform open source e-book reader",
);

/**
 * A contemporary sans serif, with characters composed of modified-geometric curves and arches
 */
export const cooper_hewitt = mkPackage(
  nixRaw`pkgs.cooper-hewitt`,
  "A contemporary sans serif, with characters composed of modified-geometric curves and arches",
);

/**
 * Schrodinger-developed 2D Coordinate Generation
 */
export const coordgenlibs = mkPackage(
  nixRaw`pkgs.coordgenlibs`,
  "Schrodinger-developed 2D Coordinate Generation",
);

/**
 * A tiny boost library in C++11
 */
export const coost = mkPackage(
  nixRaw`pkgs.coost`,
  "A tiny boost library in C++11",
);

/**
 * A colourful wrapper for terminal programs
 */
export const cope = mkPackage(
  nixRaw`pkgs.cope`,
  "A colourful wrapper for terminal programs",
);

/**
 * Library and command-line utility for rendering projects templates
 */
export const copier = mkPackage(
  nixRaw`pkgs.copier`,
  "Library and command-line utility for rendering projects templates",
);

/**
 * Build, Release and Operate Containerized Applications on AWS.
 */
export const copilot_cli = mkPackage(
  nixRaw`pkgs.copilot-cli`,
  "Build, Release and Operate Containerized Applications on AWS.",
);

export const copyDesktopItems = mkPackage(
  nixRaw`pkgs.copyDesktopItems`,
  "",
);

export const copyPkgconfigItems = mkPackage(
  nixRaw`pkgs.copyPkgconfigItems`,
  "",
);

/**
 * Clipboard Manager with Advanced Features
 */
export const copyq = mkPackage(
  nixRaw`pkgs.copyq`,
  "Clipboard Manager with Advanced Features",
);

/**
 * Updates the copyright information in a set of files
 */
export const copyright_update = mkPackage(
  nixRaw`pkgs.copyright-update`,
  "Updates the copyright information in a set of files",
);

/**
 * Coq proof assistant
 */
export const coq = mkPackage(
  nixRaw`pkgs.coq`,
  "Coq proof assistant",
);

/**
 * HTML documentation generator for Coq source files
 */
export const coq2html = mkPackage(
  nixRaw`pkgs.coq2html`,
  "HTML documentation generator for Coq source files",
);

/**
 * Coq proof assistant
 */
export const coq_8_10 = mkPackage(
  nixRaw`pkgs.coq_8_10`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_11 = mkPackage(
  nixRaw`pkgs.coq_8_11`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_12 = mkPackage(
  nixRaw`pkgs.coq_8_12`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_13 = mkPackage(
  nixRaw`pkgs.coq_8_13`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_14 = mkPackage(
  nixRaw`pkgs.coq_8_14`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_15 = mkPackage(
  nixRaw`pkgs.coq_8_15`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_16 = mkPackage(
  nixRaw`pkgs.coq_8_16`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_17 = mkPackage(
  nixRaw`pkgs.coq_8_17`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_18 = mkPackage(
  nixRaw`pkgs.coq_8_18`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_5 = mkPackage(
  nixRaw`pkgs.coq_8_5`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_6 = mkPackage(
  nixRaw`pkgs.coq_8_6`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_7 = mkPackage(
  nixRaw`pkgs.coq_8_7`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_8 = mkPackage(
  nixRaw`pkgs.coq_8_8`,
  "Coq proof assistant",
);

/**
 * Coq proof assistant
 */
export const coq_8_9 = mkPackage(
  nixRaw`pkgs.coq_8_9`,
  "Coq proof assistant",
);

/**
 * Discord terminal client
 */
export const cordless = mkPackage(
  nixRaw`pkgs.cordless`,
  "Discord terminal client",
);

/**
 * Build native mobile applications using HTML, CSS and JavaScript
 */
export const cordova = mkPackage(
  nixRaw`pkgs.cordova`,
  "Build native mobile applications using HTML, CSS and JavaScript",
);

/**
 * A simple GUI to change settings in Coreboot's CBFS
 */
export const coreboot_configurator = mkPackage(
  nixRaw`pkgs.coreboot-configurator`,
  "A simple GUI to change settings in Coreboot's CBFS",
);

/**
 * Various coreboot-related tools
 */
export const coreboot_utils = mkPackage(
  nixRaw`pkgs.coreboot-utils`,
  "Various coreboot-related tools",
);

/**
 * Control your computer hardware via application profiles
 */
export const corectrl = mkPackage(
  nixRaw`pkgs.corectrl`,
  "Control your computer hardware via application profiles",
);

/**
 * A DNS server that runs middleware
 */
export const coredns = mkPackage(
  nixRaw`pkgs.coredns`,
  "A DNS server that runs middleware",
);

/**
 * Microsoft's TrueType core fonts for the Web
 */
export const corefonts = mkPackage(
  nixRaw`pkgs.corefonts`,
  "Microsoft's TrueType core fonts for the Web",
);

/**
 * Wrappers for npm, pnpm and Yarn via Node.js Corepack
 */
export const corepack = mkPackage(
  nixRaw`pkgs.corepack`,
  "Wrappers for npm, pnpm and Yarn via Node.js Corepack",
);

/**
 * Wrappers for npm, pnpm and Yarn via Node.js Corepack
 */
export const corepack_18 = mkPackage(
  nixRaw`pkgs.corepack_18`,
  "Wrappers for npm, pnpm and Yarn via Node.js Corepack",
);

/**
 * Wrappers for npm, pnpm and Yarn via Node.js Corepack
 */
export const corepack_20 = mkPackage(
  nixRaw`pkgs.corepack_20`,
  "Wrappers for npm, pnpm and Yarn via Node.js Corepack",
);

/**
 * Wrappers for npm, pnpm and Yarn via Node.js Corepack
 */
export const corepack_21 = mkPackage(
  nixRaw`pkgs.corepack_21`,
  "Wrappers for npm, pnpm and Yarn via Node.js Corepack",
);

/**
 * Wrappers for npm, pnpm and Yarn via Node.js Corepack
 */
export const corepack_latest = mkPackage(
  nixRaw`pkgs.corepack_latest`,
  "Wrappers for npm, pnpm and Yarn via Node.js Corepack",
);

/**
 * Extensible and observable IPv6 NDP RA daemon
 */
export const corerad = mkPackage(
  nixRaw`pkgs.corerad`,
  "Extensible and observable IPv6 NDP RA daemon",
);

/**
 * Code and wrapper to extract Ethereum blockchain functionalities without network/consensus, for building custom blockchain services
 */
export const coreth = mkPackage(
  nixRaw`pkgs.coreth`,
  "Code and wrapper to extract Ethereum blockchain functionalities without network/consensus, for building custom blockchain services",
);

/**
 * The GNU Core Utilities
 */
export const coreutils = mkPackage(
  nixRaw`pkgs.coreutils`,
  "The GNU Core Utilities",
);

/**
 * The GNU Core Utilities
 */
export const coreutils_full = mkPackage(
  nixRaw`pkgs.coreutils-full`,
  "The GNU Core Utilities",
);

/**
 * The GNU Core Utilities
 */
export const coreutils_prefixed = mkPackage(
  nixRaw`pkgs.coreutils-prefixed`,
  "The GNU Core Utilities",
);

/**
 * GUI for controlling a Digital Camera through the IEEE1394 bus
 */
export const coriander = mkPackage(
  nixRaw`pkgs.coriander`,
  "GUI for controlling a Digital Camera through the IEEE1394 bus",
);

/**
 * A tool for tunneling SSH through HTTP proxies
 */
export const corkscrew = mkPackage(
  nixRaw`pkgs.corkscrew`,
  "A tool for tunneling SSH through HTTP proxies",
);

/**
 * A Group Communication System with features for implementing high availability within applications
 */
export const corosync = mkPackage(
  nixRaw`pkgs.corosync`,
  "A Group Communication System with features for implementing high availability within applications",
);

/**
 * Tool for integrating Rust into an existing CMake project
 */
export const corrosion = mkPackage(
  nixRaw`pkgs.corrosion`,
  "Tool for integrating Rust into an existing CMake project",
);

/**
 * Render wave files into oscilloscope views, featuring advanced correlation-based triggering algorithm
 */
export const corrscope = mkPackage(
  nixRaw`pkgs.corrscope`,
  "Render wave files into oscilloscope views, featuring advanced correlation-based triggering algorithm",
);

/**
 * Python module to check for Cross-Origin Resource Sharing (CORS) misconfigurations
 */
export const corsair = mkPackage(
  nixRaw`pkgs.corsair`,
  "Python module to check for Cross-Origin Resource Sharing (CORS) misconfigurations",
);

/**
 * A reimplementation of the 1997 Bullfrog business sim Theme Hospital.
 */
export const corsix_th = mkPackage(
  nixRaw`pkgs.corsix-th`,
  "A reimplementation of the 1997 Bullfrog business sim Theme Hospital.",
);

/**
 * Tool and libraries for maintaining Ruby gems
 */
export const corundum = mkPackage(
  nixRaw`pkgs.corundum`,
  "Tool and libraries for maintaining Ruby gems",
);

/**
 * Container Signing CLI with support for ephemeral keys and Sigstore signing
 */
export const cosign = mkPackage(
  nixRaw`pkgs.cosign`,
  "Container Signing CLI with support for ephemeral keys and Sigstore signing",
);

/**
 * Applets for the COSMIC Desktop Environment
 */
export const cosmic_applets = mkPackage(
  nixRaw`pkgs.cosmic-applets`,
  "Applets for the COSMIC Desktop Environment",
);

/**
 * Compositor for the COSMIC Desktop Environment
 */
export const cosmic_comp = mkPackage(
  nixRaw`pkgs.cosmic-comp`,
  "Compositor for the COSMIC Desktop Environment",
);

/**
 * Panel for the COSMIC Desktop Environment
 */
export const cosmic_panel = mkPackage(
  nixRaw`pkgs.cosmic-panel`,
  "Panel for the COSMIC Desktop Environment",
);

/**
 * compilers for Cosmopolitan C/C++ programs
 */
export const cosmocc = mkPackage(
  nixRaw`pkgs.cosmocc`,
  "compilers for Cosmopolitan C/C++ programs",
);

/**
 * Your build-once run-anywhere c library
 */
export const cosmopolitan = mkPackage(
  nixRaw`pkgs.cosmopolitan`,
  "Your build-once run-anywhere c library",
);

/**
 * Distributed Communication-Optimal Shuffle and Transpose Algorithm
 */
export const costa = mkPackage(
  nixRaw`pkgs.costa`,
  "Distributed Communication-Optimal Shuffle and Transpose Algorithm",
);

/**
 * Common OVF Tool
 */
export const cot = mkPackage(
  nixRaw`pkgs.cot`,
  "Common OVF Tool",
);

/**
 * Trustworthy, encrypted, command-line TOTP/HOTP authenticator app with import functionality
 */
export const cotp = mkPackage(
  nixRaw`pkgs.cotp`,
  "Trustworthy, encrypted, command-line TOTP/HOTP authenticator app with import functionality",
);

/**
 * A package manager for JavaScript projects
 */
export const cotton = mkPackage(
  nixRaw`pkgs.cotton`,
  "A package manager for JavaScript projects",
);

/**
 * A TURN server
 */
export const coturn = mkPackage(
  nixRaw`pkgs.coturn`,
  "A TURN server",
);

/**
 * A database that uses JSON for documents, JavaScript for MapReduce queries, and regular HTTP for an API
 */
export const couchdb3 = mkPackage(
  nixRaw`pkgs.couchdb3`,
  "A database that uses JSON for documents, JavaScript for MapReduce queries, and regular HTTP for an API",
);

/**
 * Monospaced font designed specifically for screenplays
 */
export const courier_prime = mkPackage(
  nixRaw`pkgs.courier-prime`,
  "Monospaced font designed specifically for screenplays",
);

/**
 * CLI for downloading Coursera.org videos and naming them
 */
export const coursera_dl = mkPackage(
  nixRaw`pkgs.coursera-dl`,
  "CLI for downloading Coursera.org videos and naming them",
);

/**
 * Scala library to fetch dependencies from Maven / Ivy repositories
 */
export const coursier = mkPackage(
  nixRaw`pkgs.coursier`,
  "Scala library to fetch dependencies from Maven / Ivy repositories",
);

/**
 * Coverity Scan build tools
 */
export const cov_build = mkPackage(
  nixRaw`pkgs.cov-build`,
  "Coverity Scan build tools",
);

/**
 * Offline dictionary attack against WPA/WPA2 networks
 */
export const cowpatty = mkPackage(
  nixRaw`pkgs.cowpatty`,
  "Offline dictionary attack against WPA/WPA2 networks",
);

/**
 * A program which generates ASCII pictures of a cow with a message
 */
export const cowsay = mkPackage(
  nixRaw`pkgs.cowsay`,
  "A program which generates ASCII pictures of a cow with a message",
);

/**
 * Embeddable, replicated and fault tolerant SQL engine
 */
export const cowsql = mkPackage(
  nixRaw`pkgs.cowsql`,
  "Embeddable, replicated and fault tolerant SQL engine",
);

/**
 * a safe and secure chat client
 */
export const coyim = mkPackage(
  nixRaw`pkgs.coyim`,
  "a safe and secure chat client",
);

/**
 * Profiler based on casual profiling
 */
export const coz = mkPackage(
  nixRaw`pkgs.coz`,
  "Profiler based on casual profiling",
);

/**
 * CLI client for Coze, a cryptographic JSON messaging specification.
 */
export const coze = mkPackage(
  nixRaw`pkgs.coze`,
  "CLI client for Coze, a cryptographic JSON messaging specification.",
);

/**
 * A bitmap programming font optimized for coziness
 */
export const cozette = mkPackage(
  nixRaw`pkgs.cozette`,
  "A bitmap programming font optimized for coziness",
);

/**
 * A modern audio book player for Linux using GTK 3
 */
export const cozy = mkPackage(
  nixRaw`pkgs.cozy`,
  "A modern audio book player for Linux using GTK 3",
);

/**
 * Cozy Drive is a synchronization tool for your files and folders with Cozy Cloud.
 */
export const cozy_drive = mkPackage(
  nixRaw`pkgs.cozy-drive`,
  "Cozy Drive is a synchronization tool for your files and folders with Cozy Cloud.",
);

/**
 * EEPROM tool for Silabs CP210x USB-Serial adapter
 */
export const cp210x_program = mkPackage(
  nixRaw`pkgs.cp210x-program`,
  "EEPROM tool for Silabs CP210x USB-Serial adapter",
);

/**
 * Quantum chemistry and solid state physics program
 */
export const cp2k = mkPackage(
  nixRaw`pkgs.cp2k`,
  "Quantum chemistry and solid state physics program",
);

        /**
         * Emulates an old-style "code page 437" / "IBM-PC" character
set terminal on a modern UTF-8 terminal emulator

         */
export const cp437 = mkPackage(
  nixRaw`pkgs.cp437`,
  "Emulates an old-style \"code page 437\" / \"IBM-PC\" character\nset terminal on a modern UTF-8 terminal emulator\n",
);

/**
 * Manipulating CPC dsk images and files
 */
export const cpcfs = mkPackage(
  nixRaw`pkgs.cpcfs`,
  "Manipulating CPC dsk images and files",
);

/**
 * An IDE specially designed for competitive programming
 */
export const cpeditor = mkPackage(
  nixRaw`pkgs.cpeditor`,
  "An IDE specially designed for competitive programming",
);

/**
 * A program to create or extract from cpio archives
 */
export const cpio = mkPackage(
  nixRaw`pkgs.cpio`,
  "A program to create or extract from cpio archives",
);

/**
 * Simple curses audio player
 */
export const cplay_ng = mkPackage(
  nixRaw`pkgs.cplay-ng`,
  "Simple curses audio player",
);

/**
 * Optimization solver for mathematical programming
 */
export const cplex = mkPackage(
  nixRaw`pkgs.cplex`,
  "Optimization solver for mathematical programming",
);

/**
 * CMake's missing package manager
 */
export const cpm_cmake = mkPackage(
  nixRaw`pkgs.cpm-cmake`,
  "CMake's missing package manager",
);

/**
 * A C++ port of the Typesafe Config library
 */
export const cpp_hocon = mkPackage(
  nixRaw`pkgs.cpp-hocon`,
  "A C++ port of the Typesafe Config library",
);

/**
 * IPFS C++ API client library
 */
export const cpp_ipfs_http_client = mkPackage(
  nixRaw`pkgs.cpp-ipfs-http-client`,
  "IPFS C++ API client library",
);

/**
 * JSON Web Token library for C++
 */
export const cpp_jwt = mkPackage(
  nixRaw`pkgs.cpp-jwt`,
  "JSON Web Token library for C++",
);

/**
 * Collection of open-source libraries for high level network programming
 */
export const cpp_netlib = mkPackage(
  nixRaw`pkgs.cpp-netlib`,
  "Collection of open-source libraries for high level network programming",
);

/**
 * Common C++ classes and routines used by @Martchus' applications featuring argument parser, IO and conversion utilities
 */
export const cpp_utilities = mkPackage(
  nixRaw`pkgs.cpp-utilities`,
  "Common C++ classes and routines used by @Martchus' applications featuring argument parser, IO and conversion utilities",
);

/**
 * A static analysis tool for C/C++ code
 */
export const cppcheck = mkPackage(
  nixRaw`pkgs.cppcheck`,
  "A static analysis tool for C/C++ code",
);

/**
 * Finds problems in C++ source that slow development of large code bases
 */
export const cppclean = mkPackage(
  nixRaw`pkgs.cppclean`,
  "Finds problems in C++ source that slow development of large code bases",
);

/**
 * High Performance C++ Web Framework
 */
export const cppcms = mkPackage(
  nixRaw`pkgs.cppcms`,
  "High Performance C++ Web Framework",
);

/**
 * Header-only C++11 library for encode/decode functions as in RFC 4648
 */
export const cppcodec = mkPackage(
  nixRaw`pkgs.cppcodec`,
  "Header-only C++11 library for encode/decode functions as in RFC 4648",
);

/**
 * C++ Connectivity library that supports MySQL, PostgreSQL, Sqlite3 databases and generic ODBC drivers
 */
export const cppdb = mkPackage(
  nixRaw`pkgs.cppdb`,
  "C++ Connectivity library that supports MySQL, PostgreSQL, Sqlite3 databases and generic ODBC drivers",
);

/**
 * C++ and Python library for Polarizable Embedding
 */
export const cppe = mkPackage(
  nixRaw`pkgs.cppe`,
  "C++ and Python library for Polarizable Embedding",
);

/**
 * A C preprocessor directive indenter
 */
export const cppi = mkPackage(
  nixRaw`pkgs.cppi`,
  "A C preprocessor directive indenter",
);

/**
 * Static code checker for C++
 */
export const cpplint = mkPackage(
  nixRaw`pkgs.cpplint`,
  "Static code checker for C++",
);

/**
 * C++ standard library reference
 */
export const cppreference_doc = mkPackage(
  nixRaw`pkgs.cppreference-doc`,
  "C++ standard library reference",
);

/**
 * Simple C++ unit testing framework
 */
export const cpptest = mkPackage(
  nixRaw`pkgs.cpptest`,
  "Simple C++ unit testing framework",
);

/**
 * C++ TOML configuration library
 */
export const cpptoml = mkPackage(
  nixRaw`pkgs.cpptoml`,
  "C++ TOML configuration library",
);

/**
 * C++ unit testing framework
 */
export const cppunit = mkPackage(
  nixRaw`pkgs.cppunit`,
  "C++ unit testing framework",
);

/**
 * Unit testing and mocking framework for C/C++
 */
export const cpputest = mkPackage(
  nixRaw`pkgs.cpputest`,
  "Unit testing and mocking framework for C/C++",
);

/**
 * C++ binding for 0MQ
 */
export const cppzmq = mkPackage(
  nixRaw`pkgs.cppzmq`,
  "C++ binding for 0MQ",
);

/**
 * Tool to generate C function prototypes from C source code
 */
export const cproto = mkPackage(
  nixRaw`pkgs.cproto`,
  "Tool to generate C function prototypes from C source code",
);

/**
 * Free software that gathers information on CPU, motherboard and more
 */
export const cpu_x = mkPackage(
  nixRaw`pkgs.cpu-x`,
  "Free software that gathers information on CPU, motherboard and more",
);

/**
 * Simplistic yet fancy CPU architecture fetching tool
 */
export const cpufetch = mkPackage(
  nixRaw`pkgs.cpufetch`,
  "Simplistic yet fancy CPU architecture fetching tool",
);

/**
 * Tools to display or change the CPU governor settings
 */
export const cpufrequtils = mkPackage(
  nixRaw`pkgs.cpufrequtils`,
  "Tools to display or change the CPU governor settings",
);

/**
 * Linux tool to dump x86 CPUID information about the CPU
 */
export const cpuid = mkPackage(
  nixRaw`pkgs.cpuid`,
  "Linux tool to dump x86 CPUID information about the CPU",
);

/**
 * CPU usage limiter
 */
export const cpulimit = mkPackage(
  nixRaw`pkgs.cpulimit`,
  "CPU usage limiter",
);

/**
 * CPU miner for Litecoin and Bitcoin
 */
export const cpuminer = mkPackage(
  nixRaw`pkgs.cpuminer`,
  "CPU miner for Litecoin and Bitcoin",
);

/**
 * Change the frequency limits of your cpu and its governor
 */
export const cpupower_gui = mkPackage(
  nixRaw`pkgs.cpupower-gui`,
  "Change the frequency limits of your cpu and its governor",
);

/**
 * Python application that forms a wrapper around the standard Linux filesystem calls to make using the cpusets facilities in the Linux kernel easier
 */
export const cpuset = mkPackage(
  nixRaw`pkgs.cpuset`,
  "Python application that forms a wrapper around the standard Linux filesystem calls to make using the cpusets facilities in the Linux kernel easier",
);

/**
 * CPU usage monitoring tool
 */
export const cpustat = mkPackage(
  nixRaw`pkgs.cpustat`,
  "CPU usage monitoring tool",
);

/**
 * CadQuery GUI editor based on PyQT
 */
export const cq_editor = mkPackage(
  nixRaw`pkgs.cq-editor`,
  "CadQuery GUI editor based on PyQT",
);

/**
 * Linux logging program for amateur radio operators
 */
export const cqrlog = mkPackage(
  nixRaw`pkgs.cqrlog`,
  "Linux logging program for amateur radio operators",
);

/**
 * A cross platform, fast, compression and decompression tool
 */
export const crabz = mkPackage(
  nixRaw`pkgs.crabz`,
  "A cross platform, fast, compression and decompression tool",
);

/**
 * A fast-paced puzzle game inspired by the classic Super NES title Tetris Attack!
 */
export const crack_attack = mkPackage(
  nixRaw`pkgs.crack_attack`,
  "A fast-paced puzzle game inspired by the classic Super NES title Tetris Attack!",
);

/**
 * Crack and decrypt BLE encryption
 */
export const crackle = mkPackage(
  nixRaw`pkgs.crackle`,
  "Crack and decrypt BLE encryption",
);

/**
 * A library for checking the strength of passwords
 */
export const cracklib = mkPackage(
  nixRaw`pkgs.cracklib`,
  "A library for checking the strength of passwords",
);

/**
 * Tool for pentesting networks
 */
export const crackmapexec = mkPackage(
  nixRaw`pkgs.crackmapexec`,
  "Tool for pentesting networks",
);

/**
 * GraphQL password brute-force and fuzzing utility
 */
export const crackql = mkPackage(
  nixRaw`pkgs.crackql`,
  "GraphQL password brute-force and fuzzing utility",
);

/**
 * Used to break the encryption on old Microsoft Excel and Microsoft Word files
 */
export const crackxls = mkPackage(
  nixRaw`pkgs.crackxls`,
  "Used to break the encryption on old Microsoft Excel and Microsoft Word files",
);

/**
 * An implementation of the CraftOS-PC API written in C++ using SDL
 */
export const craftos_pc = mkPackage(
  nixRaw`pkgs.craftos-pc`,
  "An implementation of the CraftOS-PC API written in C++ using SDL",
);

/**
 * Tools to create, check, and extract content of CramFs images
 */
export const cramfsprogs = mkPackage(
  nixRaw`pkgs.cramfsprogs`,
  "Tools to create, check, and extract content of CramFs images",
);

/**
 * Swap endianess of a cram filesystem (cramfs)
 */
export const cramfsswap = mkPackage(
  nixRaw`pkgs.cramfsswap`,
  "Swap endianess of a cram filesystem (cramfs)",
);

/**
 * Tools for interacting with remote images and registries including crane and gcrane
 */
export const crane = mkPackage(
  nixRaw`pkgs.crane`,
  "Tools for interacting with remote images and registries including crane and gcrane",
);

/**
 * A Nix build file generator for Rust crates.
 */
export const crate2nix = mkPackage(
  nixRaw`pkgs.crate2nix`,
  "A Nix build file generator for Rust crates.",
);

/**
 * Open-source, single-player, role-playing roguelike game
 */
export const crawl = mkPackage(
  nixRaw`pkgs.crawl`,
  "Open-source, single-player, role-playing roguelike game",
);

/**
 * Open-source, single-player, role-playing roguelike game
 */
export const crawlTiles = mkPackage(
  nixRaw`pkgs.crawlTiles`,
  "Open-source, single-player, role-playing roguelike game",
);

/**
 * Manages a local OpenShift 4.x cluster or a Podman VM optimized for testing and development purposes
 */
export const crc = mkPackage(
  nixRaw`pkgs.crc`,
  "Manages a local OpenShift 4.x cluster or a Podman VM optimized for testing and development purposes",
);

/**
 * CRC32C implementation with support for CPU-specific acceleration instructions
 */
export const crc32c = mkPackage(
  nixRaw`pkgs.crc32c`,
  "CRC32C implementation with support for CPU-specific acceleration instructions",
);

/**
 * Easy to use and fast C++ CRC library
 */
export const crcpp = mkPackage(
  nixRaw`pkgs.crcpp`,
  "Easy to use and fast C++ CRC library",
);

/**
 * Generate typed CustomResources from a Kubernetes CustomResourceDefinition
 */
export const crd2pulumi = mkPackage(
  nixRaw`pkgs.crd2pulumi`,
  "Generate typed CustomResources from a Kubernetes CustomResourceDefinition",
);

/**
 * Linux wireless Central Regulatory Domain Agent
 */
export const crda = mkPackage(
  nixRaw`pkgs.crda`,
  "Linux wireless Central Regulatory Domain Agent",
);

/**
 * C Wrapper for RE2
 */
export const cre2 = mkPackage(
  nixRaw`pkgs.cre2`,
  "C Wrapper for RE2",
);

/**
 * Create Cycle.js with no build configuration.
 */
export const create_cycle_app = mkPackage(
  nixRaw`pkgs.create-cycle-app`,
  "Create Cycle.js with no build configuration.",
);

/**
 * Create React apps with no build configuration
 */
export const create_react_app = mkPackage(
  nixRaw`pkgs.create-react-app`,
  "Create React apps with no build configuration",
);

/**
 * C implementation of createrepo
 */
export const createrepo_c = mkPackage(
  nixRaw`pkgs.createrepo_c`,
  "C implementation of createrepo",
);

/**
 * Tool to detect potentially hard-coded credentials
 */
export const credential_detector = mkPackage(
  nixRaw`pkgs.credential-detector`,
  "Tool to detect potentially hard-coded credentials",
);

/**
 * Provides a command line interface to interact with CredHub servers
 */
export const credhub_cli = mkPackage(
  nixRaw`pkgs.credhub-cli`,
  "Provides a command line interface to interact with CredHub servers",
);

/**
 * Tool to search a collection of default credentials
 */
export const creds = mkPackage(
  nixRaw`pkgs.creds`,
  "Tool to search a collection of default credentials",
);

/**
 * Extract credentials and other useful info from network captures
 */
export const credslayer = mkPackage(
  nixRaw`pkgs.credslayer`,
  "Extract credentials and other useful info from network captures",
);

/**
 * A utility for managing secrets in the cloud using AWS KMS and DynamoDB
 */
export const credstash = mkPackage(
  nixRaw`pkgs.credstash`,
  "A utility for managing secrets in the cloud using AWS KMS and DynamoDB",
);

/**
 * A C program reducer
 */
export const creduce = mkPackage(
  nixRaw`pkgs.creduce`,
  "A C program reducer",
);

/**
 * A pretty sweet 4px wide pixel font
 */
export const creep = mkPackage(
  nixRaw`pkgs.creep`,
  "A pretty sweet 4px wide pixel font",
);

/**
 * Explore, test, and check regular expressions in the terminal
 */
export const crex = mkPackage(
  nixRaw`pkgs.crex`,
  "Explore, test, and check regular expressions in the terminal",
);

        /**
         * Open Container Initiative-based implementation of the
Kubernetes Container Runtime Interface

         */
export const cri_o = mkPackage(
  nixRaw`pkgs.cri-o`,
  "Open Container Initiative-based implementation of the\nKubernetes Container Runtime Interface\n",
);

        /**
         * Open Container Initiative-based implementation of the
Kubernetes Container Runtime Interface

         */
export const cri_o_unwrapped = mkPackage(
  nixRaw`pkgs.cri-o-unwrapped`,
  "Open Container Initiative-based implementation of the\nKubernetes Container Runtime Interface\n",
);

/**
 * CLI and validation tools for Kubelet Container Runtime Interface (CRI)
 */
export const cri_tools = mkPackage(
  nixRaw`pkgs.cri-tools`,
  "CLI and validation tools for Kubelet Container Runtime Interface (CRI)",
);

/**
 * A font family inspired by beautiful oldstyle typefaces
 */
export const crimson = mkPackage(
  nixRaw`pkgs.crimson`,
  "A font family inspired by beautiful oldstyle typefaces",
);

/**
 * A professionally produced redesign of Crimson by Jacques Le Bailly
 */
export const crimson_pro = mkPackage(
  nixRaw`pkgs.crimson-pro`,
  "A professionally produced redesign of Crimson by Jacques Le Bailly",
);

/**
 * Annoy your friends with the cringified text
 */
export const cringify = mkPackage(
  nixRaw`pkgs.cringify`,
  "Annoy your friends with the cringified text",
);

/**
 * Terminal-based ripper/encoder/tagger tool for creating Ogg Vorbis/FLAC files
 */
export const crip = mkPackage(
  nixRaw`pkgs.crip`,
  "Terminal-based ripper/encoder/tagger tool for creating Ogg Vorbis/FLAC files",
);

/**
 * A limit-removing enhanced-resolution Doom source port based on Chocolate Doom
 */
export const crispy_doom = mkPackage(
  nixRaw`pkgs.crispy-doom`,
  "A limit-removing enhanced-resolution Doom source port based on Chocolate Doom",
);

/**
 * A command line tool for comparing benchmarks run by Criterion
 */
export const critcmp = mkPackage(
  nixRaw`pkgs.critcmp`,
  "A command line tool for comparing benchmarks run by Criterion",
);

/**
 * A cross-platform C and C++ unit testing framework for the 21th century
 */
export const criterion = mkPackage(
  nixRaw`pkgs.criterion`,
  "A cross-platform C and C++ unit testing framework for the 21th century",
);

/**
 * Userspace checkpoint/restore for Linux
 */
export const criu = mkPackage(
  nixRaw`pkgs.criu`,
  "Userspace checkpoint/restore for Linux",
);

/**
 * CRLF injection (HTTP Response Splitting) scanner
 */
export const crlfsuite = mkPackage(
  nixRaw`pkgs.crlfsuite`,
  "CRLF injection (HTTP Response Splitting) scanner",
);

/**
 * Tool to scan for CRLF vulnerability
 */
export const crlfuzz = mkPackage(
  nixRaw`pkgs.crlfuzz`,
  "Tool to scan for CRLF vulnerability",
);

/**
 * Compressed bitset library for C and C++
 */
export const croaring = mkPackage(
  nixRaw`pkgs.croaring`,
  "Compressed bitset library for C and C++",
);

/**
 * Easily and securely send things from one computer to another
 */
export const croc = mkPackage(
  nixRaw`pkgs.croc`,
  "Easily and securely send things from one computer to another",
);

/**
 * Crocoddyl optimal control library
 */
export const crocoddyl = mkPackage(
  nixRaw`pkgs.crocoddyl`,
  "Crocoddyl optimal control library",
);

/**
 * FUSE Compressed ROM filesystem with lzma
 */
export const cromfs = mkPackage(
  nixRaw`pkgs.cromfs`,
  "FUSE Compressed ROM filesystem with lzma",
);

/**
 * Daemon for running commands at specific times (Vixie Cron)
 */
export const cron = mkPackage(
  nixRaw`pkgs.cron`,
  "Daemon for running commands at specific times (Vixie Cron)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const crossLibcStdenv = mkPackage(
  nixRaw`pkgs.crossLibcStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * Archetype data for the Crossfire free MMORPG
 */
export const crossfire_arch = mkPackage(
  nixRaw`pkgs.crossfire-arch`,
  "Archetype data for the Crossfire free MMORPG",
);

/**
 * GTKv2 client for the Crossfire free MMORPG
 */
export const crossfire_client = mkPackage(
  nixRaw`pkgs.crossfire-client`,
  "GTKv2 client for the Crossfire free MMORPG",
);

/**
 * Map data for the Crossfire free MMORPG
 */
export const crossfire_maps = mkPackage(
  nixRaw`pkgs.crossfire-maps`,
  "Map data for the Crossfire free MMORPG",
);

/**
 * Server for the Crossfire free MMORPG
 */
export const crossfire_server = mkPackage(
  nixRaw`pkgs.crossfire-server`,
  "Server for the Crossfire free MMORPG",
);

/**
 * Lightweight cross platform C++ GUID/UUID library
 */
export const crossguid = mkPackage(
  nixRaw`pkgs.crossguid`,
  "Lightweight cross platform C++ GUID/UUID library",
);

/**
 * NGINX configuration file parser and builder
 */
export const crossplane = mkPackage(
  nixRaw`pkgs.crossplane`,
  "NGINX configuration file parser and builder",
);

/**
 * A secure virtual machine monitor for KVM
 */
export const crosvm = mkPackage(
  nixRaw`pkgs.crosvm`,
  "A secure virtual machine monitor for KVM",
);

/**
 * A simple and lightweight translator that allows to translate and speak text using Google, Yandex and Bing
 */
export const crow_translate = mkPackage(
  nixRaw`pkgs.crow-translate`,
  "A simple and lightweight translator that allows to translate and speak text using Google, Yandex and Bing",
);

/**
 * A brute forcing tool that can be used during penetration tests
 */
export const crowbar = mkPackage(
  nixRaw`pkgs.crowbar`,
  "A brute forcing tool that can be used during penetration tests",
);

/**
 * A command-line client for the Crowdin API
 */
export const crowdin_cli = mkPackage(
  nixRaw`pkgs.crowdin-cli`,
  "A command-line client for the Crowdin API",
);

/**
 * CrowdSec is a free, open-source and collaborative IPS
 */
export const crowdsec = mkPackage(
  nixRaw`pkgs.crowdsec`,
  "CrowdSec is a free, open-source and collaborative IPS",
);

/**
 * A model-airplane flight simulator
 */
export const crrcsim = mkPackage(
  nixRaw`pkgs.crrcsim`,
  "A model-airplane flight simulator",
);

/**
 * A utility for manipulating ini files 
 */
export const crudini = mkPackage(
  nixRaw`pkgs.crudini`,
  "A utility for manipulating ini files ",
);

/**
 * Bookmarks for the command line
 */
export const crumbs = mkPackage(
  nixRaw`pkgs.crumbs`,
  "Bookmarks for the command line",
);

/**
 * A fast and lightweight fully featured OCI runtime and C library for running containers
 */
export const crun = mkPackage(
  nixRaw`pkgs.crun`,
  "A fast and lightweight fully featured OCI runtime and C library for running containers",
);

/**
 * Wordlist generator
 */
export const crunch = mkPackage(
  nixRaw`pkgs.crunch`,
  "Wordlist generator",
);

/**
 * A pure Rust written Crunchyroll cli client and downloader
 */
export const crunchy_cli = mkPackage(
  nixRaw`pkgs.crunchy-cli`,
  "A pure Rust written Crunchyroll cli client and downloader",
);

/**
 * Cryptographic filesystem for the cloud
 */
export const cryfs = mkPackage(
  nixRaw`pkgs.cryfs`,
  "Cryptographic filesystem for the cloud",
);

/**
 * Crypto.org Chain desktop wallet (Beta)
 */
export const crypto_org_wallet = mkPackage(
  nixRaw`pkgs.crypto-org-wallet`,
  "Crypto.org Chain desktop wallet (Beta)",
);

/**
 * Program to retrieve the latest price for several cryptocurrencies using the CoinMarketCap API
 */
export const crypto_tracker = mkPackage(
  nixRaw`pkgs.crypto-tracker`,
  "Program to retrieve the latest price for several cryptocurrencies using the CoinMarketCap API",
);

/**
 * Device that allows access to Linux kernel cryptographic drivers
 */
export const cryptodev = mkPackage(
  nixRaw`pkgs.cryptodev`,
  "Device that allows access to Linux kernel cryptographic drivers",
);

/**
 * Free client-side encryption for your cloud files
 */
export const cryptomator = mkPackage(
  nixRaw`pkgs.cryptomator`,
  "Free client-side encryption for your cloud files",
);

/**
 * An advanced SAT Solver
 */
export const cryptominisat = mkPackage(
  nixRaw`pkgs.cryptominisat`,
  "An advanced SAT Solver",
);

/**
 * Command line Cryptocurrency Portfolio
 */
export const cryptop = mkPackage(
  nixRaw`pkgs.cryptop`,
  "Command line Cryptocurrency Portfolio",
);

/**
 * A free C++ class library of cryptographic schemes
 */
export const cryptopp = mkPackage(
  nixRaw`pkgs.cryptopp`,
  "A free C++ class library of cryptographic schemes",
);

/**
 * Cryptographic protocol verifier in the computational model
 */
export const cryptoverif = mkPackage(
  nixRaw`pkgs.cryptoverif`,
  "Cryptographic protocol verifier in the computational model",
);

/**
 * Application for visualising real-time cryptocurrency market data
 */
export const cryptowatch_desktop = mkPackage(
  nixRaw`pkgs.cryptowatch-desktop`,
  "Application for visualising real-time cryptocurrency market data",
);

/**
 * LUKS for dm-crypt
 */
export const cryptsetup = mkPackage(
  nixRaw`pkgs.cryptsetup`,
  "LUKS for dm-crypt",
);

/**
 * A compiled language with Ruby like syntax and type inference
 */
export const crystal = mkPackage(
  nixRaw`pkgs.crystal`,
  "A compiled language with Ruby like syntax and type inference",
);

/**
 * Utility to convert Crystal's shard.lock files to a Nix file
 */
export const crystal2nix = mkPackage(
  nixRaw`pkgs.crystal2nix`,
  "Utility to convert Crystal's shard.lock files to a Nix file",
);

/**
 * A compiled language with Ruby like syntax and type inference
 */
export const crystal_1_2 = mkPackage(
  nixRaw`pkgs.crystal_1_2`,
  "A compiled language with Ruby like syntax and type inference",
);

/**
 * A compiled language with Ruby like syntax and type inference
 */
export const crystal_1_7 = mkPackage(
  nixRaw`pkgs.crystal_1_7`,
  "A compiled language with Ruby like syntax and type inference",
);

/**
 * A compiled language with Ruby like syntax and type inference
 */
export const crystal_1_8 = mkPackage(
  nixRaw`pkgs.crystal_1_8`,
  "A compiled language with Ruby like syntax and type inference",
);

/**
 * A compiled language with Ruby like syntax and type inference
 */
export const crystal_1_9 = mkPackage(
  nixRaw`pkgs.crystal_1_9`,
  "A compiled language with Ruby like syntax and type inference",
);

/**
 * A Language Server Protocol implementation for Crystal
 */
export const crystalline = mkPackage(
  nixRaw`pkgs.crystalline`,
  "A Language Server Protocol implementation for Crystal",
);

/**
 * Data processing for serial crystallography
 */
export const crystfel = mkPackage(
  nixRaw`pkgs.crystfel`,
  "Data processing for serial crystallography",
);

/**
 * Data processing for serial crystallography
 */
export const crystfel_headless = mkPackage(
  nixRaw`pkgs.crystfel-headless`,
  "Data processing for serial crystallography",
);

/**
 * A group of LADSPA Audio plugins for FM broadcast and more
 */
export const csa = mkPackage(
  nixRaw`pkgs.csa`,
  "A group of LADSPA Audio plugins for FM broadcast and more",
);

/**
 * A developer's tool for browsing source code
 */
export const cscope = mkPackage(
  nixRaw`pkgs.cscope`,
  "A developer's tool for browsing source code",
);

/**
 * A C Library for Semidefinite Programming
 */
export const csdp = mkPackage(
  nixRaw`pkgs.csdp`,
  "A C Library for Semidefinite Programming",
);

/**
 * A simple DSP library and command-line tool for Software Defined Radio
 */
export const csdr = mkPackage(
  nixRaw`pkgs.csdr`,
  "A simple DSP library and command-line tool for Software Defined Radio",
);

/**
 * Simple and fast multimedia library
 */
export const csfml = mkPackage(
  nixRaw`pkgs.csfml`,
  "Simple and fast multimedia library",
);

/**
 * Roslyn-based LSP language server for C#
 */
export const csharp_ls = mkPackage(
  nixRaw`pkgs.csharp-ls`,
  "Roslyn-based LSP language server for C#",
);

/**
 * A tool to detect silent data corruption
 */
export const cshatag = mkPackage(
  nixRaw`pkgs.cshatag`,
  "A tool to detect silent data corruption",
);

/**
 * A random generator of C programs
 */
export const csmith = mkPackage(
  nixRaw`pkgs.csmith`,
  "A random generator of C programs",
);

/**
 * Sound design, audio synthesis, and signal processing system, providing facilities for music composition and performance on all major operating systems and platforms
 */
export const csound = mkPackage(
  nixRaw`pkgs.csound`,
  "Sound design, audio synthesis, and signal processing system, providing facilities for music composition and performance on all major operating systems and platforms",
);

/**
 * The Csound Canonical Reference Manual
 */
export const csound_manual = mkPackage(
  nixRaw`pkgs.csound-manual`,
  "The Csound Canonical Reference Manual",
);

/**
 * CsoundQt is a frontend for Csound with editor, integrated help, widgets and other features
 */
export const csound_qt = mkPackage(
  nixRaw`pkgs.csound-qt`,
  "CsoundQt is a frontend for Csound with editor, integrated help, widgets and other features",
);

/**
 * StandAlone Async cross-platform Minifier for the Web
 */
export const css_html_js_minify = mkPackage(
  nixRaw`pkgs.css-html-js-minify`,
  "StandAlone Async cross-platform Minifier for the Web",
);

/**
 * CSSLint
 */
export const csslint = mkPackage(
  nixRaw`pkgs.csslint`,
  "CSSLint",
);

/**
 * Command-line CSV to LaTeX file converter
 */
export const csv2latex = mkPackage(
  nixRaw`pkgs.csv2latex`,
  "Command-line CSV to LaTeX file converter",
);

/**
 * Convert csv files to OpenDocument Format
 */
export const csv2odf = mkPackage(
  nixRaw`pkgs.csv2odf`,
  "Convert csv files to OpenDocument Format",
);

/**
 * Convert CSV files to Apache Parquet
 */
export const csv2parquet = mkPackage(
  nixRaw`pkgs.csv2parquet`,
  "Convert CSV files to Apache Parquet",
);

/**
 * Take a csv as input and outputs svg
 */
export const csv2svg = mkPackage(
  nixRaw`pkgs.csv2svg`,
  "Take a csv as input and outputs svg",
);

/**
 * A fast diff tool for comparing csv files
 */
export const csvdiff = mkPackage(
  nixRaw`pkgs.csvdiff`,
  "A fast diff tool for comparing csv files",
);

/**
 * A high performance csv viewer with cjk/emoji support
 */
export const csview = mkPackage(
  nixRaw`pkgs.csview`,
  "A high performance csv viewer with cjk/emoji support",
);

/**
 * A suite of command-line tools for converting to and working with CSV
 */
export const csvkit = mkPackage(
  nixRaw`pkgs.csvkit`,
  "A suite of command-line tools for converting to and working with CSV",
);

/**
 * SQL-like query language for CSV
 */
export const csvq = mkPackage(
  nixRaw`pkgs.csvq`,
  "SQL-like query language for CSV",
);

/**
 * Enables common unix utilities like cut, awk, wc, head to work correctly with csv data containing delimiters and newlines
 */
export const csvquote = mkPackage(
  nixRaw`pkgs.csvquote`,
  "Enables common unix utilities like cut, awk, wc, head to work correctly with csv data containing delimiters and newlines",
);

/**
 * Convert CSV files into a SQLite database
 */
export const csvs_to_sqlite = mkPackage(
  nixRaw`pkgs.csvs-to-sqlite`,
  "Convert CSV files into a SQLite database",
);

/**
 * Command line tool for handling CSV files
 */
export const csvtool = mkPackage(
  nixRaw`pkgs.csvtool`,
  "Command line tool for handling CSV files",
);

/**
 * A C++ library to describe geometrical objects
 */
export const csxcad = mkPackage(
  nixRaw`pkgs.csxcad`,
  "A C++ library to describe geometrical objects",
);

/**
 * A tool for fast source code browsing (exuberant ctags)
 */
export const ctags = mkPackage(
  nixRaw`pkgs.ctags`,
  "A tool for fast source code browsing (exuberant ctags)",
);

/**
 * CLI for declaratively setting up local Kubernetes clusters
 */
export const ctlptl = mkPackage(
  nixRaw`pkgs.ctlptl`,
  "CLI for declaratively setting up local Kubernetes clusters",
);

/**
 * An encrypted container manager for Linux using cryptsetup
 */
export const ctmg = mkPackage(
  nixRaw`pkgs.ctmg`,
  "An encrypted container manager for Linux using cryptsetup",
);

/**
 * A simple ncurses-based task list manager
 */
export const ctodo = mkPackage(
  nixRaw`pkgs.ctodo`,
  "A simple ncurses-based task list manager",
);

/**
 * Top-like interface for container metrics
 */
export const ctop = mkPackage(
  nixRaw`pkgs.ctop`,
  "Top-like interface for container metrics",
);

/**
 * Template engine library written in C
 */
export const ctpl = mkPackage(
  nixRaw`pkgs.ctpl`,
  "Template engine library written in C",
);

/**
 * A high performance templating engine
 */
export const ctpp2 = mkPackage(
  nixRaw`pkgs.ctpp2`,
  "A high performance templating engine",
);

/**
 * File previewer for a terminal
 */
export const ctpv = mkPackage(
  nixRaw`pkgs.ctpv`,
  "File previewer for a terminal",
);

/**
 * Fast inference engine for Transformer models
 */
export const ctranslate2 = mkPackage(
  nixRaw`pkgs.ctranslate2`,
  "Fast inference engine for Transformer models",
);

/**
 * Fast compile-time regular expressions library
 */
export const ctre = mkPackage(
  nixRaw`pkgs.ctre`,
  "Fast compile-time regular expressions library",
);

/**
 * A tool to extract data from a 3ds rom
 */
export const ctrtool = mkPackage(
  nixRaw`pkgs.ctrtool`,
  "A tool to extract data from a 3ds rom",
);

/**
 * Vector graphics terminal
 */
export const ctx = mkPackage(
  nixRaw`pkgs.ctx`,
  "Vector graphics terminal",
);

/**
 * A foreign function interface for bash
 */
export const ctypes_sh = mkPackage(
  nixRaw`pkgs.ctypes_sh`,
  "A foreign function interface for bash",
);

/**
 * Cross platform audio library
 */
export const cubeb = mkPackage(
  nixRaw`pkgs.cubeb`,
  "Cross platform audio library",
);

/**
 * An open source model checker for verifying safety properties of array-based systems
 */
export const cubicle = mkPackage(
  nixRaw`pkgs.cubicle`,
  "An open source model checker for verifying safety properties of array-based systems",
);

/**
 * Software Defined Radio application
 */
export const cubicsdr = mkPackage(
  nixRaw`pkgs.cubicsdr`,
  "Software Defined Radio application",
);

/**
 * A graphical Minecraft seed finder and map viewer
 */
export const cubiomes_viewer = mkPackage(
  nixRaw`pkgs.cubiomes-viewer`,
  "A graphical Minecraft seed finder and map viewer",
);

/**
 * A tool for executable specifications
 */
export const cucumber = mkPackage(
  nixRaw`pkgs.cucumber`,
  "A tool for executable specifications",
);

/**
 * Cross-platform code editor
 */
export const cudatext = mkPackage(
  nixRaw`pkgs.cudatext`,
  "Cross-platform code editor",
);

/**
 * Cross-platform code editor
 */
export const cudatext_gtk = mkPackage(
  nixRaw`pkgs.cudatext-gtk`,
  "Cross-platform code editor",
);

/**
 * Cross-platform code editor
 */
export const cudatext_qt = mkPackage(
  nixRaw`pkgs.cudatext-qt`,
  "Cross-platform code editor",
);

/**
 * A compiler for NVIDIA GPUs, math libraries, and tools
 */
export const cudatoolkit = mkPackage(
  nixRaw`pkgs.cudatoolkit`,
  "A compiler for NVIDIA GPUs, math libraries, and tools",
);

/**
 * A compiler for NVIDIA GPUs, math libraries, and tools
 */
export const cudatoolkit_11 = mkPackage(
  nixRaw`pkgs.cudatoolkit_11`,
  "A compiler for NVIDIA GPUs, math libraries, and tools",
);

/**
 * Binary Decision Diagram (BDD) library
 */
export const cudd = mkPackage(
  nixRaw`pkgs.cudd`,
  "Binary Decision Diagram (BDD) library",
);

/**
 * A data constraint language which aims to simplify tasks involving defining and using data
 */
export const cue = mkPackage(
  nixRaw`pkgs.cue`,
  "A data constraint language which aims to simplify tasks involving defining and using data",
);

/**
 * Convert CUE to ISO suitable to POPStarter
 */
export const cue2pops = mkPackage(
  nixRaw`pkgs.cue2pops`,
  "Convert CUE to ISO suitable to POPStarter",
);

/**
 * Language Server implementation for CUE, with built-in support for Dagger
 */
export const cuelsp = mkPackage(
  nixRaw`pkgs.cuelsp`,
  "Language Server implementation for CUE, with built-in support for Dagger",
);

/**
 * A set of utilities for working with cue files and toc files
 */
export const cuetools = mkPackage(
  nixRaw`pkgs.cuetools`,
  "A set of utilities for working with cue files and toc files",
);

/**
 * Culmus Hebrew fonts
 */
export const culmus = mkPackage(
  nixRaw`pkgs.culmus`,
  "Culmus Hebrew fonts",
);

/**
 * comic updater, mangafied
 */
export const cum = mkPackage(
  nixRaw`pkgs.cum`,
  "comic updater, mangafied",
);

/**
 * Multi-language OCR system
 */
export const cuneiform = mkPackage(
  nixRaw`pkgs.cuneiform`,
  "Multi-language OCR system",
);

/**
 * A Unit Testing Framework for C
 */
export const cunit = mkPackage(
  nixRaw`pkgs.cunit`,
  "A Unit Testing Framework for C",
);

/**
 * A standards-based printing system for UNIX
 */
export const cups = mkPackage(
  nixRaw`pkgs.cups`,
  "A standards-based printing system for UNIX",
);

/**
 * CUPS back-end for Canon printers
 */
export const cups_bjnp = mkPackage(
  nixRaw`pkgs.cups-bjnp`,
  "CUPS back-end for Canon printers",
);

/**
 * Brother HL1110 printer driver
 */
export const cups_brother_hl1110 = mkPackage(
  nixRaw`pkgs.cups-brother-hl1110`,
  "Brother HL1110 printer driver",
);

/**
 * Brother HL1210W printer driver
 */
export const cups_brother_hl1210w = mkPackage(
  nixRaw`pkgs.cups-brother-hl1210w`,
  "Brother HL1210W printer driver",
);

/**
 * Brother HL-2260D printer driver
 */
export const cups_brother_hl2260d = mkPackage(
  nixRaw`pkgs.cups-brother-hl2260d`,
  "Brother HL-2260D printer driver",
);

/**
 * Brother hl3140cw printer driver
 */
export const cups_brother_hl3140cw = mkPackage(
  nixRaw`pkgs.cups-brother-hl3140cw`,
  "Brother hl3140cw printer driver",
);

/**
 * Brother hl-l2340dw printer driver
 */
export const cups_brother_hll2340dw = mkPackage(
  nixRaw`pkgs.cups-brother-hll2340dw`,
  "Brother hl-l2340dw printer driver",
);

/**
 * Brother HL-L2350DW printer driver
 */
export const cups_brother_hll2350dw = mkPackage(
  nixRaw`pkgs.cups-brother-hll2350dw`,
  "Brother HL-L2350DW printer driver",
);

/**
 * Brother HLL2375DW printer driver
 */
export const cups_brother_hll2375dw = mkPackage(
  nixRaw`pkgs.cups-brother-hll2375dw`,
  "Brother HLL2375DW printer driver",
);

/**
 * Brother HL-L3230CDW printer driver
 */
export const cups_brother_hll3230cdw = mkPackage(
  nixRaw`pkgs.cups-brother-hll3230cdw`,
  "Brother HL-L3230CDW printer driver",
);

/**
 * Brother MFC-L2750DW printer driver
 */
export const cups_brother_mfcl2750dw = mkPackage(
  nixRaw`pkgs.cups-brother-mfcl2750dw`,
  "Brother MFC-L2750DW printer driver",
);

/**
 * CUPS driver for Ricoh Aficio SP 1000S and SP 1100S printers
 */
export const cups_drv_rastertosag_gdi = mkPackage(
  nixRaw`pkgs.cups-drv-rastertosag-gdi`,
  "CUPS driver for Ricoh Aficio SP 1000S and SP 1100S printers",
);

/**
 * CUPS Linux drivers and SDK for DYMO printers
 */
export const cups_dymo = mkPackage(
  nixRaw`pkgs.cups-dymo`,
  "CUPS Linux drivers and SDK for DYMO printers",
);

/**
 * Backends, filters, and other software that was once part of the core CUPS distribution but is no longer maintained by Apple Inc
 */
export const cups_filters = mkPackage(
  nixRaw`pkgs.cups-filters`,
  "Backends, filters, and other software that was once part of the core CUPS distribution but is no longer maintained by Apple Inc",
);

/**
 * CUPS drivers for several Kyocera FS-{1020,1025,1040,1060,1120,1125} printers
 */
export const cups_kyocera = mkPackage(
  nixRaw`pkgs.cups-kyocera`,
  "CUPS drivers for several Kyocera FS-{1020,1025,1040,1060,1120,1125} printers",
);

/**
 * PPD files for Kyocera ECOSYS M2040dn/M2135dn/M2540dn/M2540dw/M2635dn/M2635dw/M2640idw/M2735dw/P2040dn/M2040dw/P2235dn/P2235dw
 */
export const cups_kyocera_ecosys_m2x35_40_p2x35_40dnw = mkPackage(
  nixRaw`pkgs.cups-kyocera-ecosys-m2x35-40-p2x35-40dnw`,
  "PPD files for Kyocera ECOSYS M2040dn/M2135dn/M2540dn/M2540dw/M2635dn/M2635dw/M2640idw/M2735dw/P2040dn/M2040dw/P2235dn/P2235dw",
);

/**
 * PPD files for Kyocera ECOSYS M5521cdn/M5521cdw/M5526cdn/M5526cdw/P5021cdn/P5021cdw/P5026cdn/P5026cdw
 */
export const cups_kyocera_ecosys_m552x_p502x = mkPackage(
  nixRaw`pkgs.cups-kyocera-ecosys-m552x-p502x`,
  "PPD files for Kyocera ECOSYS M5521cdn/M5521cdw/M5526cdn/M5526cdw/P5021cdn/P5021cdw/P5026cdn/P5026cdw",
);

/**
 * CUPS drivers for several Kyocera printers
 */
export const cups_kyodialog = mkPackage(
  nixRaw`pkgs.cups-kyodialog`,
  "CUPS drivers for several Kyocera printers",
);

/**
 * A CUPS backend that turns print jobs into searchable PDF files
 */
export const cups_pdf_to_pdf = mkPackage(
  nixRaw`pkgs.cups-pdf-to-pdf`,
  "A CUPS backend that turns print jobs into searchable PDF files",
);

/**
 * PolicyKit helper to configure cups with fine-grained privileges
 */
export const cups_pk_helper = mkPackage(
  nixRaw`pkgs.cups-pk-helper`,
  "PolicyKit helper to configure cups with fine-grained privileges",
);

/**
 * Printer only driver for the Toshiba e-STUDIO class of printers
 */
export const cups_toshiba_estudio = mkPackage(
  nixRaw`pkgs.cups-toshiba-estudio`,
  "Printer only driver for the Toshiba e-STUDIO class of printers",
);

/**
 * CUPS filter for thermal printer Zjiang ZJ-58
 */
export const cups_zj_58 = mkPackage(
  nixRaw`pkgs.cups-zj-58`,
  "CUPS filter for thermal printer Zjiang ZJ-58",
);

/**
 * 3D printer / slicing GUI built on top of the Uranium framework
 */
export const cura = mkPackage(
  nixRaw`pkgs.cura`,
  "3D printer / slicing GUI built on top of the Uranium framework",
);

/**
 * A powerful, fast and robust engine for processing 3D models into 3D printing instruction
 */
export const curaengine = mkPackage(
  nixRaw`pkgs.curaengine`,
  "A powerful, fast and robust engine for processing 3D models into 3D printing instruction",
);

/**
 * Engine for processing 3D models into 3D printing instructions
 */
export const curaengine_stable = mkPackage(
  nixRaw`pkgs.curaengine_stable`,
  "Engine for processing 3D models into 3D printing instructions",
);

/**
 * An upscaled version of scientifica
 */
export const curie = mkPackage(
  nixRaw`pkgs.curie`,
  "An upscaled version of scientifica",
);

/**
 * A command line tool for transferring files with URL syntax
 */
export const curl = mkPackage(
  nixRaw`pkgs.curl`,
  "A command line tool for transferring files with URL syntax",
);

/**
 * A command line tool for transferring files with URL syntax
 */
export const curlFull = mkPackage(
  nixRaw`pkgs.curlFull`,
  "A command line tool for transferring files with URL syntax",
);

/**
 * A command line tool for transferring files with URL syntax
 */
export const curlHTTP3 = mkPackage(
  nixRaw`pkgs.curlHTTP3`,
  "A command line tool for transferring files with URL syntax",
);

/**
 * A command line tool for transferring files with URL syntax
 */
export const curlMinimal = mkPackage(
  nixRaw`pkgs.curlMinimal`,
  "A command line tool for transferring files with URL syntax",
);

/**
 * A command line tool for transferring files with URL syntax
 */
export const curlWithGnuTls = mkPackage(
  nixRaw`pkgs.curlWithGnuTls`,
  "A command line tool for transferring files with URL syntax",
);

/**
 * A special build of curl that can impersonate Chrome & Firefox
 */
export const curl_impersonate = mkPackage(
  nixRaw`pkgs.curl-impersonate`,
  "A special build of curl that can impersonate Chrome & Firefox",
);

/**
 * A special build of curl that can impersonate Chrome & Firefox
 */
export const curl_impersonate_chrome = mkPackage(
  nixRaw`pkgs.curl-impersonate-chrome`,
  "A special build of curl that can impersonate Chrome & Firefox",
);

/**
 * A special build of curl that can impersonate Chrome & Firefox
 */
export const curl_impersonate_ff = mkPackage(
  nixRaw`pkgs.curl-impersonate-ff`,
  "A special build of curl that can impersonate Chrome & Firefox",
);

/**
 * Filesystem for accessing FTP hosts based on FUSE and libcurl
 */
export const curlftpfs = mkPackage(
  nixRaw`pkgs.curlftpfs`,
  "Filesystem for accessing FTP hosts based on FUSE and libcurl",
);

/**
 * Frontend to curl that adds the ease of use of httpie, without compromising on features and performance
 */
export const curlie = mkPackage(
  nixRaw`pkgs.curlie`,
  "Frontend to curl that adds the ease of use of httpie, without compromising on features and performance",
);

/**
 * C++ wrapper around libcURL
 */
export const curlpp = mkPackage(
  nixRaw`pkgs.curlpp`,
  "C++ wrapper around libcURL",
);

/**
 * A fast-paced action strategy game
 */
export const curseofwar = mkPackage(
  nixRaw`pkgs.curseofwar`,
  "A fast-paced action strategy game",
);

/**
 * A fast-paced action strategy game
 */
export const curseofwar_sdl = mkPackage(
  nixRaw`pkgs.curseofwar-sdl`,
  "A fast-paced action strategy game",
);

/**
 * Command line radio player
 */
export const curseradio = mkPackage(
  nixRaw`pkgs.curseradio`,
  "Command line radio player",
);

/**
 * Simple & useful image compressor
 */
export const curtail = mkPackage(
  nixRaw`pkgs.curtail`,
  "Simple & useful image compressor",
);

/**
 * A 2D and 3D geometric modelling programming language for creating art with maths
 */
export const curv = mkPackage(
  nixRaw`pkgs.curv`,
  "A 2D and 3D geometric modelling programming language for creating art with maths",
);

/**
 * A (3)DS capture software for Linux and Mac
 */
export const cutecapture = mkPackage(
  nixRaw`pkgs.cutecapture`,
  "A (3)DS capture software for Linux and Mac",
);

/**
 * GUI, CLI, and library for playing chess
 */
export const cutechess = mkPackage(
  nixRaw`pkgs.cutechess`,
  "GUI, CLI, and library for playing chess",
);

/**
 * A graphical serial terminal
 */
export const cutecom = mkPackage(
  nixRaw`pkgs.cutecom`,
  "A graphical serial terminal",
);

/**
 * C++ Unit Testing Easy Environment
 */
export const cutee = mkPackage(
  nixRaw`pkgs.cutee`,
  "C++ Unit Testing Easy Environment",
);

/**
 * A Qt-based, free and open source markdown editor
 */
export const cutemarked_ng = mkPackage(
  nixRaw`pkgs.cutemarked-ng`,
  "A Qt-based, free and open source markdown editor",
);

/**
 * Simple, top-down game in which mazes are randomly generated
 */
export const cutemaze = mkPackage(
  nixRaw`pkgs.cutemaze`,
  "Simple, top-down game in which mazes are randomly generated",
);

/**
 * Free and Open Source Reverse Engineering Platform powered by rizin
 */
export const cutter = mkPackage(
  nixRaw`pkgs.cutter`,
  "Free and Open Source Reverse Engineering Platform powered by rizin",
);

/**
 * Stacking blocks game, with different rules for each level
 */
export const cuyo = mkPackage(
  nixRaw`pkgs.cuyo`,
  "Stacking blocks game, with different rules for each level",
);

/**
 * A prover for satisfiability modulo theory (SMT)
 */
export const cvc3 = mkPackage(
  nixRaw`pkgs.cvc3`,
  "A prover for satisfiability modulo theory (SMT)",
);

/**
 * A high-performance theorem prover and SMT solver
 */
export const cvc4 = mkPackage(
  nixRaw`pkgs.cvc4`,
  "A high-performance theorem prover and SMT solver",
);

/**
 * A high-performance theorem prover and SMT solver
 */
export const cvc5 = mkPackage(
  nixRaw`pkgs.cvc5`,
  "A high-performance theorem prover and SMT solver",
);

/**
 * Library and a command line interface for the CVE Services API
 */
export const cve = mkPackage(
  nixRaw`pkgs.cve`,
  "Library and a command line interface for the CVE Services API",
);

/**
 * CVE Binary Checker Tool
 */
export const cve_bin_tool = mkPackage(
  nixRaw`pkgs.cve-bin-tool`,
  "CVE Binary Checker Tool",
);

/**
 * Tool to check linux kernel source dump for known CVEs
 */
export const cvehound = mkPackage(
  nixRaw`pkgs.cvehound`,
  "Tool to check linux kernel source dump for known CVEs",
);

/**
 * Super-parallel Python port of C-Reduce
 */
export const cvise = mkPackage(
  nixRaw`pkgs.cvise`,
  "Super-parallel Python port of C-Reduce",
);

/**
 * Concurrent Versions System - a source control system
 */
export const cvs = mkPackage(
  nixRaw`pkgs.cvs`,
  "Concurrent Versions System - a source control system",
);

/**
 * A tool to convert CVS repositories to Subversion repositories
 */
export const cvs2svn = mkPackage(
  nixRaw`pkgs.cvs2svn`,
  "A tool to convert CVS repositories to Subversion repositories",
);

/**
 * Export an RCS or CVS history as a fast-import stream
 */
export const cvs_fast_export = mkPackage(
  nixRaw`pkgs.cvs-fast-export`,
  "Export an RCS or CVS history as a fast-import stream",
);

/**
 * A tool to generate CVS patch set information
 */
export const cvsps = mkPackage(
  nixRaw`pkgs.cvsps`,
  "A tool to generate CVS patch set information",
);

/**
 * A collection of tools to work locally with CVS
 */
export const cvsq = mkPackage(
  nixRaw`pkgs.cvsq`,
  "A collection of tools to work locally with CVS",
);

/**
 * The best way to tail AWS CloudWatch Logs from your terminal
 */
export const cw = mkPackage(
  nixRaw`pkgs.cw`,
  "The best way to tail AWS CloudWatch Logs from your terminal",
);

/**
 * Literate Programming in C/C++
 */
export const cwebbin = mkPackage(
  nixRaw`pkgs.cwebbin`,
  "Literate Programming in C/C++",
);

/**
 * Linux Nintendo Wiimote interface
 */
export const cwiid = mkPackage(
  nixRaw`pkgs.cwiid`,
  "Linux Nintendo Wiimote interface",
);

/**
 * Common Workflow Language reference implementation
 */
export const cwltool = mkPackage(
  nixRaw`pkgs.cwltool`,
  "Common Workflow Language reference implementation",
);

/**
 * A lightweight and efficient window manager for X11
 */
export const cwm = mkPackage(
  nixRaw`pkgs.cwm`,
  "A lightweight and efficient window manager for X11",
);

/**
 * Header only C++ library for pretty printing standard containers
 */
export const cxx_prettyprint = mkPackage(
  nixRaw`pkgs.cxx-prettyprint`,
  "Header only C++ library for pretty printing standard containers",
);

/**
 * Safe FFI between Rust and C++
 */
export const cxx_rs = mkPackage(
  nixRaw`pkgs.cxx-rs`,
  "Safe FFI between Rust and C++",
);

/**
 * Lightweight C++ GNU-style option parser library
 */
export const cxxopts = mkPackage(
  nixRaw`pkgs.cxxopts`,
  "Lightweight C++ GNU-style option parser library",
);

/**
 * Unit testing framework for C++
 */
export const cxxtest = mkPackage(
  nixRaw`pkgs.cxxtest`,
  "Unit testing framework for C++",
);

/**
 * Comprehensive C++ class library for Unix and Linux
 */
export const cxxtools = mkPackage(
  nixRaw`pkgs.cxxtools`,
  "Comprehensive C++ class library for Unix and Linux",
);

/**
 * Image viewer and converter, designed for prepress (print) work
 */
export const cyan = mkPackage(
  nixRaw`pkgs.cyan`,
  "Image viewer and converter, designed for prepress (print) work",
);

/**
 * Bule-ish CD ripper
 */
export const cyanrip = mkPackage(
  nixRaw`pkgs.cyanrip`,
  "Bule-ish CD ripper",
);

/**
 * A fast, efficient, and concurrent scripting language
 */
export const cyber = mkPackage(
  nixRaw`pkgs.cyber`,
  "A fast, efficient, and concurrent scripting language",
);

/**
 * The Cyber Swiss Army Knife for encryption, encoding, compression and data analysis.
 */
export const cyberchef = mkPackage(
  nixRaw`pkgs.cyberchef`,
  "The Cyber Swiss Army Knife for encryption, encoding, compression and data analysis.",
);

/**
 * Libre file transfer client for Mac and Windows
 */
export const cyberduck = mkPackage(
  nixRaw`pkgs.cyberduck`,
  "Libre file transfer client for Mac and Windows",
);

/**
 * A library of PureData classes, bringing some level of compatibility between Max/MSP and Pd environments
 */
export const cyclone = mkPackage(
  nixRaw`pkgs.cyclone`,
  "A library of PureData classes, bringing some level of compatibility between Max/MSP and Pd environments",
);

/**
 * A brand-new compiler that allows practical application development using R7RS Scheme
 */
export const cyclone_scheme = mkPackage(
  nixRaw`pkgs.cyclone-scheme`,
  "A brand-new compiler that allows practical application development using R7RS Scheme",
);

/**
 * Eclipse Cyclone DDS project
 */
export const cyclonedds = mkPackage(
  nixRaw`pkgs.cyclonedds`,
  "Eclipse Cyclone DDS project",
);

/**
 * Tool to create CycloneDX Software Bill of Materials (SBOM) from Go modules
 */
export const cyclonedx_gomod = mkPackage(
  nixRaw`pkgs.cyclonedx-gomod`,
  "Tool to create CycloneDX Software Bill of Materials (SBOM) from Go modules",
);

/**
 * Creates CycloneDX Software Bill of Materials (SBOM) from Python projects
 */
export const cyclonedx_python = mkPackage(
  nixRaw`pkgs.cyclonedx-python`,
  "Creates CycloneDX Software Bill of Materials (SBOM) from Python projects",
);

/**
 * A modern cross-platform lsusb
 */
export const cyme = mkPackage(
  nixRaw`pkgs.cyme`,
  "A modern cross-platform lsusb",
);

/**
 * Fast, easy and reliable testing for anything that runs in a browser
 */
export const cypress = mkPackage(
  nixRaw`pkgs.cypress`,
  "Fast, easy and reliable testing for anything that runs in a browser",
);

/**
 * Library for adding authentication support to connection-based protocols
 */
export const cyrus_sasl = mkPackage(
  nixRaw`pkgs.cyrus_sasl`,
  "Library for adding authentication support to connection-based protocols",
);

/**
 * XOAUTH2 mechanism plugin for cyrus-sasl
 */
export const cyrus_sasl_xoauth2 = mkPackage(
  nixRaw`pkgs.cyrus-sasl-xoauth2`,
  "XOAUTH2 mechanism plugin for cyrus-sasl",
);

/**
 * A general platform for complex network analysis and visualization
 */
export const cytoscape = mkPackage(
  nixRaw`pkgs.cytoscape`,
  "A general platform for complex network analysis and visualization",
);

/**
 * The commitizen command line utility
 */
export const cz_cli = mkPackage(
  nixRaw`pkgs.cz-cli`,
  "The commitizen command line utility",
);

/**
 * A simple, fast and easy to use app to remove unnecessary files from your computer
 */
export const czkawka = mkPackage(
  nixRaw`pkgs.czkawka`,
  "A simple, fast and easy to use app to remove unnecessary files from your computer",
);

/**
 * High-level C Binding for ZeroMQ
 */
export const czmq = mkPackage(
  nixRaw`pkgs.czmq`,
  "High-level C Binding for ZeroMQ",
);

/**
 * Descent 1 using the DXX-Rebirth project engine and game assets from GOG
 */
export const d1x_rebirth_full = mkPackage(
  nixRaw`pkgs.d1x-rebirth-full`,
  "Descent 1 using the DXX-Rebirth project engine and game assets from GOG",
);

/**
 * A modern diagram scripting language that turns text to diagrams
 */
export const d2 = mkPackage(
  nixRaw`pkgs.d2`,
  "A modern diagram scripting language that turns text to diagrams",
);

/**
 * Monospace font with support for Korean and latin characters
 */
export const d2coding = mkPackage(
  nixRaw`pkgs.d2coding`,
  "Monospace font with support for Korean and latin characters",
);

/**
 * Descent 2 using the DXX-Rebirth project engine and game assets from GOG
 */
export const d2x_rebirth_full = mkPackage(
  nixRaw`pkgs.d2x-rebirth-full`,
  "Descent 2 using the DXX-Rebirth project engine and game assets from GOG",
);

/**
 * d-SEAMS: Deferred Structural Elucidation Analysis for Molecular Simulations
 */
export const d_seams = mkPackage(
  nixRaw`pkgs.d-seams`,
  "d-SEAMS: Deferred Structural Elucidation Analysis for Molecular Simulations",
);

/**
 * D-Bus exploration tool
 */
export const d_spy = mkPackage(
  nixRaw`pkgs.d-spy`,
  "D-Bus exploration tool",
);

/**
 * DAB/DAB+ decoding library
 */
export const dab_lib = mkPackage(
  nixRaw`pkgs.dab_lib`,
  "DAB/DAB+ decoding library",
);

/**
 * Print the duration between two times
 */
export const dabet = mkPackage(
  nixRaw`pkgs.dabet`,
  "Print the duration between two times",
);

/**
 * Play DAB/DAB+ from ETI-NI aligned stream
 */
export const dablin = mkPackage(
  nixRaw`pkgs.dablin`,
  "Play DAB/DAB+ from ETI-NI aligned stream",
);

/**
 * Commandline tools for DAB and DAB+ digital radio broadcasts
 */
export const dabtools = mkPackage(
  nixRaw`pkgs.dabtools`,
  "Commandline tools for DAB and DAB+ digital radio broadcasts",
);

/**
 * Markov chain-based text generator
 */
export const dadadodo = mkPackage(
  nixRaw`pkgs.dadadodo`,
  "Markov chain-based text generator",
);

/**
 * A Linux high-performance transparent proxy solution based on eBPF
 */
export const dae = mkPackage(
  nixRaw`pkgs.dae`,
  "A Linux high-performance transparent proxy solution based on eBPF",
);

/**
 * Turns other processes into daemons
 */
export const daemon = mkPackage(
  nixRaw`pkgs.daemon`,
  "Turns other processes into daemons",
);

/**
 * Runs a command as a Unix daemon
 */
export const daemonize = mkPackage(
  nixRaw`pkgs.daemonize`,
  "Runs a command as a Unix daemon",
);

/**
 * A collection of tools for managing UNIX services
 */
export const daemontools = mkPackage(
  nixRaw`pkgs.daemontools`,
  "A collection of tools for managing UNIX services",
);

/**
 * A programming language with built-in specification constructs
 */
export const dafny = mkPackage(
  nixRaw`pkgs.dafny`,
  "A programming language with built-in specification constructs",
);

/**
 * Lisp-flavoured C
 */
export const dale = mkPackage(
  nixRaw`pkgs.dale`,
  "Lisp-flavoured C",
);

/**
 * Tool for analysing parameter and XSS scanning
 */
export const dalfox = mkPackage(
  nixRaw`pkgs.dalfox`,
  "Tool for analysing parameter and XSS scanning",
);

/**
 * A terminal UI (TUI) for HashiCorp Nomad
 */
export const damon = mkPackage(
  nixRaw`pkgs.damon`,
  "A terminal UI (TUI) for HashiCorp Nomad",
);

/**
 * Dancing Script
 */
export const dancing_script = mkPackage(
  nixRaw`pkgs.dancing-script`,
  "Dancing Script",
);

/**
 * A gem that exists to ensure all dependencies are set up for Danger with GitLab
 */
export const danger_gitlab = mkPackage(
  nixRaw`pkgs.danger-gitlab`,
  "A gem that exists to ensure all dependencies are set up for Danger with GitLab",
);

/**
 * A circuit-level SOCKS client/server that can be used to provide convenient and secure network connectivity
 */
export const dante = mkPackage(
  nixRaw`pkgs.dante`,
  "A circuit-level SOCKS client/server that can be used to provide convenient and secure network connectivity",
);

/**
 * A small statistics and graphics package based on C
 */
export const dap = mkPackage(
  nixRaw`pkgs.dap`,
  "A small statistics and graphics package based on C",
);

/**
 * An APL implementation in Java
 */
export const dapl = mkPackage(
  nixRaw`pkgs.dapl`,
  "An APL implementation in Java",
);

/**
 * An APL implementation in Java, compiled as a native image
 */
export const dapl_native = mkPackage(
  nixRaw`pkgs.dapl-native`,
  "An APL implementation in Java, compiled as a native image",
);

/**
 * Docker build wrapper
 */
export const dapper = mkPackage(
  nixRaw`pkgs.dapper`,
  "Docker build wrapper",
);

/**
 * A CLI for managing Dapr, the distributed application runtime
 */
export const dapr_cli = mkPackage(
  nixRaw`pkgs.dapr-cli`,
  "A CLI for managing Dapr, the distributed application runtime",
);

/**
 * Data AcQuisition library (DAQ), for packet I/O
 */
export const daq = mkPackage(
  nixRaw`pkgs.daq`,
  "Data AcQuisition library (DAQ), for packet I/O",
);

/**
 * Disk ARchiver, allows backing up files into indexed archives
 */
export const dar = mkPackage(
  nixRaw`pkgs.dar`,
  "Disk ARchiver, allows backing up files into indexed archives",
);

/**
 * Sega Master System, Game Gear, SG-1000, NES, ColecoVision and Apple II emulator
 */
export const darcnes = mkPackage(
  nixRaw`pkgs.darcnes`,
  "Sega Master System, Game Gear, SG-1000, NES, ColecoVision and Apple II emulator",
);

/**
 * a distributed, interactive, smart revision control system
 */
export const darcs = mkPackage(
  nixRaw`pkgs.darcs`,
  "a distributed, interactive, smart revision control system",
);

/**
 * Converts a Darcs repository into a Git repository
 */
export const darcs_to_git = mkPackage(
  nixRaw`pkgs.darcs-to-git`,
  "Converts a Darcs repository into a Git repository",
);

/**
 * Run a script whenever dark mode changes in macOS
 */
export const dark_mode_notify = mkPackage(
  nixRaw`pkgs.dark-mode-notify`,
  "Run a script whenever dark mode changes in macOS",
);

/**
 * Small and secure static webserver
 */
export const darkhttpd = mkPackage(
  nixRaw`pkgs.darkhttpd`,
  "Small and secure static webserver",
);

/**
 * Live audio streamer
 */
export const darkice = mkPackage(
  nixRaw`pkgs.darkice`,
  "Live audio streamer",
);

/**
 * A command line tool that transforms Lua code
 */
export const darklua = mkPackage(
  nixRaw`pkgs.darklua`,
  "A command line tool that transforms Lua code",
);

/**
 * Framework for dark-mode and light-mode transitions on Linux desktop
 */
export const darkman = mkPackage(
  nixRaw`pkgs.darkman`,
  "Framework for dark-mode and light-mode transitions on Linux desktop",
);

/**
 * A quake 1 engine implementation by LadyHavoc
 */
export const darkplaces = mkPackage(
  nixRaw`pkgs.darkplaces`,
  "A quake 1 engine implementation by LadyHavoc",
);

/**
 * Network statistics web interface
 */
export const darkstat = mkPackage(
  nixRaw`pkgs.darkstat`,
  "Network statistics web interface",
);

/**
 * Virtual lighttable and darkroom for photographers
 */
export const darktable = mkPackage(
  nixRaw`pkgs.darktable`,
  "Virtual lighttable and darkroom for photographers",
);

/**
 * A GPU rendered terminal emulator designed for tiling window managers
 */
export const darktile = mkPackage(
  nixRaw`pkgs.darktile`,
  "A GPU rendered terminal emulator designed for tiling window managers",
);

/**
 * Open-source Darwin/macOS emulation layer for Linux
 */
export const darling = mkPackage(
  nixRaw`pkgs.darling`,
  "Open-source Darwin/macOS emulation layer for Linux",
);

/**
 * Darling lets you open macOS dmgs on Linux
 */
export const darling_dmg = mkPackage(
  nixRaw`pkgs.darling-dmg`,
  "Darling lets you open macOS dmgs on Linux",
);

/**
 * Scalable programming language, with robust libraries and runtimes, for building web, server, and mobile apps
 */
export const dart = mkPackage(
  nixRaw`pkgs.dart`,
  "Scalable programming language, with robust libraries and runtimes, for building web, server, and mobile apps",
);

/**
 * The reference implementation of Sass, written in Dart
 */
export const dart_sass = mkPackage(
  nixRaw`pkgs.dart-sass`,
  "The reference implementation of Sass, written in Dart",
);

/**
 * A wrapper for Dart Sass that implements the compiler side of the Embedded Sass protocol
 */
export const dart_sass_embedded = mkPackage(
  nixRaw`pkgs.dart-sass-embedded`,
  "A wrapper for Dart Sass that implements the compiler side of the Embedded Sass protocol",
);

/**
 * Divide full port scan results and use it for targeted Nmap runs
 */
export const das = mkPackage(
  nixRaw`pkgs.das`,
  "Divide full port scan results and use it for targeted Nmap runs",
);

/**
 * A general watchdog for the linux operating system
 */
export const das_watchdog = mkPackage(
  nixRaw`pkgs.das_watchdog`,
  "A general watchdog for the linux operating system",
);

/**
 * Query and update data structures from the command line
 */
export const dasel = mkPackage(
  nixRaw`pkgs.dasel`,
  "Query and update data structures from the command line",
);

/**
 * A POSIX-compliant implementation of /bin/sh that aims to be as small as possible
 */
export const dash = mkPackage(
  nixRaw`pkgs.dash`,
  "A POSIX-compliant implementation of /bin/sh that aims to be as small as possible",
);

/**
 * Information-efficient text-entry interface, driven by natural continuous pointing gestures
 */
export const dasher = mkPackage(
  nixRaw`pkgs.dasher`,
  "Information-efficient text-entry interface, driven by natural continuous pointing gestures",
);

/**
 * A Dash Generator Script for Any HTML
 */
export const dashing = mkPackage(
  nixRaw`pkgs.dashing`,
  "A Dash Generator Script for Any HTML",
);

/**
 * Search API docs offline, in terminal or browser
 */
export const dasht = mkPackage(
  nixRaw`pkgs.dasht`,
  "Search API docs offline, in terminal or browser",
);

/**
 * Assembler for 6502 and other 8-bit microprocessors
 */
export const dasm = mkPackage(
  nixRaw`pkgs.dasm`,
  "Assembler for 6502 and other 8-bit microprocessors",
);

/**
 * CLI for querying Databricks SQL
 */
export const databricks_sql_cli = mkPackage(
  nixRaw`pkgs.databricks-sql-cli`,
  "CLI for querying Databricks SQL",
);

/**
 * A set of simple, yet elegant wizarding tools for interacting with the Python dataclasses module
 */
export const dataclass_wizard = mkPackage(
  nixRaw`pkgs.dataclass-wizard`,
  "A set of simple, yet elegant wizarding tools for interacting with the Python dataclasses module",
);

        /**
         * Event collector for the DataDog analysis service
-- v6 new golang implementation.

         */
export const datadog_agent = mkPackage(
  nixRaw`pkgs.datadog-agent`,
  "Event collector for the DataDog analysis service\n-- v6 new golang implementation.\n",
);

/**
 * Live process collector for the DataDog Agent v7
 */
export const datadog_process_agent = mkPackage(
  nixRaw`pkgs.datadog-process-agent`,
  "Live process collector for the DataDog Agent v7",
);

/**
 * Graphical tool to analyze data, gathered from various hardware devices
 */
export const dataexplorer = mkPackage(
  nixRaw`pkgs.dataexplorer`,
  "Graphical tool to analyze data, gathered from various hardware devices",
);

/**
 * cli for Apache Arrow DataFusion
 */
export const datafusion_cli = mkPackage(
  nixRaw`pkgs.datafusion-cli`,
  "cli for Apache Arrow DataFusion",
);

/**
 * Keep code, data, containers under control with git and git-annex
 */
export const datalad = mkPackage(
  nixRaw`pkgs.datalad`,
  "Keep code, data, containers under control with git and git-annex",
);

/**
 * A command-line program which performs basic numeric,textual and statistical operations on input textual data files
 */
export const datamash = mkPackage(
  nixRaw`pkgs.datamash`,
  "A command-line program which performs basic numeric,textual and statistical operations on input textual data files",
);

/**
 * Multi-tool for exploring and publishing data
 */
export const datasette = mkPackage(
  nixRaw`pkgs.datasette`,
  "Multi-tool for exploring and publishing data",
);

/**
 * A tool that formats timestamps in text streams
 */
export const datefmt = mkPackage(
  nixRaw`pkgs.datefmt`,
  "A tool that formats timestamps in text streams",
);

/**
 * Fake the system date
 */
export const datefudge = mkPackage(
  nixRaw`pkgs.datefudge`,
  "Fake the system date",
);

/**
 * A bunch of tools that revolve around fiddling with dates and times in the command line
 */
export const dateutils = mkPackage(
  nixRaw`pkgs.dateutils`,
  "A bunch of tools that revolve around fiddling with dates and times in the command line",
);

/**
 * Client application for operating Czech government-provided Databox infomation system
 */
export const datovka = mkPackage(
  nixRaw`pkgs.datovka`,
  "Client application for operating Czech government-provided Databox infomation system",
);

/**
 * CLI tool to ensure K8s manifests and Helm charts follow best practices
 */
export const datree = mkPackage(
  nixRaw`pkgs.datree`,
  "CLI tool to ensure K8s manifests and Helm charts follow best practices",
);

/**
 * A cross-platform AV1 decoder focused on speed and correctness
 */
export const dav1d = mkPackage(
  nixRaw`pkgs.dav1d`,
  "A cross-platform AV1 decoder focused on speed and correctness",
);

/**
 * A totally simple and very easy to configure stand alone webdav server
 */
export const dave = mkPackage(
  nixRaw`pkgs.dave`,
  "A totally simple and very easy to configure stand alone webdav server",
);

/**
 * Mount WebDAV shares like a typical filesystem
 */
export const davfs2 = mkPackage(
  nixRaw`pkgs.davfs2`,
  "Mount WebDAV shares like a typical filesystem",
);

/**
 * Professional video editing, color, effects and audio post-processing
 */
export const davinci_resolve = mkPackage(
  nixRaw`pkgs.davinci-resolve`,
  "Professional video editing, color, effects and audio post-processing",
);

/**
 * Toolkit for Http-based file management
 */
export const davix = mkPackage(
  nixRaw`pkgs.davix`,
  "Toolkit for Http-based file management",
);

/**
 * Toolkit for Http-based file management
 */
export const davix_copy = mkPackage(
  nixRaw`pkgs.davix-copy`,
  "Toolkit for Http-based file management",
);

/**
 * A Java application which presents a Microsoft Exchange server as local CALDAV, IMAP and SMTP servers
 */
export const davmail = mkPackage(
  nixRaw`pkgs.davmail`,
  "A Java application which presents a Microsoft Exchange server as local CALDAV, IMAP and SMTP servers",
);

/**
 * Tests WebDAV servers by uploading test files, and then optionally testing for command execution or other actions directly on the target
 */
export const davtest = mkPackage(
  nixRaw`pkgs.davtest`,
  "Tests WebDAV servers by uploading test files, and then optionally testing for command execution or other actions directly on the target",
);

/**
 * A vectorized 3D PostScript processor with analytical hidden line/surface removal
 */
export const dawn = mkPackage(
  nixRaw`pkgs.dawn`,
  "A vectorized 3D PostScript processor with analytical hidden line/surface removal",
);

/**
 * A tool to generate a 3D scene data clipped with an arbitrary plane
 */
export const dawncut = mkPackage(
  nixRaw`pkgs.dawncut`,
  "A tool to generate a 3D scene data clipped with an arbitrary plane",
);

/**
 * An easy to use, cross-platform remote desktop assistance solution
 */
export const dayon = mkPackage(
  nixRaw`pkgs.dayon`,
  "An easy to use, cross-platform remote desktop assistance solution",
);

/**
 * Berkeley DB
 */
export const db = mkPackage(
  nixRaw`pkgs.db`,
  "Berkeley DB",
);

/**
 * Berkeley DB
 */
export const db4 = mkPackage(
  nixRaw`pkgs.db4`,
  "Berkeley DB",
);

/**
 * Berkeley DB
 */
export const db48 = mkPackage(
  nixRaw`pkgs.db48`,
  "Berkeley DB",
);

/**
 * Berkeley DB
 */
export const db5 = mkPackage(
  nixRaw`pkgs.db5`,
  "Berkeley DB",
);

/**
 * Berkeley DB
 */
export const db53 = mkPackage(
  nixRaw`pkgs.db53`,
  "Berkeley DB",
);

/**
 * Berkeley DB
 */
export const db6 = mkPackage(
  nixRaw`pkgs.db6`,
  "Berkeley DB",
);

/**
 * Berkeley DB
 */
export const db60 = mkPackage(
  nixRaw`pkgs.db60`,
  "Berkeley DB",
);

/**
 * Berkeley DB
 */
export const db62 = mkPackage(
  nixRaw`pkgs.db62`,
  "Berkeley DB",
);

export const dbacl = mkPackage(
  nixRaw`pkgs.dbacl`,
  "",
);

/**
 * Distributed Block Compressed Sparse Row matrix library
 */
export const dbcsr = mkPackage(
  nixRaw`pkgs.dbcsr`,
  "Distributed Block Compressed Sparse Row matrix library",
);

/**
 * Universal SQL Client for developers, DBA and analysts. Supports MySQL, PostgreSQL, MariaDB, SQLite, and more
 */
export const dbeaver = mkPackage(
  nixRaw`pkgs.dbeaver`,
  "Universal SQL Client for developers, DBA and analysts. Supports MySQL, PostgreSQL, MariaDB, SQLite, and more",
);

/**
 * Filesystem benchmark tool based on load patterns
 */
export const dbench = mkPackage(
  nixRaw`pkgs.dbench`,
  "Filesystem benchmark tool based on load patterns",
);

/**
 * The free IP to Country Lite database by DB-IP
 */
export const dbip_country_lite = mkPackage(
  nixRaw`pkgs.dbip-country-lite`,
  "The free IP to Country Lite database by DB-IP",
);

/**
 * The database client every command line junkie deserves
 */
export const dblab = mkPackage(
  nixRaw`pkgs.dblab`,
  "The database client every command line junkie deserves",
);

/**
 * A program to convert DocBook to DVI, PostScript or PDF via LaTeX or ConTeXt
 */
export const dblatex = mkPackage(
  nixRaw`pkgs.dblatex`,
  "A program to convert DocBook to DVI, PostScript or PDF via LaTeX or ConTeXt",
);

/**
 * A program to convert DocBook to DVI, PostScript or PDF via LaTeX or ConTeXt
 */
export const dblatexFull = mkPackage(
  nixRaw`pkgs.dblatexFull`,
  "A program to convert DocBook to DVI, PostScript or PDF via LaTeX or ConTeXt",
);

/**
 * Database migration tool
 */
export const dbmate = mkPackage(
  nixRaw`pkgs.dbmate`,
  "Database migration tool",
);

/**
 * Tool to track WiFi devices by signal strength
 */
export const dbmonster = mkPackage(
  nixRaw`pkgs.dbmonster`,
  "Tool to track WiFi devices by signal strength",
);

/**
 * A BQN implementation in Java
 */
export const dbqn = mkPackage(
  nixRaw`pkgs.dbqn`,
  "A BQN implementation in Java",
);

/**
 * A BQN implementation in Java, compiled as a native image
 */
export const dbqn_native = mkPackage(
  nixRaw`pkgs.dbqn-native`,
  "A BQN implementation in Java, compiled as a native image",
);

/**
 * Enables data analysts and engineers to transform their data using the same practices that software engineers use to build applications
 */
export const dbt = mkPackage(
  nixRaw`pkgs.dbt`,
  "Enables data analysts and engineers to transform their data using the same practices that software engineers use to build applications",
);

/**
 * Simple interprocess messaging system
 */
export const dbus = mkPackage(
  nixRaw`pkgs.dbus`,
  "Simple interprocess messaging system",
);

/**
 * Linux D-Bus Message Broker
 */
export const dbus_broker = mkPackage(
  nixRaw`pkgs.dbus-broker`,
  "Linux D-Bus Message Broker",
);

/**
 * C++ API for D-BUS
 */
export const dbus_cplusplus = mkPackage(
  nixRaw`pkgs.dbus_cplusplus`,
  "C++ API for D-BUS",
);

/**
 * A dbus-binding leveraging C++-11
 */
export const dbus_cpp = mkPackage(
  nixRaw`pkgs.dbus-cpp`,
  "A dbus-binding leveraging C++-11",
);

/**
 * Obsolete glib bindings for D-Bus lightweight IPC mechanism
 */
export const dbus_glib = mkPackage(
  nixRaw`pkgs.dbus-glib`,
  "Obsolete glib bindings for D-Bus lightweight IPC mechanism",
);

export const dbus_java = mkPackage(
  nixRaw`pkgs.dbus_java`,
  "",
);

/**
 * Simple utility for enumerating D-Bus endpoints, an nmap for D-Bus
 */
export const dbus_map = mkPackage(
  nixRaw`pkgs.dbus-map`,
  "Simple utility for enumerating D-Bus endpoints, an nmap for D-Bus",
);

/**
 * D-Bus for .NET
 */
export const dbus_sharp_1_0 = mkPackage(
  nixRaw`pkgs.dbus-sharp-1_0`,
  "D-Bus for .NET",
);

/**
 * D-Bus for .NET
 */
export const dbus_sharp_2_0 = mkPackage(
  nixRaw`pkgs.dbus-sharp-2_0`,
  "D-Bus for .NET",
);

/**
 * D-Bus for .NET: GLib integration module
 */
export const dbus_sharp_glib_1_0 = mkPackage(
  nixRaw`pkgs.dbus-sharp-glib-1_0`,
  "D-Bus for .NET: GLib integration module",
);

/**
 * D-Bus for .NET: GLib integration module
 */
export const dbus_sharp_glib_2_0 = mkPackage(
  nixRaw`pkgs.dbus-sharp-glib-2_0`,
  "D-Bus for .NET: GLib integration module",
);

/**
 * A small little utility to run a couple of executables under a new DBus session for testing
 */
export const dbus_test_runner = mkPackage(
  nixRaw`pkgs.dbus-test-runner`,
  "A small little utility to run a couple of executables under a new DBus session for testing",
);

/**
 * CLI tool for advanced Databricks jobs management
 */
export const dbx = mkPackage(
  nixRaw`pkgs.dbx`,
  "CLI tool for advanced Databricks jobs management",
);

/**
 * Embeddable XML database based on Berkeley DB
 */
export const dbxml = mkPackage(
  nixRaw`pkgs.dbxml`,
  "Embeddable XML database based on Berkeley DB",
);

/**
 * DTS Coherent Acoustics decoder with support for HD extensions
 */
export const dcadec = mkPackage(
  nixRaw`pkgs.dcadec`,
  "DTS Coherent Acoustics decoder with support for HD extensions",
);

/**
 * dCache access protocol client library
 */
export const dcap = mkPackage(
  nixRaw`pkgs.dcap`,
  "dCache access protocol client library",
);

/**
 * An enhanced version of GNU dd
 */
export const dcfldd = mkPackage(
  nixRaw`pkgs.dcfldd`,
  "An enhanced version of GNU dd",
);

/**
 * Data Center GPU Manager (DCGM) is a daemon that allows users to monitor NVIDIA data-center GPUs.
 */
export const dcgm = mkPackage(
  nixRaw`pkgs.dcgm`,
  "Data Center GPU Manager (DCGM) is a daemon that allows users to monitor NVIDIA data-center GPUs.",
);

/**
 * Peer-to-Peer file sharing client
 */
export const dclib = mkPackage(
  nixRaw`pkgs.dclib`,
  "Peer-to-Peer file sharing client",
);

/**
 * Naehrig, Niederhagen and Schwabe's pairings code, massaged into a shared library
 */
export const dclxvi = mkPackage(
  nixRaw`pkgs.dclxvi`,
  "Naehrig, Niederhagen and Schwabe's pairings code, massaged into a shared library",
);

/**
 * DICOM to NIfTI converter
 */
export const dcm2niix = mkPackage(
  nixRaw`pkgs.dcm2niix`,
  "DICOM to NIfTI converter",
);

/**
 * Collection of libraries and applications implementing large parts of the DICOM standard
 */
export const dcmtk = mkPackage(
  nixRaw`pkgs.dcmtk`,
  "Collection of libraries and applications implementing large parts of the DICOM standard",
);

/**
 * UI-less tool to connect Android phone with desktop
 */
export const dcnnt = mkPackage(
  nixRaw`pkgs.dcnnt`,
  "UI-less tool to connect Android phone with desktop",
);

export const dconf = mkPackage(
  nixRaw`pkgs.dconf`,
  "",
);

/**
 * Convert dconf files to Nix, as expected by Home Manager
 */
export const dconf2nix = mkPackage(
  nixRaw`pkgs.dconf2nix`,
  "Convert dconf files to Nix, as expected by Home Manager",
);

/**
 * Brother dcp9020cdw printer CUPS wrapper driver
 */
export const dcp9020cdw_cupswrapper = mkPackage(
  nixRaw`pkgs.dcp9020cdw-cupswrapper`,
  "Brother dcp9020cdw printer CUPS wrapper driver",
);

/**
 * Brother dcp9020cdw printer driver
 */
export const dcp9020cdwlpr = mkPackage(
  nixRaw`pkgs.dcp9020cdwlpr`,
  "Brother dcp9020cdw printer driver",
);

/**
 * Decoder for many camera raw picture formats
 */
export const dcraw = mkPackage(
  nixRaw`pkgs.dcraw`,
  "Decoder for many camera raw picture formats",
);

/**
 * A secure Decred wallet daemon written in Go (golang)
 */
export const dcrctl = mkPackage(
  nixRaw`pkgs.dcrctl`,
  "A secure Decred wallet daemon written in Go (golang)",
);

/**
 * Decred daemon in Go (golang)
 */
export const dcrd = mkPackage(
  nixRaw`pkgs.dcrd`,
  "Decred daemon in Go (golang)",
);

/**
 * A secure Decred wallet daemon written in Go (golang)
 */
export const dcrwallet = mkPackage(
  nixRaw`pkgs.dcrwallet`,
  "A secure Decred wallet daemon written in Go (golang)",
);

/**
 * Debian Code Search
 */
export const dcs = mkPackage(
  nixRaw`pkgs.dcs`,
  "Debian Code Search",
);

/**
 * Vector basemap of the world, for use with GMT
 */
export const dcw_gmt = mkPackage(
  nixRaw`pkgs.dcw-gmt`,
  "Vector basemap of the world, for use with GMT",
);

/**
 * A tool to copy data from a damaged block device
 */
export const dd_rescue = mkPackage(
  nixRaw`pkgs.dd_rescue`,
  "A tool to copy data from a damaged block device",
);

/**
 * Discordian version of the date program
 */
export const ddate = mkPackage(
  nixRaw`pkgs.ddate`,
  "Discordian version of the date program",
);

/**
 * A program used to control monitor parameters by software
 */
export const ddccontrol = mkPackage(
  nixRaw`pkgs.ddccontrol`,
  "A program used to control monitor parameters by software",
);

/**
 * Monitor database for DDCcontrol
 */
export const ddccontrol_db = mkPackage(
  nixRaw`pkgs.ddccontrol-db`,
  "Monitor database for DDCcontrol",
);

/**
 * Client for updating dynamic DNS service entries
 */
export const ddclient = mkPackage(
  nixRaw`pkgs.ddclient`,
  "Client for updating dynamic DNS service entries",
);

/**
 * Graphical user interface for ddcutil - control monitor settings
 */
export const ddcui = mkPackage(
  nixRaw`pkgs.ddcui`,
  "Graphical user interface for ddcutil - control monitor settings",
);

/**
 * Query and change Linux monitor settings using DDC/CI and USB
 */
export const ddcutil = mkPackage(
  nixRaw`pkgs.ddcutil`,
  "Query and change Linux monitor settings using DDC/CI and USB",
);

/**
 * Graphical front-end for command-line debuggers
 */
export const ddd = mkPackage(
  nixRaw`pkgs.ddd`,
  "Graphical front-end for command-line debuggers",
);

/**
 * Docker-based local PHP+Node.js web development environments
 */
export const ddev = mkPackage(
  nixRaw`pkgs.ddev`,
  "Docker-based local PHP+Node.js web development environments",
);

/**
 * Search DuckDuckGo from the terminal
 */
export const ddgr = mkPackage(
  nixRaw`pkgs.ddgr`,
  "Search DuckDuckGo from the terminal",
);

/**
 * A fast duplicate file finder
 */
export const ddh = mkPackage(
  nixRaw`pkgs.ddh`,
  "A fast duplicate file finder",
);

/**
 * A Teeworlds modification with a unique cooperative gameplay.
 */
export const ddnet = mkPackage(
  nixRaw`pkgs.ddnet`,
  "A Teeworlds modification with a unique cooperative gameplay.",
);

/**
 * Simple and easy to use DDNS
 */
export const ddns_go = mkPackage(
  nixRaw`pkgs.ddns-go`,
  "Simple and easy to use DDNS",
);

/**
 * High-performance load testing tool, written in Golang
 */
export const ddosify = mkPackage(
  nixRaw`pkgs.ddosify`,
  "High-performance load testing tool, written in Golang",
);

/**
 * GNU ddrescue, a data recovery tool
 */
export const ddrescue = mkPackage(
  nixRaw`pkgs.ddrescue`,
  "GNU ddrescue, a data recovery tool",
);

/**
 * A tool to graphically examine ddrescue mapfiles
 */
export const ddrescueview = mkPackage(
  nixRaw`pkgs.ddrescueview`,
  "A tool to graphically examine ddrescue mapfiles",
);

/**
 * A set of utilities for hard drive data rescue
 */
export const ddrutility = mkPackage(
  nixRaw`pkgs.ddrutility`,
  "A set of utilities for hard drive data rescue",
);

/**
 * Fast block-level out-of-band BTRFS deduplication tool.
 */
export const dduper = mkPackage(
  nixRaw`pkgs.dduper`,
  "Fast block-level out-of-band BTRFS deduplication tool.",
);

/**
 * Ultimate Music Player for GNU/Linux
 */
export const deadbeef = mkPackage(
  nixRaw`pkgs.deadbeef`,
  "Ultimate Music Player for GNU/Linux",
);

export const deadbeef_with_plugins = mkPackage(
  nixRaw`pkgs.deadbeef-with-plugins`,
  "",
);

/**
 * Very simple utility which detects unused declarations in a Go package
 */
export const deadcode = mkPackage(
  nixRaw`pkgs.deadcode`,
  "Very simple utility which detects unused declarations in a Go package",
);

/**
 * A haskell-written notification center for users that like a desktop with style
 */
export const deadd_notification_center = mkPackage(
  nixRaw`pkgs.deadd-notification-center`,
  "A haskell-written notification center for users that like a desktop with style",
);

/**
 * Find and remove unused code in .nix source files
 */
export const deadnix = mkPackage(
  nixRaw`pkgs.deadnix`,
  "Find and remove unused code in .nix source files",
);

/**
 * Updated version of the sam text editor
 */
export const deadpixi_sam_unstable = mkPackage(
  nixRaw`pkgs.deadpixi-sam-unstable`,
  "Updated version of the sam text editor",
);

/**
 * Debian package maintenance scripts
 */
export const debian_devscripts = mkPackage(
  nixRaw`pkgs.debian-devscripts`,
  "Debian package maintenance scripts",
);

/**
 * Small toolbox-style utilities for Debian systems
 */
export const debian_goodies = mkPackage(
  nixRaw`pkgs.debian-goodies`,
  "Small toolbox-style utilities for Debian systems",
);

/**
 * Miscellaneous utilities specific to Debian
 */
export const debianutils = mkPackage(
  nixRaw`pkgs.debianutils`,
  "Miscellaneous utilities specific to Debian",
);

/**
 * Tool to create a Debian system in a chroot
 */
export const debootstrap = mkPackage(
  nixRaw`pkgs.debootstrap`,
  "Tool to create a Debian system in a chroot",
);

/**
 * Provides programs and scripts for creating debuginfo and source file distributions, collect build-ids and rewrite source paths in DWARF data for debugging, tracing and profiling
 */
export const debugedit = mkPackage(
  nixRaw`pkgs.debugedit`,
  "Provides programs and scripts for creating debuginfo and source file distributions, collect build-ids and rewrite source paths in DWARF data for debugging, tracing and profiling",
);

/**
 * Nintendo Wii iso.dec decoder
 */
export const dec_decode = mkPackage(
  nixRaw`pkgs.dec-decode`,
  "Nintendo Wii iso.dec decoder",
);

/**
 * A configuration management and drift detection tool for Kong
 */
export const deck = mkPackage(
  nixRaw`pkgs.deck`,
  "A configuration management and drift detection tool for Kong",
);

/**
 * Multimedia platform for creating and sharing interactive documents
 */
export const decker = mkPackage(
  nixRaw`pkgs.decker`,
  "Multimedia platform for creating and sharing interactive documents",
);

/**
 * An application to control your Elgato Stream Deck on Linux
 */
export const deckmaster = mkPackage(
  nixRaw`pkgs.deckmaster`,
  "An application to control your Elgato Stream Deck on Linux",
);

/**
 * A simple root image setter
 */
export const deco = mkPackage(
  nixRaw`pkgs.deco`,
  "A simple root image setter",
);

/**
 * "secrets" decoding for FRITZ!OS devices
 */
export const decoder = mkPackage(
  nixRaw`pkgs.decoder`,
  "\"secrets\" decoding for FRITZ!OS devices",
);

/**
 * Manage Zigbee network with ConBee, ConBee II or RaspBee hardware
 */
export const deconz = mkPackage(
  nixRaw`pkgs.deconz`,
  "Manage Zigbee network with ConBee, ConBee II or RaspBee hardware",
);

/**
 * Data deduplication program
 */
export const dedup = mkPackage(
  nixRaw`pkgs.dedup`,
  "Data deduplication program",
);

/**
 * A library that uses DBus to provide objects allowing you to create Model-View-Controller type programs across DBus
 */
export const dee = mkPackage(
  nixRaw`pkgs.dee`,
  "A library that uses DBus to provide objects allowing you to create Model-View-Controller type programs across DBus",
);

/**
 * Python tool to translate between different languages by using multiple translators
 */
export const deep_translator = mkPackage(
  nixRaw`pkgs.deep-translator`,
  "Python tool to translate between different languages by using multiple translators",
);

/**
 * Deep Difference and Search of any Python object/data
 */
export const deepdiff = mkPackage(
  nixRaw`pkgs.deepdiff`,
  "Deep Difference and Search of any Python object/data",
);

/**
 * A tool to investigate the history of source code
 */
export const deepgit = mkPackage(
  nixRaw`pkgs.deepgit`,
  "A tool to investigate the history of source code",
);

/**
 * Secrets scanner that understands code
 */
export const deepsecrets = mkPackage(
  nixRaw`pkgs.deepsecrets`,
  "Secrets scanner that understands code",
);

/**
 * Tools for exploring deep DNA sequencing data
 */
export const deeptools = mkPackage(
  nixRaw`pkgs.deeptools`,
  "Tools for exploring deep DNA sequencing data",
);

/**
 * Ranger-like file navigation for zsh
 */
export const deer = mkPackage(
  nixRaw`pkgs.deer`,
  "Ranger-like file navigation for zsh",
);

/**
 * Video anonymization by face detection
 */
export const deface = mkPackage(
  nixRaw`pkgs.deface`,
  "Video anonymization by face detection",
);

/**
 * Command line tool for getting and setting a default browser (HTTP handler) in Mac OS X
 */
export const defaultbrowser = mkPackage(
  nixRaw`pkgs.defaultbrowser`,
  "Command line tool for getting and setting a default browser (HTTP handler) in Mac OS X",
);

/**
 * Make copies of git repositories
 */
export const degit = mkPackage(
  nixRaw`pkgs.degit`,
  "Make copies of git repositories",
);

/**
 * Tool to find and optionally remove unneeded includes in C or C++ source files
 */
export const deheader = mkPackage(
  nixRaw`pkgs.deheader`,
  "Tool to find and optionally remove unneeded includes in C or C++ source files",
);

/**
 * Letsencrypt/acme client implemented as a shell-script
 */
export const dehydrated = mkPackage(
  nixRaw`pkgs.dehydrated`,
  "Letsencrypt/acme client implemented as a shell-script",
);

/**
 * A simple backup tool
 */
export const deja_dup = mkPackage(
  nixRaw`pkgs.deja-dup`,
  "A simple backup tool",
);

/**
 * Framework for testing other programs
 */
export const dejagnu = mkPackage(
  nixRaw`pkgs.dejagnu`,
  "Framework for testing other programs",
);

/**
 * A typeface family based on the Bitstream Vera fonts
 */
export const dejavu_fonts = mkPackage(
  nixRaw`pkgs.dejavu_fonts`,
  "A typeface family based on the Bitstream Vera fonts",
);

export const dejavu_fontsEnv = mkPackage(
  nixRaw`pkgs.dejavu_fontsEnv`,
  "",
);

/**
 * Decompress Mozilla Firefox bookmarks backup files
 */
export const dejsonlz4 = mkPackage(
  nixRaw`pkgs.dejsonlz4`,
  "Decompress Mozilla Firefox bookmarks backup files",
);

/**
 * A visual, musical editor for delay effects
 */
export const delayarchitect = mkPackage(
  nixRaw`pkgs.delayarchitect`,
  "A visual, musical editor for delay effects",
);

/**
 * Archetype data for the Deliantra free MMORPG
 */
export const deliantra_arch = mkPackage(
  nixRaw`pkgs.deliantra-arch`,
  "Archetype data for the Deliantra free MMORPG",
);

/**
 * Combined game data (maps + archetypes) for the Deliantra free MMORPG
 */
export const deliantra_data = mkPackage(
  nixRaw`pkgs.deliantra-data`,
  "Combined game data (maps + archetypes) for the Deliantra free MMORPG",
);

/**
 * Map data for the Deliantra free MMORPG
 */
export const deliantra_maps = mkPackage(
  nixRaw`pkgs.deliantra-maps`,
  "Map data for the Deliantra free MMORPG",
);

/**
 * Server for the Deliantra free MMORPG
 */
export const deliantra_server = mkPackage(
  nixRaw`pkgs.deliantra-server`,
  "Server for the Deliantra free MMORPG",
);

export const dell_530cdn = mkPackage(
  nixRaw`pkgs.dell-530cdn`,
  "",
);

/**
 * Configure BIOS settings on Dell laptops.
 */
export const dell_command_configure = mkPackage(
  nixRaw`pkgs.dell-command-configure`,
  "Configure BIOS settings on Dell laptops.",
);

/**
 * Structural variant caller for mapped DNA sequenced data
 */
export const delly = mkPackage(
  nixRaw`pkgs.delly`,
  "Structural variant caller for mapped DNA sequenced data",
);

/**
 * A syntax-highlighting pager for git
 */
export const delta = mkPackage(
  nixRaw`pkgs.delta`,
  "A syntax-highlighting pager for git",
);

/**
 * Lightweight Delta Chat client
 */
export const deltachat_cursed = mkPackage(
  nixRaw`pkgs.deltachat-cursed`,
  "Lightweight Delta Chat client",
);

/**
 * Email-based instant messaging for Desktop
 */
export const deltachat_desktop = mkPackage(
  nixRaw`pkgs.deltachat-desktop`,
  "Email-based instant messaging for Desktop",
);

/**
 * Torrent client
 */
export const deluge = mkPackage(
  nixRaw`pkgs.deluge`,
  "Torrent client",
);

/**
 * Torrent client
 */
export const deluge_2_x = mkPackage(
  nixRaw`pkgs.deluge-2_x`,
  "Torrent client",
);

/**
 * Torrent client
 */
export const deluge_gtk = mkPackage(
  nixRaw`pkgs.deluge-gtk`,
  "Torrent client",
);

/**
 * Torrent client
 */
export const deluged = mkPackage(
  nixRaw`pkgs.deluged`,
  "Torrent client",
);

/**
 * debugger for the Go programming language
 */
export const delve = mkPackage(
  nixRaw`pkgs.delve`,
  "debugger for the Go programming language",
);

/**
 * Live coding demos without Context Switching
 */
export const demoit = mkPackage(
  nixRaw`pkgs.demoit`,
  "Live coding demos without Context Switching",
);

/**
 * Personal finance manager for GNOME
 */
export const denaro = mkPackage(
  nixRaw`pkgs.denaro`,
  "Personal finance manager for GNOME",
);

/**
 * A second-generation Matrix homeserver written in Go
 */
export const dendrite = mkPackage(
  nixRaw`pkgs.dendrite`,
  "A second-generation Matrix homeserver written in Go",
);

/**
 * Music notation and composition software used with lilypond
 */
export const denemo = mkPackage(
  nixRaw`pkgs.denemo`,
  "Music notation and composition software used with lilypond",
);

/**
 * A secure runtime for JavaScript and TypeScript
 */
export const deno = mkPackage(
  nixRaw`pkgs.deno`,
  "A secure runtime for JavaScript and TypeScript",
);

/**
 * Go dependency management tool
 */
export const dep = mkPackage(
  nixRaw`pkgs.dep`,
  "Go dependency management tool",
);

/**
 * Convert `Gopkg.lock` files from golang dep into `deps.nix`
 */
export const dep2nix = mkPackage(
  nixRaw`pkgs.dep2nix`,
  "Convert `Gopkg.lock` files from golang dep into `deps.nix`",
);

/**
 * Multi-profile Nix-flake deploy tool
 */
export const deploy_rs = mkPackage(
  nixRaw`pkgs.deploy-rs`,
  "Multi-profile Nix-flake deploy tool",
);

/**
 * Steam depot downloader utilizing the SteamKit2 library
 */
export const depotdownloader = mkPackage(
  nixRaw`pkgs.depotdownloader`,
  "Steam depot downloader utilizing the SteamKit2 library",
);

/**
 * A VK-GL-CTS/dEQP wrapper program to parallelize it across CPUs and report results against a baseline
 */
export const deqp_runner = mkPackage(
  nixRaw`pkgs.deqp-runner`,
  "A VK-GL-CTS/dEQP wrapper program to parallelize it across CPUs and report results against a baseline",
);

        /**
         * A small human-editable language to emit DER or BER encodings of ASN.1
structures and malformed variants of them

         */
export const der_ascii = mkPackage(
  nixRaw`pkgs.der-ascii`,
  "A small human-editable language to emit DER or BER encodings of ASN.1\nstructures and malformed variants of them\n",
);

/**
 * Descent 1 assets from GOG
 */
export const descent1_assets = mkPackage(
  nixRaw`pkgs.descent1-assets`,
  "Descent 1 assets from GOG",
);

/**
 * Descent 2 assets from GOG
 */
export const descent2_assets = mkPackage(
  nixRaw`pkgs.descent2-assets`,
  "Descent 2 assets from GOG",
);

/**
 * A command line tool for deskewing scanned text documents
 */
export const deskew = mkPackage(
  nixRaw`pkgs.deskew`,
  "A command line tool for deskewing scanned text documents",
);

export const desktopToDarwinBundle = mkPackage(
  nixRaw`pkgs.desktopToDarwinBundle`,
  "",
);

/**
 * Command line utilities for working with .desktop files
 */
export const desktop_file_utils = mkPackage(
  nixRaw`pkgs.desktop-file-utils`,
  "Command line utilities for working with .desktop files",
);

/**
 * An open-source Nintendo DS emulator
 */
export const desmume = mkPackage(
  nixRaw`pkgs.desmume`,
  "An open-source Nintendo DS emulator",
);

/**
 * Content-addressed binary distribution system
 */
export const desync = mkPackage(
  nixRaw`pkgs.desync`,
  "Content-addressed binary distribution system",
);

/**
 * An enterprise friendly way of detecting and preventing secrets in code
 */
export const detect_secrets = mkPackage(
  nixRaw`pkgs.detect-secrets`,
  "An enterprise friendly way of detecting and preventing secrets in code",
);

/**
 * Static code analysis for Kotlin
 */
export const detekt = mkPackage(
  nixRaw`pkgs.detekt`,
  "Static code analysis for Kotlin",
);

/**
 * Print certain system information (hardcoded with lib/system values)
 */
export const deterministic_uname = mkPackage(
  nixRaw`pkgs.deterministic-uname`,
  "Print certain system information (hardcoded with lib/system values)",
);

/**
 * Utility designed to clean up filenames
 */
export const detox = mkPackage(
  nixRaw`pkgs.detox`,
  "Utility designed to clean up filenames",
);

/**
 * C compiler, assembler and linker environment for the production of 8086 executables
 */
export const dev86 = mkPackage(
  nixRaw`pkgs.dev86`,
  "C compiler, assembler and linker environment for the production of 8086 executables",
);

/**
 * Instant, easy, predictable shells and containers.
 */
export const devbox = mkPackage(
  nixRaw`pkgs.devbox`,
  "Instant, easy, predictable shells and containers.",
);

/**
 * A local webserver for developers
 */
export const devd = mkPackage(
  nixRaw`pkgs.devd`,
  "A local webserver for developers",
);

/**
 * A full-featured desktop app for DevDocs.io
 */
export const devdocs_desktop = mkPackage(
  nixRaw`pkgs.devdocs-desktop`,
  "A full-featured desktop app for DevDocs.io",
);

/**
 * DVD Creator for Linux
 */
export const devede = mkPackage(
  nixRaw`pkgs.devede`,
  "DVD Creator for Linux",
);

/**
 * DTBs for the Raspberry Pi
 */
export const device_tree_rpi = mkPackage(
  nixRaw`pkgs.device-tree_rpi`,
  "DTBs for the Raspberry Pi",
);

/**
 * A window matching utility
 */
export const devilspie2 = mkPackage(
  nixRaw`pkgs.devilspie2`,
  "A window matching utility",
);

/**
 * Diablo build for modern operating systems
 */
export const devilutionx = mkPackage(
  nixRaw`pkgs.devilutionx`,
  "Diablo build for modern operating systems",
);

/**
 * Simple program to read/write from/to any location in memory
 */
export const devmem2 = mkPackage(
  nixRaw`pkgs.devmem2`,
  "Simple program to read/write from/to any location in memory",
);

/**
 * Devour hides your current window when launching an external program
 */
export const devour = mkPackage(
  nixRaw`pkgs.devour`,
  "Devour hides your current window when launching an external program",
);

/**
 * Client for devpi, a pypi index server and packaging meta tool
 */
export const devpi_client = mkPackage(
  nixRaw`pkgs.devpi-client`,
  "Client for devpi, a pypi index server and packaging meta tool",
);

/**
 * Github-style pypi index server and packaging meta tool
 */
export const devpi_server = mkPackage(
  nixRaw`pkgs.devpi-server`,
  "Github-style pypi index server and packaging meta tool",
);

/**
 * DevSpace is an open-source developer tool for Kubernetes that lets you develop and deploy cloud-native software faster
 */
export const devspace = mkPackage(
  nixRaw`pkgs.devspace`,
  "DevSpace is an open-source developer tool for Kubernetes that lets you develop and deploy cloud-native software faster",
);

/**
 * A hierarchical command-line task manager
 */
export const devtodo = mkPackage(
  nixRaw`pkgs.devtodo`,
  "A hierarchical command-line task manager",
);

/**
 * A program to generate and execute DesktopEntry files of the Application type
 */
export const dex = mkPackage(
  nixRaw`pkgs.dex`,
  "A program to generate and execute DesktopEntry files of the Application type",
);

/**
 * Tools to work with android .dex and java .class files
 */
export const dex2jar = mkPackage(
  nixRaw`pkgs.dex2jar`,
  "Tools to work with android .dex and java .class files",
);

/**
 * OpenID Connect and OAuth2 identity provider with pluggable connectors
 */
export const dex_oidc = mkPackage(
  nixRaw`pkgs.dex-oidc`,
  "OpenID Connect and OAuth2 identity provider with pluggable connectors",
);

/**
 * DX7 FM multi platform/multi format plugin
 */
export const dexed = mkPackage(
  nixRaw`pkgs.dexed`,
  "DX7 FM multi platform/multi format plugin",
);

/**
 * Analyse and compare audio files in time and frequency
 */
export const dfasma = mkPackage(
  nixRaw`pkgs.dfasma`,
  "Analyse and compare audio files in time and frequency",
);

/**
 * Displays file system space usage using graphs and colors
 */
export const dfc = mkPackage(
  nixRaw`pkgs.dfc`,
  "Displays file system space usage using graphs and colors",
);

/**
 * D-Feet is an easy to use D-Bus debugger
 */
export const dfeet = mkPackage(
  nixRaw`pkgs.dfeet`,
  "D-Feet is an easy to use D-Bus debugger",
);

/**
 * File manager written in Qt/C++
 */
export const dfilemanager = mkPackage(
  nixRaw`pkgs.dfilemanager`,
  "File manager written in Qt/C++",
);

/**
 * Format paragraphs, comments and doc strings
 */
export const dfmt = mkPackage(
  nixRaw`pkgs.dfmt`,
  "Format paragraphs, comments and doc strings",
);

/**
 * Display file system space usage using graphs and colors
 */
export const dfrs = mkPackage(
  nixRaw`pkgs.dfrs`,
  "Display file system space usage using graphs and colors",
);

/**
 * Generally Applicable Atomic-Charge Dependent London Dispersion Correction
 */
export const dftd4 = mkPackage(
  nixRaw`pkgs.dftd4`,
  "Generally Applicable Atomic-Charge Dependent London Dispersion Correction",
);

/**
 * A Device Firmware Update based USB programmer for Atmel chips with a USB bootloader
 */
export const dfu_programmer = mkPackage(
  nixRaw`pkgs.dfu-programmer`,
  "A Device Firmware Update based USB programmer for Atmel chips with a USB bootloader",
);

/**
 * Device firmware update (DFU) USB programmer
 */
export const dfu_util = mkPackage(
  nixRaw`pkgs.dfu-util`,
  "Device firmware update (DFU) USB programmer",
);

/**
 * Sega Genesis/Mega Drive emulator
 */
export const dgen_sdl = mkPackage(
  nixRaw`pkgs.dgen-sdl`,
  "Sega Genesis/Mega Drive emulator",
);

/**
 * Convenience wrapper around goss that aims to bring the simplicity of goss to docker containers
 */
export const dgoss = mkPackage(
  nixRaw`pkgs.dgoss`,
  "Convenience wrapper around goss that aims to bring the simplicity of goss to docker containers",
);

/**
 * Fast, Distributed Graph DB
 */
export const dgraph = mkPackage(
  nixRaw`pkgs.dgraph`,
  "Fast, Distributed Graph DB",
);

/**
 * A configuration language guaranteed to terminate
 */
export const dhall = mkPackage(
  nixRaw`pkgs.dhall`,
  "A configuration language guaranteed to terminate",
);

/**
 * Compile Dhall to Bash
 */
export const dhall_bash = mkPackage(
  nixRaw`pkgs.dhall-bash`,
  "Compile Dhall to Bash",
);

/**
 * Generate HTML docs from a dhall package
 */
export const dhall_docs = mkPackage(
  nixRaw`pkgs.dhall-docs`,
  "Generate HTML docs from a dhall package",
);

/**
 * Convert between Dhall and JSON or YAML
 */
export const dhall_json = mkPackage(
  nixRaw`pkgs.dhall-json`,
  "Convert between Dhall and JSON or YAML",
);

/**
 * Dhall to Nix compiler
 */
export const dhall_nix = mkPackage(
  nixRaw`pkgs.dhall-nix`,
  "Dhall to Nix compiler",
);

/**
 * Convert Dhall projects to Nix packages
 */
export const dhall_nixpkgs = mkPackage(
  nixRaw`pkgs.dhall-nixpkgs`,
  "Convert Dhall projects to Nix packages",
);

/**
 * Convert between Dhall and YAML
 */
export const dhall_yaml = mkPackage(
  nixRaw`pkgs.dhall-yaml`,
  "Convert between Dhall and YAML",
);

/**
 * A client for the Dynamic Host Configuration Protocol (DHCP)
 */
export const dhcpcd = mkPackage(
  nixRaw`pkgs.dhcpcd`,
  "A client for the Dynamic Host Configuration Protocol (DHCP)",
);

/**
 * A tool for visualization of DHCP packets as recorded and output by tcpdump to analyze DHCP server responses
 */
export const dhcpdump = mkPackage(
  nixRaw`pkgs.dhcpdump`,
  "A tool for visualization of DHCP packets as recorded and output by tcpdump to analyze DHCP server responses",
);

/**
 * Send DHCP request to find out if a DHCP server is running
 */
export const dhcping = mkPackage(
  nixRaw`pkgs.dhcping`,
  "Send DHCP request to find out if a DHCP server is running",
);

/**
 * Doom 3 port to SDL
 */
export const dhewm3 = mkPackage(
  nixRaw`pkgs.dhewm3`,
  "Doom 3 port to SDL",
);

/**
 * A themeable hex editor with diff mode
 */
export const dhex = mkPackage(
  nixRaw`pkgs.dhex`,
  "A themeable hex editor with diff mode",
);

/**
 * BitTorrent DHT library
 */
export const dht = mkPackage(
  nixRaw`pkgs.dht`,
  "BitTorrent DHT library",
);

/**
 * Disk information utility; displays everything 'df' does and more
 */
export const di = mkPackage(
  nixRaw`pkgs.di`,
  "Disk information utility; displays everything 'df' does and more",
);

/**
 * Gnome Diagram drawing software
 */
export const dia = mkPackage(
  nixRaw`pkgs.dia`,
  "Gnome Diagram drawing software",
);

/**
 * hint-based build service for the diagrams graphics EDSL
 */
export const diagrams_builder = mkPackage(
  nixRaw`pkgs.diagrams-builder`,
  "hint-based build service for the diagrams graphics EDSL",
);

/**
 * A translation app for GNOME
 */
export const dialect = mkPackage(
  nixRaw`pkgs.dialect`,
  "A translation app for GNOME",
);

/**
 * Display dialog boxes from shell
 */
export const dialog = mkPackage(
  nixRaw`pkgs.dialog`,
  "Display dialog boxes from shell",
);

/**
 * Qt-based scriptable engine providing GUI dialog boxes
 */
export const dialogbox = mkPackage(
  nixRaw`pkgs.dialogbox`,
  "Qt-based scriptable engine providing GUI dialog boxes",
);

/**
 * Accelerated BLAST compatible local sequence aligner
 */
export const diamond = mkPackage(
  nixRaw`pkgs.diamond`,
  "Accelerated BLAST compatible local sequence aligner",
);

/**
 * Portable DHCPv6 implementation
 */
export const dibbler = mkPackage(
  nixRaw`pkgs.dibbler`,
  "Portable DHCPv6 implementation",
);

/**
 * Generates passphrases by concatenating words randomly picked from wordlists
 */
export const diceware = mkPackage(
  nixRaw`pkgs.diceware`,
  "Generates passphrases by concatenating words randomly picked from wordlists",
);

/**
 * Flexible dictionary server and client implementing RFC 2229
 */
export const dico = mkPackage(
  nixRaw`pkgs.dico`,
  "Flexible dictionary server and client implementing RFC 2229",
);

/**
 * Dict protocol server and client
 */
export const dict = mkPackage(
  nixRaw`pkgs.dict`,
  "Dict protocol server and client",
);

/**
 * Unofficial command line client for dict.cc
 */
export const dict_cc_py = mkPackage(
  nixRaw`pkgs.dict-cc-py`,
  "Unofficial command line client for dict.cc",
);

/**
 * GNU style and diction utilities
 */
export const diction = mkPackage(
  nixRaw`pkgs.diction`,
  "GNU style and diction utilities",
);

/**
 * High-level dynamically typed, multi-paradigm, interpreted programming language
 */
export const dictu = mkPackage(
  nixRaw`pkgs.dictu`,
  "High-level dynamically typed, multi-paradigm, interpreted programming language",
);

/**
 * An extensive, fast, and accurate command-line image dithering tool
 */
export const didder = mkPackage(
  nixRaw`pkgs.didder`,
  "An extensive, fast, and accurate command-line image dithering tool",
);

/**
 * Duration conversion between units
 */
export const didu = mkPackage(
  nixRaw`pkgs.didu`,
  "Duration conversion between units",
);

/**
 * A CLI spelling corrector for when you're unsure
 */
export const didyoumean = mkPackage(
  nixRaw`pkgs.didyoumean`,
  "A CLI spelling corrector for when you're unsure",
);

export const dieHook = mkPackage(
  nixRaw`pkgs.dieHook`,
  "",
);

/**
 * GTK4 frontend for the travel information of the german railway
 */
export const diebahn = mkPackage(
  nixRaw`pkgs.diebahn`,
  "GTK4 frontend for the travel information of the german railway",
);

/**
 * A Random Number Generator test suite
 */
export const dieharder = mkPackage(
  nixRaw`pkgs.dieharder`,
  "A Random Number Generator test suite",
);

/**
 * Database tool for working with Rust projects that use Diesel
 */
export const diesel_cli = mkPackage(
  nixRaw`pkgs.diesel-cli`,
  "Database tool for working with Rust projects that use Diesel",
);

/**
 * Provides different tools for projects using the diesel_cli
 */
export const diesel_cli_ext = mkPackage(
  nixRaw`pkgs.diesel-cli-ext`,
  "Provides different tools for projects using the diesel_cli",
);

/**
 * Simple tool for visually comparing two PDF files
 */
export const diff_pdf = mkPackage(
  nixRaw`pkgs.diff-pdf`,
  "Simple tool for visually comparing two PDF files",
);

/**
 * Good-looking diffs filter for git
 */
export const diff_so_fancy = mkPackage(
  nixRaw`pkgs.diff-so-fancy`,
  "Good-looking diffs filter for git",
);

/**
 * Diff for Docker and OCI container images
 */
export const diffoci = mkPackage(
  nixRaw`pkgs.diffoci`,
  "Diff for Docker and OCI container images",
);

/**
 * Perform in-depth comparison of files, archives, and directories
 */
export const diffoscope = mkPackage(
  nixRaw`pkgs.diffoscope`,
  "Perform in-depth comparison of files, archives, and directories",
);

/**
 * Perform in-depth comparison of files, archives, and directories
 */
export const diffoscopeMinimal = mkPackage(
  nixRaw`pkgs.diffoscopeMinimal`,
  "Perform in-depth comparison of files, archives, and directories",
);

/**
 * Tool for diffing pdf files visually or textually
 */
export const diffpdf = mkPackage(
  nixRaw`pkgs.diffpdf`,
  "Tool for diffing pdf files visually or textually",
);

/**
 * Yet another diff highlighting tool
 */
export const diffr = mkPackage(
  nixRaw`pkgs.diffr`,
  "Yet another diff highlighting tool",
);

/**
 * A tree-sitter based AST difftool to get meaningful semantic diffs
 */
export const diffsitter = mkPackage(
  nixRaw`pkgs.diffsitter`,
  "A tree-sitter based AST difftool to get meaningful semantic diffs",
);

/**
 * Read output of diff and display a histogram of the changes
 */
export const diffstat = mkPackage(
  nixRaw`pkgs.diffstat`,
  "Read output of diff and display a histogram of the changes",
);

/**
 * A syntax-aware diff
 */
export const difftastic = mkPackage(
  nixRaw`pkgs.difftastic`,
  "A syntax-aware diff",
);

/**
 * Graphical tool for merging and comparing text files
 */
export const diffuse = mkPackage(
  nixRaw`pkgs.diffuse`,
  "Graphical tool for merging and comparing text files",
);

/**
 * Commands for showing the differences between files (diff, cmp, etc.)
 */
export const diffutils = mkPackage(
  nixRaw`pkgs.diffutils`,
  "Commands for showing the differences between files (diff, cmp, etc.)",
);

/**
 * Domain name server
 */
export const dig = mkPackage(
  nixRaw`pkgs.dig`,
  "Domain name server",
);

/**
 * tools for decoding digital ham communication
 */
export const digiham = mkPackage(
  nixRaw`pkgs.digiham`,
  "tools for decoding digital ham communication",
);

/**
 * Photo Management Program
 */
export const digikam = mkPackage(
  nixRaw`pkgs.digikam`,
  "Photo Management Program",
);

/**
 * A digital logic designer and circuit simulator.
 */
export const digital = mkPackage(
  nixRaw`pkgs.digital`,
  "A digital logic designer and circuit simulator.",
);

/**
 * A QT based application for the Digital Bitbox hardware wallet
 */
export const digitalbitbox = mkPackage(
  nixRaw`pkgs.digitalbitbox`,
  "A QT based application for the Digital Bitbox hardware wallet",
);

/**
 * Temperature logging and reporting using Maxim's iButtons and 1-Wire protocol
 */
export const digitemp = mkPackage(
  nixRaw`pkgs.digitemp`,
  "Temperature logging and reporting using Maxim's iButtons and 1-Wire protocol",
);

/**
 * Scriptable, curses-based, digital habit tracker
 */
export const dijo = mkPackage(
  nixRaw`pkgs.dijo`,
  "Scriptable, curses-based, digital habit tracker",
);

/**
 * A fast graphical web browser with a small footprint
 */
export const dillo = mkPackage(
  nixRaw`pkgs.dillo`,
  "A fast graphical web browser with a small footprint",
);

/**
 * Fork of Dillo, a lightweight web browser
 */
export const dillong = mkPackage(
  nixRaw`pkgs.dillong`,
  "Fork of Dillo, a lightweight web browser",
);

/**
 * A monospace bitmap font aimed at programmers
 */
export const dina_font = mkPackage(
  nixRaw`pkgs.dina-font`,
  "A monospace bitmap font aimed at programmers",
);

/**
 * Simple and fast dictionary lookup tool
 */
export const ding = mkPackage(
  nixRaw`pkgs.ding`,
  "Simple and fast dictionary lookup tool",
);

/**
 * 'D is not GLib' utility libraries
 */
export const ding_libs = mkPackage(
  nixRaw`pkgs.ding-libs`,
  "'D is not GLib' utility libraries",
);

/**
 * A GitHub activity digest tool
 */
export const dinghy = mkPackage(
  nixRaw`pkgs.dinghy`,
  "A GitHub activity digest tool",
);

/**
 * Modern Jabber/XMPP Client using GTK/Vala
 */
export const dino = mkPackage(
  nixRaw`pkgs.dino`,
  "Modern Jabber/XMPP Client using GTK/Vala",
);

/**
 * An I/O forwarding server that implements a variant of the 9P protocol
 */
export const diod = mkPackage(
  nixRaw`pkgs.diod`,
  "An I/O forwarding server that implements a variant of the 9P protocol",
);

/**
 * A totally original phase rotation plugin
 */
export const diopser = mkPackage(
  nixRaw`pkgs.diopser`,
  "A totally original phase rotation plugin",
);

/**
 * CLI tool for developing, testing, and publishing Dioxus apps
 */
export const dioxus_cli = mkPackage(
  nixRaw`pkgs.dioxus-cli`,
  "CLI tool for developing, testing, and publishing Dioxus apps",
);

/**
 * Calculate display info like DPI and aspect ratio
 */
export const dippi = mkPackage(
  nixRaw`pkgs.dippi`,
  "Calculate display info like DPI and aspect ratio",
);

/**
 * A web content scanner
 */
export const dirb = mkPackage(
  nixRaw`pkgs.dirb`,
  "A web content scanner",
);

/**
 * Graphical directory tree diff and merge tool
 */
export const dirdiff = mkPackage(
  nixRaw`pkgs.dirdiff`,
  "Graphical directory tree diff and merge tool",
);

/**
 * Graphics and input library designed with embedded systems in mind
 */
export const directfb = mkPackage(
  nixRaw`pkgs.directfb`,
  "Graphics and input library designed with embedded systems in mind",
);

/**
 * DirectFB VNC client
 */
export const directvnc = mkPackage(
  nixRaw`pkgs.directvnc`,
  "DirectFB VNC client",
);

/**
 * Official D3D12 headers from Microsoft
 */
export const directx_headers = mkPackage(
  nixRaw`pkgs.directx-headers`,
  "Official D3D12 headers from Microsoft",
);

/**
 * A compiler to compile HLSL programs into DXIL and SPIR-V
 */
export const directx_shader_compiler = mkPackage(
  nixRaw`pkgs.directx-shader-compiler`,
  "A compiler to compile HLSL programs into DXIL and SPIR-V",
);

/**
 * A shell extension that manages your environment
 */
export const direnv = mkPackage(
  nixRaw`pkgs.direnv`,
  "A shell extension that manages your environment",
);

/**
 * Directory event monitoring daemon
 */
export const direvent = mkPackage(
  nixRaw`pkgs.direvent`,
  "Directory event monitoring daemon",
);

/**
 * A Soundcard Packet TNC, APRS Digipeater, IGate, APRStt gateway
 */
export const direwolf = mkPackage(
  nixRaw`pkgs.direwolf`,
  "A Soundcard Packet TNC, APRS Digipeater, IGate, APRStt gateway",
);

/**
 * Tool to brute force paths on web servers
 */
export const dirstalk = mkPackage(
  nixRaw`pkgs.dirstalk`,
  "Tool to brute force paths on web servers",
);

/**
 * An unimpressive thingie for playing bits of samples with some level of accuracy
 */
export const dirt = mkPackage(
  nixRaw`pkgs.dirt`,
  "An unimpressive thingie for playing bits of samples with some level of accuracy",
);

/**
 * Fast, disk based, rotating network backup system
 */
export const dirvish = mkPackage(
  nixRaw`pkgs.dirvish`,
  "Fast, disk based, rotating network backup system",
);

/**
 * A tiny Discord css-injector
 */
export const discocss = mkPackage(
  nixRaw`pkgs.discocss`,
  "A tiny Discord css-injector",
);

/**
 * All-in-one cross-platform voice and text chat for gamers
 */
export const discord = mkPackage(
  nixRaw`pkgs.discord`,
  "All-in-one cross-platform voice and text chat for gamers",
);

/**
 * All-in-one cross-platform voice and text chat for gamers
 */
export const discord_canary = mkPackage(
  nixRaw`pkgs.discord-canary`,
  "All-in-one cross-platform voice and text chat for gamers",
);

/**
 * All-in-one cross-platform voice and text chat for gamers
 */
export const discord_development = mkPackage(
  nixRaw`pkgs.discord-development`,
  "All-in-one cross-platform voice and text chat for gamers",
);

/**
 * Library to allow other programs to interact with the Discord desktop application
 */
export const discord_gamesdk = mkPackage(
  nixRaw`pkgs.discord-gamesdk`,
  "Library to allow other programs to interact with the Discord desktop application",
);

/**
 * All-in-one cross-platform voice and text chat for gamers
 */
export const discord_ptb = mkPackage(
  nixRaw`pkgs.discord-ptb`,
  "All-in-one cross-platform voice and text chat for gamers",
);

/**
 * Official library to interface with the Discord client
 */
export const discord_rpc = mkPackage(
  nixRaw`pkgs.discord-rpc`,
  "Official library to interface with the Discord client",
);

/**
 * Write-only command-line Discord webhook integration written in 100% Bash script
 */
export const discord_sh = mkPackage(
  nixRaw`pkgs.discord-sh`,
  "Write-only command-line Discord webhook integration written in 100% Bash script",
);

/**
 * A tool to export Discord chat logs to a file
 */
export const discordchatexporter_cli = mkPackage(
  nixRaw`pkgs.discordchatexporter-cli`,
  "A tool to export Discord chat logs to a file",
);

/**
 * A lightweight, secure, and feature-rich Discord terminal client
 */
export const discordo = mkPackage(
  nixRaw`pkgs.discordo`,
  "A lightweight, secure, and feature-rich Discord terminal client",
);

/**
 * Implementation of Markdown markup language in C
 */
export const discount = mkPackage(
  nixRaw`pkgs.discount`,
  "Implementation of Markdown markup language in C",
);

/**
 * Discourse is an open source discussion platform
 */
export const discourse = mkPackage(
  nixRaw`pkgs.discourse`,
  "Discourse is an open source discussion platform",
);

/**
 * Discourse is an open source discussion platform
 */
export const discourseAllPlugins = mkPackage(
  nixRaw`pkgs.discourseAllPlugins`,
  "Discourse is an open source discussion platform",
);

/**
 * A helper program which receives incoming mail for Discourse
 */
export const discourse_mail_receiver = mkPackage(
  nixRaw`pkgs.discourse-mail-receiver`,
  "A helper program which receives incoming mail for Discourse",
);

/**
 * Yet another *nix distro fetching program, but less complex
 */
export const disfetch = mkPackage(
  nixRaw`pkgs.disfetch`,
  "Yet another *nix distro fetching program, but less complex",
);

/**
 * Simple program to detect bad disks by filling them with random data
 */
export const disk_filltest = mkPackage(
  nixRaw`pkgs.disk-filltest`,
  "Simple program to detect bad disks by filling them with random data",
);

/**
 * A program that will turn a LED into a hard disk indicator
 */
export const disk_indicator = mkPackage(
  nixRaw`pkgs.disk_indicator`,
  "A program that will turn a LED into a hard disk indicator",
);

/**
 * Disk usage utility for Mac OS X
 */
export const disk_inventory_x = mkPackage(
  nixRaw`pkgs.disk-inventory-x`,
  "Disk usage utility for Mac OS X",
);

/**
 * Terminal disk space navigator
 */
export const diskonaut = mkPackage(
  nixRaw`pkgs.diskonaut`,
  "Terminal disk space navigator",
);

/**
 * Rsync for block devices and disk images
 */
export const diskrsync = mkPackage(
  nixRaw`pkgs.diskrsync`,
  "Rsync for block devices and disk images",
);

/**
 * Scan HDD/SSD for failed and near failed sectors
 */
export const diskscan = mkPackage(
  nixRaw`pkgs.diskscan`,
  "Scan HDD/SSD for failed and near failed sectors",
);

/**
 * A minimal, fast alternative to 'du -sh'
 */
export const diskus = mkPackage(
  nixRaw`pkgs.diskus`,
  "A minimal, fast alternative to 'du -sh'",
);

/**
 * Read BitLocker encrypted partitions in Linux
 */
export const dislocker = mkPackage(
  nixRaw`pkgs.dislocker`,
  "Read BitLocker encrypted partitions in Linux",
);

/**
 * Asset discovery and identification tools
 */
export const dismap = mkPackage(
  nixRaw`pkgs.dismap`,
  "Asset discovery and identification tools",
);

/**
 * Tool to scan memory for secrets
 */
export const dismember = mkPackage(
  nixRaw`pkgs.dismember`,
  "Tool to scan memory for secrets",
);

/**
 * A Nix-based distributed service deployment tool
 */
export const disnix = mkPackage(
  nixRaw`pkgs.disnix`,
  "A Nix-based distributed service deployment tool",
);

/**
 * Provides complementary NixOS infrastructure deployment to Disnix
 */
export const disnixos = mkPackage(
  nixRaw`pkgs.disnixos`,
  "Provides complementary NixOS infrastructure deployment to Disnix",
);

/**
 * An overlay FUSE filesystem that introduces non-determinism into filesystem metadata
 */
export const disorderfs = mkPackage(
  nixRaw`pkgs.disorderfs`,
  "An overlay FUSE filesystem that introduces non-determinism into filesystem metadata",
);

/**
 * A small daemon for disabling trackpads while typing
 */
export const dispad = mkPackage(
  nixRaw`pkgs.dispad`,
  "A small daemon for disabling trackpads while typing",
);

/**
 * Display calibration and characterization powered by Argyll CMS (Migrated to Python 3)
 */
export const displaycal = mkPackage(
  nixRaw`pkgs.displaycal`,
  "Display calibration and characterization powered by Argyll CMS (Migrated to Python 3)",
);

/**
 * DisplayLink DL-5xxx, DL-41xx and DL-3x00 Driver for Linux
 */
export const displaylink = mkPackage(
  nixRaw`pkgs.displaylink`,
  "DisplayLink DL-5xxx, DL-41xx and DL-3x00 Driver for Linux",
);

/**
 * A fast, free distributed C/C++ compiler
 */
export const distcc = mkPackage(
  nixRaw`pkgs.distcc`,
  "A fast, free distributed C/C++ compiler",
);

export const distccMasquerade = mkPackage(
  nixRaw`pkgs.distccMasquerade`,
  "",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const distccStdenv = mkPackage(
  nixRaw`pkgs.distccStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * System C compiler (wrapper script)
 */
export const distccWrapper = mkPackage(
  nixRaw`pkgs.distccWrapper`,
  "System C compiler (wrapper script)",
);

/**
 * Templating system/generator for distributions
 */
export const distgen = mkPackage(
  nixRaw`pkgs.distgen`,
  "Templating system/generator for distributions",
);

/**
 * Linux audio plugins and LV2 ports
 */
export const distrho = mkPackage(
  nixRaw`pkgs.distrho`,
  "Linux audio plugins and LV2 ports",
);

/**
 * Wrapper around podman or docker to create and start containers
 */
export const distrobox = mkPackage(
  nixRaw`pkgs.distrobox`,
  "Wrapper around podman or docker to create and start containers",
);

/**
 * System container image builder for LXC and LXD
 */
export const distrobuilder = mkPackage(
  nixRaw`pkgs.distrobuilder`,
  "System container image builder for LXC and LXD",
);

/**
 * Distributed firewall
 */
export const diswall = mkPackage(
  nixRaw`pkgs.diswall`,
  "Distributed firewall",
);

/**
 * A console text editor for Unix that you already know how to use
 */
export const dit = mkPackage(
  nixRaw`pkgs.dit`,
  "A console text editor for Unix that you already know how to use",
);

/**
 * Convert ascii art diagrams into proper bitmap graphics
 */
export const ditaa = mkPackage(
  nixRaw`pkgs.ditaa`,
  "Convert ascii art diagrams into proper bitmap graphics",
);

/**
 * A tool for exploring each layer in a docker image
 */
export const dive = mkPackage(
  nixRaw`pkgs.dive`,
  "A tool for exploring each layer in a docker image",
);

/**
 * Multi platform circuit layout and schematic drawing tool
 */
export const diylc = mkPackage(
  nixRaw`pkgs.diylc`,
  "Multi platform circuit layout and schematic drawing tool",
);

/**
 * A collection of Domain Name System tools
 */
export const djbdns = mkPackage(
  nixRaw`pkgs.djbdns`,
  "A collection of Domain Name System tools",
);

        /**
         * A C program to generate random data using several random models,
with parameterized non uniformities and flexible output formats

         */
export const djenrandom = mkPackage(
  nixRaw`pkgs.djenrandom`,
  "A C program to generate random data using several random models,\nwith parameterized non uniformities and flexible output formats\n",
);

        /**
         * A reimplementation of the Fourmilab/John Walker random number test program
ent with several improvements

         */
export const djent = mkPackage(
  nixRaw`pkgs.djent`,
  "A reimplementation of the Fourmilab/John Walker random number test program\nent with several improvements\n",
);

/**
 * A complete 32-bit GNU-based development system for Intel x86 PCs running DOS
 */
export const djgpp = mkPackage(
  nixRaw`pkgs.djgpp`,
  "A complete 32-bit GNU-based development system for Intel x86 PCs running DOS",
);

/**
 * A complete 32-bit GNU-based development system for Intel x86 PCs running DOS
 */
export const djgpp_i586 = mkPackage(
  nixRaw`pkgs.djgpp_i586`,
  "A complete 32-bit GNU-based development system for Intel x86 PCs running DOS",
);

/**
 * A complete 32-bit GNU-based development system for Intel x86 PCs running DOS
 */
export const djgpp_i686 = mkPackage(
  nixRaw`pkgs.djgpp_i686`,
  "A complete 32-bit GNU-based development system for Intel x86 PCs running DOS",
);

/**
 * Django/Jinja template indenter
 */
export const djhtml = mkPackage(
  nixRaw`pkgs.djhtml`,
  "Django/Jinja template indenter",
);

/**
 * HTML Template Linter and Formatter. Django - Jinja - Nunjucks - Handlebars - GoLang
 */
export const djlint = mkPackage(
  nixRaw`pkgs.djlint`,
  "HTML Template Linter and Formatter. Django - Jinja - Nunjucks - Handlebars - GoLang",
);

/**
 * UPnP AV client, mounts as a Linux filesystem the media content of compatible UPnP AV devices
 */
export const djmount = mkPackage(
  nixRaw`pkgs.djmount`,
  "UPnP AV client, mounts as a Linux filesystem the media content of compatible UPnP AV devices",
);

/**
 * JavaScript implementation of djot
 */
export const djot_js = mkPackage(
  nixRaw`pkgs.djot-js`,
  "JavaScript implementation of djot",
);

/**
 * A professional review software for VFX, animation, and film production
 */
export const djv = mkPackage(
  nixRaw`pkgs.djv`,
  "A professional review software for VFX, animation, and film production",
);

/**
 * A portable DjVu viewer (Qt5) and browser (nsdejavu) plugin
 */
export const djview = mkPackage(
  nixRaw`pkgs.djview`,
  "A portable DjVu viewer (Qt5) and browser (nsdejavu) plugin",
);

/**
 * A portable DjVu viewer (Qt5) and browser (nsdejavu) plugin
 */
export const djview4 = mkPackage(
  nixRaw`pkgs.djview4`,
  "A portable DjVu viewer (Qt5) and browser (nsdejavu) plugin",
);

/**
 * Convert DjVu files to PDF files
 */
export const djvu2pdf = mkPackage(
  nixRaw`pkgs.djvu2pdf`,
  "Convert DjVu files to PDF files",
);

/**
 * The big set of CLI tools to make/modify/optimize/show/export DJVU files
 */
export const djvulibre = mkPackage(
  nixRaw`pkgs.djvulibre`,
  "The big set of CLI tools to make/modify/optimize/show/export DJVU files",
);

/**
 * A list based tiling window manager in the vein of dwm, bspwm, and xmonad
 */
export const dk = mkPackage(
  nixRaw`pkgs.dk`,
  "A list based tiling window manager in the vein of dwm, bspwm, and xmonad",
);

/**
 * Arbitrary-order scalar-relativistic Douglas-Kroll-Hess module
 */
export const dkh = mkPackage(
  nixRaw`pkgs.dkh`,
  "Arbitrary-order scalar-relativistic Douglas-Kroll-Hess module",
);

/**
 * SMTP-proxy that signs and/or verifies emails
 */
export const dkimproxy = mkPackage(
  nixRaw`pkgs.dkimproxy`,
  "SMTP-proxy that signs and/or verifies emails",
);

/**
 * DKIM + ARC email signing/verification tools + Python module
 */
export const dkimpy = mkPackage(
  nixRaw`pkgs.dkimpy`,
  "DKIM + ARC email signing/verification tools + Python module",
);

/**
 * Download sheet music
 */
export const dl_librescore = mkPackage(
  nixRaw`pkgs.dl-librescore`,
  "Download sheet music",
);

/**
 * DL_POLY Classic is a general purpose molecular dynamics simulation package
 */
export const dl_poly_classic_mpi = mkPackage(
  nixRaw`pkgs.dl-poly-classic-mpi`,
  "DL_POLY Classic is a general purpose molecular dynamics simulation package",
);

/**
 * A D-Bus API for the dLeyna services
 */
export const dleyna_connector_dbus = mkPackage(
  nixRaw`pkgs.dleyna-connector-dbus`,
  "A D-Bus API for the dLeyna services",
);

/**
 * Library of utility functions that are used by the higher level dLeyna
 */
export const dleyna_core = mkPackage(
  nixRaw`pkgs.dleyna-core`,
  "Library of utility functions that are used by the higher level dLeyna",
);

/**
 * Library to discover and manipulate Digital Media Renderers
 */
export const dleyna_renderer = mkPackage(
  nixRaw`pkgs.dleyna-renderer`,
  "Library to discover and manipulate Digital Media Renderers",
);

/**
 * Library to discover, browse and manipulate Digital Media Servers
 */
export const dleyna_server = mkPackage(
  nixRaw`pkgs.dleyna-server`,
  "Library to discover, browse and manipulate Digital Media Servers",
);

/**
 * A general purpose cross-platform C++ machine learning library
 */
export const dlib = mkPackage(
  nixRaw`pkgs.dlib`,
  "A general purpose cross-platform C++ machine learning library",
);

/**
 * An DLX simulator written in C
 */
export const dlx = mkPackage(
  nixRaw`pkgs.dlx`,
  "An DLX simulator written in C",
);

/**
 * A geometric sans-serif typeface
 */
export const dm_sans = mkPackage(
  nixRaw`pkgs.dm-sans`,
  "A geometric sans-serif typeface",
);

/**
 * Export Prometheus metrics from DMARC reports
 */
export const dmarc_metrics_exporter = mkPackage(
  nixRaw`pkgs.dmarc-metrics-exporter`,
  "Export Prometheus metrics from DMARC reports",
);

/**
 * Official reference compiler for the D language
 */
export const dmd = mkPackage(
  nixRaw`pkgs.dmd`,
  "Official reference compiler for the D language",
);

/**
 * Print German canteen menus using dmenu and OpenMensa
 */
export const dmensamenu = mkPackage(
  nixRaw`pkgs.dmensamenu`,
  "Print German canteen menus using dmenu and OpenMensa",
);

/**
 * A generic, highly customizable, and efficient menu for the X Window System
 */
export const dmenu = mkPackage(
  nixRaw`pkgs.dmenu`,
  "A generic, highly customizable, and efficient menu for the X Window System",
);

/**
 * A script that generates a dmenu menu that uses bluetoothctl to connect to bluetooth devices and display status info
 */
export const dmenu_bluetooth = mkPackage(
  nixRaw`pkgs.dmenu-bluetooth`,
  "A script that generates a dmenu menu that uses bluetoothctl to connect to bluetooth devices and display status info",
);

/**
 * A pixel perfect port of dmenu, rewritten in Rust with extensive plugin support
 */
export const dmenu_rs = mkPackage(
  nixRaw`pkgs.dmenu-rs`,
  "A pixel perfect port of dmenu, rewritten in Rust with extensive plugin support",
);

/**
 * An efficient dynamic menu for wayland (wlroots)
 */
export const dmenu_wayland = mkPackage(
  nixRaw`pkgs.dmenu-wayland`,
  "An efficient dynamic menu for wayland (wlroots)",
);

/**
 * An Apple's compressed dmg to standard (hfsplus) image disk file convert tool
 */
export const dmg2img = mkPackage(
  nixRaw`pkgs.dmg2img`,
  "An Apple's compressed dmg to standard (hfsplus) image disk file convert tool",
);

/**
 * A tool that reads information about your system's hardware from the BIOS according to the SMBIOS/DMI standard
 */
export const dmidecode = mkPackage(
  nixRaw`pkgs.dmidecode`,
  "A tool that reads information about your system's hardware from the BIOS according to the SMBIOS/DMI standard",
);

/**
 * A tool to play and record videos or live streams with danmaku
 */
export const dmlive = mkPackage(
  nixRaw`pkgs.dmlive`,
  "A tool to play and record videos or live streams with danmaku",
);

/**
 * Old-style RAID configuration utility
 */
export const dmraid = mkPackage(
  nixRaw`pkgs.dmraid`,
  "Old-style RAID configuration utility",
);

/**
 * Configuration utility for DMR radios
 */
export const dmrconfig = mkPackage(
  nixRaw`pkgs.dmrconfig`,
  "Configuration utility for DMR radios",
);

/**
 * Distributed MultiThreaded Checkpointing
 */
export const dmtcp = mkPackage(
  nixRaw`pkgs.dmtcp`,
  "Distributed MultiThreaded Checkpointing",
);

/**
 * Data matrix command-line utilities
 */
export const dmtx_utils = mkPackage(
  nixRaw`pkgs.dmtx-utils`,
  "Data matrix command-line utilities",
);

/**
 * Adds packages declaratively on the command line
 */
export const dnadd = mkPackage(
  nixRaw`pkgs.dnadd`,
  "Adds packages declaratively on the command line",
);

/**
 * A set of interactive command line tools for Dungeons and Dragons 5th Edition
 */
export const dnd_tools = mkPackage(
  nixRaw`pkgs.dnd-tools`,
  "A set of interactive command line tools for Dungeons and Dragons 5th Edition",
);

/**
 * Next-generation RPM package management system
 */
export const dnf5 = mkPackage(
  nixRaw`pkgs.dnf5`,
  "Next-generation RPM package management system",
);

/**
 * Camera RAW to DNG file format converter
 */
export const dnglab = mkPackage(
  nixRaw`pkgs.dnglab`,
  "Camera RAW to DNG file format converter",
);

/**
 * DNS root data including root zone and DNSSEC key
 */
export const dns_root_data = mkPackage(
  nixRaw`pkgs.dns-root-data`,
  "DNS root data including root zone and DNSSEC key",
);

/**
 * Highly configurable DNS proxy for penetration testers and malware analysts
 */
export const dnschef = mkPackage(
  nixRaw`pkgs.dnschef`,
  "Highly configurable DNS proxy for penetration testers and malware analysts",
);

/**
 * Synchronize your DNS to multiple providers from a simple DSL
 */
export const dnscontrol = mkPackage(
  nixRaw`pkgs.dnscontrol`,
  "Synchronize your DNS to multiple providers from a simple DSL",
);

/**
 * A tool that provides secure DNS resolution
 */
export const dnscrypt_proxy = mkPackage(
  nixRaw`pkgs.dnscrypt-proxy`,
  "A tool that provides secure DNS resolution",
);

/**
 * A tool for adding dnscrypt support to any name resolver
 */
export const dnscrypt_wrapper = mkPackage(
  nixRaw`pkgs.dnscrypt-wrapper`,
  "A tool for adding dnscrypt support to any name resolver",
);

/**
 * DNS Loadbalancer
 */
export const dnsdist = mkPackage(
  nixRaw`pkgs.dnsdist`,
  "DNS Loadbalancer",
);

/**
 * A tool to enumerate DNS information
 */
export const dnsenum = mkPackage(
  nixRaw`pkgs.dnsenum`,
  "A tool to enumerate DNS information",
);

/**
 * An integrated DNS, DHCP and TFTP server for small networks
 */
export const dnsmasq = mkPackage(
  nixRaw`pkgs.dnsmasq`,
  "An integrated DNS, DHCP and TFTP server for small networks",
);

/**
 * Tool to collect DNS traffic
 */
export const dnsmon_go = mkPackage(
  nixRaw`pkgs.dnsmon-go`,
  "Tool to collect DNS traffic",
);

/**
 * Passive DNS Capture and Monitoring Toolkit
 */
export const dnsmonster = mkPackage(
  nixRaw`pkgs.dnsmonster`,
  "Passive DNS Capture and Monitoring Toolkit",
);

/**
 * DNS name resolution for containers
 */
export const dnsname_cni = mkPackage(
  nixRaw`pkgs.dnsname-cni`,
  "DNS name resolution for containers",
);

/**
 * Spy on the DNS queries your computer is making
 */
export const dnspeep = mkPackage(
  nixRaw`pkgs.dnspeep`,
  "Spy on the DNS queries your computer is making",
);

/**
 * Tools for DNS benchmaring
 */
export const dnsperf = mkPackage(
  nixRaw`pkgs.dnsperf`,
  "Tools for DNS benchmaring",
);

/**
 * Simple DNS proxy with DoH, DoT, and DNSCrypt support
 */
export const dnsproxy = mkPackage(
  nixRaw`pkgs.dnsproxy`,
  "Simple DNS proxy with DoH, DoT, and DNSCrypt support",
);

/**
 * DNS Enumeration script
 */
export const dnsrecon = mkPackage(
  nixRaw`pkgs.dnsrecon`,
  "DNS Enumeration script",
);

/**
 * Tool to check missing hosted DNS zones
 */
export const dnstake = mkPackage(
  nixRaw`pkgs.dnstake`,
  "Tool to check missing hosted DNS zones",
);

/**
 * libpcap application that displays DNS traffic on your network
 */
export const dnstop = mkPackage(
  nixRaw`pkgs.dnstop`,
  "libpcap application that displays DNS traffic on your network",
);

/**
 * Determines where a given Domain Name Server (DNS) gets its information from, and follows the chain of DNS servers back to the servers which know the data
 */
export const dnstracer = mkPackage(
  nixRaw`pkgs.dnstracer`,
  "Determines where a given Domain Name Server (DNS) gets its information from, and follows the chain of DNS servers back to the servers which know the data",
);

/**
 * Domain name permutation engine for detecting homograph phishing attacks
 */
export const dnstwist = mkPackage(
  nixRaw`pkgs.dnstwist`,
  "Domain name permutation engine for detecting homograph phishing attacks",
);

/**
 * Domain name server
 */
export const dnsutils = mkPackage(
  nixRaw`pkgs.dnsutils`,
  "Domain name server",
);

/**
 * Tool suite for analyzing and visualizing DNS and DNSSEC behavior
 */
export const dnsviz = mkPackage(
  nixRaw`pkgs.dnsviz`,
  "Tool suite for analyzing and visualizing DNS and DNSSEC behavior",
);

/**
 * Fast and multi-purpose DNS toolkit
 */
export const dnsx = mkPackage(
  nixRaw`pkgs.dnsx`,
  "Fast and multi-purpose DNS toolkit",
);

/**
 * DigitalOcean droplet system metrics agent
 */
export const do_agent = mkPackage(
  nixRaw`pkgs.do-agent`,
  "DigitalOcean droplet system metrics agent",
);

/**
 * Executes the given command as another user
 */
export const doas = mkPackage(
  nixRaw`pkgs.doas`,
  "Executes the given command as another user",
);

/**
 * A shim for the sudo command that utilizes doas
 */
export const doas_sudo_shim = mkPackage(
  nixRaw`pkgs.doas-sudo-shim`,
  "A shim for the sudo command that utilizes doas",
);

/**
 * Your Go project's documentation, to-go
 */
export const doc2go = mkPackage(
  nixRaw`pkgs.doc2go`,
  "Your Go project's documentation, to-go",
);

/**
 * converter from DocBook V4.x and v5.x XML into mdoc
 */
export const docbook2mdoc = mkPackage(
  nixRaw`pkgs.docbook2mdoc`,
  "converter from DocBook V4.x and v5.x XML into mdoc",
);

/**
 * Convert DocBook to OpenDocument Format (ODF)
 */
export const docbook2odf = mkPackage(
  nixRaw`pkgs.docbook2odf`,
  "Convert DocBook to OpenDocument Format (ODF)",
);

export const docbook2x = mkPackage(
  nixRaw`pkgs.docbook2x`,
  "",
);

/**
 * Schemas for DocBook 5.0, a semantic markup language for technical documentation
 */
export const docbook5 = mkPackage(
  nixRaw`pkgs.docbook5`,
  "Schemas for DocBook 5.0, a semantic markup language for technical documentation",
);

export const docbook_sgml_dtd_31 = mkPackage(
  nixRaw`pkgs.docbook_sgml_dtd_31`,
  "",
);

export const docbook_sgml_dtd_41 = mkPackage(
  nixRaw`pkgs.docbook_sgml_dtd_41`,
  "",
);

export const docbook_xml_dtd_412 = mkPackage(
  nixRaw`pkgs.docbook_xml_dtd_412`,
  "",
);

export const docbook_xml_dtd_42 = mkPackage(
  nixRaw`pkgs.docbook_xml_dtd_42`,
  "",
);

export const docbook_xml_dtd_43 = mkPackage(
  nixRaw`pkgs.docbook_xml_dtd_43`,
  "",
);

export const docbook_xml_dtd_44 = mkPackage(
  nixRaw`pkgs.docbook_xml_dtd_44`,
  "",
);

export const docbook_xml_dtd_45 = mkPackage(
  nixRaw`pkgs.docbook_xml_dtd_45`,
  "",
);

export const docbook_xml_ebnf_dtd = mkPackage(
  nixRaw`pkgs.docbook_xml_ebnf_dtd`,
  "",
);

/**
 * XSL stylesheets for transforming DocBook documents into HTML and various other formats
 */
export const docbook_xsl = mkPackage(
  nixRaw`pkgs.docbook_xsl`,
  "XSL stylesheets for transforming DocBook documents into HTML and various other formats",
);

/**
 * XSL stylesheets for transforming DocBook documents into HTML and various other formats
 */
export const docbook_xsl_nons = mkPackage(
  nixRaw`pkgs.docbook-xsl-nons`,
  "XSL stylesheets for transforming DocBook documents into HTML and various other formats",
);

/**
 * XSL stylesheets for transforming DocBook documents into HTML and various other formats
 */
export const docbook_xsl_ns = mkPackage(
  nixRaw`pkgs.docbook_xsl_ns`,
  "XSL stylesheets for transforming DocBook documents into HTML and various other formats",
);

/**
 * A unique solution to academic literature management
 */
export const docear = mkPackage(
  nixRaw`pkgs.docear`,
  "A unique solution to academic literature management",
);

/**
 * Lightweight taskbar/panel replacement which works as a stand-alone dock
 */
export const dockbarx = mkPackage(
  nixRaw`pkgs.dockbarx`,
  "Lightweight taskbar/panel replacement which works as a stand-alone dock",
);

/**
 * An open source project to pack, ship and run any application as a lightweight container
 */
export const docker = mkPackage(
  nixRaw`pkgs.docker`,
  "An open source project to pack, ship and run any application as a lightweight container",
);

/**
 * An open source project to pack, ship and run any application as a lightweight container
 */
export const docker_20_10 = mkPackage(
  nixRaw`pkgs.docker_20_10`,
  "An open source project to pack, ship and run any application as a lightweight container",
);

/**
 * An open source project to pack, ship and run any application as a lightweight container
 */
export const docker_24 = mkPackage(
  nixRaw`pkgs.docker_24`,
  "An open source project to pack, ship and run any application as a lightweight container",
);

/**
 * Docker CLI plugin for extended build capabilities with BuildKit
 */
export const docker_buildx = mkPackage(
  nixRaw`pkgs.docker-buildx`,
  "Docker CLI plugin for extended build capabilities with BuildKit",
);

/**
 * An open source project to pack, ship and run any application as a lightweight container
 */
export const docker_client = mkPackage(
  nixRaw`pkgs.docker-client`,
  "An open source project to pack, ship and run any application as a lightweight container",
);

/**
 * Docker CLI plugin to define and run multi-container applications with Docker
 */
export const docker_compose = mkPackage(
  nixRaw`pkgs.docker-compose`,
  "Docker CLI plugin to define and run multi-container applications with Docker",
);

/**
 * Multi-container orchestration for Docker
 */
export const docker_compose_1 = mkPackage(
  nixRaw`pkgs.docker-compose_1`,
  "Multi-container orchestration for Docker",
);

/**
 * Language service for Docker Compose documents
 */
export const docker_compose_language_service = mkPackage(
  nixRaw`pkgs.docker-compose-language-service`,
  "Language service for Docker Compose documents",
);

/**
 * A Docker credential helper for GCR (https://gcr.io) users
 */
export const docker_credential_gcr = mkPackage(
  nixRaw`pkgs.docker-credential-gcr`,
  "A Docker credential helper for GCR (https://gcr.io) users",
);

/**
 * Suite of programs to use native stores to keep Docker credentials safe
 */
export const docker_credential_helpers = mkPackage(
  nixRaw`pkgs.docker-credential-helpers`,
  "Suite of programs to use native stores to keep Docker credentials safe",
);

/**
 * The Docker toolset to pack, ship, store, and deliver content
 */
export const docker_distribution = mkPackage(
  nixRaw`pkgs.docker-distribution`,
  "The Docker toolset to pack, ship, store, and deliver content",
);

/**
 * Docker garbage collection of containers and images
 */
export const docker_gc = mkPackage(
  nixRaw`pkgs.docker-gc`,
  "Docker garbage collection of containers and images",
);

/**
 * Tools for browsing and manipulating docker registries
 */
export const docker_ls = mkPackage(
  nixRaw`pkgs.docker-ls`,
  "Tools for browsing and manipulating docker registries",
);

/**
 * Docker Machine is a tool that lets you install Docker Engine on virtual hosts, and manage Docker Engine on the hosts
 */
export const docker_machine = mkPackage(
  nixRaw`pkgs.docker-machine`,
  "Docker Machine is a tool that lets you install Docker Engine on virtual hosts, and manage Docker Engine on the hosts",
);

/**
 * HyperKit driver for docker-machine
 */
export const docker_machine_hyperkit = mkPackage(
  nixRaw`pkgs.docker-machine-hyperkit`,
  "HyperKit driver for docker-machine",
);

/**
 * KVM driver for docker-machine
 */
export const docker_machine_kvm = mkPackage(
  nixRaw`pkgs.docker-machine-kvm`,
  "KVM driver for docker-machine",
);

/**
 * KVM2 driver for docker-machine
 */
export const docker_machine_kvm2 = mkPackage(
  nixRaw`pkgs.docker-machine-kvm2`,
  "KVM2 driver for docker-machine",
);

/**
 * Xhyve driver for docker-machine
 */
export const docker_machine_xhyve = mkPackage(
  nixRaw`pkgs.docker-machine-xhyve`,
  "Xhyve driver for docker-machine",
);

/**
 * Docker proxy binary to forward traffic between host and containers
 */
export const docker_proxy = mkPackage(
  nixRaw`pkgs.docker-proxy`,
  "Docker proxy binary to forward traffic between host and containers",
);

/**
 * Plugin for Docker CLI to support SBOM creation using Syft
 */
export const docker_sbom = mkPackage(
  nixRaw`pkgs.docker-sbom`,
  "Plugin for Docker CLI to support SBOM creation using Syft",
);

/**
 * Minify and secure Docker containers
 */
export const docker_slim = mkPackage(
  nixRaw`pkgs.docker-slim`,
  "Minify and secure Docker containers",
);

/**
 * Run your application at full speed while syncing your code for development
 */
export const docker_sync = mkPackage(
  nixRaw`pkgs.docker-sync`,
  "Run your application at full speed while syncing your code for development",
);

/**
 * A language server for Dockerfiles powered by Node.js, TypeScript, and VSCode technologies
 */
export const dockerfile_language_server_nodejs = mkPackage(
  nixRaw`pkgs.dockerfile-language-server-nodejs`,
  "A language server for Dockerfiles powered by Node.js, TypeScript, and VSCode technologies",
);

/**
 * Dockerfile format
 */
export const dockfmt = mkPackage(
  nixRaw`pkgs.dockfmt`,
  "Dockerfile format",
);

/**
 * Container Image Linter for Security
 */
export const dockle = mkPackage(
  nixRaw`pkgs.dockle`,
  "Container Image Linter for Security",
);

/**
 * DockSTARTer helps you get started with running apps in Docker.
 */
export const dockstarter = mkPackage(
  nixRaw`pkgs.dockstarter`,
  "DockSTARTer helps you get started with running apps in Docker.",
);

/**
 * Tool for managing dock items
 */
export const dockutil = mkPackage(
  nixRaw`pkgs.dockutil`,
  "Tool for managing dock items",
);

/**
 * Lift documents in nroff markups to XML-DocBook
 */
export const doclifter = mkPackage(
  nixRaw`pkgs.doclifter`,
  "Lift documents in nroff markups to XML-DocBook",
);

/**
 * C++11 port of docopt
 */
export const docopt_cpp = mkPackage(
  nixRaw`pkgs.docopt_cpp`,
  "C++11 port of docopt",
);

/**
 * docopt CLI tool for shell scripting
 */
export const docopts = mkPackage(
  nixRaw`pkgs.docopts`,
  "docopt CLI tool for shell scripting",
);

/**
 * A batteries-included developer documentation site generator
 */
export const doctave = mkPackage(
  nixRaw`pkgs.doctave`,
  "A batteries-included developer documentation site generator",
);

/**
 * The fastest feature-rich C++11/14/17/20 single-header testing framework
 */
export const doctest = mkPackage(
  nixRaw`pkgs.doctest`,
  "The fastest feature-rich C++11/14/17/20 single-header testing framework",
);

/**
 * A command line tool for DigitalOcean services
 */
export const doctl = mkPackage(
  nixRaw`pkgs.doctl`,
  "A command line tool for DigitalOcean services",
);

/**
 * TUI Client for Docker
 */
export const docui = mkPackage(
  nixRaw`pkgs.docui`,
  "TUI Client for Docker",
);

/**
 * The Open Source DocuSign Alternative.
 */
export const documenso = mkPackage(
  nixRaw`pkgs.documenso`,
  "The Open Source DocuSign Alternative.",
);

/**
 * Highlight.js sources for the Nix Ecosystem's documentation
 */
export const documentation_highlighter = mkPackage(
  nixRaw`pkgs.documentation-highlighter`,
  "Highlight.js sources for the Nix Ecosystem's documentation",
);

/**
 * Open source Confluence alternative for internal & external docs built with Golang + EmberJS
 */
export const documize_community = mkPackage(
  nixRaw`pkgs.documize-community`,
  "Open source Confluence alternative for internal & external docs built with Golang + EmberJS",
);

/**
 * Python Documentation Utilities
 */
export const docutils = mkPackage(
  nixRaw`pkgs.docutils`,
  "Python Documentation Utilities",
);

/**
 * Looks at Python code to search for things which look "dodgy" such as passwords or diffs
 */
export const dodgy = mkPackage(
  nixRaw`pkgs.dodgy`,
  "Looks at Python code to search for things which look \"dodgy\" such as passwords or diffs",
);

/**
 * cat replacement
 */
export const dog = mkPackage(
  nixRaw`pkgs.dog`,
  "cat replacement",
);

/**
 * Command-line DNS client
 */
export const dogdns = mkPackage(
  nixRaw`pkgs.dogdns`,
  "Command-line DNS client",
);

/**
 * wow very terminal doge
 */
export const doge = mkPackage(
  nixRaw`pkgs.doge`,
  "wow very terminal doge",
);

/**
 * Command-line DNS Client for Humans. Written in Golang
 */
export const doggo = mkPackage(
  nixRaw`pkgs.doggo`,
  "Command-line DNS Client for Humans. Written in Golang",
);

/**
 * Fast, mature, secure DoH server proxy written in Rust
 */
export const doh_proxy_rust = mkPackage(
  nixRaw`pkgs.doh-proxy-rust`,
  "Fast, mature, secure DoH server proxy written in Rust",
);

/**
 * A command line tool for keeping track of what you’re doing and tracking what you’ve done
 */
export const doing = mkPackage(
  nixRaw`pkgs.doing`,
  "A command line tool for keeping track of what you’re doing and tracking what you’ve done",
);

/**
 * A task management & automation tool
 */
export const doit = mkPackage(
  nixRaw`pkgs.doit`,
  "A task management & automation tool",
);

/**
 * Tool for live presentations in the terminal
 */
export const doitlive = mkPackage(
  nixRaw`pkgs.doitlive`,
  "Tool for live presentations in the terminal",
);

/**
 * Simple to use and highly versatile Open Source wiki software that doesn't require a database
 */
export const dokuwiki = mkPackage(
  nixRaw`pkgs.dokuwiki`,
  "Simple to use and highly versatile Open Source wiki software that doesn't require a database",
);

/**
 * A Dolby B & C software decoder
 */
export const dolbybcsoftwaredecode = mkPackage(
  nixRaw`pkgs.dolbybcsoftwaredecode`,
  "A Dolby B & C software decoder",
);

/**
 * A enterprise resource planning (ERP) and customer relationship manager (CRM) server
 */
export const dolibarr = mkPackage(
  nixRaw`pkgs.dolibarr`,
  "A enterprise resource planning (ERP) and customer relationship manager (CRM) server",
);

/**
 * Gamecube/Wii/Triforce emulator for x86_64 and ARMv8
 */
export const dolphin_emu = mkPackage(
  nixRaw`pkgs.dolphin-emu`,
  "Gamecube/Wii/Triforce emulator for x86_64 and ARMv8",
);

/**
 * Gamecube/Wii/Triforce emulator for x86_64 and ARMv8
 */
export const dolphin_emu_primehack = mkPackage(
  nixRaw`pkgs.dolphin-emu-primehack`,
  "Gamecube/Wii/Triforce emulator for x86_64 and ARMv8",
);

/**
 * Relational database with version control and CLI a-la Git
 */
export const dolt = mkPackage(
  nixRaw`pkgs.dolt`,
  "Relational database with version control and CLI a-la Git",
);

/**
 * A game that is a bit like the board game Risk or RisiKo
 */
export const domination = mkPackage(
  nixRaw`pkgs.domination`,
  "A game that is a bit like the board game Risk or RisiKo",
);

export const domine = mkPackage(
  nixRaw`pkgs.domine`,
  "",
);

/**
 * Home automation system
 */
export const domoticz = mkPackage(
  nixRaw`pkgs.domoticz`,
  "Home automation system",
);

/**
 * The ultimate task management solution for seamless organization and efficiency
 */
export const done = mkPackage(
  nixRaw`pkgs.done`,
  "The ultimate task management solution for seamless organization and efficiency",
);

/**
 * an alternative for S/KEY's 'key' command.
 */
export const donkey = mkPackage(
  nixRaw`pkgs.donkey`,
  "an alternative for S/KEY's 'key' command.",
);

/**
 * Tool to bypass 40X response codes
 */
export const dontgo403 = mkPackage(
  nixRaw`pkgs.dontgo403`,
  "Tool to bypass 40X response codes",
);

/**
 * Tool to quickly index and search documents on a computer
 */
export const doodle = mkPackage(
  nixRaw`pkgs.doodle`,
  "Tool to quickly index and search documents on a computer",
);

/**
 * A TUI todo manager
 */
export const dooit = mkPackage(
  nixRaw`pkgs.dooit`,
  "A TUI todo manager",
);

/**
 * Python3 compatible clone of dstat
 */
export const dool = mkPackage(
  nixRaw`pkgs.dool`,
  "Python3 compatible clone of dstat",
);

/**
 * Compiler for Doom/Hexen scripts (ACS, BCS)
 */
export const doom_bcc = mkPackage(
  nixRaw`pkgs.doom-bcc`,
  "Compiler for Doom/Hexen scripts (ACS, BCS)",
);

/**
 * A classic, refined DOOM source port
 */
export const doomretro = mkPackage(
  nixRaw`pkgs.doomretro`,
  "A classic, refined DOOM source port",
);

/**
 * Graphical launcher of ZDoom and derivatives
 */
export const doomrunner = mkPackage(
  nixRaw`pkgs.doomrunner`,
  "Graphical launcher of ZDoom and derivatives",
);

/**
 * Multiplayer server browser for many Doom source ports
 */
export const doomseeker = mkPackage(
  nixRaw`pkgs.doomseeker`,
  "Multiplayer server browser for many Doom source ports",
);

/**
 * A fork of the Bruteforce Exploit Detector Tool (BED)
 */
export const doona = mkPackage(
  nixRaw`pkgs.doona`,
  "A fork of the Bruteforce Exploit Detector Tool (BED)",
);

/**
 * The official CLI for interacting with your Doppler Enclave secrets and configuration
 */
export const doppler = mkPackage(
  nixRaw`pkgs.doppler`,
  "The official CLI for interacting with your Doppler Enclave secrets and configuration",
);

/**
 * Docstring generator for Python
 */
export const doq = mkPackage(
  nixRaw`pkgs.doq`,
  "Docstring generator for Python",
);

/**
 * Tiny alternative Discord client
 */
export const dorion = mkPackage(
  nixRaw`pkgs.dorion`,
  "Tiny alternative Discord client",
);

/**
 * Tool to automate the work with Google dorks
 */
export const dorkscout = mkPackage(
  nixRaw`pkgs.dorkscout`,
  "Tool to automate the work with Google dorks",
);

/**
 * Convert text files with DOS or Mac line breaks to Unix line breaks and vice versa
 */
export const dos2unix = mkPackage(
  nixRaw`pkgs.dos2unix`,
  "Convert text files with DOS or Mac line breaks to Unix line breaks and vice versa",
);

/**
 * A comic strip downloader and archiver
 */
export const dosage = mkPackage(
  nixRaw`pkgs.dosage`,
  "A comic strip downloader and archiver",
);

/**
 * A DOS emulator
 */
export const dosbox = mkPackage(
  nixRaw`pkgs.dosbox`,
  "A DOS emulator",
);

/**
 * A modernized DOS emulator
 */
export const dosbox_staging = mkPackage(
  nixRaw`pkgs.dosbox-staging`,
  "A modernized DOS emulator",
);

/**
 * A cross-platform DOS emulator based on the DOSBox project
 */
export const dosbox_x = mkPackage(
  nixRaw`pkgs.dosbox-x`,
  "A cross-platform DOS emulator based on the DOSBox project",
);

/**
 * Various fonts from the DOSEmu project
 */
export const dosemu_fonts = mkPackage(
  nixRaw`pkgs.dosemu_fonts`,
  "Various fonts from the DOSEmu project",
);

/**
 * Utilities for creating and checking FAT and VFAT file systems
 */
export const dosfstools = mkPackage(
  nixRaw`pkgs.dosfstools`,
  "Utilities for creating and checking FAT and VFAT file systems",
);

/**
 * A very simple, rounded, sans serif family
 */
export const dosis = mkPackage(
  nixRaw`pkgs.dosis`,
  "A very simple, rounded, sans serif family",
);

/**
 * Convert graphs generated by Graphviz to LaTeX friendly formats
 */
export const dot2tex = mkPackage(
  nixRaw`pkgs.dot2tex`,
  "Convert graphs generated by Graphviz to LaTeX friendly formats",
);

/**
 * A language server for the DOT language
 */
export const dot_language_server = mkPackage(
  nixRaw`pkgs.dot-language-server`,
  "A language server for the DOT language",
);

/**
 * Reads config files for merlin
 */
export const dot_merlin_reader = mkPackage(
  nixRaw`pkgs.dot-merlin-reader`,
  "Reads config files for merlin",
);

/**
 * Like lolcat, but fast
 */
export const dotacat = mkPackage(
  nixRaw`pkgs.dotacat`,
  "Like lolcat, but fast",
);

/**
 * Font Collection by Sora Sagano
 */
export const dotcolon_fonts = mkPackage(
  nixRaw`pkgs.dotcolon-fonts`,
  "Font Collection by Sora Sagano",
);

/**
 * A configuration parser library
 */
export const dotconf = mkPackage(
  nixRaw`pkgs.dotconf`,
  "A configuration parser library",
);

/**
 * Lightning-fast linter for .env files. Written in Rust
 */
export const dotenv_linter = mkPackage(
  nixRaw`pkgs.dotenv-linter`,
  "Lightning-fast linter for .env files. Written in Rust",
);

/**
 * Easily manage your dotfiles
 */
export const dotfiles = mkPackage(
  nixRaw`pkgs.dotfiles`,
  "Easily manage your dotfiles",
);

/**
 * ASP.NET Core Runtime 6.0.22
 */
export const dotnet_aspnetcore = mkPackage(
  nixRaw`pkgs.dotnet-aspnetcore`,
  "ASP.NET Core Runtime 6.0.22",
);

/**
 * ASP.NET Core Runtime 6.0.22
 */
export const dotnet_aspnetcore_6 = mkPackage(
  nixRaw`pkgs.dotnet-aspnetcore_6`,
  "ASP.NET Core Runtime 6.0.22",
);

/**
 * ASP.NET Core Runtime 7.0.11
 */
export const dotnet_aspnetcore_7 = mkPackage(
  nixRaw`pkgs.dotnet-aspnetcore_7`,
  "ASP.NET Core Runtime 7.0.11",
);

/**
 * ASP.NET Core Runtime 8.0.0-rc.1.23421.29
 */
export const dotnet_aspnetcore_8 = mkPackage(
  nixRaw`pkgs.dotnet-aspnetcore_8`,
  "ASP.NET Core Runtime 8.0.0-rc.1.23421.29",
);

/**
 * .NET Runtime 6.0.22
 */
export const dotnet_runtime = mkPackage(
  nixRaw`pkgs.dotnet-runtime`,
  ".NET Runtime 6.0.22",
);

/**
 * .NET Runtime 6.0.22
 */
export const dotnet_runtime_6 = mkPackage(
  nixRaw`pkgs.dotnet-runtime_6`,
  ".NET Runtime 6.0.22",
);

/**
 * .NET Runtime 7.0.11
 */
export const dotnet_runtime_7 = mkPackage(
  nixRaw`pkgs.dotnet-runtime_7`,
  ".NET Runtime 7.0.11",
);

/**
 * .NET Runtime 8.0.0-rc.1.23419.4
 */
export const dotnet_runtime_8 = mkPackage(
  nixRaw`pkgs.dotnet-runtime_8`,
  ".NET Runtime 8.0.0-rc.1.23419.4",
);

/**
 * .NET SDK 6.0.414
 */
export const dotnet_sdk = mkPackage(
  nixRaw`pkgs.dotnet-sdk`,
  ".NET SDK 6.0.414",
);

/**
 * .NET SDK 6.0.414
 */
export const dotnet_sdk_6 = mkPackage(
  nixRaw`pkgs.dotnet-sdk_6`,
  ".NET SDK 6.0.414",
);

/**
 * .NET SDK 7.0.401
 */
export const dotnet_sdk_7 = mkPackage(
  nixRaw`pkgs.dotnet-sdk_7`,
  ".NET SDK 7.0.401",
);

/**
 * .NET SDK 8.0.100-rc.1.23455.8
 */
export const dotnet_sdk_8 = mkPackage(
  nixRaw`pkgs.dotnet-sdk_8`,
  ".NET SDK 8.0.100-rc.1.23455.8",
);

export const dotnetbuildhelpers = mkPackage(
  nixRaw`pkgs.dotnetbuildhelpers`,
  "",
);

/**
 * Command to simulate input anywhere
 */
export const dotool = mkPackage(
  nixRaw`pkgs.dotool`,
  "Command to simulate input anywhere",
);

/**
 * A dotfile manager and templater written in rust 🦀
 */
export const dotter = mkPackage(
  nixRaw`pkgs.dotter`,
  "A dotfile manager and templater written in rust 🦀",
);

/**
 * Binary-decimal and decimal-binary routines for IEEE doubles
 */
export const double_conversion = mkPackage(
  nixRaw`pkgs.double-conversion`,
  "Binary-decimal and decimal-binary routines for IEEE doubles",
);

/**
 * Two-panel graphical file manager written in Pascal
 */
export const doublecmd = mkPackage(
  nixRaw`pkgs.doublecmd`,
  "Two-panel graphical file manager written in Pascal",
);

/**
 * A font that provides complete support for the International Phonetic Alphabet
 */
export const doulos_sil = mkPackage(
  nixRaw`pkgs.doulos-sil`,
  "A font that provides complete support for the International Phonetic Alphabet",
);

/**
 * Open source IMAP and POP3 email server written with security primarily in mind
 */
export const dovecot = mkPackage(
  nixRaw`pkgs.dovecot`,
  "Open source IMAP and POP3 email server written with security primarily in mind",
);

/**
 * Dovecot FTS plugin based on Xapian
 */
export const dovecot_fts_xapian = mkPackage(
  nixRaw`pkgs.dovecot_fts_xapian`,
  "Dovecot FTS plugin based on Xapian",
);

/**
 * A sieve plugin for the Dovecot IMAP server
 */
export const dovecot_pigeonhole = mkPackage(
  nixRaw`pkgs.dovecot_pigeonhole`,
  "A sieve plugin for the Dovecot IMAP server",
);

/**
 * A Spotify downloader written in rust
 */
export const downonspot = mkPackage(
  nixRaw`pkgs.downonspot`,
  "A Spotify downloader written in rust",
);

/**
 * Source code documentation generator tool
 */
export const doxygen = mkPackage(
  nixRaw`pkgs.doxygen`,
  "Source code documentation generator tool",
);

/**
 * Source code documentation generator tool
 */
export const doxygen_gui = mkPackage(
  nixRaw`pkgs.doxygen_gui`,
  "Source code documentation generator tool",
);

/**
 * A complete suite of dozenal (base twelve) programs
 */
export const dozenal = mkPackage(
  nixRaw`pkgs.dozenal`,
  "A complete suite of dozenal (base twelve) programs",
);

/**
 * Set of libraries and drivers for fast packet processing
 */
export const dpdk = mkPackage(
  nixRaw`pkgs.dpdk`,
  "Set of libraries and drivers for fast packet processing",
);

/**
 * An implementation of the pic little language for creating drawings
 */
export const dpic = mkPackage(
  nixRaw`pkgs.dpic`,
  "An implementation of the pic little language for creating drawings",
);

/**
 * The Debian package manager
 */
export const dpkg = mkPackage(
  nixRaw`pkgs.dpkg`,
  "The Debian package manager",
);

/**
 * Code formatting platform written in Rust
 */
export const dprint = mkPackage(
  nixRaw`pkgs.dprint`,
  "Code formatting platform written in Rust",
);

/**
 * Python script to manage Sony DPT-RP1 without Digital Paper App
 */
export const dpt_rp1_py = mkPackage(
  nixRaw`pkgs.dpt-rp1-py`,
  "Python script to manage Sony DPT-RP1 without Digital Paper App",
);

/**
 * Recursive DNS/DNSCurve server and comandline tool
 */
export const dq = mkPackage(
  nixRaw`pkgs.dq`,
  "Recursive DNS/DNSCurve server and comandline tool",
);

        /**
         * Expose a SQLite database over the network and replicate it across a
cluster of peers

         */
export const dqlite = mkPackage(
  nixRaw`pkgs.dqlite`,
  "Expose a SQLite database over the network and replicate it across a\ncluster of peers\n",
);

/**
 * Compute the DR14 of a given audio file according to the procedure described by the Pleasurize Music Foundation
 */
export const dr14_tmeter = mkPackage(
  nixRaw`pkgs.dr14_tmeter`,
  "Compute the DR14 of a given audio file according to the procedure described by the Pleasurize Music Foundation",
);

/**
 * A cli tool to browse and play korean drama, chinese drama
 */
export const dra_cla = mkPackage(
  nixRaw`pkgs.dra-cla`,
  "A cli tool to browse and play korean drama, chinese drama",
);

/**
 * Library for compressing and decompressing 3D geometric meshes and point clouds
 */
export const draco = mkPackage(
  nixRaw`pkgs.draco`,
  "Library for compressing and decompressing 3D geometric meshes and point clouds",
);

/**
 * Dracula Icon theme
 */
export const dracula_icon_theme = mkPackage(
  nixRaw`pkgs.dracula-icon-theme`,
  "Dracula Icon theme",
);

/**
 * Dracula variant of the Ant theme
 */
export const dracula_theme = mkPackage(
  nixRaw`pkgs.dracula-theme`,
  "Dracula variant of the Ant theme",
);

/**
 * An event driven initramfs infrastructure
 */
export const dracut = mkPackage(
  nixRaw`pkgs.dracut`,
  "An event driven initramfs infrastructure",
);

/**
 * A hall-style reverb based on freeverb3 algorithms
 */
export const dragonfly_reverb = mkPackage(
  nixRaw`pkgs.dragonfly-reverb`,
  "A hall-style reverb based on freeverb3 algorithms",
);

/**
 * A modern replacement for Redis and Memcached
 */
export const dragonflydb = mkPackage(
  nixRaw`pkgs.dragonflydb`,
  "A modern replacement for Redis and Memcached",
);

/**
 * A branch of Rake supporting automatic parallelizing of tasks
 */
export const drake = mkPackage(
  nixRaw`pkgs.drake`,
  "A branch of Rake supporting automatic parallelizing of tasks",
);

/**
 * Spanish 2D classic point & click style adventure with tons of humor and an easy interface
 */
export const drascula_the_vampire_strikes_back = mkPackage(
  nixRaw`pkgs.drascula-the-vampire-strikes-back`,
  "Spanish 2D classic point & click style adventure with tons of humor and an easy interface",
);

/**
 * A proof checker for unSAT proofs
 */
export const drat_trim = mkPackage(
  nixRaw`pkgs.drat-trim`,
  "A proof checker for unSAT proofs",
);

/**
 * A free basic image editor, similar to Microsoft Paint, but aiming at the GNOME desktop
 */
export const drawing = mkPackage(
  nixRaw`pkgs.drawing`,
  "A free basic image editor, similar to Microsoft Paint, but aiming at the GNOME desktop",
);

/**
 * A desktop application for creating diagrams
 */
export const drawio = mkPackage(
  nixRaw`pkgs.drawio`,
  "A desktop application for creating diagrams",
);

/**
 * xvfb wrapper around drawio
 */
export const drawio_headless = mkPackage(
  nixRaw`pkgs.drawio-headless`,
  "xvfb wrapper around drawio",
);

/**
 * A collaborative drawing program that allows multiple users to sketch on the same canvas simultaneously
 */
export const drawpile = mkPackage(
  nixRaw`pkgs.drawpile`,
  "A collaborative drawing program that allows multiple users to sketch on the same canvas simultaneously",
);

/**
 * A collaborative drawing program that allows multiple users to sketch on the same canvas simultaneously
 */
export const drawpile_server_headless = mkPackage(
  nixRaw`pkgs.drawpile-server-headless`,
  "A collaborative drawing program that allows multiple users to sketch on the same canvas simultaneously",
);

/**
 * Connect to Plan 9 CPU servers from other operating systems.
 */
export const drawterm = mkPackage(
  nixRaw`pkgs.drawterm`,
  "Connect to Plan 9 CPU servers from other operating systems.",
);

/**
 * Connect to Plan 9 CPU servers from other operating systems.
 */
export const drawterm_wayland = mkPackage(
  nixRaw`pkgs.drawterm-wayland`,
  "Connect to Plan 9 CPU servers from other operating systems.",
);

/**
 * Distributed Replicated Block Device, a distributed storage system for Linux (userspace utilities)
 */
export const drbd = mkPackage(
  nixRaw`pkgs.drbd`,
  "Distributed Replicated Block Device, a distributed storage system for Linux (userspace utilities)",
);

/**
 * 2D point-and-click cyberpunk top-down adventure game
 */
export const dreamweb = mkPackage(
  nixRaw`pkgs.dreamweb`,
  "2D point-and-click cyberpunk top-down adventure game",
);

/**
 * Detect, track and alert on infrastructure drift
 */
export const driftctl = mkPackage(
  nixRaw`pkgs.driftctl`,
  "Detect, track and alert on infrastructure drift",
);

/**
 * Watches network traffic, and picks out and displays JPEG and GIF images for display
 */
export const driftnet = mkPackage(
  nixRaw`pkgs.driftnet`,
  "Watches network traffic, and picks out and displays JPEG and GIF images for display",
);

/**
 * HTTP load testing application inspired by Ansible syntax
 */
export const drill = mkPackage(
  nixRaw`pkgs.drill`,
  "HTTP load testing application inspired by Ansible syntax",
);

/**
 * A launcher for the Java Virtual Machine intended to be a drop-in replacement for the java command, only faster
 */
export const drip = mkPackage(
  nixRaw`pkgs.drip`,
  "A launcher for the Java Virtual Machine intended to be a drop-in replacement for the java command, only faster",
);

/**
 * Google Drive client for the commandline
 */
export const drive = mkPackage(
  nixRaw`pkgs.drive`,
  "Google Drive client for the commandline",
);

/**
 * Small utility to dump info about DRM devices
 */
export const drm_info = mkPackage(
  nixRaw`pkgs.drm_info`,
  "Small utility to dump info about DRM devices",
);

/**
 * C++14/17 based HTTP web application framework
 */
export const drogon = mkPackage(
  nixRaw`pkgs.drogon`,
  "C++14/17 based HTTP web application framework",
);

/**
 * Linux client for DroidCam app
 */
export const droidcam = mkPackage(
  nixRaw`pkgs.droidcam`,
  "Linux client for DroidCam app",
);

/**
 * Control your computer from your couch
 */
export const droidmote = mkPackage(
  nixRaw`pkgs.droidmote`,
  "Control your computer from your couch",
);

/**
 * Continuous Integration platform built on container technology
 */
export const drone = mkPackage(
  nixRaw`pkgs.drone`,
  "Continuous Integration platform built on container technology",
);

/**
 * Command line client for the Drone continuous integration server
 */
export const drone_cli = mkPackage(
  nixRaw`pkgs.drone-cli`,
  "Command line client for the Drone continuous integration server",
);

/**
 * Continuous Integration platform built on container technology
 */
export const drone_oss = mkPackage(
  nixRaw`pkgs.drone-oss`,
  "Continuous Integration platform built on container technology",
);

/**
 * Drone pipeline runner that executes builds inside Docker containers
 */
export const drone_runner_docker = mkPackage(
  nixRaw`pkgs.drone-runner-docker`,
  "Drone pipeline runner that executes builds inside Docker containers",
);

/**
 * Drone pipeline runner that executes builds directly on the host machine
 */
export const drone_runner_exec = mkPackage(
  nixRaw`pkgs.drone-runner-exec`,
  "Drone pipeline runner that executes builds directly on the host machine",
);

/**
 * Experimental Drone runner that executes a pipeline on a remote machine
 */
export const drone_runner_ssh = mkPackage(
  nixRaw`pkgs.drone-runner-ssh`,
  "Experimental Drone runner that executes a pipeline on a remote machine",
);

/**
 * Mini Web server that let others upload files to your computer
 */
export const droopy = mkPackage(
  nixRaw`pkgs.droopy`,
  "Mini Web server that let others upload files to your computer",
);

/**
 * A small footprint implementation of the SSH 2 protocol
 */
export const dropbear = mkPackage(
  nixRaw`pkgs.dropbear`,
  "A small footprint implementation of the SSH 2 protocol",
);

/**
 * Online stored folders (daemon version)
 */
export const dropbox = mkPackage(
  nixRaw`pkgs.dropbox`,
  "Online stored folders (daemon version)",
);

/**
 * Command line client for the dropbox daemon
 */
export const dropbox_cli = mkPackage(
  nixRaw`pkgs.dropbox-cli`,
  "Command line client for the dropbox daemon",
);

/**
 * Linux kernel dropped packet monitor
 */
export const dropwatch = mkPackage(
  nixRaw`pkgs.dropwatch`,
  "Linux kernel dropped packet monitor",
);

/**
 * An LV2 sample based drum plugin
 */
export const drumgizmo = mkPackage(
  nixRaw`pkgs.drumgizmo`,
  "An LV2 sample based drum plugin",
);

/**
 * An old-school drum-kit sampler synthesizer with stereo fx
 */
export const drumkv1 = mkPackage(
  nixRaw`pkgs.drumkv1`,
  "An old-school drum-kit sampler synthesizer with stereo fx",
);

/**
 * Command-line shell and Unix scripting interface for Drupal
 */
export const drush = mkPackage(
  nixRaw`pkgs.drush`,
  "Command-line shell and Unix scripting interface for Drupal",
);

/**
 * Digital Speech Decoder
 */
export const dsd = mkPackage(
  nixRaw`pkgs.dsd`,
  "Digital Speech Decoder",
);

/**
 * Digital Speech Decoder (DSD) rewritten as a C++ library
 */
export const dsdcc = mkPackage(
  nixRaw`pkgs.dsdcc`,
  "Digital Speech Decoder (DSD) rewritten as a C++ library",
);

/**
 * A DSD to FLAC transcoding tool
 */
export const dsf2flac = mkPackage(
  nixRaw`pkgs.dsf2flac`,
  "A DSD to FLAC transcoding tool",
);

/**
 * collection of tools for network auditing and penetration testing
 */
export const dsniff = mkPackage(
  nixRaw`pkgs.dsniff`,
  "collection of tools for network auditing and penetration testing",
);

/**
 * An audio processing program with an interactive mode
 */
export const dsp = mkPackage(
  nixRaw`pkgs.dsp`,
  "An audio processing program with an interactive mode",
);

/**
 * Community Driven Antispam Filter
 */
export const dspam = mkPackage(
  nixRaw`pkgs.dspam`,
  "Community Driven Antispam Filter",
);

/**
 * Commandline tool for running SQL queries against JSON, CSV, Excel, Parquet, and more
 */
export const dsq = mkPackage(
  nixRaw`pkgs.dsq`,
  "Commandline tool for running SQL queries against JSON, CSV, Excel, Parquet, and more",
);

/**
 * Brother DSSeries SANE backend driver
 */
export const dsseries = mkPackage(
  nixRaw`pkgs.dsseries`,
  "Brother DSSeries SANE backend driver",
);

/**
 * A plugin SDK for virtual instruments
 */
export const dssi = mkPackage(
  nixRaw`pkgs.dssi`,
  "A plugin SDK for virtual instruments",
);

/**
 * Calculate the most likely secondary structure assignment given the 3D structure of a protein
 */
export const dssp = mkPackage(
  nixRaw`pkgs.dssp`,
  "Calculate the most likely secondary structure assignment given the 3D structure of a protein",
);

/**
 * Command line todo list with super-reliable git sync
 */
export const dstask = mkPackage(
  nixRaw`pkgs.dstask`,
  "Command line todo list with super-reliable git sync",
);

/**
 * Versatile resource statistics tool
 */
export const dstat = mkPackage(
  nixRaw`pkgs.dstat`,
  "Versatile resource statistics tool",
);

/**
 * Run common networking tests against your site
 */
export const dstp = mkPackage(
  nixRaw`pkgs.dstp`,
  "Run common networking tests against your site",
);

/**
 * A GUI program for supporting various instruments from DreamSourceLab, including logic analyzer, oscilloscope, etc
 */
export const dsview = mkPackage(
  nixRaw`pkgs.dsview`,
  "A GUI program for supporting various instruments from DreamSourceLab, including logic analyzer, oscilloscope, etc",
);

/**
 * A Dead Simple VPN
 */
export const dsvpn = mkPackage(
  nixRaw`pkgs.dsvpn`,
  "A Dead Simple VPN",
);

/**
 * Duct tape for your unix pipes
 */
export const dt = mkPackage(
  nixRaw`pkgs.dt`,
  "Duct tape for your unix pipes",
);

/**
 * Tooling for devicetree validation using YAML and jsonschema
 */
export const dt_schema = mkPackage(
  nixRaw`pkgs.dt-schema`,
  "Tooling for devicetree validation using YAML and jsonschema",
);

/**
 * A program that emulates the detach feature of screen
 */
export const dtach = mkPackage(
  nixRaw`pkgs.dtach`,
  "A program that emulates the detach feature of screen",
);

/**
 * Device Tree Compiler
 */
export const dtc = mkPackage(
  nixRaw`pkgs.dtc`,
  "Device Tree Compiler",
);

/**
 * A simple terminal program
 */
export const dterm = mkPackage(
  nixRaw`pkgs.dterm`,
  "A simple terminal program",
);

/**
 * A command-line tool collection to assist development written in RUST
 */
export const dtool = mkPackage(
  nixRaw`pkgs.dtool`,
  "A command-line tool collection to assist development written in RUST",
);

/**
 * Ancillary tools for the D programming language compiler
 */
export const dtools = mkPackage(
  nixRaw`pkgs.dtools`,
  "Ancillary tools for the D programming language compiler",
);

/**
 * Do The Right Extraction: A tool for taking the hassle out of extracting archives
 */
export const dtrx = mkPackage(
  nixRaw`pkgs.dtrx`,
  "Do The Right Extraction: A tool for taking the hassle out of extracting archives",
);

/**
 * Digital TV (DVB) channel/transponder scan tables
 */
export const dtv_scan_tables = mkPackage(
  nixRaw`pkgs.dtv-scan-tables`,
  "Digital TV (DVB) channel/transponder scan tables",
);

/**
 * du + rust = dust. Like du but more intuitive
 */
export const du_dust = mkPackage(
  nixRaw`pkgs.du-dust`,
  "du + rust = dust. Like du but more intuitive",
);

/**
 * A tool to conveniently learn about the disk usage of directories
 */
export const dua = mkPackage(
  nixRaw`pkgs.dua`,
  "A tool to conveniently learn about the disk usage of directories",
);

/**
 * Linux tool for controlling PS5 DualSense controller
 */
export const dualsensectl = mkPackage(
  nixRaw`pkgs.dualsensectl`,
  "Linux tool for controlling PS5 DualSense controller",
);

/**
 * Package and build manager for D applications and libraries
 */
export const dub = mkPackage(
  nixRaw`pkgs.dub`,
  "Package and build manager for D applications and libraries",
);

/**
 * Collection of tools for inspecting and visualizing disk usage
 */
export const duc = mkPackage(
  nixRaw`pkgs.duc`,
  "Collection of tools for inspecting and visualizing disk usage",
);

/**
 * Embeddable SQL OLAP Database Management System
 */
export const duckdb = mkPackage(
  nixRaw`pkgs.duckdb`,
  "Embeddable SQL OLAP Database Management System",
);

/**
 * Gemini proxy to access the Small Web
 */
export const duckling_proxy = mkPackage(
  nixRaw`pkgs.duckling-proxy`,
  "Gemini proxy to access the Small Web",
);

/**
 * Duck-themed action puzzle video game
 */
export const duckmarines = mkPackage(
  nixRaw`pkgs.duckmarines`,
  "Duck-themed action puzzle video game",
);

/**
 * Simple, extendable and embeddable scripting language.
 */
export const duckscript = mkPackage(
  nixRaw`pkgs.duckscript`,
  "Simple, extendable and embeddable scripting language.",
);

/**
 * Fast PlayStation 1 emulator for x86-64/AArch32/AArch64
 */
export const duckstation = mkPackage(
  nixRaw`pkgs.duckstation`,
  "Fast PlayStation 1 emulator for x86-64/AArch32/AArch64",
);

/**
 * CLI for http://duden.de dictionary written in Python
 */
export const duden = mkPackage(
  nixRaw`pkgs.duden`,
  "CLI for http://duden.de dictionary written in Python",
);

/**
 * Disk Usage/Free Utility
 */
export const duf = mkPackage(
  nixRaw`pkgs.duf`,
  "Disk Usage/Free Utility",
);

/**
 * Quickly find duplicate files
 */
export const duff = mkPackage(
  nixRaw`pkgs.duff`,
  "Quickly find duplicate files",
);

/**
 * A file server that supports static serving, uploading, searching, accessing control, webdav
 */
export const dufs = mkPackage(
  nixRaw`pkgs.dufs`,
  "A file server that supports static serving, uploading, searching, accessing control, webdav",
);

/**
 * An embeddable Javascript engine, with a focus on portability and compact footprint
 */
export const duktape = mkPackage(
  nixRaw`pkgs.duktape`,
  "An embeddable Javascript engine, with a focus on portability and compact footprint",
);

/**
 * An npm scripts runner written in Rust
 */
export const dum = mkPackage(
  nixRaw`pkgs.dum`,
  "An npm scripts runner written in Rust",
);

/**
 * Module/tracker based music format parser and player library
 */
export const dumb = mkPackage(
  nixRaw`pkgs.dumb`,
  "Module/tracker based music format parser and player library",
);

/**
 * A minimal init system for Linux containers
 */
export const dumb_init = mkPackage(
  nixRaw`pkgs.dumb-init`,
  "A minimal init system for Linux containers",
);

/**
 * Linux Ext2 filesystem dump/restore utilities
 */
export const dump = mkPackage(
  nixRaw`pkgs.dump`,
  "Linux Ext2 filesystem dump/restore utilities",
);

/**
 * A simple Mode S decoder for RTLSDR devices
 */
export const dump1090 = mkPackage(
  nixRaw`pkgs.dump1090`,
  "A simple Mode S decoder for RTLSDR devices",
);

/**
 * Command-line utility for parsing the debugging information the compiler provides in ELF or stand-alone PDB files
 */
export const dump_syms = mkPackage(
  nixRaw`pkgs.dump_syms`,
  "Command-line utility for parsing the debugging information the compiler provides in ELF or stand-alone PDB files",
);

/**
 * Display and debug ASN.1 data
 */
export const dumpasn1 = mkPackage(
  nixRaw`pkgs.dumpasn1`,
  "Display and debug ASN.1 data",
);

/**
 * Minimal tool to produce a Nix NAR archive.
 */
export const dumpnar = mkPackage(
  nixRaw`pkgs.dumpnar`,
  "Minimal tool to produce a Nix NAR archive.",
);

/**
 * Dump .torrent file information
 */
export const dumptorrent = mkPackage(
  nixRaw`pkgs.dumptorrent`,
  "Dump .torrent file information",
);

/**
 * A composable build system
 */
export const dune_1 = mkPackage(
  nixRaw`pkgs.dune_1`,
  "A composable build system",
);

/**
 * A composable build system
 */
export const dune_2 = mkPackage(
  nixRaw`pkgs.dune_2`,
  "A composable build system",
);

/**
 * A composable build system
 */
export const dune_3 = mkPackage(
  nixRaw`pkgs.dune_3`,
  "A composable build system",
);

/**
 * Release dune packages in opam
 */
export const dune_release = mkPackage(
  nixRaw`pkgs.dune-release`,
  "Release dune packages in opam",
);

/**
 * Lightweight and customizable notification daemon
 */
export const dunst = mkPackage(
  nixRaw`pkgs.dunst`,
  "Lightweight and customizable notification daemon",
);

/**
 * Duo Security Unix login integration
 */
export const duo_unix = mkPackage(
  nixRaw`pkgs.duo-unix`,
  "Duo Security Unix login integration",
);

/**
 * CLI utility to find duplicate files
 */
export const dupd = mkPackage(
  nixRaw`pkgs.dupd`,
  "CLI utility to find duplicate files",
);

/**
 *  A fast file deduplicator.
 */
export const dupe_krill = mkPackage(
  nixRaw`pkgs.dupe-krill`,
  " A fast file deduplicator.",
);

/**
 * GUI tool to find duplicate files in a system
 */
export const dupeguru = mkPackage(
  nixRaw`pkgs.dupeguru`,
  "GUI tool to find duplicate files in a system",
);

/**
 * A simple tool for finding duplicated extents and submitting them for deduplication
 */
export const duperemove = mkPackage(
  nixRaw`pkgs.duperemove`,
  "A simple tool for finding duplicated extents and submitting them for deduplication",
);

/**
 * A new generation cloud backup tool
 */
export const duplicacy = mkPackage(
  nixRaw`pkgs.duplicacy`,
  "A new generation cloud backup tool",
);

/**
 * A free backup client that securely stores encrypted, incremental, compressed backups on cloud storage services and remote file servers
 */
export const duplicati = mkPackage(
  nixRaw`pkgs.duplicati`,
  "A free backup client that securely stores encrypted, incremental, compressed backups on cloud storage services and remote file servers",
);

/**
 * Encrypted bandwidth-efficient backup using the rsync algorithm
 */
export const duplicity = mkPackage(
  nixRaw`pkgs.duplicity`,
  "Encrypted bandwidth-efficient backup using the rsync algorithm",
);

/**
 * Shell front end for the duplicity backup tool
 */
export const duply = mkPackage(
  nixRaw`pkgs.duply`,
  "Shell front end for the duplicity backup tool",
);

/**
 * A background process that saves uncommitted changes on git
 */
export const dura = mkPackage(
  nixRaw`pkgs.dura`,
  "A background process that saves uncommitted changes on git",
);

/**
 * A command-line tool to select default applications for document types and URL schemes on Mac OS X
 */
export const duti = mkPackage(
  nixRaw`pkgs.duti`,
  "A command-line tool to select default applications for document types and URL schemes on Mac OS X",
);

/**
 * A tool to analyze file system usage written in Rust
 */
export const dutree = mkPackage(
  nixRaw`pkgs.dutree`,
  "A tool to analyze file system usage written in Rust",
);

/**
 * Version Control System for Machine Learning Projects
 */
export const dvc = mkPackage(
  nixRaw`pkgs.dvc`,
  "Version Control System for Machine Learning Projects",
);

/**
 * Version Control System for Machine Learning Projects
 */
export const dvc_with_remotes = mkPackage(
  nixRaw`pkgs.dvc-with-remotes`,
  "Version Control System for Machine Learning Projects",
);

/**
 * Suite of command line programs that creates a slideshow-style video from groups of pictures
 */
export const dvd_slideshow = mkPackage(
  nixRaw`pkgs.dvd-slideshow`,
  "Suite of command line programs that creates a slideshow-style video from groups of pictures",
);

/**
 * A utility to identify and optionally copy recordings from a DVD-VR format disc
 */
export const dvd_vr = mkPackage(
  nixRaw`pkgs.dvd-vr`,
  "A utility to identify and optionally copy recordings from a DVD-VR format disc",
);

/**
 * Tools for generating DVD files to be played on standalone DVD players
 */
export const dvdauthor = mkPackage(
  nixRaw`pkgs.dvdauthor`,
  "Tools for generating DVD files to be played on standalone DVD players",
);

/**
 * A tool to rip video DVDs from the command line
 */
export const dvdbackup = mkPackage(
  nixRaw`pkgs.dvdbackup`,
  "A tool to rip video DVDs from the command line",
);

/**
 * Data loss/scratch/aging protection for CD/DVD media
 */
export const dvdisaster = mkPackage(
  nixRaw`pkgs.dvdisaster`,
  "Data loss/scratch/aging protection for CD/DVD media",
);

/**
 * Tools for mastering Blu-ray and DVD+-RW/+-R media
 */
export const dvdplusrwtools = mkPackage(
  nixRaw`pkgs.dvdplusrwtools`,
  "Tools for mastering Blu-ray and DVD+-RW/+-R media",
);

/**
 * A DVD authoring software
 */
export const dvdstyler = mkPackage(
  nixRaw`pkgs.dvdstyler`,
  "A DVD authoring software",
);

/**
 * Receive and store audio & video over IEEE1394
 */
export const dvgrab = mkPackage(
  nixRaw`pkgs.dvgrab`,
  "Receive and store audio & video over IEEE1394",
);

/**
 * Dynamic virtual terminal manager
 */
export const dvtm = mkPackage(
  nixRaw`pkgs.dvtm`,
  "Dynamic virtual terminal manager",
);

/**
 * Dynamic virtual terminal manager
 */
export const dvtm_unstable = mkPackage(
  nixRaw`pkgs.dvtm-unstable`,
  "Dynamic virtual terminal manager",
);

/**
 * Convert ELF/DWARF symbol and type information into vol3's intermediate JSON
 */
export const dwarf2json = mkPackage(
  nixRaw`pkgs.dwarf2json`,
  "Convert ELF/DWARF symbol and type information into vol3's intermediate JSON",
);

/**
 * A single-player fantasy game with a randomly generated adventure world
 */
export const dwarf_fortress = mkPackage(
  nixRaw`pkgs.dwarf-fortress`,
  "A single-player fantasy game with a randomly generated adventure world",
);

/**
 * Tool to manage dwarves in a running game of Dwarf Fortress
 */
export const dwarf_therapist = mkPackage(
  nixRaw`pkgs.dwarf-therapist`,
  "Tool to manage dwarves in a running game of Dwarf Fortress",
);

export const dwarfdump = mkPackage(
  nixRaw`pkgs.dwarfdump`,
  "",
);

/**
 * A fast high compression read-only file system
 */
export const dwarfs = mkPackage(
  nixRaw`pkgs.dwarfs`,
  "A fast high compression read-only file system",
);

/**
 * Front-end for the diff program that operates at the word level instead of the line level
 */
export const dwdiff = mkPackage(
  nixRaw`pkgs.dwdiff`,
  "Front-end for the diff program that operates at the word level instead of the line level",
);

/**
 * A simple digital waveform viewer with vi-like key bindings
 */
export const dwfv = mkPackage(
  nixRaw`pkgs.dwfv`,
  "A simple digital waveform viewer with vi-like key bindings",
);

/**
 * Dynamic window manager for Wayland
 */
export const dwl = mkPackage(
  nixRaw`pkgs.dwl`,
  "Dynamic window manager for Wayland",
);

/**
 * An extremely fast, small, and dynamic window manager for X
 */
export const dwm = mkPackage(
  nixRaw`pkgs.dwm`,
  "An extremely fast, small, and dynamic window manager for X",
);

/**
 * Highly performant and configurable DWM status service
 */
export const dwm_status = mkPackage(
  nixRaw`pkgs.dwm-status`,
  "Highly performant and configurable DWM status service",
);

/**
 * A Modular Status Bar for dwm
 */
export const dwmbar = mkPackage(
  nixRaw`pkgs.dwmbar`,
  "A Modular Status Bar for dwm",
);

/**
 * Modular status bar for dwm written in c
 */
export const dwmblocks = mkPackage(
  nixRaw`pkgs.dwmblocks`,
  "Modular status bar for dwm written in c",
);

/**
 * A collection of shell color scripts collected by dt (Derek Taylor)
 */
export const dwt1_shell_color_scripts = mkPackage(
  nixRaw`pkgs.dwt1-shell-color-scripts`,
  "A collection of shell color scripts collected by dt (Derek Taylor)",
);

/**
 * DWARF optimization and duplicate removal tool
 */
export const dwz = mkPackage(
  nixRaw`pkgs.dwz`,
  "DWARF optimization and duplicate removal tool",
);

/**
 * Andre Fachat's open-source 6502 disassembler
 */
export const dxa = mkPackage(
  nixRaw`pkgs.dxa`,
  "Andre Fachat's open-source 6502 disassembler",
);

/**
 * Setup script for DXVK
 */
export const dxvk = mkPackage(
  nixRaw`pkgs.dxvk`,
  "Setup script for DXVK",
);

/**
 * A Vulkan-based translation layer for Direct3D 9/10/11
 */
export const dxvk_1 = mkPackage(
  nixRaw`pkgs.dxvk_1`,
  "A Vulkan-based translation layer for Direct3D 9/10/11",
);

/**
 * A Vulkan-based translation layer for Direct3D 9/10/11
 */
export const dxvk_2 = mkPackage(
  nixRaw`pkgs.dxvk_2`,
  "A Vulkan-based translation layer for Direct3D 9/10/11",
);

/**
 * Source Port of the Descent 1 and 2 engines
 */
export const dxx_rebirth = mkPackage(
  nixRaw`pkgs.dxx-rebirth`,
  "Source Port of the Descent 1 and 2 engines",
);

/**
 * The Dyalog APL interpreter
 */
export const dyalog = mkPackage(
  nixRaw`pkgs.dyalog`,
  "The Dyalog APL interpreter",
);

/**
 * A toolset enabling self-adaptive redeployment on top of Disnix
 */
export const dydisnix = mkPackage(
  nixRaw`pkgs.dydisnix`,
  "A toolset enabling self-adaptive redeployment on top of Disnix",
);

/**
 * A diff tool for YAML files, and sometimes JSON
 */
export const dyff = mkPackage(
  nixRaw`pkgs.dyff`,
  "A diff tool for YAML files, and sometimes JSON",
);

/**
 * Change terminal colors on the fly
 */
export const dynamic_colors = mkPackage(
  nixRaw`pkgs.dynamic-colors`,
  "Change terminal colors on the fly",
);

/**
 * Dynamic wallpaper maker for Gnome
 */
export const dynamic_wallpaper = mkPackage(
  nixRaw`pkgs.dynamic-wallpaper`,
  "Dynamic wallpaper maker for Gnome",
);

/**
 * A Cisco router emulator
 */
export const dynamips = mkPackage(
  nixRaw`pkgs.dynamips`,
  "A Cisco router emulator",
);

/**
 * Highly dynamic multi-platform foreign function call interface library
 */
export const dyncall = mkPackage(
  nixRaw`pkgs.dyncall`,
  "Highly dynamic multi-platform foreign function call interface library",
);

/**
 * Dynamic DNS update client with support for multiple protocols
 */
export const dyndnsc = mkPackage(
  nixRaw`pkgs.dyndnsc`,
  "Dynamic DNS update client with support for multiple protocols",
);

/**
 * DynamoDB CLI written in Rust
 */
export const dynein = mkPackage(
  nixRaw`pkgs.dynein`,
  "DynamoDB CLI written in Rust",
);

/**
 * Get information on your mounted disks
 */
export const dysk = mkPackage(
  nixRaw`pkgs.dysk`,
  "Get information on your mounted disks",
);

/**
 * Automated deployment of mutable components and services for Disnix
 */
export const dysnomia = mkPackage(
  nixRaw`pkgs.dysnomia`,
  "Automated deployment of mutable components and services for Disnix",
);

/**
 * X notification utility
 */
export const dzen2 = mkPackage(
  nixRaw`pkgs.dzen2`,
  "X notification utility",
);

/**
 * Enlightenment DR16 window manager
 */
export const e16 = mkPackage(
  nixRaw`pkgs.e16`,
  "Enlightenment DR16 window manager",
);

/**
 * An Enlightenment-like GTK theme with sharp corners
 */
export const e17gtk = mkPackage(
  nixRaw`pkgs.e17gtk`,
  "An Enlightenment-like GTK theme with sharp corners",
);

/**
 * Tools for creating and checking ext2/ext3/ext4 filesystems
 */
export const e2fsprogs = mkPackage(
  nixRaw`pkgs.e2fsprogs`,
  "Tools for creating and checking ext2/ext3/ext4 filesystems",
);

/**
 * Utilities to read/write/manipulate files in an ext2/ext3 filesystem
 */
export const e2tools = mkPackage(
  nixRaw`pkgs.e2tools`,
  "Utilities to read/write/manipulate files in an ext2/ext3 filesystem",
);

/**
 * Makes file paths from CLI output actionable
 */
export const ea = mkPackage(
  nixRaw`pkgs.ea`,
  "Makes file paths from CLI output actionable",
);

/**
 *  A better way of working with structured data on the command line
 */
export const each = mkPackage(
  nixRaw`pkgs.each`,
  " A better way of working with structured data on the command line",
);

/**
 * Schematic editor and PCB layout tool from Autodesk (formerly CadSoft)
 */
export const eagle = mkPackage(
  nixRaw`pkgs.eagle`,
  "Schematic editor and PCB layout tool from Autodesk (formerly CadSoft)",
);

/**
 * Zoomable User Interface
 */
export const eaglemode = mkPackage(
  nixRaw`pkgs.eaglemode`,
  "Zoomable User Interface",
);

/**
 * A sensitive data detection tool capable of scanning source code repositories for passwords, key files, and more
 */
export const earlybird = mkPackage(
  nixRaw`pkgs.earlybird`,
  "A sensitive data detection tool capable of scanning source code repositories for passwords, key files, and more",
);

/**
 * Early OOM Daemon for Linux
 */
export const earlyoom = mkPackage(
  nixRaw`pkgs.earlyoom`,
  "Early OOM Daemon for Linux",
);

/**
 * Simple music tag editor
 */
export const eartag = mkPackage(
  nixRaw`pkgs.eartag`,
  "Simple music tag editor",
);

/**
 * Build automation for the container era
 */
export const earthly = mkPackage(
  nixRaw`pkgs.earthly`,
  "Build automation for the container era",
);

/**
 * A simple, standalone, and lightweight tool that can do health/status checking, written in Go
 */
export const easeprobe = mkPackage(
  nixRaw`pkgs.easeprobe`,
  "A simple, standalone, and lightweight tool that can do health/status checking, written in Go",
);

/**
 * CLI for building, runing, testing, and managing your Emacs Lisp dependencies
 */
export const eask = mkPackage(
  nixRaw`pkgs.eask`,
  "CLI for building, runing, testing, and managing your Emacs Lisp dependencies",
);

/**
 * ABC music notation editor
 */
export const easyabc = mkPackage(
  nixRaw`pkgs.easyabc`,
  "ABC music notation editor",
);

/**
 * Computer-Aided Cryptographic Proofs
 */
export const easycrypt = mkPackage(
  nixRaw`pkgs.easycrypt`,
  "Computer-Aided Cryptographic Proofs",
);

/**
 * Testing program for EasyCrypt formalizations
 */
export const easycrypt_runtest = mkPackage(
  nixRaw`pkgs.easycrypt-runtest`,
  "Testing program for EasyCrypt formalizations",
);

/**
 * Audio effects for PipeWire applications.
 */
export const easyeffects = mkPackage(
  nixRaw`pkgs.easyeffects`,
  "Audio effects for PipeWire applications.",
);

/**
 * Fast JSON serializer for Go
 */
export const easyjson = mkPackage(
  nixRaw`pkgs.easyjson`,
  "Fast JSON serializer for Go",
);

/**
 * C++ logging library
 */
export const easyloggingpp = mkPackage(
  nixRaw`pkgs.easyloggingpp`,
  "C++ logging library",
);

/**
 * Ready-to-use OCR with 80+ supported languages and all popular writing scripts
 */
export const easyocr = mkPackage(
  nixRaw`pkgs.easyocr`,
  "Ready-to-use OCR with 80+ supported languages and all popular writing scripts",
);

/**
 * Read, write and execute programs on PADAUK microcontroller
 */
export const easypdkprog = mkPackage(
  nixRaw`pkgs.easypdkprog`,
  "Read, write and execute programs on PADAUK microcontroller",
);

/**
 * RPG Maker 2000/2003 and EasyRPG games interpreter
 */
export const easyrpg_player = mkPackage(
  nixRaw`pkgs.easyrpg-player`,
  "RPG Maker 2000/2003 and EasyRPG games interpreter",
);

/**
 * Simple shell based CA utility
 */
export const easyrsa = mkPackage(
  nixRaw`pkgs.easyrsa`,
  "Simple shell based CA utility",
);

/**
 * Customizable ZFS Snapshotting tool with zfs send/recv pulling
 */
export const easysnap = mkPackage(
  nixRaw`pkgs.easysnap`,
  "Customizable ZFS Snapshotting tool with zfs send/recv pulling",
);

/**
 * View and edit tags for various audio files
 */
export const easytag = mkPackage(
  nixRaw`pkgs.easytag`,
  "View and edit tags for various audio files",
);

/**
 * Digitization of the Garamond shown on the Egenolff-Berner specimen
 */
export const eb_garamond = mkPackage(
  nixRaw`pkgs.eb-garamond`,
  "Digitization of the Garamond shown on the Egenolff-Berner specimen",
);

/**
 * Chess interface for Unix-like systems
 */
export const eboard = mkPackage(
  nixRaw`pkgs.eboard`,
  "Chess interface for Unix-like systems",
);

/**
 * Convert ebooks to Morse MP3s/OGGs
 */
export const ebook2cw = mkPackage(
  nixRaw`pkgs.ebook2cw`,
  "Convert ebooks to Morse MP3s/OGGs",
);

/**
 * Tools and library for dealing with various ebook file formats
 */
export const ebook_tools = mkPackage(
  nixRaw`pkgs.ebook_tools`,
  "Tools and library for dealing with various ebook file formats",
);

/**
 * eBPF verifier based on abstract interpretation
 */
export const ebpf_verifier = mkPackage(
  nixRaw`pkgs.ebpf-verifier`,
  "eBPF verifier based on abstract interpretation",
);

/**
 * A filtering tool for Linux-based bridging firewalls
 */
export const ebtables = mkPackage(
  nixRaw`pkgs.ebtables`,
  "A filtering tool for Linux-based bridging firewalls",
);

/**
 * Level metering according to the EBU R-128 recommendation
 */
export const ebumeter = mkPackage(
  nixRaw`pkgs.ebumeter`,
  "Level metering according to the EBU R-128 recommendation",
);

/**
 * ebusd
 */
export const ebusd = mkPackage(
  nixRaw`pkgs.ebusd`,
  "ebusd",
);

/**
 * Command-line tools to create and manage Amazon EC2 virtual machine images
 */
export const ec2_ami_tools = mkPackage(
  nixRaw`pkgs.ec2-ami-tools`,
  "Command-line tools to create and manage Amazon EC2 virtual machine images",
);

/**
 * Command-line tools to create and manage Amazon EC2 virtual machines
 */
export const ec2_api_tools = mkPackage(
  nixRaw`pkgs.ec2-api-tools`,
  "Command-line tools to create and manage Amazon EC2 virtual machines",
);

/**
 * Amazon EC2 Metadata Mock
 */
export const ec2_metadata_mock = mkPackage(
  nixRaw`pkgs.ec2-metadata-mock`,
  "Amazon EC2 Metadata Mock",
);

/**
 * AWS post-exploitation tool
 */
export const ec2stepshell = mkPackage(
  nixRaw`pkgs.ec2stepshell`,
  "AWS post-exploitation tool",
);

/**
 * Software package designed for multitrack audio processing
 */
export const ecasound = mkPackage(
  nixRaw`pkgs.ecasound`,
  "Software package designed for multitrack audio processing",
);

/**
 * the eBPF compile toolchain for eunomia-bpf
 */
export const ecc = mkPackage(
  nixRaw`pkgs.ecc`,
  "the eBPF compile toolchain for eunomia-bpf",
);

/**
 * ECMWF library for reading and writing GRIB, BUFR and GTS abbreviated header
 */
export const eccodes = mkPackage(
  nixRaw`pkgs.eccodes`,
  "ECMWF library for reading and writing GRIB, BUFR and GTS abbreviated header",
);

/**
 * Create and manipulate ECC NISTP256 keypairs
 */
export const ecdsatool = mkPackage(
  nixRaw`pkgs.ecdsatool`,
  "Create and manipulate ECC NISTP256 keypairs",
);

/**
 * Tiny collection of programs used for ECDSA (keygen, sign, verify)
 */
export const ecdsautils = mkPackage(
  nixRaw`pkgs.ecdsautils`,
  "Tiny collection of programs used for ECDSA (keygen, sign, verify)",
);

/**
 * Ethereum smart contract fuzzer
 */
export const echidna = mkPackage(
  nixRaw`pkgs.echidna`,
  "Ethereum smart contract fuzzer",
);

/**
 * IP address lookup service
 */
export const echoip = mkPackage(
  nixRaw`pkgs.echoip`,
  "IP address lookup service",
);

/**
 * Lisp implementation aiming to be small, fast and easy to embed
 */
export const ecl = mkPackage(
  nixRaw`pkgs.ecl`,
  "Lisp implementation aiming to be small, fast and easy to embed",
);

/**
 * Lisp implementation aiming to be small, fast and easy to embed
 */
export const ecl_16_1_2 = mkPackage(
  nixRaw`pkgs.ecl_16_1_2`,
  "Lisp implementation aiming to be small, fast and easy to embed",
);

/**
 * A scala implementation of the Lightning Network
 */
export const eclair = mkPackage(
  nixRaw`pkgs.eclair`,
  "A scala implementation of the Lightning Network",
);

/**
 * Elliptic curve tools
 */
export const eclib = mkPackage(
  nixRaw`pkgs.eclib`,
  "Elliptic curve tools",
);

/**
 * EditorConfig linter written in Go
 */
export const eclint = mkPackage(
  nixRaw`pkgs.eclint`,
  "EditorConfig linter written in Go",
);

/**
 * Fast and feature-rich Java heap analyzer
 */
export const eclipse_mat = mkPackage(
  nixRaw`pkgs.eclipse-mat`,
  "Fast and feature-rich Java heap analyzer",
);

/**
 * Elliptic Curve Method for Integer Factorization
 */
export const ecm = mkPackage(
  nixRaw`pkgs.ecm`,
  "Elliptic Curve Method for Integer Factorization",
);

/**
 * A utility to uncompress ECM files to BIN CD format
 */
export const ecmtools = mkPackage(
  nixRaw`pkgs.ecmtools`,
  "A utility to uncompress ECM files to BIN CD format",
);

/**
 * Electronic PCR software tool
 */
export const ecopcr = mkPackage(
  nixRaw`pkgs.ecopcr`,
  "Electronic PCR software tool",
);

/**
 * A lightweight conic solver for second-order cone programming
 */
export const ecos = mkPackage(
  nixRaw`pkgs.ecos`,
  "A lightweight conic solver for second-order cone programming",
);

/**
 * A tool to program ECP5 FPGAs
 */
export const ecpdap = mkPackage(
  nixRaw`pkgs.ecpdap`,
  "A tool to program ECP5 FPGAs",
);

/**
 * Enterprise-class stacked cryptographic filesystem
 */
export const ecryptfs = mkPackage(
  nixRaw`pkgs.ecryptfs`,
  "Enterprise-class stacked cryptographic filesystem",
);

/**
 * Helper script to create/mount/unemount encrypted directories using eCryptfs without needing root permissions
 */
export const ecryptfs_helper = mkPackage(
  nixRaw`pkgs.ecryptfs-helper`,
  "Helper script to create/mount/unemount encrypted directories using eCryptfs without needing root permissions",
);

/**
 * The agent that runs on AWS EC2 container instances and starts containers on behalf of Amazon ECS
 */
export const ecs_agent = mkPackage(
  nixRaw`pkgs.ecs-agent`,
  "The agent that runs on AWS EC2 container instances and starts containers on behalf of Amazon ECS",
);

/**
 * Dump the RAM of a laptop's Embedded/Environmental Controller (EC)
 */
export const ectool = mkPackage(
  nixRaw`pkgs.ectool`,
  "Dump the RAM of a laptop's Embedded/Environmental Controller (EC)",
);

/**
 * Enhanched SDL-based port of Wolfenstein 3D for various platforms
 */
export const ecwolf = mkPackage(
  nixRaw`pkgs.ecwolf`,
  "Enhanched SDL-based port of Wolfenstein 3D for various platforms",
);

/**
 * The GNU implementation of the standard Unix editor
 */
export const ed = mkPackage(
  nixRaw`pkgs.ed`,
  "The GNU implementation of the standard Unix editor",
);

/**
 * The GNU implementation of the standard Unix editor
 */
export const edUnstable = mkPackage(
  nixRaw`pkgs.edUnstable`,
  "The GNU implementation of the standard Unix editor",
);

/**
 * Handles the reporting of hardware-related memory errors
 */
export const edac_utils = mkPackage(
  nixRaw`pkgs.edac-utils`,
  "Handles the reporting of hardware-related memory errors",
);

/**
 * Cross platform AArch32/x86/x86-64 debugger
 */
export const edb = mkPackage(
  nixRaw`pkgs.edb`,
  "Cross platform AArch32/x86/x86-64 debugger",
);

/**
 * Command Line Editor Browser
 */
export const edbrowse = mkPackage(
  nixRaw`pkgs.edbrowse`,
  "Command Line Editor Browser",
);

/**
 * Graphical editor for the specification and visualization of Graphol ontologies
 */
export const eddy = mkPackage(
  nixRaw`pkgs.eddy`,
  "Graphical editor for the specification and visualization of Graphol ontologies",
);

/**
 * A shared library for Meta's source control filesystem tools (EdenFS and Watchman)
 */
export const edencommon = mkPackage(
  nixRaw`pkgs.edencommon`,
  "A shared library for Meta's source control filesystem tools (EdenFS and Watchman)",
);

/**
 * A server based on Deno runtime, capable of running JavaScript, TypeScript, and WASM services
 */
export const edge_runtime = mkPackage(
  nixRaw`pkgs.edge-runtime`,
  "A server based on Deno runtime, capable of running JavaScript, TypeScript, and WASM services",
);

/**
 * EdgeDB cli
 */
export const edgedb = mkPackage(
  nixRaw`pkgs.edgedb`,
  "EdgeDB cli",
);

/**
 * A command line tool that compiles a TensorFlow Lite model into an Edge TPU compatible file.
 */
export const edgetpu_compiler = mkPackage(
  nixRaw`pkgs.edgetpu-compiler`,
  "A command line tool that compiles a TensorFlow Lite model into an Edge TPU compatible file.",
);

/**
 * EdgeTX Companion transmitter support software
 */
export const edgetx = mkPackage(
  nixRaw`pkgs.edgetx`,
  "EdgeTX Companion transmitter support software",
);

/**
 * EDID decoder and conformance tester
 */
export const edid_decode = mkPackage(
  nixRaw`pkgs.edid-decode`,
  "EDID decoder and conformance tester",
);

/**
 * Hackerswork to generate an EDID blob from given Xorg Modelines
 */
export const edid_generator = mkPackage(
  nixRaw`pkgs.edid-generator`,
  "Hackerswork to generate an EDID blob from given Xorg Modelines",
);

/**
 * Program to rename and remove files and directories using your editor
 */
export const edir = mkPackage(
  nixRaw`pkgs.edir`,
  "Program to rename and remove files and directories using your editor",
);

/**
 * A relaxing mix of Vi and ACME
 */
export const edit = mkPackage(
  nixRaw`pkgs.edit`,
  "A relaxing mix of Vi and ACME",
);

/**
 * A readline() replacement for UNIX without termcap (ncurses)
 */
export const editline = mkPackage(
  nixRaw`pkgs.editline`,
  "A readline() replacement for UNIX without termcap (ncurses)",
);

/**
 * A tool to verify that your files are in harmony with your .editorconfig
 */
export const editorconfig_checker = mkPackage(
  nixRaw`pkgs.editorconfig-checker`,
  "A tool to verify that your files are in harmony with your .editorconfig",
);

/**
 * EditorConfig core library written in C
 */
export const editorconfig_core_c = mkPackage(
  nixRaw`pkgs.editorconfig-core-c`,
  "EditorConfig core library written in C",
);

/**
 * A dynamic resource editor for X Toolkit applications
 */
export const editres = mkPackage(
  nixRaw`pkgs.editres`,
  "A dynamic resource editor for X Toolkit applications",
);

/**
 * Intel EFI development kit
 */
export const edk2 = mkPackage(
  nixRaw`pkgs.edk2`,
  "Intel EFI development kit",
);

/**
 * UEFI Shell from Tianocore EFI development kit
 */
export const edk2_uefi_shell = mkPackage(
  nixRaw`pkgs.edk2-uefi-shell`,
  "UEFI Shell from Tianocore EFI development kit",
);

/**
 * Qualcomm EDL tool (Sahara / Firehose / Diag)
 */
export const edl = mkPackage(
  nixRaw`pkgs.edl`,
  "Qualcomm EDL tool (Sahara / Firehose / Diag)",
);

/**
 * Lightweight, fast C/C++ library for sequence alignment using edit distance
 */
export const edlib = mkPackage(
  nixRaw`pkgs.edlib`,
  "Lightweight, fast C/C++ library for sequence alignment using edit distance",
);

/**
 * FreeDOS line editor
 */
export const edlin = mkPackage(
  nixRaw`pkgs.edlin`,
  "FreeDOS line editor",
);

/**
 * The MOE Standard Kai Font, a Chinese font by the Ministry of Education, ROC (Taiwan)
 */
export const edukai = mkPackage(
  nixRaw`pkgs.edukai`,
  "The MOE Standard Kai Font, a Chinese font by the Ministry of Education, ROC (Taiwan)",
);

/**
 * Enhanched port of Duke Nukem 3D for various platforms
 */
export const eduke32 = mkPackage(
  nixRaw`pkgs.eduke32`,
  "Enhanched port of Duke Nukem 3D for various platforms",
);

/**
 * The MOE Li Font, a clerical Chinese font by the Ministry of Education, ROC (Taiwan)
 */
export const eduli = mkPackage(
  nixRaw`pkgs.eduli`,
  "The MOE Li Font, a clerical Chinese font by the Ministry of Education, ROC (Taiwan)",
);

/**
 * The MOE Standard Song Font, a Chinese font by the Ministry of Education, ROC (Taiwan)
 */
export const edusong = mkPackage(
  nixRaw`pkgs.edusong`,
  "The MOE Standard Song Font, a Chinese font by the Ministry of Education, ROC (Taiwan)",
);

/**
 * A text font for musical scores
 */
export const edwin = mkPackage(
  nixRaw`pkgs.edwin`,
  "A text font for musical scores",
);

/**
 * Go version of Plan9 Acme Editor
 */
export const edwood = mkPackage(
  nixRaw`pkgs.edwood`,
  "Go version of Plan9 Acme Editor",
);

/**
 * Byzantine Musical Notation in Unicode with OpenType
 */
export const eemusic = mkPackage(
  nixRaw`pkgs.eemusic`,
  "Byzantine Musical Notation in Unicode with OpenType",
);

/**
 * A functional programming language based on algebraic effects and their handlers
 */
export const eff = mkPackage(
  nixRaw`pkgs.eff`,
  "A functional programming language based on algebraic effects and their handlers",
);

/**
 * Fast and effective C++ file optimizer
 */
export const efficient_compression_tool = mkPackage(
  nixRaw`pkgs.efficient-compression-tool`,
  "Fast and effective C++ file optimizer",
);

/**
 * Graphical task manager, based on the todo.txt format
 */
export const effitask = mkPackage(
  nixRaw`pkgs.effitask`,
  "Graphical task manager, based on the todo.txt format",
);

/**
 * A Linux user-space application to modify the Intel Extensible Firmware Interface (EFI) Boot Manager
 */
export const efibootmgr = mkPackage(
  nixRaw`pkgs.efibootmgr`,
  "A Linux user-space application to modify the Intel Extensible Firmware Interface (EFI) Boot Manager",
);

/**
 * Tools for manipulating UEFI secure boot platforms
 */
export const efitools = mkPackage(
  nixRaw`pkgs.efitools`,
  "Tools for manipulating UEFI secure boot platforms",
);

/**
 * Tools and library to manipulate EFI variables
 */
export const efivar = mkPackage(
  nixRaw`pkgs.efivar`,
  "Tools and library to manipulate EFI variables",
);

/**
 * Speech server for screen readers
 */
export const eflite = mkPackage(
  nixRaw`pkgs.eflite`,
  "Speech server for screen readers",
);

/**
 * General purpose Language Server
 */
export const efm_langserver = mkPackage(
  nixRaw`pkgs.efm-langserver`,
  "General purpose Language Server",
);

/**
 * The /efont/ Unicode bitmap font
 */
export const efont_unicode = mkPackage(
  nixRaw`pkgs.efont-unicode`,
  "The /efont/ Unicode bitmap font",
);

/**
 * Easily install prebuilt binaries from GitHub
 */
export const eget = mkPackage(
  nixRaw`pkgs.eget`,
  "Easily install prebuilt binaries from GitHub",
);

/**
 * Generate nix-expression from CHICKEN scheme eggs
 */
export const egg2nix = mkPackage(
  nixRaw`pkgs.egg2nix`,
  "Generate nix-expression from CHICKEN scheme eggs",
);

/**
 * D-Bus bindings for GObject
 */
export const eggdbus = mkPackage(
  nixRaw`pkgs.eggdbus`,
  "D-Bus bindings for GObject",
);

/**
 * An Internet Relay Chat (IRC) bot
 */
export const eggdrop = mkPackage(
  nixRaw`pkgs.eggdrop`,
  "An Internet Relay Chat (IRC) bot",
);

/**
 * A fixpoint reasoning system that unifies Datalog and equality saturation
 */
export const egglog = mkPackage(
  nixRaw`pkgs.egglog`,
  "A fixpoint reasoning system that unifies Datalog and equality saturation",
);

/**
 * Fast genome-wide functional annotation through orthology assignment
 */
export const eggnog_mapper = mkPackage(
  nixRaw`pkgs.eggnog-mapper`,
  "Fast genome-wide functional annotation through orthology assignment",
);

/**
 * The EGLStream-based Wayland external platform
 */
export const egl_wayland = mkPackage(
  nixRaw`pkgs.egl-wayland`,
  "The EGLStream-based Wayland external platform",
);

/**
 * The EGL External Platform interface
 */
export const eglexternalplatform = mkPackage(
  nixRaw`pkgs.eglexternalplatform`,
  "The EGL External Platform interface",
);

/**
 * Run Linux desktop applications under a different local user
 */
export const ego = mkPackage(
  nixRaw`pkgs.ego`,
  "Run Linux desktop applications under a different local user",
);

/**
 * 3D dungeon crawling adventure
 */
export const egoboo = mkPackage(
  nixRaw`pkgs.egoboo`,
  "3D dungeon crawling adventure",
);

/**
 * Tool for making call graphs of C programmes
 */
export const egypt = mkPackage(
  nixRaw`pkgs.egypt`,
  "Tool for making call graphs of C programmes",
);

/**
 * Graphical editor for ACLs and extended attributes
 */
export const eiciel = mkPackage(
  nixRaw`pkgs.eiciel`,
  "Graphical editor for ACLs and extended attributes",
);

/**
 * Belgian electronic identity card (eID) middleware
 */
export const eid_mw = mkPackage(
  nixRaw`pkgs.eid-mw`,
  "Belgian electronic identity card (eID) middleware",
);

/**
 * A single TUI-based registry for drm-free, wine and steam games on linux, accessed through a rofi launch menu
 */
export const eidolon = mkPackage(
  nixRaw`pkgs.eidolon`,
  "A single TUI-based registry for drm-free, wine and steam games on linux, accessed through a rofi launch menu",
);

/**
 * C++ template library for linear algebra: vectors, matrices, and related algorithms
 */
export const eigen = mkPackage(
  nixRaw`pkgs.eigen`,
  "C++ template library for linear algebra: vectors, matrices, and related algorithms",
);

/**
 * C++ template library for linear algebra: vectors, matrices, and related algorithms
 */
export const eigen2 = mkPackage(
  nixRaw`pkgs.eigen2`,
  "C++ template library for linear algebra: vectors, matrices, and related algorithms",
);

/**
 * Computer algebra system written in C
 */
export const eigenmath = mkPackage(
  nixRaw`pkgs.eigenmath`,
  "Computer algebra system written in C",
);

/**
 * A cross-platform program that uses the Direct Connect and ADC protocols
 */
export const eiskaltdcpp = mkPackage(
  nixRaw`pkgs.eiskaltdcpp`,
  "A cross-platform program that uses the Direct Connect and ADC protocols",
);

/**
 * Open-source XMPP application server written in Erlang
 */
export const ejabberd = mkPackage(
  nixRaw`pkgs.ejabberd`,
  "Open-source XMPP application server written in Erlang",
);

export const eject = mkPackage(
  nixRaw`pkgs.eject`,
  "",
);

/**
 * Embedded JavaScript templates
 */
export const ejs = mkPackage(
  nixRaw`pkgs.ejs`,
  "Embedded JavaScript templates",
);

/**
 * A small library to manage encrypted secrets using asymmetric encryption
 */
export const ejson = mkPackage(
  nixRaw`pkgs.ejson`,
  "A small library to manage encrypted secrets using asymmetric encryption",
);

/**
 * A tool to simplify storing secrets that should be accessible in the shell environment in your git repo.
 */
export const ejson2env = mkPackage(
  nixRaw`pkgs.ejson2env`,
  "A tool to simplify storing secrets that should be accessible in the shell environment in your git repo.",
);

/**
 * Build system ("make" in reverse)
 */
export const ekam = mkPackage(
  nixRaw`pkgs.ekam`,
  "Build system (\"make\" in reverse)",
);

/**
 * Chinese text-to-speech software
 */
export const ekho = mkPackage(
  nixRaw`pkgs.ekho`,
  "Chinese text-to-speech software",
);

/**
 * Automated first-order theorem prover
 */
export const ekrhyper = mkPackage(
  nixRaw`pkgs.ekrhyper`,
  "Automated first-order theorem prover",
);

/**
 * Tool to visualize dynamic node usage within a cluster
 */
export const eks_node_viewer = mkPackage(
  nixRaw`pkgs.eks-node-viewer`,
  "Tool to visualize dynamic node usage within a cluster",
);

/**
 * A CLI for Amazon EKS
 */
export const eksctl = mkPackage(
  nixRaw`pkgs.eksctl`,
  "A CLI for Amazon EKS",
);

/**
 * Small tool to manage your installations of the Lean theorem prover
 */
export const elan = mkPackage(
  nixRaw`pkgs.elan`,
  "Small tool to manage your installations of the Lean theorem prover",
);

/**
 * Design spring animations
 */
export const elastic = mkPackage(
  nixRaw`pkgs.elastic`,
  "Design spring animations",
);

/**
 * Message queueing system with Java, Scala and Amazon SQS-compatible interfaces
 */
export const elasticmq_server_bin = mkPackage(
  nixRaw`pkgs.elasticmq-server-bin`,
  "Message queueing system with Java, Scala and Amazon SQS-compatible interfaces",
);

/**
 * Open Source, Distributed, RESTful Search Engine
 */
export const elasticsearch = mkPackage(
  nixRaw`pkgs.elasticsearch`,
  "Open Source, Distributed, RESTful Search Engine",
);

/**
 * Open Source, Distributed, RESTful Search Engine
 */
export const elasticsearch7 = mkPackage(
  nixRaw`pkgs.elasticsearch7`,
  "Open Source, Distributed, RESTful Search Engine",
);

/**
 * Curate, or manage, your Elasticsearch indices and snapshots
 */
export const elasticsearch_curator = mkPackage(
  nixRaw`pkgs.elasticsearch-curator`,
  "Curate, or manage, your Elasticsearch indices and snapshots",
);

/**
 * Image registration toolkit based on ITK
 */
export const elastix = mkPackage(
  nixRaw`pkgs.elastix`,
  "Image registration toolkit based on ITK",
);

/**
 * Electric Sheep, a distributed screen saver for evolving artificial organisms
 */
export const electricsheep = mkPackage(
  nixRaw`pkgs.electricsheep`,
  "Electric Sheep, a distributed screen saver for evolving artificial organisms",
);

/**
 * Cross platform desktop application shell
 */
export const electron = mkPackage(
  nixRaw`pkgs.electron`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_10 = mkPackage(
  nixRaw`pkgs.electron_10`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_10_bin = mkPackage(
  nixRaw`pkgs.electron_10-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_11 = mkPackage(
  nixRaw`pkgs.electron_11`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_11_bin = mkPackage(
  nixRaw`pkgs.electron_11-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_12 = mkPackage(
  nixRaw`pkgs.electron_12`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_12_bin = mkPackage(
  nixRaw`pkgs.electron_12-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_13 = mkPackage(
  nixRaw`pkgs.electron_13`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_13_bin = mkPackage(
  nixRaw`pkgs.electron_13-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_14 = mkPackage(
  nixRaw`pkgs.electron_14`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_14_bin = mkPackage(
  nixRaw`pkgs.electron_14-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_15 = mkPackage(
  nixRaw`pkgs.electron_15`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_15_bin = mkPackage(
  nixRaw`pkgs.electron_15-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_16 = mkPackage(
  nixRaw`pkgs.electron_16`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_16_bin = mkPackage(
  nixRaw`pkgs.electron_16-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_17 = mkPackage(
  nixRaw`pkgs.electron_17`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_17_bin = mkPackage(
  nixRaw`pkgs.electron_17-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_18 = mkPackage(
  nixRaw`pkgs.electron_18`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_18_bin = mkPackage(
  nixRaw`pkgs.electron_18-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_19 = mkPackage(
  nixRaw`pkgs.electron_19`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_19_bin = mkPackage(
  nixRaw`pkgs.electron_19-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_20 = mkPackage(
  nixRaw`pkgs.electron_20`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_20_bin = mkPackage(
  nixRaw`pkgs.electron_20-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_21 = mkPackage(
  nixRaw`pkgs.electron_21`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_21_bin = mkPackage(
  nixRaw`pkgs.electron_21-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_22 = mkPackage(
  nixRaw`pkgs.electron_22`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_22_bin = mkPackage(
  nixRaw`pkgs.electron_22-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_23 = mkPackage(
  nixRaw`pkgs.electron_23`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_23_bin = mkPackage(
  nixRaw`pkgs.electron_23-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_24 = mkPackage(
  nixRaw`pkgs.electron_24`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_24_bin = mkPackage(
  nixRaw`pkgs.electron_24-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_25 = mkPackage(
  nixRaw`pkgs.electron_25`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_25_bin = mkPackage(
  nixRaw`pkgs.electron_25-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_26 = mkPackage(
  nixRaw`pkgs.electron_26`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_26_bin = mkPackage(
  nixRaw`pkgs.electron_26-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_27 = mkPackage(
  nixRaw`pkgs.electron_27`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_27_bin = mkPackage(
  nixRaw`pkgs.electron_27-bin`,
  "Cross platform desktop application shell",
);

/**
 * Cross platform desktop application shell
 */
export const electron_bin = mkPackage(
  nixRaw`pkgs.electron-bin`,
  "Cross platform desktop application shell",
);

/**
 * A Bitcoin Cash SPV Wallet
 */
export const electron_cash = mkPackage(
  nixRaw`pkgs.electron-cash`,
  "A Bitcoin Cash SPV Wallet",
);

/**
 * The easiest way to get started with Electron
 */
export const electron_fiddle = mkPackage(
  nixRaw`pkgs.electron-fiddle`,
  "The easiest way to get started with Electron",
);

/**
 * ElectronMail is an Electron-based unofficial desktop client for ProtonMail
 */
export const electron_mail = mkPackage(
  nixRaw`pkgs.electron-mail`,
  "ElectronMail is an Electron-based unofficial desktop client for ProtonMail",
);

/**
 * An electron based web video services player
 */
export const electronplayer = mkPackage(
  nixRaw`pkgs.electronplayer`,
  "An electron based web video services player",
);

/**
 * An efficient re-implementation of Electrum Server in Rust
 */
export const electrs = mkPackage(
  nixRaw`pkgs.electrs`,
  "An efficient re-implementation of Electrum Server in Rust",
);

/**
 * Lightweight Bitcoin wallet
 */
export const electrum = mkPackage(
  nixRaw`pkgs.electrum`,
  "Lightweight Bitcoin wallet",
);

/**
 * Lightweight Groestlcoin wallet
 */
export const electrum_grs = mkPackage(
  nixRaw`pkgs.electrum-grs`,
  "Lightweight Groestlcoin wallet",
);

/**
 * Lightweight Litecoin Client
 */
export const electrum_ltc = mkPackage(
  nixRaw`pkgs.electrum-ltc`,
  "Lightweight Litecoin Client",
);

/**
 * The periodic table on the command line
 */
export const element = mkPackage(
  nixRaw`pkgs.element`,
  "The periodic table on the command line",
);

/**
 * A feature-rich client for Matrix.org
 */
export const element_desktop = mkPackage(
  nixRaw`pkgs.element-desktop`,
  "A feature-rich client for Matrix.org",
);

export const element_desktop_wayland = mkPackage(
  nixRaw`pkgs.element-desktop-wayland`,
  "",
);

/**
 * A glossy Matrix collaboration client for the web
 */
export const element_web = mkPackage(
  nixRaw`pkgs.element-web`,
  "A glossy Matrix collaboration client for the web",
);

/**
 * A glossy Matrix collaboration client for the web
 */
export const element_web_unwrapped = mkPackage(
  nixRaw`pkgs.element-web-unwrapped`,
  "A glossy Matrix collaboration client for the web",
);

/**
 * Elementary icons for Xfce and other GTK desktops like GNOME
 */
export const elementary_xfce_icon_theme = mkPackage(
  nixRaw`pkgs.elementary-xfce-icon-theme`,
  "Elementary icons for Xfce and other GTK desktops like GNOME",
);

/**
 * Open Source implementation of advanced blockchain features extending the Bitcoin protocol
 */
export const elements = mkPackage(
  nixRaw`pkgs.elements`,
  "Open Source implementation of advanced blockchain features extending the Bitcoin protocol",
);

/**
 * Open Source implementation of advanced blockchain features extending the Bitcoin protocol
 */
export const elementsd = mkPackage(
  nixRaw`pkgs.elementsd`,
  "Open Source implementation of advanced blockchain features extending the Bitcoin protocol",
);

/**
 * Open Source implementation of advanced blockchain features extending the Bitcoin protocol
 */
export const elementsd_simplicity = mkPackage(
  nixRaw`pkgs.elementsd-simplicity`,
  "Open Source implementation of advanced blockchain features extending the Bitcoin protocol",
);

/**
 * Convert ELF files to UF2 for USB Flashing Bootloaders
 */
export const elf2uf2_rs = mkPackage(
  nixRaw`pkgs.elf2uf2-rs`,
  "Convert ELF files to UF2 for USB Flashing Bootloaders",
);

/**
 * Tools for inspecting, analyzing and optimizing ELF files
 */
export const elf_dissector = mkPackage(
  nixRaw`pkgs.elf-dissector`,
  "Tools for inspecting, analyzing and optimizing ELF files",
);

/**
 * The datastructures of ELF according to the target platform's libc
 */
export const elf_header_real = mkPackage(
  nixRaw`pkgs.elf-header-real`,
  "The datastructures of ELF according to the target platform's libc",
);

/**
 * ELF visualizer, generates HTML files from ELF binaries.
 */
export const elfcat = mkPackage(
  nixRaw`pkgs.elfcat`,
  "ELF visualizer, generates HTML files from ELF binaries.",
);

/**
 * Small utility for showing information about ELF files
 */
export const elfinfo = mkPackage(
  nixRaw`pkgs.elfinfo`,
  "Small utility for showing information about ELF files",
);

/**
 * Header-only C++ library for reading and generating files in the ELF binary format
 */
export const elfio = mkPackage(
  nixRaw`pkgs.elfio`,
  "Header-only C++ library for reading and generating files in the ELF binary format",
);

/**
 * A collection of programs that access and manipulate ELF files
 */
export const elfkickers = mkPackage(
  nixRaw`pkgs.elfkickers`,
  "A collection of programs that access and manipulate ELF files",
);

/**
 * A set of utilities to handle ELF objects
 */
export const elfutils = mkPackage(
  nixRaw`pkgs.elfutils`,
  "A set of utilities to handle ELF objects",
);

/**
 * Decode x86 binaries and print out which instruction set extensions they use.
 */
export const elfx86exts = mkPackage(
  nixRaw`pkgs.elfx86exts`,
  "Decode x86 binaries and print out which instruction set extensions they use.",
);

/**
 * Translator Construction Made Easy
 */
export const eli = mkPackage(
  nixRaw`pkgs.eli`,
  "Translator Construction Made Easy",
);

/**
 * Full-featured text-mode web browser (package based on the fork felinks)
 */
export const elinks = mkPackage(
  nixRaw`pkgs.elinks`,
  "Full-featured text-mode web browser (package based on the fork felinks)",
);

/**
 * Render Eliot logs as an ASCII tree
 */
export const eliot_tree = mkPackage(
  nixRaw`pkgs.eliot-tree`,
  "Render Eliot logs as an ASCII tree",
);

/**
 * A functional, meta-programming aware language built on top of the Erlang VM
 */
export const elixir = mkPackage(
  nixRaw`pkgs.elixir`,
  "A functional, meta-programming aware language built on top of the Erlang VM",
);

/**
 * A functional, meta-programming aware language built on top of the Erlang VM
 */
export const elixir_1_10 = mkPackage(
  nixRaw`pkgs.elixir_1_10`,
  "A functional, meta-programming aware language built on top of the Erlang VM",
);

/**
 * A functional, meta-programming aware language built on top of the Erlang VM
 */
export const elixir_1_11 = mkPackage(
  nixRaw`pkgs.elixir_1_11`,
  "A functional, meta-programming aware language built on top of the Erlang VM",
);

/**
 * A functional, meta-programming aware language built on top of the Erlang VM
 */
export const elixir_1_12 = mkPackage(
  nixRaw`pkgs.elixir_1_12`,
  "A functional, meta-programming aware language built on top of the Erlang VM",
);

/**
 * A functional, meta-programming aware language built on top of the Erlang VM
 */
export const elixir_1_13 = mkPackage(
  nixRaw`pkgs.elixir_1_13`,
  "A functional, meta-programming aware language built on top of the Erlang VM",
);

/**
 * A functional, meta-programming aware language built on top of the Erlang VM
 */
export const elixir_1_14 = mkPackage(
  nixRaw`pkgs.elixir_1_14`,
  "A functional, meta-programming aware language built on top of the Erlang VM",
);

/**
 * A functional, meta-programming aware language built on top of the Erlang VM
 */
export const elixir_1_15 = mkPackage(
  nixRaw`pkgs.elixir_1_15`,
  "A functional, meta-programming aware language built on top of the Erlang VM",
);

        /**
         * A frontend-independent IDE "smartness" server for Elixir.
Implements the "Language Server Protocol" standard and provides debugger support via the "Debug Adapter Protocol"

         */
export const elixir_ls = mkPackage(
  nixRaw`pkgs.elixir-ls`,
  "A frontend-independent IDE \"smartness\" server for Elixir.\nImplements the \"Language Server Protocol\" standard and provides debugger support via the \"Debug Adapter Protocol\"\n",
);

/**
 * A parser generator which emits GLR parsers, either in OCaml or C++
 */
export const elkhound = mkPackage(
  nixRaw`pkgs.elkhound`,
  "A parser generator which emits GLR parsers, either in OCaml or C++",
);

/**
 * Embedded Linux Library
 */
export const ell = mkPackage(
  nixRaw`pkgs.ell`,
  "Embedded Linux Library",
);

/**
 * Databases of elliptic curves
 */
export const elliptic_curves = mkPackage(
  nixRaw`pkgs.elliptic_curves`,
  "Databases of elliptic curves",
);

/**
 * Turn your Elm project into buildable Nix project
 */
export const elm2nix = mkPackage(
  nixRaw`pkgs.elm2nix`,
  "Turn your Elm project into buildable Nix project",
);

/**
 * Install Elm packages from git repositories
 */
export const elm_github_install = mkPackage(
  nixRaw`pkgs.elm-github-install`,
  "Install Elm packages from git repositories",
);

/**
 * A finite element software for multiphysical problems
 */
export const elmerfem = mkPackage(
  nixRaw`pkgs.elmerfem`,
  "A finite element software for multiphysical problems",
);

/**
 * The systemd project's "logind", extracted to a standalone package
 */
export const elogind = mkPackage(
  nixRaw`pkgs.elogind`,
  "The systemd project's \"logind\", extracted to a standalone package",
);

/**
 * Eigenvalue Solvers for Petaflop-Applications
 */
export const elpa = mkPackage(
  nixRaw`pkgs.elpa`,
  "Eigenvalue Solvers for Petaflop-Applications",
);

/**
 * Interactive shell for the TCL programming language based on editline
 */
export const eltclsh = mkPackage(
  nixRaw`pkgs.eltclsh`,
  "Interactive shell for the TCL programming language based on editline",
);

/**
 * A simple CLI to help you with setting up and managing your Eludris instance
 */
export const eludris = mkPackage(
  nixRaw`pkgs.eludris`,
  "A simple CLI to help you with setting up and managing your Eludris instance",
);

/**
 * A vi clone for Unix and other operating systems
 */
export const elvis = mkPackage(
  nixRaw`pkgs.elvis`,
  "A vi clone for Unix and other operating systems",
);

/**
 * Erlang Style Reviewer
 */
export const elvis_erlang = mkPackage(
  nixRaw`pkgs.elvis-erlang`,
  "Erlang Style Reviewer",
);

/**
 * A friendly and expressive command shell
 */
export const elvish = mkPackage(
  nixRaw`pkgs.elvish`,
  "A friendly and expressive command shell",
);

/**
 * Editor for Mortals
 */
export const em = mkPackage(
  nixRaw`pkgs.em`,
  "Editor for Mortals",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs = mkPackage(
  nixRaw`pkgs.emacs`,
  "The extensible, customizable GNU text editor",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs28 = mkPackage(
  nixRaw`pkgs.emacs28`,
  "The extensible, customizable GNU text editor",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs28_gtk2 = mkPackage(
  nixRaw`pkgs.emacs28-gtk2`,
  "The extensible, customizable GNU text editor",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs28_gtk3 = mkPackage(
  nixRaw`pkgs.emacs28-gtk3`,
  "The extensible, customizable GNU text editor",
);

/**
 * The extensible, customizable GNU text editor - macport variant
 */
export const emacs28_macport = mkPackage(
  nixRaw`pkgs.emacs28-macport`,
  "The extensible, customizable GNU text editor - macport variant",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs28_nox = mkPackage(
  nixRaw`pkgs.emacs28-nox`,
  "The extensible, customizable GNU text editor",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs29 = mkPackage(
  nixRaw`pkgs.emacs29`,
  "The extensible, customizable GNU text editor",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs29_gtk3 = mkPackage(
  nixRaw`pkgs.emacs29-gtk3`,
  "The extensible, customizable GNU text editor",
);

/**
 * The extensible, customizable GNU text editor - macport variant
 */
export const emacs29_macport = mkPackage(
  nixRaw`pkgs.emacs29-macport`,
  "The extensible, customizable GNU text editor - macport variant",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs29_nox = mkPackage(
  nixRaw`pkgs.emacs29-nox`,
  "The extensible, customizable GNU text editor",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs29_pgtk = mkPackage(
  nixRaw`pkgs.emacs29-pgtk`,
  "The extensible, customizable GNU text editor",
);

/**
 * Icon fonts for emacs all-the-icons
 */
export const emacs_all_the_icons_fonts = mkPackage(
  nixRaw`pkgs.emacs-all-the-icons-fonts`,
  "Icon fonts for emacs all-the-icons",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs_gtk = mkPackage(
  nixRaw`pkgs.emacs-gtk`,
  "The extensible, customizable GNU text editor",
);

/**
 * The extensible, customizable GNU text editor - macport variant
 */
export const emacs_macport = mkPackage(
  nixRaw`pkgs.emacs-macport`,
  "The extensible, customizable GNU text editor - macport variant",
);

/**
 * The extensible, customizable GNU text editor
 */
export const emacs_nox = mkPackage(
  nixRaw`pkgs.emacs-nox`,
  "The extensible, customizable GNU text editor",
);

/**
 * Command line SMTP client
 */
export const email = mkPackage(
  nixRaw`pkgs.email`,
  "Command line SMTP client",
);

/**
 * Emanate a structured view of your plain-text notes
 */
export const emanote = mkPackage(
  nixRaw`pkgs.emanote`,
  "Emanate a structured view of your plain-text notes",
);

/**
 * Generate project icons and avatars from a symbolic icon
 */
export const emblem = mkPackage(
  nixRaw`pkgs.emblem`,
  "Generate project icons and avatars from a symbolic icon",
);

/**
 * Interactive command line interface to Borg Backup
 */
export const emborg = mkPackage(
  nixRaw`pkgs.emborg`,
  "Interactive command line interface to Borg Backup",
);

/**
 * The European Molecular Biology Open Software Suite
 */
export const emboss = mkPackage(
  nixRaw`pkgs.emboss`,
  "The European Molecular Biology Open Software Suite",
);

/**
 * High performance ray tracing kernels from Intel
 */
export const embree = mkPackage(
  nixRaw`pkgs.embree`,
  "High performance ray tracing kernels from Intel",
);

/**
 * High performance ray tracing kernels from Intel
 */
export const embree2 = mkPackage(
  nixRaw`pkgs.embree2`,
  "High performance ray tracing kernels from Intel",
);

/**
 * A trivial Markdown to HTML converter
 */
export const emem = mkPackage(
  nixRaw`pkgs.emem`,
  "A trivial Markdown to HTML converter",
);

/**
 * Lua execution engine
 */
export const emilua = mkPackage(
  nixRaw`pkgs.emilua`,
  "Lua execution engine",
);

/**
 * A code coverage tool for Java
 */
export const emma = mkPackage(
  nixRaw`pkgs.emma`,
  "A code coverage tool for Java",
);

/**
 * Emmet support based on LSP
 */
export const emmet_ls = mkPackage(
  nixRaw`pkgs.emmet-ls`,
  "Emmet support based on LSP",
);

/**
 * A CLI Emoji Picker
 */
export const emoji_picker = mkPackage(
  nixRaw`pkgs.emoji-picker`,
  "A CLI Emoji Picker",
);

/**
 * Open source emoji set
 */
export const emojione = mkPackage(
  nixRaw`pkgs.emojione`,
  "Open source emoji set",
);

/**
 * Get a selection of emojis with dmenu or rofi
 */
export const emojipick = mkPackage(
  nixRaw`pkgs.emojipick`,
  "Get a selection of emojis with dmenu or rofi",
);

/**
 * Modern emoji picker for Linux
 */
export const emote = mkPackage(
  nixRaw`pkgs.emote`,
  "Modern emoji picker for Linux",
);

/**
 * Mirror installed software on multiple machines
 */
export const emplace = mkPackage(
  nixRaw`pkgs.emplace`,
  "Mirror installed software on multiple machines",
);

/**
 * Dead simple CLI Display Manager on TTY
 */
export const emptty = mkPackage(
  nixRaw`pkgs.emptty`,
  "Dead simple CLI Display Manager on TTY",
);

/**
 * A simple tool to automate interactive terminal applications
 */
export const empty = mkPackage(
  nixRaw`pkgs.empty`,
  "A simple tool to automate interactive terminal applications",
);

export const emptyDirectory = mkPackage(
  nixRaw`pkgs.emptyDirectory`,
  "",
);

export const emptyFile = mkPackage(
  nixRaw`pkgs.emptyFile`,
  "",
);

/**
 * An LLVM-to-JavaScript Compiler
 */
export const emscripten = mkPackage(
  nixRaw`pkgs.emscripten`,
  "An LLVM-to-JavaScript Compiler",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const emscriptenStdenv = mkPackage(
  nixRaw`pkgs.emscriptenStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * A simple text-mode x86 + DOS emulator
 */
export const emu2 = mkPackage(
  nixRaw`pkgs.emu2`,
  "A simple text-mode x86 + DOS emulator",
);

/**
 * The Emuflight flight control system configuration tool
 */
export const emuflight_configurator = mkPackage(
  nixRaw`pkgs.emuflight-configurator`,
  "The Emuflight flight control system configuration tool",
);

/**
 * A flexible emulator front-end supporting keyboardless navigation and custom system themes
 */
export const emulationstation = mkPackage(
  nixRaw`pkgs.emulationstation`,
  "A flexible emulator front-end supporting keyboardless navigation and custom system themes",
);

/**
 * A fast and minimalistic image viewer
 */
export const emulsion = mkPackage(
  nixRaw`pkgs.emulsion`,
  "A fast and minimalistic image viewer",
);

/**
 * Store your color palettes in an easy way
 */
export const emulsion_palette = mkPackage(
  nixRaw`pkgs.emulsion-palette`,
  "Store your color palettes in an easy way",
);

/**
 * Editor Move: Rename files with your favourite text editor
 */
export const emv = mkPackage(
  nixRaw`pkgs.emv`,
  "Editor Move: Rename files with your favourite text editor",
);

export const enableGCOVInstrumentation = mkPackage(
  nixRaw`pkgs.enableGCOVInstrumentation`,
  "",
);

/**
 * Blends away the seams in a panoramic image mosaic using a multiresolution spline
 */
export const enblend_enfuse = mkPackage(
  nixRaw`pkgs.enblend-enfuse`,
  "Blends away the seams in a panoramic image mosaic using a multiresolution spline",
);

/**
 * A modern and friendly alternative to GnuPG
 */
export const enc = mkPackage(
  nixRaw`pkgs.enc`,
  "A modern and friendly alternative to GnuPG",
);

/**
 * Detects the encoding of text files and reencodes them
 */
export const enca = mkPackage(
  nixRaw`pkgs.enca`,
  "Detects the encoding of text files and reencodes them",
);

/**
 * An encrypted filesystem in user-space via FUSE
 */
export const encfs = mkPackage(
  nixRaw`pkgs.encfs`,
  "An encrypted filesystem in user-space via FUSE",
);

/**
 * Generic spell checking library
 */
export const enchant = mkPackage(
  nixRaw`pkgs.enchant`,
  "Generic spell checking library",
);

/**
 * Generic spell checking library
 */
export const enchant2 = mkPackage(
  nixRaw`pkgs.enchant2`,
  "Generic spell checking library",
);

/**
 * Encrypted personal archives
 */
export const enchive = mkPackage(
  nixRaw`pkgs.enchive`,
  "Encrypted personal archives",
);

/**
 * A versatile sans serif font family
 */
export const encode_sans = mkPackage(
  nixRaw`pkgs.encode-sans`,
  "A versatile sans serif font family",
);

/**
 * An encryption tool
 */
export const encpipe = mkPackage(
  nixRaw`pkgs.encpipe`,
  "An encryption tool",
);

/**
 * Personal task manager for GNOME
 */
export const endeavour = mkPackage(
  nixRaw`pkgs.endeavour`,
  "Personal task manager for GNOME",
);

/**
 * A simulation game about strong AI
 */
export const endgame_singularity = mkPackage(
  nixRaw`pkgs.endgame-singularity`,
  "A simulation game about strong AI",
);

/**
 * A sandbox-style space exploration game similar to Elite, Escape Velocity, or Star Control
 */
export const endless_sky = mkPackage(
  nixRaw`pkgs.endless-sky`,
  "A sandbox-style space exploration game similar to Elite, Escape Velocity, or Star Control",
);

/**
 * SSH tarpit that slowly sends an endless banner
 */
export const endlessh = mkPackage(
  nixRaw`pkgs.endlessh`,
  "SSH tarpit that slowly sends an endless banner",
);

/**
 * An implementation of endlessh exporting Prometheus metrics
 */
export const endlessh_go = mkPackage(
  nixRaw`pkgs.endlessh-go`,
  "An implementation of endlessh exporting Prometheus metrics",
);

/**
 * Simple and robust network communication layer on top of UDP
 */
export const enet = mkPackage(
  nixRaw`pkgs.enet`,
  "Simple and robust network communication layer on top of UDP",
);

/**
 * A task runner with DAG-based parallelism
 */
export const engage = mkPackage(
  nixRaw`pkgs.engage`,
  "A task runner with DAG-based parallelism",
);

/**
 * Engauge Digitizer is a tool for recovering graph data from an image file
 */
export const engauge_digitizer = mkPackage(
  nixRaw`pkgs.engauge-digitizer`,
  "Engauge Digitizer is a tool for recovering graph data from an image file",
);

/**
 * Coordinate your volunteers in teams, assign them to work shifts or let them decide for themselves when and where they want to help with what
 */
export const engelsystem = mkPackage(
  nixRaw`pkgs.engelsystem`,
  "Coordinate your volunteers in teams, assign them to work shifts or let them decide for themselves when and where they want to help with what",
);

/**
 * BitTorrent client written in C++
 */
export const enhanced_ctorrent = mkPackage(
  nixRaw`pkgs.enhanced-ctorrent`,
  "BitTorrent client written in C++",
);

/**
 * Puzzle game inspired by Oxyd on the Atari ST and Rock'n'Roll on the Amiga
 */
export const enigma = mkPackage(
  nixRaw`pkgs.enigma`,
  "Puzzle game inspired by Oxyd on the Atari ST and Rock'n'Roll on the Amiga",
);

/**
 * Tool for translating Dalvik bytecode to equivalent Java bytecode
 */
export const enjarify = mkPackage(
  nixRaw`pkgs.enjarify`,
  "Tool for translating Dalvik bytecode to equivalent Java bytecode",
);

/**
 * Automatically test services/checker using the enochecker API
 */
export const enochecker_test = mkPackage(
  nixRaw`pkgs.enochecker-test`,
  "Automatically test services/checker using the enochecker API",
);

/**
 * A well known password manager
 */
export const enpass = mkPackage(
  nixRaw`pkgs.enpass`,
  "A well known password manager",
);

/**
 * Converter from ASCII to PostScript, HTML, or RTF
 */
export const enscript = mkPackage(
  nixRaw`pkgs.enscript`,
  "Converter from ASCII to PostScript, HTML, or RTF",
);

/**
 * Digital model of electronic string ensemble chorus
 */
export const ensemble_chorus = mkPackage(
  nixRaw`pkgs.ensemble-chorus`,
  "Digital model of electronic string ensemble chorus",
);

export const ensureNewerSourcesForZipFilesHook = mkPackage(
  nixRaw`pkgs.ensureNewerSourcesForZipFilesHook`,
  "",
);

/**
 * Pseudorandom Number Sequence Test Program
 */
export const ent = mkPackage(
  nixRaw`pkgs.ent`,
  "Pseudorandom Number Sequence Test Program",
);

/**
 * An entity framework for Go
 */
export const ent_go = mkPackage(
  nixRaw`pkgs.ent-go`,
  "An entity framework for Go",
);

/**
 * Tethered camera control and capture
 */
export const entangle = mkPackage(
  nixRaw`pkgs.entangle`,
  "Tethered camera control and capture",
);

/**
 * Run arbitrary commands when files change
 */
export const entr = mkPackage(
  nixRaw`pkgs.entr`,
  "Run arbitrary commands when files change",
);

/**
 * A header-only, tiny and easy to use library for game programming and much more written in modern C++
 */
export const entt = mkPackage(
  nixRaw`pkgs.entt`,
  "A header-only, tiny and easy to use library for game programming and much more written in modern C++",
);

/**
 * Point cloud organization for massive datasets
 */
export const entwine = mkPackage(
  nixRaw`pkgs.entwine`,
  "Point cloud organization for massive datasets",
);

/**
 * A tool for enumerating information from Windows and Samba systems
 */
export const enum4linux = mkPackage(
  nixRaw`pkgs.enum4linux`,
  "A tool for enumerating information from Windows and Samba systems",
);

/**
 * Windows/Samba enumeration tool
 */
export const enum4linux_ng = mkPackage(
  nixRaw`pkgs.enum4linux-ng`,
  "Windows/Samba enumeration tool",
);

/**
 * Go tool to auto generate methods for enums
 */
export const enumer = mkPackage(
  nixRaw`pkgs.enumer`,
  "Go tool to auto generate methods for enums",
);

/**
 * Tool to list all public repositories for (valid) GitHub usernames
 */
export const enumerepo = mkPackage(
  nixRaw`pkgs.enumerepo`,
  "Tool to list all public repositories for (valid) GitHub usernames",
);

/**
 * Set environment variables with macOS keychain or D-Bus secret service
 */
export const envchain = mkPackage(
  nixRaw`pkgs.envchain`,
  "Set environment variables with macOS keychain or D-Bus secret service",
);

/**
 * Read and set environmental variables for processes from Consul
 */
export const envconsul = mkPackage(
  nixRaw`pkgs.envconsul`,
  "Read and set environmental variables for processes from Consul",
);

/**
 * Fuse filesystem that returns symlinks to executables based on the PATH of the requesting process.
 */
export const envfs = mkPackage(
  nixRaw`pkgs.envfs`,
  "Fuse filesystem that returns symlinks to executables based on the PATH of the requesting process.",
);

/**
 * Cloud-native edge and service proxy
 */
export const envoy = mkPackage(
  nixRaw`pkgs.envoy`,
  "Cloud-native edge and service proxy",
);

/**
 * Environment variables substitution for Go
 */
export const envsubst = mkPackage(
  nixRaw`pkgs.envsubst`,
  "Environment variables substitution for Go",
);

/**
 * Readable bitmap font inspired by Envy Code R

 */
export const envypn_font = mkPackage(
  nixRaw`pkgs.envypn-font`,
  "Readable bitmap font inspired by Envy Code R\n",
);

/**
 * Frontend for Doom engines
 */
export const enyo_launcher = mkPackage(
  nixRaw`pkgs.enyo-launcher`,
  "Frontend for Doom engines",
);

/**
 * A new GNOME web browser
 */
export const eolie = mkPackage(
  nixRaw`pkgs.eolie`,
  "A new GNOME web browser",
);

/**
 * Installer UI which writes images to disk
 */
export const eos_installer = mkPackage(
  nixRaw`pkgs.eos-installer`,
  "Installer UI which writes images to disk",
);

/**
 * Create Embedded Open Type from OpenType or TrueType font
 */
export const eot_utilities = mkPackage(
  nixRaw`pkgs.eot_utilities`,
  "Create Embedded Open Type from OpenType or TrueType font",
);

/**
 * A lightweight PDF document viewer using Poppler and GTK
 */
export const epdfview = mkPackage(
  nixRaw`pkgs.epdfview`,
  "A lightweight PDF document viewer using Poppler and GTK",
);

/**
 * Insanely fast JPEG/ JPG thumbnail scaling
 */
export const epeg = mkPackage(
  nixRaw`pkgs.epeg`,
  "Insanely fast JPEG/ JPG thumbnail scaling",
);

/**
 * DVR software compatible with Mirakurun.
 */
export const epgstation = mkPackage(
  nixRaw`pkgs.epgstation`,
  "DVR software compatible with Mirakurun.",
);

/**
 * The always-incognito web browser
 */
export const ephemeral = mkPackage(
  nixRaw`pkgs.ephemeral`,
  "The always-incognito web browser",
);

/**
 * Run tests on an isolated, temporary PostgreSQL database
 */
export const ephemeralpg = mkPackage(
  nixRaw`pkgs.ephemeralpg`,
  "Run tests on an isolated, temporary PostgreSQL database",
);

/**
 * A IRC client that offers a great ircII interface
 */
export const epic5 = mkPackage(
  nixRaw`pkgs.epic5`,
  "A IRC client that offers a great ircII interface",
);

/**
 * Simple color picker that lets the user create harmonic palettes with ease
 */
export const epick = mkPackage(
  nixRaw`pkgs.epick`,
  "Simple color picker that lets the user create harmonic palettes with ease",
);

/**
 * A clean, simple, and fast process viewer
 */
export const epilys_bb = mkPackage(
  nixRaw`pkgs.epilys-bb`,
  "A clean, simple, and fast process viewer",
);

/**
 * WebKit based web browser for GNOME
 */
export const epiphany = mkPackage(
  nixRaw`pkgs.epiphany`,
  "WebKit based web browser for GNOME",
);

/**
 * sane-epkowa backend for some epson scanners
 */
export const epkowa = mkPackage(
  nixRaw`pkgs.epkowa`,
  "sane-epkowa backend for some epson scanners",
);

/**
 * Create plots quickly with gnuplot
 */
export const eplot = mkPackage(
  nixRaw`pkgs.eplot`,
  "Create plots quickly with gnuplot",
);

/**
 * The ESP Package Manager generates distribution archives for a variety of platforms
 */
export const epm = mkPackage(
  nixRaw`pkgs.epm`,
  "The ESP Package Manager generates distribution archives for a variety of platforms",
);

/**
 * Small epoll implementation using kqueue
 */
export const epoll_shim = mkPackage(
  nixRaw`pkgs.epoll-shim`,
  "Small epoll implementation using kqueue",
);

/**
 * CLI Epub Reader
 */
export const epr = mkPackage(
  nixRaw`pkgs.epr`,
  "CLI Epub Reader",
);

/**
 * Automated theorem prover for full first-order logic with equality
 */
export const eprover = mkPackage(
  nixRaw`pkgs.eprover`,
  "Automated theorem prover for full first-order logic with equality",
);

/**
 * Automated theorem prover for full first-order logic with equality
 */
export const eprover_ho = mkPackage(
  nixRaw`pkgs.eprover-ho`,
  "Automated theorem prover for full first-order logic with equality",
);

/**
 * Epson printer driver (BX535WD, BX630FW, BX635FWD, ME940FW, NX530, NX635, NX635, SX535WD, WorkForce 545, WorkForce 645
 */
export const epson_201106w = mkPackage(
  nixRaw`pkgs.epson-201106w`,
  "Epson printer driver (BX535WD, BX630FW, BX635FWD, ME940FW, NX530, NX635, NX635, SX535WD, WorkForce 545, WorkForce 645",
);

/**
 * Epson printer driver (L110, L210, L300, L350, L355, L550, L555)
 */
export const epson_201207w = mkPackage(
  nixRaw`pkgs.epson_201207w`,
  "Epson printer driver (L110, L210, L300, L350, L355, L550, L555)",
);

/**
 * Epson printer driver (L456, L455, L366, L365, L362, L360, L312, L310, L222, L220, L132, L130)
 */
export const epson_201401w = mkPackage(
  nixRaw`pkgs.epson-201401w`,
  "Epson printer driver (L456, L455, L366, L365, L362, L360, L312, L310, L222, L220, L132, L130)",
);

/**
 * Epson AcuLaser C1100 Driver
 */
export const epson_alc1100 = mkPackage(
  nixRaw`pkgs.epson-alc1100`,
  "Epson AcuLaser C1100 Driver",
);

/**
 * ESC/P-R Driver (generic driver)
 */
export const epson_escpr = mkPackage(
  nixRaw`pkgs.epson-escpr`,
  "ESC/P-R Driver (generic driver)",
);

/**
 * ESC/P-R 2 Driver (generic driver)
 */
export const epson_escpr2 = mkPackage(
  nixRaw`pkgs.epson-escpr2`,
  "ESC/P-R 2 Driver (generic driver)",
);

/**
 * Proprietary CUPS drivers for Epson inkjet printers
 */
export const epson_workforce_635_nx625_series = mkPackage(
  nixRaw`pkgs.epson-workforce-635-nx625-series`,
  "Proprietary CUPS drivers for Epson inkjet printers",
);

/**
 * Epson Scan 2 scanner driver for many modern Epson scanners and multifunction printers
 */
export const epsonscan2 = mkPackage(
  nixRaw`pkgs.epsonscan2`,
  "Epson Scan 2 scanner driver for many modern Epson scanners and multifunction printers",
);

/**
 * A utility to create or extract preview images in EPS files, fix bounding boxes and convert to bitmaps
 */
export const epstool = mkPackage(
  nixRaw`pkgs.epstool`,
  "A utility to create or extract preview images in EPS files, fix bounding boxes and convert to bitmaps",
);

/**
 * A simple command-line utility for Linux, for extracting text from EPUB documents.
 */
export const epub2txt2 = mkPackage(
  nixRaw`pkgs.epub2txt2`,
  "A simple command-line utility for Linux, for extracting text from EPUB documents.",
);

/**
 * Validation tool for EPUB
 */
export const epubcheck = mkPackage(
  nixRaw`pkgs.epubcheck`,
  "Validation tool for EPUB",
);

/**
 * LV2 EQ plugins and more, with 64 bit processing
 */
export const eq10q = mkPackage(
  nixRaw`pkgs.eq10q`,
  "LV2 EQ plugins and more, with 64 bit processing",
);

/**
 * A Material Design theme for GNOME/GTK based desktop environments
 */
export const equilux_theme = mkPackage(
  nixRaw`pkgs.equilux-theme`,
  "A Material Design theme for GNOME/GTK based desktop environments",
);

/**
 * Enhancement patches for Elden Ring adding ultrawide support, custom frame rate limits and more
 */
export const er_patcher = mkPackage(
  nixRaw`pkgs.er-patcher`,
  "Enhancement patches for Elden Ring adding ultrawide support, custom frame rate limits and more",
);

/**
 * File-tree visualizer and disk usage analyzer
 */
export const erdtree = mkPackage(
  nixRaw`pkgs.erdtree`,
  "File-tree visualizer and disk usage analyzer",
);

/**
 * The ERESI Reverse Engineering Software Interface
 */
export const eresi = mkPackage(
  nixRaw`pkgs.eresi`,
  "The ERESI Reverse Engineering Software Interface",
);

/**
 * A statically typed language that can deeply improve the Python ecosystem
 */
export const erg = mkPackage(
  nixRaw`pkgs.erg`,
  "A statically typed language that can deeply improve the Python ecosystem",
);

/**
 * Open protocol that implements modern scientific ideas in the blockchain area
 */
export const ergo = mkPackage(
  nixRaw`pkgs.ergo`,
  "Open protocol that implements modern scientific ideas in the blockchain area",
);

/**
 * A modern IRC server (daemon/ircd) written in Go
 */
export const ergochat = mkPackage(
  nixRaw`pkgs.ergochat`,
  "A modern IRC server (daemon/ircd) written in Go",
);

/**
 * Quantum chemistry program for large-scale self-consistent field calculations
 */
export const ergoscf = mkPackage(
  nixRaw`pkgs.ergoscf`,
  "Quantum chemistry program for large-scale self-consistent field calculations",
);

/**
 * Map compile tools for Quake and Hexen 2
 */
export const ericw_tools = mkPackage(
  nixRaw`pkgs.ericw-tools`,
  "Map compile tools for Quake and Hexen 2",
);

/**
 * Ethereum node implementation focused on scalability and modularity
 */
export const erigon = mkPackage(
  nixRaw`pkgs.erigon`,
  "Ethereum node implementation focused on scalability and modularity",
);

/**
 * Implementation of ERIS for Go
 */
export const eris_go = mkPackage(
  nixRaw`pkgs.eris-go`,
  "Implementation of ERIS for Go",
);

/**
 * Programming language used for massively scalable soft real-time systems
 */
export const erlang = mkPackage(
  nixRaw`pkgs.erlang`,
  "Programming language used for massively scalable soft real-time systems",
);

/**
 * Programming language used for massively scalable soft real-time systems
 */
export const erlang_24 = mkPackage(
  nixRaw`pkgs.erlang_24`,
  "Programming language used for massively scalable soft real-time systems",
);

/**
 * Programming language used for massively scalable soft real-time systems
 */
export const erlang_25 = mkPackage(
  nixRaw`pkgs.erlang_25`,
  "Programming language used for massively scalable soft real-time systems",
);

/**
 * Programming language used for massively scalable soft real-time systems
 */
export const erlang_26 = mkPackage(
  nixRaw`pkgs.erlang_26`,
  "Programming language used for massively scalable soft real-time systems",
);

/**
 * Programming language used for massively scalable soft real-time systems
 */
export const erlang_javac = mkPackage(
  nixRaw`pkgs.erlang_javac`,
  "Programming language used for massively scalable soft real-time systems",
);

/**
 * The Erlang Language Server
 */
export const erlang_ls = mkPackage(
  nixRaw`pkgs.erlang-ls`,
  "The Erlang Language Server",
);

/**
 * Programming language used for massively scalable soft real-time systems
 */
export const erlang_nox = mkPackage(
  nixRaw`pkgs.erlang_nox`,
  "Programming language used for massively scalable soft real-time systems",
);

/**
 * Programming language used for massively scalable soft real-time systems
 */
export const erlang_odbc = mkPackage(
  nixRaw`pkgs.erlang_odbc`,
  "Programming language used for massively scalable soft real-time systems",
);

/**
 * Programming language used for massively scalable soft real-time systems
 */
export const erlang_odbc_javac = mkPackage(
  nixRaw`pkgs.erlang_odbc_javac`,
  "Programming language used for massively scalable soft real-time systems",
);

/**
 * An automated code formatter for Erlang
 */
export const erlfmt = mkPackage(
  nixRaw`pkgs.erlfmt`,
  "An automated code formatter for Erlang",
);

/**
 * Userspace utilities for linux-erofs file system
 */
export const erofs_utils = mkPackage(
  nixRaw`pkgs.erofs-utils`,
  "Userspace utilities for linux-erofs file system",
);

/**
 * SMB network scanner
 */
export const erosmb = mkPackage(
  nixRaw`pkgs.erosmb`,
  "SMB network scanner",
);

/**
 * Chatbot designed to be simple to extend with plugins written in Python
 */
export const errbot = mkPackage(
  nixRaw`pkgs.errbot`,
  "Chatbot designed to be simple to extend with plugins written in Python",
);

/**
 * Checks for unchecked errors in go programs
 */
export const errcheck = mkPackage(
  nixRaw`pkgs.errcheck`,
  "Checks for unchecked errors in go programs",
);

/**
 * An extensible shell with higher order functions
 */
export const es = mkPackage(
  nixRaw`pkgs.es`,
  "An extensible shell with higher order functions",
);

/**
 * An extremely fast JavaScript bundler
 */
export const esbuild = mkPackage(
  nixRaw`pkgs.esbuild`,
  "An extremely fast JavaScript bundler",
);

/**
 * Config files for esbuild
 */
export const esbuild_config = mkPackage(
  nixRaw`pkgs.esbuild-config`,
  "Config files for esbuild",
);

/**
 * A fork of esbuild maintained by netlify
 */
export const esbuild_netlify = mkPackage(
  nixRaw`pkgs.esbuild_netlify`,
  "A fork of esbuild maintained by netlify",
);

/**
 * Tor hidden service name generator
 */
export const eschalot = mkPackage(
  nixRaw`pkgs.eschalot`,
  "Tor hidden service name generator",
);

/**
 * Linux screen capture using pygtk, inspired by scrot
 */
export const escrotum = mkPackage(
  nixRaw`pkgs.escrotum`,
  "Linux screen capture using pygtk, inspired by scrot",
);

/**
 * Entropy Source and DRNG Manager in user space
 */
export const esdm = mkPackage(
  nixRaw`pkgs.esdm`,
  "Entropy Source and DRNG Manager in user space",
);

/**
 * Simple templating engine based on shell
 */
export const esh = mkPackage(
  nixRaw`pkgs.esh`,
  "Simple templating engine based on shell",
);

/**
 * Makes eslint the fastest linter on the planet
 */
export const eslint_d = mkPackage(
  nixRaw`pkgs.eslint_d`,
  "Makes eslint the fastest linter on the planet",
);

/**
 * Cross-platform Text Expander written in Rust
 */
export const espanso = mkPackage(
  nixRaw`pkgs.espanso`,
  "Cross-platform Text Expander written in Rust",
);

/**
 * Cross-platform Text Expander written in Rust
 */
export const espanso_wayland = mkPackage(
  nixRaw`pkgs.espanso-wayland`,
  "Cross-platform Text Expander written in Rust",
);

/**
 * Open source speech synthesizer that supports over 70 languages, based on eSpeak
 */
export const espeak = mkPackage(
  nixRaw`pkgs.espeak`,
  "Open source speech synthesizer that supports over 70 languages, based on eSpeak",
);

/**
 * Compact open source software speech synthesizer
 */
export const espeak_classic = mkPackage(
  nixRaw`pkgs.espeak-classic`,
  "Compact open source software speech synthesizer",
);

/**
 * Open source speech synthesizer that supports over 70 languages, based on eSpeak
 */
export const espeak_ng = mkPackage(
  nixRaw`pkgs.espeak-ng`,
  "Open source speech synthesizer that supports over 70 languages, based on eSpeak",
);

/**
 * Phoneme editor for espeak
 */
export const espeakedit = mkPackage(
  nixRaw`pkgs.espeakedit`,
  "Phoneme editor for espeak",
);

/**
 * Lightweight connector for espeak-ng and speakup
 */
export const espeakup = mkPackage(
  nixRaw`pkgs.espeakup`,
  "Lightweight connector for espeak-ng and speakup",
);

/**
 * Make creating custom firmwares for ESP32/ESP8266 super easy
 */
export const esphome = mkPackage(
  nixRaw`pkgs.esphome`,
  "Make creating custom firmwares for ESP32/ESP8266 super easy",
);

/**
 * ESP8266 and ESP32 serial bootloader utility
 */
export const esptool = mkPackage(
  nixRaw`pkgs.esptool`,
  "ESP8266 and ESP32 serial bootloader utility",
);

/**
 * ESP8266 and ESP32 serial bootloader utility
 */
export const esptool_3 = mkPackage(
  nixRaw`pkgs.esptool_3`,
  "ESP8266 and ESP32 serial bootloader utility",
);

/**
 * ESP8266/ESP32 build helper tool
 */
export const esptool_ck = mkPackage(
  nixRaw`pkgs.esptool-ck`,
  "ESP8266/ESP32 build helper tool",
);

/**
 * Tool for installing and maintaining Espressif Rust ecosystem.
 */
export const espup = mkPackage(
  nixRaw`pkgs.espup`,
  "Tool for installing and maintaining Espressif Rust ecosystem.",
);

/**
 * AcousticBrainz audio feature extractor
 */
export const essentia_extractor = mkPackage(
  nixRaw`pkgs.essentia-extractor`,
  "AcousticBrainz audio feature extractor",
);

/**
 * Offline ShaderToy-compatible GLSL shader viewer using OpenGL ES 2.0
 */
export const esshader = mkPackage(
  nixRaw`pkgs.esshader`,
  "Offline ShaderToy-compatible GLSL shader viewer using OpenGL ES 2.0",
);

/**
 * Estimate the unfolded site frequency spectrum and ancestral states
 */
export const est_sfs = mkPackage(
  nixRaw`pkgs.est-sfs`,
  "Estimate the unfolded site frequency spectrum and ancestral states",
);

/**
 * Minimal libnotify-based (egg) timer
 */
export const et = mkPackage(
  nixRaw`pkgs.et`,
  "Minimal libnotify-based (egg) timer",
);

/**
 * The typeface used in Edward Tufte’s books.
 */
export const etBook = mkPackage(
  nixRaw`pkgs.etBook`,
  "The typeface used in Edward Tufte’s books.",
);

/**
 * Distributed reliable key-value store for the most critical data of a distributed system
 */
export const etcd = mkPackage(
  nixRaw`pkgs.etcd`,
  "Distributed reliable key-value store for the most critical data of a distributed system",
);

/**
 * Distributed reliable key-value store for the most critical data of a distributed system
 */
export const etcd_3_4 = mkPackage(
  nixRaw`pkgs.etcd_3_4`,
  "Distributed reliable key-value store for the most critical data of a distributed system",
);

/**
 * Distributed reliable key-value store for the most critical data of a distributed system
 */
export const etcd_3_5 = mkPackage(
  nixRaw`pkgs.etcd_3_5`,
  "Distributed reliable key-value store for the most critical data of a distributed system",
);

/**
 * Flash OS images to SD cards and USB drives, safely and easily
 */
export const etcher = mkPackage(
  nixRaw`pkgs.etcher`,
  "Flash OS images to SD cards and USB drives, safely and easily",
);

/**
 * An Etebase (EteSync 2.0) server so you can run your own
 */
export const etebase_server = mkPackage(
  nixRaw`pkgs.etebase-server`,
  "An Etebase (EteSync 2.0) server so you can run your own",
);

/**
 * Remote shell that automatically reconnects without interrupting the session
 */
export const eternal_terminal = mkPackage(
  nixRaw`pkgs.eternal-terminal`,
  "Remote shell that automatically reconnects without interrupting the session",
);

/**
 * New school Doom port by James Haley
 */
export const eternity = mkPackage(
  nixRaw`pkgs.eternity`,
  "New school Doom port by James Haley",
);

/**
 * Secure, end-to-end encrypted, and privacy respecting sync for contacts, calendars and tasks
 */
export const etesync_dav = mkPackage(
  nixRaw`pkgs.etesync-dav`,
  "Secure, end-to-end encrypted, and privacy respecting sync for contacts, calendars and tasks",
);

/**
 * Ethereum function call encoding (ABI) utility
 */
export const ethabi = mkPackage(
  nixRaw`pkgs.ethabi`,
  "Ethereum function call encoding (ABI) utility",
);

/**
 * PoW algorithm for Ethereum 1.0 based on Dagger-Hashimoto
 */
export const ethash = mkPackage(
  nixRaw`pkgs.ethash`,
  "PoW algorithm for Ethereum 1.0 based on Dagger-Hashimoto",
);

export const etherape = mkPackage(
  nixRaw`pkgs.etherape`,
  "",
);

/**
 * Online collaborative spreadsheet
 */
export const ethercalc = mkPackage(
  nixRaw`pkgs.ethercalc`,
  "Online collaborative spreadsheet",
);

/**
 * Ethernet NIC Queue stats viewer
 */
export const ethq = mkPackage(
  nixRaw`pkgs.ethq`,
  "Ethernet NIC Queue stats viewer",
);

/**
 * Utility for controlling network drivers and hardware
 */
export const ethtool = mkPackage(
  nixRaw`pkgs.ethtool`,
  "Utility for controlling network drivers and hardware",
);

/**
 * ET: Legacy is an open source project based on the code of Wolfenstein: Enemy Territory which was released in 2010 under the terms of the GPLv3 license
 */
export const etlegacy = mkPackage(
  nixRaw`pkgs.etlegacy`,
  "ET: Legacy is an open source project based on the code of Wolfenstein: Enemy Territory which was released in 2010 under the terms of the GPLv3 license",
);

/**
 * Command output timestamper
 */
export const ets = mkPackage(
  nixRaw`pkgs.ets`,
  "Command output timestamper",
);

/**
 * Comprehensive suite for man in the middle attacks
 */
export const ettercap = mkPackage(
  nixRaw`pkgs.ettercap`,
  "Comprehensive suite for man in the middle attacks",
);

/**
 * A fork of udev with the aim of isolating it from init
 */
export const eudev = mkPackage(
  nixRaw`pkgs.eudev`,
  "A fork of udev with the aim of isolating it from init",
);

/**
 * Geometry Drawing Language
 */
export const eukleides = mkPackage(
  nixRaw`pkgs.eukleides`,
  "Geometry Drawing Language",
);

/**
 * A futuristic decorative font
 */
export const eunomia = mkPackage(
  nixRaw`pkgs.eunomia`,
  "A futuristic decorative font",
);

/**
 * A map editor for the classic DOOM games, and a few related games such as Heretic and Hexen
 */
export const eureka_editor = mkPackage(
  nixRaw`pkgs.eureka-editor`,
  "A map editor for the classic DOOM games, and a few related games such as Heretic and Hexen",
);

/**
 * CLI tool to input and store your ideas without leaving the terminal
 */
export const eureka_ideas = mkPackage(
  nixRaw`pkgs.eureka-ideas`,
  "CLI tool to input and store your ideas without leaving the terminal",
);

/**
 * A calculator REPL, similar to bc
 */
export const eva = mkPackage(
  nixRaw`pkgs.eva`,
  "A calculator REPL, similar to bc",
);

/**
 * More expressive universal gRPC client
 */
export const evans = mkPackage(
  nixRaw`pkgs.evans`,
  "More expressive universal gRPC client",
);

/**
 * EV Charge Controller
 */
export const evcc = mkPackage(
  nixRaw`pkgs.evcc`,
  "EV Charge Controller",
);

/**
 * An evaluation context for Rust
 */
export const evcxr = mkPackage(
  nixRaw`pkgs.evcxr`,
  "An evaluation context for Rust",
);

/**
 * Input event device header files for FreeBSD
 */
export const evdev_proto = mkPackage(
  nixRaw`pkgs.evdev-proto`,
  "Input event device header files for FreeBSD",
);

/**
 * Daemon to remap events on linux input devices
 */
export const evdevremapkeys = mkPackage(
  nixRaw`pkgs.evdevremapkeys`,
  "Daemon to remap events on linux input devices",
);

/**
 * Records and replays device descriptions and events to emulate input devices through the kernel's input system
 */
export const evemu = mkPackage(
  nixRaw`pkgs.evemu`,
  "Records and replays device descriptions and events to emulate input devices through the kernel's input system",
);

/**
 * Syslog event logger library
 */
export const eventlog = mkPackage(
  nixRaw`pkgs.eventlog`,
  "Syslog event logger library",
);

/**
 * Simple monitoring of system events
 */
export const eventstat = mkPackage(
  nixRaw`pkgs.eventstat`,
  "Simple monitoring of system events",
);

/**
 * Event sourcing database with processing logic in JavaScript
 */
export const eventstore = mkPackage(
  nixRaw`pkgs.eventstore`,
  "Event sourcing database with processing logic in JavaScript",
);

/**
 * Action-focused single-player space shooter with roguelike elements
 */
export const everspace = mkPackage(
  nixRaw`pkgs.everspace`,
  "Action-focused single-player space shooter with roguelike elements",
);

/**
 * Show mouse refresh rate under linux + evdev
 */
export const evhz = mkPackage(
  nixRaw`pkgs.evhz`,
  "Show mouse refresh rate under linux + evdev",
);

/**
 * WinRM shell for hacking/pentesting
 */
export const evil_winrm = mkPackage(
  nixRaw`pkgs.evil-winrm`,
  "WinRM shell for hacking/pentesting",
);

/**
 * Tool that monitors, analyzes and limits the bandwidth
 */
export const evillimiter = mkPackage(
  nixRaw`pkgs.evillimiter`,
  "Tool that monitors, analyzes and limits the bandwidth",
);

/**
 * Pixel-oriented paint program, modelled on Deluxe Paint
 */
export const evilpixie = mkPackage(
  nixRaw`pkgs.evilpixie`,
  "Pixel-oriented paint program, modelled on Deluxe Paint",
);

/**
 * Minimalist window manager for the X Window System
 */
export const evilwm = mkPackage(
  nixRaw`pkgs.evilwm`,
  "Minimalist window manager for the X Window System",
);

/**
 * GNOME's document viewer
 */
export const evince = mkPackage(
  nixRaw`pkgs.evince`,
  "GNOME's document viewer",
);

/**
 * Ethereum EVM disassembler
 */
export const evmdis = mkPackage(
  nixRaw`pkgs.evmdis`,
  "Ethereum EVM disassembler",
);

/**
 * Personal information management application that provides integrated mail, calendaring and address book functionality
 */
export const evolution = mkPackage(
  nixRaw`pkgs.evolution`,
  "Personal information management application that provides integrated mail, calendaring and address book functionality",
);

export const evolutionWithPlugins = mkPackage(
  nixRaw`pkgs.evolutionWithPlugins`,
  "",
);

/**
 * Unified backend for programs that work with contacts, tasks, and calendar information
 */
export const evolution_data_server = mkPackage(
  nixRaw`pkgs.evolution-data-server`,
  "Unified backend for programs that work with contacts, tasks, and calendar information",
);

/**
 * Unified backend for programs that work with contacts, tasks, and calendar information
 */
export const evolution_data_server_gtk4 = mkPackage(
  nixRaw`pkgs.evolution-data-server-gtk4`,
  "Unified backend for programs that work with contacts, tasks, and calendar information",
);

/**
 * Evolution connector for Microsoft Exchange Server protocols
 */
export const evolution_ews = mkPackage(
  nixRaw`pkgs.evolution-ews`,
  "Evolution connector for Microsoft Exchange Server protocols",
);

/**
 * A tiny sandboxed Dyon scripting environment for evdev input devices
 */
export const evscript = mkPackage(
  nixRaw`pkgs.evscript`,
  "A tiny sandboxed Dyon scripting environment for evdev input devices",
);

/**
 * A utility for mapping events from Linux event devices
 */
export const evsieve = mkPackage(
  nixRaw`pkgs.evsieve`,
  "A utility for mapping events from Linux event devices",
);

/**
 * Simple tool for input event debugging
 */
export const evtest = mkPackage(
  nixRaw`pkgs.evtest`,
  "Simple tool for input event debugging",
);

/**
 * Simple input device tester for linux with Qt GUI
 */
export const evtest_qt = mkPackage(
  nixRaw`pkgs.evtest-qt`,
  "Simple input device tester for linux with Qt GUI",
);

/**
 * Parser for the Windows XML Event Log (EVTX) format
 */
export const evtx = mkPackage(
  nixRaw`pkgs.evtx`,
  "Parser for the Windows XML Event Log (EVTX) format",
);

/**
 * An Asciidoc-based literate programming tool, written in Python
 */
export const eweb = mkPackage(
  nixRaw`pkgs.eweb`,
  "An Asciidoc-based literate programming tool, written in Python",
);

/**
 * ElKowars wacky widgets
 */
export const eww = mkPackage(
  nixRaw`pkgs.eww`,
  "ElKowars wacky widgets",
);

/**
 * ElKowars wacky widgets
 */
export const eww_wayland = mkPackage(
  nixRaw`pkgs.eww-wayland`,
  "ElKowars wacky widgets",
);

/**
 * The BGP swiss army knife of networking
 */
export const exabgp = mkPackage(
  nixRaw`pkgs.exabgp`,
  "The BGP swiss army knife of networking",
);

/**
 * A precise CD audio grabber for creating perfect quality rips using CD and DVD drives
 */
export const exactaudiocopy = mkPackage(
  nixRaw`pkgs.exactaudiocopy`,
  "A precise CD audio grabber for creating perfect quality rips using CD and DVD drives",
);

/**
 * A music player with a simple interface and powerful music management capabilities
 */
export const exaile = mkPackage(
  nixRaw`pkgs.exaile`,
  "A music player with a simple interface and powerful music management capabilities",
);

/**
 * Set of robot URDFs for benchmarking and developed examples.
 */
export const example_robot_data = mkPackage(
  nixRaw`pkgs.example-robot-data`,
  "Set of robot URDFs for benchmarking and developed examples.",
);

/**
 * A small scripting language, to be used in place of a shell in non-interactive scripts
 */
export const execline = mkPackage(
  nixRaw`pkgs.execline`,
  "A small scripting language, to be used in place of a shell in non-interactive scripts",
);

/**
 * Port of the documentation for the execline suite to mdoc
 */
export const execline_man_pages = mkPackage(
  nixRaw`pkgs.execline-man-pages`,
  "Port of the documentation for the execline suite to mdoc",
);

/**
 * Programmer friendly subprocess wrapper
 */
export const executor = mkPackage(
  nixRaw`pkgs.executor`,
  "Programmer friendly subprocess wrapper",
);

/**
 * An implementation of XMP (Adobe's Extensible Metadata Platform)
 */
export const exempi = mkPackage(
  nixRaw`pkgs.exempi`,
  "An implementation of XMP (Adobe's Extensible Metadata Platform)",
);

/**
 * A Go based command line tool for exercism.io
 */
export const exercism = mkPackage(
  nixRaw`pkgs.exercism`,
  "A Go based command line tool for exercism.io",
);

/**
 * Free exFAT file system implementation
 */
export const exfat = mkPackage(
  nixRaw`pkgs.exfat`,
  "Free exFAT file system implementation",
);

/**
 * exFAT filesystem userspace utilities
 */
export const exfatprogs = mkPackage(
  nixRaw`pkgs.exfatprogs`,
  "exFAT filesystem userspace utilities",
);

/**
 * Check exhaustiveness of switch statements of enum-like constants in Go code
 */
export const exhaustive = mkPackage(
  nixRaw`pkgs.exhaustive`,
  "Check exhaustiveness of switch statements of enum-like constants in Go code",
);

/**
 * A utility to read and manipulate EXIF data in digital photographs
 */
export const exif = mkPackage(
  nixRaw`pkgs.exif`,
  "A utility to read and manipulate EXIF data in digital photographs",
);

/**
 * Tool for reading EXIF data from image files produced by digital cameras
 */
export const exifprobe = mkPackage(
  nixRaw`pkgs.exifprobe`,
  "Tool for reading EXIF data from image files produced by digital cameras",
);

/**
 * Displays EXIF data from JPEG files
 */
export const exiftags = mkPackage(
  nixRaw`pkgs.exiftags`,
  "Displays EXIF data from JPEG files",
);

/**
 * A tool to read, write and edit EXIF meta information
 */
export const exiftool = mkPackage(
  nixRaw`pkgs.exiftool`,
  "A tool to read, write and edit EXIF meta information",
);

/**
 * A mail transfer agent (MTA)
 */
export const exim = mkPackage(
  nixRaw`pkgs.exim`,
  "A mail transfer agent (MTA)",
);

/**
 * A library and command-line utility to manage image metadata
 */
export const exiv2 = mkPackage(
  nixRaw`pkgs.exiv2`,
  "A library and command-line utility to manage image metadata",
);

/**
 * Top-rated cryptocurrency wallet with Trezor integration and built-in Exchange
 */
export const exodus = mkPackage(
  nixRaw`pkgs.exodus`,
  "Top-rated cryptocurrency wallet with Trezor integration and built-in Exchange",
);

/**
 * Generic tool for sequence alignment
 */
export const exonerate = mkPackage(
  nixRaw`pkgs.exonerate`,
  "Generic tool for sequence alignment",
);

/**
 * Command-line tool for everything at Exoscale: compute, storage, dns
 */
export const exoscale_cli = mkPackage(
  nixRaw`pkgs.exoscale-cli`,
  "Command-line tool for everything at Exoscale: compute, storage, dns",
);

/**
 * A stream-oriented XML parser library written in C
 */
export const expat = mkPackage(
  nixRaw`pkgs.expat`,
  "A stream-oriented XML parser library written in C",
);

/**
 * A tool for automating interactive applications
 */
export const expect = mkPackage(
  nixRaw`pkgs.expect`,
  "A tool for automating interactive applications",
);

/**
 * Expected objects in C++11 and later in a single-file header-only library

 */
export const expected_lite = mkPackage(
  nixRaw`pkgs.expected-lite`,
  "Expected objects in C++11 and later in a single-file header-only library\n",
);

/**
 * An interactive command line expense logger
 */
export const expenses = mkPackage(
  nixRaw`pkgs.expenses`,
  "An interactive command line expense logger",
);

/**
 * Library and utility to explain system call errors
 */
export const explain = mkPackage(
  nixRaw`pkgs.explain`,
  "Library and utility to explain system call errors",
);

/**
 * IoT security testing and exploitation framework
 */
export const expliot = mkPackage(
  nixRaw`pkgs.expliot`,
  "IoT security testing and exploitation framework",
);

/**
 * Archive of public exploits and corresponding vulnerable software
 */
export const exploitdb = mkPackage(
  nixRaw`pkgs.exploitdb`,
  "Archive of public exploits and corresponding vulnerable software",
);

/**
 * AIO Prometheus Exporter for Sonarr, Radarr or Lidarr
 */
export const exportarr = mkPackage(
  nixRaw`pkgs.exportarr`,
  "AIO Prometheus Exporter for Sonarr, Radarr or Lidarr",
);

/**
 * Expression language and expression evaluation for Go
 */
export const expr = mkPackage(
  nixRaw`pkgs.expr`,
  "Expression language and expression evaluation for Go",
);

/**
 * CLI client for ExpressVPN
 */
export const expressvpn = mkPackage(
  nixRaw`pkgs.expressvpn`,
  "CLI client for ExpressVPN",
);

/**
 * The C++ Mathematical Expression Toolkit Library
 */
export const exprtk = mkPackage(
  nixRaw`pkgs.exprtk`,
  "The C++ Mathematical Expression Toolkit Library",
);

/**
 * Collection of utilities for manipulating OpenEXR images
 */
export const exrtools = mkPackage(
  nixRaw`pkgs.exrtools`,
  "Collection of utilities for manipulating OpenEXR images",
);

/**
 * Recover / undelete files from ext3 or ext4 partitions
 */
export const ext4magic = mkPackage(
  nixRaw`pkgs.ext4magic`,
  "Recover / undelete files from ext3 or ext4 partitions",
);

/**
 * The extism CLI is used to manage Extism installations
 */
export const extism_cli = mkPackage(
  nixRaw`pkgs.extism-cli`,
  "The extism CLI is used to manage Extism installations",
);

export const extra_cmake_modules = mkPackage(
  nixRaw`pkgs.extra-cmake-modules`,
  "",
);

/**
 * Run declarative containers without full system rebuilds
 */
export const extra_container = mkPackage(
  nixRaw`pkgs.extra-container`,
  "Run declarative containers without full system rebuilds",
);

/**
 * Trace exec() calls system-wide
 */
export const extrace = mkPackage(
  nixRaw`pkgs.extrace`,
  "Trace exec() calls system-wide",
);

/**
 * Extracts URLs from MIME messages or plain text
 */
export const extract_url = mkPackage(
  nixRaw`pkgs.extract_url`,
  "Extracts URLs from MIME messages or plain text",
);

/**
 * High speed arctic racing game based on Tux Racer
 */
export const extremetuxracer = mkPackage(
  nixRaw`pkgs.extremetuxracer`,
  "High speed arctic racing game based on Tux Racer",
);

/**
 * Tool to analyse binaries for missing security features
 */
export const extrude = mkPackage(
  nixRaw`pkgs.extrude`,
  "Tool to analyse binaries for missing security features",
);

/**
 * Utility that can recover deleted files from an ext3 or ext4 partition
 */
export const extundelete = mkPackage(
  nixRaw`pkgs.extundelete`,
  "Utility that can recover deleted files from an ext3 or ext4 partition",
);

/**
 * Exult is a project to recreate Ultima VII for modern operating systems
 */
export const exult = mkPackage(
  nixRaw`pkgs.exult`,
  "Exult is a project to recreate Ultima VII for modern operating systems",
);

/**
 * Pick and format colors
 */
export const eyedropper = mkPackage(
  nixRaw`pkgs.eyedropper`,
  "Pick and format colors",
);

/**
 * A modern, maintained replacement for ls
 */
export const eza = mkPackage(
  nixRaw`pkgs.eza`,
  "A modern, maintained replacement for ls",
);

/**
 * A JavaScript compiler and TypeScript checker with a focus on static analysis and runtime performance
 */
export const ezno = mkPackage(
  nixRaw`pkgs.ezno`,
  "A JavaScript compiler and TypeScript checker with a focus on static analysis and runtime performance",
);

/**
 * A modern QuakeWorld client focused on competitive online play
 */
export const ezquake = mkPackage(
  nixRaw`pkgs.ezquake`,
  "A modern QuakeWorld client focused on competitive online play",
);

/**
 * Typeface fashioned after the square letter forms of the typography of the Biblia Hebraica Stuttgartensia (BHS)
 */
export const ezra_sil = mkPackage(
  nixRaw`pkgs.ezra-sil`,
  "Typeface fashioned after the square letter forms of the typography of the Biblia Hebraica Stuttgartensia (BHS)",
);

/**
 * A command line source client for Icecast media streaming servers
 */
export const ezstream = mkPackage(
  nixRaw`pkgs.ezstream`,
  "A command line source client for Icecast media streaming servers",
);

/**
 * Tool that aims at generating automatically execution trace from HPC programs
 */
export const eztrace = mkPackage(
  nixRaw`pkgs.eztrace`,
  "Tool that aims at generating automatically execution trace from HPC programs",
);

/**
 * A weighted decorative font
 */
export const f1_8 = mkPackage(
  nixRaw`pkgs.f1_8`,
  "A weighted decorative font",
);

/**
 * A TUI to view Formula 1 footage using VLC or another media player
 */
export const f1viewer = mkPackage(
  nixRaw`pkgs.f1viewer`,
  "A TUI to view Formula 1 footage using VLC or another media player",
);

/**
 * Command-line batch renaming tool
 */
export const f2 = mkPackage(
  nixRaw`pkgs.f2`,
  "Command-line batch renaming tool",
);

/**
 * Convert Fortran 77 source code to C
 */
export const f2c = mkPackage(
  nixRaw`pkgs.f2c`,
  "Convert Fortran 77 source code to C",
);

/**
 * Userland tools for the f2fs filesystem
 */
export const f2fs_tools = mkPackage(
  nixRaw`pkgs.f2fs-tools`,
  "Userland tools for the f2fs filesystem",
);

/**
 * Fight Flash Fraud
 */
export const f3 = mkPackage(
  nixRaw`pkgs.f3`,
  "Fight Flash Fraud",
);

/**
 * Fast and minimalist 3D viewer using VTK
 */
export const f3d = mkPackage(
  nixRaw`pkgs.f3d`,
  "Fast and minimalist 3D viewer using VTK",
);

/**
 * A weighted decorative font
 */
export const f5_6 = mkPackage(
  nixRaw`pkgs.f5_6`,
  "A weighted decorative font",
);

/**
 * A weighted decorative font
 */
export const fa_1 = mkPackage(
  nixRaw`pkgs.fa_1`,
  "A weighted decorative font",
);

/**
 * Open source MPEG-4 and MPEG-2 AAC encoder
 */
export const faac = mkPackage(
  nixRaw`pkgs.faac`,
  "Open source MPEG-4 and MPEG-2 AAC encoder",
);

/**
 * An open source MPEG-4 and MPEG-2 AAC decoder
 */
export const faad2 = mkPackage(
  nixRaw`pkgs.faad2`,
  "An open source MPEG-4 and MPEG-2 AAC decoder",
);

/**
 * Official CLI for OpenFaaS 
 */
export const faas_cli = mkPackage(
  nixRaw`pkgs.faas-cli`,
  "Official CLI for OpenFaaS ",
);

/**
 * A sexy and modern icon theme with Tango influences
 */
export const faba_icon_theme = mkPackage(
  nixRaw`pkgs.faba-icon-theme`,
  "A sexy and modern icon theme with Tango influences",
);

/**
 * The full set of Faba monochrome panel icons
 */
export const faba_mono_icons = mkPackage(
  nixRaw`pkgs.faba-mono-icons`,
  "The full set of Faba monochrome panel icons",
);

/**
 * Fable is an F# to JavaScript compiler
 */
export const fable = mkPackage(
  nixRaw`pkgs.fable`,
  "Fable is an F# to JavaScript compiler",
);

/**
 * A lightweight, experimental modding toolchain for Minecraft
 */
export const fabric_installer = mkPackage(
  nixRaw`pkgs.fabric-installer`,
  "A lightweight, experimental modding toolchain for Minecraft",
);

/**
 * CUI for fixing git conflicts
 */
export const fac = mkPackage(
  nixRaw`pkgs.fac`,
  "CUI for fixing git conflicts",
);

/**
 * A build system that uses ptrace to handle dependencies automatically

 */
export const fac_build = mkPackage(
  nixRaw`pkgs.fac-build`,
  "A build system that uses ptrace to handle dependencies automatically\n",
);

/**
 * A simple face detector for batch processing
 */
export const facedetect = mkPackage(
  nixRaw`pkgs.facedetect`,
  "A simple face detector for batch processing",
);

/**
 * facetimehd calibration
 */
export const facetimehd_calibration = mkPackage(
  nixRaw`pkgs.facetimehd-calibration`,
  "facetimehd calibration",
);

/**
 * facetimehd firmware
 */
export const facetimehd_firmware = mkPackage(
  nixRaw`pkgs.facetimehd-firmware`,
  "facetimehd firmware",
);

/**
 * A system inventory tool
 */
export const facter = mkPackage(
  nixRaw`pkgs.facter`,
  "A system inventory tool",
);

/**
 * A concatenative, stack-based programming language
 */
export const factor_lang = mkPackage(
  nixRaw`pkgs.factor-lang`,
  "A concatenative, stack-based programming language",
);

/**
 * A game in which you build and maintain factories
 */
export const factorio = mkPackage(
  nixRaw`pkgs.factorio`,
  "A game in which you build and maintain factories",
);

/**
 * A game in which you build and maintain factories
 */
export const factorio_demo = mkPackage(
  nixRaw`pkgs.factorio-demo`,
  "A game in which you build and maintain factories",
);

/**
 * A game in which you build and maintain factories
 */
export const factorio_experimental = mkPackage(
  nixRaw`pkgs.factorio-experimental`,
  "A game in which you build and maintain factories",
);

/**
 * A game in which you build and maintain factories
 */
export const factorio_headless = mkPackage(
  nixRaw`pkgs.factorio-headless`,
  "A game in which you build and maintain factories",
);

/**
 * A game in which you build and maintain factories
 */
export const factorio_headless_experimental = mkPackage(
  nixRaw`pkgs.factorio-headless-experimental`,
  "A game in which you build and maintain factories",
);

/**
 * Folding@home client
 */
export const fahclient = mkPackage(
  nixRaw`pkgs.fahclient`,
  "Folding@home client",
);

/**
 * Folding@home control
 */
export const fahcontrol = mkPackage(
  nixRaw`pkgs.fahcontrol`,
  "Folding@home control",
);

/**
 * Folding@home viewer
 */
export const fahviewer = mkPackage(
  nixRaw`pkgs.fahviewer`,
  "Folding@home viewer",
);

/**
 * A program that scans log files for repeated failing login attempts and bans IP addresses
 */
export const fail2ban = mkPackage(
  nixRaw`pkgs.fail2ban`,
  "A program that scans log files for repeated failing login attempts and bans IP addresses",
);

/**
 * A self-hostable, statically generated bandcamp alternative
 */
export const faircamp = mkPackage(
  nixRaw`pkgs.faircamp`,
  "A self-hostable, statically generated bandcamp alternative",
);

/**
 * A small chess engine supporting fairy pieces
 */
export const fairymax = mkPackage(
  nixRaw`pkgs.fairymax`,
  "A small chess engine supporting fairy pieces",
);

/**
 * A library for efficient similarity search and clustering of dense vectors by Facebook Research
 */
export const faiss = mkPackage(
  nixRaw`pkgs.faiss`,
  "A library for efficient similarity search and clustering of dense vectors by Facebook Research",
);

/**
 * A library for efficient similarity search and clustering of dense vectors by Facebook Research
 */
export const faissWithCuda = mkPackage(
  nixRaw`pkgs.faissWithCuda`,
  "A library for efficient similarity search and clustering of dense vectors by Facebook Research",
);

export const fakeNss = mkPackage(
  nixRaw`pkgs.fakeNss`,
  "",
);

/**
 * Give a fake chroot environment through LD_PRELOAD
 */
export const fakechroot = mkPackage(
  nixRaw`pkgs.fakechroot`,
  "Give a fake chroot environment through LD_PRELOAD",
);

/**
 * Give a fake root environment through LD_PRELOAD
 */
export const fakeroot = mkPackage(
  nixRaw`pkgs.fakeroot`,
  "Give a fake root environment through LD_PRELOAD",
);

/**
 * Make your machine appears to be anywhere on the internet in a traceroute

 */
export const fakeroute = mkPackage(
  nixRaw`pkgs.fakeroute`,
  "Make your machine appears to be anywhere on the internet in a traceroute\n",
);

/**
 * A wrapper to execute a command in a pty, even if redirecting the output
 */
export const faketty = mkPackage(
  nixRaw`pkgs.faketty`,
  "A wrapper to execute a command in a pty, even if redirecting the output",
);

/**
 * Administrative tooling for Falco
 */
export const falcoctl = mkPackage(
  nixRaw`pkgs.falcoctl`,
  "Administrative tooling for Falco",
);

/**
 * Programming language with macros and syntax at once
 */
export const falcon = mkPackage(
  nixRaw`pkgs.falcon`,
  "Programming language with macros and syntax at once",
);

/**
 * A fully working re-implementation of Fallout 2, with the same original gameplay, engine bugfixes, and some quality of life improvements
 */
export const fallout2_ce = mkPackage(
  nixRaw`pkgs.fallout2-ce`,
  "A fully working re-implementation of Fallout 2, with the same original gameplay, engine bugfixes, and some quality of life improvements",
);

/**
 * A fully working re-implementation of Fallout, with the same original gameplay, engine bugfixes, and some quality of life improvements
 */
export const fallout_ce = mkPackage(
  nixRaw`pkgs.fallout-ce`,
  "A fully working re-implementation of Fallout, with the same original gameplay, engine bugfixes, and some quality of life improvements",
);

/**
 * A file and directory monitoring system
 */
export const fam = mkPackage(
  nixRaw`pkgs.fam`,
  "A file and directory monitoring system",
);

/**
 * NES Music Editor
 */
export const famistudio = mkPackage(
  nixRaw`pkgs.famistudio`,
  "NES Music Editor",
);

/**
 * A simple daemon providing dynamic fan speed control based on temperature sensors
 */
export const fan2go = mkPackage(
  nixRaw`pkgs.fan2go`,
  "A simple daemon providing dynamic fan speed control based on temperature sensors",
);

/**
 * Replacement for fancontrol with more fine-grained control interface in its config file
 */
export const fanctl = mkPackage(
  nixRaw`pkgs.fanctl`,
  "Replacement for fancontrol with more fine-grained control interface in its config file",
);

/**
 * Fancy, colorful MOTD written in bash. Server status at a glance.
 */
export const fancy_motd = mkPackage(
  nixRaw`pkgs.fancy-motd`,
  "Fancy, colorful MOTD written in bash. Server status at a glance.",
);

/**
 * Tiny C++ Library for terminal colors and more!
 */
export const fancypp = mkPackage(
  nixRaw`pkgs.fancypp`,
  "Tiny C++ Library for terminal colors and more!",
);

/**
 * Tool for making eBooks from fanfiction web sites
 */
export const fanficfare = mkPackage(
  nixRaw`pkgs.fanficfare`,
  "Tool for making eBooks from fanfiction web sites",
);

/**
 * A font family with a great monospaced variant for programmers
 */
export const fantasque_sans_mono = mkPackage(
  nixRaw`pkgs.fantasque-sans-mono`,
  "A font family with a great monospaced variant for programmers",
);

/**
 * F# source code formatter
 */
export const fantomas = mkPackage(
  nixRaw`pkgs.fantomas`,
  "F# source code formatter",
);

/**
 * A serif based on the work of a famous Czech-American type designer of yesteryear
 */
export const fanwood = mkPackage(
  nixRaw`pkgs.fanwood`,
  "A serif based on the work of a famous Czech-American type designer of yesteryear",
);

/**
 * faq is a tool intended to be a more flexible jq, supporting additional formats
 */
export const faq = mkPackage(
  nixRaw`pkgs.faq`,
  "faq is a tool intended to be a more flexible jq, supporting additional formats",
);

/**
 * Linux port of FAR Manager v2, a program for managing files and archives in Windows operating systems
 */
export const far2l = mkPackage(
  nixRaw`pkgs.far2l`,
  "Linux port of FAR Manager v2, a program for managing files and archives in Windows operating systems",
);

/**
 * LND Channel Management Tools
 */
export const faraday = mkPackage(
  nixRaw`pkgs.faraday`,
  "LND Channel Management Tools",
);

/**
 * Tool to send result from tools to the Faraday Platform
 */
export const faraday_agent_dispatcher = mkPackage(
  nixRaw`pkgs.faraday-agent-dispatcher`,
  "Tool to send result from tools to the Faraday Platform",
);

/**
 * Command Line Interface for Faraday
 */
export const faraday_cli = mkPackage(
  nixRaw`pkgs.faraday-cli`,
  "Command Line Interface for Faraday",
);

/**
 * Suckless image format with conversion tools
 */
export const farbfeld = mkPackage(
  nixRaw`pkgs.farbfeld`,
  "Suckless image format with conversion tools",
);

/**
 * A tool that shows the color value of a given pixel on your screen
 */
export const farge = mkPackage(
  nixRaw`pkgs.farge`,
  "A tool that shows the color value of a given pixel on your screen",
);

/**
 * Audio/Video Communications Framework formely known as farsight
 */
export const farstream = mkPackage(
  nixRaw`pkgs.farstream`,
  "Audio/Video Communications Framework formely known as farsight",
);

/**
 * Quick command-line access to files and directories for POSIX shells
 */
export const fasd = mkPackage(
  nixRaw`pkgs.fasd`,
  "Quick command-line access to files and directories for POSIX shells",
);

/**
 * x86(-64) macro assembler to binary, MZ, PE, COFF, and ELF
 */
export const fasm = mkPackage(
  nixRaw`pkgs.fasm`,
  "x86(-64) macro assembler to binary, MZ, PE, COFF, and ELF",
);

/**
 * x86(-64) macro assembler to binary, MZ, PE, COFF, and ELF
 */
export const fasm_bin = mkPackage(
  nixRaw`pkgs.fasm-bin`,
  "x86(-64) macro assembler to binary, MZ, PE, COFF, and ELF",
);

/**
 * x86(-64) macro assembler to binary, MZ, PE, COFF, and ELF
 */
export const fasmg = mkPackage(
  nixRaw`pkgs.fasmg`,
  "x86(-64) macro assembler to binary, MZ, PE, COFF, and ELF",
);

/**
 * A fast json library for C
 */
export const fastJson = mkPackage(
  nixRaw`pkgs.fastJson`,
  "A fast json library for C",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const fastStdenv = mkPackage(
  nixRaw`pkgs.fastStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * Test your download and upload speed using fast.com
 */
export const fast_cli = mkPackage(
  nixRaw`pkgs.fast-cli`,
  "Test your download and upload speed using fast.com",
);

/**
 * A small, easy-to-use and fast header-only library for reading comma separated value (CSV) files
 */
export const fast_cpp_csv_parser = mkPackage(
  nixRaw`pkgs.fast-cpp-csv-parser`,
  "A small, easy-to-use and fast header-only library for reading comma separated value (CSV) files",
);

/**
 * A domain-independent planning system
 */
export const fast_downward = mkPackage(
  nixRaw`pkgs.fast-downward`,
  "A domain-independent planning system",
);

/**
 * TUI tool to use the SSH config for connections
 */
export const fast_ssh = mkPackage(
  nixRaw`pkgs.fast-ssh`,
  "TUI tool to use the SSH config for connections",
);

/**
 * Serialization library for OMG's Common Data Representation (CDR)
 */
export const fastcdr = mkPackage(
  nixRaw`pkgs.fastcdr`,
  "Serialization library for OMG's Common Data Representation (CDR)",
);

/**
 * Fast and Secure Tunneling Daemon
 */
export const fastd = mkPackage(
  nixRaw`pkgs.fastd`,
  "Fast and Secure Tunneling Daemon",
);

/**
 * Fast-DDS IDL code generator tool
 */
export const fastddsgen = mkPackage(
  nixRaw`pkgs.fastddsgen`,
  "Fast-DDS IDL code generator tool",
);

/**
 * Like neofetch, but much faster because written in C
 */
export const fastfetch = mkPackage(
  nixRaw`pkgs.fastfetch`,
  "Like neofetch, but much faster because written in C",
);

/**
 * High-performance JSON to GRON (greppable, flattened JSON) converter
 */
export const fastgron = mkPackage(
  nixRaw`pkgs.fastgron`,
  "High-performance JSON to GRON (greppable, flattened JSON) converter",
);

/**
 * Fast Java archiver written in C
 */
export const fastjar = mkPackage(
  nixRaw`pkgs.fastjar`,
  "Fast Java archiver written in C",
);

/**
 * A software package for jet finding in pp and e+e− collisions
 */
export const fastjet = mkPackage(
  nixRaw`pkgs.fastjet`,
  "A software package for jet finding in pp and e+e− collisions",
);

/**
 * Third party extensions for FastJet
 */
export const fastjet_contrib = mkPackage(
  nixRaw`pkgs.fastjet-contrib`,
  "Third party extensions for FastJet",
);

/**
 * A tool to automate building and releasing iOS and Android apps
 */
export const fastlane = mkPackage(
  nixRaw`pkgs.fastlane`,
  "A tool to automate building and releasing iOS and Android apps",
);

/**
 * Command line tool for interacting with the Fastly API
 */
export const fastly = mkPackage(
  nixRaw`pkgs.fastly`,
  "Command line tool for interacting with the Fastly API",
);

/**
 * A utility that makes sweeping changes to large, shared code bases
 */
export const fastmod = mkPackage(
  nixRaw`pkgs.fastmod`,
  "A utility that makes sweeping changes to large, shared code bases",
);

/**
 * A high performance DDoS detector / sensor - commercial edition
 */
export const fastnetmon_advanced = mkPackage(
  nixRaw`pkgs.fastnetmon-advanced`,
  "A high performance DDoS detector / sensor - commercial edition",
);

/**
 * Fast pQCD calculations for hadron-induced processes
 */
export const fastnlo_toolkit = mkPackage(
  nixRaw`pkgs.fastnlo_toolkit`,
  "Fast pQCD calculations for hadron-induced processes",
);

/**
 * Ultra-fast all-in-one FASTQ preprocessor
 */
export const fastp = mkPackage(
  nixRaw`pkgs.fastp`,
  "Ultra-fast all-in-one FASTQ preprocessor",
);

/**
 * A fast PBKDF2-HMAC-{SHA1,SHA256,SHA512} implementation in C
 */
export const fastpbkdf2 = mkPackage(
  nixRaw`pkgs.fastpbkdf2`,
  "A fast PBKDF2-HMAC-{SHA1,SHA256,SHA512} implementation in C",
);

/**
 * Library for text classification and representation learning
 */
export const fasttext = mkPackage(
  nixRaw`pkgs.fasttext`,
  "Library for text classification and representation learning",
);

/**
 * FAT filesystems explore, extract, repair, and forensic tool
 */
export const fatcat = mkPackage(
  nixRaw`pkgs.fatcat`,
  "FAT filesystems explore, extract, repair, and forensic tool",
);

/**
 * Report system-wide file access events
 */
export const fatrace = mkPackage(
  nixRaw`pkgs.fatrace`,
  "Report system-wide file access events",
);

/**
 * The FAT16/FAT32 non-destructive resizer
 */
export const fatresize = mkPackage(
  nixRaw`pkgs.fatresize`,
  "The FAT16/FAT32 non-destructive resizer",
);

/**
 * Sorts FAT partition table, for devices that don't do sorting of files
 */
export const fatsort = mkPackage(
  nixRaw`pkgs.fatsort`,
  "Sorts FAT partition table, for devices that don't do sorting of files",
);

/**
 * XAudio reimplementation focusing to develop a fully accurate DirectX audio library
 */
export const faudio = mkPackage(
  nixRaw`pkgs.faudio`,
  "XAudio reimplementation focusing to develop a fully accurate DirectX audio library",
);

/**
 * A functional programming language for realtime audio signal processing
 */
export const faust = mkPackage(
  nixRaw`pkgs.faust`,
  "A functional programming language for realtime audio signal processing",
);

/**
 * A functional programming language for realtime audio signal processing
 */
export const faust2 = mkPackage(
  nixRaw`pkgs.faust2`,
  "A functional programming language for realtime audio signal processing",
);

/**
 * The faust2alqt script, part of faust functional programming language for realtime audio signal processing
 */
export const faust2alqt = mkPackage(
  nixRaw`pkgs.faust2alqt`,
  "The faust2alqt script, part of faust functional programming language for realtime audio signal processing",
);

/**
 * The faust2alsa script, part of faust functional programming language for realtime audio signal processing
 */
export const faust2alsa = mkPackage(
  nixRaw`pkgs.faust2alsa`,
  "The faust2alsa script, part of faust functional programming language for realtime audio signal processing",
);

/**
 * The faust2csound script, part of faust functional programming language for realtime audio signal processing
 */
export const faust2csound = mkPackage(
  nixRaw`pkgs.faust2csound`,
  "The faust2csound script, part of faust functional programming language for realtime audio signal processing",
);

/**
 * The faust2firefox script, part of faust functional programming language for realtime audio signal processing
 */
export const faust2firefox = mkPackage(
  nixRaw`pkgs.faust2firefox`,
  "The faust2firefox script, part of faust functional programming language for realtime audio signal processing",
);

/**
 * The faust2jack script, part of faust functional programming language for realtime audio signal processing
 */
export const faust2jack = mkPackage(
  nixRaw`pkgs.faust2jack`,
  "The faust2jack script, part of faust functional programming language for realtime audio signal processing",
);

/**
 * The faust2jackrust script, part of faust functional programming language for realtime audio signal processing
 */
export const faust2jackrust = mkPackage(
  nixRaw`pkgs.faust2jackrust`,
  "The faust2jackrust script, part of faust functional programming language for realtime audio signal processing",
);

/**
 * The faust2jaqt script, part of faust functional programming language for realtime audio signal processing
 */
export const faust2jaqt = mkPackage(
  nixRaw`pkgs.faust2jaqt`,
  "The faust2jaqt script, part of faust functional programming language for realtime audio signal processing",
);

/**
 * The faust2ladspa script, part of faust functional programming language for realtime audio signal processing
 */
export const faust2ladspa = mkPackage(
  nixRaw`pkgs.faust2ladspa`,
  "The faust2ladspa script, part of faust functional programming language for realtime audio signal processing",
);

/**
 * The faust2lv2 script, part of faust functional programming language for realtime audio signal processing
 */
export const faust2lv2 = mkPackage(
  nixRaw`pkgs.faust2lv2`,
  "The faust2lv2 script, part of faust functional programming language for realtime audio signal processing",
);

/**
 * The faust2sc.py script, part of faust functional programming language for realtime audio signal processing
 */
export const faust2sc = mkPackage(
  nixRaw`pkgs.faust2sc`,
  "The faust2sc.py script, part of faust functional programming language for realtime audio signal processing",
);

/**
 * The physical models included with faust compiled as jack standalone and lv2 instruments
 */
export const faustPhysicalModeling = mkPackage(
  nixRaw`pkgs.faustPhysicalModeling`,
  "The physical models included with faust compiled as jack standalone and lv2 instruments",
);

/**
 * A standalone just-in-time Faust compiler
 */
export const faustlive = mkPackage(
  nixRaw`pkgs.faustlive`,
  "A standalone just-in-time Faust compiler",
);

/**
 * Web interface for beancount
 */
export const fava = mkPackage(
  nixRaw`pkgs.fava`,
  "Web interface for beancount",
);

/**
 * a base Thrift service and a common set of functionality for querying stats, options, and other information from a service
 */
export const fb303 = mkPackage(
  nixRaw`pkgs.fb303`,
  "a base Thrift service and a common set of functionality for querying stats, options, and other information from a service",
);

/**
 * A multi-platform BASIC Compiler
 */
export const fbc = mkPackage(
  nixRaw`pkgs.fbc`,
  "A multi-platform BASIC Compiler",
);

/**
 * Framebuffer screenshot tool
 */
export const fbcat = mkPackage(
  nixRaw`pkgs.fbcat`,
  "Framebuffer screenshot tool",
);

/**
 * Image viewing and manipulation programs including fbi, fbgs, ida, exiftran and thumbnail.cgi
 */
export const fbida = mkPackage(
  nixRaw`pkgs.fbida`,
  "Image viewing and manipulation programs including fbi, fbgs, ida, exiftran and thumbnail.cgi",
);

/**
 * A library designed to simplify the usage of the Java Native Interface
 */
export const fbjni = mkPackage(
  nixRaw`pkgs.fbjni`,
  "A library designed to simplify the usage of the Java Native Interface",
);

/**
 * A small command-line JSON log viewer
 */
export const fblog = mkPackage(
  nixRaw`pkgs.fblog`,
  "A small command-line JSON log viewer",
);

/**
 * Linux Framebuffer Benchmark
 */
export const fbmark = mkPackage(
  nixRaw`pkgs.fbmark`,
  "Linux Framebuffer Benchmark",
);

/**
 * Simple menu generator for the Fluxbox Window Manager
 */
export const fbmenugen = mkPackage(
  nixRaw`pkgs.fbmenugen`,
  "Simple menu generator for the Fluxbox Window Manager",
);

/**
 * A stand-alone panel
 */
export const fbpanel = mkPackage(
  nixRaw`pkgs.fbpanel`,
  "A stand-alone panel",
);

/**
 * Framebuffer terminal emulator
 */
export const fbterm = mkPackage(
  nixRaw`pkgs.fbterm`,
  "Framebuffer terminal emulator",
);

/**
 * Facebook's branch of Apache Thrift
 */
export const fbthrift = mkPackage(
  nixRaw`pkgs.fbthrift`,
  "Facebook's branch of Apache Thrift",
);

/**
 * View pictures on a linux framebuffer device
 */
export const fbv = mkPackage(
  nixRaw`pkgs.fbv`,
  "View pictures on a linux framebuffer device",
);

/**
 * Framebuffer VNC client
 */
export const fbvnc = mkPackage(
  nixRaw`pkgs.fbvnc`,
  "Framebuffer VNC client",
);

/**
 * A Nintendo Entertainment System (NES) Emulator
 */
export const fceux = mkPackage(
  nixRaw`pkgs.fceux`,
  "A Nintendo Entertainment System (NES) Emulator",
);

/**
 * Simple library for font loading and glyph rasterization
 */
export const fcft = mkPackage(
  nixRaw`pkgs.fcft`,
  "Simple library for font loading and glyph rasterization",
);

/**
 * A language independent, scalable, open extension to CG
 */
export const fcgi = mkPackage(
  nixRaw`pkgs.fcgi`,
  "A language independent, scalable, open extension to CG",
);

/**
 * Simple server for running CGI applications over FastCGI
 */
export const fcgiwrap = mkPackage(
  nixRaw`pkgs.fcgiwrap`,
  "Simple server for running CGI applications over FastCGI",
);

/**
 * Next generation of fcitx
 */
export const fcitx5 = mkPackage(
  nixRaw`pkgs.fcitx5`,
  "Next generation of fcitx",
);

/**
 * Anthy Wrapper for Fcitx5
 */
export const fcitx5_anthy = mkPackage(
  nixRaw`pkgs.fcitx5-anthy`,
  "Anthy Wrapper for Fcitx5",
);

/**
 * Chewing wrapper for Fcitx5
 */
export const fcitx5_chewing = mkPackage(
  nixRaw`pkgs.fcitx5-chewing`,
  "Chewing wrapper for Fcitx5",
);

/**
 * Addons related to Chinese, including IME previous bundled inside fcitx4
 */
export const fcitx5_chinese_addons = mkPackage(
  nixRaw`pkgs.fcitx5-chinese-addons`,
  "Addons related to Chinese, including IME previous bundled inside fcitx4",
);

/**
 * Configuration Tool for Fcitx5
 */
export const fcitx5_configtool = mkPackage(
  nixRaw`pkgs.fcitx5-configtool`,
  "Configuration Tool for Fcitx5",
);

/**
 * Fcitx5 gtk im module and glib based dbus client library
 */
export const fcitx5_gtk = mkPackage(
  nixRaw`pkgs.fcitx5-gtk`,
  "Fcitx5 gtk im module and glib based dbus client library",
);

/**
 * Hangul wrapper for Fcitx5
 */
export const fcitx5_hangul = mkPackage(
  nixRaw`pkgs.fcitx5-hangul`,
  "Hangul wrapper for Fcitx5",
);

/**
 * Lua support for Fcitx 5
 */
export const fcitx5_lua = mkPackage(
  nixRaw`pkgs.fcitx5-lua`,
  "Lua support for Fcitx 5",
);

/**
 * m17n support for Fcitx5
 */
export const fcitx5_m17n = mkPackage(
  nixRaw`pkgs.fcitx5-m17n`,
  "m17n support for Fcitx5",
);

/**
 * Fcitx5 Module of A Japanese Input Method for Chromium OS, Windows, Mac and Linux (the Open Source Edition of Google Japanese Input)
 */
export const fcitx5_mozc = mkPackage(
  nixRaw`pkgs.fcitx5-mozc`,
  "Fcitx5 Module of A Japanese Input Method for Chromium OS, Windows, Mac and Linux (the Open Source Edition of Google Japanese Input)",
);

/**
 * An OpenSource, Unicode compliant Bengali Input Method
 */
export const fcitx5_openbangla_keyboard = mkPackage(
  nixRaw`pkgs.fcitx5-openbangla-keyboard`,
  "An OpenSource, Unicode compliant Bengali Input Method",
);

/**
 * RIME support for Fcitx5
 */
export const fcitx5_rime = mkPackage(
  nixRaw`pkgs.fcitx5-rime`,
  "RIME support for Fcitx5",
);

/**
 * Input method engine for Fcitx5, which uses libskk as its backend
 */
export const fcitx5_skk = mkPackage(
  nixRaw`pkgs.fcitx5-skk`,
  "Input method engine for Fcitx5, which uses libskk as its backend",
);

/**
 * Input method engine for Fcitx5, which uses libskk as its backend
 */
export const fcitx5_skk_qt = mkPackage(
  nixRaw`pkgs.fcitx5-skk-qt`,
  "Input method engine for Fcitx5, which uses libskk as its backend",
);

/**
 * Extra table for Fcitx, including Boshiamy, Zhengma, Cangjie, and Quick
 */
export const fcitx5_table_extra = mkPackage(
  nixRaw`pkgs.fcitx5-table-extra`,
  "Extra table for Fcitx, including Boshiamy, Zhengma, Cangjie, and Quick",
);

/**
 * Some other tables for Fcitx
 */
export const fcitx5_table_other = mkPackage(
  nixRaw`pkgs.fcitx5-table-other`,
  "Some other tables for Fcitx",
);

/**
 * Unikey engine support for Fcitx5
 */
export const fcitx5_unikey = mkPackage(
  nixRaw`pkgs.fcitx5-unikey`,
  "Unikey engine support for Fcitx5",
);

/**
 * Next generation of fcitx
 */
export const fcitx5_with_addons = mkPackage(
  nixRaw`pkgs.fcitx5-with-addons`,
  "Next generation of fcitx",
);

/**
 * Flexible Collision Library
 */
export const fcl = mkPackage(
  nixRaw`pkgs.fcl`,
  "Flexible Collision Library",
);

/**
 * Efficient Duplicate File Finder and Remover
 */
export const fclones = mkPackage(
  nixRaw`pkgs.fclones`,
  "Efficient Duplicate File Finder and Remover",
);

/**
 * Interactive duplicate file remover
 */
export const fclones_gui = mkPackage(
  nixRaw`pkgs.fclones-gui`,
  "Interactive duplicate file remover",
);

/**
 * A significantly faster alternative to the classic Unix cp(1) command
 */
export const fcp = mkPackage(
  nixRaw`pkgs.fcp`,
  "A significantly faster alternative to the classic Unix cp(1) command",
);

/**
 * Freundlich's C++ toolkit
 */
export const fcppt = mkPackage(
  nixRaw`pkgs.fcppt`,
  "Freundlich's C++ toolkit",
);

/**
 * zip password cracker, similar to fzc, zipcrack and others
 */
export const fcrackzip = mkPackage(
  nixRaw`pkgs.fcrackzip`,
  "zip password cracker, similar to fzc, zipcrack and others",
);

/**
 * A command scheduler with extended capabilities over cron and anacron
 */
export const fcron = mkPackage(
  nixRaw`pkgs.fcron`,
  "A command scheduler with extended capabilities over cron and anacron",
);

/**
 * A simple, fast and user-friendly alternative to find
 */
export const fd = mkPackage(
  nixRaw`pkgs.fd`,
  "A simple, fast and user-friendly alternative to find",
);

/**
 * A high-quality implementation of the AAC codec from Android
 */
export const fdk_aac = mkPackage(
  nixRaw`pkgs.fdk_aac`,
  "A high-quality implementation of the AAC codec from Android",
);

/**
 * Command line encoder frontend for libfdk-aac encoder
 */
export const fdk_aac_encoder = mkPackage(
  nixRaw`pkgs.fdk-aac-encoder`,
  "Command line encoder frontend for libfdk-aac encoder",
);

/**
 * Mail fetching and delivery tool - should do the job of getmail and procmail
 */
export const fdm = mkPackage(
  nixRaw`pkgs.fdm`,
  "Mail fetching and delivery tool - should do the job of getmail and procmail",
);

/**
 * The CSP refinement checker
 */
export const fdr = mkPackage(
  nixRaw`pkgs.fdr`,
  "The CSP refinement checker",
);

/**
 * F-Droid command line interface written in Go
 */
export const fdroidcl = mkPackage(
  nixRaw`pkgs.fdroidcl`,
  "F-Droid command line interface written in Go",
);

/**
 * Server and tools for F-Droid, the Free Software repository system for Android
 */
export const fdroidserver = mkPackage(
  nixRaw`pkgs.fdroidserver`,
  "Server and tools for F-Droid, the Free Software repository system for Android",
);

/**
 * A set of utilities for working with file descriptors
 */
export const fdtools = mkPackage(
  nixRaw`pkgs.fdtools`,
  "A set of utilities for working with file descriptors",
);

/**
 * Identifies duplicate files residing within specified directories
 */
export const fdupes = mkPackage(
  nixRaw`pkgs.fdupes`,
  "Identifies duplicate files residing within specified directories",
);

/**
 * Advert generator from web feeds
 */
export const fead = mkPackage(
  nixRaw`pkgs.fead`,
  "Advert generator from web feeds",
);

/**
 * Lightweight Qt5 Plain-Text Editor for Linux
 */
export const featherpad = mkPackage(
  nixRaw`pkgs.featherpad`,
  "Lightweight Qt5 Plain-Text Editor for Linux",
);

/**
 * FEBio Suite Solver
 */
export const febio = mkPackage(
  nixRaw`pkgs.febio`,
  "FEBio Suite Solver",
);

/**
 * FEBio Suite Solver
 */
export const febio_studio = mkPackage(
  nixRaw`pkgs.febio-studio`,
  "FEBio Suite Solver",
);

/**
 * A tool for Mastodon that automatically fetches missing replies and posts from other fediverse instances
 */
export const fedifetcher = mkPackage(
  nixRaw`pkgs.fedifetcher`,
  "A tool for Mastodon that automatically fetches missing replies and posts from other fediverse instances",
);

/**
 * An approximation of groups usable with Fediverse software that implements the Mastodon client API
 */
export const fedigroups = mkPackage(
  nixRaw`pkgs.fedigroups`,
  "An approximation of groups usable with Fediverse software that implements the Mastodon client API",
);

/**
 * Uploads rss feeds as e-mails onto an IMAP server
 */
export const feed2imap_go = mkPackage(
  nixRaw`pkgs.feed2imap-go`,
  "Uploads rss feeds as e-mails onto an IMAP server",
);

/**
 * A daemon to provide haptic (and later more) feedback on events
 */
export const feedbackd = mkPackage(
  nixRaw`pkgs.feedbackd`,
  "A daemon to provide haptic (and later more) feedback on events",
);

/**
 * General purpose pipe-oriented plotting tool
 */
export const feedgnuplot = mkPackage(
  nixRaw`pkgs.feedgnuplot`,
  "General purpose pipe-oriented plotting tool",
);

/**
 * A light-weight image viewer
 */
export const feh = mkPackage(
  nixRaw`pkgs.feh`,
  "A light-weight image viewer",
);

/**
 * Small desktop application launcher with reasonable memory footprint
 */
export const fehlstart = mkPackage(
  nixRaw`pkgs.fehlstart`,
  "Small desktop application launcher with reasonable memory footprint",
);

/**
 * Full-featured Subsonic/Jellyfin compatible desktop music player
 */
export const feishin = mkPackage(
  nixRaw`pkgs.feishin`,
  "Full-featured Subsonic/Jellyfin compatible desktop music player",
);

/**
 * An all-in-one collaboration suite
 */
export const feishu = mkPackage(
  nixRaw`pkgs.feishu`,
  "An all-in-one collaboration suite",
);

/**
 * An OSGi gateway
 */
export const felix = mkPackage(
  nixRaw`pkgs.felix`,
  "An OSGi gateway",
);

/**
 * A tui file manager with vim-like key mapping
 */
export const felix_fm = mkPackage(
  nixRaw`pkgs.felix-fm`,
  "A tui file manager with vim-like key mapping",
);

export const felix_remoteshell = mkPackage(
  nixRaw`pkgs.felix_remoteshell`,
  "",
);

/**
 * A compact interpreter for a minimal lisp/scheme dialect
 */
export const femtolisp = mkPackage(
  nixRaw`pkgs.femtolisp`,
  "A compact interpreter for a minimal lisp/scheme dialect",
);

/**
 * Arbitrary-precision unit-aware calculator
 */
export const fend = mkPackage(
  nixRaw`pkgs.fend`,
  "Arbitrary-precision unit-aware calculator",
);

/**
 * Combine your favorite messaging services into one application
 */
export const ferdi = mkPackage(
  nixRaw`pkgs.ferdi`,
  "Combine your favorite messaging services into one application",
);

/**
 * All your services in one place built by the community
 */
export const ferdium = mkPackage(
  nixRaw`pkgs.ferdium`,
  "All your services in one place built by the community",
);

/**
 * Fast and multi-source CLI program for managing Minecraft mods and modpacks from Modrinth, CurseForge, and GitHub Releases
 */
export const ferium = mkPackage(
  nixRaw`pkgs.ferium`,
  "Fast and multi-source CLI program for managing Minecraft mods and modpacks from Modrinth, CurseForge, and GitHub Releases",
);

/**
 * Tool to maintain complex firewalls
 */
export const ferm = mkPackage(
  nixRaw`pkgs.ferm`,
  "Tool to maintain complex firewalls",
);

/**
 * Framework for building, deploying, and running fast, secure, and composable cloud microservices with WebAssembly.
 */
export const fermyon_spin = mkPackage(
  nixRaw`pkgs.fermyon-spin`,
  "Framework for building, deploying, and running fast, secure, and composable cloud microservices with WebAssembly.",
);

/**
 * Fast, simple, recursive content discovery tool
 */
export const feroxbuster = mkPackage(
  nixRaw`pkgs.feroxbuster`,
  "Fast, simple, recursive content discovery tool",
);

/**
 * A truly Open Source MongoDB alternative
 */
export const ferretdb = mkPackage(
  nixRaw`pkgs.ferretdb`,
  "A truly Open Source MongoDB alternative",
);

/**
 * A decorative font
 */
export const ferrum = mkPackage(
  nixRaw`pkgs.ferrum`,
  "A decorative font",
);

/**
 * A fetch written in posix shell without any external commands
 */
export const fet_sh = mkPackage(
  nixRaw`pkgs.fet-sh`,
  "A fetch written in posix shell without any external commands",
);

/**
 * System information fetcher written in GNU Guile Scheme
 */
export const fetch_scm = mkPackage(
  nixRaw`pkgs.fetch-scm`,
  "System information fetcher written in GNU Guile Scheme",
);

/**
 * A tool to manage the life cycle and configuration of Podman containers
 */
export const fetchit = mkPackage(
  nixRaw`pkgs.fetchit`,
  "A tool to manage the life cycle and configuration of Podman containers",
);

/**
 * A full-featured remote-mail retrieval and forwarding utility
 */
export const fetchmail = mkPackage(
  nixRaw`pkgs.fetchmail`,
  "A full-featured remote-mail retrieval and forwarding utility",
);

/**
 * A full-featured remote-mail retrieval and forwarding utility
 */
export const fetchmail_7 = mkPackage(
  nixRaw`pkgs.fetchmail_7`,
  "A full-featured remote-mail retrieval and forwarding utility",
);

/**
 * A collection of small shell utilities to fetch system information
 */
export const fetchutils = mkPackage(
  nixRaw`pkgs.fetchutils`,
  "A collection of small shell utilities to fetch system information",
);

/**
 * Native Messaging Host for ff2mpv firefox addon.
 */
export const ff2mpv = mkPackage(
  nixRaw`pkgs.ff2mpv`,
  "Native Messaging Host for ff2mpv firefox addon.",
);

/**
 * FireWire audio drivers
 */
export const ffado = mkPackage(
  nixRaw`pkgs.ffado`,
  "FireWire audio drivers",
);

/**
 * Run commands on rectangular screen regions
 */
export const ffcast = mkPackage(
  nixRaw`pkgs.ffcast`,
  "Run commands on rectangular screen regions",
);

/**
 * Fucking Fast File-Manager
 */
export const fff = mkPackage(
  nixRaw`pkgs.fff`,
  "Fucking Fast File-Manager",
);

/**
 * Fancy Formal Firewall Universal Understander
 */
export const fffuu = mkPackage(
  nixRaw`pkgs.fffuu`,
  "Fancy Formal Firewall Universal Understander",
);

/**
 * Finite Field Linear Algebra Subroutines
 */
export const fflas_ffpack = mkPackage(
  nixRaw`pkgs.fflas-ffpack`,
  "Finite Field Linear Algebra Subroutines",
);

/**
 * FujiFILM Linux Printer Driver
 */
export const fflinuxprint = mkPackage(
  nixRaw`pkgs.fflinuxprint`,
  "FujiFILM Linux Printer Driver",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg = mkPackage(
  nixRaw`pkgs.ffmpeg`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_4 = mkPackage(
  nixRaw`pkgs.ffmpeg_4`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_4_full = mkPackage(
  nixRaw`pkgs.ffmpeg_4-full`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_4_headless = mkPackage(
  nixRaw`pkgs.ffmpeg_4-headless`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_5 = mkPackage(
  nixRaw`pkgs.ffmpeg_5`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_5_full = mkPackage(
  nixRaw`pkgs.ffmpeg_5-full`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_5_headless = mkPackage(
  nixRaw`pkgs.ffmpeg_5-headless`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_6 = mkPackage(
  nixRaw`pkgs.ffmpeg_6`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_6_full = mkPackage(
  nixRaw`pkgs.ffmpeg_6-full`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_6_headless = mkPackage(
  nixRaw`pkgs.ffmpeg_6-headless`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_full = mkPackage(
  nixRaw`pkgs.ffmpeg-full`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video
 */
export const ffmpeg_headless = mkPackage(
  nixRaw`pkgs.ffmpeg-headless`,
  "A complete, cross-platform solution to record, convert and stream audio and video",
);

/**
 * Normalize audio via ffmpeg
 */
export const ffmpeg_normalize = mkPackage(
  nixRaw`pkgs.ffmpeg-normalize`,
  "Normalize audio via ffmpeg",
);

/**
 * A lightweight video thumbnailer
 */
export const ffmpegthumbnailer = mkPackage(
  nixRaw`pkgs.ffmpegthumbnailer`,
  "A lightweight video thumbnailer",
);

/**
 * FFmpeg based source library for easy frame accurate access
 */
export const ffms = mkPackage(
  nixRaw`pkgs.ffms`,
  "FFmpeg based source library for easy frame accurate access",
);

/**
 * Easily and securely share files from the command line. A fully featured Firefox Send client
 */
export const ffsend = mkPackage(
  nixRaw`pkgs.ffsend`,
  "Easily and securely share files from the command line. A fully featured Firefox Send client",
);

/**
 * Fastest Fourier Transform in the West library
 */
export const fftw = mkPackage(
  nixRaw`pkgs.fftw`,
  "Fastest Fourier Transform in the West library",
);

/**
 * Fastest Fourier Transform in the West library
 */
export const fftwFloat = mkPackage(
  nixRaw`pkgs.fftwFloat`,
  "Fastest Fourier Transform in the West library",
);

/**
 * Fastest Fourier Transform in the West library
 */
export const fftwLongDouble = mkPackage(
  nixRaw`pkgs.fftwLongDouble`,
  "Fastest Fourier Transform in the West library",
);

/**
 * Fastest Fourier Transform in the West library
 */
export const fftwMpi = mkPackage(
  nixRaw`pkgs.fftwMpi`,
  "Fastest Fourier Transform in the West library",
);

/**
 * Fastest Fourier Transform in the West library
 */
export const fftwQuad = mkPackage(
  nixRaw`pkgs.fftwQuad`,
  "Fastest Fourier Transform in the West library",
);

/**
 * Fastest Fourier Transform in the West library
 */
export const fftwSinglePrec = mkPackage(
  nixRaw`pkgs.fftwSinglePrec`,
  "Fastest Fourier Transform in the West library",
);

/**
 * Fast web fuzzer written in Go
 */
export const ffuf = mkPackage(
  nixRaw`pkgs.ffuf`,
  "Fast web fuzzer written in Go",
);

/**
 * Static photo gallery generator
 */
export const fgallery = mkPackage(
  nixRaw`pkgs.fgallery`,
  "Static photo gallery generator",
);

/**
 * The official FlakeHub CLI
 */
export const fh = mkPackage(
  nixRaw`pkgs.fh`,
  "The official FlakeHub CLI",
);

/**
 * Free implementation of Heroes of Might and Magic II game engine
 */
export const fheroes2 = mkPackage(
  nixRaw`pkgs.fheroes2`,
  "Free implementation of Heroes of Might and Magic II game engine",
);

/**
 * Go-based tools for modifying UEFI firmware
 */
export const fiano = mkPackage(
  nixRaw`pkgs.fiano`,
  "Go-based tools for modifying UEFI firmware",
);

/**
 * Command line pastebin for sharing terminal output
 */
export const fiche = mkPackage(
  nixRaw`pkgs.fiche`,
  "Command line pastebin for sharing terminal output",
);

/**
 * Decrypt your LUKS partition using a FIDO2 compatible authenticator
 */
export const fido2luks = mkPackage(
  nixRaw`pkgs.fido2luks`,
  "Decrypt your LUKS partition using a FIDO2 compatible authenticator",
);

/**
 * DNS reconnaissance tool for locating non-contiguous IP space
 */
export const fierce = mkPackage(
  nixRaw`pkgs.fierce`,
  "DNS reconnaissance tool for locating non-contiguous IP space",
);

/**
 * Tool to convert Xfig files to other formats
 */
export const fig2dev = mkPackage(
  nixRaw`pkgs.fig2dev`,
  "Tool to convert Xfig files to other formats",
);

/**
 * Program for making large letters out of ordinary text
 */
export const figlet = mkPackage(
  nixRaw`pkgs.figlet`,
  "Program for making large letters out of ordinary text",
);

/**
 * Figma Agent for Linux (a.k.a. Font Helper)
 */
export const figma_agent = mkPackage(
  nixRaw`pkgs.figma-agent`,
  "Figma Agent for Linux (a.k.a. Font Helper)",
);

/**
 * unofficial Electron-based Figma desktop app for Linux
 */
export const figma_linux = mkPackage(
  nixRaw`pkgs.figma-linux`,
  "unofficial Electron-based Figma desktop app for Linux",
);

/**
 * batteries-included distribution of ImageJ2, bundling a lot of plugins which facilitate scientific image analysis
 */
export const fiji = mkPackage(
  nixRaw`pkgs.fiji`,
  "batteries-included distribution of ImageJ2, bundling a lot of plugins which facilitate scientific image analysis",
);

/**
 * A program that shows the type of files
 */
export const file = mkPackage(
  nixRaw`pkgs.file`,
  "A program that shows the type of files",
);

/**
 * Perl extension for renaming multiple files
 */
export const file_rename = mkPackage(
  nixRaw`pkgs.file-rename`,
  "Perl extension for renaming multiple files",
);

/**
 * Lightweight shipper for logfiles
 */
export const filebeat = mkPackage(
  nixRaw`pkgs.filebeat`,
  "Lightweight shipper for logfiles",
);

/**
 * Lightweight shipper for logfiles
 */
export const filebeat7 = mkPackage(
  nixRaw`pkgs.filebeat7`,
  "Lightweight shipper for logfiles",
);

/**
 * File system and storage benchmark that can generate both micro and macro workloads
 */
export const filebench = mkPackage(
  nixRaw`pkgs.filebench`,
  "File system and storage benchmark that can generate both micro and macro workloads",
);

/**
 * The ultimate TV and Movie Renamer
 */
export const filebot = mkPackage(
  nixRaw`pkgs.filebot`,
  "The ultimate TV and Movie Renamer",
);

/**
 * Filebrowser is a web application for managing files and directories
 */
export const filebrowser = mkPackage(
  nixRaw`pkgs.filebrowser`,
  "Filebrowser is a web application for managing files and directories",
);

/**
 * Python port of LLVM's FileCheck, flexible pattern matching file verifier
 */
export const filecheck = mkPackage(
  nixRaw`pkgs.filecheck`,
  "Python port of LLVM's FileCheck, flexible pattern matching file verifier",
);

/**
 * Easy p2p file sending program
 */
export const filegive = mkPackage(
  nixRaw`pkgs.filegive`,
  "Easy p2p file sending program",
);

/**
 * A command-line utility that reports when files have been altered
 */
export const fileschanged = mkPackage(
  nixRaw`pkgs.fileschanged`,
  "A command-line utility that reports when files have been altered",
);

/**
 * A small HTTP Server for quickly sharing files over the network
 */
export const fileshare = mkPackage(
  nixRaw`pkgs.fileshare`,
  "A small HTTP Server for quickly sharing files over the network",
);

/**
 * FileShelter is a 'one-click' file sharing web application
 */
export const fileshelter = mkPackage(
  nixRaw`pkgs.fileshelter`,
  "FileShelter is a 'one-click' file sharing web application",
);

/**
 * A fucking fucking fast file fucker (afffff)
 */
export const filet = mkPackage(
  nixRaw`pkgs.filet`,
  "A fucking fucking fast file fucker (afffff)",
);

/**
 * Graphical FTP, FTPS and SFTP client
 */
export const filezilla = mkPackage(
  nixRaw`pkgs.filezilla`,
  "Graphical FTP, FTPS and SFTP client",
);

/**
 * Lightweight audio filtering library made from webrtc code
 */
export const filter_audio = mkPackage(
  nixRaw`pkgs.filter-audio`,
  "Lightweight audio filtering library made from webrtc code",
);

/**
 * Reverse HTTP proxy to filter requests by different rules.
 */
export const filtron = mkPackage(
  nixRaw`pkgs.filtron`,
  "Reverse HTTP proxy to filter requests by different rules.",
);

/**
 * A lightweight, highly customizable and scriptable image viewer
 */
export const fim = mkPackage(
  nixRaw`pkgs.fim`,
  "A lightweight, highly customizable and scriptable image viewer",
);

/**
 * Utility for training word and subword embeddings
 */
export const finalfrontier = mkPackage(
  nixRaw`pkgs.finalfrontier`,
  "Utility for training word and subword embeddings",
);

/**
 * Utility for converting, quantizing, and querying word embeddings
 */
export const finalfusion_utils = mkPackage(
  nixRaw`pkgs.finalfusion-utils`,
  "Utility for converting, quantizing, and querying word embeddings",
);

export const findXMLCatalogs = mkPackage(
  nixRaw`pkgs.findXMLCatalogs`,
  "",
);

/**
 * Simple XLib program to highlight the cursor position
 */
export const find_cursor = mkPackage(
  nixRaw`pkgs.find-cursor`,
  "Simple XLib program to highlight the cursor position",
);

/**
 * A static analysis tool to find bugs in Java programs automatically
 */
export const findbugs = mkPackage(
  nixRaw`pkgs.findbugs`,
  "A static analysis tool to find bugs in Java programs automatically",
);

/**
 * Highly customizable application finder written in Rust and uses Gtk3
 */
export const findex = mkPackage(
  nixRaw`pkgs.findex`,
  "Highly customizable application finder written in Rust and uses Gtk3",
);

/**
 * Recursively find newest file in a hierarchy and print its timestamp
 */
export const findnewest = mkPackage(
  nixRaw`pkgs.findnewest`,
  "Recursively find newest file in a hierarchy and print its timestamp",
);

/**
 * The fastest and cross-platform subdomain enumerator
 */
export const findomain = mkPackage(
  nixRaw`pkgs.findomain`,
  "The fastest and cross-platform subdomain enumerator",
);

/**
 * Search parent directories for sentinel files
 */
export const findup = mkPackage(
  nixRaw`pkgs.findup`,
  "Search parent directories for sentinel files",
);

/**
 * GNU Find Utilities, the basic directory searching utilities of the GNU operating system
 */
export const findutils = mkPackage(
  nixRaw`pkgs.findutils`,
  "GNU Find Utilities, the basic directory searching utilities of the GNU operating system",
);

/**
 * Standalone utility for service discovery on open ports
 */
export const fingerprintx = mkPackage(
  nixRaw`pkgs.fingerprintx`,
  "Standalone utility for service discovery on open ports",
);

/**
 * Flexible IO Tester - an IO benchmark tool
 */
export const fio = mkPackage(
  nixRaw`pkgs.fio`,
  "Flexible IO Tester - an IO benchmark tool",
);

/**
 * A simple CLI to manage your Foundries Factory
 */
export const fioctl = mkPackage(
  nixRaw`pkgs.fioctl`,
  "A simple CLI to manage your Foundries Factory",
);

/**
 * Sans-serif font for Firefox OS
 */
export const fira = mkPackage(
  nixRaw`pkgs.fira`,
  "Sans-serif font for Firefox OS",
);

/**
 * Monospace font with programming ligatures
 */
export const fira_code = mkPackage(
  nixRaw`pkgs.fira-code`,
  "Monospace font with programming ligatures",
);

/**
 * Iconic font aggregator, collection, & patcher. 3,600+ icons, 50+ patched fonts
 */
export const fira_code_nerdfont = mkPackage(
  nixRaw`pkgs.fira-code-nerdfont`,
  "Iconic font aggregator, collection, & patcher. 3,600+ icons, 50+ patched fonts",
);

/**
 * FiraCode unicode ligature glyphs in private use area
 */
export const fira_code_symbols = mkPackage(
  nixRaw`pkgs.fira-code-symbols`,
  "FiraCode unicode ligature glyphs in private use area",
);

        /**
         * Font with the same glyph set as Fira Sans 4.3 and additionally
supports Arabic, Devenagari, Georgian, Hebrew and Thai

         */
export const fira_go = mkPackage(
  nixRaw`pkgs.fira-go`,
  "Font with the same glyph set as Fira Sans 4.3 and additionally\nsupports Arabic, Devenagari, Georgian, Hebrew and Thai\n",
);

/**
 * Monospace font for Firefox OS
 */
export const fira_mono = mkPackage(
  nixRaw`pkgs.fira-mono`,
  "Monospace font for Firefox OS",
);

/**
 * Multi-band distortion plugin by Wings
 */
export const fire = mkPackage(
  nixRaw`pkgs.fire`,
  "Multi-band distortion plugin by Wings",
);

/**
 * Manage, and deploy your Firebase project from the command line
 */
export const firebase_tools = mkPackage(
  nixRaw`pkgs.firebase-tools`,
  "Manage, and deploy your Firebase project from the command line",
);

/**
 * SQL relational database management system
 */
export const firebird = mkPackage(
  nixRaw`pkgs.firebird`,
  "SQL relational database management system",
);

/**
 * SQL relational database management system
 */
export const firebird_2_5 = mkPackage(
  nixRaw`pkgs.firebird_2_5`,
  "SQL relational database management system",
);

/**
 * SQL relational database management system
 */
export const firebird_3 = mkPackage(
  nixRaw`pkgs.firebird_3`,
  "SQL relational database management system",
);

/**
 * SQL relational database management system
 */
export const firebird_4 = mkPackage(
  nixRaw`pkgs.firebird_4`,
  "SQL relational database management system",
);

/**
 * Third-party multi-platform emulator of the ARM-based TI-Nspire™ calculators
 */
export const firebird_emu = mkPackage(
  nixRaw`pkgs.firebird-emu`,
  "Third-party multi-platform emulator of the ARM-based TI-Nspire™ calculators",
);

/**
 * Secure, fast, minimal micro-container virtualization
 */
export const firecracker = mkPackage(
  nixRaw`pkgs.firecracker`,
  "Secure, fast, minimal micro-container virtualization",
);

/**
 * A command-line tool to run Firecracker microVMs
 */
export const firectl = mkPackage(
  nixRaw`pkgs.firectl`,
  "A command-line tool to run Firecracker microVMs",
);

/**
 * IOTA's New Wallet
 */
export const firefly_desktop = mkPackage(
  nixRaw`pkgs.firefly-desktop`,
  "IOTA's New Wallet",
);

/**
 * A web browser built from Firefox source tree
 */
export const firefox = mkPackage(
  nixRaw`pkgs.firefox`,
  "A web browser built from Firefox source tree",
);

/**
 * A web browser built from Firefox Beta Release source tree
 */
export const firefox_beta = mkPackage(
  nixRaw`pkgs.firefox-beta`,
  "A web browser built from Firefox Beta Release source tree",
);

/**
 * Mozilla Firefox, free web browser (binary package)
 */
export const firefox_beta_bin = mkPackage(
  nixRaw`pkgs.firefox-beta-bin`,
  "Mozilla Firefox, free web browser (binary package)",
);

/**
 * Mozilla Firefox, free web browser (binary package)
 */
export const firefox_beta_bin_unwrapped = mkPackage(
  nixRaw`pkgs.firefox-beta-bin-unwrapped`,
  "Mozilla Firefox, free web browser (binary package)",
);

/**
 * A web browser built from Firefox Beta Release source tree
 */
export const firefox_beta_unwrapped = mkPackage(
  nixRaw`pkgs.firefox-beta-unwrapped`,
  "A web browser built from Firefox Beta Release source tree",
);

/**
 * Mozilla Firefox, free web browser (binary package)
 */
export const firefox_bin = mkPackage(
  nixRaw`pkgs.firefox-bin`,
  "Mozilla Firefox, free web browser (binary package)",
);

/**
 * Mozilla Firefox, free web browser (binary package)
 */
export const firefox_bin_unwrapped = mkPackage(
  nixRaw`pkgs.firefox-bin-unwrapped`,
  "Mozilla Firefox, free web browser (binary package)",
);

/**
 * A tool to extract passwords from profiles of Mozilla Firefox and derivates
 */
export const firefox_decrypt = mkPackage(
  nixRaw`pkgs.firefox_decrypt`,
  "A tool to extract passwords from profiles of Mozilla Firefox and derivates",
);

/**
 * A web browser built from Firefox Developer Edition source tree
 */
export const firefox_devedition = mkPackage(
  nixRaw`pkgs.firefox-devedition`,
  "A web browser built from Firefox Developer Edition source tree",
);

/**
 * Mozilla Firefox, free web browser (binary package)
 */
export const firefox_devedition_bin = mkPackage(
  nixRaw`pkgs.firefox-devedition-bin`,
  "Mozilla Firefox, free web browser (binary package)",
);

/**
 * Mozilla Firefox, free web browser (binary package)
 */
export const firefox_devedition_bin_unwrapped = mkPackage(
  nixRaw`pkgs.firefox-devedition-bin-unwrapped`,
  "Mozilla Firefox, free web browser (binary package)",
);

/**
 * A web browser built from Firefox Developer Edition source tree
 */
export const firefox_devedition_unwrapped = mkPackage(
  nixRaw`pkgs.firefox-devedition-unwrapped`,
  "A web browser built from Firefox Developer Edition source tree",
);

/**
 * A web browser built from Firefox Extended Support Release source tree
 */
export const firefox_esr = mkPackage(
  nixRaw`pkgs.firefox-esr`,
  "A web browser built from Firefox Extended Support Release source tree",
);

/**
 * A web browser built from Firefox Extended Support Release source tree
 */
export const firefox_esr_115 = mkPackage(
  nixRaw`pkgs.firefox-esr-115`,
  "A web browser built from Firefox Extended Support Release source tree",
);

/**
 * A web browser built from Firefox Extended Support Release source tree
 */
export const firefox_esr_115_unwrapped = mkPackage(
  nixRaw`pkgs.firefox-esr-115-unwrapped`,
  "A web browser built from Firefox Extended Support Release source tree",
);

/**
 * A web browser built from Firefox Extended Support Release source tree
 */
export const firefox_esr_unwrapped = mkPackage(
  nixRaw`pkgs.firefox-esr-unwrapped`,
  "A web browser built from Firefox Extended Support Release source tree",
);

/**
 * A web browser built from Firefox source tree
 */
export const firefox_mobile = mkPackage(
  nixRaw`pkgs.firefox-mobile`,
  "A web browser built from Firefox source tree",
);

/**
 * A web browser built from Firefox source tree
 */
export const firefox_unwrapped = mkPackage(
  nixRaw`pkgs.firefox-unwrapped`,
  "A web browser built from Firefox source tree",
);

/**
 * A firewall for humans
 */
export const firehol = mkPackage(
  nixRaw`pkgs.firehol`,
  "A firewall for humans",
);

/**
 * Namespace-based sandboxing tool for Linux
 */
export const firejail = mkPackage(
  nixRaw`pkgs.firejail`,
  "Namespace-based sandboxing tool for Linux",
);

/**
 * Processor Stress Test Utility
 */
export const firestarter = mkPackage(
  nixRaw`pkgs.firestarter`,
  "Processor Stress Test Utility",
);

/**
 * Gateway ACL scanner
 */
export const firewalk = mkPackage(
  nixRaw`pkgs.firewalk`,
  "Gateway ACL scanner",
);

/**
 * Firewall daemon with D-Bus interface
 */
export const firewalld = mkPackage(
  nixRaw`pkgs.firewalld`,
  "Firewall daemon with D-Bus interface",
);

/**
 * Firewall daemon with D-Bus interface
 */
export const firewalld_gui = mkPackage(
  nixRaw`pkgs.firewalld-gui`,
  "Firewall daemon with D-Bus interface",
);

/**
 * Graphical frontend for firmware management
 */
export const firmware_manager = mkPackage(
  nixRaw`pkgs.firmware-manager`,
  "Graphical frontend for firmware management",
);

/**
 * Firmware Updater for Linux
 */
export const firmware_updater = mkPackage(
  nixRaw`pkgs.firmware-updater`,
  "Firmware Updater for Linux",
);

/**
 * Flexible Intermediate Representation for RTL
 */
export const firrtl = mkPackage(
  nixRaw`pkgs.firrtl`,
  "Flexible Intermediate Representation for RTL",
);

/**
 * Smart and user-friendly command line shell
 */
export const fish = mkPackage(
  nixRaw`pkgs.fish`,
  "Smart and user-friendly command line shell",
);

/**
 * A puzzle game
 */
export const fish_fillets_ng = mkPackage(
  nixRaw`pkgs.fish-fillets-ng`,
  "A puzzle game",
);

export const fish_irssi = mkPackage(
  nixRaw`pkgs.fish-irssi`,
  "",
);

/**
 * Distributed Stockfish analysis for lichess.org
 */
export const fishnet = mkPackage(
  nixRaw`pkgs.fishnet`,
  "Distributed Stockfish analysis for lichess.org",
);

/**
 * The cli used by end user to interact Fission
 */
export const fission = mkPackage(
  nixRaw`pkgs.fission`,
  "The cli used by end user to interact Fission",
);

/**
 * Self-hosted outdoor activity tracker :bicyclist
 */
export const fit_trackee = mkPackage(
  nixRaw`pkgs.fit-trackee`,
  "Self-hosted outdoor activity tracker :bicyclist",
);

/**
 * Command-line client for FI-TS Finance Cloud Native services
 */
export const fits_cloudctl = mkPackage(
  nixRaw`pkgs.fits-cloudctl`,
  "Command-line client for FI-TS Finance Cloud Native services",
);

/**
 * Curve fitting and peak fitting software
 */
export const fityk = mkPackage(
  nixRaw`pkgs.fityk`,
  "Curve fitting and peak fitting software",
);

export const fixDarwinDylibNames = mkPackage(
  nixRaw`pkgs.fixDarwinDylibNames`,
  "",
);

/**
 * Pan-unicode version of Fixedsys, a classic DOS font
 */
export const fixedsys_excelsior = mkPackage(
  nixRaw`pkgs.fixedsys-excelsior`,
  "Pan-unicode version of Fixedsys, a classic DOS font",
);

export const fixup_yarn_lock = mkPackage(
  nixRaw`pkgs.fixup_yarn_lock`,
  "",
);

/**
 * C++14 implementation of the TLS-1.3 standard
 */
export const fizz = mkPackage(
  nixRaw`pkgs.fizz`,
  "C++14 implementation of the TLS-1.3 standard",
);

/**
 * Library and tools for encoding and decoding the FLAC lossless audio file format
 */
export const flac = mkPackage(
  nixRaw`pkgs.flac`,
  "Library and tools for encoding and decoding the FLAC lossless audio file format",
);

/**
 * A command-line program for playing FLAC audio files
 */
export const flac123 = mkPackage(
  nixRaw`pkgs.flac123`,
  "A command-line program for playing FLAC audio files",
);

/**
 * Multi process, clustered, FLAC to multi codec audio converter with tagging support
 */
export const flac2all = mkPackage(
  nixRaw`pkgs.flac2all`,
  "Multi process, clustered, FLAC to multi codec audio converter with tagging support",
);

/**
 * A CLI tool to losslessly compress JPEG and PNG images
 */
export const flaca = mkPackage(
  nixRaw`pkgs.flaca`,
  "A CLI tool to losslessly compress JPEG and PNG images",
);

/**
 * Extracts audio tracks from an audio CD image to separate tracks
 */
export const flacon = mkPackage(
  nixRaw`pkgs.flacon`,
  "Extracts audio tracks from an audio CD image to separate tracks",
);

/**
 * Cosmic recursive fractal flames
 */
export const flam3 = mkPackage(
  nixRaw`pkgs.flam3`,
  "Cosmic recursive fractal flames",
);

/**
 * Visualization for profiled code
 */
export const flamegraph = mkPackage(
  nixRaw`pkgs.flamegraph`,
  "Visualization for profiled code",
);

/**
 * Database administration tool for Firebird RDBMS
 */
export const flamerobin = mkPackage(
  nixRaw`pkgs.flamerobin`,
  "Database administration tool for Firebird RDBMS",
);

/**
 * Powerful yet simple to use screenshot software
 */
export const flameshot = mkPackage(
  nixRaw`pkgs.flameshot`,
  "Powerful yet simple to use screenshot software",
);

/**
 * Digital modem program
 */
export const flamp = mkPackage(
  nixRaw`pkgs.flamp`,
  "Digital modem program",
);

/**
 * Fast approximate nearest neighbor searches in high dimensional spaces
 */
export const flann = mkPackage(
  nixRaw`pkgs.flann`,
  "Fast approximate nearest neighbor searches in high dimensional spaces",
);

/**
 * Network fabric for containers, designed for Kubernetes
 */
export const flannel = mkPackage(
  nixRaw`pkgs.flannel`,
  "Network fabric for containers, designed for Kubernetes",
);

/**
 * Fantasy action RPG using the FLARE engine
 */
export const flare = mkPackage(
  nixRaw`pkgs.flare`,
  "Fantasy action RPG using the FLARE engine",
);

/**
 * Automatically extract obfuscated strings from malware
 */
export const flare_floss = mkPackage(
  nixRaw`pkgs.flare-floss`,
  "Automatically extract obfuscated strings from malware",
);

/**
 * An unofficial Signal GTK client
 */
export const flare_signal = mkPackage(
  nixRaw`pkgs.flare-signal`,
  "An unofficial Signal GTK client",
);

/**
 * Testing tool for flash based memory devices
 */
export const flashbench = mkPackage(
  nixRaw`pkgs.flashbench`,
  "Testing tool for flash based memory devices",
);

/**
 * Simple focus animations for tiling window managers
 */
export const flashfocus = mkPackage(
  nixRaw`pkgs.flashfocus`,
  "Simple focus animations for tiling window managers",
);

/**
 * Fast light-weight MQTT broker/server
 */
export const flashmq = mkPackage(
  nixRaw`pkgs.flashmq`,
  "Fast light-weight MQTT broker/server",
);

/**
 * Slicer for the FlashForge 3D printers
 */
export const flashprint = mkPackage(
  nixRaw`pkgs.flashprint`,
  "Slicer for the FlashForge 3D printers",
);

/**
 * Utility for reading, writing, erasing and verifying flash ROM chips
 */
export const flashrom = mkPackage(
  nixRaw`pkgs.flashrom`,
  "Utility for reading, writing, erasing and verifying flash ROM chips",
);

/**
 * Utility for reading, writing, erasing and verifying flash ROM chips.
 */
export const flashrom_stable = mkPackage(
  nixRaw`pkgs.flashrom-stable`,
  "Utility for reading, writing, erasing and verifying flash ROM chips.",
);

/**
 * Assembler and disassembler for Flash (SWF) bytecode
 */
export const flasm = mkPackage(
  nixRaw`pkgs.flasm`,
  "Assembler and disassembler for Flash (SWF) bytecode",
);

/**
 * GNOME Shell theme inspired by material design.
 */
export const flat_remix_gnome = mkPackage(
  nixRaw`pkgs.flat-remix-gnome`,
  "GNOME Shell theme inspired by material design.",
);

/**
 * GTK application theme inspired by material design
 */
export const flat_remix_gtk = mkPackage(
  nixRaw`pkgs.flat-remix-gtk`,
  "GTK application theme inspired by material design",
);

/**
 * Flat remix is a pretty simple icon theme inspired on material design
 */
export const flat_remix_icon_theme = mkPackage(
  nixRaw`pkgs.flat-remix-icon-theme`,
  "Flat remix is a pretty simple icon theme inspired on material design",
);

/**
 * Memory Efficient Serialization Library
 */
export const flatbuffers = mkPackage(
  nixRaw`pkgs.flatbuffers`,
  "Memory Efficient Serialization Library",
);

/**
 * 2-D post processing for PCB fabrication on CNC routers
 */
export const flatcam = mkPackage(
  nixRaw`pkgs.flatcam`,
  "2-D post processing for PCB fabrication on CNC routers",
);

/**
 * FlatBuffers Compiler and Library in C for C 
 */
export const flatcc = mkPackage(
  nixRaw`pkgs.flatcc`,
  "FlatBuffers Compiler and Library in C for C ",
);

/**
 * Linux application sandboxing and distribution framework
 */
export const flatpak = mkPackage(
  nixRaw`pkgs.flatpak`,
  "Linux application sandboxing and distribution framework",
);

/**
 * Tool to build flatpaks from source
 */
export const flatpak_builder = mkPackage(
  nixRaw`pkgs.flatpak-builder`,
  "Tool to build flatpaks from source",
);

/**
 * An easy to use base16 scheme manager/builder that integrates with any workflow
 */
export const flavours = mkPackage(
  nixRaw`pkgs.flavours`,
  "An easy to use base16 scheme manager/builder that integrates with any workflow",
);

/**
 * Tool to examines C/C++ source code for security flaws
 */
export const flawfinder = mkPackage(
  nixRaw`pkgs.flawfinder`,
  "Tool to examines C/C++ source code for security flaws",
);

/**
 * Digital modem program
 */
export const fldigi = mkPackage(
  nixRaw`pkgs.fldigi`,
  "Digital modem program",
);

/**
 * A low level concurrent logic programming language descended from Prolog
 */
export const fleng = mkPackage(
  nixRaw`pkgs.fleng`,
  "A low level concurrent logic programming language descended from Prolog",
);

/**
 * The FLExible Network Tester
 */
export const flent = mkPackage(
  nixRaw`pkgs.flent`,
  "The FLExible Network Tester",
);

/**
 * A fast lexical analyser generator
 */
export const flex = mkPackage(
  nixRaw`pkgs.flex`,
  "A fast lexical analyser generator",
);

/**
 * A fast lexical analyser generator
 */
export const flex_2_5_35 = mkPackage(
  nixRaw`pkgs.flex_2_5_35`,
  "A fast lexical analyser generator",
);

/**
 * FlexRadio remote control (CAT) via hamlib/rigctl protocol
 */
export const flex_ncat = mkPackage(
  nixRaw`pkgs.flex-ncat`,
  "FlexRadio remote control (CAT) via hamlib/rigctl protocol",
);

/**
 * FlexRadio digital audio transport (DAX) connector for PulseAudio
 */
export const flex_ndax = mkPackage(
  nixRaw`pkgs.flex-ndax`,
  "FlexRadio digital audio transport (DAX) connector for PulseAudio",
);

/**
 * C++ tool for generating lexical scanners
 */
export const flexcpp = mkPackage(
  nixRaw`pkgs.flexcpp`,
  "C++ tool for generating lexical scanners",
);

/**
 * Multipurpose automation tool for all of your media
 */
export const flexget = mkPackage(
  nixRaw`pkgs.flexget`,
  "Multipurpose automation tool for all of your media",
);

/**
 * Client for an accouting economic system
 */
export const flexibee = mkPackage(
  nixRaw`pkgs.flexibee`,
  "Client for an accouting economic system",
);

/**
 * Configure FLEXOPTIX Universal Transceivers in seconds
 */
export const flexoptix_app = mkPackage(
  nixRaw`pkgs.flexoptix-app`,
  "Configure FLEXOPTIX Universal Transceivers in seconds",
);

/**
 * 2D point-and-click adventure game set in the 1940s
 */
export const flight_of_the_amazon_queen = mkPackage(
  nixRaw`pkgs.flight-of-the-amazon-queen`,
  "2D point-and-click adventure game set in the 1940s",
);

/**
 * Flight simulator
 */
export const flightgear = mkPackage(
  nixRaw`pkgs.flightgear`,
  "Flight simulator",
);

/**
 * A distributed stream processing framework
 */
export const flink = mkPackage(
  nixRaw`pkgs.flink`,
  "A distributed stream processing framework",
);

/**
 * Fast Library for Number Theory
 */
export const flint = mkPackage(
  nixRaw`pkgs.flint`,
  "Fast Library for Number Theory",
);

/**
 * Create and manage the lifecycle of MicroVMs backed by containerd
 */
export const flintlock = mkPackage(
  nixRaw`pkgs.flintlock`,
  "Create and manage the lifecycle of MicroVMs backed by containerd",
);

/**
 * Highly optimized multi-polynomial quadratic sieve for integer factorization
 */
export const flintqs = mkPackage(
  nixRaw`pkgs.flintqs`,
  "Highly optimized multi-polynomial quadratic sieve for integer factorization",
);

/**
 * A tool for visualizing and communicating the errors in rendered images.
 */
export const flip = mkPackage(
  nixRaw`pkgs.flip`,
  "A tool for visualizing and communicating the errors in rendered images.",
);

/**
 * Adds zero-cost stack overflow protection to your embedded programs
 */
export const flip_link = mkPackage(
  nixRaw`pkgs.flip-link`,
  "Adds zero-cost stack overflow protection to your embedded programs",
);

/**
 * A patcher for IPS and BPS files
 */
export const flips = mkPackage(
  nixRaw`pkgs.flips`,
  "A patcher for IPS and BPS files",
);

/**
 * Use any Remote with your Media Center
 */
export const flirc = mkPackage(
  nixRaw`pkgs.flirc`,
  "Use any Remote with your Media Center",
);

/**
 * A small, fast run-time speech synthesis engine
 */
export const flite = mkPackage(
  nixRaw`pkgs.flite`,
  "A small, fast run-time speech synthesis engine",
);

/**
 * A Livesplit-inspired speedrunning split timer for Linux/macOS terminal
 */
export const flitter = mkPackage(
  nixRaw`pkgs.flitter`,
  "A Livesplit-inspired speedrunning split timer for Linux/macOS terminal",
);

/**
 * The Flix Programming Language
 */
export const flix = mkPackage(
  nixRaw`pkgs.flix`,
  "The Flix Programming Language",
);

/**
 * Digital modem log program
 */
export const fllog = mkPackage(
  nixRaw`pkgs.fllog`,
  "Digital modem log program",
);

/**
 * Digital modem message program
 */
export const flmsg = mkPackage(
  nixRaw`pkgs.flmsg`,
  "Digital modem message program",
);

/**
 * Cross-platform version of flock(1)
 */
export const flock = mkPackage(
  nixRaw`pkgs.flock`,
  "Cross-platform version of flock(1)",
);

/**
 * LD_PRELOAD shim to add file locking to programs that don't do it (I'm looking at you, rsync!)
 */
export const flockit = mkPackage(
  nixRaw`pkgs.flockit`,
  "LD_PRELOAD shim to add file locking to programs that don't do it (I'm looking at you, rsync!)",
);

/**
 * Modern web UI for various torrent clients with a Node.js backend and React frontend
 */
export const flood = mkPackage(
  nixRaw`pkgs.flood`,
  "Modern web UI for various torrent clients with a Node.js backend and React frontend",
);

/**
 * A collaborative terminal. In practice, it's similar to a shared screen or tmux session
 */
export const flootty = mkPackage(
  nixRaw`pkgs.flootty`,
  "A collaborative terminal. In practice, it's similar to a shared screen or tmux session",
);

/**
 * The FloPoCo arithmetic core generator
 */
export const flopoco = mkPackage(
  nixRaw`pkgs.flopoco`,
  "The FloPoCo arithmetic core generator",
);

/**
 * A static type checker for JavaScript
 */
export const flow = mkPackage(
  nixRaw`pkgs.flow`,
  "A static type checker for JavaScript",
);

/**
 * Multitrack Non-Linear Video Editor
 */
export const flowblade = mkPackage(
  nixRaw`pkgs.flowblade`,
  "Multitrack Non-Linear Video Editor",
);

/**
 * A fast, simple and lightweight data collector written in Rust
 */
export const flowgger = mkPackage(
  nixRaw`pkgs.flowgger`,
  "A fast, simple and lightweight data collector written in Rust",
);

/**
 * Get what motivates you done, without losing concentration
 */
export const flowtime = mkPackage(
  nixRaw`pkgs.flowtime`,
  "Get what motivates you done, without losing concentration",
);

/**
 * WYSIWYG PostScript annotator
 */
export const flpsed = mkPackage(
  nixRaw`pkgs.flpsed`,
  "WYSIWYG PostScript annotator",
);

/**
 * Digital modem rig control program
 */
export const flrig = mkPackage(
  nixRaw`pkgs.flrig`,
  "Digital modem rig control program",
);

/**
 * A C++ cross-platform lightweight GUI library
 */
export const fltk = mkPackage(
  nixRaw`pkgs.fltk`,
  "A C++ cross-platform lightweight GUI library",
);

/**
 * A C++ cross-platform lightweight GUI library
 */
export const fltk13 = mkPackage(
  nixRaw`pkgs.fltk13`,
  "A C++ cross-platform lightweight GUI library",
);

/**
 * A C++ cross-platform lightweight GUI library
 */
export const fltk13_minimal = mkPackage(
  nixRaw`pkgs.fltk13-minimal`,
  "A C++ cross-platform lightweight GUI library",
);

/**
 * A C++ cross-platform lightweight GUI library
 */
export const fltk14 = mkPackage(
  nixRaw`pkgs.fltk14`,
  "A C++ cross-platform lightweight GUI library",
);

/**
 * A C++ cross-platform lightweight GUI library
 */
export const fltk14_minimal = mkPackage(
  nixRaw`pkgs.fltk14-minimal`,
  "A C++ cross-platform lightweight GUI library",
);

/**
 * A C++ cross-platform lightweight GUI library
 */
export const fltk_minimal = mkPackage(
  nixRaw`pkgs.fltk-minimal`,
  "A C++ cross-platform lightweight GUI library",
);

/**
 * A simple retro style arcade side-scroller game
 */
export const fltrator = mkPackage(
  nixRaw`pkgs.fltrator`,
  "A simple retro style arcade side-scroller game",
);

/**
 * A TUI text reader for the terminal
 */
export const fltrdr = mkPackage(
  nixRaw`pkgs.fltrdr`,
  "A TUI text reader for the terminal",
);

/**
 * Log forwarder and processor, part of Fluentd ecosystem
 */
export const fluent_bit = mkPackage(
  nixRaw`pkgs.fluent-bit`,
  "Log forwarder and processor, part of Fluentd ecosystem",
);

/**
 * Fluent design gtk theme
 */
export const fluent_gtk_theme = mkPackage(
  nixRaw`pkgs.fluent-gtk-theme`,
  "Fluent design gtk theme",
);

/**
 * Fluent icon theme for linux desktops
 */
export const fluent_icon_theme = mkPackage(
  nixRaw`pkgs.fluent-icon-theme`,
  "Fluent icon theme for linux desktops",
);

/**
 * Modern desktop RSS reader built with Electron, React, and Fluent UI
 */
export const fluent_reader = mkPackage(
  nixRaw`pkgs.fluent-reader`,
  "Modern desktop RSS reader built with Electron, React, and Fluent UI",
);

/**
 * A data collector
 */
export const fluentd = mkPackage(
  nixRaw`pkgs.fluentd`,
  "A data collector",
);

/**
 * Chat with your friends (matrix client)
 */
export const fluffychat = mkPackage(
  nixRaw`pkgs.fluffychat`,
  "Chat with your friends (matrix client)",
);

/**
 * Klipper web interface
 */
export const fluidd = mkPackage(
  nixRaw`pkgs.fluidd`,
  "Klipper web interface",
);

/**
 * Real-time software synthesizer based on the SoundFont 2 specifications
 */
export const fluidsynth = mkPackage(
  nixRaw`pkgs.fluidsynth`,
  "Real-time software synthesizer based on the SoundFont 2 specifications",
);

/**
 * Flutter is Google's SDK for building mobile, web and desktop with Dart
 */
export const flutter = mkPackage(
  nixRaw`pkgs.flutter`,
  "Flutter is Google's SDK for building mobile, web and desktop with Dart",
);

/**
 * Flutter is Google's SDK for building mobile, web and desktop with Dart
 */
export const flutter_unwrapped = mkPackage(
  nixRaw`pkgs.flutter-unwrapped`,
  "Flutter is Google's SDK for building mobile, web and desktop with Dart",
);

/**
 * An interface description language used by DirectFB
 */
export const flux = mkPackage(
  nixRaw`pkgs.flux`,
  "An interface description language used by DirectFB",
);

/**
 * Full-featured, light-resource X window manager
 */
export const fluxbox = mkPackage(
  nixRaw`pkgs.fluxbox`,
  "Full-featured, light-resource X window manager",
);

/**
 * A Gui editor (gtk) to configure applications launching on a fluxbox session
 */
export const fluxboxlauncher = mkPackage(
  nixRaw`pkgs.fluxboxlauncher`,
  "A Gui editor (gtk) to configure applications launching on a fluxbox session",
);

/**
 * Open and extensible continuous delivery solution for Kubernetes
 */
export const fluxcd = mkPackage(
  nixRaw`pkgs.fluxcd`,
  "Open and extensible continuous delivery solution for Kubernetes",
);

/**
 * CLI client for Flux, the GitOps Kubernetes operator
 */
export const fluxctl = mkPackage(
  nixRaw`pkgs.fluxctl`,
  "CLI client for Flux, the GitOps Kubernetes operator",
);

/**
 * Command-line RTMP client
 */
export const flvstreamer = mkPackage(
  nixRaw`pkgs.flvstreamer`,
  "Command-line RTMP client",
);

/**
 * Digital modem file transfer program
 */
export const flwrap = mkPackage(
  nixRaw`pkgs.flwrap`,
  "Digital modem file transfer program",
);

/**
 * Command line interface to Concourse CI
 */
export const fly = mkPackage(
  nixRaw`pkgs.fly`,
  "Command line interface to Concourse CI",
);

/**
 * A multi-platform Sega Dreamcast, Naomi and Atomiswave emulator
 */
export const flycast = mkPackage(
  nixRaw`pkgs.flycast`,
  "A multi-platform Sega Dreamcast, Naomi and Atomiswave emulator",
);

/**
 * Command line tools for fly.io services
 */
export const flyctl = mkPackage(
  nixRaw`pkgs.flyctl`,
  "Command line tools for fly.io services",
);

/**
 * Evolve your Database Schema easily and reliably across all your instances
 */
export const flyway = mkPackage(
  nixRaw`pkgs.flyway`,
  "Evolve your Database Schema easily and reliably across all your instances",
);

/**
 * Library and command line interface for interacting with a Flywheel site
 */
export const flywheel_cli = mkPackage(
  nixRaw`pkgs.flywheel-cli`,
  "Library and command line interface for interacting with a Flywheel site",
);

/**
 * Small, general purpose file manager built with GTK4
 */
export const fm = mkPackage(
  nixRaw`pkgs.fm`,
  "Small, general purpose file manager built with GTK4",
);

/**
 * Find initial calibration offset for SDR devices
 */
export const fm_tune = mkPackage(
  nixRaw`pkgs.fm-tune`,
  "Find initial calibration offset for SDR devices",
);

/**
 * Free Musical Instrument Tuner
 */
export const fmit = mkPackage(
  nixRaw`pkgs.fmit`,
  "Free Musical Instrument Tuner",
);

/**
 * Programming library and toolkit for the creation and playback of interactive audio
 */
export const fmodex = mkPackage(
  nixRaw`pkgs.fmodex`,
  "Programming library and toolkit for the creation and playback of interactive audio",
);

/**
 * a flexible 8 operator FM synthesizer for LV2
 */
export const fmsynth = mkPackage(
  nixRaw`pkgs.fmsynth`,
  "a flexible 8 operator FM synthesizer for LV2",
);

/**
 * Small, safe and fast formatting library
 */
export const fmt = mkPackage(
  nixRaw`pkgs.fmt`,
  "Small, safe and fast formatting library",
);

/**
 * Small, safe and fast formatting library
 */
export const fmt_10 = mkPackage(
  nixRaw`pkgs.fmt_10`,
  "Small, safe and fast formatting library",
);

/**
 * Small, safe and fast formatting library
 */
export const fmt_8 = mkPackage(
  nixRaw`pkgs.fmt_8`,
  "Small, safe and fast formatting library",
);

/**
 * Small, safe and fast formatting library
 */
export const fmt_9 = mkPackage(
  nixRaw`pkgs.fmt_9`,
  "Small, safe and fast formatting library",
);

/**
 * Tools for FM voices for Yamaha YM chips (OPL, OPM and OPN series)
 */
export const fmtoy = mkPackage(
  nixRaw`pkgs.fmtoy`,
  "Tools for FM voices for Yamaha YM chips (OPL, OPM and OPN series)",
);

/**
 * Command-line tool for the fn project
 */
export const fn_cli = mkPackage(
  nixRaw`pkgs.fn-cli`,
  "Command-line tool for the fn project",
);

/**
 * Interactive ncurses browser for Fossil repositories
 */
export const fnc = mkPackage(
  nixRaw`pkgs.fnc`,
  "Interactive ncurses browser for Fossil repositories",
);

/**
 * Formatter for Fennel
 */
export const fnlfmt = mkPackage(
  nixRaw`pkgs.fnlfmt`,
  "Formatter for Fennel",
);

/**
 * Fast and simple Node.js version manager
 */
export const fnm = mkPackage(
  nixRaw`pkgs.fnm`,
  "Fast and simple Node.js version manager",
);

/**
 * File activity monitoring tool
 */
export const fnotifystat = mkPackage(
  nixRaw`pkgs.fnotifystat`,
  "File activity monitoring tool",
);

/**
 * Keyboard driven and lightweight Wayland notification daemon for wlroots-based compositors
 */
export const fnott = mkPackage(
  nixRaw`pkgs.fnott`,
  "Keyboard driven and lightweight Wayland notification daemon for wlroots-based compositors",
);

/**
 * PDF and PostScript font samples generator
 */
export const fntsample = mkPackage(
  nixRaw`pkgs.fntsample`,
  "PDF and PostScript font samples generator",
);

/**
 * Focus window, workspace or monitor by direction or cycle through them
 */
export const focus = mkPackage(
  nixRaw`pkgs.focus`,
  "Focus window, workspace or monitor by direction or cycle through them",
);

/**
 * Fast and easy focus stacking
 */
export const focus_stack = mkPackage(
  nixRaw`pkgs.focus-stack`,
  "Fast and easy focus stacking",
);

/**
 * Simple, distraction-free writing environment
 */
export const focuswriter = mkPackage(
  nixRaw`pkgs.focuswriter`,
  "Simple, distraction-free writing environment",
);

/**
 * A simple and modern GTK eBook reader
 */
export const foliate = mkPackage(
  nixRaw`pkgs.foliate`,
  "A simple and modern GTK eBook reader",
);

/**
 * A library that aggregates people from multiple sources to create metacontacts
 */
export const folks = mkPackage(
  nixRaw`pkgs.folks`,
  "A library that aggregates people from multiple sources to create metacontacts",
);

/**
 * An open-source C++ library developed and used at Facebook
 */
export const folly = mkPackage(
  nixRaw`pkgs.folly`,
  "An open-source C++ library developed and used at Facebook",
);

/**
 * A multi-purpose finite-state toolkit designed for applications ranging from natural language processing to research in automata theory
 */
export const foma = mkPackage(
  nixRaw`pkgs.foma`,
  "A multi-purpose finite-state toolkit designed for applications ranging from natural language processing to research in automata theory",
);

/**
 * An LV2 port of the MCP, VCO, FIL, and WAH plugins by Fons Adriaensen
 */
export const fomp = mkPackage(
  nixRaw`pkgs.fomp`,
  "An LV2 port of the MCP, VCO, FIL, and WAH plugins by Fons Adriaensen",
);

/**
 * Find the most beautiful wallpapers for your desktop
 */
export const fondo = mkPackage(
  nixRaw`pkgs.fondo`,
  "Find the most beautiful wallpapers for your desktop",
);

export const fondu = mkPackage(
  nixRaw`pkgs.fondu`,
  "",
);

/**
 * Font Awesome - OTF font
 */
export const font_awesome = mkPackage(
  nixRaw`pkgs.font-awesome`,
  "Font Awesome - OTF font",
);

/**
 * Font Awesome - OTF font
 */
export const font_awesome_4 = mkPackage(
  nixRaw`pkgs.font-awesome_4`,
  "Font Awesome - OTF font",
);

/**
 * Font Awesome - OTF font
 */
export const font_awesome_5 = mkPackage(
  nixRaw`pkgs.font-awesome_5`,
  "Font Awesome - OTF font",
);

/**
 * Font Awesome - OTF font
 */
export const font_awesome_6 = mkPackage(
  nixRaw`pkgs.font-awesome_6`,
  "Font Awesome - OTF font",
);

/**
 * Prints a Linux system's font configuration
 */
export const font_config_info = mkPackage(
  nixRaw`pkgs.font-config-info`,
  "Prints a Linux system's font configuration",
);

/**
 * Simple font management for GTK desktop environments
 */
export const font_manager = mkPackage(
  nixRaw`pkgs.font-manager`,
  "Simple font management for GTK desktop environments",
);

/**
 * A library for font customization and configuration
 */
export const fontconfig = mkPackage(
  nixRaw`pkgs.fontconfig`,
  "A library for font customization and configuration",
);

/**
 * GTK application for browsing and installing fonts from Google's font archive
 */
export const fontfinder = mkPackage(
  nixRaw`pkgs.fontfinder`,
  "GTK application for browsing and installing fonts from Google's font archive",
);

/**
 * Find fonts which can show a specified character and preview them in browser
 */
export const fontfor = mkPackage(
  nixRaw`pkgs.fontfor`,
  "Find fonts which can show a specified character and preview them in browser",
);

/**
 * A font editor
 */
export const fontforge = mkPackage(
  nixRaw`pkgs.fontforge`,
  "A font editor",
);

/**
 * A font editor
 */
export const fontforge_fonttools = mkPackage(
  nixRaw`pkgs.fontforge-fonttools`,
  "A font editor",
);

/**
 * A font editor
 */
export const fontforge_gtk = mkPackage(
  nixRaw`pkgs.fontforge-gtk`,
  "A font editor",
);

/**
 * Fontmatrix is a free/libre font explorer for Linux, Windows and Mac
 */
export const fontmatrix = mkPackage(
  nixRaw`pkgs.fontmatrix`,
  "Fontmatrix is a free/libre font explorer for Linux, Windows and Mac",
);

/**
 * Highly customizable and minimal font previewer written in bash
 */
export const fontpreview = mkPackage(
  nixRaw`pkgs.fontpreview`,
  "Highly customizable and minimal font previewer written in bash",
);

/**
 * ZjStream printer drivers
 */
export const foo2zjs = mkPackage(
  nixRaw`pkgs.foo2zjs`,
  "ZjStream printer drivers",
);

/**
 * OpenPrinting printer support database (free content)
 */
export const foomatic_db = mkPackage(
  nixRaw`pkgs.foomatic-db`,
  "OpenPrinting printer support database (free content)",
);

/**
 * OpenPrinting printer support database engine
 */
export const foomatic_db_engine = mkPackage(
  nixRaw`pkgs.foomatic-db-engine`,
  "OpenPrinting printer support database engine",
);

/**
 * OpenPrinting printer support database (unfree content)
 */
export const foomatic_db_nonfree = mkPackage(
  nixRaw`pkgs.foomatic-db-nonfree`,
  "OpenPrinting printer support database (unfree content)",
);

/**
 * OpenPrinting ppd files
 */
export const foomatic_db_ppds = mkPackage(
  nixRaw`pkgs.foomatic-db-ppds`,
  "OpenPrinting ppd files",
);

/**
 * OpenPrinting ppd files
 */
export const foomatic_db_ppds_withNonfreeDb = mkPackage(
  nixRaw`pkgs.foomatic-db-ppds-withNonfreeDb`,
  "OpenPrinting ppd files",
);

/**
 * Foomatic printing filters
 */
export const foomatic_filters = mkPackage(
  nixRaw`pkgs.foomatic-filters`,
  "Foomatic printing filters",
);

/**
 * A fast, lightweight and minimalistic Wayland terminal emulator
 */
export const foot = mkPackage(
  nixRaw`pkgs.foot`,
  "A fast, lightweight and minimalistic Wayland terminal emulator",
);

/**
 * Command line utlities for programming PCsensor and Scythe foot switches.
 */
export const footswitch = mkPackage(
  nixRaw`pkgs.footswitch`,
  "Command line utlities for programming PCsensor and Scythe foot switches.",
);

/**
 * XML formatter driven by XSL Formatting Objects (XSL-FO)
 */
export const fop = mkPackage(
  nixRaw`pkgs.fop`,
  "XML formatter driven by XSL Formatting Objects (XSL-FO)",
);

/**
 * Process manager for applications with multiple components
 */
export const foreman = mkPackage(
  nixRaw`pkgs.foreman`,
  "Process manager for applications with multiple components",
);

/**
 * Recover files based on their contents
 */
export const foremost = mkPackage(
  nixRaw`pkgs.foremost`,
  "Recover files based on their contents",
);

/**
 * An OpenGL interop library that can be used with ArrayFire or any other application using CUDA or OpenCL compute backend
 */
export const forge = mkPackage(
  nixRaw`pkgs.forge`,
  "An OpenGL interop library that can be used with ArrayFire or any other application using CUDA or OpenCL compute backend",
);

/**
 * Magic: the Gathering card game with rules enforcement
 */
export const forge_mtg = mkPackage(
  nixRaw`pkgs.forge-mtg`,
  "Magic: the Gathering card game with rules enforcement",
);

/**
 * A self-hosted lightweight software forge
 */
export const forgejo = mkPackage(
  nixRaw`pkgs.forgejo`,
  "A self-hosted lightweight software forge",
);

/**
 * A runner for Forgejo based on act
 */
export const forgejo_actions_runner = mkPackage(
  nixRaw`pkgs.forgejo-actions-runner`,
  "A runner for Forgejo based on act",
);

/**
 * Process fork/exec/exit monitoring tool
 */
export const forkstat = mkPackage(
  nixRaw`pkgs.forkstat`,
  "Process fork/exec/exit monitoring tool",
);

/**
 * Tool to detach from controlling TTY and attach to another
 */
export const forktty = mkPackage(
  nixRaw`pkgs.forktty`,
  "Tool to detach from controlling TTY and attach to another",
);

/**
 * The FORM project for symbolic manipulation of very big expressions
 */
export const form = mkPackage(
  nixRaw`pkgs.form`,
  "The FORM project for symbolic manipulation of very big expressions",
);

/**
 * A simple formatter designed for elementary OS
 */
export const formatter = mkPackage(
  nixRaw`pkgs.formatter`,
  "A simple formatter designed for elementary OS",
);

/**
 * reStructuredText editor and live previewer
 */
export const formiko = mkPackage(
  nixRaw`pkgs.formiko`,
  "reStructuredText editor and live previewer",
);

/**
 * Formal Specifications for Verification and Synthesis
 */
export const formula = mkPackage(
  nixRaw`pkgs.formula`,
  "Formal Specifications for Verification and Synthesis",
);

/**
 * Visualize long-term trends in collections of Git repositories
 */
export const fornalder = mkPackage(
  nixRaw`pkgs.fornalder`,
  "Visualize long-term trends in collections of Git repositories",
);

/**
 * Standalone header-based fortify-source implementation
 */
export const fortify_headers = mkPackage(
  nixRaw`pkgs.fortify-headers`,
  "Standalone header-based fortify-source implementation",
);

/**
 * Fortran Language Server 
 */
export const fortls = mkPackage(
  nixRaw`pkgs.fortls`,
  "Fortran Language Server ",
);

/**
 * Fortran Package Manager (fpm)
 */
export const fortran_fpm = mkPackage(
  nixRaw`pkgs.fortran-fpm`,
  "Fortran Package Manager (fpm)",
);

/**
 * FORTRAN Language Server for the Language Server Protocol
 */
export const fortran_language_server = mkPackage(
  nixRaw`pkgs.fortran-language-server`,
  "FORTRAN Language Server for the Language Server Protocol",
);

/**
 * A program that displays a pseudorandom message from a database of quotations
 */
export const fortune = mkPackage(
  nixRaw`pkgs.fortune`,
  "A program that displays a pseudorandom message from a database of quotations",
);

/**
 * A kinder, curated fortune, written in rust
 */
export const fortune_kind = mkPackage(
  nixRaw`pkgs.fortune-kind`,
  "A kinder, curated fortune, written in rust",
);

/**
 * Simple, high-reliability, distributed software configuration management
 */
export const fossil = mkPackage(
  nixRaw`pkgs.fossil`,
  "Simple, high-reliability, distributed software configuration management",
);

/**
 * Open source, distributed, transactional key-value store
 */
export const foundationdb = mkPackage(
  nixRaw`pkgs.foundationdb`,
  "Open source, distributed, transactional key-value store",
);

/**
 * Open source, distributed, transactional key-value store
 */
export const foundationdb71 = mkPackage(
  nixRaw`pkgs.foundationdb71`,
  "Open source, distributed, transactional key-value store",
);

/**
 * C++ based class library for building Graphical User Interfaces
 */
export const fox = mkPackage(
  nixRaw`pkgs.fox`,
  "C++ based class library for building Graphical User Interfaces",
);

/**
 * A C++ based class library for building Graphical User Interfaces
 */
export const fox_1_6 = mkPackage(
  nixRaw`pkgs.fox_1_6`,
  "A C++ based class library for building Graphical User Interfaces",
);

/**
 * Live coding music with SuperCollider
 */
export const foxdot = mkPackage(
  nixRaw`pkgs.foxdot`,
  "Live coding music with SuperCollider",
);

/**
 * General purpose model viewer
 */
export const foxotron = mkPackage(
  nixRaw`pkgs.foxotron`,
  "General purpose model viewer",
);

/**
 * GPS/GIS application optimized for small screens
 */
export const foxtrotgps = mkPackage(
  nixRaw`pkgs.foxtrotgps`,
  "GPS/GIS application optimized for small screens",
);

/**
 * C++ Library for Evaluating Mathematical Functions
 */
export const fparser = mkPackage(
  nixRaw`pkgs.fparser`,
  "C++ Library for Evaluating Mathematical Functions",
);

/**
 * Split file trees into bags (called "partitions")
 */
export const fpart = mkPackage(
  nixRaw`pkgs.fpart`,
  "Split file trees into bags (called \"partitions\")",
);

/**
 * Filename pattern matching library functions for DOS, Windows, and Unix
 */
export const fpattern = mkPackage(
  nixRaw`pkgs.fpattern`,
  "Filename pattern matching library functions for DOS, Windows, and Unix",
);

/**
 * Free Pascal Compiler from a source distribution
 */
export const fpc = mkPackage(
  nixRaw`pkgs.fpc`,
  "Free Pascal Compiler from a source distribution",
);

/**
 * An editor that allows the interactive creation of footprints electronic components
 */
export const fped = mkPackage(
  nixRaw`pkgs.fped`,
  "An editor that allows the interactive creation of footprints electronic components",
);

/**
 * Send ICMP echo probes to network hosts
 */
export const fping = mkPackage(
  nixRaw`pkgs.fping`,
  "Send ICMP echo probes to network hosts",
);

/**
 * Lattice algorithms using floating-point arithmetic
 */
export const fplll = mkPackage(
  nixRaw`pkgs.fplll`,
  "Lattice algorithms using floating-point arithmetic",
);

/**
 * Lattice algorithms using floating-point arithmetic
 */
export const fplll_20160331 = mkPackage(
  nixRaw`pkgs.fplll_20160331`,
  "Lattice algorithms using floating-point arithmetic",
);

/**
 * Tool to build packages for multiple platforms with ease
 */
export const fpm = mkPackage(
  nixRaw`pkgs.fpm`,
  "Tool to build packages for multiple platforms with ease",
);

/**
 * GTK2 port from Figaro's Password Manager originally developed by John Conneely, with some new enhancements
 */
export const fpm2 = mkPackage(
  nixRaw`pkgs.fpm2`,
  "GTK2 port from Figaro's Password Manager originally developed by John Conneely, with some new enhancements",
);

/**
 * CLI program that accepts piped input and presents files for selection
 */
export const fpp = mkPackage(
  nixRaw`pkgs.fpp`,
  "CLI program that accepts piped input and presents files for selection",
);

/**
 * An auto-formatter for modern Fortran code that imposes strict whitespace formatting, written in Python.
 */
export const fprettify = mkPackage(
  nixRaw`pkgs.fprettify`,
  "An auto-formatter for modern Fortran code that imposes strict whitespace formatting, written in Python.",
);

/**
 * D-Bus daemon that offers libfprint functionality over the D-Bus interprocess communication bus
 */
export const fprintd = mkPackage(
  nixRaw`pkgs.fprintd`,
  "D-Bus daemon that offers libfprint functionality over the D-Bus interprocess communication bus",
);

/**
 * fprintd built with libfprint-tod to support Touch OEM Drivers
 */
export const fprintd_tod = mkPackage(
  nixRaw`pkgs.fprintd-tod`,
  "fprintd built with libfprint-tod to support Touch OEM Drivers",
);

/**
 * jq for binary formats
 */
export const fq = mkPackage(
  nixRaw`pkgs.fq`,
  "jq for binary formats",
);

/**
 * Matrix group messaging app
 */
export const fractal = mkPackage(
  nixRaw`pkgs.fractal`,
  "Matrix group messaging app",
);

/**
 * Matrix group messaging app (development version)
 */
export const fractal_next = mkPackage(
  nixRaw`pkgs.fractal-next`,
  "Matrix group messaging app (development version)",
);

/**
 * Easy to use BitTorrent client for the GNOME desktop environment
 */
export const fragments = mkPackage(
  nixRaw`pkgs.fragments`,
  "Easy to use BitTorrent client for the GNOME desktop environment",
);

/**
 * An extensible and collaborative platform dedicated to source-code analysis of C software
 */
export const framac = mkPackage(
  nixRaw`pkgs.framac`,
  "An extensible and collaborative platform dedicated to source-code analysis of C software",
);

/**
 * Handles the buildup and synchronization of a set of simultaneous touches
 */
export const frame = mkPackage(
  nixRaw`pkgs.frame`,
  "Handles the buildup and synchronization of a set of simultaneous touches",
);

/**
 * Native web3 interface that lets you sign data, securely manage accounts and transparently interact with dapps via web3 protocols like Ethereum and IPFS
 */
export const framesh = mkPackage(
  nixRaw`pkgs.framesh`,
  "Native web3 interface that lets you sign data, securely manage accounts and transparently interact with dapps via web3 protocols like Ethereum and IPFS",
);

/**
 * Convert lines of text into a tree structure
 */
export const frangipanni = mkPackage(
  nixRaw`pkgs.frangipanni`,
  "Convert lines of text into a tree structure",
);

/**
 * A free messaging app that combines chat & messaging services into one application
 */
export const franz = mkPackage(
  nixRaw`pkgs.franz`,
  "A free messaging app that combines chat & messaging services into one application",
);

/**
 * A display, “Old Style” soft-serif typeface inspired by early 20th century typefaces
 */
export const fraunces = mkPackage(
  nixRaw`pkgs.fraunces`,
  "A display, “Old Style” soft-serif typeface inspired by early 20th century typefaces",
);

/**
 * A small programming language for writing short programs processing textual data
 */
export const frawk = mkPackage(
  nixRaw`pkgs.frawk`,
  "A small programming language for writing short programs processing textual data",
);

/**
 * A CLI tool for tracking your most-used directories and files
 */
export const fre = mkPackage(
  nixRaw`pkgs.fre`,
  "A CLI tool for tracking your most-used directories and files",
);

/**
 * The fre:ac audio converter project
 */
export const freac = mkPackage(
  nixRaw`pkgs.freac`,
  "The fre:ac audio converter project",
);

/**
 * Maintain a database sorted by frecency (frequency + recency)
 */
export const frece = mkPackage(
  nixRaw`pkgs.frece`,
  "Maintain a database sorted by frecency (frequency + recency)",
);

/**
 * A software clone of HP-42S Calculator
 */
export const free42 = mkPackage(
  nixRaw`pkgs.free42`,
  "A software clone of HP-42S Calculator",
);

/**
 * Free implementation of OpenAL's ALUT standard
 */
export const freealut = mkPackage(
  nixRaw`pkgs.freealut`,
  "Free implementation of OpenAL's ALUT standard",
);

/**
 * Bayesian haplotype-based polymorphism discovery and genotyping
 */
export const freebayes = mkPackage(
  nixRaw`pkgs.freebayes`,
  "Bayesian haplotype-based polymorphism discovery and genotyping",
);

/**
 * IPv4 and IPv6 address rate limiting evasion tool
 */
export const freebind = mkPackage(
  nixRaw`pkgs.freebind`,
  "IPv4 and IPv6 address rate limiting evasion tool",
);

/**
 * General purpose Open Source 3D CAD/MCAD/CAx/CAE/PLM modeler
 */
export const freecad = mkPackage(
  nixRaw`pkgs.freecad`,
  "General purpose Open Source 3D CAD/MCAD/CAx/CAE/PLM modeler",
);

/**
 * A FreeCell automatic solver
 */
export const freecell_solver = mkPackage(
  nixRaw`pkgs.freecell-solver`,
  "A FreeCell automatic solver",
);

/**
 * Multiplayer (or single player), turn-based strategy game
 */
export const freeciv = mkPackage(
  nixRaw`pkgs.freeciv`,
  "Multiplayer (or single player), turn-based strategy game",
);

/**
 * Multiplayer (or single player), turn-based strategy game
 */
export const freeciv_gtk = mkPackage(
  nixRaw`pkgs.freeciv_gtk`,
  "Multiplayer (or single player), turn-based strategy game",
);

/**
 * Multiplayer (or single player), turn-based strategy game
 */
export const freeciv_qt = mkPackage(
  nixRaw`pkgs.freeciv_qt`,
  "Multiplayer (or single player), turn-based strategy game",
);

/**
 * Multiplayer (or single player), turn-based strategy game
 */
export const freeciv_sdl2 = mkPackage(
  nixRaw`pkgs.freeciv_sdl2`,
  "Multiplayer (or single player), turn-based strategy game",
);

/**
 * A free, portable and enhanced version of the Dink Smallwood game engine
 */
export const freedink = mkPackage(
  nixRaw`pkgs.freedink`,
  "A free, portable and enhanced version of the Dink Smallwood game engine",
);

/**
 * A clone of the classic game 'Paradroid' on Commodore 64
 */
export const freedroid = mkPackage(
  nixRaw`pkgs.freedroid`,
  "A clone of the classic game 'Paradroid' on Commodore 64",
);

/**
 * Isometric 3D RPG similar to game Diablo
 */
export const freedroidrpg = mkPackage(
  nixRaw`pkgs.freedroidrpg`,
  "Isometric 3D RPG similar to game Diablo",
);

/**
 * Digital voice for HF radio
 */
export const freedv = mkPackage(
  nixRaw`pkgs.freedv`,
  "Digital voice for HF radio",
);

/**
 * Free-fall protection for spinning HP/Dell laptop hard drives
 */
export const freefall = mkPackage(
  nixRaw`pkgs.freefall`,
  "Free-fall protection for spinning HP/Dell laptop hard drives",
);

/**
 * Open Source File Synchronization & Backup Software
 */
export const freefilesync = mkPackage(
  nixRaw`pkgs.freefilesync`,
  "Open Source File Synchronization & Backup Software",
);

/**
 * GNU Free UCS Outline Fonts
 */
export const freefont_ttf = mkPackage(
  nixRaw`pkgs.freefont_ttf`,
  "GNU Free UCS Outline Fonts",
);

/**
 * Create and manage windows containing OpenGL contexts
 */
export const freeglut = mkPackage(
  nixRaw`pkgs.freeglut`,
  "Create and manage windows containing OpenGL contexts",
);

/**
 * Open Source library for accessing popular graphics image file formats
 */
export const freeimage = mkPackage(
  nixRaw`pkgs.freeimage`,
  "Open Source library for accessing popular graphics image file formats",
);

/**
 * Identity, Policy and Audit system
 */
export const freeipa = mkPackage(
  nixRaw`pkgs.freeipa`,
  "Identity, Policy and Audit system",
);

/**
 * Implementation of the Intelligent Platform Management Interface
 */
export const freeipmi = mkPackage(
  nixRaw`pkgs.freeipmi`,
  "Implementation of the Intelligent Platform Management Interface",
);

/**
 * Mind-mapping software
 */
export const freemind = mkPackage(
  nixRaw`pkgs.freemind`,
  "Mind-mapping software",
);

/**
 * Drivers and libraries for the Xbox Kinect device on Windows, Linux, and macOS
 */
export const freenect = mkPackage(
  nixRaw`pkgs.freenect`,
  "Drivers and libraries for the Xbox Kinect device on Windows, Linux, and macOS",
);

/**
 * Decentralised and censorship-resistant network
 */
export const freenet = mkPackage(
  nixRaw`pkgs.freenet`,
  "Decentralised and censorship-resistant network",
);

/**
 * Clone of the original Duke Nukum 1 Jump'n Run game
 */
export const freenukum = mkPackage(
  nixRaw`pkgs.freenukum`,
  "Clone of the original Duke Nukum 1 Jump'n Run game",
);

/**
 * An office suite with a word processor, spreadsheet and presentation program
 */
export const freeoffice = mkPackage(
  nixRaw`pkgs.freeoffice`,
  "An office suite with a word processor, spreadsheet and presentation program",
);

/**
 * A free, open source, turn-based space empire and galactic conquest (4X) computer game
 */
export const freeorion = mkPackage(
  nixRaw`pkgs.freeorion`,
  "A free, open source, turn-based space empire and galactic conquest (4X) computer game",
);

/**
 * Instrument patches, for MIDI synthesizers
 */
export const freepats = mkPackage(
  nixRaw`pkgs.freepats`,
  "Instrument patches, for MIDI synthesizers",
);

/**
 * Mind-mapping software
 */
export const freeplane = mkPackage(
  nixRaw`pkgs.freeplane`,
  "Mind-mapping software",
);

/**
 * Open source panorama viewer using GL
 */
export const freepv = mkPackage(
  nixRaw`pkgs.freepv`,
  "Open source panorama viewer using GL",
);

/**
 * A modular, high performance free RADIUS suite
 */
export const freeradius = mkPackage(
  nixRaw`pkgs.freeradius`,
  "A modular, high performance free RADIUS suite",
);

/**
 * A Remote Desktop Protocol Client
 */
export const freerdp = mkPackage(
  nixRaw`pkgs.freerdp`,
  "A Remote Desktop Protocol Client",
);

/**
 * A Remote Desktop Protocol Client
 */
export const freerdpUnstable = mkPackage(
  nixRaw`pkgs.freerdpUnstable`,
  "A Remote Desktop Protocol Client",
);

/**
 * A console minesweeper-style game written in C for Unix-like systems
 */
export const freesweep = mkPackage(
  nixRaw`pkgs.freesweep`,
  "A console minesweeper-style game written in C for Unix-like systems",
);

/**
 * Cross-Platform Scalable FREE Multi-Protocol Soft Switch
 */
export const freeswitch = mkPackage(
  nixRaw`pkgs.freeswitch`,
  "Cross-Platform Scalable FREE Multi-Protocol Soft Switch",
);

/**
 * Console XMPP client
 */
export const freetalk = mkPackage(
  nixRaw`pkgs.freetalk`,
  "Console XMPP client",
);

/**
 * Libraries to natively talk to Microsoft SQL Server and Sybase databases
 */
export const freetds = mkPackage(
  nixRaw`pkgs.freetds`,
  "Libraries to natively talk to Microsoft SQL Server and Sybase databases",
);

/**
 * Text to speech system based on Festival written in Java
 */
export const freetts = mkPackage(
  nixRaw`pkgs.freetts`,
  "Text to speech system based on Festival written in Java",
);

/**
 * An Open Source YouTube app for privacy
 */
export const freetube = mkPackage(
  nixRaw`pkgs.freetube`,
  "An Open Source YouTube app for privacy",
);

/**
 * A font rendering engine
 */
export const freetype = mkPackage(
  nixRaw`pkgs.freetype`,
  "A font rendering engine",
);

/**
 * A live looping instrument with JACK and MIDI support
 */
export const freewheeling = mkPackage(
  nixRaw`pkgs.freewheeling`,
  "A live looping instrument with JACK and MIDI support",
);

/**
 * A library to extract valid data from within an Excel (.xls) spreadsheet
 */
export const freexl = mkPackage(
  nixRaw`pkgs.freexl`,
  "A library to extract valid data from within an Excel (.xls) spreadsheet",
);

/**
 * Payload toolkit for bypassing EDRs
 */
export const freeze = mkPackage(
  nixRaw`pkgs.freeze`,
  "Payload toolkit for bypassing EDRs",
);

/**
 * Modern replacement for free
 */
export const frei = mkPackage(
  nixRaw`pkgs.frei`,
  "Modern replacement for free",
);

/**
 * Minimalist, cross-platform, shared video plugins
 */
export const frei0r = mkPackage(
  nixRaw`pkgs.frei0r`,
  "Minimalist, cross-platform, shared video plugins",
);

/**
 * Realtime audio frequency spectral manipulation
 */
export const freqtweak = mkPackage(
  nixRaw`pkgs.freqtweak`,
  "Realtime audio frequency spectral manipulation",
);

/**
 * A LilyPond sheet music text editor
 */
export const frescobaldi = mkPackage(
  nixRaw`pkgs.frescobaldi`,
  "A LilyPond sheet music text editor",
);

/**
 * A fresh take on neofetch
 */
export const freshfetch = mkPackage(
  nixRaw`pkgs.freshfetch`,
  "A fresh take on neofetch",
);

/**
 * FreshRSS is a free, self-hostable RSS aggregator
 */
export const freshrss = mkPackage(
  nixRaw`pkgs.freshrss`,
  "FreshRSS is a free, self-hostable RSS aggregator",
);

/**
 * GNU implementation of the Unicode Bidirectional Algorithm (bidi)
 */
export const fribidi = mkPackage(
  nixRaw`pkgs.fribidi`,
  "GNU implementation of the Unicode Bidirectional Algorithm (bidi)",
);

/**
 * An advanced computer algebra system
 */
export const fricas = mkPackage(
  nixRaw`pkgs.fricas`,
  "An advanced computer algebra system",
);

/**
 * Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers (client tools)
 */
export const frida_tools = mkPackage(
  nixRaw`pkgs.frida-tools`,
  "Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers (client tools)",
);

/**
 * NVR with realtime local object detection for IP cameras
 */
export const frigate = mkPackage(
  nixRaw`pkgs.frigate`,
  "NVR with realtime local object detection for IP cameras",
);

/**
 * A practical calculating tool and programming language
 */
export const frink = mkPackage(
  nixRaw`pkgs.frink`,
  "A practical calculating tool and programming language",
);

/**
 * A real-time audio analyzer
 */
export const friture = mkPackage(
  nixRaw`pkgs.friture`,
  "A real-time audio analyzer",
);

/**
 * An open source prototyping tool for Arduino-based projects
 */
export const fritzing = mkPackage(
  nixRaw`pkgs.fritzing`,
  "An open source prototyping tool for Arduino-based projects",
);

/**
 * Tool to switch the online time of profiles in the AVM Fritz!Box
 */
export const fritzprofiles = mkPackage(
  nixRaw`pkgs.fritzprofiles`,
  "Tool to switch the online time of profiles in the AVM Fritz!Box",
);

/**
 * A Tagger-Lemmatizer-Morphological-Analyzer-Dependency-Parser for Dutch
 */
export const frog = mkPackage(
  nixRaw`pkgs.frog`,
  "A Tagger-Lemmatizer-Morphological-Analyzer-Dependency-Parser for Dutch",
);

/**
 * Action-adventure game, starring a certain quixotic frog
 */
export const frogatto = mkPackage(
  nixRaw`pkgs.frogatto`,
  "Action-adventure game, starring a certain quixotic frog",
);

/**
 * A Markdown browser for your terminal
 */
export const frogmouth = mkPackage(
  nixRaw`pkgs.frogmouth`,
  "A Markdown browser for your terminal",
);

/**
 * BitTorrent Client and Cloud File Downloader
 */
export const frostwire_bin = mkPackage(
  nixRaw`pkgs.frostwire-bin`,
  "BitTorrent Client and Cloud File Downloader",
);

/**
 * A z-machine interpreter for Infocom games and other interactive fiction
 */
export const frotz = mkPackage(
  nixRaw`pkgs.frotz`,
  "A z-machine interpreter for Infocom games and other interactive fiction",
);

/**
 * Minimal JSON parser for C, targeted for embedded systems
 */
export const frozen = mkPackage(
  nixRaw`pkgs.frozen`,
  "Minimal JSON parser for C, targeted for embedded systems",
);

/**
 * Puzzle with Bubbles
 */
export const frozen_bubble = mkPackage(
  nixRaw`pkgs.frozen-bubble`,
  "Puzzle with Bubbles",
);

/**
 * Fast reverse proxy
 */
export const frp = mkPackage(
  nixRaw`pkgs.frp`,
  "Fast reverse proxy",
);

/**
 * FRR BGP/OSPF/ISIS/RIP/RIPNG routing daemon suite
 */
export const frr = mkPackage(
  nixRaw`pkgs.frr`,
  "FRR BGP/OSPF/ISIS/RIP/RIPNG routing daemon suite",
);

/**
 * Thrift improved
 */
export const frugal = mkPackage(
  nixRaw`pkgs.frugal`,
  "Thrift improved",
);

/**
 * Header-only library for using Keras (TensorFlow) models in C++
 */
export const frugally_deep = mkPackage(
  nixRaw`pkgs.frugally-deep`,
  "Header-only library for using Keras (TensorFlow) models in C++",
);

/**
 * File system archiver for linux
 */
export const fsarchiver = mkPackage(
  nixRaw`pkgs.fsarchiver`,
  "File system archiver for linux",
);

/**
 * filesystem access tracer
 */
export const fsatrace = mkPackage(
  nixRaw`pkgs.fsatrace`,
  "filesystem access tracer",
);

/**
 * The FsAutoComplete project (FSAC) provides a backend service for rich editing or intellisense features for editors.
 */
export const fsautocomplete = mkPackage(
  nixRaw`pkgs.fsautocomplete`,
  "The FsAutoComplete project (FSAC) provides a backend service for rich editing or intellisense features for editors.",
);

/**
 * An intranet comprehensive scanning tool
 */
export const fscan = mkPackage(
  nixRaw`pkgs.fscan`,
  "An intranet comprehensive scanning tool",
);

/**
 * A high-level tool for the management of Linux filesystem encryption
 */
export const fscrypt_experimental = mkPackage(
  nixRaw`pkgs.fscrypt-experimental`,
  "A high-level tool for the management of Linux filesystem encryption",
);

/**
 * Small C tool for Linux filesystem encryption
 */
export const fscryptctl = mkPackage(
  nixRaw`pkgs.fscryptctl`,
  "Small C tool for Linux filesystem encryption",
);

/**
 * A fast file search utility for Unix-like systems based on GTK+3
 */
export const fsearch = mkPackage(
  nixRaw`pkgs.fsearch`,
  "A fast file search utility for Unix-like systems based on GTK+3",
);

/**
 * Find files with SQL-like queries
 */
export const fselect = mkPackage(
  nixRaw`pkgs.fselect`,
  "Find files with SQL-like queries",
);

/**
 * Cellular automata engine tuned towards the likes of Falling Sand
 */
export const fsg = mkPackage(
  nixRaw`pkgs.fsg`,
  "Cellular automata engine tuned towards the likes of Falling Sand",
);

/**
 * A functional CLI language
 */
export const fsharp = mkPackage(
  nixRaw`pkgs.fsharp`,
  "A functional CLI language",
);

/**
 * Synchronous write workload file system benchmark
 */
export const fsmark = mkPackage(
  nixRaw`pkgs.fsmark`,
  "Synchronous write workload file system benchmark",
);

/**
 * FileSystem Monitor utility
 */
export const fsmon = mkPackage(
  nixRaw`pkgs.fsmon`,
  "FileSystem Monitor utility",
);

/**
 * A cross platform app for quick and easy still image camera matching
 */
export const fspy = mkPackage(
  nixRaw`pkgs.fspy`,
  "A cross platform app for quick and easy still image camera matching",
);

/**
 * Search through your filesystem with SQL-esque queries
 */
export const fsql = mkPackage(
  nixRaw`pkgs.fsql`,
  "Search through your filesystem with SQL-esque queries",
);

/**
 * A flow state reader in the terminal
 */
export const fsrx = mkPackage(
  nixRaw`pkgs.fsrx`,
  "A flow state reader in the terminal",
);

/**
 * Represent large sets and maps compactly with finite state transducers
 */
export const fst = mkPackage(
  nixRaw`pkgs.fst`,
  "Represent large sets and maps compactly with finite state transducers",
);

/**
 * ML-like functional programming language aimed at program verification
 */
export const fstar = mkPackage(
  nixRaw`pkgs.fstar`,
  "ML-like functional programming language aimed at program verification",
);

/**
 * The fastest STL file viewer
 */
export const fstl = mkPackage(
  nixRaw`pkgs.fstl`,
  "The fastest STL file viewer",
);

/**
 * Make fuzzy comparisons of strings and byte arrays
 */
export const fstrcmp = mkPackage(
  nixRaw`pkgs.fstrcmp`,
  "Make fuzzy comparisons of strings and byte arrays",
);

/**
 * Frame Streams implementation in C
 */
export const fstrm = mkPackage(
  nixRaw`pkgs.fstrm`,
  "Frame Streams implementation in C",
);

/**
 * An accurate, customizable Amiga Emulator
 */
export const fsuae = mkPackage(
  nixRaw`pkgs.fsuae`,
  "An accurate, customizable Amiga Emulator",
);

/**
 * Graphical front-end for the FS-UAE emulator
 */
export const fsuae_launcher = mkPackage(
  nixRaw`pkgs.fsuae-launcher`,
  "Graphical front-end for the FS-UAE emulator",
);

/**
 * File system visualizer in cyberspace
 */
export const fsv = mkPackage(
  nixRaw`pkgs.fsv`,
  "File system visualizer in cyberspace",
);

/**
 * A set of userspace utilities for fs-verity
 */
export const fsverity_utils = mkPackage(
  nixRaw`pkgs.fsverity-utils`,
  "A set of userspace utilities for fs-verity",
);

/**
 * A cross-platform file change monitor with multiple backends
 */
export const fswatch = mkPackage(
  nixRaw`pkgs.fswatch`,
  "A cross-platform file change monitor with multiple backends",
);

/**
 * Neat and simple webcam app
 */
export const fswebcam = mkPackage(
  nixRaw`pkgs.fswebcam`,
  "Neat and simple webcam app",
);

/**
 * A highly accurate clone of the classic Fasttracker II software for MS-DOS
 */
export const ft2_clone = mkPackage(
  nixRaw`pkgs.ft2-clone`,
  "A highly accurate clone of the classic Fasttracker II software for MS-DOS",
);

/**
 * A free text editor for developers
 */
export const fte = mkPackage(
  nixRaw`pkgs.fte`,
  "A free text editor for developers",
);

/**
 * User friendly QuakeC compiler
 */
export const fteqcc = mkPackage(
  nixRaw`pkgs.fteqcc`,
  "User friendly QuakeC compiler",
);

/**
 * A hybrid and versatile game engine
 */
export const fteqw = mkPackage(
  nixRaw`pkgs.fteqw`,
  "A hybrid and versatile game engine",
);

/**
 * Dedicated server for FTEQW
 */
export const fteqw_dedicated = mkPackage(
  nixRaw`pkgs.fteqw-dedicated`,
  "Dedicated server for FTEQW",
);

/**
 * Font rendering library for OpenGL applications
 */
export const ftgl = mkPackage(
  nixRaw`pkgs.ftgl`,
  "Font rendering library for OpenGL applications",
);

/**
 * FreeType's enhanced, backwards-compatible Jam clone
 */
export const ftjam = mkPackage(
  nixRaw`pkgs.ftjam`,
  "FreeType's enhanced, backwards-compatible Jam clone",
);

/**
 * Show progress of open files and file systems
 */
export const ftop = mkPackage(
  nixRaw`pkgs.ftop`,
  "Show progress of open files and file systems",
);

/**
 * Functional Terminal User Interface library for C++
 */
export const ftxui = mkPackage(
  nixRaw`pkgs.ftxui`,
  "Functional Terminal User Interface library for C++",
);

/**
 * Modern, performance focused unix commands
 */
export const fuc = mkPackage(
  nixRaw`pkgs.fuc`,
  "Modern, performance focused unix commands",
);

/**
 * JTAG programmer for the ULX3S and ULX2S open hardware FPGA development boards
 */
export const fujprog = mkPackage(
  nixRaw`pkgs.fujprog`,
  "JTAG programmer for the ULX3S and ULX2S open hardware FPGA development boards",
);

/**
 * A Root-CA for code signing certs - issuing certificates based on an OIDC email address
 */
export const fulcio = mkPackage(
  nixRaw`pkgs.fulcio`,
  "A Root-CA for code signing certs - issuing certificates based on an OIDC email address",
);

/**
 * Fast & nimble SPV server for Bitcoin Cash & Bitcoin BTC
 */
export const fulcrum = mkPackage(
  nixRaw`pkgs.fulcrum`,
  "Fast & nimble SPV server for Bitcoin Cash & Bitcoin BTC",
);

/**
 * SyncML client sdk by Funambol project
 */
export const funambol = mkPackage(
  nixRaw`pkgs.funambol`,
  "SyncML client sdk by Funambol project",
);

/**
 * The Knative client library and CLI for creating, building, and deploying Knative Functions
 */
export const func = mkPackage(
  nixRaw`pkgs.func`,
  "The Knative client library and CLI for creating, building, and deploying Knative Functions",
);

/**
 * A CLI tool which allows you to run Wasm Functions intended for the Shopify Functions infrastructure
 */
export const function_runner = mkPackage(
  nixRaw`pkgs.function-runner`,
  "A CLI tool which allows you to run Wasm Functions intended for the Shopify Functions infrastructure",
);

/**
 * Functional Programming Library for C++
 */
export const functionalplus = mkPackage(
  nixRaw`pkgs.functionalplus`,
  "Functional Programming Library for C++",
);

/**
 * Server for FunctionTrace, a graphical Python profiler
 */
export const functiontrace_server = mkPackage(
  nixRaw`pkgs.functiontrace-server`,
  "Server for FunctionTrace, a graphical Python profiler",
);

/**
 * Language agnostic documentation generator
 */
export const fundoc = mkPackage(
  nixRaw`pkgs.fundoc`,
  "Language agnostic documentation generator",
);

/**
 * A simple, reliable literate-programming macro preprocessor
 */
export const funnelweb = mkPackage(
  nixRaw`pkgs.funnelweb`,
  "A simple, reliable literate-programming macro preprocessor",
);

/**
 * A lightweight watcher
 */
export const funzzy = mkPackage(
  nixRaw`pkgs.funzzy`,
  "A lightweight watcher",
);

/**
 * Multi-system chiptune tracker compatible with DefleMask modules
 */
export const furnace = mkPackage(
  nixRaw`pkgs.furnace`,
  "Multi-system chiptune tracker compatible with DefleMask modules",
);

/**
 * Track your time without being tracked
 */
export const furtherance = mkPackage(
  nixRaw`pkgs.furtherance`,
  "Track your time without being tracked",
);

/**
 * Library that allows filesystems to be implemented in user space
 */
export const fuse = mkPackage(
  nixRaw`pkgs.fuse`,
  "Library that allows filesystems to be implemented in user space",
);

/**
 * Library that allows filesystems to be implemented in user space
 */
export const fuse3 = mkPackage(
  nixRaw`pkgs.fuse3`,
  "Library that allows filesystems to be implemented in user space",
);

/**
 * A FUSE-based filesystem that uses the p7zip library
 */
export const fuse_7z_ng = mkPackage(
  nixRaw`pkgs.fuse-7z-ng`,
  "A FUSE-based filesystem that uses the p7zip library",
);

/**
 * Serve an archive or a compressed file as a read-only FUSE file system
 */
export const fuse_archive = mkPackage(
  nixRaw`pkgs.fuse-archive`,
  "Serve an archive or a compressed file as a read-only FUSE file system",
);

/**
 * Library that allows filesystems to be implemented in user space
 */
export const fuse_common = mkPackage(
  nixRaw`pkgs.fuse-common`,
  "Library that allows filesystems to be implemented in user space",
);

/**
 * ZX Spectrum emulator
 */
export const fuse_emulator = mkPackage(
  nixRaw`pkgs.fuse-emulator`,
  "ZX Spectrum emulator",
);

/**
 * FUSE implementation for overlayfs
 */
export const fuse_overlayfs = mkPackage(
  nixRaw`pkgs.fuse-overlayfs`,
  "FUSE implementation for overlayfs",
);

/**
 * A tool to send .bin files to a Nintendo Switch in RCM mode
 */
export const fusee_interfacee_tk = mkPackage(
  nixRaw`pkgs.fusee-interfacee-tk`,
  "A tool to send .bin files to a Nintendo Switch in RCM mode",
);

/**
 * Work-in-progress launcher for one of the Tegra X1 bootROM exploits
 */
export const fusee_launcher = mkPackage(
  nixRaw`pkgs.fusee-launcher`,
  "Work-in-progress launcher for one of the Tegra X1 bootROM exploits",
);

/**
 * A minimalist re-implementation of the Fusée Gelée exploit
 */
export const fusee_nano = mkPackage(
  nixRaw`pkgs.fusee-nano`,
  "A minimalist re-implementation of the Fusée Gelée exploit",
);

/**
 * FUSE module to mount ISO filesystem images
 */
export const fuseiso = mkPackage(
  nixRaw`pkgs.fuseiso`,
  "FUSE module to mount ISO filesystem images",
);

/**
 * A package manager and build tools for HDL code
 */
export const fusesoc = mkPackage(
  nixRaw`pkgs.fusesoc`,
  "A package manager and build tools for HDL code",
);

/**
 * FusionInventory unified Agent for UNIX, Linux, Windows and MacOSX
 */
export const fusionInventory = mkPackage(
  nixRaw`pkgs.fusionInventory`,
  "FusionInventory unified Agent for UNIX, Linux, Windows and MacOSX",
);

/**
 * Multitouch gestures with libinput driver on X11, Linux
 */
export const fusuma = mkPackage(
  nixRaw`pkgs.fusuma`,
  "Multitouch gestures with libinput driver on X11, Linux",
);

export const futuresql = mkPackage(
  nixRaw`pkgs.futuresql`,
  "",
);

/**
 * Wayland-native application launcher, similar to rofi’s drun mode
 */
export const fuzzel = mkPackage(
  nixRaw`pkgs.fuzzel`,
  "Wayland-native application launcher, similar to rofi’s drun mode",
);

/**
 * A fuzzy logic control library in C++
 */
export const fuzzylite = mkPackage(
  nixRaw`pkgs.fuzzylite`,
  "A fuzzy logic control library in C++",
);

/**
 * A stereo variant of the reverberator by Jon Dattorro, for lv2
 */
export const fverb = mkPackage(
  nixRaw`pkgs.fverb`,
  "A stereo variant of the reverberator by Jon Dattorro, for lv2",
);

/**
 * A multiple large virtual desktop window manager
 */
export const fvwm = mkPackage(
  nixRaw`pkgs.fvwm`,
  "A multiple large virtual desktop window manager",
);

/**
 * A multiple large virtual desktop window manager
 */
export const fvwm2 = mkPackage(
  nixRaw`pkgs.fvwm2`,
  "A multiple large virtual desktop window manager",
);

/**
 * A multiple large virtual desktop window manager - Version 3
 */
export const fvwm3 = mkPackage(
  nixRaw`pkgs.fvwm3`,
  "A multiple large virtual desktop window manager - Version 3",
);

/**
 * A workspace productivity booster
 */
export const fw = mkPackage(
  nixRaw`pkgs.fw`,
  "A workspace productivity booster",
);

/**
 * EC-Tool adjusted for usage with framework embedded controller
 */
export const fw_ectool = mkPackage(
  nixRaw`pkgs.fw-ectool`,
  "EC-Tool adjusted for usage with framework embedded controller",
);

/**
 * Tool to analyze filesystem images
 */
export const fwanalyzer = mkPackage(
  nixRaw`pkgs.fwanalyzer`,
  "Tool to analyze filesystem images",
);

/**
 * GUI Firewall Management Application
 */
export const fwbuilder = mkPackage(
  nixRaw`pkgs.fwbuilder`,
  "GUI Firewall Management Application",
);

/**
 * Single Packet Authorization (and Port Knocking) server/client
 */
export const fwknop = mkPackage(
  nixRaw`pkgs.fwknop`,
  "Single Packet Authorization (and Port Knocking) server/client",
);

/**
 * Firmware Test Suite
 */
export const fwts = mkPackage(
  nixRaw`pkgs.fwts`,
  "Firmware Test Suite",
);

/**
 * Configurable embedded Linux firmware update creator and runner
 */
export const fwup = mkPackage(
  nixRaw`pkgs.fwup`,
  "Configurable embedded Linux firmware update creator and runner",
);

export const fwupd = mkPackage(
  nixRaw`pkgs.fwupd`,
  "",
);

export const fwupd_efi = mkPackage(
  nixRaw`pkgs.fwupd-efi`,
  "",
);

/**
 * Terminal JSON viewer
 */
export const fx = mkPackage(
  nixRaw`pkgs.fx`,
  "Terminal JSON viewer",
);

/**
 * Implementation of the Chrome Sender API (Chromecast) within Firefox
 */
export const fx_cast_bridge = mkPackage(
  nixRaw`pkgs.fx-cast-bridge`,
  "Implementation of the Chrome Sender API (Chromecast) within Firefox",
);

/**
 * Fuji Xerox Linux Printer Driver
 */
export const fxlinuxprint = mkPackage(
  nixRaw`pkgs.fxlinuxprint`,
  "Fuji Xerox Linux Printer Driver",
);

/**
 * Optional configuration tool for fxlinuxprint
 */
export const fxlinuxprintutil = mkPackage(
  nixRaw`pkgs.fxlinuxprintutil`,
  "Optional configuration tool for fxlinuxprint",
);

/**
 * Tool to upload firmware to into an21, fx, fx2, fx2lp and fx3 ez-usb devices
 */
export const fxload = mkPackage(
  nixRaw`pkgs.fxload`,
  "Tool to upload firmware to into an21, fx, fx2, fx2lp and fx3 ez-usb devices",
);

/**
 * Python powered Fortran preprocessor
 */
export const fypp = mkPackage(
  nixRaw`pkgs.fypp`,
  "Python powered Fortran preprocessor",
);

/**
 * A command-line fuzzy finder written in Go
 */
export const fzf = mkPackage(
  nixRaw`pkgs.fzf`,
  "A command-line fuzzy finder written in Go",
);

/**
 * Bash and zsh key bindings for Git objects, powered by fzf
 */
export const fzf_git_sh = mkPackage(
  nixRaw`pkgs.fzf-git-sh`,
  "Bash and zsh key bindings for Git objects, powered by fzf",
);

/**
 * Fuzzy finder for Makefile
 */
export const fzf_make = mkPackage(
  nixRaw`pkgs.fzf-make`,
  "Fuzzy finder for Makefile",
);

/**
 * Completion script adding fzf over all know bash completion functions
 */
export const fzf_obc = mkPackage(
  nixRaw`pkgs.fzf-obc`,
  "Completion script adding fzf over all know bash completion functions",
);

/**
 * wrap fzf to use in oh-my-zsh
 */
export const fzf_zsh = mkPackage(
  nixRaw`pkgs.fzf-zsh`,
  "wrap fzf to use in oh-my-zsh",
);

/**
 * A better fuzzy finder
 */
export const fzy = mkPackage(
  nixRaw`pkgs.fzy`,
  "A better fuzzy finder",
);

/**
 * A daemon that makes it possible to use the Logitech keyboard G-Buttons and draw on various Logitech LCDs
 */
export const g15daemon = mkPackage(
  nixRaw`pkgs.g15daemon`,
  "A daemon that makes it possible to use the Logitech keyboard G-Buttons and draw on various Logitech LCDs",
);

/**
 * Logitech G203 Prodigy / G203 LightSync Mouse LED control for Linux
 */
export const g203_led = mkPackage(
  nixRaw`pkgs.g203-led`,
  "Logitech G203 Prodigy / G203 LightSync Mouse LED control for Linux",
);

/**
 * A General Framework for Graph Optimization
 */
export const g2o = mkPackage(
  nixRaw`pkgs.g2o`,
  "A General Framework for Graph Optimization",
);

/**
 * A beautiful, fast, fluent, light weight music player written in GTK4
 */
export const g4music = mkPackage(
  nixRaw`pkgs.g4music`,
  "A beautiful, fast, fluent, light weight music player written in GTK4",
);

/**
 * Linux LED controller for some Logitech G Keyboards
 */
export const g810_led = mkPackage(
  nixRaw`pkgs.g810-led`,
  "Linux LED controller for some Logitech G Keyboards",
);

/**
 * An application to configure Logitech wireless G933/G533 headsets
 */
export const g933_utils = mkPackage(
  nixRaw`pkgs.g933-utils`,
  "An application to configure Logitech wireless G933/G533 headsets",
);

/**
 * A simple Gtk/Qt front-end to tesseract-ocr
 */
export const gImageReader = mkPackage(
  nixRaw`pkgs.gImageReader`,
  "A simple Gtk/Qt front-end to tesseract-ocr",
);

/**
 * Simple and fast download manager
 */
export const gabutdm = mkPackage(
  nixRaw`pkgs.gabutdm`,
  "Simple and fast download manager",
);

/**
 * Jabber client written in PyGTK
 */
export const gajim = mkPackage(
  nixRaw`pkgs.gajim`,
  "Jabber client written in PyGTK",
);

/**
 * GPU Accelerated Library for Analysing Radio Interferometer Observations
 */
export const galario = mkPackage(
  nixRaw`pkgs.galario`,
  "GPU Accelerated Library for Analysing Radio Interferometer Observations",
);

/**
 * Font designed to support Biblical Polytonic Greek
 */
export const galatia_sil = mkPackage(
  nixRaw`pkgs.galatia-sil`,
  "Font designed to support Biblical Polytonic Greek",
);

/**
 * Rescue lifeboats lost in interstellar space
 */
export const galaxis = mkPackage(
  nixRaw`pkgs.galaxis`,
  "Rescue lifeboats lost in interstellar space",
);

/**
 * Unofficial Galaxy Buds Manager for Windows and Linux
 */
export const galaxy_buds_client = mkPackage(
  nixRaw`pkgs.galaxy-buds-client`,
  "Unofficial Galaxy Buds Manager for Windows and Linux",
);

/**
 * A GTK 2/3 algebraic and RPN calculator
 */
export const galculator = mkPackage(
  nixRaw`pkgs.galculator`,
  "A GTK 2/3 algebraic and RPN calculator",
);

/**
 * Automated layout testing for websites
 */
export const galen = mkPackage(
  nixRaw`pkgs.galen`,
  "Automated layout testing for websites",
);

/**
 * Videoconferencing server that is easy to deploy, written in Go
 */
export const galene = mkPackage(
  nixRaw`pkgs.galene`,
  "Videoconferencing server that is easy to deploy, written in Go",
);

/**
 * Tool to fetch URLs from HTML attributes
 */
export const galer = mkPackage(
  nixRaw`pkgs.galer`,
  "Tool to fetch URLs from HTML attributes",
);

/**
 * Command-line program to download image-galleries and -collections from several image hosting sites
 */
export const gallery_dl = mkPackage(
  nixRaw`pkgs.gallery-dl`,
  "Command-line program to download image-galleries and -collections from several image hosting sites",
);

/**
 * Extendable Pentesting Framework for the Automotive Domain
 */
export const gallia = mkPackage(
  nixRaw`pkgs.gallia`,
  "Extendable Pentesting Framework for the Automotive Domain",
);

/**
 * Command line management for Google Workspace
 */
export const gam = mkPackage(
  nixRaw`pkgs.gam`,
  "Command line management for Google Workspace",
);

/**
 * Tools for adjustment of geodetic networks
 */
export const gama = mkPackage(
  nixRaw`pkgs.gama`,
  "Tools for adjustment of geodetic networks",
);

/**
 * Optimizing Scheme to C compiler
 */
export const gambit = mkPackage(
  nixRaw`pkgs.gambit`,
  "Optimizing Scheme to C compiler",
);

/**
 * Play chess in your terminal
 */
export const gambit_chess = mkPackage(
  nixRaw`pkgs.gambit-chess`,
  "Play chess in your terminal",
);

/**
 * Optimizing Scheme to C compiler
 */
export const gambit_unstable = mkPackage(
  nixRaw`pkgs.gambit-unstable`,
  "Optimizing Scheme to C compiler",
);

/**
 * Udev rules to make supported controllers available with user-grade permissions
 */
export const game_devices_udev_rules = mkPackage(
  nixRaw`pkgs.game-devices-udev-rules`,
  "Udev rules to make supported controllers available with user-grade permissions",
);

/**
 * A collection of video game music file emulators
 */
export const game_music_emu = mkPackage(
  nixRaw`pkgs.game-music-emu`,
  "A collection of video game music file emulators",
);

/**
 * Minimal CLI game launcher for linux
 */
export const game_rs = mkPackage(
  nixRaw`pkgs.game-rs`,
  "Minimal CLI game launcher for linux",
);

/**
 * Tools for gamecube/wii projects
 */
export const gamecube_tools = mkPackage(
  nixRaw`pkgs.gamecube-tools`,
  "Tools for gamecube/wii projects",
);

/**
 * Unified library for all your games
 */
export const gamehub = mkPackage(
  nixRaw`pkgs.gamehub`,
  "Unified library for all your games",
);

/**
 * Optimise Linux system performance on demand
 */
export const gamemode = mkPackage(
  nixRaw`pkgs.gamemode`,
  "Optimise Linux system performance on demand",
);

/**
 * GameNetworkingSockets is a basic transport layer for games
 */
export const gamenetworkingsockets = mkPackage(
  nixRaw`pkgs.gamenetworkingsockets`,
  "GameNetworkingSockets is a basic transport layer for games",
);

/**
 * A simple GUI tool to create/modify gamepad mappings for games that use SDL2 Game Controller API
 */
export const gamepad_tool = mkPackage(
  nixRaw`pkgs.gamepad-tool`,
  "A simple GUI tool to create/modify gamepad mappings for games that use SDL2 Game Controller API",
);

/**
 * SteamOS session compositing window manager
 */
export const gamescope = mkPackage(
  nixRaw`pkgs.gamescope`,
  "SteamOS session compositing window manager",
);

/**
 * A file and directory monitoring system
 */
export const gamin = mkPackage(
  nixRaw`pkgs.gamin`,
  "A file and directory monitoring system",
);

/**
 * A software introspection tool for Qt applications developed by KDAB
 */
export const gammaray = mkPackage(
  nixRaw`pkgs.gammaray`,
  "A software introspection tool for Qt applications developed by KDAB",
);

/**
 * Screen color temperature manager
 */
export const gammastep = mkPackage(
  nixRaw`pkgs.gammastep`,
  "Screen color temperature manager",
);

/**
 * Command line utility and library to control mobile phones
 */
export const gammu = mkPackage(
  nixRaw`pkgs.gammu`,
  "Command line utility and library to control mobile phones",
);

/**
 * Command-line interface to the public Gandi.net API
 */
export const gandi_cli = mkPackage(
  nixRaw`pkgs.gandi-cli`,
  "Command-line interface to the public Gandi.net API",
);

/**
 * A Persian (Farsi) Font - فونت (قلم) فارسی گندم
 */
export const gandom_fonts = mkPackage(
  nixRaw`pkgs.gandom-fonts`,
  "A Persian (Farsi) Font - فونت (قلم) فارسی گندم",
);

/**
 * Project scheduling and management
 */
export const ganttproject_bin = mkPackage(
  nixRaw`pkgs.ganttproject-bin`,
  "Project scheduling and management",
);

/**
 * An interactive Gtk canvas widget for graph-based interfaces
 */
export const ganv = mkPackage(
  nixRaw`pkgs.ganv`,
  "An interactive Gtk canvas widget for graph-based interfaces",
);

/**
 * Computational discrete algebra system
 */
export const gap = mkPackage(
  nixRaw`pkgs.gap`,
  "Computational discrete algebra system",
);

/**
 * Computational discrete algebra system
 */
export const gap_full = mkPackage(
  nixRaw`pkgs.gap-full`,
  "Computational discrete algebra system",
);

/**
 * Computational discrete algebra system
 */
export const gap_minimal = mkPackage(
  nixRaw`pkgs.gap-minimal`,
  "Computational discrete algebra system",
);

/**
 * Simple modeling tool written in Python
 */
export const gaphor = mkPackage(
  nixRaw`pkgs.gaphor`,
  "Simple modeling tool written in Python",
);

/**
 * Verifying and formally proving properties on numerical programs dealing with floating-point or fixed-point arithmetic
 */
export const gappa = mkPackage(
  nixRaw`pkgs.gappa`,
  "Verifying and formally proving properties on numerical programs dealing with floating-point or fixed-point arithmetic",
);

/**
 * S3-compatible object store for small self-hosted geo-distributed deployments
 */
export const garage = mkPackage(
  nixRaw`pkgs.garage`,
  "S3-compatible object store for small self-hosted geo-distributed deployments",
);

/**
 * S3-compatible object store for small self-hosted geo-distributed deployments
 */
export const garage_0_8 = mkPackage(
  nixRaw`pkgs.garage_0_8`,
  "S3-compatible object store for small self-hosted geo-distributed deployments",
);

/**
 * S3-compatible object store for small self-hosted geo-distributed deployments
 */
export const garage_0_8_4 = mkPackage(
  nixRaw`pkgs.garage_0_8_4`,
  "S3-compatible object store for small self-hosted geo-distributed deployments",
);

/**
 * S3-compatible object store for small self-hosted geo-distributed deployments
 */
export const garage_0_9 = mkPackage(
  nixRaw`pkgs.garage_0_9`,
  "S3-compatible object store for small self-hosted geo-distributed deployments",
);

/**
 * S3-compatible object store for small self-hosted geo-distributed deployments
 */
export const garage_0_9_0 = mkPackage(
  nixRaw`pkgs.garage_0_9_0`,
  "S3-compatible object store for small self-hosted geo-distributed deployments",
);

/**
 * Garamond Libre font family
 */
export const garamond_libre = mkPackage(
  nixRaw`pkgs.garamond-libre`,
  "Garamond Libre font family",
);

/**
 * Obfuscate Go code by wrapping the Go toolchain
 */
export const garble = mkPackage(
  nixRaw`pkgs.garble`,
  "Obfuscate Go code by wrapping the Go toolchain",
);

/**
 * Old-school vertical shoot-em-up / bullet hell
 */
export const garden_of_coloured_lights = mkPackage(
  nixRaw`pkgs.garden-of-coloured-lights`,
  "Old-school vertical shoot-em-up / bullet hell",
);

/**
 * Interactive fiction interpreter GUI
 */
export const gargoyle = mkPackage(
  nixRaw`pkgs.gargoyle`,
  "Interactive fiction interpreter GUI",
);

export const garmin_plugin = mkPackage(
  nixRaw`pkgs.garmin-plugin`,
  "",
);

/**
 * Provides the ability to communicate with the Garmin Forerunner 305 via the USB interface
 */
export const garmintools = mkPackage(
  nixRaw`pkgs.garmintools`,
  "Provides the ability to communicate with the Garmin Forerunner 305 via the USB interface",
);

/**
 * POSIX-compatible shell written in Guile Scheme
 */
export const gash = mkPackage(
  nixRaw`pkgs.gash`,
  "POSIX-compatible shell written in Guile Scheme",
);

/**
 * Core POSIX utilities written in Guile Scheme
 */
export const gash_utils = mkPackage(
  nixRaw`pkgs.gash-utils`,
  "Core POSIX utilities written in Guile Scheme",
);

/**
 * The Coral Gasket Driver allows usage of the Coral EdgeTPU on Linux systems.
 */
export const gasket = mkPackage(
  nixRaw`pkgs.gasket`,
  "The Coral Gasket Driver allows usage of the Coral EdgeTPU on Linux systems.",
);

/**
 * Policy Controller for Kubernetes
 */
export const gatekeeper = mkPackage(
  nixRaw`pkgs.gatekeeper`,
  "Policy Controller for Kubernetes",
);

/**
 * A wide variety of tools with a primary focus on variant discovery and genotyping.
 */
export const gatk = mkPackage(
  nixRaw`pkgs.gatk`,
  "A wide variety of tools with a primary focus on variant discovery and genotyping.",
);

/**
 * A high performance web server
 */
export const gatling = mkPackage(
  nixRaw`pkgs.gatling`,
  "A high performance web server",
);

/**
 * Tool to fetch known URLs
 */
export const gau = mkPackage(
  nixRaw`pkgs.gau`,
  "Tool to fetch known URLs",
);

/**
 * R7RS Scheme scripting engine
 */
export const gauche = mkPackage(
  nixRaw`pkgs.gauche`,
  "R7RS Scheme scripting engine",
);

/**
 * R7RS Scheme scripting engine
 */
export const gaucheBootstrap = mkPackage(
  nixRaw`pkgs.gaucheBootstrap`,
  "R7RS Scheme scripting engine",
);

/**
 * Light weight cross-platform test automation
 */
export const gauge = mkPackage(
  nixRaw`pkgs.gauge`,
  "Light weight cross-platform test automation",
);

/**
 * Remake of AV Arcade Volleyball
 */
export const gav = mkPackage(
  nixRaw`pkgs.gav`,
  "Remake of AV Arcade Volleyball",
);

/**
 * Gavin Howard's BC calculator implementation
 */
export const gavin_bc = mkPackage(
  nixRaw`pkgs.gavin-bc`,
  "Gavin Howard's BC calculator implementation",
);

/**
 * AVR Assembler for ATMEL AVR-Processors
 */
export const gavrasm = mkPackage(
  nixRaw`pkgs.gavrasm`,
  "AVR Assembler for ATMEL AVR-Processors",
);

/**
 * Gtk Analog Wave viewer
 */
export const gaw = mkPackage(
  nixRaw`pkgs.gaw`,
  "Gtk Analog Wave viewer",
);

/**
 * GNU implementation of the Awk programming language
 */
export const gawk = mkPackage(
  nixRaw`pkgs.gawk`,
  "GNU implementation of the Awk programming language",
);

/**
 * GNU implementation of the Awk programming language
 */
export const gawkInteractive = mkPackage(
  nixRaw`pkgs.gawkInteractive`,
  "GNU implementation of the Awk programming language",
);

export const gawk_with_extensions = mkPackage(
  nixRaw`pkgs.gawk-with-extensions`,
  "",
);

/**
 * Colour your text / terminal to be more gay
 */
export const gay = mkPackage(
  nixRaw`pkgs.gay`,
  "Colour your text / terminal to be more gay",
);

/**
 * Tool for generating origin files using the API of Gazelle-based torrent trackers
 */
export const gazelle_origin = mkPackage(
  nixRaw`pkgs.gazelle-origin`,
  "Tool for generating origin files using the API of Gazelle-based torrent trackers",
);

/**
 * Gamer Backup, a super opinionated cloud backup system
 */
export const gb_backup = mkPackage(
  nixRaw`pkgs.gb-backup`,
  "Gamer Backup, a super opinionated cloud backup system",
);

/**
 * Blazingly fast status bar written with GTK
 */
export const gbar = mkPackage(
  nixRaw`pkgs.gbar`,
  "Blazingly fast status bar written with GTK",
);

/**
 * Bitmap Font Editor
 */
export const gbdfed = mkPackage(
  nixRaw`pkgs.gbdfed`,
  "Bitmap Font Editor",
);

/**
 * A microbenchmark support library
 */
export const gbenchmark = mkPackage(
  nixRaw`pkgs.gbenchmark`,
  "A microbenchmark support library",
);

/**
 * A Forth-based Game Boy development kit
 */
export const gbforth = mkPackage(
  nixRaw`pkgs.gbforth`,
  "A Forth-based Game Boy development kit",
);

/**
 * GBL Firmware file manipulation
 */
export const gbl = mkPackage(
  nixRaw`pkgs.gbl`,
  "GBL Firmware file manipulation",
);

/**
 * Gameboy sound player
 */
export const gbsplay = mkPackage(
  nixRaw`pkgs.gbsplay`,
  "Gameboy sound player",
);

/**
 * GObject library to create cabinet files
 */
export const gcab = mkPackage(
  nixRaw`pkgs.gcab`,
  "GObject library to create cabinet files",
);

/**
 * Program for calculating and printing calendars
 */
export const gcal = mkPackage(
  nixRaw`pkgs.gcal`,
  "Program for calculating and printing calendars",
);

/**
 * CLI for Google Calendar
 */
export const gcalcli = mkPackage(
  nixRaw`pkgs.gcalcli`,
  "CLI for Google Calendar",
);

/**
 * GNU Compiler Collection, version 12.3.0 (wrapper script)
 */
export const gcc = mkPackage(
  nixRaw`pkgs.gcc`,
  "GNU Compiler Collection, version 12.3.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 10.5.0 (wrapper script)
 */
export const gcc10 = mkPackage(
  nixRaw`pkgs.gcc10`,
  "GNU Compiler Collection, version 10.5.0 (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gcc10Stdenv = mkPackage(
  nixRaw`pkgs.gcc10Stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gcc10StdenvCompat = mkPackage(
  nixRaw`pkgs.gcc10StdenvCompat`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * GNU Compiler Collection, version 11.4.0 (wrapper script)
 */
export const gcc11 = mkPackage(
  nixRaw`pkgs.gcc11`,
  "GNU Compiler Collection, version 11.4.0 (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gcc11Stdenv = mkPackage(
  nixRaw`pkgs.gcc11Stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * GNU Compiler Collection, version 12.3.0 (wrapper script)
 */
export const gcc12 = mkPackage(
  nixRaw`pkgs.gcc12`,
  "GNU Compiler Collection, version 12.3.0 (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gcc12Stdenv = mkPackage(
  nixRaw`pkgs.gcc12Stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * GNU Compiler Collection, version 13.2.0 (wrapper script)
 */
export const gcc13 = mkPackage(
  nixRaw`pkgs.gcc13`,
  "GNU Compiler Collection, version 13.2.0 (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gcc13Stdenv = mkPackage(
  nixRaw`pkgs.gcc13Stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * GNU Compiler Collection, version 4.8.5 (wrapper script)
 */
export const gcc48 = mkPackage(
  nixRaw`pkgs.gcc48`,
  "GNU Compiler Collection, version 4.8.5 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 4.9.4 (wrapper script)
 */
export const gcc49 = mkPackage(
  nixRaw`pkgs.gcc49`,
  "GNU Compiler Collection, version 4.9.4 (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gcc49Stdenv = mkPackage(
  nixRaw`pkgs.gcc49Stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * GNU Compiler Collection, version 6.5.0 (wrapper script)
 */
export const gcc6 = mkPackage(
  nixRaw`pkgs.gcc6`,
  "GNU Compiler Collection, version 6.5.0 (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gcc6Stdenv = mkPackage(
  nixRaw`pkgs.gcc6Stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * GNU Compiler Collection, version 7.5.0 (wrapper script)
 */
export const gcc7 = mkPackage(
  nixRaw`pkgs.gcc7`,
  "GNU Compiler Collection, version 7.5.0 (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gcc7Stdenv = mkPackage(
  nixRaw`pkgs.gcc7Stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * GNU Compiler Collection, version 8.5.0 (wrapper script)
 */
export const gcc8 = mkPackage(
  nixRaw`pkgs.gcc8`,
  "GNU Compiler Collection, version 8.5.0 (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gcc8Stdenv = mkPackage(
  nixRaw`pkgs.gcc8Stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * GNU Compiler Collection, version 9.5.0 (wrapper script)
 */
export const gcc9 = mkPackage(
  nixRaw`pkgs.gcc9`,
  "GNU Compiler Collection, version 9.5.0 (wrapper script)",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gcc9Stdenv = mkPackage(
  nixRaw`pkgs.gcc9Stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gccCrossLibcStdenv = mkPackage(
  nixRaw`pkgs.gccCrossLibcStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * GNU Compiler Collection, version 12.3.0
 */
export const gccForLibs = mkPackage(
  nixRaw`pkgs.gccForLibs`,
  "GNU Compiler Collection, version 12.3.0",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gccMultiStdenv = mkPackage(
  nixRaw`pkgs.gccMultiStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gccStdenv = mkPackage(
  nixRaw`pkgs.gccStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const gccStdenvNoLibs = mkPackage(
  nixRaw`pkgs.gccStdenvNoLibs`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors
 */
export const gcc_arm_embedded = mkPackage(
  nixRaw`pkgs.gcc-arm-embedded`,
  "Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors",
);

/**
 * Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors
 */
export const gcc_arm_embedded_10 = mkPackage(
  nixRaw`pkgs.gcc-arm-embedded-10`,
  "Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors",
);

/**
 * Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors
 */
export const gcc_arm_embedded_11 = mkPackage(
  nixRaw`pkgs.gcc-arm-embedded-11`,
  "Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors",
);

/**
 * Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors
 */
export const gcc_arm_embedded_12 = mkPackage(
  nixRaw`pkgs.gcc-arm-embedded-12`,
  "Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors",
);

/**
 * Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors
 */
export const gcc_arm_embedded_6 = mkPackage(
  nixRaw`pkgs.gcc-arm-embedded-6`,
  "Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors",
);

/**
 * Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors
 */
export const gcc_arm_embedded_7 = mkPackage(
  nixRaw`pkgs.gcc-arm-embedded-7`,
  "Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors",
);

/**
 * Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors
 */
export const gcc_arm_embedded_8 = mkPackage(
  nixRaw`pkgs.gcc-arm-embedded-8`,
  "Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors",
);

/**
 * Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors
 */
export const gcc_arm_embedded_9 = mkPackage(
  nixRaw`pkgs.gcc-arm-embedded-9`,
  "Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors",
);

/**
 * GNU Compiler Collection, version 12.3.0 (wrapper script)
 */
export const gcc_debug = mkPackage(
  nixRaw`pkgs.gcc_debug`,
  "GNU Compiler Collection, version 12.3.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 13.2.0 (wrapper script)
 */
export const gcc_latest = mkPackage(
  nixRaw`pkgs.gcc_latest`,
  "GNU Compiler Collection, version 13.2.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 12.3.0 (wrapper script)
 */
export const gcc_multi = mkPackage(
  nixRaw`pkgs.gcc_multi`,
  "GNU Compiler Collection, version 12.3.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 12.3.0
 */
export const gcc_unwrapped = mkPackage(
  nixRaw`pkgs.gcc-unwrapped`,
  "GNU Compiler Collection, version 12.3.0",
);

/**
 * System C compiler (wrapper script)
 */
export const gccgo = mkPackage(
  nixRaw`pkgs.gccgo`,
  "System C compiler (wrapper script)",
);

/**
 * System C compiler (wrapper script)
 */
export const gccgo12 = mkPackage(
  nixRaw`pkgs.gccgo12`,
  "System C compiler (wrapper script)",
);

/**
 * System C compiler (wrapper script)
 */
export const gccgo13 = mkPackage(
  nixRaw`pkgs.gccgo13`,
  "System C compiler (wrapper script)",
);

/**
 * A suite of tools for emulating optical drives and discs
 */
export const gcdemu = mkPackage(
  nixRaw`pkgs.gcdemu`,
  "A suite of tools for emulating optical drives and discs",
);

/**
 * CFFlasher is the tool to program the firmware of dresden elektronik's Zigbee products
 */
export const gcfflasher = mkPackage(
  nixRaw`pkgs.gcfflasher`,
  "CFFlasher is the tool to program the firmware of dresden elektronik's Zigbee products",
);

/**
 * Controls golang package import order and makes it always deterministic
 */
export const gci = mkPackage(
  nixRaw`pkgs.gci`,
  "Controls golang package import order and makes it always deterministic",
);

/**
 * GNU Compiler Collection, version 6.5.0 (wrapper script)
 */
export const gcj = mkPackage(
  nixRaw`pkgs.gcj`,
  "GNU Compiler Collection, version 6.5.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 6.5.0 (wrapper script)
 */
export const gcj6 = mkPackage(
  nixRaw`pkgs.gcj6`,
  "GNU Compiler Collection, version 6.5.0 (wrapper script)",
);

/**
 * GNU Common Lisp compiler working via GCC
 */
export const gcl = mkPackage(
  nixRaw`pkgs.gcl`,
  "GNU Common Lisp compiler working via GCC",
);

/**
 * GNU Common Lisp compiler working via GCC
 */
export const gcl_2_6_13_pre = mkPackage(
  nixRaw`pkgs.gcl_2_6_13_pre`,
  "GNU Common Lisp compiler working via GCC",
);

/**
 * Simple GTK 2 color selector
 */
export const gcolor2 = mkPackage(
  nixRaw`pkgs.gcolor2`,
  "Simple GTK 2 color selector",
);

/**
 * A simple color chooser written in GTK3
 */
export const gcolor3 = mkPackage(
  nixRaw`pkgs.gcolor3`,
  "A simple color chooser written in GTK3",
);

/**
 * A high quality educational software suite, including a large number of activities for children aged 2 to 10
 */
export const gcompris = mkPackage(
  nixRaw`pkgs.gcompris`,
  "A high quality educational software suite, including a large number of activities for children aged 2 to 10",
);

/**
 * Convert go coverage files to lcov format
 */
export const gcov2lcov = mkPackage(
  nixRaw`pkgs.gcov2lcov`,
  "Convert go coverage files to lcov format",
);

/**
 * Python script for summarizing gcov data
 */
export const gcovr = mkPackage(
  nixRaw`pkgs.gcovr`,
  "Python script for summarizing gcov data",
);

/**
 * GNOME crypto services (daemon and tools)
 */
export const gcr = mkPackage(
  nixRaw`pkgs.gcr`,
  "GNOME crypto services (daemon and tools)",
);

/**
 * GNOME crypto services (daemon and tools)
 */
export const gcr_4 = mkPackage(
  nixRaw`pkgs.gcr_4`,
  "GNOME crypto services (daemon and tools)",
);

/**
 * Tools for interacting with remote images and registries including crane and gcrane
 */
export const gcrane = mkPackage(
  nixRaw`pkgs.gcrane`,
  "Tools for interacting with remote images and registries including crane and gcrane",
);

/**
 * A stand-alone, interactive, character sheet editor for the GURPS 4th Edition roleplaying game system
 */
export const gcs = mkPackage(
  nixRaw`pkgs.gcs`,
  "A stand-alone, interactive, character sheet editor for the GURPS 4th Edition roleplaying game system",
);

/**
 * A user-space file system for interacting with Google Cloud Storage
 */
export const gcsfuse = mkPackage(
  nixRaw`pkgs.gcsfuse`,
  "A user-space file system for interacting with Google Cloud Storage",
);

/**
 * Manage your collections of movies, games, books, music and more
 */
export const gcstar = mkPackage(
  nixRaw`pkgs.gcstar`,
  "Manage your collections of movies, games, books, music and more",
);

/**
 * A dynamic image creation library
 */
export const gd = mkPackage(
  nixRaw`pkgs.gd`,
  "A dynamic image creation library",
);

/**
 * Translator library for raster geospatial data formats
 */
export const gdal = mkPackage(
  nixRaw`pkgs.gdal`,
  "Translator library for raster geospatial data formats",
);

/**
 * Translator library for raster geospatial data formats
 */
export const gdalMinimal = mkPackage(
  nixRaw`pkgs.gdalMinimal`,
  "Translator library for raster geospatial data formats",
);

/**
 * The GNU Project debugger
 */
export const gdb = mkPackage(
  nixRaw`pkgs.gdb`,
  "The GNU Project debugger",
);

/**
 * The GNU Project debugger
 */
export const gdbHostCpuOnly = mkPackage(
  nixRaw`pkgs.gdbHostCpuOnly`,
  "The GNU Project debugger",
);

/**
 * A browser-based frontend for GDB
 */
export const gdbgui = mkPackage(
  nixRaw`pkgs.gdbgui`,
  "A browser-based frontend for GDB",
);

/**
 * GNU dbm key/value database library
 */
export const gdbm = mkPackage(
  nixRaw`pkgs.gdbm`,
  "GNU dbm key/value database library",
);

/**
 * GNU Compiler Collection, version 11.4.0 (wrapper script)
 */
export const gdc = mkPackage(
  nixRaw`pkgs.gdc`,
  "GNU Compiler Collection, version 11.4.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 11.4.0 (wrapper script)
 */
export const gdc11 = mkPackage(
  nixRaw`pkgs.gdc11`,
  "GNU Compiler Collection, version 11.4.0 (wrapper script)",
);

/**
 * The grassroots cross-platform DICOM implementation
 */
export const gdcm = mkPackage(
  nixRaw`pkgs.gdcm`,
  "The grassroots cross-platform DICOM implementation",
);

/**
 * A library for image loading and manipulation
 */
export const gdk_pixbuf = mkPackage(
  nixRaw`pkgs.gdk-pixbuf`,
  "A library for image loading and manipulation",
);

/**
 * Deprecated API for integrating GdkPixbuf with Xlib data types
 */
export const gdk_pixbuf_xlib = mkPackage(
  nixRaw`pkgs.gdk-pixbuf-xlib`,
  "Deprecated API for integrating GdkPixbuf with Xlib data types",
);

/**
 * Gnome docking library
 */
export const gdl = mkPackage(
  nixRaw`pkgs.gdl`,
  "Gnome docking library",
);

/**
 * GUI frontend for Delve
 */
export const gdlv = mkPackage(
  nixRaw`pkgs.gdlv`,
  "GUI frontend for Delve",
);

/**
 * Recursive rectangle map of disk usage
 */
export const gdmap = mkPackage(
  nixRaw`pkgs.gdmap`,
  "Recursive rectangle map of disk usage",
);

/**
 * DOM C library developed for the Gnome project
 */
export const gdome2 = mkPackage(
  nixRaw`pkgs.gdome2`,
  "DOM C library developed for the Gnome project",
);

/**
 * A CLI tool for downloading large files from Google Drive
 */
export const gdown = mkPackage(
  nixRaw`pkgs.gdown`,
  "A CLI tool for downloading large files from Google Drive",
);

/**
 * A command line utility for interacting with Google Drive
 */
export const gdrive = mkPackage(
  nixRaw`pkgs.gdrive`,
  "A command line utility for interacting with Google Drive",
);

/**
 * Google Drive CLI Client
 */
export const gdrive3 = mkPackage(
  nixRaw`pkgs.gdrive3`,
  "Google Drive CLI Client",
);

/**
 * Independent set of tools for working with Godot's GDScript - parser, linter and formatter
 */
export const gdtoolkit = mkPackage(
  nixRaw`pkgs.gdtoolkit`,
  "Independent set of tools for working with Godot's GDScript - parser, linter and formatter",
);

/**
 * Disk usage analyzer with console interface
 */
export const gdu = mkPackage(
  nixRaw`pkgs.gdu`,
  "Disk usage analyzer with console interface",
);

/**
 * A toolkit for the simulation of the passage of particles through matter
 */
export const geant4 = mkPackage(
  nixRaw`pkgs.geant4`,
  "A toolkit for the simulation of the passage of particles through matter",
);

/**
 * Small and lightweight IDE
 */
export const geany = mkPackage(
  nixRaw`pkgs.geany`,
  "Small and lightweight IDE",
);

export const geany_with_vte = mkPackage(
  nixRaw`pkgs.geany-with-vte`,
  "",
);

/**
 * Gebaar, A Super Simple WM Independent Touchpad Gesture Daemon for libinput
 */
export const gebaar_libinput = mkPackage(
  nixRaw`pkgs.gebaar-libinput`,
  "Gebaar, A Super Simple WM Independent Touchpad Gesture Daemon for libinput",
);

/**
 * Proxy for using W3C WebDriver-compatible clients to interact with Gecko-based browsers
 */
export const geckodriver = mkPackage(
  nixRaw`pkgs.geckodriver`,
  "Proxy for using W3C WebDriver-compatible clients to interact with Gecko-based browsers",
);

/**
 * Toolkit for developing constraint-based systems
 */
export const gecode = mkPackage(
  nixRaw`pkgs.gecode`,
  "Toolkit for developing constraint-based systems",
);

/**
 * Toolkit for developing constraint-based systems
 */
export const gecode_3 = mkPackage(
  nixRaw`pkgs.gecode_3`,
  "Toolkit for developing constraint-based systems",
);

/**
 * Toolkit for developing constraint-based systems
 */
export const gecode_6 = mkPackage(
  nixRaw`pkgs.gecode_6`,
  "Toolkit for developing constraint-based systems",
);

/**
 * Full GPL'd suite of Electronic Design Automation tools
 */
export const geda = mkPackage(
  nixRaw`pkgs.geda`,
  "Full GPL'd suite of Electronic Design Automation tools",
);

/**
 * Graphical frontend (GUI) to GDB
 */
export const gede = mkPackage(
  nixRaw`pkgs.gede`,
  "Graphical frontend (GUI) to GDB",
);

/**
 * Former GNOME text editor
 */
export const gedit = mkPackage(
  nixRaw`pkgs.gedit`,
  "Former GNOME text editor",
);

/**
 * The Todo List / Task Manager for Geeks in command line
 */
export const geek_life = mkPackage(
  nixRaw`pkgs.geek-life`,
  "The Todo List / Task Manager for Geeks in command line",
);

/**
 * Cross-platform benchmark
 */
export const geekbench = mkPackage(
  nixRaw`pkgs.geekbench`,
  "Cross-platform benchmark",
);

/**
 * Cross-platform benchmark
 */
export const geekbench_4 = mkPackage(
  nixRaw`pkgs.geekbench_4`,
  "Cross-platform benchmark",
);

/**
 * Cross-platform benchmark
 */
export const geekbench_5 = mkPackage(
  nixRaw`pkgs.geekbench_5`,
  "Cross-platform benchmark",
);

/**
 * Cross-platform benchmark
 */
export const geekbench_6 = mkPackage(
  nixRaw`pkgs.geekbench_6`,
  "Cross-platform benchmark",
);

/**
 * Lightweight GTK based image viewer
 */
export const geeqie = mkPackage(
  nixRaw`pkgs.geeqie`,
  "Lightweight GTK based image viewer",
);

/**
 * A modern experience for GDB with advanced debugging features for exploit developers & reverse engineers
 */
export const gef = mkPackage(
  nixRaw`pkgs.gef`,
  "A modern experience for GDB with advanced debugging features for exploit developers & reverse engineers",
);

/**
 * Graph-based image processing framework
 */
export const gegl = mkPackage(
  nixRaw`pkgs.gegl`,
  "Graph-based image processing framework",
);

/**
 * A library for input gesture recognition
 */
export const geis = mkPackage(
  nixRaw`pkgs.geis`,
  "A library for input gesture recognition",
);

/**
 * a font which is metric-compatible with Microsoft's Georgia
 */
export const gelasio = mkPackage(
  nixRaw`pkgs.gelasio`,
  "a font which is metric-compatible with Microsoft's Georgia",
);

/**
 * Graphics Environment for Multimedia
 */
export const gem = mkPackage(
  nixRaw`pkgs.gem`,
  "Graphics Environment for Multimedia",
);

/**
 * Command line downloader for the Gemini protocol
 */
export const gemget = mkPackage(
  nixRaw`pkgs.gemget`,
  "Command line downloader for the Gemini protocol",
);

/**
 * A reimplementation of the Infinity Engine, used by games such as Baldur's Gate
 */
export const gemrb = mkPackage(
  nixRaw`pkgs.gemrb`,
  "A reimplementation of the Infinity Engine, used by games such as Baldur's Gate",
);

/**
 * A cache for RubyGems.org and a private gem server
 */
export const gemstash = mkPackage(
  nixRaw`pkgs.gemstash`,
  "A cache for RubyGems.org and a private gem server",
);

/**
 * Tool to generate static DNS records (AAAA and PTR) for hosts using Stateless Address Autoconfig (SLAAC)
 */
export const gen6dns = mkPackage(
  nixRaw`pkgs.gen6dns`,
  "Tool to generate static DNS records (AAAA and PTR) for hosts using Stateless Address Autoconfig (SLAAC)",
);

/**
 * Create licenses for your projects right from your terminal
 */
export const gen_license = mkPackage(
  nixRaw`pkgs.gen-license`,
  "Create licenses for your projects right from your terminal",
);

/**
 * Script for generating HOTP/TOTP keys (and QR code)
 */
export const gen_oath_safe = mkPackage(
  nixRaw`pkgs.gen-oath-safe`,
  "Script for generating HOTP/TOTP keys (and QR code)",
);

/**
 * A nonsense activity generator
 */
export const genact = mkPackage(
  nixRaw`pkgs.genact`,
  "A nonsense activity generator",
);

/**
 * Simple neural network library in ANSI C
 */
export const genann = mkPackage(
  nixRaw`pkgs.genann`,
  "Simple neural network library in ANSI C",
);

/**
 * EncFS manager and mounter with GNOME3 integration
 */
export const gencfsm = mkPackage(
  nixRaw`pkgs.gencfsm`,
  "EncFS manager and mounter with GNOME3 integration",
);

/**
 * A tool which generate def files from DLLs
 */
export const gendef = mkPackage(
  nixRaw`pkgs.gendef`,
  "A tool which generate def files from DLLs",
);

/**
 * Even formats macros
 */
export const genemichaels = mkPackage(
  nixRaw`pkgs.genemichaels`,
  "Even formats macros",
);

/**
 * A simple family tree generator that scales
 */
export const genesys = mkPackage(
  nixRaw`pkgs.genesys`,
  "A simple family tree generator that scales",
);

/**
 * A tool to generate ext2 filesystem images without requiring root privileges
 */
export const genext2fs = mkPackage(
  nixRaw`pkgs.genext2fs`,
  "A tool to generate ext2 filesystem images without requiring root privileges",
);

/**
 * Command-line option parser generator
 */
export const gengetopt = mkPackage(
  nixRaw`pkgs.gengetopt`,
  "Command-line option parser generator",
);

/**
 * Generate filesystem images from directory trees
 */
export const genimage = mkPackage(
  nixRaw`pkgs.genimage`,
  "Generate filesystem images from directory trees",
);

/**
 * Ultra-fast computation of genome mappability
 */
export const genmap = mkPackage(
  nixRaw`pkgs.genmap`,
  "Ultra-fast computation of genome mappability",
);

/**
 * A simple yet robust commandline random password generator
 */
export const genpass = mkPackage(
  nixRaw`pkgs.genpass`,
  "A simple yet robust commandline random password generator",
);

/**
 * Tool for creating romfs file system images
 */
export const genromfs = mkPackage(
  nixRaw`pkgs.genromfs`,
  "Tool for creating romfs file system images",
);

/**
 * A Genesis/Mega Drive emulator
 */
export const gensgs = mkPackage(
  nixRaw`pkgs.gensgs`,
  "A Genesis/Mega Drive emulator",
);

/**
 * General Stream I/O
 */
export const gensio = mkPackage(
  nixRaw`pkgs.gensio`,
  "General Stream I/O",
);

/**
 * A high-quality typeface family for Latin, Cyrillic, and Greek
 */
export const gentium = mkPackage(
  nixRaw`pkgs.gentium`,
  "A high-quality typeface family for Latin, Cyrillic, and Greek",
);

/**
 * A high-quality typeface family for Latin, Cyrillic, and Greek
 */
export const gentium_book_basic = mkPackage(
  nixRaw`pkgs.gentium-book-basic`,
  "A high-quality typeface family for Latin, Cyrillic, and Greek",
);

/**
 * Crossword generator
 */
export const genxword = mkPackage(
  nixRaw`pkgs.genxword`,
  "Crossword generator",
);

/**
 * Fast and easy Android emulation
 */
export const genymotion = mkPackage(
  nixRaw`pkgs.genymotion`,
  "Fast and easy Android emulation",
);

/**
 * Geolocation framework and some data providers
 */
export const geoclue2 = mkPackage(
  nixRaw`pkgs.geoclue2`,
  "Geolocation framework and some data providers",
);

/**
 * Geolocation framework and some data providers
 */
export const geoclue2_with_demo_agent = mkPackage(
  nixRaw`pkgs.geoclue2-with-demo-agent`,
  "Geolocation framework and some data providers",
);

/**
 * A convenience library for the geocoding and reverse geocoding using Nominatim service
 */
export const geocode_glib = mkPackage(
  nixRaw`pkgs.geocode-glib`,
  "A convenience library for the geocoding and reverse geocoding using Nominatim service",
);

/**
 * A convenience library for the geocoding and reverse geocoding using Nominatim service
 */
export const geocode_glib_2 = mkPackage(
  nixRaw`pkgs.geocode-glib_2`,
  "A convenience library for the geocoding and reverse geocoding using Nominatim service",
);

/**
 * Dynamic mathematics software with graphics, algebra and spreadsheets
 */
export const geogebra = mkPackage(
  nixRaw`pkgs.geogebra`,
  "Dynamic mathematics software with graphics, algebra and spreadsheets",
);

/**
 * Dynamic mathematics software with graphics, algebra and spreadsheets
 */
export const geogebra6 = mkPackage(
  nixRaw`pkgs.geogebra6`,
  "Dynamic mathematics software with graphics, algebra and spreadsheets",
);

/**
 * Programming Library with Geometric Algorithms
 */
export const geogram = mkPackage(
  nixRaw`pkgs.geogram`,
  "Programming Library with Geometric Algorithms",
);

/**
 * C++ geographic library
 */
export const geographiclib = mkPackage(
  nixRaw`pkgs.geographiclib`,
  "C++ geographic library",
);

/**
 * An API for GeoIP/Geolocation databases
 */
export const geoip = mkPackage(
  nixRaw`pkgs.geoip`,
  "An API for GeoIP/Geolocation databases",
);

/**
 * An API for GeoIP/Geolocation databases
 */
export const geoipWithDatabase = mkPackage(
  nixRaw`pkgs.geoipWithDatabase`,
  "An API for GeoIP/Geolocation databases",
);

/**
 * GeoIP Java API
 */
export const geoipjava = mkPackage(
  nixRaw`pkgs.geoipjava`,
  "GeoIP Java API",
);

/**
 * Automatic GeoIP database updater
 */
export const geoipupdate = mkPackage(
  nixRaw`pkgs.geoipupdate`,
  "Automatic GeoIP database updater",
);

/**
 * GeoLite Legacy IP geolocation databases
 */
export const geolite_legacy = mkPackage(
  nixRaw`pkgs.geolite-legacy`,
  "GeoLite Legacy IP geolocation databases",
);

/**
 * A gopher daemon for Linux/BSD
 */
export const geomyidae = mkPackage(
  nixRaw`pkgs.geomyidae`,
  "A gopher daemon for Linux/BSD",
);

/**
 * A free software percussion synthesizer
 */
export const geonkick = mkPackage(
  nixRaw`pkgs.geonkick`,
  "A free software percussion synthesizer",
);

/**
 * Colorful, adaptive gemini browser
 */
export const geopard = mkPackage(
  nixRaw`pkgs.geopard`,
  "Colorful, adaptive gemini browser",
);

/**
 * C/C++ library for computational geometry with a focus on algorithms used in geographic information systems (GIS) software
 */
export const geos = mkPackage(
  nixRaw`pkgs.geos`,
  "C/C++ library for computational geometry with a focus on algorithms used in geographic information systems (GIS) software",
);

/**
 * C++ port of the Java Topology Suite (JTS)
 */
export const geos39 = mkPackage(
  nixRaw`pkgs.geos39`,
  "C++ port of the Java Topology Suite (JTS)",
);

/**
 * Open source server for sharing geospatial data
 */
export const geoserver = mkPackage(
  nixRaw`pkgs.geoserver`,
  "Open source server for sharing geospatial data",
);

/**
 * A platform for visualizing and manipulating large graphs
 */
export const gephi = mkPackage(
  nixRaw`pkgs.gephi`,
  "A platform for visualizing and manipulating large graphs",
);

/**
 * UPnP Media Server for 2020
 */
export const gerbera = mkPackage(
  nixRaw`pkgs.gerbera`,
  "UPnP Media Server for 2020",
);

/**
 * Gerbil Scheme
 */
export const gerbil = mkPackage(
  nixRaw`pkgs.gerbil`,
  "Gerbil Scheme",
);

/**
 * Gerbil Scheme
 */
export const gerbil_unstable = mkPackage(
  nixRaw`pkgs.gerbil-unstable`,
  "Gerbil Scheme",
);

/**
 * A Gerber (RS-274X) viewer
 */
export const gerbv = mkPackage(
  nixRaw`pkgs.gerbv`,
  "A Gerber (RS-274X) viewer",
);

/**
 * A minimal terminal emulator
 */
export const germinal = mkPackage(
  nixRaw`pkgs.germinal`,
  "A minimal terminal emulator",
);

/**
 * A web based code review and repository management for the git version control system
 */
export const gerrit = mkPackage(
  nixRaw`pkgs.gerrit`,
  "A web based code review and repository management for the git version control system",
);

/**
 * Downloads TV and radio programmes from BBC iPlayer and BBC Sounds
 */
export const get_iplayer = mkPackage(
  nixRaw`pkgs.get_iplayer`,
  "Downloads TV and radio programmes from BBC iPlayer and BBC Sounds",
);

export const getconf = mkPackage(
  nixRaw`pkgs.getconf`,
  "",
);

/**
 * Reference implementation of the Dirfile Standards
 */
export const getdata = mkPackage(
  nixRaw`pkgs.getdata`,
  "Reference implementation of the Dirfile Standards",
);

/**
 * A modern asynchronous DNS API
 */
export const getdns = mkPackage(
  nixRaw`pkgs.getdns`,
  "A modern asynchronous DNS API",
);

/**
 * A General Environment for the Treatment of Discrete Problems
 */
export const getdp = mkPackage(
  nixRaw`pkgs.getdp`,
  "A General Environment for the Treatment of Discrete Problems",
);

/**
 * Extract the initial/default boot image from a CD image if existent
 */
export const geteltorito = mkPackage(
  nixRaw`pkgs.geteltorito`,
  "Extract the initial/default boot image from a CD image if existent",
);

export const getent = mkPackage(
  nixRaw`pkgs.getent`,
  "",
);

/**
 * CLI utility to get icons for apps on your system or other generic icons by name
 */
export const geticons = mkPackage(
  nixRaw`pkgs.geticons`,
  "CLI utility to get icons for apps on your system or other generic icons by name",
);

/**
 * A program for retrieving mail
 */
export const getmail6 = mkPackage(
  nixRaw`pkgs.getmail6`,
  "A program for retrieving mail",
);

/**
 * Parses command-line arguments from shell scripts
 */
export const getopt = mkPackage(
  nixRaw`pkgs.getopt`,
  "Parses command-line arguments from shell scripts",
);

/**
 * An elegant option/argument parser for shell scripts (full support for bash and all POSIX shells)
 */
export const getoptions = mkPackage(
  nixRaw`pkgs.getoptions`,
  "An elegant option/argument parser for shell scripts (full support for bash and all POSIX shells)",
);

/**
 * Well integrated set of translation tools and documentation
 */
export const gettext = mkPackage(
  nixRaw`pkgs.gettext`,
  "Well integrated set of translation tools and documentation",
);

/**
 * A collection of tools to download books from Google Books
 */
export const getxbook = mkPackage(
  nixRaw`pkgs.getxbook`,
  "A collection of tools to download books from Google Books",
);

/**
 * Git Explorer: cross-platform git workflow improvement tool inspired by Magit
 */
export const gex = mkPackage(
  nixRaw`pkgs.gex`,
  "Git Explorer: cross-platform git workflow improvement tool inspired by Magit",
);

/**
 * GObject wrapper around the Exiv2 photo metadata library
 */
export const gexiv2 = mkPackage(
  nixRaw`pkgs.gexiv2`,
  "GObject wrapper around the Exiv2 photo metadata library",
);

/**
 * A GDB Frontend
 */
export const gf = mkPackage(
  nixRaw`pkgs.gf`,
  "A GDB Frontend",
);

/**
 * Routines for fast arithmetic in GF(2)[x]
 */
export const gf2x = mkPackage(
  nixRaw`pkgs.gf2x`,
  "Routines for fast arithmetic in GF(2)[x]",
);

/**
 * A software package for computing Gröbner fans and tropical varieties
 */
export const gfan = mkPackage(
  nixRaw`pkgs.gfan`,
  "A software package for computing Gröbner fans and tropical varieties",
);

/**
 * GLib/GObject wrapper for the Facebook Graph API
 */
export const gfbgraph = mkPackage(
  nixRaw`pkgs.gfbgraph`,
  "GLib/GObject wrapper for the Facebook Graph API",
);

/**
 * A C++ library that implements commandline flags processing
 */
export const gflags = mkPackage(
  nixRaw`pkgs.gflags`,
  "A C++ library that implements commandline flags processing",
);

/**
 * CLI tool to help keep track of your Git repositories, written in Rust
 */
export const gfold = mkPackage(
  nixRaw`pkgs.gfold`,
  "CLI tool to help keep track of your Git repositories, written in Rust",
);

/**
 * The Forth implementation of the GNU project
 */
export const gforth = mkPackage(
  nixRaw`pkgs.gforth`,
  "The Forth implementation of the GNU project",
);

/**
 * GNU Compiler Collection, version 12.3.0 (wrapper script)
 */
export const gfortran = mkPackage(
  nixRaw`pkgs.gfortran`,
  "GNU Compiler Collection, version 12.3.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 10.5.0 (wrapper script)
 */
export const gfortran10 = mkPackage(
  nixRaw`pkgs.gfortran10`,
  "GNU Compiler Collection, version 10.5.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 11.4.0 (wrapper script)
 */
export const gfortran11 = mkPackage(
  nixRaw`pkgs.gfortran11`,
  "GNU Compiler Collection, version 11.4.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 12.3.0 (wrapper script)
 */
export const gfortran12 = mkPackage(
  nixRaw`pkgs.gfortran12`,
  "GNU Compiler Collection, version 12.3.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 13.2.0 (wrapper script)
 */
export const gfortran13 = mkPackage(
  nixRaw`pkgs.gfortran13`,
  "GNU Compiler Collection, version 13.2.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 4.8.5 (wrapper script)
 */
export const gfortran48 = mkPackage(
  nixRaw`pkgs.gfortran48`,
  "GNU Compiler Collection, version 4.8.5 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 4.9.4 (wrapper script)
 */
export const gfortran49 = mkPackage(
  nixRaw`pkgs.gfortran49`,
  "GNU Compiler Collection, version 4.9.4 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 6.5.0 (wrapper script)
 */
export const gfortran6 = mkPackage(
  nixRaw`pkgs.gfortran6`,
  "GNU Compiler Collection, version 6.5.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 7.5.0 (wrapper script)
 */
export const gfortran7 = mkPackage(
  nixRaw`pkgs.gfortran7`,
  "GNU Compiler Collection, version 7.5.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 8.5.0 (wrapper script)
 */
export const gfortran8 = mkPackage(
  nixRaw`pkgs.gfortran8`,
  "GNU Compiler Collection, version 8.5.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 9.5.0 (wrapper script)
 */
export const gfortran9 = mkPackage(
  nixRaw`pkgs.gfortran9`,
  "GNU Compiler Collection, version 9.5.0 (wrapper script)",
);

/**
 * Tools for creating, checking and working with gfs2 filesystems
 */
export const gfs2_utils = mkPackage(
  nixRaw`pkgs.gfs2-utils`,
  "Tools for creating, checking and working with gfs2 filesystems",
);

/**
 * Shamir's secret-sharing method in the Galois Field GF(2**8)
 */
export const gfshare = mkPackage(
  nixRaw`pkgs.gfshare`,
  "Shamir's secret-sharing method in the Galois Field GF(2**8)",
);

/**
 * GTK-based multithreaded FTP client for *nix-based machines
 */
export const gftp = mkPackage(
  nixRaw`pkgs.gftp`,
  "GTK-based multithreaded FTP client for *nix-based machines",
);

/**
 * Graphics API Capture and Replay Tools
 */
export const gfxreconstruct = mkPackage(
  nixRaw`pkgs.gfxreconstruct`,
  "Graphics API Capture and Replay Tools",
);

/**
 * Uinput driver for Android GfxTablet tablet-as-input-device app
 */
export const gfxtablet = mkPackage(
  nixRaw`pkgs.gfxtablet`,
  "Uinput driver for Android GfxTablet tablet-as-input-device app",
);

/**
 * Git with less typing
 */
export const gg_scm = mkPackage(
  nixRaw`pkgs.gg-scm`,
  "Git with less typing",
);

/**
 * Visualization program for exploring high-dimensional data
 */
export const ggobi = mkPackage(
  nixRaw`pkgs.ggobi`,
  "Visualization program for exploring high-dimensional data",
);

/**
 * Tool to find and fix various types of hardcoded secrets and infrastructure-as-code misconfigurations
 */
export const ggshield = mkPackage(
  nixRaw`pkgs.ggshield`,
  "Tool to find and fix various types of hardcoded secrets and infrastructure-as-code misconfigurations",
);

/**
 * GGZ Gaming zone libraries
 */
export const ggz_base_libs = mkPackage(
  nixRaw`pkgs.ggz_base_libs`,
  "GGZ Gaming zone libraries",
);

/**
 * GitHub CLI tool
 */
export const gh = mkPackage(
  nixRaw`pkgs.gh`,
  "GitHub CLI tool",
);

/**
 * Export Github repository issues to markdown files
 */
export const gh2md = mkPackage(
  nixRaw`pkgs.gh2md`,
  "Export Github repository issues to markdown files",
);

/**
 * gh extension to manage GitHub Actions caches
 */
export const gh_actions_cache = mkPackage(
  nixRaw`pkgs.gh-actions-cache`,
  "gh extension to manage GitHub Actions caches",
);

/**
 * GitHub contributions calender terminal viewer
 */
export const gh_cal = mkPackage(
  nixRaw`pkgs.gh-cal`,
  "GitHub contributions calender terminal viewer",
);

/**
 * Github Cli extension to display a dashboard with pull requests and issues
 */
export const gh_dash = mkPackage(
  nixRaw`pkgs.gh-dash`,
  "Github Cli extension to display a dashboard with pull requests and issues",
);

/**
 * gh extension to explore the ecosystem
 */
export const gh_eco = mkPackage(
  nixRaw`pkgs.gh-eco`,
  "gh extension to explore the ecosystem",
);

/**
 * gh extension to preview Markdown looking like on GitHub
 */
export const gh_markdown_preview = mkPackage(
  nixRaw`pkgs.gh-markdown-preview`,
  "gh extension to preview Markdown looking like on GitHub",
);

/**
 * Triggerless online schema migration solution for MySQL
 */
export const gh_ost = mkPackage(
  nixRaw`pkgs.gh-ost`,
  "Triggerless online schema migration solution for MySQL",
);

/**
 * gh extension with animated terminal screensavers
 */
export const gh_screensaver = mkPackage(
  nixRaw`pkgs.gh-screensaver`,
  "gh extension with animated terminal screensavers",
);

/**
 * Tool for detecting and exploiting SQL injection security flaws
 */
export const ghauri = mkPackage(
  nixRaw`pkgs.ghauri`,
  "Tool for detecting and exploiting SQL injection security flaws",
);

/**
 * The Glasgow Haskell Compiler
 */
export const ghc = mkPackage(
  nixRaw`pkgs.ghc`,
  "The Glasgow Haskell Compiler",
);

/**
 * header-only single-file C++ std::filesystem compatible helper library
 */
export const ghc_filesystem = mkPackage(
  nixRaw`pkgs.ghc_filesystem`,
  "header-only single-file C++ std::filesystem compatible helper library",
);

/**
 * GHCi based bare bones IDE
 */
export const ghcid = mkPackage(
  nixRaw`pkgs.ghcid`,
  "GHCi based bare bones IDE",
);

/**
 * VHDL 2008/93/87 simulator
 */
export const ghdl = mkPackage(
  nixRaw`pkgs.ghdl`,
  "VHDL 2008/93/87 simulator",
);

/**
 * VHDL 2008/93/87 simulator
 */
export const ghdl_llvm = mkPackage(
  nixRaw`pkgs.ghdl-llvm`,
  "VHDL 2008/93/87 simulator",
);

/**
 * VHDL 2008/93/87 simulator
 */
export const ghdl_mcode = mkPackage(
  nixRaw`pkgs.ghdl-mcode`,
  "VHDL 2008/93/87 simulator",
);

/**
 * Extensible GitHub dorking tool
 */
export const ghdorker = mkPackage(
  nixRaw`pkgs.ghdorker`,
  "Extensible GitHub dorking tool",
);

/**
 * A software reverse engineering (SRE) suite of tools developed by NSA's Research Directorate in support of the Cybersecurity mission
 */
export const ghidra = mkPackage(
  nixRaw`pkgs.ghidra`,
  "A software reverse engineering (SRE) suite of tools developed by NSA's Research Directorate in support of the Cybersecurity mission",
);

/**
 * A software reverse engineering (SRE) suite of tools developed by NSA's Research Directorate in support of the Cybersecurity mission
 */
export const ghidra_bin = mkPackage(
  nixRaw`pkgs.ghidra-bin`,
  "A software reverse engineering (SRE) suite of tools developed by NSA's Research Directorate in support of the Cybersecurity mission",
);

/**
 * Quickly clone an entire org/users repositories into one directory
 */
export const ghorg = mkPackage(
  nixRaw`pkgs.ghorg`,
  "Quickly clone an entire org/users repositories into one directory",
);

/**
 * Android post-exploitation framework
 */
export const ghost = mkPackage(
  nixRaw`pkgs.ghost`,
  "Android post-exploitation framework",
);

/**
 * Github notifications in your terminal
 */
export const ghostie = mkPackage(
  nixRaw`pkgs.ghostie`,
  "Github notifications in your terminal",
);

/**
 * PostScript interpreter (mainline version)
 */
export const ghostscript = mkPackage(
  nixRaw`pkgs.ghostscript`,
  "PostScript interpreter (mainline version)",
);

/**
 * PostScript interpreter (mainline version)
 */
export const ghostscriptX = mkPackage(
  nixRaw`pkgs.ghostscriptX`,
  "PostScript interpreter (mainline version)",
);

/**
 * PostScript interpreter (mainline version)
 */
export const ghostscript_headless = mkPackage(
  nixRaw`pkgs.ghostscript_headless`,
  "PostScript interpreter (mainline version)",
);

/**
 * Convert Ghost export to Hugo posts
 */
export const ghosttohugo = mkPackage(
  nixRaw`pkgs.ghosttohugo`,
  "Convert Ghost export to Hugo posts",
);

/**
 * TLS proxy with mutual authentication support for securing non-TLS backend applications
 */
export const ghostunnel = mkPackage(
  nixRaw`pkgs.ghostunnel`,
  "TLS proxy with mutual authentication support for securing non-TLS backend applications",
);

/**
 * Copy your docs directly to the gh-pages branch
 */
export const ghp_import = mkPackage(
  nixRaw`pkgs.ghp-import`,
  "Copy your docs directly to the gh-pages branch",
);

/**
 * Remote repository management made easy
 */
export const ghq = mkPackage(
  nixRaw`pkgs.ghq`,
  "Remote repository management made easy",
);

/**
 * Upload multiple artifacts to GitHub Release in parallel
 */
export const ghr = mkPackage(
  nixRaw`pkgs.ghr`,
  "Upload multiple artifacts to GitHub Release in parallel",
);

/**
 * Python module and CLI tool for GitHub repo statistics
 */
export const ghrepo_stats = mkPackage(
  nixRaw`pkgs.ghrepo-stats`,
  "Python module and CLI tool for GitHub repo statistics",
);

/**
 * Offensive Google framework
 */
export const ghunt = mkPackage(
  nixRaw`pkgs.ghunt`,
  "Offensive Google framework",
);

/**
 * Simple gRPC benchmarking and load testing tool
 */
export const ghz = mkPackage(
  nixRaw`pkgs.ghz`,
  "Simple gRPC benchmarking and load testing tool",
);

/**
 * GI Crystal is a binding generator used to generate Crystal bindings for GObject based libraries using GObject Introspection.
 */
export const gi_crystal = mkPackage(
  nixRaw`pkgs.gi-crystal`,
  "GI Crystal is a binding generator used to generate Crystal bindings for GObject based libraries using GObject Introspection.",
);

/**
 * Documentation generator for GObject-based libraries
 */
export const gi_docgen = mkPackage(
  nixRaw`pkgs.gi-docgen`,
  "Documentation generator for GObject-based libraries",
);

/**
 * A free computer algebra system (CAS)
 */
export const giac = mkPackage(
  nixRaw`pkgs.giac`,
  "A free computer algebra system (CAS)",
);

/**
 * A free computer algebra system (CAS)
 */
export const giac_with_xcas = mkPackage(
  nixRaw`pkgs.giac-with-xcas`,
  "A free computer algebra system (CAS)",
);

/**
 * A free, minimal, hardcore audio tool for DJs, live performers and electronic musicians
 */
export const giada = mkPackage(
  nixRaw`pkgs.giada`,
  "A free, minimal, hardcore audio tool for DJs, live performers and electronic musicians",
);

/**
 * A Reddit app, built with Python, GTK and Handy; Created with mobile Linux in mind
 */
export const giara = mkPackage(
  nixRaw`pkgs.giara`,
  "A Reddit app, built with Python, GTK and Handy; Created with mobile Linux in mind",
);

/**
 * Python module to detect gibberish strings
 */
export const gibberish_detector = mkPackage(
  nixRaw`pkgs.gibberish-detector`,
  "Python module to detect gibberish strings",
);

/**
 * A shell script for easily accessing gitignore boilerplates
 */
export const gibo = mkPackage(
  nixRaw`pkgs.gibo`,
  "A shell script for easily accessing gitignore boilerplates",
);

/**
 * Tool to backup repositories
 */
export const gickup = mkPackage(
  nixRaw`pkgs.gickup`,
  "Tool to backup repositories",
);

/**
 * Render gifs as ASCII art in your cli
 */
export const gif_for_cli = mkPackage(
  nixRaw`pkgs.gif-for-cli`,
  "Render gifs as ASCII art in your cli",
);

/**
 * A library for reading and writing gif images
 */
export const giflib = mkPackage(
  nixRaw`pkgs.giflib`,
  "A library for reading and writing gif images",
);

/**
 * Command-line tool for creating, editing, and getting information about GIF images and animations
 */
export const gifsicle = mkPackage(
  nixRaw`pkgs.gifsicle`,
  "Command-line tool for creating, editing, and getting information about GIF images and animations",
);

/**
 * GIF encoder based on libimagequant (pngquant)
 */
export const gifski = mkPackage(
  nixRaw`pkgs.gifski`,
  "GIF encoder based on libimagequant (pngquant)",
);

/**
 * Medical imaging geometry format C API
 */
export const gifticlib = mkPackage(
  nixRaw`pkgs.gifticlib`,
  "Medical imaging geometry format C API",
);

/**
 * Gigalixir Command-Line Interface
 */
export const gigalixir = mkPackage(
  nixRaw`pkgs.gigalixir`,
  "Gigalixir Command-Line Interface",
);

/**
 * Gigasampler file access library
 */
export const gigedit = mkPackage(
  nixRaw`pkgs.gigedit`,
  "Gigasampler file access library",
);

/**
 * Radioastronomy data analysis software
 */
export const gildas = mkPackage(
  nixRaw`pkgs.gildas`,
  "Radioastronomy data analysis software",
);

/**
 * A CLI that utilizes Okta IdP via SAML to acquire temporary AWS credentials
 */
export const gimme_aws_creds = mkPackage(
  nixRaw`pkgs.gimme-aws-creds`,
  "A CLI that utilizes Okta IdP via SAML to acquire temporary AWS credentials",
);

/**
 * Easily add emojis to your git commit messages
 */
export const gimoji = mkPackage(
  nixRaw`pkgs.gimoji`,
  "Easily add emojis to your git commit messages",
);

/**
 * The GNU Image Manipulation Program
 */
export const gimp = mkPackage(
  nixRaw`pkgs.gimp`,
  "The GNU Image Manipulation Program",
);

/**
 * The GNU Image Manipulation Program
 */
export const gimp_with_plugins = mkPackage(
  nixRaw`pkgs.gimp-with-plugins`,
  "The GNU Image Manipulation Program",
);

/**
 * Game Input Multiplexer
 */
export const gimx = mkPackage(
  nixRaw`pkgs.gimx`,
  "Game Input Multiplexer",
);

/**
 * GiNaC is Not a CAS
 */
export const ginac = mkPackage(
  nixRaw`pkgs.ginac`,
  "GiNaC is Not a CAS",
);

/**
 * A Modern Testing Framework for Go
 */
export const ginkgo = mkPackage(
  nixRaw`pkgs.ginkgo`,
  "A Modern Testing Framework for Go",
);

/**
 * GIO API bindings
 */
export const gio_sharp = mkPackage(
  nixRaw`pkgs.gio-sharp`,
  "GIO API bindings",
);

/**
 * Simple gif recorder
 */
export const giph = mkPackage(
  nixRaw`pkgs.giph`,
  "Simple gif recorder",
);

/**
 * Tool to generate rust bindings and user API for glib-based libraries
 */
export const gir_rs = mkPackage(
  nixRaw`pkgs.gir-rs`,
  "Tool to generate rust bindings and user API for glib-based libraries",
);

/**
 * User interface library
 */
export const girara = mkPackage(
  nixRaw`pkgs.girara`,
  "User interface library",
);

/**
 * Show the weather in the terminal, in style
 */
export const girouette = mkPackage(
  nixRaw`pkgs.girouette`,
  "Show the weather in the terminal, in style",
);

/**
 * Automatically spawn a reverse shell fully interactive for Linux or Windows victim
 */
export const girsh = mkPackage(
  nixRaw`pkgs.girsh`,
  "Automatically spawn a reverse shell fully interactive for Linux or Windows victim",
);

/**
 * Upload code to https://gist.github.com (or github enterprise)
 */
export const gist = mkPackage(
  nixRaw`pkgs.gist`,
  "Upload code to https://gist.github.com (or github enterprise)",
);

/**
 * A Python based GitHub GIST management tool
 */
export const gistyc = mkPackage(
  nixRaw`pkgs.gistyc`,
  "A Python based GitHub GIST management tool",
);

/**
 * Distributed version control system
 */
export const git = mkPackage(
  nixRaw`pkgs.git`,
  "Distributed version control system",
);

/**
 * libgit2 bindings for C++
 */
export const git2_cpp = mkPackage(
  nixRaw`pkgs.git2-cpp`,
  "libgit2 bindings for C++",
);

/**
 * Convert git logs to GNU style ChangeLog files
 */
export const git2cl = mkPackage(
  nixRaw`pkgs.git2cl`,
  "Convert git logs to GNU style ChangeLog files",
);

/**
 * Distributed version control system
 */
export const gitFull = mkPackage(
  nixRaw`pkgs.gitFull`,
  "Distributed version control system",
);

/**
 * Distributed version control system
 */
export const gitMinimal = mkPackage(
  nixRaw`pkgs.gitMinimal`,
  "Distributed version control system",
);

/**
 * Android's repo management tool
 */
export const gitRepo = mkPackage(
  nixRaw`pkgs.gitRepo`,
  "Android's repo management tool",
);

/**
 * Distributed version control system
 */
export const gitSVN = mkPackage(
  nixRaw`pkgs.gitSVN`,
  "Distributed version control system",
);

/**
 * git commit --fixup, but automatic
 */
export const git_absorb = mkPackage(
  nixRaw`pkgs.git-absorb`,
  "git commit --fixup, but automatic",
);

/**
 * Manage the aggregation of git branches from different remotes to build a consolidated one
 */
export const git_aggregator = mkPackage(
  nixRaw`pkgs.git-aggregator`,
  "Manage the aggregation of git branches from different remotes to build a consolidated one",
);

/**
 * manage files with git, without checking their contents into git
 */
export const git_annex = mkPackage(
  nixRaw`pkgs.git-annex`,
  "manage files with git, without checking their contents into git",
);

/**
 * Graphical interface for git-annex metadata commands
 */
export const git_annex_metadata_gui = mkPackage(
  nixRaw`pkgs.git-annex-metadata-gui`,
  "Graphical interface for git-annex metadata commands",
);

/**
 * A git-annex special remote for Dropbox
 */
export const git_annex_remote_dbx = mkPackage(
  nixRaw`pkgs.git-annex-remote-dbx`,
  "A git-annex special remote for Dropbox",
);

/**
 * A git-annex special remote for Google Drive
 */
export const git_annex_remote_googledrive = mkPackage(
  nixRaw`pkgs.git-annex-remote-googledrive`,
  "A git-annex special remote for Google Drive",
);

/**
 * Use rclone supported cloud storage providers with git-annex
 */
export const git_annex_remote_rclone = mkPackage(
  nixRaw`pkgs.git-annex-remote-rclone`,
  "Use rclone supported cloud storage providers with git-annex",
);

/**
 * gadu, a du like utility for annexed files
 */
export const git_annex_utils = mkPackage(
  nixRaw`pkgs.git-annex-utils`,
  "gadu, a du like utility for annexed files",
);

/**
 * Distributed code review system for Git repos
 */
export const git_appraise = mkPackage(
  nixRaw`pkgs.git-appraise`,
  "Distributed code review system for Git repos",
);

/**
 * Archive a repository with all its submodules
 */
export const git_archive_all = mkPackage(
  nixRaw`pkgs.git-archive-all`,
  "Archive a repository with all its submodules",
);

/**
 * Create fixup commits for topic branches
 */
export const git_autofixup = mkPackage(
  nixRaw`pkgs.git-autofixup`,
  "Create fixup commits for topic branches",
);

/**
 * Backdate a commit or range of commit to a date or range of dates
 */
export const git_backdate = mkPackage(
  nixRaw`pkgs.git-backdate`,
  "Backdate a commit or range of commit to a date or range of dates",
);

/**
 * A tool to help you backup your git repositories from services like GitHub
 */
export const git_backup = mkPackage(
  nixRaw`pkgs.git-backup`,
  "A tool to help you backup your git repositories from services like GitHub",
);

/**
 * A utility for visualising git commit activity as bars on the terminal
 */
export const git_bars = mkPackage(
  nixRaw`pkgs.git-bars`,
  "A utility for visualising git commit activity as bars on the terminal",
);

/**
 * Tool for visualization of Git repositories
 */
export const git_big_picture = mkPackage(
  nixRaw`pkgs.git-big-picture`,
  "Tool for visualization of Git repositories",
);

/**
 * A suite of tools to help you visualize, navigate, manipulate, and repair your commit history
 */
export const git_branchless = mkPackage(
  nixRaw`pkgs.git-branchless`,
  "A suite of tools to help you visualize, navigate, manipulate, and repair your commit history",
);

/**
 * Efficiently manage Git branches without leaving your local branch
 */
export const git_branchstack = mkPackage(
  nixRaw`pkgs.git-branchstack`,
  "Efficiently manage Git branches without leaving your local branch",
);

/**
 * Distributed bug tracker embedded in Git
 */
export const git_bug = mkPackage(
  nixRaw`pkgs.git-bug`,
  "Distributed bug tracker embedded in Git",
);

/**
 * Tool for upgrading repositories using git-bug to new versions
 */
export const git_bug_migration = mkPackage(
  nixRaw`pkgs.git-bug-migration`,
  "Tool for upgrading repositories using git-bug to new versions",
);

/**
 * CHANGELOG generator implemented in Go (Golang)
 */
export const git_chglog = mkPackage(
  nixRaw`pkgs.git-chglog`,
  "CHANGELOG generator implemented in Go (Golang)",
);

/**
 * git remote helper to interact with mercurial repositories
 */
export const git_cinnabar = mkPackage(
  nixRaw`pkgs.git-cinnabar`,
  "git remote helper to interact with mercurial repositories",
);

/**
 * A highly customizable Changelog Generator that follows Conventional Commit specifications
 */
export const git_cliff = mkPackage(
  nixRaw`pkgs.git-cliff`,
  "A highly customizable Changelog Generator that follows Conventional Commit specifications",
);

/**
 * a git extension to work with CODEOWNERS files
 */
export const git_codeowners = mkPackage(
  nixRaw`pkgs.git-codeowners`,
  "a git extension to work with CODEOWNERS files",
);

/**
 * Manage the code review process for Git changes using a Gerrit server
 */
export const git_codereview = mkPackage(
  nixRaw`pkgs.git-codereview`,
  "Manage the code review process for Git changes using a Gerrit server",
);

/**
 * A sleek and powerful Git GUI
 */
export const git_cola = mkPackage(
  nixRaw`pkgs.git-cola`,
  "A sleek and powerful Git GUI",
);

/**
 * Git subcommand to interactively select changes to commit or stage
 */
export const git_crecord = mkPackage(
  nixRaw`pkgs.git-crecord`,
  "Git subcommand to interactively select changes to commit or stage",
);

/**
 * A git credential helper for 1Password
 */
export const git_credential_1password = mkPackage(
  nixRaw`pkgs.git-credential-1password`,
  "A git credential helper for 1Password",
);

/**
 * Manage git credentials using gopass
 */
export const git_credential_gopass = mkPackage(
  nixRaw`pkgs.git-credential-gopass`,
  "Manage git credentials using gopass",
);

/**
 * Helper that allows Git (and shell scripts) to use KeePassXC as credential store
 */
export const git_credential_keepassxc = mkPackage(
  nixRaw`pkgs.git-credential-keepassxc`,
  "Helper that allows Git (and shell scripts) to use KeePassXC as credential store",
);

/**
 * A secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services
 */
export const git_credential_manager = mkPackage(
  nixRaw`pkgs.git-credential-manager`,
  "A secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services",
);

/**
 * Git credential helper that securely authenticates to GitHub, GitLab and BitBucket using OAuth
 */
export const git_credential_oauth = mkPackage(
  nixRaw`pkgs.git-credential-oauth`,
  "Git credential helper that securely authenticates to GitHub, GitLab and BitBucket using OAuth",
);

/**
 * Transparent file encryption in git
 */
export const git_crypt = mkPackage(
  nixRaw`pkgs.git-crypt`,
  "Transparent file encryption in git",
);

/**
 * Command-line tool to delete merged Git branches
 */
export const git_delete_merged_branches = mkPackage(
  nixRaw`pkgs.git-delete-merged-branches`,
  "Command-line tool to delete merged Git branches",
);

/**
 * Dive into a file's history to find root cause
 */
export const git_dive = mkPackage(
  nixRaw`pkgs.git-dive`,
  "Dive into a file's history to find root cause",
);

/**
 * Additional documentation for Git
 */
export const git_doc = mkPackage(
  nixRaw`pkgs.git-doc`,
  "Additional documentation for Git",
);

/**
 * GIT utilities -- repo summary, repl, changelog population, author commit percentages and more
 */
export const git_extras = mkPackage(
  nixRaw`pkgs.git-extras`,
  "GIT utilities -- repo summary, repl, changelog population, author commit percentages and more",
);

/**
 * A command-line tool that helps you summarize and pretty-print collaborators based on contributions

 */
export const git_fame = mkPackage(
  nixRaw`pkgs.git-fame`,
  "A command-line tool that helps you summarize and pretty-print collaborators based on contributions\n",
);

/**
 * Import mercurial into git
 */
export const git_fast_export = mkPackage(
  nixRaw`pkgs.git-fast-export`,
  "Import mercurial into git",
);

/**
 * Quickly rewrite git repository history
 */
export const git_filter_repo = mkPackage(
  nixRaw`pkgs.git-filter-repo`,
  "Quickly rewrite git repository history",
);

/**
 * Push ALL changes in a git repository

 */
export const git_fire = mkPackage(
  nixRaw`pkgs.git-fire`,
  "Push ALL changes in a git repository\n",
);

/**
 * Git powered FTP client written as shell script
 */
export const git_ftp = mkPackage(
  nixRaw`pkgs.git-ftp`,
  "Git powered FTP client written as shell script",
);

/**
 * A better way to clone, organize and manage multiple git repositories
 */
export const git_get = mkPackage(
  nixRaw`pkgs.git-get`,
  "A better way to clone, organize and manage multiple git repositories",
);

/**
 * Cleanup stale Git branches of merge requests
 */
export const git_gone = mkPackage(
  nixRaw`pkgs.git-gone`,
  "Cleanup stale Git branches of merge requests",
);

/**
 * Command line tool to show clear git graphs arranged for your branching model
 */
export const git_graph = mkPackage(
  nixRaw`pkgs.git-graph`,
  "Command line tool to show clear git graphs arranged for your branching model",
);

/**
 * Git command line interface to GitHub
 */
export const git_hub = mkPackage(
  nixRaw`pkgs.git-hub`,
  "Git command line interface to GitHub",
);

/**
 * Quickly and easily fetch .gitignore templates from gitignore.io
 */
export const git_ignore = mkPackage(
  nixRaw`pkgs.git-ignore`,
  "Quickly and easily fetch .gitignore templates from gitignore.io",
);

/**
 * Perform a merge between two branches incrementally
 */
export const git_imerge = mkPackage(
  nixRaw`pkgs.git-imerge`,
  "Perform a merge between two branches incrementally",
);

/**
 * Native cross platform full feature terminal based sequence editor for git interactive rebase
 */
export const git_interactive_rebase_tool = mkPackage(
  nixRaw`pkgs.git-interactive-rebase-tool`,
  "Native cross platform full feature terminal based sequence editor for git interactive rebase",
);

/**
 * View diff on LaTeX source files on the generated PDF files
 */
export const git_latexdiff = mkPackage(
  nixRaw`pkgs.git-latexdiff`,
  "View diff on LaTeX source files on the generated PDF files",
);

/**
 * Git extension for versioning large files
 */
export const git_lfs = mkPackage(
  nixRaw`pkgs.git-lfs`,
  "Git extension for versioning large files",
);

/**
 * Git repository organizer and rebase/merge workflow automation tool
 */
export const git_machete = mkPackage(
  nixRaw`pkgs.git-machete`,
  "Git repository organizer and rebase/merge workflow automation tool",
);

/**
 * Minimalist set of hooks to aid pairing and link commits to issues
 */
export const git_mit = mkPackage(
  nixRaw`pkgs.git-mit`,
  "Minimalist set of hooks to aid pairing and link commits to issues",
);

/**
 * List remote branches if they're merged and/or available locally
 */
export const git_my = mkPackage(
  nixRaw`pkgs.git-my`,
  "List remote branches if they're merged and/or available locally",
);

/**
 * Synchronize work-in-progress git branches in a light weight fashion
 */
export const git_nomad = mkPackage(
  nixRaw`pkgs.git-nomad`,
  "Synchronize work-in-progress git branches in a light weight fashion",
);

/**
 * The continuous merge workflow
 */
export const git_octopus = mkPackage(
  nixRaw`pkgs.git-octopus`,
  "The continuous merge workflow",
);

/**
 * Open the GitHub page or website for a repository in your browser
 */
export const git_open = mkPackage(
  nixRaw`pkgs.git-open`,
  "Open the GitHub page or website for a repository in your browser",
);

/**
 * Tool to redact Git author and committer dates
 */
export const git_privacy = mkPackage(
  nixRaw`pkgs.git-privacy`,
  "Tool to redact Git author and committer dates",
);

/**
 * Tool for working with a stack of patches
 */
export const git_ps_rs = mkPackage(
  nixRaw`pkgs.git-ps-rs`,
  "Tool for working with a stack of patches",
);

/**
 * Prepare and store patch revisions as git tags
 */
export const git_publish = mkPackage(
  nixRaw`pkgs.git-publish`,
  "Prepare and store patch revisions as git tags",
);

/**
 * A simple and efficient way to access various statistics in git repository
 */
export const git_quick_stats = mkPackage(
  nixRaw`pkgs.git-quick-stats`,
  "A simple and efficient way to access various statistics in git repository",
);

/**
 * Quickfix allows you to commit changes in your git repository to a new branch without leaving the current branch
 */
export const git_quickfix = mkPackage(
  nixRaw`pkgs.git-quickfix`,
  "Quickfix allows you to commit changes in your git repository to a new branch without leaving the current branch",
);

/**
 * A tool you can add to your prompt to provide at-a-glance information on your git repo
 */
export const git_radar = mkPackage(
  nixRaw`pkgs.git-radar`,
  "A tool you can add to your prompt to provide at-a-glance information on your git repo",
);

/**
 * See your latest local git branches, formatted real fancy
 */
export const git_recent = mkPackage(
  nixRaw`pkgs.git-recent`,
  "See your latest local git branches, formatted real fancy",
);

/**
 * Extract only relevant history from git repo
 */
export const git_relevant_history = mkPackage(
  nixRaw`pkgs.git-relevant-history`,
  "Extract only relevant history from git repo",
);

/**
 * Git remote prefix to simplify pushing to and pulling from CodeCommit
 */
export const git_remote_codecommit = mkPackage(
  nixRaw`pkgs.git-remote-codecommit`,
  "Git remote prefix to simplify pushing to and pulling from CodeCommit",
);

/**
 * A git remote helper for GPG-encrypted remotes
 */
export const git_remote_gcrypt = mkPackage(
  nixRaw`pkgs.git-remote-gcrypt`,
  "A git remote helper for GPG-encrypted remotes",
);

/**
 * Semi-official Mercurial bridge from Git project
 */
export const git_remote_hg = mkPackage(
  nixRaw`pkgs.git-remote-hg`,
  "Semi-official Mercurial bridge from Git project",
);

/**
 * Git command to recommit HEAD with a new set of parents
 */
export const git_reparent = mkPackage(
  nixRaw`pkgs.git-reparent`,
  "Git command to recommit HEAD with a new set of parents",
);

/**
 * Android's repo management tool
 */
export const git_repo = mkPackage(
  nixRaw`pkgs.git-repo`,
  "Android's repo management tool",
);

/**
 * Easily update multiple Git repositories at once
 */
export const git_repo_updater = mkPackage(
  nixRaw`pkgs.git-repo-updater`,
  "Easily update multiple Git repositories at once",
);

/**
 * Tool to submit code to Gerrit
 */
export const git_review = mkPackage(
  nixRaw`pkgs.git-review`,
  "Tool to submit code to Gerrit",
);

/**
 * Efficiently update, split, and rearrange git commits
 */
export const git_revise = mkPackage(
  nixRaw`pkgs.git-revise`,
  "Efficiently update, split, and rearrange git commits",
);

/**
 * A bash-tool to store your private data inside a git repository
 */
export const git_secret = mkPackage(
  nixRaw`pkgs.git-secret`,
  "A bash-tool to store your private data inside a git repository",
);

/**
 * Prevents you from committing secrets and credentials into git repositories
 */
export const git_secrets = mkPackage(
  nixRaw`pkgs.git-secrets`,
  "Prevents you from committing secrets and credentials into git repositories",
);

/**
 * A tool to help with formatting git patches for review on mailing lists
 */
export const git_series = mkPackage(
  nixRaw`pkgs.git-series`,
  "A tool to help with formatting git patches for review on mailing lists",
);

/**
 * Compute various size metrics for a Git repository
 */
export const git_sizer = mkPackage(
  nixRaw`pkgs.git-sizer`,
  "Compute various size metrics for a Git repository",
);

/**
 * Stacked branch management for Git
 */
export const git_stack = mkPackage(
  nixRaw`pkgs.git-stack`,
  "Stacked branch management for Git",
);

/**
 * Recall what you did on the last working day
 */
export const git_standup = mkPackage(
  nixRaw`pkgs.git-standup`,
  "Recall what you did on the last working day",
);

/**
 * A better Git subtree helper command
 */
export const git_stree = mkPackage(
  nixRaw`pkgs.git-stree`,
  "A better Git subtree helper command",
);

/**
 * Git submodule alternative
 */
export const git_subrepo = mkPackage(
  nixRaw`pkgs.git-subrepo`,
  "Git submodule alternative",
);

/**
 * Keep the content for your git submodules all in one place: the parent repo
 */
export const git_subtrac = mkPackage(
  nixRaw`pkgs.git-subtrac`,
  "Keep the content for your git submodules all in one place: the parent repo",
);

/**
 * A script to automatically synchronize a git repository
 */
export const git_sync = mkPackage(
  nixRaw`pkgs.git-sync`,
  "A script to automatically synchronize a git repository",
);

/**
 * Command line interface for managing and enhancing git commit messages with co-authors
 */
export const git_team = mkPackage(
  nixRaw`pkgs.git-team`,
  "Command line interface for managing and enhancing git commit messages with co-authors",
);

/**
 * Test your commits
 */
export const git_test = mkPackage(
  nixRaw`pkgs.git-test`,
  "Test your commits",
);

/**
 * Generic, high-level git support for git-flow workflows
 */
export const git_town = mkPackage(
  nixRaw`pkgs.git-town`,
  "Generic, high-level git support for git-flow workflows",
);

/**
 * Automatically trims your branches whose tracking remote refs are merged or gone
 */
export const git_trim = mkPackage(
  nixRaw`pkgs.git-trim`,
  "Automatically trims your branches whose tracking remote refs are merged or gone",
);

/**
 * A git pull replacement that rebases all local branches when pulling
 */
export const git_up = mkPackage(
  nixRaw`pkgs.git-up`,
  "A git pull replacement that rebases all local branches when pulling",
);

/**
 * Tool for creating commit hashes with a specific prefix
 */
export const git_vanity_hash = mkPackage(
  nixRaw`pkgs.git-vanity-hash`,
  "Tool for creating commit hashes with a specific prefix",
);

/**
 * A git command for managing vendored dependencies
 */
export const git_vendor = mkPackage(
  nixRaw`pkgs.git-vendor`,
  "A git command for managing vendored dependencies",
);

/**
 * Helps you figure out when and why a commit was merged into a branch
 */
export const git_when_merged = mkPackage(
  nixRaw`pkgs.git-when-merged`,
  "Helps you figure out when and why a commit was merged into a branch",
);

/**
 * Sync personal and work git repositories from multiple providers
 */
export const git_workspace = mkPackage(
  nixRaw`pkgs.git-workspace`,
  "Sync personal and work git repositories from multiple providers",
);

/**
 * A command-line tool to manage multiple git repos
 */
export const gita = mkPackage(
  nixRaw`pkgs.gita`,
  "A command-line tool to manage multiple git repos",
);

/**
 * A Git RPC service for handling all the git calls made by GitLab
 */
export const gitaly = mkPackage(
  nixRaw`pkgs.gitaly`,
  "A Git RPC service for handling all the git calls made by GitLab",
);

/**
 * Running git UI commands
 */
export const gitbatch = mkPackage(
  nixRaw`pkgs.gitbatch`,
  "Running git UI commands",
);

/**
 * Git with a cup of tea
 */
export const gitea = mkPackage(
  nixRaw`pkgs.gitea`,
  "Git with a cup of tea",
);

/**
 * A runner for Gitea based on act
 */
export const gitea_actions_runner = mkPackage(
  nixRaw`pkgs.gitea-actions-runner`,
  "A runner for Gitea based on act",
);

/**
 * Extend git with the Gitflow branching model
 */
export const gitflow = mkPackage(
  nixRaw`pkgs.gitflow`,
  "Extend git with the Gitflow branching model",
);

/**
 * A FUSE filesystem that fully integrates with git
 */
export const gitfs = mkPackage(
  nixRaw`pkgs.gitfs`,
  "A FUSE filesystem that fully integrates with git",
);

/**
 * GNOME GUI client to view git repositories
 */
export const gitg = mkPackage(
  nixRaw`pkgs.gitg`,
  "GNOME GUI client to view git repositories",
);

/**
 * Backup a github user or organization
 */
export const github_backup = mkPackage(
  nixRaw`pkgs.github-backup`,
  "Backup a github user or organization",
);

/**
 * Fully automated changelog generation - This gem generates a changelog file based on tags, issues and merged pull requests
 */
export const github_changelog_generator = mkPackage(
  nixRaw`pkgs.github-changelog-generator`,
  "Fully automated changelog generation - This gem generates a changelog file based on tags, issues and merged pull requests",
);

/**
 * GitHub CLI tool
 */
export const github_cli = mkPackage(
  nixRaw`pkgs.github-cli`,
  "GitHub CLI tool",
);

/**
 * Command line utility for creating GitHub comments on Commits, Pull Request Reviews or Issues
 */
export const github_commenter = mkPackage(
  nixRaw`pkgs.github-commenter`,
  "Command line utility for creating GitHub comments on Commits, Pull Request Reviews or Issues",
);

/**
 * A CLI experience for letting GitHub Copilot help you on the command line
 */
export const github_copilot_cli = mkPackage(
  nixRaw`pkgs.github-copilot-cli`,
  "A CLI experience for letting GitHub Copilot help you on the command line",
);

/**
 * The GitHub copilot IntelliJ plugin's native component
 */
export const github_copilot_intellij_agent = mkPackage(
  nixRaw`pkgs.github-copilot-intellij-agent`,
  "The GitHub copilot IntelliJ plugin's native component",
);

/**
 * GUI for managing Git and GitHub.
 */
export const github_desktop = mkPackage(
  nixRaw`pkgs.github-desktop`,
  "GUI for managing Git and GitHub.",
);

/**
 * Commandline app to create and edit releases on Github (and upload artifacts)
 */
export const github_release = mkPackage(
  nixRaw`pkgs.github-release`,
  "Commandline app to create and edit releases on Github (and upload artifacts)",
);

/**
 * Self-hosted runner for GitHub Actions
 */
export const github_runner = mkPackage(
  nixRaw`pkgs.github-runner`,
  "Self-hosted runner for GitHub Actions",
);

/**
 * Save data from GitHub to a SQLite database
 */
export const github_to_sqlite = mkPackage(
  nixRaw`pkgs.github-to-sqlite`,
  "Save data from GitHub to a SQLite database",
);

/**
 * Wiki using happstack, git or darcs, and pandoc
 */
export const gitit = mkPackage(
  nixRaw`pkgs.gitit`,
  "Wiki using happstack, git or darcs, and pandoc",
);

/**
 * Leak git repositories from misconfigured websites
 */
export const gitjacker = mkPackage(
  nixRaw`pkgs.gitjacker`,
  "Leak git repositories from misconfigured websites",
);

/**
 * The downright luxurious and most popular Git client for Windows, Mac & Linux
 */
export const gitkraken = mkPackage(
  nixRaw`pkgs.gitkraken`,
  "The downright luxurious and most popular Git client for Windows, Mac & Linux",
);

/**
 * GitLab Community Edition
 */
export const gitlab = mkPackage(
  nixRaw`pkgs.gitlab`,
  "GitLab Community Edition",
);

/**
 * Convert clippy warnings into GitLab Code Quality report
 */
export const gitlab_clippy = mkPackage(
  nixRaw`pkgs.gitlab-clippy`,
  "Convert clippy warnings into GitLab Code Quality report",
);

/**
 * The GitLab Docker toolset to pack, ship, store, and deliver content
 */
export const gitlab_container_registry = mkPackage(
  nixRaw`pkgs.gitlab-container-registry`,
  "The GitLab Docker toolset to pack, ship, store, and deliver content",
);

/**
 * GitLab Enterprise Edition
 */
export const gitlab_ee = mkPackage(
  nixRaw`pkgs.gitlab-ee`,
  "GitLab Enterprise Edition",
);

/**
 * Indexes Git repositories into Elasticsearch for GitLab.
 */
export const gitlab_elasticsearch_indexer = mkPackage(
  nixRaw`pkgs.gitlab-elasticsearch-indexer`,
  "Indexes Git repositories into Elasticsearch for GitLab.",
);

/**
 * Daemon used to serve static websites for GitLab users
 */
export const gitlab_pages = mkPackage(
  nixRaw`pkgs.gitlab-pages`,
  "Daemon used to serve static websites for GitLab users",
);

/**
 * GitLab Runner the continuous integration executor of GitLab
 */
export const gitlab_runner = mkPackage(
  nixRaw`pkgs.gitlab-runner`,
  "GitLab Runner the continuous integration executor of GitLab",
);

/**
 * SSH access and repository management app for GitLab
 */
export const gitlab_shell = mkPackage(
  nixRaw`pkgs.gitlab-shell`,
  "SSH access and repository management app for GitLab",
);

/**
 * GitLab's issues and merge requests triage, automated!
 */
export const gitlab_triage = mkPackage(
  nixRaw`pkgs.gitlab-triage`,
  "GitLab's issues and merge requests triage, automated!",
);

export const gitlab_workhorse = mkPackage(
  nixRaw`pkgs.gitlab-workhorse`,
  "",
);

/**
 * Scan git repos (or files) for secrets
 */
export const gitleaks = mkPackage(
  nixRaw`pkgs.gitleaks`,
  "Scan git repos (or files) for secrets",
);

/**
 * Version control system built on top of Git
 */
export const gitless = mkPackage(
  nixRaw`pkgs.gitless`,
  "Version control system built on top of Git",
);

/**
 * Linting for your git commit messages
 */
export const gitlint = mkPackage(
  nixRaw`pkgs.gitlint`,
  "Linting for your git commit messages",
);

/**
 * Tools to enumerate git repository URL
 */
export const gitls = mkPackage(
  nixRaw`pkgs.gitls`,
  "Tools to enumerate git repository URL",
);

/**
 * Gitmoji client for using emojis on commit messages
 */
export const gitmoji_cli = mkPackage(
  nixRaw`pkgs.gitmoji-cli`,
  "Gitmoji client for using emojis on commit messages",
);

/**
 * Git in your tmux status bar
 */
export const gitmux = mkPackage(
  nixRaw`pkgs.gitmux`,
  "Git in your tmux status bar",
);

/**
 * Create `.gitignore` files using one or more templates from TopTal, GitHub or your own collection
 */
export const gitnr = mkPackage(
  nixRaw`pkgs.gitnr`,
  "Create `.gitignore` files using one or more templates from TopTal, GitHub or your own collection",
);

/**
 * A FOSS Git multiplatform client based on Compose and JGit
 */
export const gitnuro = mkPackage(
  nixRaw`pkgs.gitnuro`,
  "A FOSS Git multiplatform client based on Compose and JGit",
);

/**
 * Finely-grained git repository hosting
 */
export const gitolite = mkPackage(
  nixRaw`pkgs.gitolite`,
  "Finely-grained git repository hosting",
);

/**
 * A command-line application for interacting with git repositories
 */
export const gitoxide = mkPackage(
  nixRaw`pkgs.gitoxide`,
  "A command-line application for interacting with git repositories",
);

/**
 * Simple Git prompt
 */
export const gitprompt_rs = mkPackage(
  nixRaw`pkgs.gitprompt-rs`,
  "Simple Git prompt",
);

/**
 * Multi-platform Git client written with Qt
 */
export const gitqlient = mkPackage(
  nixRaw`pkgs.gitqlient`,
  "Multi-platform Git client written with Qt",
);

/**
 * A simple, opinionated, tool, written in Rust, for declaratively managing Git repos on your machine
 */
export const gitrs = mkPackage(
  nixRaw`pkgs.gitrs`,
  "A simple, opinionated, tool, written in Rust, for declaratively managing Git repos on your machine",
);

/**
 * Keyless Git signing using Sigstore
 */
export const gitsign = mkPackage(
  nixRaw`pkgs.gitsign`,
  "Keyless Git signing using Sigstore",
);

/**
 * Git history statistics generator
 */
export const gitstats = mkPackage(
  nixRaw`pkgs.gitstats`,
  "Git history statistics generator",
);

/**
 * 10x faster implementation of `git status` command
 */
export const gitstatus = mkPackage(
  nixRaw`pkgs.gitstatus`,
  "10x faster implementation of `git status` command",
);

/**
 * Contextual information about your git projects, right on the command-line
 */
export const gitty = mkPackage(
  nixRaw`pkgs.gitty`,
  "Contextual information about your git projects, right on the command-line",
);

/**
 * A graphical Git client designed to help you understand and manage your source code history
 */
export const gittyup = mkPackage(
  nixRaw`pkgs.gittyup`,
  "A graphical Git client designed to help you understand and manage your source code history",
);

/**
 * Blazing fast terminal-ui for Git written in Rust
 */
export const gitui = mkPackage(
  nixRaw`pkgs.gitui`,
  "Blazing fast terminal-ui for Git written in Rust",
);

/**
 * Distributed version control system
 */
export const gitweb = mkPackage(
  nixRaw`pkgs.gitweb`,
  "Distributed version control system",
);

/**
 * A C++ library for arithmetic and algebraic computations
 */
export const givaro = mkPackage(
  nixRaw`pkgs.givaro`,
  "A C++ library for arithmetic and algebraic computations",
);

/**
 * A C++ library for arithmetic and algebraic computations
 */
export const givaro_3 = mkPackage(
  nixRaw`pkgs.givaro_3`,
  "A C++ library for arithmetic and algebraic computations",
);

/**
 * A C++ library for arithmetic and algebraic computations
 */
export const givaro_3_7 = mkPackage(
  nixRaw`pkgs.givaro_3_7`,
  "A C++ library for arithmetic and algebraic computations",
);

/**
 * Nginx configuration static analyzer
 */
export const gixy = mkPackage(
  nixRaw`pkgs.gixy`,
  "Nginx configuration static analyzer",
);

/**
 * Generates playlists such that each song sounds good following the previous song
 */
export const gjay = mkPackage(
  nixRaw`pkgs.gjay`,
  "Generates playlists such that each song sounds good following the previous song",
);

/**
 * Small utility to create JSON objects
 */
export const gjo = mkPackage(
  nixRaw`pkgs.gjo`,
  "Small utility to create JSON objects",
);

/**
 * JavaScript bindings for GNOME
 */
export const gjs = mkPackage(
  nixRaw`pkgs.gjs`,
  "JavaScript bindings for GNOME",
);

/**
 * GUI that allows to control the cooling (fan and/or pump profiles) of NZXT Kraken AIO liquid coolers from Linux
 */
export const gkraken = mkPackage(
  nixRaw`pkgs.gkraken`,
  "GUI that allows to control the cooling (fan and/or pump profiles) of NZXT Kraken AIO liquid coolers from Linux",
);

/**
 * Themeable process stack of system monitors
 */
export const gkrellm = mkPackage(
  nixRaw`pkgs.gkrellm`,
  "Themeable process stack of system monitors",
);

/**
 * An air combat simulator
 */
export const gl117 = mkPackage(
  nixRaw`pkgs.gl117`,
  "An air combat simulator",
);

/**
 * An OpenGL to PostScript printing library
 */
export const gl2ps = mkPackage(
  nixRaw`pkgs.gl2ps`,
  "An OpenGL to PostScript printing library",
);

/**
 * Simple OpenGL core profile loading
 */
export const gl3w = mkPackage(
  nixRaw`pkgs.gl3w`,
  "Simple OpenGL core profile loading",
);

/**
 * A very basic OpenGL demo for testing NVIDIA's G-SYNC technology on Linux
 */
export const gl_gsync_demo = mkPackage(
  nixRaw`pkgs.gl-gsync-demo`,
  "A very basic OpenGL demo for testing NVIDIA's G-SYNC technology on Linux",
);

/**
 * GitLab CLI tool bringing GitLab to your command line
 */
export const glab = mkPackage(
  nixRaw`pkgs.glab`,
  "GitLab CLI tool bringing GitLab to your command line",
);

/**
 * Create labels and business cards
 */
export const glabels = mkPackage(
  nixRaw`pkgs.glabels`,
  "Create labels and business cards",
);

/**
 * GLabels Label Designer (Qt/C++)
 */
export const glabels_qt = mkPackage(
  nixRaw`pkgs.glabels-qt`,
  "GLabels Label Designer (Qt/C++)",
);

/**
 * User interface designer for GTK applications
 */
export const glade = mkPackage(
  nixRaw`pkgs.glade`,
  "User interface designer for GTK applications",
);

/**
 * Embed LaTeX formulas into HTML documents as SVG images
 */
export const gladtex = mkPackage(
  nixRaw`pkgs.gladtex`,
  "Embed LaTeX formulas into HTML documents as SVG images",
);

/**
 * The GlamorousToolkit Development Environment
 */
export const glamoroustoolkit = mkPackage(
  nixRaw`pkgs.glamoroustoolkit`,
  "The GlamorousToolkit Development Environment",
);

/**
 * Python bindings for the OpenStack Images API
 */
export const glanceclient = mkPackage(
  nixRaw`pkgs.glanceclient`,
  "Python bindings for the OpenStack Images API",
);

/**
 * Cross-platform curses-based monitoring tool
 */
export const glances = mkPackage(
  nixRaw`pkgs.glances`,
  "Cross-platform curses-based monitoring tool",
);

/**
 * Software for Glasgow, a digital interface multitool
 */
export const glasgow = mkPackage(
  nixRaw`pkgs.glasgow`,
  "Software for Glasgow, a digital interface multitool",
);

/**
 * TrueType VT220 font
 */
export const glasstty_ttf = mkPackage(
  nixRaw`pkgs.glasstty-ttf`,
  "TrueType VT220 font",
);

/**
 * OpenGL audio spectrum visualizer

 */
export const glava = mkPackage(
  nixRaw`pkgs.glava`,
  "OpenGL audio spectrum visualizer\n",
);

/**
 * Simple vector animation program.
 */
export const glaxnimate = mkPackage(
  nixRaw`pkgs.glaxnimate`,
  "Simple vector animation program.",
);

/**
 * A C++ binding for the OpenGL API, generated using the gl.xml specification
 */
export const glbinding = mkPackage(
  nixRaw`pkgs.glbinding`,
  "A C++ binding for the OpenGL API, generated using the gl.xml specification",
);

/**
 * Tubing and extrusion library
 */
export const gle = mkPackage(
  nixRaw`pkgs.gle`,
  "Tubing and extrusion library",
);

/**
 * A statically typed language for the Erlang VM
 */
export const gleam = mkPackage(
  nixRaw`pkgs.gleam`,
  "A statically typed language for the Erlang VM",
);

/**
 * GL Easy Extension Library
 */
export const glee = mkPackage(
  nixRaw`pkgs.glee`,
  "GL Easy Extension Library",
);

/**
 * An OpenGL extension loading library for C/C++
 */
export const glew = mkPackage(
  nixRaw`pkgs.glew`,
  "An OpenGL extension loading library for C/C++",
);

/**
 * An OpenGL extension loading library for C(++)
 */
export const glew110 = mkPackage(
  nixRaw`pkgs.glew110`,
  "An OpenGL extension loading library for C(++)",
);

/**
 * An OpenGL extension loading library for C/C++
 */
export const glew_egl = mkPackage(
  nixRaw`pkgs.glew-egl`,
  "An OpenGL extension loading library for C/C++",
);

/**
 * Multi-platform library for creating OpenGL contexts and managing input, including keyboard, mouse, joystick and time
 */
export const glfw = mkPackage(
  nixRaw`pkgs.glfw`,
  "Multi-platform library for creating OpenGL contexts and managing input, including keyboard, mouse, joystick and time",
);

/**
 * Multi-platform library for creating OpenGL contexts and managing input, including keyboard, mouse, joystick and time
 */
export const glfw2 = mkPackage(
  nixRaw`pkgs.glfw2`,
  "Multi-platform library for creating OpenGL contexts and managing input, including keyboard, mouse, joystick and time",
);

/**
 * Multi-platform library for creating OpenGL contexts and managing input, including keyboard, mouse, joystick and time
 */
export const glfw3 = mkPackage(
  nixRaw`pkgs.glfw3`,
  "Multi-platform library for creating OpenGL contexts and managing input, including keyboard, mouse, joystick and time",
);

/**
 * Multi-platform library for creating OpenGL contexts and managing input, including keyboard, mouse, joystick and time
 */
export const glfw_wayland = mkPackage(
  nixRaw`pkgs.glfw-wayland`,
  "Multi-platform library for creating OpenGL contexts and managing input, including keyboard, mouse, joystick and time",
);

/**
 * Multi-platform library for creating OpenGL contexts and managing input, including keyboard, mouse, joystick and time - with patches to support Minecraft on Wayland
 */
export const glfw_wayland_minecraft = mkPackage(
  nixRaw`pkgs.glfw-wayland-minecraft`,
  "Multi-platform library for creating OpenGL contexts and managing input, including keyboard, mouse, joystick and time - with patches to support Minecraft on Wayland",
);

/**
 * C library of programming buildings blocks
 */
export const glib = mkPackage(
  nixRaw`pkgs.glib`,
  "C library of programming buildings blocks",
);

/**
 * Network-related giomodules for glib
 */
export const glib_networking = mkPackage(
  nixRaw`pkgs.glib-networking`,
  "Network-related giomodules for glib",
);

/**
 * Test library providing test harnesses and mock classes complementing the classes provided by GLib
 */
export const glib_testing = mkPackage(
  nixRaw`pkgs.glib-testing`,
  "Test library providing test harnesses and mock classes complementing the classes provided by GLib",
);

/**
 * The GNU C Library
 */
export const glibc = mkPackage(
  nixRaw`pkgs.glibc`,
  "The GNU C Library",
);

/**
 * The GNU C Library
 */
export const glibcCross = mkPackage(
  nixRaw`pkgs.glibcCross`,
  "The GNU C Library",
);

/**
 * GNU Info manual of the GNU C Library
 */
export const glibcInfo = mkPackage(
  nixRaw`pkgs.glibcInfo`,
  "GNU Info manual of the GNU C Library",
);

/**
 * Locale information for the GNU C Library
 */
export const glibcLocales = mkPackage(
  nixRaw`pkgs.glibcLocales`,
  "Locale information for the GNU C Library",
);

/**
 * Locale information for the GNU C Library
 */
export const glibcLocalesUtf8 = mkPackage(
  nixRaw`pkgs.glibcLocalesUtf8`,
  "Locale information for the GNU C Library",
);

/**
 * The GNU C Library
 */
export const glibc_memusage = mkPackage(
  nixRaw`pkgs.glibc_memusage`,
  "The GNU C Library",
);

export const glibc_multi = mkPackage(
  nixRaw`pkgs.glibc_multi`,
  "",
);

/**
 * C++ interface to the GLib library
 */
export const glibmm = mkPackage(
  nixRaw`pkgs.glibmm`,
  "C++ interface to the GLib library",
);

/**
 * C++ interface to the GLib library
 */
export const glibmm_2_68 = mkPackage(
  nixRaw`pkgs.glibmm_2_68`,
  "C++ interface to the GLib library",
);

/**
 * Cross-platform music live coding in terminal
 */
export const glicol_cli = mkPackage(
  nixRaw`pkgs.glicol-cli`,
  "Cross-platform music live coding in terminal",
);

/**
 * Package management for Go
 */
export const glide = mkPackage(
  nixRaw`pkgs.glide`,
  "Package management for Go",
);

/**
 * Console IRC client
 */
export const glirc = mkPackage(
  nixRaw`pkgs.glirc`,
  "Console IRC client",
);

/**
 * A git wrapper that allows you to compress multiple commands into one
 */
export const glitter = mkPackage(
  nixRaw`pkgs.glitter`,
  "A git wrapper that allows you to compress multiple commands into one",
);

/**
 * Whole Program LLVM: wllvm ported to go
 */
export const gllvm = mkPackage(
  nixRaw`pkgs.gllvm`,
  "Whole Program LLVM: wllvm ported to go",
);

/**
 * OpenGL Mathematics library for C++
 */
export const glm = mkPackage(
  nixRaw`pkgs.glm`,
  "OpenGL Mathematics library for C++",
);

/**
 * OpenGL (ES) 2.0 benchmark
 */
export const glmark2 = mkPackage(
  nixRaw`pkgs.glmark2`,
  "OpenGL (ES) 2.0 benchmark",
);

/**
 * Source code tag system
 */
export const global = mkPackage(
  nixRaw`pkgs.global`,
  "Source code tag system",
);

/**
 * Command-line utility for managing applets and keys on Java Cards
 */
export const global_platform_pro = mkPackage(
  nixRaw`pkgs.global-platform-pro`,
  "Command-line utility for managing applets and keys on Java Cards",
);

/**
 * Global Arrays Programming Models
 */
export const globalarrays = mkPackage(
  nixRaw`pkgs.globalarrays`,
  "Global Arrays Programming Models",
);

/**
 * A simple CLI tool to run networking commands remotely from hundreds of globally distributed servers
 */
export const globalping_cli = mkPackage(
  nixRaw`pkgs.globalping-cli`,
  "A simple CLI tool to run networking commands remotely from hundreds of globally distributed servers",
);

/**
 * GlobalProtect VPN client (GUI) for Linux based on OpenConnect that supports SAML auth mode
 */
export const globalprotect_openconnect = mkPackage(
  nixRaw`pkgs.globalprotect-openconnect`,
  "GlobalProtect VPN client (GUI) for Linux based on OpenConnect that supports SAML auth mode",
);

/**
 * Display an interactive ASCII globe in your terminal
 */
export const globe_cli = mkPackage(
  nixRaw`pkgs.globe-cli`,
  "Display an interactive ASCII globe in your terminal",
);

/**
 * RTS without micromanagement
 */
export const globulation2 = mkPackage(
  nixRaw`pkgs.globulation2`,
  "RTS without micromanagement",
);

/**
 * A command-line tool to lock Go dependencies to specific revisions
 */
export const glock = mkPackage(
  nixRaw`pkgs.glock`,
  "A command-line tool to lock Go dependencies to specific revisions",
);

/**
 * Library for application-level logging
 */
export const glog = mkPackage(
  nixRaw`pkgs.glog`,
  "Library for application-level logging",
);

/**
 * The fast, smart log explorer
 */
export const glogg = mkPackage(
  nixRaw`pkgs.glogg`,
  "The fast, smart log explorer",
);

/**
 * An easy-to-use database designer and user interface
 */
export const glom = mkPackage(
  nixRaw`pkgs.glom`,
  "An easy-to-use database designer and user interface",
);

/**
 * glooctl is the unified CLI for Gloo
 */
export const glooctl = mkPackage(
  nixRaw`pkgs.glooctl`,
  "glooctl is the unified CLI for Gloo",
);

/**
 * A portable high-level Jabber/XMPP library for C++
 */
export const gloox = mkPackage(
  nixRaw`pkgs.gloox`,
  "A portable high-level Jabber/XMPP library for C++",
);

/**
 * Render markdown on the CLI, with pizzazz!
 */
export const glow = mkPackage(
  nixRaw`pkgs.glow`,
  "Render markdown on the CLI, with pizzazz!",
);

/**
 * Glow: language for safe Decentralized Applications (DApps)
 */
export const glow_lang = mkPackage(
  nixRaw`pkgs.glow-lang`,
  "Glow: language for safe Decentralized Applications (DApps)",
);

/**
 * A web client for Weechat
 */
export const glowing_bear = mkPackage(
  nixRaw`pkgs.glowing-bear`,
  "A web client for Weechat",
);

/**
 * Wallpaper program for wlroots based Wayland compositors such as sway that allows you to render glsl shaders as your wallpaper
 */
export const glpaper = mkPackage(
  nixRaw`pkgs.glpaper`,
  "Wallpaper program for wlroots based Wayland compositors such as sway that allows you to render glsl shaders as your wallpaper",
);

/**
 * The GNU Linear Programming Kit
 */
export const glpk = mkPackage(
  nixRaw`pkgs.glpk`,
  "The GNU Linear Programming Kit",
);

/**
 * PNG loader library for OpenGL
 */
export const glpng = mkPackage(
  nixRaw`pkgs.glpng`,
  "PNG loader library for OpenGL",
);

/**
 * Khronos reference front-end for GLSL and ESSL
 */
export const glslang = mkPackage(
  nixRaw`pkgs.glslang`,
  "Khronos reference front-end for GLSL and ESSL",
);

/**
 * A language server implementation for GLSL
 */
export const glslls = mkPackage(
  nixRaw`pkgs.glslls`,
  "A language server implementation for GLSL",
);

/**
 * Live GLSL coding renderer
 */
export const glslviewer = mkPackage(
  nixRaw`pkgs.glslviewer`,
  "Live GLSL coding renderer",
);

/**
 * A program to draw implicit surfaces and curves
 */
export const glsurf = mkPackage(
  nixRaw`pkgs.glsurf`,
  "A program to draw implicit surfaces and curves",
);

/**
 * Game based on the movie Tron
 */
export const gltron = mkPackage(
  nixRaw`pkgs.gltron`,
  "Game based on the movie Tron",
);

/**
 * Modern, parallel SAT solver (sequential version)
 */
export const glucose = mkPackage(
  nixRaw`pkgs.glucose`,
  "Modern, parallel SAT solver (sequential version)",
);

/**
 * Modern, parallel SAT solver (parallel version)
 */
export const glucose_syrup = mkPackage(
  nixRaw`pkgs.glucose-syrup`,
  "Modern, parallel SAT solver (parallel version)",
);

/**
 * GlueSQL is quite sticky. It attaches to anywhere.
 */
export const gluesql = mkPackage(
  nixRaw`pkgs.gluesql`,
  "GlueSQL is quite sticky. It attaches to anywhere.",
);

/**
 * A user interface library using OpenGL
 */
export const glui = mkPackage(
  nixRaw`pkgs.glui`,
  "A user interface library using OpenGL",
);

/**
 * Distributed storage system
 */
export const glusterfs = mkPackage(
  nixRaw`pkgs.glusterfs`,
  "Distributed storage system",
);

/**
 * Test utilities for OpenGL
 */
export const glxinfo = mkPackage(
  nixRaw`pkgs.glxinfo`,
  "Test utilities for OpenGL",
);

/**
 * A music related metadata searchengine
 */
export const glyr = mkPackage(
  nixRaw`pkgs.glyr`,
  "A music related metadata searchengine",
);

/**
 * Garry's Mod Addon Creator and Extractor
 */
export const gmad = mkPackage(
  nixRaw`pkgs.gmad`,
  "Garry's Mod Addon Creator and Extractor",
);

/**
 * Declarative configuration for Gmail filters
 */
export const gmailctl = mkPackage(
  nixRaw`pkgs.gmailctl`,
  "Declarative configuration for Gmail filters",
);

/**
 * Open and full-featured framework for image processing
 */
export const gmic = mkPackage(
  nixRaw`pkgs.gmic`,
  "Open and full-featured framework for image processing",
);

/**
 * Versatile front-end to the image processing framework G'MIC
 */
export const gmic_qt = mkPackage(
  nixRaw`pkgs.gmic-qt`,
  "Versatile front-end to the image processing framework G'MIC",
);

/**
 * Simple and secure Gemini server
 */
export const gmid = mkPackage(
  nixRaw`pkgs.gmid`,
  "Simple and secure Gemini server",
);

/**
 * A C/C++ library for creating, editing and parsing MIME messages and structures
 */
export const gmime = mkPackage(
  nixRaw`pkgs.gmime`,
  "A C/C++ library for creating, editing and parsing MIME messages and structures",
);

/**
 * A C/C++ library for creating, editing and parsing MIME messages and structures
 */
export const gmime2 = mkPackage(
  nixRaw`pkgs.gmime2`,
  "A C/C++ library for creating, editing and parsing MIME messages and structures",
);

/**
 * A C/C++ library for creating, editing and parsing MIME messages and structures
 */
export const gmime3 = mkPackage(
  nixRaw`pkgs.gmime3`,
  "A C/C++ library for creating, editing and parsing MIME messages and structures",
);

/**
 * Generic C++ template library for sparse, dense and skyline matrices
 */
export const gmm = mkPackage(
  nixRaw`pkgs.gmm`,
  "Generic C++ template library for sparse, dense and skyline matrices",
);

/**
 * A Gemini client
 */
export const gmni = mkPackage(
  nixRaw`pkgs.gmni`,
  "A Gemini client",
);

/**
 * A simple Gemini protocol server
 */
export const gmnisrv = mkPackage(
  nixRaw`pkgs.gmnisrv`,
  "A simple Gemini protocol server",
);

/**
 * Gemini text to HTML converter
 */
export const gmnitohtml = mkPackage(
  nixRaw`pkgs.gmnitohtml`,
  "Gemini text to HTML converter",
);

/**
 * GNU multiple precision arithmetic library
 */
export const gmp = mkPackage(
  nixRaw`pkgs.gmp`,
  "GNU multiple precision arithmetic library",
);

/**
 * GNU multiple precision arithmetic library
 */
export const gmp4 = mkPackage(
  nixRaw`pkgs.gmp4`,
  "GNU multiple precision arithmetic library",
);

/**
 * GNU multiple precision arithmetic library
 */
export const gmp5 = mkPackage(
  nixRaw`pkgs.gmp5`,
  "GNU multiple precision arithmetic library",
);

/**
 * GNU multiple precision arithmetic library
 */
export const gmp6 = mkPackage(
  nixRaw`pkgs.gmp6`,
  "GNU multiple precision arithmetic library",
);

/**
 * A GTK2 frontend for Music Player Daemon
 */
export const gmpc = mkPackage(
  nixRaw`pkgs.gmpc`,
  "A GTK2 frontend for Music Player Daemon",
);

/**
 * GNU multiple precision arithmetic library
 */
export const gmpxx = mkPackage(
  nixRaw`pkgs.gmpxx`,
  "GNU multiple precision arithmetic library",
);

/**
 * A modern QuakeC compiler
 */
export const gmqcc = mkPackage(
  nixRaw`pkgs.gmqcc`,
  "A modern QuakeC compiler",
);

/**
 * Resource efficient UPnP/DLNA renderer, optimal for Raspberry Pi, CuBox or a general MediaServer
 */
export const gmrender_resurrect = mkPackage(
  nixRaw`pkgs.gmrender-resurrect`,
  "Resource efficient UPnP/DLNA renderer, optimal for Raspberry Pi, CuBox or a general MediaServer",
);

/**
 * Gnome Completion-Run Utility
 */
export const gmrun = mkPackage(
  nixRaw`pkgs.gmrun`,
  "Gnome Completion-Run Utility",
);

/**
 * A three-dimensional finite element mesh generator
 */
export const gmsh = mkPackage(
  nixRaw`pkgs.gmsh`,
  "A three-dimensional finite element mesh generator",
);

/**
 * Tools for manipulating geographic and cartesian data sets
 */
export const gmt = mkPackage(
  nixRaw`pkgs.gmt`,
  "Tools for manipulating geographic and cartesian data sets",
);

/**
 * Common functions for gnome-mplayer and gecko-mediaplayer
 */
export const gmtk = mkPackage(
  nixRaw`pkgs.gmtk`,
  "Common functions for gnome-mplayer and gecko-mediaplayer",
);

/**
 * A simple MP3 and Media player client for UNIX and UNIX like systems
 */
export const gmtp = mkPackage(
  nixRaw`pkgs.gmtp`,
  "A simple MP3 and Media player client for UNIX and UNIX like systems",
);

/**
 * Open source music player for portable gaming consoles and handhelds
 */
export const gmu = mkPackage(
  nixRaw`pkgs.gmu`,
  "Open source music player for portable gaming consoles and handhelds",
);

/**
 * A meta-build system that generates build files for Ninja
 */
export const gn = mkPackage(
  nixRaw`pkgs.gn`,
  "A meta-build system that generates build files for Ninja",
);

/**
 * A meta-build system that generates build files for Ninja
 */
export const gn1924 = mkPackage(
  nixRaw`pkgs.gn1924`,
  "A meta-build system that generates build files for Ninja",
);

/**
 * GNU Compiler Collection, version 12.3.0 (wrapper script)
 */
export const gnat = mkPackage(
  nixRaw`pkgs.gnat`,
  "GNU Compiler Collection, version 12.3.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 11.4.0 (wrapper script)
 */
export const gnat11 = mkPackage(
  nixRaw`pkgs.gnat11`,
  "GNU Compiler Collection, version 11.4.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 12.3.0 (wrapper script)
 */
export const gnat12 = mkPackage(
  nixRaw`pkgs.gnat12`,
  "GNU Compiler Collection, version 12.3.0 (wrapper script)",
);

/**
 * GNU Compiler Collection, version 13.2.0 (wrapper script)
 */
export const gnat13 = mkPackage(
  nixRaw`pkgs.gnat13`,
  "GNU Compiler Collection, version 13.2.0 (wrapper script)",
);

/**
 * GNAT, the GNU Ada Translator (wrapper script)
 */
export const gnat_bootstrap = mkPackage(
  nixRaw`pkgs.gnat-bootstrap`,
  "GNAT, the GNU Ada Translator (wrapper script)",
);

/**
 * GNAT, the GNU Ada Translator (wrapper script)
 */
export const gnat_bootstrap11 = mkPackage(
  nixRaw`pkgs.gnat-bootstrap11`,
  "GNAT, the GNU Ada Translator (wrapper script)",
);

/**
 * GNAT, the GNU Ada Translator (wrapper script)
 */
export const gnat_bootstrap12 = mkPackage(
  nixRaw`pkgs.gnat-bootstrap12`,
  "GNAT, the GNU Ada Translator (wrapper script)",
);

/**
 * GNAT Components Collection - Core packages
 */
export const gnatcoll_core = mkPackage(
  nixRaw`pkgs.gnatcoll-core`,
  "GNAT Components Collection - Core packages",
);

/**
 * GNAT Components Collection - Database packages
 */
export const gnatcoll_db2ada = mkPackage(
  nixRaw`pkgs.gnatcoll-db2ada`,
  "GNAT Components Collection - Database packages",
);

/**
 * GNAT Components Collection - Bindings to C libraries
 */
export const gnatcoll_gmp = mkPackage(
  nixRaw`pkgs.gnatcoll-gmp`,
  "GNAT Components Collection - Bindings to C libraries",
);

/**
 * GNAT Components Collection - Bindings to C libraries
 */
export const gnatcoll_iconv = mkPackage(
  nixRaw`pkgs.gnatcoll-iconv`,
  "GNAT Components Collection - Bindings to C libraries",
);

/**
 * GNAT Components Collection - Bindings to C libraries
 */
export const gnatcoll_lzma = mkPackage(
  nixRaw`pkgs.gnatcoll-lzma`,
  "GNAT Components Collection - Bindings to C libraries",
);

/**
 * GNAT Components Collection - Bindings to C libraries
 */
export const gnatcoll_omp = mkPackage(
  nixRaw`pkgs.gnatcoll-omp`,
  "GNAT Components Collection - Bindings to C libraries",
);

/**
 * GNAT Components Collection - Database packages
 */
export const gnatcoll_postgres = mkPackage(
  nixRaw`pkgs.gnatcoll-postgres`,
  "GNAT Components Collection - Database packages",
);

/**
 * GNAT Components Collection - Bindings to C libraries
 */
export const gnatcoll_python3 = mkPackage(
  nixRaw`pkgs.gnatcoll-python3`,
  "GNAT Components Collection - Bindings to C libraries",
);

/**
 * GNAT Components Collection - Bindings to C libraries
 */
export const gnatcoll_readline = mkPackage(
  nixRaw`pkgs.gnatcoll-readline`,
  "GNAT Components Collection - Bindings to C libraries",
);

/**
 * GNAT Components Collection - Database packages
 */
export const gnatcoll_sql = mkPackage(
  nixRaw`pkgs.gnatcoll-sql`,
  "GNAT Components Collection - Database packages",
);

/**
 * GNAT Components Collection - Database packages
 */
export const gnatcoll_sqlite = mkPackage(
  nixRaw`pkgs.gnatcoll-sqlite`,
  "GNAT Components Collection - Database packages",
);

/**
 * GNAT Components Collection - Bindings to C libraries
 */
export const gnatcoll_syslog = mkPackage(
  nixRaw`pkgs.gnatcoll-syslog`,
  "GNAT Components Collection - Bindings to C libraries",
);

/**
 * GNAT Components Collection - Database packages
 */
export const gnatcoll_xref = mkPackage(
  nixRaw`pkgs.gnatcoll-xref`,
  "GNAT Components Collection - Database packages",
);

/**
 * GNAT Components Collection - Bindings to C libraries
 */
export const gnatcoll_zlib = mkPackage(
  nixRaw`pkgs.gnatcoll-zlib`,
  "GNAT Components Collection - Bindings to C libraries",
);

/**
 * GNAT Components Collection - Database packages
 */
export const gnatinspect = mkPackage(
  nixRaw`pkgs.gnatinspect`,
  "GNAT Components Collection - Database packages",
);

/**
 * Programmable auditory binaural-beat synthesizer
 */
export const gnaural = mkPackage(
  nixRaw`pkgs.gnaural`,
  "Programmable auditory binaural-beat synthesizer",
);

/**
 * A network library, written in C, object-oriented, and built upon GLib
 */
export const gnet = mkPackage(
  nixRaw`pkgs.gnet`,
  "A network library, written in C, object-oriented, and built upon GLib",
);

/**
 * Reverse tethering over adb for Android
 */
export const gnirehtet = mkPackage(
  nixRaw`pkgs.gnirehtet`,
  "Reverse tethering over adb for Android",
);

/**
 * gNMI CLI client and collector
 */
export const gnmic = mkPackage(
  nixRaw`pkgs.gnmic`,
  "gNMI CLI client and collector",
);

/**
 * Obtain the 2048 tile
 */
export const gnome_2048 = mkPackage(
  nixRaw`pkgs.gnome-2048`,
  "Obtain the 2048 tile",
);

/**
 * Native host connector for the GNOME Shell browser extension
 */
export const gnome_browser_connector = mkPackage(
  nixRaw`pkgs.gnome-browser-connector`,
  "Native host connector for the GNOME Shell browser extension",
);

/**
 * An IDE for writing GNOME-based software
 */
export const gnome_builder = mkPackage(
  nixRaw`pkgs.gnome-builder`,
  "An IDE for writing GNOME-based software",
);

/**
 * A remote desktop client for the GNOME desktop environment
 */
export const gnome_connections = mkPackage(
  nixRaw`pkgs.gnome-connections`,
  "A remote desktop client for the GNOME desktop environment",
);

/**
 * Simple user-friendly terminal emulator for the GNOME desktop
 */
export const gnome_console = mkPackage(
  nixRaw`pkgs.gnome-console`,
  "Simple user-friendly terminal emulator for the GNOME desktop",
);

/**
 * Scan and Generate QR Codes
 */
export const gnome_decoder = mkPackage(
  nixRaw`pkgs.gnome-decoder`,
  "Scan and Generate QR Codes",
);

/**
 * Library with common API for various GNOME modules
 */
export const gnome_desktop = mkPackage(
  nixRaw`pkgs.gnome-desktop`,
  "Library with common API for various GNOME modules",
);

/**
 * GNOME test runner for installed tests
 */
export const gnome_desktop_testing = mkPackage(
  nixRaw`pkgs.gnome-desktop-testing`,
  "GNOME test runner for installed tests",
);

/**
 * Collection of documentation utilities for the GNOME project
 */
export const gnome_doc_utils = mkPackage(
  nixRaw`pkgs.gnome-doc-utils`,
  "Collection of documentation utilities for the GNOME project",
);

/**
 * Thumbnailer for EPub and MOBI books
 */
export const gnome_epub_thumbnailer = mkPackage(
  nixRaw`pkgs.gnome-epub-thumbnailer`,
  "Thumbnailer for EPub and MOBI books",
);

/**
 * Desktop app for managing GNOME shell extensions
 */
export const gnome_extension_manager = mkPackage(
  nixRaw`pkgs.gnome-extension-manager`,
  "Desktop app for managing GNOME shell extensions",
);

/**
 * Command line tool to manage your GNOME Shell extensions
 */
export const gnome_extensions_cli = mkPackage(
  nixRaw`pkgs.gnome-extensions-cli`,
  "Command line tool to manage your GNOME Shell extensions",
);

/**
 * An RSS/Atom feed reader for GNOME
 */
export const gnome_feeds = mkPackage(
  nixRaw`pkgs.gnome-feeds`,
  "An RSS/Atom feed reader for GNOME",
);

/**
 * Tool for installing firmware on devices
 */
export const gnome_firmware = mkPackage(
  nixRaw`pkgs.gnome-firmware`,
  "Tool for installing firmware on devices",
);

/**
 * Intuitive text extraction tool (OCR) for GNOME desktop
 */
export const gnome_frog = mkPackage(
  nixRaw`pkgs.gnome-frog`,
  "Intuitive text extraction tool (OCR) for GNOME desktop",
);

/**
 * Gthree port of HexGL
 */
export const gnome_hexgl = mkPackage(
  nixRaw`pkgs.gnome-hexgl`,
  "Gthree port of HexGL",
);

/**
 * Collection of icons for the GNOME 2 desktop
 */
export const gnome_icon_theme = mkPackage(
  nixRaw`pkgs.gnome-icon-theme`,
  "Collection of icons for the GNOME 2 desktop",
);

/**
 * Inform 7 for the Gnome platform
 */
export const gnome_inform7 = mkPackage(
  nixRaw`pkgs.gnome-inform7`,
  "Inform 7 for the Gnome platform",
);

/**
 * GTK/GNOME application to use GnuPG for signing other peoples’ keys
 */
export const gnome_keysign = mkPackage(
  nixRaw`pkgs.gnome-keysign`,
  "GTK/GNOME application to use GnuPG for signing other peoples’ keys",
);

/**
 * A LaTeX editor for the GNOME desktop
 */
export const gnome_latex = mkPackage(
  nixRaw`pkgs.gnome-latex`,
  "A LaTeX editor for the GNOME desktop",
);

/**
 * Library that implements freedesktops's Desktop Menu Specification in GNOME
 */
export const gnome_menus = mkPackage(
  nixRaw`pkgs.gnome-menus`,
  "Library that implements freedesktops's Desktop Menu Specification in GNOME",
);

/**
 * Gnome MPlayer, a simple GUI for MPlayer
 */
export const gnome_mplayer = mkPackage(
  nixRaw`pkgs.gnome_mplayer`,
  "Gnome MPlayer, a simple GUI for MPlayer",
);

/**
 * Tool for writing an ISO file to multiple USB devices at once
 */
export const gnome_multi_writer = mkPackage(
  nixRaw`pkgs.gnome-multi-writer`,
  "Tool for writing an ISO file to multiple USB devices at once",
);

/**
 * Miracast implementation for GNOME
 */
export const gnome_network_displays = mkPackage(
  nixRaw`pkgs.gnome-network-displays`,
  "Miracast implementation for GNOME",
);

/**
 * Censor private information
 */
export const gnome_obfuscate = mkPackage(
  nixRaw`pkgs.gnome-obfuscate`,
  "Censor private information",
);

/**
 * Single sign-on framework for GNOME
 */
export const gnome_online_accounts = mkPackage(
  nixRaw`pkgs.gnome-online-accounts`,
  "Single sign-on framework for GNOME",
);

/**
 * Access, organize and share your photos
 */
export const gnome_photos = mkPackage(
  nixRaw`pkgs.gnome-photos`,
  "Access, organize and share your photos",
);

/**
 * Listen to your favorite podcasts
 */
export const gnome_podcasts = mkPackage(
  nixRaw`pkgs.gnome-podcasts`,
  "Listen to your favorite podcasts",
);

/**
 * An xrandr-like CLI for configuring displays on GNOME/Wayland, on distros that don't support `wlr-randr`
 */
export const gnome_randr = mkPackage(
  nixRaw`pkgs.gnome-randr`,
  "An xrandr-like CLI for configuring displays on GNOME/Wayland, on distros that don't support `wlr-randr`",
);

/**
 * Recipe management application for GNOME
 */
export const gnome_recipes = mkPackage(
  nixRaw`pkgs.gnome-recipes`,
  "Recipe management application for GNOME",
);

/**
 * Password manager for GNOME which makes use of the KeePass v.4 format
 */
export const gnome_secrets = mkPackage(
  nixRaw`pkgs.gnome-secrets`,
  "Password manager for GNOME which makes use of the KeePass v.4 format",
);

/**
 * A pomodoro timer for the GNOME desktop
 */
export const gnome_solanum = mkPackage(
  nixRaw`pkgs.gnome-solanum`,
  "A pomodoro timer for the GNOME desktop",
);

/**
 * A Text Editor for GNOME
 */
export const gnome_text_editor = mkPackage(
  nixRaw`pkgs.gnome-text-editor`,
  "A Text Editor for GNOME",
);

export const gnome_themes_extra = mkPackage(
  nixRaw`pkgs.gnome-themes-extra`,
  "",
);

/**
 * GNOME Greeter & Tour
 */
export const gnome_tour = mkPackage(
  nixRaw`pkgs.gnome-tour`,
  "GNOME Greeter & Tour",
);

/**
 * A nice way to view information about use of system resources, like memory and disk space
 */
export const gnome_usage = mkPackage(
  nixRaw`pkgs.gnome-usage`,
  "A nice way to view information about use of system resources, like memory and disk space",
);

/**
 * User and system administration help for the GNOME desktop
 */
export const gnome_user_docs = mkPackage(
  nixRaw`pkgs.gnome-user-docs`,
  "User and system administration help for the GNOME desktop",
);

/**
 * A collection of GStreamer effects to be used in different GNOME Modules
 */
export const gnome_video_effects = mkPackage(
  nixRaw`pkgs.gnome-video-effects`,
  "A collection of GStreamer effects to be used in different GNOME Modules",
);

/**
 * A native Linux GUI for Chromecasting local files
 */
export const gnomecast = mkPackage(
  nixRaw`pkgs.gnomecast`,
  "A native Linux GUI for Chromecasting local files",
);

/**
 * Nonograms puzzle game
 */
export const gnonograms = mkPackage(
  nixRaw`pkgs.gnonograms`,
  "Nonograms puzzle game",
);

/**
 * A compiler for APIs described by the OpenAPI Specification with plugins for code generation and other API support tasks
 */
export const gnostic = mkPackage(
  nixRaw`pkgs.gnostic`,
  "A compiler for APIs described by the OpenAPI Specification with plugins for code generation and other API support tasks",
);

/**
 * A note taking application
 */
export const gnote = mkPackage(
  nixRaw`pkgs.gnote`,
  "A note taking application",
);

/**
 * Graphical Network Simulator 3 GUI (stable release)
 */
export const gns3_gui = mkPackage(
  nixRaw`pkgs.gns3-gui`,
  "Graphical Network Simulator 3 GUI (stable release)",
);

/**
 * Graphical Network Simulator 3 server (stable release)
 */
export const gns3_server = mkPackage(
  nixRaw`pkgs.gns3-server`,
  "Graphical Network Simulator 3 server (stable release)",
);

/**
 * An open source Global Navigation Satellite Systems software-defined receiver
 */
export const gnss_sdr = mkPackage(
  nixRaw`pkgs.gnss-sdr`,
  "An open source Global Navigation Satellite Systems software-defined receiver",
);

/**
 * share GNSS data between multiple clients
 */
export const gnss_share = mkPackage(
  nixRaw`pkgs.gnss-share`,
  "share GNSS data between multiple clients",
);

/**
 * A GNU compiler for the programming language Simula
 */
export const gnu_cim = mkPackage(
  nixRaw`pkgs.gnu-cim`,
  "A GNU compiler for the programming language Simula",
);

/**
 * An open-source COBOL compiler
 */
export const gnu_cobol = mkPackage(
  nixRaw`pkgs.gnu-cobol`,
  "An open-source COBOL compiler",
);

/**
 * Attempt to guess a canonical system name
 */
export const gnu_config = mkPackage(
  nixRaw`pkgs.gnu-config`,
  "Attempt to guess a canonical system name",
);

/**
 * GNU EFI development toolchain
 */
export const gnu_efi = mkPackage(
  nixRaw`pkgs.gnu-efi`,
  "GNU EFI development toolchain",
);

/**
 * A password manager designed to make it easy to reconstruct difficult passwords
 */
export const gnu_pw_mgr = mkPackage(
  nixRaw`pkgs.gnu-pw-mgr`,
  "A password manager designed to make it easy to reconstruct difficult passwords",
);

/**
 * Service manager that looks after the herd of system services
 */
export const gnu_shepherd = mkPackage(
  nixRaw`pkgs.gnu-shepherd`,
  "Service manager that looks after the herd of system services",
);

/**
 * A free implementation of the Smalltalk-80 language
 */
export const gnu_smalltalk = mkPackage(
  nixRaw`pkgs.gnu-smalltalk`,
  "A free implementation of the Smalltalk-80 language",
);

/**
 * Free interpreter for the APL programming language
 */
export const gnuapl = mkPackage(
  nixRaw`pkgs.gnuapl`,
  "Free interpreter for the APL programming language",
);

/**
 * GNU astronomy utilities and library
 */
export const gnuastro = mkPackage(
  nixRaw`pkgs.gnuastro`,
  "GNU astronomy utilities and library",
);

/**
 * World class backgammon application
 */
export const gnubg = mkPackage(
  nixRaw`pkgs.gnubg`,
  "World class backgammon application",
);

/**
 * Gnu Circuit Analysis Package
 */
export const gnucap = mkPackage(
  nixRaw`pkgs.gnucap`,
  "Gnu Circuit Analysis Package",
);

/**
 * Free software for double entry accounting
 */
export const gnucash = mkPackage(
  nixRaw`pkgs.gnucash`,
  "Free software for double entry accounting",
);

/**
 * GNU Chess engine
 */
export const gnuchess = mkPackage(
  nixRaw`pkgs.gnuchess`,
  "GNU Chess engine",
);

/**
 * gnuclad tries to help the environment by creating trees.  Its primary use will be generating cladogram trees for the GNU/Linux distro timeline project
 */
export const gnuclad = mkPackage(
  nixRaw`pkgs.gnuclad`,
  "gnuclad tries to help the environment by creating trees.  Its primary use will be generating cladogram trees for the GNU/Linux distro timeline project",
);

/**
 * Free incremental compiler of IDL
 */
export const gnudatalanguage = mkPackage(
  nixRaw`pkgs.gnudatalanguage`,
  "Free incremental compiler of IDL",
);

/**
 * A command-line disk partitioning tool
 */
export const gnufdisk = mkPackage(
  nixRaw`pkgs.gnufdisk`,
  "A command-line disk partitioning tool",
);

/**
 * GNU Go - A computer go player
 */
export const gnugo = mkPackage(
  nixRaw`pkgs.gnugo`,
  "GNU Go - A computer go player",
);

/**
 * GNU implementation of the Unix grep command
 */
export const gnugrep = mkPackage(
  nixRaw`pkgs.gnugrep`,
  "GNU implementation of the Unix grep command",
);

/**
 * A clone of the simple yet addictive game Xjump
 */
export const gnujump = mkPackage(
  nixRaw`pkgs.gnujump`,
  "A clone of the simple yet addictive game Xjump",
);

/**
 * An implementation of USB cryptographic token for gpg
 */
export const gnuk = mkPackage(
  nixRaw`pkgs.gnuk`,
  "An implementation of USB cryptographic token for gpg",
);

/**
 * Central location for code to be shared among GNU packages
 */
export const gnulib = mkPackage(
  nixRaw`pkgs.gnulib`,
  "Central location for code to be shared among GNU packages",
);

/**
 * GNU M4, a macro processor
 */
export const gnum4 = mkPackage(
  nixRaw`pkgs.gnum4`,
  "GNU M4, a macro processor",
);

/**
 * A tool to control the generation of non-source files from sources
 */
export const gnumake = mkPackage(
  nixRaw`pkgs.gnumake`,
  "A tool to control the generation of non-source files from sources",
);

/**
 * A tool to control the generation of non-source files from sources
 */
export const gnumake42 = mkPackage(
  nixRaw`pkgs.gnumake42`,
  "A tool to control the generation of non-source files from sources",
);

/**
 * The GNOME Office Spreadsheet
 */
export const gnumeric = mkPackage(
  nixRaw`pkgs.gnumeric`,
  "The GNOME Office Spreadsheet",
);

/**
 * GNU's decentralized anonymous and censorship-resistant P2P framework
 */
export const gnunet = mkPackage(
  nixRaw`pkgs.gnunet`,
  "GNU's decentralized anonymous and censorship-resistant P2P framework",
);

/**
 * GNUnet GTK User Interface
 */
export const gnunet_gtk = mkPackage(
  nixRaw`pkgs.gnunet-gtk`,
  "GNUnet GTK User Interface",
);

/**
 * GNU Patch, a program to apply differences to files
 */
export const gnupatch = mkPackage(
  nixRaw`pkgs.gnupatch`,
  "GNU Patch, a program to apply differences to files",
);

/**
 * Modern release of the GNU Privacy Guard, a GPL OpenPGP implementation
 */
export const gnupg = mkPackage(
  nixRaw`pkgs.gnupg`,
  "Modern release of the GNU Privacy Guard, a GPL OpenPGP implementation",
);

/**
 * Modern release of the GNU Privacy Guard, a GPL OpenPGP implementation with symbolic links for gpg and gpgv
 */
export const gnupg1 = mkPackage(
  nixRaw`pkgs.gnupg1`,
  "Modern release of the GNU Privacy Guard, a GPL OpenPGP implementation with symbolic links for gpg and gpgv",
);

/**
 * Modern release of the GNU Privacy Guard, a GPL OpenPGP implementation with symbolic links for gpg and gpgv
 */
export const gnupg1compat = mkPackage(
  nixRaw`pkgs.gnupg1compat`,
  "Modern release of the GNU Privacy Guard, a GPL OpenPGP implementation with symbolic links for gpg and gpgv",
);

/**
 * Classic (1.4) release of the GNU Privacy Guard, a GPL OpenPGP implementation
 */
export const gnupg1orig = mkPackage(
  nixRaw`pkgs.gnupg1orig`,
  "Classic (1.4) release of the GNU Privacy Guard, a GPL OpenPGP implementation",
);

/**
 * LTS release of the GNU Privacy Guard, a GPL OpenPGP implementation
 */
export const gnupg22 = mkPackage(
  nixRaw`pkgs.gnupg22`,
  "LTS release of the GNU Privacy Guard, a GPL OpenPGP implementation",
);

/**
 * Modern release of the GNU Privacy Guard, a GPL OpenPGP implementation
 */
export const gnupg24 = mkPackage(
  nixRaw`pkgs.gnupg24`,
  "Modern release of the GNU Privacy Guard, a GPL OpenPGP implementation",
);

/**
 * A smart-card daemon to enable the use of PKCS#11 tokens with GnuPG
 */
export const gnupg_pkcs11_scd = mkPackage(
  nixRaw`pkgs.gnupg-pkcs11-scd`,
  "A smart-card daemon to enable the use of PKCS#11 tokens with GnuPG",
);

/**
 * A portable command-line driven graphing utility for many platforms
 */
export const gnuplot = mkPackage(
  nixRaw`pkgs.gnuplot`,
  "A portable command-line driven graphing utility for many platforms",
);

/**
 * A portable command-line driven graphing utility for many platforms
 */
export const gnuplot_aquaterm = mkPackage(
  nixRaw`pkgs.gnuplot_aquaterm`,
  "A portable command-line driven graphing utility for many platforms",
);

/**
 * A portable command-line driven graphing utility for many platforms
 */
export const gnuplot_qt = mkPackage(
  nixRaw`pkgs.gnuplot_qt`,
  "A portable command-line driven graphing utility for many platforms",
);

/**
 * The GNU Portable Threads library
 */
export const gnupth = mkPackage(
  nixRaw`pkgs.gnupth`,
  "The GNU Portable Threads library",
);

/**
 * Software Defined Radio (SDR) software
 */
export const gnuradio = mkPackage(
  nixRaw`pkgs.gnuradio`,
  "Software Defined Radio (SDR) software",
);

/**
 * Software Defined Radio (SDR) software
 */
export const gnuradio3_8 = mkPackage(
  nixRaw`pkgs.gnuradio3_8`,
  "Software Defined Radio (SDR) software",
);

/**
 * Software Defined Radio (SDR) software
 */
export const gnuradio3_8Minimal = mkPackage(
  nixRaw`pkgs.gnuradio3_8Minimal`,
  "Software Defined Radio (SDR) software",
);

/**
 * Software Defined Radio (SDR) software
 */
export const gnuradio3_9 = mkPackage(
  nixRaw`pkgs.gnuradio3_9`,
  "Software Defined Radio (SDR) software",
);

/**
 * Software Defined Radio (SDR) software
 */
export const gnuradio3_9Minimal = mkPackage(
  nixRaw`pkgs.gnuradio3_9Minimal`,
  "Software Defined Radio (SDR) software",
);

/**
 * Software Defined Radio (SDR) software
 */
export const gnuradioMinimal = mkPackage(
  nixRaw`pkgs.gnuradioMinimal`,
  "Software Defined Radio (SDR) software",
);

/**
 * GNU sed, a batch stream editor
 */
export const gnused = mkPackage(
  nixRaw`pkgs.gnused`,
  "GNU sed, a batch stream editor",
);

/**
 * GNU implementation of Shogi, also known as Japanese Chess
 */
export const gnushogi = mkPackage(
  nixRaw`pkgs.gnushogi`,
  "GNU implementation of Shogi, also known as Japanese Chess",
);

/**
 * GNU implementation of the `tar' archiver
 */
export const gnutar = mkPackage(
  nixRaw`pkgs.gnutar`,
  "GNU implementation of the `tar' archiver",
);

/**
 * The GNU Transport Layer Security Library
 */
export const gnutls = mkPackage(
  nixRaw`pkgs.gnutls`,
  "The GNU Transport Layer Security Library",
);

/**
 * GUI for neovim, without any web bloat
 */
export const gnvim = mkPackage(
  nixRaw`pkgs.gnvim`,
  "GUI for neovim, without any web bloat",
);

/**
 * GUI for neovim, without any web bloat
 */
export const gnvim_unwrapped = mkPackage(
  nixRaw`pkgs.gnvim-unwrapped`,
  "GUI for neovim, without any web bloat",
);

/**
 * The Go Programming language
 */
export const go = mkPackage(
  nixRaw`pkgs.go`,
  "The Go Programming language",
);

/**
 * Go apps packaging for Nix
 */
export const go2nix = mkPackage(
  nixRaw`pkgs.go2nix`,
  "Go apps packaging for Nix",
);

/**
 * Ultimate camera streaming application with support RTSP, RTMP, HTTP-FLV, WebRTC, MSE, HLS, MJPEG, HomeKit, FFmpeg, etc.
 */
export const go2rtc = mkPackage(
  nixRaw`pkgs.go2rtc`,
  "Ultimate camera streaming application with support RTSP, RTMP, HTTP-FLV, WebRTC, MSE, HLS, MJPEG, HomeKit, FFmpeg, etc.",
);

/**
 * Cast media files to UPnP/DLNA Media Renderers and Smart TVs
 */
export const go2tv = mkPackage(
  nixRaw`pkgs.go2tv`,
  "Cast media files to UPnP/DLNA Media Renderers and Smart TVs",
);

/**
 * Cast media files to UPnP/DLNA Media Renderers and Smart TVs
 */
export const go2tv_lite = mkPackage(
  nixRaw`pkgs.go2tv-lite`,
  "Cast media files to UPnP/DLNA Media Renderers and Smart TVs",
);

/**
 * Office 365 enumeration tool
 */
export const go365 = mkPackage(
  nixRaw`pkgs.go365`,
  "Office 365 enumeration tool",
);

/**
 * The Go Programming language
 */
export const go_1_19 = mkPackage(
  nixRaw`pkgs.go_1_19`,
  "The Go Programming language",
);

/**
 * The Go Programming language
 */
export const go_1_20 = mkPackage(
  nixRaw`pkgs.go_1_20`,
  "The Go Programming language",
);

/**
 * The Go Programming language
 */
export const go_1_21 = mkPackage(
  nixRaw`pkgs.go_1_21`,
  "The Go Programming language",
);

/**
 * Two-factor authentication on the command line
 */
export const go_2fa = mkPackage(
  nixRaw`pkgs.go-2fa`,
  "Two-factor authentication on the command line",
);

/**
 * An alternative to the auditd daemon
 */
export const go_audit = mkPackage(
  nixRaw`pkgs.go-audit`,
  "An alternative to the auditd daemon",
);

/**
 * IMAP/SMTP autodiscover feature for Thunderbird, Apple Mail and Microsoft Outlook
 */
export const go_autoconfig = mkPackage(
  nixRaw`pkgs.go-autoconfig`,
  "IMAP/SMTP autodiscover feature for Thunderbird, Apple Mail and Microsoft Outlook",
);

/**
 * A small utility which generates Go code from any file, useful for embedding binary data in a Go program
 */
export const go_bindata = mkPackage(
  nixRaw`pkgs.go-bindata`,
  "A small utility which generates Go code from any file, useful for embedding binary data in a Go program",
);

/**
 * Serve embedded files from jteeuwen/go-bindata
 */
export const go_bindata_assetfs = mkPackage(
  nixRaw`pkgs.go-bindata-assetfs`,
  "Serve embedded files from jteeuwen/go-bindata",
);

/**
 * Visualize call graph of a Go program using Graphviz
 */
export const go_callvis = mkPackage(
  nixRaw`pkgs.go-callvis`,
  "Visualize call graph of a Go program using Graphviz",
);

/**
 * A camo server is a special type of image proxy that proxies non-secure images over SSL/TLS
 */
export const go_camo = mkPackage(
  nixRaw`pkgs.go-camo`,
  "A camo server is a special type of image proxy that proxies non-secure images over SSL/TLS",
);

/**
 * A set of utilities for checking Go sources
 */
export const go_check = mkPackage(
  nixRaw`pkgs.go-check`,
  "A set of utilities for checking Go sources",
);

/**
 * CLI for Google Chromecast, Home devices and Cast Groups
 */
export const go_chromecast = mkPackage(
  nixRaw`pkgs.go-chromecast`,
  "CLI for Google Chromecast, Home devices and Cast Groups",
);

/**
 * Tools for interacting with remote images and registries including crane and gcrane
 */
export const go_containerregistry = mkPackage(
  nixRaw`pkgs.go-containerregistry`,
  "Tools for interacting with remote images and registries including crane and gcrane",
);

/**
 * The Golang implementation of OneBot based on Mirai and MiraiGo
 */
export const go_cqhttp = mkPackage(
  nixRaw`pkgs.go-cqhttp`,
  "The Golang implementation of OneBot based on Mirai and MiraiGo",
);

/**
 * A lightweight CVE search tool
 */
export const go_cve_search = mkPackage(
  nixRaw`pkgs.go-cve-search`,
  "A lightweight CVE search tool",
);

/**
 * Minimalist dependency manager for Go written in Go
 */
export const go_dependency_manager = mkPackage(
  nixRaw`pkgs.go-dependency-manager`,
  "Minimalist dependency manager for Go written in Go",
);

/**
 * Dork scanner
 */
export const go_dork = mkPackage(
  nixRaw`pkgs.go-dork`,
  "Dork scanner",
);

/**
 * Official golang implementation of the Ethereum protocol
 */
export const go_ethereum = mkPackage(
  nixRaw`pkgs.go-ethereum`,
  "Official golang implementation of the Ethereum protocol",
);

/**
 * Tool for searching Exploits from Exploit Databases, etc
 */
export const go_exploitdb = mkPackage(
  nixRaw`pkgs.go-exploitdb`,
  "Tool for searching Exploits from Exploit Databases, etc",
);

/**
 * The Go font family
 */
export const go_font = mkPackage(
  nixRaw`pkgs.go-font`,
  "The Go font family",
);

/**
 * A command-line tool for one-click proxy in your research and development without installing v2ray or anything else
 */
export const go_graft = mkPackage(
  nixRaw`pkgs.go-graft`,
  "A command-line tool for one-click proxy in your research and development without installing v2ray or anything else",
);

/**
 * An operating system independent implementation of iOS device features
 */
export const go_ios = mkPackage(
  nixRaw`pkgs.go-ios`,
  "An operating system independent implementation of iOS device features",
);

/**
 * Type safe SQL builder with code generation and automatic query result data mapping
 */
export const go_jet = mkPackage(
  nixRaw`pkgs.go-jet`,
  "Type safe SQL builder with code generation and automatic query result data mapping",
);

/**
 * Simple command line client for Atlassian's Jira service written in Go
 */
export const go_jira = mkPackage(
  nixRaw`pkgs.go-jira`,
  "Simple command line client for Atlassian's Jira service written in Go",
);

/**
 * An implementation of Jsonnet in pure Go
 */
export const go_jsonnet = mkPackage(
  nixRaw`pkgs.go-jsonnet`,
  "An implementation of Jsonnet in pure Go",
);

/**
 * Convert go test output to junit xml
 */
export const go_junit_report = mkPackage(
  nixRaw`pkgs.go-junit-report`,
  "Convert go test output to junit xml",
);

export const go_libp2p_daemon = mkPackage(
  nixRaw`pkgs.go-libp2p-daemon`,
  "",
);

/**
 * Reliable project licenses detector
 */
export const go_license_detector = mkPackage(
  nixRaw`pkgs.go-license-detector`,
  "Reliable project licenses detector",
);

/**
 * Reports on the licenses used by a Go package and its dependencies
 */
export const go_licenses = mkPackage(
  nixRaw`pkgs.go-licenses`,
  "Reports on the licenses used by a Go package and its dependencies",
);

/**
 * Go tool to convert markdown to man pages
 */
export const go_md2man = mkPackage(
  nixRaw`pkgs.go-md2man`,
  "Go tool to convert markdown to man pages",
);

/**
 * Database migrations. CLI and Golang library
 */
export const go_migrate = mkPackage(
  nixRaw`pkgs.go-migrate`,
  "Database migrations. CLI and Golang library",
);

/**
 * A golang mock generator from interfaces
 */
export const go_minimock = mkPackage(
  nixRaw`pkgs.go-minimock`,
  "A golang mock generator from interfaces",
);

/**
 * A mock code autogenerator for Golang
 */
export const go_mockery = mkPackage(
  nixRaw`pkgs.go-mockery`,
  "A mock code autogenerator for Golang",
);

/**
 * A tool build chart by go mod graph output with zero dependencies
 */
export const go_mod_graph_chart = mkPackage(
  nixRaw`pkgs.go-mod-graph-chart`,
  "A tool build chart by go mod graph output with zero dependencies",
);

/**
 * Navigation and insight in Go
 */
export const go_motion = mkPackage(
  nixRaw`pkgs.go-motion`,
  "Navigation and insight in Go",
);

/**
 * A simple FUSE filesystem for mounting Android devices as a MTP device
 */
export const go_mtpfs = mkPackage(
  nixRaw`pkgs.go-mtpfs`,
  "A simple FUSE filesystem for mounting Android devices as a MTP device",
);

/**
 * Terminal netease cloud music client written in Go
 */
export const go_musicfox = mkPackage(
  nixRaw`pkgs.go-musicfox`,
  "Terminal netease cloud music client written in Go",
);

/**
 * Extensible matrix bot written in Go
 */
export const go_neb = mkPackage(
  nixRaw`pkgs.go-neb`,
  "Extensible matrix bot written in Go",
);

/**
 * Org-mode parser and static site generator in go
 */
export const go_org = mkPackage(
  nixRaw`pkgs.go-org`,
  "Org-mode parser and static site generator in go",
);

/**
 * Utility to extract JSON representation of declarations from a Go source file
 */
export const go_outline = mkPackage(
  nixRaw`pkgs.go-outline`,
  "Utility to extract JSON representation of declarations from a Go source file",
);

/**
 *  Go bindings for protocol buffer
 */
export const go_protobuf = mkPackage(
  nixRaw`pkgs.go-protobuf`,
  " Go bindings for protocol buffer",
);

/**
 * A Go package that makes working with resources such as html, js, css, images, templates very easy
 */
export const go_rice = mkPackage(
  nixRaw`pkgs.go-rice`,
  "A Go package that makes working with resources such as html, js, css, images, templates very easy",
);

/**
 * Color temperature setting library and CLI that operates in a similar way to f.lux and Redshift
 */
export const go_sct = mkPackage(
  nixRaw`pkgs.go-sct`,
  "Color temperature setting library and CLI that operates in a similar way to f.lux and Redshift",
);

/**
 * Fresh implementation of Shadowsocks in Go
 */
export const go_shadowsocks2 = mkPackage(
  nixRaw`pkgs.go-shadowsocks2`,
  "Fresh implementation of Shadowsocks in Go",
);

/**
 * Automatically generate RESTful API documentation with Swagger 2.0 for Go
 */
export const go_swag = mkPackage(
  nixRaw`pkgs.go-swag`,
  "Automatically generate RESTful API documentation with Swagger 2.0 for Go",
);

/**
 * Golang implementation of Swagger 2.0, representation of your RESTful API
 */
export const go_swagger = mkPackage(
  nixRaw`pkgs.go-swagger`,
  "Golang implementation of Swagger 2.0, representation of your RESTful API",
);

/**
 * A utility for extracting a JSON representation of the package symbols from a go source tree
 */
export const go_symbols = mkPackage(
  nixRaw`pkgs.go-symbols`,
  "A utility for extracting a JSON representation of the package symbols from a go source tree",
);

/**
 * A task runner / simpler Make alternative written in Go
 */
export const go_task = mkPackage(
  nixRaw`pkgs.go-task`,
  "A task runner / simpler Make alternative written in Go",
);

/**
 * Go library for the TOML language
 */
export const go_toml = mkPackage(
  nixRaw`pkgs.go-toml`,
  "Go library for the TOML language",
);

/**
 * A collection of tools and libraries for working with Go code, including linters and static analysis
 */
export const go_tools = mkPackage(
  nixRaw`pkgs.go-tools`,
  "A collection of tools and libraries for working with Go code, including linters and static analysis",
);

/**
 * simple tool to give you Desktop Notifications about your battery
 */
export const go_upower_notify = mkPackage(
  nixRaw`pkgs.go-upower-notify`,
  "simple tool to give you Desktop Notifications about your battery",
);

/**
 * Design-based APIs and microservices in Go
 */
export const goa = mkPackage(
  nixRaw`pkgs.goa`,
  "Design-based APIs and microservices in Go",
);

/**
 * Real-time web log analyzer and interactive viewer that runs in a terminal in *nix systems
 */
export const goaccess = mkPackage(
  nixRaw`pkgs.goaccess`,
  "Real-time web log analyzer and interactive viewer that runs in a terminal in *nix systems",
);

/**
 * Go ASCII Tool. Render ASCII art as SVG diagrams
 */
export const goat = mkPackage(
  nixRaw`pkgs.goat`,
  "Go ASCII Tool. Render ASCII art as SVG diagrams",
);

/**
 * A crossplatform music editor for creating Commodore 64 music. Uses reSID library by Dag Lem and supports alternatively HardSID & CatWeasel devices
 */
export const goattracker = mkPackage(
  nixRaw`pkgs.goattracker`,
  "A crossplatform music editor for creating Commodore 64 music. Uses reSID library by Dag Lem and supports alternatively HardSID & CatWeasel devices",
);

/**
 * A crossplatform music editor for creating Commodore 64 music. Uses reSID library by Dag Lem and supports alternatively HardSID & CatWeasel devices - Stereo version
 */
export const goattracker_stereo = mkPackage(
  nixRaw`pkgs.goattracker-stereo`,
  "A crossplatform music editor for creating Commodore 64 music. Uses reSID library by Dag Lem and supports alternatively HardSID & CatWeasel devices - Stereo version",
);

/**
 * A POSIX-compliant AWK interpreter written in Go
 */
export const goawk = mkPackage(
  nixRaw`pkgs.goawk`,
  "A POSIX-compliant AWK interpreter written in Go",
);

/**
 * Preprocessor for making GObjects with inline C code
 */
export const gob2 = mkPackage(
  nixRaw`pkgs.gob2`,
  "Preprocessor for making GObjects with inline C code",
);

/**
 * A cross-platform TUI database management tool written in Rust
 */
export const gobang = mkPackage(
  nixRaw`pkgs.gobang`,
  "A cross-platform TUI database management tool written in Rust",
);

/**
 * gobbles your terminal
 */
export const gobble = mkPackage(
  nixRaw`pkgs.gobble`,
  "gobbles your terminal",
);

/**
 * A GTK-based collaborative editor supporting multiple documents in one session and a multi-user chat
 */
export const gobby = mkPackage(
  nixRaw`pkgs.gobby`,
  "A GTK-based collaborative editor supporting multiple documents in one session and a multi-user chat",
);

/**
 * A CLI tool for GoBGP
 */
export const gobgp = mkPackage(
  nixRaw`pkgs.gobgp`,
  "A CLI tool for GoBGP",
);

/**
 * BGP implemented in Go
 */
export const gobgpd = mkPackage(
  nixRaw`pkgs.gobgpd`,
  "BGP implemented in Go",
);

/**
 * Firmware loader for Qualcomm Gobi USB chipsets
 */
export const gobi_loader = mkPackage(
  nixRaw`pkgs.gobi_loader`,
  "Firmware loader for Qualcomm Gobi USB chipsets",
);

/**
 * A middleware layer between C libraries and language bindings
 */
export const gobject_introspection = mkPackage(
  nixRaw`pkgs.gobject-introspection`,
  "A middleware layer between C libraries and language bindings",
);

/**
 * A middleware layer between C libraries and language bindings
 */
export const gobject_introspection_unwrapped = mkPackage(
  nixRaw`pkgs.gobject-introspection-unwrapped`,
  "A middleware layer between C libraries and language bindings",
);

/**
 * Enumeration tool for publicly exposed Azure Storage blobs
 */
export const goblob = mkPackage(
  nixRaw`pkgs.goblob`,
  "Enumeration tool for publicly exposed Azure Storage blobs",
);

/**
 * Tool used to brute-force URIs, DNS subdomains, Virtual Host names on target web servers
 */
export const gobuster = mkPackage(
  nixRaw`pkgs.gobuster`,
  "Tool used to brute-force URIs, DNS subdomains, Virtual Host names on target web servers",
);

/**
 * A continuous delivery server specializing in advanced workflow modeling and visualization
 */
export const gocd_agent = mkPackage(
  nixRaw`pkgs.gocd-agent`,
  "A continuous delivery server specializing in advanced workflow modeling and visualization",
);

/**
 * A continuous delivery server specializing in advanced workflow modeling and visualization
 */
export const gocd_server = mkPackage(
  nixRaw`pkgs.gocd-server`,
  "A continuous delivery server specializing in advanced workflow modeling and visualization",
);

/**
 * An autocompletion daemon for the Go programming language
 */
export const gocode = mkPackage(
  nixRaw`pkgs.gocode`,
  "An autocompletion daemon for the Go programming language",
);

/**
 * An autocompletion daemon for the Go programming language
 */
export const gocode_gomod = mkPackage(
  nixRaw`pkgs.gocode-gomod`,
  "An autocompletion daemon for the Go programming language",
);

/**
 * Find in Go repeated strings that could be replaced by a constant
 */
export const goconst = mkPackage(
  nixRaw`pkgs.goconst`,
  "Find in Go repeated strings that could be replaced by a constant",
);

/**
 * Go testing in the browser. Integrates with `go test`. Write behavioral tests in Go
 */
export const goconvey = mkPackage(
  nixRaw`pkgs.goconvey`,
  "Go testing in the browser. Integrates with `go test`. Write behavioral tests in Go",
);

/**
 * GPL Optical Character Recognition
 */
export const gocr = mkPackage(
  nixRaw`pkgs.gocr`,
  "GPL Optical Character Recognition",
);

/**
 * Encrypted overlay filesystem written in Go
 */
export const gocryptfs = mkPackage(
  nixRaw`pkgs.gocryptfs`,
  "Encrypted overlay filesystem written in Go",
);

/**
 * Calculate cyclomatic complexities of functions in Go source code
 */
export const gocyclo = mkPackage(
  nixRaw`pkgs.gocyclo`,
  "Calculate cyclomatic complexities of functions in Go source code",
);

/**
 * Go Dependency Analysis toolkit
 */
export const goda = mkPackage(
  nixRaw`pkgs.goda`,
  "Go Dependency Analysis toolkit",
);

/**
 * Print where symbols are defined in Go source code
 */
export const godef = mkPackage(
  nixRaw`pkgs.godef`,
  "Print where symbols are defined in Go source code",
);

/**
 * A dynamic DNS client tool supports AliDNS, Cloudflare, Google Domains, DNSPod, HE.net & DuckDNS & DreamHost, etc
 */
export const godns = mkPackage(
  nixRaw`pkgs.godns`,
  "A dynamic DNS client tool supports AliDNS, Cloudflare, Google Domains, DNSPod, HE.net & DuckDNS & DreamHost, etc",
);

/**
 * Free and Open Source 2D and 3D game engine (X11 tools)
 */
export const godot3 = mkPackage(
  nixRaw`pkgs.godot3`,
  "Free and Open Source 2D and 3D game engine (X11 tools)",
);

/**
 * Free and Open Source 2D and 3D game engine (debug server)
 */
export const godot3_debug_server = mkPackage(
  nixRaw`pkgs.godot3-debug-server`,
  "Free and Open Source 2D and 3D game engine (debug server)",
);

/**
 * Free and Open Source 2D and 3D game engine (nix export templates)
 */
export const godot3_export_templates = mkPackage(
  nixRaw`pkgs.godot3-export-templates`,
  "Free and Open Source 2D and 3D game engine (nix export templates)",
);

/**
 * Free and Open Source 2D and 3D game engine (headless)
 */
export const godot3_headless = mkPackage(
  nixRaw`pkgs.godot3-headless`,
  "Free and Open Source 2D and 3D game engine (headless)",
);

/**
 * Free and Open Source 2D and 3D game engine (mono build)
 */
export const godot3_mono = mkPackage(
  nixRaw`pkgs.godot3-mono`,
  "Free and Open Source 2D and 3D game engine (mono build)",
);

/**
 * Free and Open Source 2D and 3D game engine (mono debug server)
 */
export const godot3_mono_debug_server = mkPackage(
  nixRaw`pkgs.godot3-mono-debug-server`,
  "Free and Open Source 2D and 3D game engine (mono debug server)",
);

/**
 * Free and Open Source 2D and 3D game engine (nix mono export templates)
 */
export const godot3_mono_export_templates = mkPackage(
  nixRaw`pkgs.godot3-mono-export-templates`,
  "Free and Open Source 2D and 3D game engine (nix mono export templates)",
);

/**
 * Free and Open Source 2D and 3D game engine (mono headless)
 */
export const godot3_mono_headless = mkPackage(
  nixRaw`pkgs.godot3-mono-headless`,
  "Free and Open Source 2D and 3D game engine (mono headless)",
);

/**
 * Free and Open Source 2D and 3D game engine (mono server)
 */
export const godot3_mono_server = mkPackage(
  nixRaw`pkgs.godot3-mono-server`,
  "Free and Open Source 2D and 3D game engine (mono server)",
);

/**
 * Free and Open Source 2D and 3D game engine (server)
 */
export const godot3_server = mkPackage(
  nixRaw`pkgs.godot3-server`,
  "Free and Open Source 2D and 3D game engine (server)",
);

/**
 * Free and Open Source 2D and 3D game engine
 */
export const godot_4 = mkPackage(
  nixRaw`pkgs.godot_4`,
  "Free and Open Source 2D and 3D game engine",
);

/**
 * Manager for reverse shells
 */
export const godspeed = mkPackage(
  nixRaw`pkgs.godspeed`,
  "Manager for reverse shells",
);

/**
 * Utility helping to discover large files/folders
 */
export const godu = mkPackage(
  nixRaw`pkgs.godu`,
  "Utility helping to discover large files/folders",
);

/**
 * An alternative to rss2email written in golang with many filters
 */
export const goeland = mkPackage(
  nixRaw`pkgs.goeland`,
  "An alternative to rss2email written in golang with many filters",
);

/**
 * Open Source F5 BIG-IP VPN client
 */
export const gof5 = mkPackage(
  nixRaw`pkgs.gof5`,
  "Open Source F5 BIG-IP VPN client",
);

/**
 * A Glib/GTK set of document centric objects and utilities
 */
export const goffice = mkPackage(
  nixRaw`pkgs.goffice`,
  "A Glib/GTK set of document centric objects and utilities",
);

/**
 * A lightweight Gopher server
 */
export const gofish = mkPackage(
  nixRaw`pkgs.gofish`,
  "A lightweight Gopher server",
);

/**
 * A NetFlow/IPFIX/sFlow collector in Go
 */
export const goflow = mkPackage(
  nixRaw`pkgs.goflow`,
  "A NetFlow/IPFIX/sFlow collector in Go",
);

/**
 * High performance sFlow/IPFIX/NetFlow Collector
 */
export const goflow2 = mkPackage(
  nixRaw`pkgs.goflow2`,
  "High performance sFlow/IPFIX/NetFlow Collector",
);

/**
 * Multibinary containing several utilities
 */
export const gofu = mkPackage(
  nixRaw`pkgs.gofu`,
  "Multibinary containing several utilities",
);

/**
 * A stricter gofmt
 */
export const gofumpt = mkPackage(
  nixRaw`pkgs.gofumpt`,
  "A stricter gofmt",
);

export const gogUnpackHook = mkPackage(
  nixRaw`pkgs.gogUnpackHook`,
  "",
);

/**
 * GOG Downloading module for Heroic Games Launcher
 */
export const gogdl = mkPackage(
  nixRaw`pkgs.gogdl`,
  "GOG Downloading module for Heroic Games Launcher",
);

/**
 * Gets documentation for items in Go source code
 */
export const gogetdoc = mkPackage(
  nixRaw`pkgs.gogetdoc`,
  "Gets documentation for items in Go source code",
);

/**
 * A painless self-hosted Git service
 */
export const gogs = mkPackage(
  nixRaw`pkgs.gogs`,
  "A painless self-hosted Git service",
);

/**
 * A graphical user interface to programs that play the board game Go and support the Go Text Protocol such as GNU Go
 */
export const gogui = mkPackage(
  nixRaw`pkgs.gogui`,
  "A graphical user interface to programs that play the board game Go and support the Go Text Protocol such as GNU Go",
);

/**
 * System information collector
 */
export const gohai = mkPackage(
  nixRaw`pkgs.gohai`,
  "System information collector",
);

/**
 * A monospace bitmap font well suited for programming and terminal use

 */
export const gohufont = mkPackage(
  nixRaw`pkgs.gohufont`,
  "A monospace bitmap font well suited for programming and terminal use\n",
);

/**
 * Execute scripts on IMAP mailbox changes (new/deleted/updated messages) using IDLE
 */
export const goimapnotify = mkPackage(
  nixRaw`pkgs.goimapnotify`,
  "Execute scripts on IMAP mailbox changes (new/deleted/updated messages) using IDLE",
);

/**
 * Right imports sorting & code formatting tool (goimports alternative)
 */
export const goimports_reviser = mkPackage(
  nixRaw`pkgs.goimports-reviser`,
  "Right imports sorting & code formatting tool (goimports alternative)",
);

/**
 * Pure Go implementation of jq
 */
export const gojq = mkPackage(
  nixRaw`pkgs.gojq`,
  "Pure Go implementation of jq",
);

/**
 * Simply tool to convert json to yaml written in Go
 */
export const gojsontoyaml = mkPackage(
  nixRaw`pkgs.gojsontoyaml`,
  "Simply tool to convert json to yaml written in Go",
);

/**
 * Static analysis tool for securing Go code
 */
export const gokart = mkPackage(
  nixRaw`pkgs.gokart`,
  "Static analysis tool for securing Go code",
);

/**
 * Turn your Go program(s) into an appliance running on the Raspberry Pi 3, Pi 4, Pi Zero 2 W, or amd64 PCs!
 */
export const gokrazy = mkPackage(
  nixRaw`pkgs.gokrazy`,
  "Turn your Go program(s) into an appliance running on the Raspberry Pi 3, Pi 4, Pi Zero 2 W, or amd64 PCs!",
);

/**
 * Karabiner configurator
 */
export const goku = mkPackage(
  nixRaw`pkgs.goku`,
  "Karabiner configurator",
);

/**
 * Fast linters Runner for Go
 */
export const golangci_lint = mkPackage(
  nixRaw`pkgs.golangci-lint`,
  "Fast linters Runner for Go",
);

/**
 * Language server for golangci-lint
 */
export const golangci_lint_langserver = mkPackage(
  nixRaw`pkgs.golangci-lint-langserver`,
  "Language server for golangci-lint",
);

/**
 * Program that emulates steam online features
 */
export const goldberg_emu = mkPackage(
  nixRaw`pkgs.goldberg-emu`,
  "Program that emulates steam online features",
);

/**
 * Performance software for cyclists, runners and triathletes. Built from source and without API tokens
 */
export const golden_cheetah = mkPackage(
  nixRaw`pkgs.golden-cheetah`,
  "Performance software for cyclists, runners and triathletes. Built from source and without API tokens",
);

/**
 * Performance software for cyclists, runners and triathletes. This version includes the API Tokens for e.g. Strava
 */
export const golden_cheetah_bin = mkPackage(
  nixRaw`pkgs.golden-cheetah-bin`,
  "Performance software for cyclists, runners and triathletes. This version includes the API Tokens for e.g. Strava",
);

/**
 * A feature-rich dictionary lookup program
 */
export const goldendict = mkPackage(
  nixRaw`pkgs.goldendict`,
  "A feature-rich dictionary lookup program",
);

/**
 * An advanced multi-dictionary lookup program
 */
export const goldendict_ng = mkPackage(
  nixRaw`pkgs.goldendict-ng`,
  "An advanced multi-dictionary lookup program",
);

/**
 * A golang formatter that fixes long lines
 */
export const golines = mkPackage(
  nixRaw`pkgs.golines`,
  "A golang formatter that fixes long lines",
);

/**
 * Linter for Go source code
 */
export const golint = mkPackage(
  nixRaw`pkgs.golint`,
  "Linter for Go source code",
);

/**
 * A simple, Git-powered wiki with a sweet API and local frontend
 */
export const gollum = mkPackage(
  nixRaw`pkgs.gollum`,
  "A simple, Git-powered wiki with a sweet API and local frontend",
);

/**
 * Cellular automata simulation program
 */
export const golly = mkPackage(
  nixRaw`pkgs.golly`,
  "Cellular automata simulation program",
);

/**
 * A GObject to SQLite object mapper
 */
export const gom = mkPackage(
  nixRaw`pkgs.gom`,
  "A GObject to SQLite object mapper",
);

/**
 * Interactive Go interpreter and debugger with generics and macros
 */
export const gomacro = mkPackage(
  nixRaw`pkgs.gomacro`,
  "Interactive Go interpreter and debugger with generics and macros",
);

/**
 * Tools for user enumeration and password bruteforce
 */
export const gomapenum = mkPackage(
  nixRaw`pkgs.gomapenum`,
  "Tools for user enumeration and password bruteforce",
);

/**
 * Displays "The Matrix" in a terminal
 */
export const gomatrix = mkPackage(
  nixRaw`pkgs.gomatrix`,
  "Displays \"The Matrix\" in a terminal",
);

/**
 * Replacement for UNIX rm command
 */
export const gomi = mkPackage(
  nixRaw`pkgs.gomi`,
  "Replacement for UNIX rm command",
);

/**
 * A tool for building and running mobile apps written in Go
 */
export const gomobile = mkPackage(
  nixRaw`pkgs.gomobile`,
  "A tool for building and running mobile apps written in Go",
);

/**
 * Go tool to modify struct field tags
 */
export const gomodifytags = mkPackage(
  nixRaw`pkgs.gomodifytags`,
  "Go tool to modify struct field tags",
);

/**
 * A tool for comparing Git branches
 */
export const gomp = mkPackage(
  nixRaw`pkgs.gomp`,
  "A tool for comparing Git branches",
);

/**
 * A flexible commandline tool for template rendering
 */
export const gomplate = mkPackage(
  nixRaw`pkgs.gomplate`,
  "A flexible commandline tool for template rendering",
);

/**
 * A terminal based Matrix client written in Go
 */
export const gomuks = mkPackage(
  nixRaw`pkgs.gomuks`,
  "A terminal based Matrix client written in Go",
);

/**
 * Music streaming server / subsonic server API implementation
 */
export const gonic = mkPackage(
  nixRaw`pkgs.gonic`,
  "Music streaming server / subsonic server API implementation",
);

/**
 * Access your Google contacts from the command line
 */
export const goobook = mkPackage(
  nixRaw`pkgs.goobook`,
  "Access your Google contacts from the command line",
);

/**
 * Canvas widget for GTK based on the the Cairo 2D library
 */
export const goocanvas = mkPackage(
  nixRaw`pkgs.goocanvas`,
  "Canvas widget for GTK based on the the Cairo 2D library",
);

/**
 * Canvas widget for GTK based on the the Cairo 2D library
 */
export const goocanvas2 = mkPackage(
  nixRaw`pkgs.goocanvas2`,
  "Canvas widget for GTK based on the the Cairo 2D library",
);

/**
 * Canvas widget for GTK based on the the Cairo 2D library
 */
export const goocanvas3 = mkPackage(
  nixRaw`pkgs.goocanvas3`,
  "Canvas widget for GTK based on the the Cairo 2D library",
);

/**
 * C++ bindings for GooCanvas
 */
export const goocanvasmm2 = mkPackage(
  nixRaw`pkgs.goocanvasmm2`,
  "C++ bindings for GooCanvas",
);

/**
 * A CLI tool for managing hostfiles
 */
export const goodhosts = mkPackage(
  nixRaw`pkgs.goodhosts`,
  "A CLI tool for managing hostfiles",
);

/**
 * A lightweight internet radio player
 */
export const goodvibes = mkPackage(
  nixRaw`pkgs.goodvibes`,
  "A lightweight internet radio player",
);

/**
 * A high-performance, POSIX-ish Amazon S3 file system written in Go.
 */
export const goofys = mkPackage(
  nixRaw`pkgs.goofys`,
  "A high-performance, POSIX-ish Amazon S3 file system written in Go.",
);

/**
 * Multi-API shader test framework
 */
export const google_amber = mkPackage(
  nixRaw`pkgs.google-amber`,
  "Multi-API shader test framework",
);

/**
 * Google App Engine SDK for Go
 */
export const google_app_engine_go_sdk = mkPackage(
  nixRaw`pkgs.google-app-engine-go-sdk`,
  "Google App Engine SDK for Go",
);

/**
 * Two-step verification, with pam module
 */
export const google_authenticator = mkPackage(
  nixRaw`pkgs.google-authenticator`,
  "Two-step verification, with pam module",
);

/**
 * A freeware web browser developed by Google
 */
export const google_chrome = mkPackage(
  nixRaw`pkgs.google-chrome`,
  "A freeware web browser developed by Google",
);

/**
 * A freeware web browser developed by Google
 */
export const google_chrome_beta = mkPackage(
  nixRaw`pkgs.google-chrome-beta`,
  "A freeware web browser developed by Google",
);

/**
 * A freeware web browser developed by Google
 */
export const google_chrome_dev = mkPackage(
  nixRaw`pkgs.google-chrome-dev`,
  "A freeware web browser developed by Google",
);

/**
 * Develop Apps Script Projects locally
 */
export const google_clasp = mkPackage(
  nixRaw`pkgs.google-clasp`,
  "Develop Apps Script Projects locally",
);

/**
 * Google Cloud Bigtable Tool
 */
export const google_cloud_bigtable_tool = mkPackage(
  nixRaw`pkgs.google-cloud-bigtable-tool`,
  "Google Cloud Bigtable Tool",
);

/**
 * C++ Idiomatic Clients for Google Cloud Platform services
 */
export const google_cloud_cpp = mkPackage(
  nixRaw`pkgs.google-cloud-cpp`,
  "C++ Idiomatic Clients for Google Cloud Platform services",
);

/**
 * Tools for the google cloud platform
 */
export const google_cloud_sdk = mkPackage(
  nixRaw`pkgs.google-cloud-sdk`,
  "Tools for the google cloud platform",
);

/**
 * Tools for the google cloud platform
 */
export const google_cloud_sdk_gce = mkPackage(
  nixRaw`pkgs.google-cloud-sdk-gce`,
  "Tools for the google cloud platform",
);

/**
 * Utility for ensuring secure connections to Google Cloud SQL instances
 */
export const google_cloud_sql_proxy = mkPackage(
  nixRaw`pkgs.google-cloud-sql-proxy`,
  "Utility for ensuring secure connections to Google Cloud SQL instances",
);

/**
 * Google Compute Engine tools and services
 */
export const google_compute_engine = mkPackage(
  nixRaw`pkgs.google-compute-engine`,
  "Google Compute Engine tools and services",
);

/**
 * An opensource cursor theme inspired by Google
 */
export const google_cursor = mkPackage(
  nixRaw`pkgs.google-cursor`,
  "An opensource cursor theme inspired by Google",
);

/**
 * A FUSE-based file system backed by Google Drive, written in OCaml
 */
export const google_drive_ocamlfuse = mkPackage(
  nixRaw`pkgs.google-drive-ocamlfuse`,
  "A FUSE-based file system backed by Google Drive, written in OCaml",
);

/**
 * Font files available from Google Fonts
 */
export const google_fonts = mkPackage(
  nixRaw`pkgs.google-fonts`,
  "Font files available from Google Fonts",
);

/**
 * Guest Agent for Google Compute Engine
 */
export const google_guest_agent = mkPackage(
  nixRaw`pkgs.google-guest-agent`,
  "Guest Agent for Google Compute Engine",
);

/**
 * Linux Guest Environment for Google Compute Engine
 */
export const google_guest_configs = mkPackage(
  nixRaw`pkgs.google-guest-configs`,
  "Linux Guest Environment for Google Compute Engine",
);

/**
 * OS Login Guest Environment for Google Compute Engine
 */
export const google_guest_oslogin = mkPackage(
  nixRaw`pkgs.google-guest-oslogin`,
  "OS Login Guest Environment for Google Compute Engine",
);

/**
 * Java source formatter by Google
 */
export const google_java_format = mkPackage(
  nixRaw`pkgs.google-java-format`,
  "Java source formatter by Google",
);

/**
 * A world sphere viewer
 */
export const googleearth_pro = mkPackage(
  nixRaw`pkgs.googleearth-pro`,
  "A world sphere viewer",
);

/**
 * Google Search, Google Site Search, Google News from the terminal
 */
export const googler = mkPackage(
  nixRaw`pkgs.googler`,
  "Google Search, Google Site Search, Google News from the terminal",
);

/**
 * Database migration tool which supports SQL migrations and Go functions
 */
export const goose = mkPackage(
  nixRaw`pkgs.goose`,
  "Database migration tool which supports SQL migrations and Go functions",
);

/**
 * A simple text-based Minecraft modpack manager
 */
export const gopacked = mkPackage(
  nixRaw`pkgs.gopacked`,
  "A simple text-based Minecraft modpack manager",
);

/**
 * The slightly more awesome Standard Unix Password Manager for Teams. Written in Go
 */
export const gopass = mkPackage(
  nixRaw`pkgs.gopass`,
  "The slightly more awesome Standard Unix Password Manager for Teams. Written in Go",
);

/**
 * Gopass haveibeenpwnd.com integration
 */
export const gopass_hibp = mkPackage(
  nixRaw`pkgs.gopass-hibp`,
  "Gopass haveibeenpwnd.com integration",
);

/**
 * Enables communication with gopass via JSON messages
 */
export const gopass_jsonapi = mkPackage(
  nixRaw`pkgs.gopass-jsonapi`,
  "Enables communication with gopass via JSON messages",
);

/**
 * Gopass Summon Provider
 */
export const gopass_summon_provider = mkPackage(
  nixRaw`pkgs.gopass-summon-provider`,
  "Gopass Summon Provider",
);

/**
 * Refactoring and code transformation tool for Go
 */
export const gopatch = mkPackage(
  nixRaw`pkgs.gopatch`,
  "Refactoring and code transformation tool for Go",
);

/**
 * A ncurses gopher client
 */
export const gopher = mkPackage(
  nixRaw`pkgs.gopher`,
  "A ncurses gopher client",
);

/**
 * Go kernel for Jupyter notebooks
 */
export const gophernotes = mkPackage(
  nixRaw`pkgs.gophernotes`,
  "Go kernel for Jupyter notebooks",
);

/**
 * Tool to get list available Go packages
 */
export const gopkgs = mkPackage(
  nixRaw`pkgs.gopkgs`,
  "Tool to get list available Go packages",
);

/**
 * Official language server for the Go language
 */
export const gopls = mkPackage(
  nixRaw`pkgs.gopls`,
  "Official language server for the Go language",
);

/**
 * Command line interface for processing media filmed on GoPro HERO 3, 4, 5, 6, and 7 cameras
 */
export const gopro = mkPackage(
  nixRaw`pkgs.gopro`,
  "Command line interface for processing media filmed on GoPro HERO 3, 4, 5, 6, and 7 cameras",
);

/**
 * A tool to list and diagnose Go processes currently running on your system
 */
export const gops = mkPackage(
  nixRaw`pkgs.gops`,
  "A tool to list and diagnose Go processes currently running on your system",
);

/**
 * A gopsutil-based command to display system usage info
 */
export const gopsuinfo = mkPackage(
  nixRaw`pkgs.gopsuinfo`,
  "A gopsutil-based command to display system usage info",
);

/**
 * Yet another Go REPL that works nicely
 */
export const gore = mkPackage(
  nixRaw`pkgs.gore`,
  "Yet another Go REPL that works nicely",
);

/**
 * djb's redo, a system for building files from source files. Written in Go
 */
export const goredo = mkPackage(
  nixRaw`pkgs.goredo`,
  "djb's redo, a system for building files from source files. Written in Go",
);

/**
 * Deliver Go binaries as fast and easily as possible
 */
export const goreleaser = mkPackage(
  nixRaw`pkgs.goreleaser`,
  "Deliver Go binaries as fast and easily as possible",
);

/**
 * foreman clone written in go language
 */
export const goreman = mkPackage(
  nixRaw`pkgs.goreman`,
  "foreman clone written in go language",
);

/**
 * Open-source tool for capturing and replaying live HTTP traffic
 */
export const goreplay = mkPackage(
  nixRaw`pkgs.goreplay`,
  "Open-source tool for capturing and replaying live HTTP traffic",
);

/**
 * Go symbol recovery tool
 */
export const goresym = mkPackage(
  nixRaw`pkgs.goresym`,
  "Go symbol recovery tool",
);

/**
 * Password Gorilla is a Tk based password manager
 */
export const gorilla_bin = mkPackage(
  nixRaw`pkgs.gorilla-bin`,
  "Password Gorilla is a Tk based password manager",
);

/**
 * LLMs for your CLI
 */
export const gorilla_cli = mkPackage(
  nixRaw`pkgs.gorilla-cli`,
  "LLMs for your CLI",
);

/**
 * The RPKI-to-Router server used at Cloudflare
 */
export const gortr = mkPackage(
  nixRaw`pkgs.gortr`,
  "The RPKI-to-Router server used at Cloudflare",
);

/**
 * Golang security checker
 */
export const gosec = mkPackage(
  nixRaw`pkgs.gosec`,
  "Golang security checker",
);

/**
 * Reverse/bind shell generator
 */
export const gosh = mkPackage(
  nixRaw`pkgs.gosh`,
  "Reverse/bind shell generator",
);

/**
 * Open Street Map viewer
 */
export const gosmore = mkPackage(
  nixRaw`pkgs.gosmore`,
  "Open Street Map viewer",
);

/**
 * Fast web spider written in Go
 */
export const gospider = mkPackage(
  nixRaw`pkgs.gospider`,
  "Fast web spider written in Go",
);

/**
 * Quick and easy server validation
 */
export const goss = mkPackage(
  nixRaw`pkgs.goss`,
  "Quick and easy server validation",
);

/**
 * A fast and simple multimedia fileserver
 */
export const gossa = mkPackage(
  nixRaw`pkgs.gossa`,
  "A fast and simple multimedia fileserver",
);

/**
 * A simple tunnel written in golang
 */
export const gost = mkPackage(
  nixRaw`pkgs.gost`,
  "A simple tunnel written in golang",
);

/**
 * Fast static site generator
 */
export const gostatic = mkPackage(
  nixRaw`pkgs.gostatic`,
  "Fast static site generator",
);

/**
 * Tool that avoids TTY and signal-forwarding behavior of sudo and su
 */
export const gosu = mkPackage(
  nixRaw`pkgs.gosu`,
  "Tool that avoids TTY and signal-forwarding behavior of sudo and su",
);

/**
 * A version control system which prioritizes ease of use and simplicity over flexibility
 */
export const got = mkPackage(
  nixRaw`pkgs.got`,
  "A version control system which prioritizes ease of use and simplicity over flexibility",
);

/**
 * ctags-compatible tag generator for Go
 */
export const gotags = mkPackage(
  nixRaw`pkgs.gotags`,
  "ctags-compatible tag generator for Go",
);

/**
 * CLI for go text/template
 */
export const gotemplate = mkPackage(
  nixRaw`pkgs.gotemplate`,
  "CLI for go text/template",
);

/**
 * go test with colors
 */
export const gotest = mkPackage(
  nixRaw`pkgs.gotest`,
  "go test with colors",
);

/**
 * Go test output for humans
 */
export const gotestfmt = mkPackage(
  nixRaw`pkgs.gotestfmt`,
  "Go test output for humans",
);

/**
 * Generate Go tests from your source code
 */
export const gotests = mkPackage(
  nixRaw`pkgs.gotests`,
  "Generate Go tests from your source code",
);

/**
 * A human friendly `go test` runner
 */
export const gotestsum = mkPackage(
  nixRaw`pkgs.gotestsum`,
  "A human friendly `go test` runner",
);

/**
 * Tool for API and OWASP attack simulation
 */
export const gotestwaf = mkPackage(
  nixRaw`pkgs.gotestwaf`,
  "Tool for API and OWASP attack simulation",
);

/**
 * A command line interface for pushing messages to gotify/server
 */
export const gotify_cli = mkPackage(
  nixRaw`pkgs.gotify-cli`,
  "A command line interface for pushing messages to gotify/server",
);

/**
 * Small Gotify daemon to send messages as desktop notifications
 */
export const gotify_desktop = mkPackage(
  nixRaw`pkgs.gotify-desktop`,
  "Small Gotify daemon to send messages as desktop notifications",
);

/**
 * A simple server for sending and receiving messages in real-time per WebSocket
 */
export const gotify_server = mkPackage(
  nixRaw`pkgs.gotify-server`,
  "A simple server for sending and receiving messages in real-time per WebSocket",
);

/**
 * Matrix client written in Go using GTK4
 */
export const gotktrix = mkPackage(
  nixRaw`pkgs.gotktrix`,
  "Matrix client written in Go using GTK4",
);

/**
 * Additional tools for Go development
 */
export const gotools = mkPackage(
  nixRaw`pkgs.gotools`,
  "Additional tools for Go development",
);

/**
 * A terminal based graphical activity monitor inspired by gtop and vtop
 */
export const gotop = mkPackage(
  nixRaw`pkgs.gotop`,
  "A terminal based graphical activity monitor inspired by gtop and vtop",
);

/**
 * Fast, fun, ActivityPub server, powered by Go
 */
export const gotosocial = mkPackage(
  nixRaw`pkgs.gotosocial`,
  "Fast, fun, ActivityPub server, powered by Go",
);

/**
 * An efficient frontend for Go execution traces
 */
export const gotraceui = mkPackage(
  nixRaw`pkgs.gotraceui`,
  "An efficient frontend for Go execution traces",
);

/**
 * An SWT based API for managing users and issuing SWT tokens
 */
export const gotrue = mkPackage(
  nixRaw`pkgs.gotrue`,
  "An SWT based API for managing users and issuing SWT tokens",
);

/**
 * A JWT based API for managing users and issuing JWT tokens
 */
export const gotrue_supabase = mkPackage(
  nixRaw`pkgs.gotrue-supabase`,
  "A JWT based API for managing users and issuing JWT tokens",
);

/**
 * Share your terminal as a web application
 */
export const gotty = mkPackage(
  nixRaw`pkgs.gotty`,
  "Share your terminal as a web application",
);

/**
 * A touch-typing tutor
 */
export const gotypist = mkPackage(
  nixRaw`pkgs.gotypist`,
  "A touch-typing tutor",
);

/**
 * A public domain font based on Frederic Goudy’s Kennerley Oldstyle
 */
export const goudy_bookletter_1911 = mkPackage(
  nixRaw`pkgs.goudy-bookletter-1911`,
  "A public domain font based on Frederic Goudy’s Kennerley Oldstyle",
);

/**
 * A Software version control visualization tool
 */
export const gource = mkPackage(
  nixRaw`pkgs.gource`,
  "A Software version control visualization tool",
);

/**
 * A vSphere CLI built on top of govmomi
 */
export const govc = mkPackage(
  nixRaw`pkgs.govc`,
  "A vSphere CLI built on top of govmomi",
);

/**
 * Go vendor tool that works with the standard vendor file
 */
export const govendor = mkPackage(
  nixRaw`pkgs.govendor`,
  "Go vendor tool that works with the standard vendor file",
);

/**
 * An opensource project that aims to create a Graphical UI to help manage Linux overlays
 */
export const goverlay = mkPackage(
  nixRaw`pkgs.goverlay`,
  "An opensource project that aims to create a Graphical UI to help manage Linux overlays",
);

export const govers = mkPackage(
  nixRaw`pkgs.govers`,
  "",
);

/**
 * Tool to get an overview of the list of URLs
 */
export const goverview = mkPackage(
  nixRaw`pkgs.goverview`,
  "Tool to get an overview of the list of URLs",
);

/**
 * The database client and tools for the Go vulnerability database, also known as vuln
 */
export const govulncheck = mkPackage(
  nixRaw`pkgs.govulncheck`,
  "The database client and tools for the Go vulnerability database, also known as vuln",
);

/**
 * Web screenshot utility
 */
export const gowitness = mkPackage(
  nixRaw`pkgs.gowitness`,
  "Web screenshot utility",
);

/**
 * A dead simple, no frills Go cross compile tool
 */
export const gox = mkPackage(
  nixRaw`pkgs.gox`,
  "A dead simple, no frills Go cross compile tool",
);

/**
 * Open Source 3D voxel editor
 */
export const goxel = mkPackage(
  nixRaw`pkgs.goxel`,
  "Open Source 3D voxel editor",
);

/**
 * An unofficial GoXLR App replacement for Linux, Windows and MacOS
 */
export const goxlr_utility = mkPackage(
  nixRaw`pkgs.goxlr-utility`,
  "An unofficial GoXLR App replacement for Linux, Windows and MacOS",
);

/**
 * A compiler to translate GP scripts to PARI programs
 */
export const gp2c = mkPackage(
  nixRaw`pkgs.gp2c`,
  "A compiler to translate GP scripts to PARI programs",
);

/**
 * Interactively authenticate to GlobalProtect VPNs that require SAML
 */
export const gp_saml_gui = mkPackage(
  nixRaw`pkgs.gp-saml-gui`,
  "Interactively authenticate to GlobalProtect VPNs that require SAML",
);

/**
 * Graphical user interface for the GnuPG
 */
export const gpa = mkPackage(
  nixRaw`pkgs.gpa`,
  "Graphical user interface for the GnuPG",
);

/**
 * Open Source multimedia framework for research and academic purposes
 */
export const gpac = mkPackage(
  nixRaw`pkgs.gpac`,
  "Open Source multimedia framework for research and academic purposes",
);

/**
 * Guess PC-type hard disk partitions
 */
export const gpart = mkPackage(
  nixRaw`pkgs.gpart`,
  "Guess PC-type hard disk partitions",
);

/**
 * Graphical disk partitioning tool
 */
export const gparted = mkPackage(
  nixRaw`pkgs.gparted`,
  "Graphical disk partitioning tool",
);

/**
 * Perfect hash function generator
 */
export const gperf = mkPackage(
  nixRaw`pkgs.gperf`,
  "Perfect hash function generator",
);

/**
 * Perfect hash function generator
 */
export const gperf_3_0 = mkPackage(
  nixRaw`pkgs.gperf_3_0`,
  "Perfect hash function generator",
);

/**
 * Fast, multi-threaded malloc() and nifty performance analysis tools
 */
export const gperftools = mkPackage(
  nixRaw`pkgs.gperftools`,
  "Fast, multi-threaded malloc() and nifty performance analysis tools",
);

/**
 * Manage your passwords with GnuPG and a text editor
 */
export const gpg_mdp = mkPackage(
  nixRaw`pkgs.gpg-mdp`,
  "Manage your passwords with GnuPG and a text editor",
);

/**
 * Terminal user interface for GnuPG
 */
export const gpg_tui = mkPackage(
  nixRaw`pkgs.gpg-tui`,
  "Terminal user interface for GnuPG",
);

/**
 * Library for making GnuPG easier to use
 */
export const gpgme = mkPackage(
  nixRaw`pkgs.gpgme`,
  "Library for making GnuPG easier to use",
);

/**
 * A ready to use set of digital camera software applications
 */
export const gphoto2 = mkPackage(
  nixRaw`pkgs.gphoto2`,
  "A ready to use set of digital camera software applications",
);

/**
 * Fuse FS to mount a digital camera
 */
export const gphoto2fs = mkPackage(
  nixRaw`pkgs.gphoto2fs`,
  "Fuse FS to mount a digital camera",
);

/**
 * Google Photos and Albums backup with Google Photos Library API
 */
export const gphotos_sync = mkPackage(
  nixRaw`pkgs.gphotos-sync`,
  "Google Photos and Albums backup with Google Photos Library API",
);

/**
 * Advanced color picker written in C++ using GTK+ toolkit
 */
export const gpick = mkPackage(
  nixRaw`pkgs.gpick`,
  "Advanced color picker written in C++ using GTK+ toolkit",
);

/**
 * A simple and fast image viewer for X
 */
export const gpicview = mkPackage(
  nixRaw`pkgs.gpicview`,
  "A simple and fast image viewer for X",
);

/**
 * Ping, but with a graph
 */
export const gping = mkPackage(
  nixRaw`pkgs.gping`,
  "Ping, but with a graph",
);

/**
 * Linux tools to inspect the gpiochip interface
 */
export const gpio_utils = mkPackage(
  nixRaw`pkgs.gpio-utils`,
  "Linux tools to inspect the gpiochip interface",
);

/**
 * Desktop software for the interactive visualisation of plate-tectonics
 */
export const gplates = mkPackage(
  nixRaw`pkgs.gplates`,
  "Desktop software for the interactive visualisation of plate-tectonics",
);

/**
 * A daemon that provides mouse support on the Linux console
 */
export const gpm = mkPackage(
  nixRaw`pkgs.gpm`,
  "A daemon that provides mouse support on the Linux console",
);

/**
 * A daemon that provides mouse support on the Linux console
 */
export const gpm_ncurses = mkPackage(
  nixRaw`pkgs.gpm-ncurses`,
  "A daemon that provides mouse support on the Linux console",
);

/**
 * A podcatcher written in python
 */
export const gpodder = mkPackage(
  nixRaw`pkgs.gpodder`,
  "A podcatcher written in python",
);

/**
 * General-purpose preprocessor with customizable syntax
 */
export const gpp = mkPackage(
  nixRaw`pkgs.gpp`,
  "General-purpose preprocessor with customizable syntax",
);

/**
 * Multi-language extensible build tool
 */
export const gprbuild = mkPackage(
  nixRaw`pkgs.gprbuild`,
  "Multi-language extensible build tool",
);

/**
 * Multi-language extensible build tool
 */
export const gprbuild_boot = mkPackage(
  nixRaw`pkgs.gprbuild-boot`,
  "Multi-language extensible build tool",
);

/**
 * Real time satellite tracking and orbit prediction
 */
export const gpredict = mkPackage(
  nixRaw`pkgs.gpredict`,
  "Real time satellite tracking and orbit prediction",
);

/**
 * Python script to convert the output from many profilers into a dot graph
 */
export const gprof2dot = mkPackage(
  nixRaw`pkgs.gprof2dot`,
  "Python script to convert the output from many profilers into a dot graph",
);

/**
 * G.Projector transforms an input map image into any of about 200 global and regional map projections
 */
export const gprojector = mkPackage(
  nixRaw`pkgs.gprojector`,
  "G.Projector transforms an input map image into any of about 200 global and regional map projections",
);

/**
 * GNU Prolog, a free Prolog compiler with constraint solving over finite domains
 */
export const gprolog = mkPackage(
  nixRaw`pkgs.gprolog`,
  "GNU Prolog, a free Prolog compiler with constraint solving over finite domains",
);

/**
 * Convert, upload and download data from GPS and Map programs
 */
export const gpsbabel = mkPackage(
  nixRaw`pkgs.gpsbabel`,
  "Convert, upload and download data from GPS and Map programs",
);

/**
 * Convert, upload and download data from GPS and Map programs
 */
export const gpsbabel_gui = mkPackage(
  nixRaw`pkgs.gpsbabel-gui`,
  "Convert, upload and download data from GPS and Map programs",
);

/**
 * A GPS photo correlation tool, to add EXIF geotags
 */
export const gpscorrelate = mkPackage(
  nixRaw`pkgs.gpscorrelate`,
  "A GPS photo correlation tool, to add EXIF geotags",
);

/**
 * GPS service daemon
 */
export const gpsd = mkPackage(
  nixRaw`pkgs.gpsd`,
  "GPS service daemon",
);

/**
 * Application for viewing, editing and converting GPS coordinate data
 */
export const gpsprune = mkPackage(
  nixRaw`pkgs.gpsprune`,
  "Application for viewing, editing and converting GPS coordinate data",
);

/**
 * Text completion and compression using GPT-2
 */
export const gpt2tc = mkPackage(
  nixRaw`pkgs.gpt2tc`,
  "Text completion and compression using GPT-2",
);

/**
 * A git prepare-commit-msg hook for authoring commit messages with GPT-3. 
 */
export const gptcommit = mkPackage(
  nixRaw`pkgs.gptcommit`,
  "A git prepare-commit-msg hook for authoring commit messages with GPT-3. ",
);

/**
 * Set of text-mode partitioning tools for Globally Unique Identifier (GUID) Partition Table (GPT) disks
 */
export const gptfdisk = mkPackage(
  nixRaw`pkgs.gptfdisk`,
  "Set of text-mode partitioning tools for Globally Unique Identifier (GUID) Partition Table (GPT) disks",
);

/**
 * A GPT manager that allows you to copy partitions from one disk to another and more
 */
export const gptman = mkPackage(
  nixRaw`pkgs.gptman`,
  "A GPT manager that allows you to copy partitions from one disk to another and more",
);

/**
 * Multi-GPU CUDA stress test
 */
export const gpu_burn = mkPackage(
  nixRaw`pkgs.gpu-burn`,
  "Multi-GPU CUDA stress test",
);

/**
 * A screen recorder that has minimal impact on system performance by recording a window using the GPU only
 */
export const gpu_screen_recorder = mkPackage(
  nixRaw`pkgs.gpu-screen-recorder`,
  "A screen recorder that has minimal impact on system performance by recording a window using the GPU only",
);

/**
 * GTK frontend for gpu-screen-recorder.
 */
export const gpu_screen_recorder_gtk = mkPackage(
  nixRaw`pkgs.gpu-screen-recorder-gtk`,
  "GTK frontend for gpu-screen-recorder.",
);

/**
 * Application that allows to switch between the graphic cards of dual-GPU MacBook Pro models
 */
export const gpu_switch = mkPackage(
  nixRaw`pkgs.gpu-switch`,
  "Application that allows to switch between the graphic cards of dual-GPU MacBook Pro models",
);

/**
 * A front-end to glxinfo, vulkaninfo, clinfo and es2_info
 */
export const gpu_viewer = mkPackage(
  nixRaw`pkgs.gpu-viewer`,
  "A front-end to glxinfo, vulkaninfo, clinfo and es2_info",
);

/**
 * A collection of tools for the Microchip (TM) PIC microcontrollers. It includes gpasm, gplink, and gplib
 */
export const gputils = mkPackage(
  nixRaw`pkgs.gputils`,
  "A collection of tools for the Microchip (TM) PIC microcontrollers. It includes gpasm, gplink, and gplib",
);

/**
 * GPU Trace Visualizer
 */
export const gpuvis = mkPackage(
  nixRaw`pkgs.gpuvis`,
  "GPU Trace Visualizer",
);

/**
 * Gcode to x3g conversion postprocessor
 */
export const gpx = mkPackage(
  nixRaw`pkgs.gpx`,
  "Gcode to x3g conversion postprocessor",
);

/**
 * Simple tool to visualize tracks and waypoints stored in a gpx file
 */
export const gpx_viewer = mkPackage(
  nixRaw`pkgs.gpx-viewer`,
  "Simple tool to visualize tracks and waypoints stored in a gpx file",
);

/**
 * Program to show and manipulate GPS tracks
 */
export const gpxlab = mkPackage(
  nixRaw`pkgs.gpxlab`,
  "Program to show and manipulate GPS tracks",
);

/**
 * GPS log file viewer and analyzer
 */
export const gpxsee = mkPackage(
  nixRaw`pkgs.gpxsee`,
  "GPS log file viewer and analyzer",
);

/**
 * GPS log file viewer and analyzer
 */
export const gpxsee_qt5 = mkPackage(
  nixRaw`pkgs.gpxsee-qt5`,
  "GPS log file viewer and analyzer",
);

/**
 * GPS log file viewer and analyzer
 */
export const gpxsee_qt6 = mkPackage(
  nixRaw`pkgs.gpxsee-qt6`,
  "GPS log file viewer and analyzer",
);

/**
 * A Python interpreter written in Go
 */
export const gpython = mkPackage(
  nixRaw`pkgs.gpython`,
  "A Python interpreter written in Go",
);

/**
 * A SQL like query language to perform queries on .git files
 */
export const gql = mkPackage(
  nixRaw`pkgs.gql`,
  "A SQL like query language to perform queries on .git files",
);

/**
 * Go tool for building GraphQL client with gqlgen
 */
export const gqlgenc = mkPackage(
  nixRaw`pkgs.gqlgenc`,
  "Go tool for building GraphQL client with gqlgen",
);

/**
 * GraphQL linter
 */
export const gqlint = mkPackage(
  nixRaw`pkgs.gqlint`,
  "GraphQL linter",
);

/**
 * Software defined radio (SDR) receiver
 */
export const gqrx = mkPackage(
  nixRaw`pkgs.gqrx`,
  "Software defined radio (SDR) receiver",
);

/**
 * Software defined radio (SDR) receiver
 */
export const gqrx_gr_audio = mkPackage(
  nixRaw`pkgs.gqrx-gr-audio`,
  "Software defined radio (SDR) receiver",
);

/**
 * Software defined radio (SDR) receiver
 */
export const gqrx_portaudio = mkPackage(
  nixRaw`pkgs.gqrx-portaudio`,
  "Software defined radio (SDR) receiver",
);

/**
 * A fast image viewer
 */
export const gqview = mkPackage(
  nixRaw`pkgs.gqview`,
  "A fast image viewer",
);

/**
 * GR framework is a graphics library for visualisation applications
 */
export const gr_framework = mkPackage(
  nixRaw`pkgs.gr-framework`,
  "GR framework is a graphics library for visualisation applications",
);

/**
 * High-Performance Polyglot VM
 */
export const graalvm_ce = mkPackage(
  nixRaw`pkgs.graalvm-ce`,
  "High-Performance Polyglot VM",
);

/**
 * Crawler for web archiving with WARC output
 */
export const grab_site = mkPackage(
  nixRaw`pkgs.grab-site`,
  "Crawler for web archiving with WARC output",
);

/**
 * Python based serial dump and timing program
 */
export const grabserial = mkPackage(
  nixRaw`pkgs.grabserial`,
  "Python based serial dump and timing program",
);

/**
 * A small script to submit to Gradescope via GitHub
 */
export const gradescope_submit = mkPackage(
  nixRaw`pkgs.gradescope-submit`,
  "A small script to submit to Gradescope via GitHub",
);

/**
 * Customize libadwaita and GTK3 apps (with adw-gtk3)
 */
export const gradience = mkPackage(
  nixRaw`pkgs.gradience`,
  "Customize libadwaita and GTK3 apps (with adw-gtk3)",
);

/**
 * Enterprise-grade build system
 */
export const gradle = mkPackage(
  nixRaw`pkgs.gradle`,
  "Enterprise-grade build system",
);

/**
 * Enterprise-grade build system
 */
export const gradle_6 = mkPackage(
  nixRaw`pkgs.gradle_6`,
  "Enterprise-grade build system",
);

/**
 * Enterprise-grade build system
 */
export const gradle_7 = mkPackage(
  nixRaw`pkgs.gradle_7`,
  "Enterprise-grade build system",
);

/**
 * Enterprise-grade build system
 */
export const gradle_8 = mkPackage(
  nixRaw`pkgs.gradle_8`,
  "Enterprise-grade build system",
);

/**
 * Gradle tab completion for bash and zsh
 */
export const gradle_completion = mkPackage(
  nixRaw`pkgs.gradle-completion`,
  "Gradle tab completion for bash and zsh",
);

/**
 * grsecurity RBAC administration and policy analysis utility
 */
export const gradm = mkPackage(
  nixRaw`pkgs.gradm`,
  "grsecurity RBAC administration and policy analysis utility",
);

/**
 * Gorgeous metric viz, dashboards & editors for Graphite, InfluxDB & OpenTSDB
 */
export const grafana = mkPackage(
  nixRaw`pkgs.grafana`,
  "Gorgeous metric viz, dashboards & editors for Graphite, InfluxDB & OpenTSDB",
);

/**
 * A lightweight subset of Prometheus and more, optimized for Grafana Cloud
 */
export const grafana_agent = mkPackage(
  nixRaw`pkgs.grafana-agent`,
  "A lightweight subset of Prometheus and more, optimized for Grafana Cloud",
);

/**
 * Grafana Dash-n-Grab (gdg) -- backup and restore Grafana dashboards, datasources, and other entities
 */
export const grafana_dash_n_grab = mkPackage(
  nixRaw`pkgs.grafana-dash-n-grab`,
  "Grafana Dash-n-Grab (gdg) -- backup and restore Grafana dashboards, datasources, and other entities",
);

/**
 * A Grafana backend plugin that handles rendering of panels & dashboards to PNGs using headless browser (Chromium/Chrome)
 */
export const grafana_image_renderer = mkPackage(
  nixRaw`pkgs.grafana-image-renderer`,
  "A Grafana backend plugin that handles rendering of panels & dashboards to PNGs using headless browser (Chromium/Chrome)",
);

/**
 * Like Prometheus, but for logs
 */
export const grafana_loki = mkPackage(
  nixRaw`pkgs.grafana-loki`,
  "Like Prometheus, but for logs",
);

/**
 * PDF report generator from a Grafana dashboard
 */
export const grafana_reporter = mkPackage(
  nixRaw`pkgs.grafana_reporter`,
  "PDF report generator from a Grafana dashboard",
);

/**
 * Command-line tool for rendering metrics dashboards inspired by Grafana
 */
export const grafterm = mkPackage(
  nixRaw`pkgs.grafterm`,
  "Command-line tool for rendering metrics dashboards inspired by Grafana",
);

/**
 * Bitmap paint program inspired by the Amiga programs Deluxe Paint and Brilliance
 */
export const grafx2 = mkPackage(
  nixRaw`pkgs.grafx2`,
  "Bitmap paint program inspired by the Amiga programs Deluxe Paint and Brilliance",
);

/**
 * Gesture Recognition And Instantiation Library
 */
export const grail = mkPackage(
  nixRaw`pkgs.grail`,
  "Gesture Recognition And Instantiation Library",
);

/**
 * Full stack, web application framework for the JVM
 */
export const grails = mkPackage(
  nixRaw`pkgs.grails`,
  "Full stack, web application framework for the JVM",
);

/**
 * Genealogy software
 */
export const gramps = mkPackage(
  nixRaw`pkgs.gramps`,
  "Genealogy software",
);

/**
 * Virtual Pipe Organ Software
 */
export const grandorgue = mkPackage(
  nixRaw`pkgs.grandorgue`,
  "Virtual Pipe Organ Software",
);

/**
 * Open-source macOS application to analyze disk usage
 */
export const grandperspective = mkPackage(
  nixRaw`pkgs.grandperspective`,
  "Open-source macOS application to analyze disk usage",
);

/**
 * The easiest way to access your cloud.
 */
export const granted = mkPackage(
  nixRaw`pkgs.granted`,
  "The easiest way to access your cloud.",
);

/**
 * Libraries for text templating with Qt
 */
export const grantlee = mkPackage(
  nixRaw`pkgs.grantlee`,
  "Libraries for text templating with Qt",
);

/**
 * Define and match graph patterns within binaries
 */
export const grap = mkPackage(
  nixRaw`pkgs.grap`,
  "Define and match graph patterns within binaries",
);

/**
 * Simple Wine+Roblox management tool
 */
export const grapejuice = mkPackage(
  nixRaw`pkgs.grapejuice`,
  "Simple Wine+Roblox management tool",
);

/**
 * CLI to create graphs from CSV files
 */
export const graph_cli = mkPackage(
  nixRaw`pkgs.graph-cli`,
  "CLI to create graphs from CSV files",
);

/**
 * Render/convert graphs in/from various formats
 */
export const graph_easy = mkPackage(
  nixRaw`pkgs.graph-easy`,
  "Render/convert graphs in/from various formats",
);

/**
 * A thin layer of graphic data types
 */
export const graphene = mkPackage(
  nixRaw`pkgs.graphene`,
  "A thin layer of graphic data types",
);

/**
 * Hardened allocator designed for modern systems
 */
export const graphene_hardened_malloc = mkPackage(
  nixRaw`pkgs.graphene-hardened-malloc`,
  "Hardened allocator designed for modern systems",
);

/**
 * A visualisation tool for the creation and analysis of graphs.
 */
export const graphia = mkPackage(
  nixRaw`pkgs.graphia`,
  "A visualisation tool for the creation and analysis of graphs.",
);

/**
 * Swiss army knife of image processing
 */
export const graphicsmagick = mkPackage(
  nixRaw`pkgs.graphicsmagick`,
  "Swiss army knife of image processing",
);

/**
 * ImageMagick interface for GraphicsMagick
 */
export const graphicsmagick_imagemagick_compat = mkPackage(
  nixRaw`pkgs.graphicsmagick-imagemagick-compat`,
  "ImageMagick interface for GraphicsMagick",
);

/**
 * Swiss army knife of image processing
 */
export const graphicsmagick_q16 = mkPackage(
  nixRaw`pkgs.graphicsmagick_q16`,
  "Swiss army knife of image processing",
);

/**
 * Tool to find GraphQL endpoints using subdomain enumeration
 */
export const graphinder = mkPackage(
  nixRaw`pkgs.graphinder`,
  "Tool to find GraphQL endpoints using subdomain enumeration",
);

/**
 * An advanced font engine
 */
export const graphite2 = mkPackage(
  nixRaw`pkgs.graphite2`,
  "An advanced font engine",
);

export const graphite_cli = mkPackage(
  nixRaw`pkgs.graphite-cli`,
  "",
);

/**
 * Graphite cursor theme
 */
export const graphite_cursors = mkPackage(
  nixRaw`pkgs.graphite-cursors`,
  "Graphite cursor theme",
);

/**
 * Flat Gtk+ theme based on Elegant Design
 */
export const graphite_gtk_theme = mkPackage(
  nixRaw`pkgs.graphite-gtk-theme`,
  "Flat Gtk+ theme based on Elegant Design",
);

/**
 * A flat Design theme for KDE Plasma desktop
 */
export const graphite_kde_theme = mkPackage(
  nixRaw`pkgs.graphite-kde-theme`,
  "A flat Design theme for KDE Plasma desktop",
);

/**
 * A GraphQL tool for Rust projects
 */
export const graphql_client = mkPackage(
  nixRaw`pkgs.graphql-client`,
  "A GraphQL tool for Rust projects",
);

/**
 * Tool to interact with a GraphQL endpoint
 */
export const graphqlmap = mkPackage(
  nixRaw`pkgs.graphqlmap`,
  "Tool to interact with a GraphQL endpoint",
);

/**
 * CLI and JS library for making GraphQL queries
 */
export const graphqurl = mkPackage(
  nixRaw`pkgs.graphqurl`,
  "CLI and JS library for making GraphQL queries",
);

/**
 * A database of graphs
 */
export const graphs = mkPackage(
  nixRaw`pkgs.graphs`,
  "A database of graphs",
);

/**
 * Graph visualization tools
 */
export const graphviz = mkPackage(
  nixRaw`pkgs.graphviz`,
  "Graph visualization tools",
);

/**
 * Graph visualization tools
 */
export const graphviz_nox = mkPackage(
  nixRaw`pkgs.graphviz-nox`,
  "Graph visualization tools",
);

/**
 * GraphQL Server Engine Fingerprinting utility
 */
export const graphw00f = mkPackage(
  nixRaw`pkgs.graphw00f`,
  "GraphQL Server Engine Fingerprinting utility",
);

/**
 * An artillery game in which you must hit your enemies using mathematical functions
 */
export const graphwar = mkPackage(
  nixRaw`pkgs.graphwar`,
  "An artillery game in which you must hit your enemies using mathematical functions",
);

/**
 * GIS software suite used for geospatial data management and analysis, image processing, graphics and maps production, spatial modeling, and visualization
 */
export const grass = mkPackage(
  nixRaw`pkgs.grass`,
  "GIS software suite used for geospatial data management and analysis, image processing, graphics and maps production, spatial modeling, and visualization",
);

/**
 * A Sass compiler written purely in Rust
 */
export const grass_sass = mkPackage(
  nixRaw`pkgs.grass-sass`,
  "A Sass compiler written purely in Rust",
);

/**
 * Beautiful OpenGL-based gravity simulator
 */
export const gravit = mkPackage(
  nixRaw`pkgs.gravit`,
  "Beautiful OpenGL-based gravity simulator",
);

/**
 * Open source log management solution
 */
export const graylog_3_3 = mkPackage(
  nixRaw`pkgs.graylog-3_3`,
  "Open source log management solution",
);

/**
 * Open source log management solution
 */
export const graylog_4_0 = mkPackage(
  nixRaw`pkgs.graylog-4_0`,
  "Open source log management solution",
);

/**
 * Open source log management solution
 */
export const graylog_4_3 = mkPackage(
  nixRaw`pkgs.graylog-4_3`,
  "Open source log management solution",
);

/**
 * Open source log management solution
 */
export const graylog_5_0 = mkPackage(
  nixRaw`pkgs.graylog-5_0`,
  "Open source log management solution",
);

/**
 * Open source log management solution
 */
export const graylog_5_1 = mkPackage(
  nixRaw`pkgs.graylog-5_1`,
  "Open source log management solution",
);

/**
 * A cli-accessible Greek Bible with the Septuagint, SBL and Apocrypha
 */
export const grb = mkPackage(
  nixRaw`pkgs.grb`,
  "A cli-accessible Greek Bible with the Septuagint, SBL and Apocrypha",
);

/**
 * A generic text colouriser
 */
export const grc = mkPackage(
  nixRaw`pkgs.grc`,
  "A generic text colouriser",
);

/**
 * Rust tool to collect and aggregate code coverage data for multiple source files
 */
export const grcov = mkPackage(
  nixRaw`pkgs.grcov`,
  "Rust tool to collect and aggregate code coverage data for multiple source files",
);

/**
 * Viewer for PDF files, uses SDL and libpoppler
 */
export const green_pdfviewer = mkPackage(
  nixRaw`pkgs.green-pdfviewer`,
  "Viewer for PDF files, uses SDL and libpoppler",
);

/**
 * A simple integrated development environment for Java
 */
export const greenfoot = mkPackage(
  nixRaw`pkgs.greenfoot`,
  "A simple integrated development environment for Java",
);

/**
 * A command-line podcast aggregator
 */
export const greg = mkPackage(
  nixRaw`pkgs.greg`,
  "A command-line podcast aggregator",
);

/**
 * Console of the Apache TinkerPop graph computing framework
 */
export const gremlin_console = mkPackage(
  nixRaw`pkgs.gremlin-console`,
  "Console of the Apache TinkerPop graph computing framework",
);

/**
 * Server of the Apache TinkerPop graph computing framework
 */
export const gremlin_server = mkPackage(
  nixRaw`pkgs.gremlin-server`,
  "Server of the Apache TinkerPop graph computing framework",
);

/**
 * Filter IPv4 and IPv6 addresses matching CIDR patterns
 */
export const grepcidr = mkPackage(
  nixRaw`pkgs.grepcidr`,
  "Filter IPv4 and IPv6 addresses matching CIDR patterns",
);

/**
 * Wrapper for grepmail utilizing mutt
 */
export const grepm = mkPackage(
  nixRaw`pkgs.grepm`,
  "Wrapper for grepmail utilizing mutt",
);

/**
 * A software package for econometric analysis
 */
export const gretl = mkPackage(
  nixRaw`pkgs.gretl`,
  "A software package for econometric analysis",
);

/**
 * A command-line tool for generating regular expressions from user-provided test cases
 */
export const grex = mkPackage(
  nixRaw`pkgs.grex`,
  "A command-line tool for generating regular expressions from user-provided test cases",
);

/**
 * Grey and blue theme from the Shimmer Project for GTK-based environments
 */
export const greybird = mkPackage(
  nixRaw`pkgs.greybird`,
  "Grey and blue theme from the Shimmer Project for GTK-based environments",
);

/**
 * A POS-based cryptocurrency that rewards users for participating on the BOINC network
 */
export const gridcoin_research = mkPackage(
  nixRaw`pkgs.gridcoin-research`,
  "A POS-based cryptocurrency that rewards users for participating on the BOINC network",
);

/**
 * Nix compatible lockfile manager, without Nix
 */
export const gridlock = mkPackage(
  nixRaw`pkgs.gridlock`,
  "Nix compatible lockfile manager, without Nix",
);

/**
 * An amateur radio companion to WSJT-X or JTDX
 */
export const gridtracker = mkPackage(
  nixRaw`pkgs.gridtracker`,
  "An amateur radio companion to WSJT-X or JTDX",
);

/**
 * Signatures for entire Python programs
 */
export const griffe = mkPackage(
  nixRaw`pkgs.griffe`,
  "Signatures for entire Python programs",
);

/**
 * A simple Ham Radio control (CAT) program based on Hamlib
 */
export const grig = mkPackage(
  nixRaw`pkgs.grig`,
  "A simple Ham Radio control (CAT) program based on Hamlib",
);

/**
 * Framework that provides access to various sources of multimedia content, using a pluggable system
 */
export const grilo = mkPackage(
  nixRaw`pkgs.grilo`,
  "Framework that provides access to various sources of multimedia content, using a pluggable system",
);

/**
 * A collection of plugins for the Grilo framework
 */
export const grilo_plugins = mkPackage(
  nixRaw`pkgs.grilo-plugins`,
  "A collection of plugins for the Grilo framework",
);

/**
 * Grab images from a Wayland compositor
 */
export const grim = mkPackage(
  nixRaw`pkgs.grim`,
  "Grab images from a Wayland compositor",
);

/**
 * A helper for screenshots within Hyprland, based on grimshot
 */
export const grimblast = mkPackage(
  nixRaw`pkgs.grimblast`,
  "A helper for screenshots within Hyprland, based on grimshot",
);

/**
 * A grep program configured the way I like it
 */
export const grin = mkPackage(
  nixRaw`pkgs.grin`,
  "A grep program configured the way I like it",
);

/**
 * GTK-based audio CD player/ripper
 */
export const grip = mkPackage(
  nixRaw`pkgs.grip`,
  "GTK-based audio CD player/ripper",
);

/**
 * Fast, indexed regexp search over large file trees
 */
export const grip_search = mkPackage(
  nixRaw`pkgs.grip-search`,
  "Fast, indexed regexp search over large file trees",
);

/**
 * A personnal accounting application
 */
export const grisbi = mkPackage(
  nixRaw`pkgs.grisbi`,
  "A personnal accounting application",
);

/**
 * A multitree-based personal task manager
 */
export const grit = mkPackage(
  nixRaw`pkgs.grit`,
  "A multitree-based personal task manager",
);

/**
 * A console Google Drive client
 */
export const grive2 = mkPackage(
  nixRaw`pkgs.grive2`,
  "A console Google Drive client",
);

/**
 * A utility for managing Jsonnet dashboards against the Grafana API
 */
export const grizzly = mkPackage(
  nixRaw`pkgs.grizzly`,
  "A utility for managing Jsonnet dashboards against the Grafana API",
);

/**
 * grml's zsh setup
 */
export const grml_zsh_config = mkPackage(
  nixRaw`pkgs.grml-zsh-config`,
  "grml's zsh setup",
);

/**
 * Automatically configure monitors/outputs for Xorg via RANDR
 */
export const grobi = mkPackage(
  nixRaw`pkgs.grobi`,
  "Automatically configure monitors/outputs for Xorg via RANDR",
);

/**
 * ERP beyond your fridge - grocy is a web-based self-hosted groceries & household management solution for your home
 */
export const grocy = mkPackage(
  nixRaw`pkgs.grocy`,
  "ERP beyond your fridge - grocy is a web-based self-hosted groceries & household management solution for your home",
);

/**
 * Peer-to-peer electronic cash system
 */
export const groestlcoin = mkPackage(
  nixRaw`pkgs.groestlcoin`,
  "Peer-to-peer electronic cash system",
);

/**
 * Peer-to-peer electronic cash system
 */
export const groestlcoind = mkPackage(
  nixRaw`pkgs.groestlcoind`,
  "Peer-to-peer electronic cash system",
);

/**
 * GNU Troff, a typesetting package that reads plain text and produces formatted output
 */
export const groff = mkPackage(
  nixRaw`pkgs.groff`,
  "GNU Troff, a typesetting package that reads plain text and produces formatted output",
);

/**
 * Molecular dynamics software package
 */
export const gromacs = mkPackage(
  nixRaw`pkgs.gromacs`,
  "Molecular dynamics software package",
);

/**
 * Molecular dynamics software package
 */
export const gromacsCudaMpi = mkPackage(
  nixRaw`pkgs.gromacsCudaMpi`,
  "Molecular dynamics software package",
);

/**
 * Molecular dynamics software package
 */
export const gromacsDouble = mkPackage(
  nixRaw`pkgs.gromacsDouble`,
  "Molecular dynamics software package",
);

/**
 * Molecular dynamics software package
 */
export const gromacsDoubleMpi = mkPackage(
  nixRaw`pkgs.gromacsDoubleMpi`,
  "Molecular dynamics software package",
);

/**
 * Molecular dynamics software package
 */
export const gromacsMpi = mkPackage(
  nixRaw`pkgs.gromacsMpi`,
  "Molecular dynamics software package",
);

/**
 * Desktop annotation tool
 */
export const gromit_mpx = mkPackage(
  nixRaw`pkgs.gromit-mpx`,
  "Desktop annotation tool",
);

/**
 * Make JSON greppable!
 */
export const gron = mkPackage(
  nixRaw`pkgs.gron`,
  "Make JSON greppable!",
);

/**
 * An open-source fulltext search engine and column store
 */
export const groonga = mkPackage(
  nixRaw`pkgs.groonga`,
  "An open-source fulltext search engine and column store",
);

/**
 * GRaphs for Object-Oriented VErification
 */
export const groove = mkPackage(
  nixRaw`pkgs.groove`,
  "GRaphs for Object-Oriented VErification",
);

/**
 * An agile dynamic language for the Java Platform
 */
export const groovy = mkPackage(
  nixRaw`pkgs.groovy`,
  "An agile dynamic language for the Java Platform",
);

/**
 * The C based gRPC (C++, Python, Ruby, Objective-C, PHP, C#)
 */
export const grpc = mkPackage(
  nixRaw`pkgs.grpc`,
  "The C based gRPC (C++, Python, Ruby, Objective-C, PHP, C#)",
);

/**
 * The command line tool for interacting with grpc services.
 */
export const grpc_cli = mkPackage(
  nixRaw`pkgs.grpc_cli`,
  "The command line tool for interacting with grpc services.",
);

/**
 * generic gRPC command line client
 */
export const grpc_client_cli = mkPackage(
  nixRaw`pkgs.grpc-client-cli`,
  "generic gRPC command line client",
);

/**
 * A gRPC to JSON proxy generator plugin for Google Protocol Buffers
 */
export const grpc_gateway = mkPackage(
  nixRaw`pkgs.grpc-gateway`,
  "A gRPC to JSON proxy generator plugin for Google Protocol Buffers",
);

/**
 * Distribution of protoc and the gRPC Node protoc plugin for ease of installation with npm
 */
export const grpc_tools = mkPackage(
  nixRaw`pkgs.grpc-tools`,
  "Distribution of protoc and the gRPC Node protoc plugin for ease of installation with npm",
);

/**
 * An interactive web UI for gRPC, along the lines of postman
 */
export const grpcui = mkPackage(
  nixRaw`pkgs.grpcui`,
  "An interactive web UI for gRPC, along the lines of postman",
);

/**
 * Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers
 */
export const grpcurl = mkPackage(
  nixRaw`pkgs.grpcurl`,
  "Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers",
);

/**
 * Synchronize folders, files and make backups
 */
export const grsync = mkPackage(
  nixRaw`pkgs.grsync`,
  "Synchronize folders, files and make backups",
);

/**
 * GNU GRUB, the Grand Unified Boot Loader
 */
export const grub2 = mkPackage(
  nixRaw`pkgs.grub2`,
  "GNU GRUB, the Grand Unified Boot Loader",
);

/**
 * GNU GRUB, the Grand Unified Boot Loader
 */
export const grub2_efi = mkPackage(
  nixRaw`pkgs.grub2_efi`,
  "GNU GRUB, the Grand Unified Boot Loader",
);

/**
 * GNU GRUB, the Grand Unified Boot Loader
 */
export const grub2_light = mkPackage(
  nixRaw`pkgs.grub2_light`,
  "GNU GRUB, the Grand Unified Boot Loader",
);

/**
 * PvGrub image for use for booting PV Xen guests
 */
export const grub2_pvgrub_image = mkPackage(
  nixRaw`pkgs.grub2_pvgrub_image`,
  "PvGrub image for use for booting PV Xen guests",
);

/**
 * GNU GRUB, the Grand Unified Boot Loader
 */
export const grub2_xen = mkPackage(
  nixRaw`pkgs.grub2_xen`,
  "GNU GRUB, the Grand Unified Boot Loader",
);

/**
 * An application launcher written in C and using GTK for the interface
 */
export const grun = mkPackage(
  nixRaw`pkgs.grun`,
  "An application launcher written in C and using GTK for the interface",
);

/**
 * A tokenizer, text cleaner, and phonemizer for many human languages
 */
export const gruut = mkPackage(
  nixRaw`pkgs.gruut`,
  "A tokenizer, text cleaner, and phonemizer for many human languages",
);

/**
 * Library for manipulating pronunciations using the International Phonetic Alphabet (IPA)
 */
export const gruut_ipa = mkPackage(
  nixRaw`pkgs.gruut-ipa`,
  "Library for manipulating pronunciations using the International Phonetic Alphabet (IPA)",
);

/**
 * Gruvbox theme for GTK based desktop environments
 */
export const gruvbox_dark_gtk = mkPackage(
  nixRaw`pkgs.gruvbox-dark-gtk`,
  "Gruvbox theme for GTK based desktop environments",
);

/**
 * Gruvbox icons for GTK based desktop environments
 */
export const gruvbox_dark_icons_gtk = mkPackage(
  nixRaw`pkgs.gruvbox-dark-icons-gtk`,
  "Gruvbox icons for GTK based desktop environments",
);

/**
 * A Gtk theme based on the Gruvbox colour pallete
 */
export const gruvbox_gtk_theme = mkPackage(
  nixRaw`pkgs.gruvbox-gtk-theme`,
  "A Gtk theme based on the Gruvbox colour pallete",
);

export const gruvterial_theme = mkPackage(
  nixRaw`pkgs.gruvterial-theme`,
  "",
);

/**
 * Vulnerability scanner for container images and filesystems
 */
export const grype = mkPackage(
  nixRaw`pkgs.grype`,
  "Vulnerability scanner for container images and filesystems",
);

/**
 * GNU SASL, Simple Authentication and Security Layer library
 */
export const gsasl = mkPackage(
  nixRaw`pkgs.gsasl`,
  "GNU SASL, Simple Authentication and Security Layer library",
);

/**
 * A GUI to produce PDFs or DjVus from scanned documents
 */
export const gscan2pdf = mkPackage(
  nixRaw`pkgs.gscan2pdf`,
  "A GUI to produce PDFs or DjVus from scanned documents",
);

/**
 * A screenshot frontend (CLI and GUI) for a variety of screenshot backends
 */
export const gscreenshot = mkPackage(
  nixRaw`pkgs.gscreenshot`,
  "A screenshot frontend (CLI and GUI) for a variety of screenshot backends",
);

/**
 * The Giant Swarm command line interface
 */
export const gsctl = mkPackage(
  nixRaw`pkgs.gsctl`,
  "The Giant Swarm command line interface",
);

/**
 * Collection of GSettings schemas for settings shared by various components of a desktop
 */
export const gsettings_desktop_schemas = mkPackage(
  nixRaw`pkgs.gsettings-desktop-schemas`,
  "Collection of GSettings schemas for settings shared by various components of a desktop",
);

/**
 * Library to access GSettings from Qt
 */
export const gsettings_qt = mkPackage(
  nixRaw`pkgs.gsettings-qt`,
  "Library to access GSettings from Qt",
);

/**
 * High-resolution shoreline data set, for use with GMT
 */
export const gshhg_gmt = mkPackage(
  nixRaw`pkgs.gshhg-gmt`,
  "High-resolution shoreline data set, for use with GMT",
);

/**
 * A graphical implementation of the Shogi board game, also known as Japanese Chess
 */
export const gshogi = mkPackage(
  nixRaw`pkgs.gshogi`,
  "A graphical implementation of the Shogi board game, also known as Japanese Chess",
);

/**
 * D-Bus service which performs user authentication on behalf of its clients
 */
export const gsignond = mkPackage(
  nixRaw`pkgs.gsignond`,
  "D-Bus service which performs user authentication on behalf of its clients",
);

/**
 * Lightweight calendar application written in C++ using GTK
 */
export const gsimplecal = mkPackage(
  nixRaw`pkgs.gsimplecal`,
  "Lightweight calendar application written in C++ using GTK",
);

/**
 * The GNU Scientific Library, a large numerical library
 */
export const gsl = mkPackage(
  nixRaw`pkgs.gsl`,
  "The GNU Scientific Library, a large numerical library",
);

        /**
         * A single-file header-only version of ISO C++ Guidelines Support Library
(GSL) for C++98, C++11, and later

         */
export const gsl_lite = mkPackage(
  nixRaw`pkgs.gsl-lite`,
  "A single-file header-only version of ISO C++ Guidelines Support Library\n(GSL) for C++98, C++11, and later\n",
);

/**
 * Lossy speech compression codec
 */
export const gsm = mkPackage(
  nixRaw`pkgs.gsm`,
  "Lossy speech compression codec",
);

/**
 * Hard disk drive health inspection tool
 */
export const gsmartcontrol = mkPackage(
  nixRaw`pkgs.gsmartcontrol`,
  "Hard disk drive health inspection tool",
);

/**
 * Library to access GSM mobile phones through GSM modems
 */
export const gsmlib = mkPackage(
  nixRaw`pkgs.gsmlib`,
  "Library to access GSM mobile phones through GSM modems",
);

/**
 * C/C++ toolkit for SOAP web services and XML-based applications
 */
export const gsoap = mkPackage(
  nixRaw`pkgs.gsoap`,
  "C/C++ toolkit for SOAP web services and XML-based applications",
);

/**
 * Connect like there is no firewall, securely
 */
export const gsocket = mkPackage(
  nixRaw`pkgs.gsocket`,
  "Connect like there is no firewall, securely",
);

/**
 * Small library for playing system sounds
 */
export const gsound = mkPackage(
  nixRaw`pkgs.gsound`,
  "Small library for playing system sounds",
);

/**
 * A minimal GUI for the Text To Speech 'Svox Pico'. Read clipboard or selected text in different languages and manage it : pause, stop, replay
 */
export const gspeech = mkPackage(
  nixRaw`pkgs.gspeech`,
  "A minimal GUI for the Text To Speech 'Svox Pico'. Read clipboard or selected text in different languages and manage it : pause, stop, replay",
);

/**
 * A spell-checking library for GTK applications
 */
export const gspell = mkPackage(
  nixRaw`pkgs.gspell`,
  "A spell-checking library for GTK applications",
);

/**
 * Generic Security Service
 */
export const gss = mkPackage(
  nixRaw`pkgs.gss`,
  "Generic Security Service",
);

/**
 * GObject-based API for handling resource discovery and announcement over SSDP
 */
export const gssdp = mkPackage(
  nixRaw`pkgs.gssdp`,
  "GObject-based API for handling resource discovery and announcement over SSDP",
);

/**
 * GObject-based API for handling resource discovery and announcement over SSDP
 */
export const gssdp_1_6 = mkPackage(
  nixRaw`pkgs.gssdp_1_6`,
  "GObject-based API for handling resource discovery and announcement over SSDP",
);

/**
 * Device Sniffer tool based on GSSDP framework
 */
export const gssdp_tools = mkPackage(
  nixRaw`pkgs.gssdp-tools`,
  "Device Sniffer tool based on GSSDP framework",
);

/**
 * Supercharge your ghq workflow
 */
export const gst = mkPackage(
  nixRaw`pkgs.gst`,
  "Supercharge your ghq workflow",
);

/**
 * GStreamer based command line media player
 */
export const gst123 = mkPackage(
  nixRaw`pkgs.gst123`,
  "GStreamer based command line media player",
);

/**
 * Linux command line tool for setting up USB gadgets using configfs
 */
export const gt = mkPackage(
  nixRaw`pkgs.gt`,
  "Linux command line tool for setting up USB gadgets using configfs",
);

/**
 * A diff-capable 'du' browser
 */
export const gt5 = mkPackage(
  nixRaw`pkgs.gt5`,
  "A diff-capable 'du' browser",
);

/**
 * Cross-platform helper for creating interactive dialogs
 */
export const gtdialog = mkPackage(
  nixRaw`pkgs.gtdialog`,
  "Cross-platform helper for creating interactive dialogs",
);

/**
 * Google's framework for writing C++ tests
 */
export const gtest = mkPackage(
  nixRaw`pkgs.gtest`,
  "Google's framework for writing C++ tests",
);

/**
 * Client for Tetrinet, a multiplayer online Tetris game
 */
export const gtetrinet = mkPackage(
  nixRaw`pkgs.gtetrinet`,
  "Client for Tetrinet, a multiplayer online Tetris game",
);

/**
 *  A personal tasks and TODO-list items organizer
 */
export const gtg = mkPackage(
  nixRaw`pkgs.gtg`,
  " A personal tasks and TODO-list items organizer",
);

/**
 * GObject/GTK port of three.js
 */
export const gthree = mkPackage(
  nixRaw`pkgs.gthree`,
  "GObject/GTK port of three.js",
);

/**
 * Image browser and viewer for GNOME
 */
export const gthumb = mkPackage(
  nixRaw`pkgs.gthumb`,
  "Image browser and viewer for GNOME",
);

/**
 * Humorous typo-based git runner; drives a car over the terminal
 */
export const gti = mkPackage(
  nixRaw`pkgs.gti`,
  "Humorous typo-based git runner; drives a car over the terminal",
);

/**
 * A time tracking app
 */
export const gtimelog = mkPackage(
  nixRaw`pkgs.gtimelog`,
  "A time tracking app",
);

/**
 * A multi-platform toolkit for creating graphical user interfaces
 */
export const gtk2 = mkPackage(
  nixRaw`pkgs.gtk2`,
  "A multi-platform toolkit for creating graphical user interfaces",
);

/**
 * A multi-platform toolkit for creating graphical user interfaces
 */
export const gtk2_x11 = mkPackage(
  nixRaw`pkgs.gtk2-x11`,
  "A multi-platform toolkit for creating graphical user interfaces",
);

/**
 * A font selection program for X11 using the GTK 2 toolkit
 */
export const gtk2fontsel = mkPackage(
  nixRaw`pkgs.gtk2fontsel`,
  "A font selection program for X11 using the GTK 2 toolkit",
);

/**
 * A multi-platform toolkit for creating graphical user interfaces
 */
export const gtk3 = mkPackage(
  nixRaw`pkgs.gtk3`,
  "A multi-platform toolkit for creating graphical user interfaces",
);

/**
 * A multi-platform toolkit for creating graphical user interfaces
 */
export const gtk3_x11 = mkPackage(
  nixRaw`pkgs.gtk3-x11`,
  "A multi-platform toolkit for creating graphical user interfaces",
);

/**
 * A multi-platform toolkit for creating graphical user interfaces
 */
export const gtk4 = mkPackage(
  nixRaw`pkgs.gtk4`,
  "A multi-platform toolkit for creating graphical user interfaces",
);

/**
 * A library to create panels and other desktop components for Wayland using the Layer Shell protocol and GTK4
 */
export const gtk4_layer_shell = mkPackage(
  nixRaw`pkgs.gtk4-layer-shell`,
  "A library to create panels and other desktop components for Wayland using the Layer Shell protocol and GTK4",
);

/**
 * Tools to extract documentation embedded in GTK and GNOME source code
 */
export const gtk_doc = mkPackage(
  nixRaw`pkgs.gtk-doc`,
  "Tools to extract documentation embedded in GTK and GNOME source code",
);

/**
 * Original Bluecurve engine from Red Hat's artwork package
 */
export const gtk_engine_bluecurve = mkPackage(
  nixRaw`pkgs.gtk-engine-bluecurve`,
  "Original Bluecurve engine from Red Hat's artwork package",
);

/**
 * A very flexible theme engine
 */
export const gtk_engine_murrine = mkPackage(
  nixRaw`pkgs.gtk-engine-murrine`,
  "A very flexible theme engine",
);

/**
 * Theme engines for GTK 2
 */
export const gtk_engines = mkPackage(
  nixRaw`pkgs.gtk_engines`,
  "Theme engines for GTK 2",
);

/**
 * RDP viewer widget for GTK
 */
export const gtk_frdp = mkPackage(
  nixRaw`pkgs.gtk-frdp`,
  "RDP viewer widget for GTK",
);

/**
 * A library to create panels and other desktop components for Wayland using the Layer Shell protocol
 */
export const gtk_layer_shell = mkPackage(
  nixRaw`pkgs.gtk-layer-shell`,
  "A library to create panels and other desktop components for Wayland using the Layer Shell protocol",
);

/**
 * a helper script that creates application bundles form GTK executables for macOS
 */
export const gtk_mac_bundler = mkPackage(
  nixRaw`pkgs.gtk-mac-bundler`,
  "a helper script that creates application bundles form GTK executables for macOS",
);

/**
 * Provides integration for GTK applications into the Mac desktop
 */
export const gtk_mac_integration = mkPackage(
  nixRaw`pkgs.gtk-mac-integration`,
  "Provides integration for GTK applications into the Mac desktop",
);

/**
 * Provides integration for GTK applications into the Mac desktop
 */
export const gtk_mac_integration_gtk2 = mkPackage(
  nixRaw`pkgs.gtk-mac-integration-gtk2`,
  "Provides integration for GTK applications into the Mac desktop",
);

/**
 * Provides integration for GTK applications into the Mac desktop
 */
export const gtk_mac_integration_gtk3 = mkPackage(
  nixRaw`pkgs.gtk-mac-integration-gtk3`,
  "Provides integration for GTK applications into the Mac desktop",
);

/**
 * CLI+GUI YouTube Client
 */
export const gtk_pipe_viewer = mkPackage(
  nixRaw`pkgs.gtk-pipe-viewer`,
  "CLI+GUI YouTube Client",
);

/**
 * gtk-server for interpreted GUI programming
 */
export const gtk_server = mkPackage(
  nixRaw`pkgs.gtk-server`,
  "gtk-server for interpreted GUI programming",
);

/**
 * Graphical User Interface Toolkit for mono and .Net
 */
export const gtk_sharp_2_0 = mkPackage(
  nixRaw`pkgs.gtk-sharp-2_0`,
  "Graphical User Interface Toolkit for mono and .Net",
);

export const gtk_sharp_3_0 = mkPackage(
  nixRaw`pkgs.gtk-sharp-3_0`,
  "",
);

/**
 * Binds some API from GTK that isn't in GTK# 2.12.x
 */
export const gtk_sharp_beans = mkPackage(
  nixRaw`pkgs.gtk-sharp-beans`,
  "Binds some API from GTK that isn't in GTK# 2.12.x",
);

/**
 * GTK VNC widget
 */
export const gtk_vnc = mkPackage(
  nixRaw`pkgs.gtk-vnc`,
  "GTK VNC widget",
);

/**
 * GTK4 Discord client in Go, attempt #4.
 */
export const gtkcord4 = mkPackage(
  nixRaw`pkgs.gtkcord4`,
  "GTK4 Discord client in Go, attempt #4.",
);

/**
 * D binding and OO wrapper for GTK
 */
export const gtkd = mkPackage(
  nixRaw`pkgs.gtkd`,
  "D binding and OO wrapper for GTK",
);

/**
 * GTK widget for displaying large amounts of numerical data
 */
export const gtkdatabox = mkPackage(
  nixRaw`pkgs.gtkdatabox`,
  "GTK widget for displaying large amounts of numerical data",
);

/**
 * Small utility for fast and easy GUI building from many scripted and compiled languages
 */
export const gtkdialog = mkPackage(
  nixRaw`pkgs.gtkdialog`,
  "Small utility for fast and easy GUI building from many scripted and compiled languages",
);

/**
 * GtkExtra is a useful set of widgets for creating GUI's for GTK+.
 */
export const gtkextra = mkPackage(
  nixRaw`pkgs.gtkextra`,
  "GtkExtra is a useful set of widgets for creating GUI's for GTK+.",
);

/**
 * A GTK Gnutella client, optimized for speed and scalability
 */
export const gtkgnutella = mkPackage(
  nixRaw`pkgs.gtkgnutella`,
  "A GTK Gnutella client, optimized for speed and scalability",
);

/**
 * Image viewer widget for GTK
 */
export const gtkimageview = mkPackage(
  nixRaw`pkgs.gtkimageview`,
  "Image viewer widget for GTK",
);

/**
 * GTK-based lockscreen for Wayland
 */
export const gtklock = mkPackage(
  nixRaw`pkgs.gtklock`,
  "GTK-based lockscreen for Wayland",
);

/**
 * Gtklock module adding power controls to the lockscreen
 */
export const gtklock_playerctl_module = mkPackage(
  nixRaw`pkgs.gtklock-playerctl-module`,
  "Gtklock module adding power controls to the lockscreen",
);

/**
 * Gtklock module adding power controls to the lockscreen
 */
export const gtklock_powerbar_module = mkPackage(
  nixRaw`pkgs.gtklock-powerbar-module`,
  "Gtklock module adding power controls to the lockscreen",
);

/**
 * Gtklock module adding user info to the lockscreen
 */
export const gtklock_userinfo_module = mkPackage(
  nixRaw`pkgs.gtklock-userinfo-module`,
  "Gtklock module adding user info to the lockscreen",
);

/**
 * A graphical frontend for CUPS
 */
export const gtklp = mkPackage(
  nixRaw`pkgs.gtklp`,
  "A graphical frontend for CUPS",
);

/**
 * C++ interface to the GTK graphical user interface library
 */
export const gtkmm2 = mkPackage(
  nixRaw`pkgs.gtkmm2`,
  "C++ interface to the GTK graphical user interface library",
);

/**
 * C++ interface to the GTK graphical user interface library
 */
export const gtkmm3 = mkPackage(
  nixRaw`pkgs.gtkmm3`,
  "C++ interface to the GTK graphical user interface library",
);

/**
 * C++ interface to the GTK graphical user interface library
 */
export const gtkmm4 = mkPackage(
  nixRaw`pkgs.gtkmm4`,
  "C++ interface to the GTK graphical user interface library",
);

/**
 * Application designed to test GTK performance
 */
export const gtkperf = mkPackage(
  nixRaw`pkgs.gtkperf`,
  "Application designed to test GTK performance",
);

/**
 * GTK Manager for an Apple ipod
 */
export const gtkpod = mkPackage(
  nixRaw`pkgs.gtkpod`,
  "GTK Manager for an Apple ipod",
);

/**
 * Level editor for idTech games
 */
export const gtkradiant = mkPackage(
  nixRaw`pkgs.gtkradiant`,
  "Level editor for idTech games",
);

export const gtksourceview = mkPackage(
  nixRaw`pkgs.gtksourceview`,
  "",
);

export const gtksourceview3 = mkPackage(
  nixRaw`pkgs.gtksourceview3`,
  "",
);

/**
 * Source code editing widget for GTK
 */
export const gtksourceview4 = mkPackage(
  nixRaw`pkgs.gtksourceview4`,
  "Source code editing widget for GTK",
);

/**
 * Source code editing widget for GTK
 */
export const gtksourceview5 = mkPackage(
  nixRaw`pkgs.gtksourceview5`,
  "Source code editing widget for GTK",
);

/**
 * C++ wrapper for gtksourceview
 */
export const gtksourceviewmm = mkPackage(
  nixRaw`pkgs.gtksourceviewmm`,
  "C++ wrapper for gtksourceview",
);

/**
 * C++ wrapper for gtksourceview
 */
export const gtksourceviewmm4 = mkPackage(
  nixRaw`pkgs.gtksourceviewmm4`,
  "C++ wrapper for gtksourceview",
);

/**
 * Word-processor-style highlighting and replacement of misspelled words
 */
export const gtkspell2 = mkPackage(
  nixRaw`pkgs.gtkspell2`,
  "Word-processor-style highlighting and replacement of misspelled words",
);

/**
 * Word-processor-style highlighting GtkTextView widget
 */
export const gtkspell3 = mkPackage(
  nixRaw`pkgs.gtkspell3`,
  "Word-processor-style highlighting GtkTextView widget",
);

/**
 * C++ binding for the gtkspell library
 */
export const gtkspellmm = mkPackage(
  nixRaw`pkgs.gtkspellmm`,
  "C++ binding for the gtkspell library",
);

/**
 * A simple, graphical serial port terminal emulator
 */
export const gtkterm = mkPackage(
  nixRaw`pkgs.gtkterm`,
  "A simple, graphical serial port terminal emulator",
);

/**
 * VCD/Waveform viewer for Unix and Win32
 */
export const gtkwave = mkPackage(
  nixRaw`pkgs.gtkwave`,
  "VCD/Waveform viewer for Unix and Win32",
);

/**
 * System monitoring dashboard for the terminal
 */
export const gtop = mkPackage(
  nixRaw`pkgs.gtop`,
  "System monitoring dashboard for the terminal",
);

/**
 * GNOME translation making program
 */
export const gtranslator = mkPackage(
  nixRaw`pkgs.gtranslator`,
  "GNOME translation making program",
);

/**
 * Generate directory trees and directories using Markdown or programmatically
 */
export const gtree = mkPackage(
  nixRaw`pkgs.gtree`,
  "Generate directory trees and directories using Markdown or programmatically",
);

/**
 * GNU Triangulated Surface Library
 */
export const gts = mkPackage(
  nixRaw`pkgs.gts`,
  "GNU Triangulated Surface Library",
);

/**
 * Universal typing tutor
 */
export const gtypist = mkPackage(
  nixRaw`pkgs.gtypist`,
  "Universal typing tutor",
);

/**
 * Clientless remote desktop gateway
 */
export const guacamole_client = mkPackage(
  nixRaw`pkgs.guacamole-client`,
  "Clientless remote desktop gateway",
);

/**
 * Clientless remote desktop gateway
 */
export const guacamole_server = mkPackage(
  nixRaw`pkgs.guacamole-server`,
  "Clientless remote desktop gateway",
);

/**
 * Drop-down terminal for GNOME
 */
export const guake = mkPackage(
  nixRaw`pkgs.guake`,
  "Drop-down terminal for GNOME",
);

/**
 * Secure ssh-agent forwarding for Mosh and SSH
 */
export const guardian_agent = mkPackage(
  nixRaw`pkgs.guardian-agent`,
  "Secure ssh-agent forwarding for Mosh and SSH",
);

/**
 * A Kannada font
 */
export const gubbi_font = mkPackage(
  nixRaw`pkgs.gubbi-font`,
  "A Kannada font",
);

/**
 * A simple CLI templating tool written in golang
 */
export const gucci = mkPackage(
  nixRaw`pkgs.gucci`,
  "A simple CLI templating tool written in golang",
);

/**
 * GNOME Character Map, based on the Unicode Character Database
 */
export const gucharmap = mkPackage(
  nixRaw`pkgs.gucharmap`,
  "GNOME Character Map, based on the Unicode Character Database",
);

/**
 * Extra tools for accessing and modifying virtual machine disk images
 */
export const guestfs_tools = mkPackage(
  nixRaw`pkgs.guestfs-tools`,
  "Extra tools for accessing and modifying virtual machine disk images",
);

/**
 * Perceptual JPEG encoder
 */
export const guetzli = mkPackage(
  nixRaw`pkgs.guetzli`,
  "Perceptual JPEG encoder",
);

/**
 * A plot device
 */
export const guff = mkPackage(
  nixRaw`pkgs.guff`,
  "A plot device",
);

/**
 * Qt based FM / Dab tuner
 */
export const guglielmo = mkPackage(
  nixRaw`pkgs.guglielmo`,
  "Qt based FM / Dab tuner",
);

/**
 * Embeddable Scheme implementation
 */
export const guile = mkPackage(
  nixRaw`pkgs.guile`,
  "Embeddable Scheme implementation",
);

/**
 * Embeddable Scheme implementation
 */
export const guile_1_8 = mkPackage(
  nixRaw`pkgs.guile_1_8`,
  "Embeddable Scheme implementation",
);

/**
 * Embeddable Scheme implementation
 */
export const guile_2_0 = mkPackage(
  nixRaw`pkgs.guile_2_0`,
  "Embeddable Scheme implementation",
);

/**
 * Embeddable Scheme implementation
 */
export const guile_2_2 = mkPackage(
  nixRaw`pkgs.guile_2_2`,
  "Embeddable Scheme implementation",
);

/**
 * Embeddable Scheme implementation
 */
export const guile_3_0 = mkPackage(
  nixRaw`pkgs.guile_3_0`,
  "Embeddable Scheme implementation",
);

/**
 * Bindings to Avahi for GNU Guile
 */
export const guile_avahi = mkPackage(
  nixRaw`pkgs.guile-avahi`,
  "Bindings to Avahi for GNU Guile",
);

/**
 * Cairo bindings for GNU Guile
 */
export const guile_cairo = mkPackage(
  nixRaw`pkgs.guile-cairo`,
  "Cairo bindings for GNU Guile",
);

/**
 * Implementation of CommonMark for Guile
 */
export const guile_commonmark = mkPackage(
  nixRaw`pkgs.guile-commonmark`,
  "Implementation of CommonMark for Guile",
);

/**
 * Configuration management library for GNU Guile
 */
export const guile_config = mkPackage(
  nixRaw`pkgs.guile-config`,
  "Configuration management library for GNU Guile",
);

/**
 * Disassemble software into data and metadata
 */
export const guile_disarchive = mkPackage(
  nixRaw`pkgs.guile-disarchive`,
  "Disassemble software into data and metadata",
);

/**
 * Concurrent ML-like concurrency for Guile
 */
export const guile_fibers = mkPackage(
  nixRaw`pkgs.guile-fibers`,
  "Concurrent ML-like concurrency for Guile",
);

/**
 * Bindings to Libgcrypt for GNU Guile
 */
export const guile_gcrypt = mkPackage(
  nixRaw`pkgs.guile-gcrypt`,
  "Bindings to Libgcrypt for GNU Guile",
);

/**
 * Bindings to Libgit2 for GNU Guile
 */
export const guile_git = mkPackage(
  nixRaw`pkgs.guile-git`,
  "Bindings to Libgit2 for GNU Guile",
);

/**
 * Guile bindings for GnuTLS library
 */
export const guile_gnutls = mkPackage(
  nixRaw`pkgs.guile-gnutls`,
  "Guile bindings for GnuTLS library",
);

/**
 * Spritely Goblins for Guile
 */
export const guile_goblins = mkPackage(
  nixRaw`pkgs.guile-goblins`,
  "Spritely Goblins for Guile",
);

/**
 * Project manager and build tool for GNU guile
 */
export const guile_hall = mkPackage(
  nixRaw`pkgs.guile-hall`,
  "Project manager and build tool for GNU guile",
);

/**
 * JSON Bindings for GNU Guile
 */
export const guile_json = mkPackage(
  nixRaw`pkgs.guile-json`,
  "JSON Bindings for GNU Guile",
);

/**
 * A collection of useful Guile Scheme modules
 */
export const guile_lib = mkPackage(
  nixRaw`pkgs.guile-lib`,
  "A collection of useful Guile Scheme modules",
);

/**
 * A GNU Guile library providing bindings to lzlib
 */
export const guile_lzlib = mkPackage(
  nixRaw`pkgs.guile-lzlib`,
  "A GNU Guile library providing bindings to lzlib",
);

/**
 * Guile wrapper for lzma library
 */
export const guile_lzma = mkPackage(
  nixRaw`pkgs.guile-lzma`,
  "Guile wrapper for lzma library",
);

/**
 * Scheme interface to the NCurses libraries
 */
export const guile_ncurses = mkPackage(
  nixRaw`pkgs.guile-ncurses`,
  "Scheme interface to the NCurses libraries",
);

/**
 * Guile bindings for the OpenGL graphics API
 */
export const guile_opengl = mkPackage(
  nixRaw`pkgs.guile-opengl`,
  "Guile bindings for the OpenGL graphics API",
);

/**
 * Guile library providing tools for randomized, property-based testing
 */
export const guile_quickcheck = mkPackage(
  nixRaw`pkgs.guile-quickcheck`,
  "Guile library providing tools for randomized, property-based testing",
);

/**
 * A simple framework for building readers for GNU Guile
 */
export const guile_reader = mkPackage(
  nixRaw`pkgs.guile-reader`,
  "A simple framework for building readers for GNU Guile",
);

/**
 * Guile bindings for SDL
 */
export const guile_sdl = mkPackage(
  nixRaw`pkgs.guile-sdl`,
  "Guile bindings for SDL",
);

/**
 * Bindings to SDL2 for GNU Guile
 */
export const guile_sdl2 = mkPackage(
  nixRaw`pkgs.guile-sdl2`,
  "Bindings to SDL2 for GNU Guile",
);

/**
 * A GNU Guile library implementing Semantic Versioning 2.0.0
 */
export const guile_semver = mkPackage(
  nixRaw`pkgs.guile-semver`,
  "A GNU Guile library implementing Semantic Versioning 2.0.0",
);

/**
 * Guile bindings for the SQLite3 database engine
 */
export const guile_sqlite3 = mkPackage(
  nixRaw`pkgs.guile-sqlite3`,
  "Guile bindings for the SQLite3 database engine",
);

/**
 * Bindings to Libssh for GNU Guile
 */
export const guile_ssh = mkPackage(
  nixRaw`pkgs.guile-ssh`,
  "Bindings to Libssh for GNU Guile",
);

/**
 * XCB bindings for Guile
 */
export const guile_xcb = mkPackage(
  nixRaw`pkgs.guile-xcb`,
  "XCB bindings for Guile",
);

/**
 * Guile-zlib is a GNU Guile library providing bindings to zlib
 */
export const guile_zlib = mkPackage(
  nixRaw`pkgs.guile-zlib`,
  "Guile-zlib is a GNU Guile library providing bindings to zlib",
);

/**
 * A GNU Guile library providing bindings to zstd
 */
export const guile_zstd = mkPackage(
  nixRaw`pkgs.guile-zstd`,
  "A GNU Guile library providing bindings to zstd",
);

/**
 * A virtual guitar amplifier for Linux running with JACK
 */
export const guitarix = mkPackage(
  nixRaw`pkgs.guitarix`,
  "A virtual guitar amplifier for Linux running with JACK",
);

/**
 * Tasty Bubble Gum for your shell
 */
export const gum = mkPackage(
  nixRaw`pkgs.gum`,
  "Tasty Bubble Gum for your shell",
);

/**
 * C99 HTML parsing algorithm
 */
export const gumbo = mkPackage(
  nixRaw`pkgs.gumbo`,
  "C99 HTML parsing algorithm",
);

/**
 * Simple LaTex editor for GTK users
 */
export const gummi = mkPackage(
  nixRaw`pkgs.gummi`,
  "Simple LaTex editor for GTK users",
);

/**
 * Brightness and temperature manager for X11
 */
export const gummy = mkPackage(
  nixRaw`pkgs.gummy`,
  "Brightness and temperature manager for X11",
);

/**
 * A better make, inspired by djb's redo
 */
export const gup = mkPackage(
  nixRaw`pkgs.gup`,
  "A better make, inspired by djb's redo",
);

/**
 * An implementation of the UPnP specification
 */
export const gupnp = mkPackage(
  nixRaw`pkgs.gupnp`,
  "An implementation of the UPnP specification",
);

/**
 * An implementation of the UPnP specification
 */
export const gupnp_1_6 = mkPackage(
  nixRaw`pkgs.gupnp_1_6`,
  "An implementation of the UPnP specification",
);

/**
 * A collection of helpers for building AV (audio/video) applications using GUPnP
 */
export const gupnp_av = mkPackage(
  nixRaw`pkgs.gupnp-av`,
  "A collection of helpers for building AV (audio/video) applications using GUPnP",
);

/**
 * Library to ease DLNA-related bits for applications using GUPnP
 */
export const gupnp_dlna = mkPackage(
  nixRaw`pkgs.gupnp-dlna`,
  "Library to ease DLNA-related bits for applications using GUPnP",
);

/**
 * Library to handle UPnP IGD port mapping
 */
export const gupnp_igd = mkPackage(
  nixRaw`pkgs.gupnp-igd`,
  "Library to handle UPnP IGD port mapping",
);

/**
 * Set of utilities and demos to work with UPnP
 */
export const gupnp_tools = mkPackage(
  nixRaw`pkgs.gupnp-tools`,
  "Set of utilities and demos to work with UPnP",
);

/**
 * Signal Messenger client for terminal
 */
export const gurk_rs = mkPackage(
  nixRaw`pkgs.gurk-rs`,
  "Signal Messenger client for terminal",
);

/**
 * Optimization solver for mathematical programming
 */
export const gurobi = mkPackage(
  nixRaw`pkgs.gurobi`,
  "Optimization solver for mathematical programming",
);

/**
 * GLib libusb wrapper
 */
export const gusb = mkPackage(
  nixRaw`pkgs.gusb`,
  "GLib libusb wrapper",
);

/**
 * An easy-to-use git client for Windows, macOS, and Linux
 */
export const gut = mkPackage(
  nixRaw`pkgs.gut`,
  "An easy-to-use git client for Windows, macOS, and Linux",
);

/**
 * Ghostscript and cups printer drivers
 */
export const gutenprint = mkPackage(
  nixRaw`pkgs.gutenprint`,
  "Ghostscript and cups printer drivers",
);

/**
 * Some additional CUPS drivers including Canon drivers
 */
export const gutenprintBin = mkPackage(
  nixRaw`pkgs.gutenprintBin`,
  "Some additional CUPS drivers including Canon drivers",
);

/**
 * A simple interface for devices supported by the linux UVC driver
 */
export const guvcview = mkPackage(
  nixRaw`pkgs.guvcview`,
  "A simple interface for devices supported by the linux UVC driver",
);

/**
 * PostScript/PDF document viewer
 */
export const gv = mkPackage(
  nixRaw`pkgs.gv`,
  "PostScript/PDF document viewer",
);

/**
 * Virtual Filesystem support library
 */
export const gvfs = mkPackage(
  nixRaw`pkgs.gvfs`,
  "Virtual Filesystem support library",
);

/**
 * Application Kernel for Containers
 */
export const gvisor = mkPackage(
  nixRaw`pkgs.gvisor`,
  "Application Kernel for Containers",
);

/**
 * Libraries module for the Greenbone Vulnerability Management Solution
 */
export const gvm_libs = mkPackage(
  nixRaw`pkgs.gvm-libs`,
  "Libraries module for the Greenbone Vulnerability Management Solution",
);

/**
 * Collection of APIs that help with remote controlling a Greenbone Security Manager
 */
export const gvm_tools = mkPackage(
  nixRaw`pkgs.gvm-tools`,
  "Collection of APIs that help with remote controlling a Greenbone Security Manager",
);

/**
 * A simple and lightweight volume icon that sits in your system tray
 */
export const gvolicon = mkPackage(
  nixRaw`pkgs.gvolicon`,
  "A simple and lightweight volume icon that sits in your system tray",
);

/**
 * A protected multinode virtual network
 */
export const gvpe = mkPackage(
  nixRaw`pkgs.gvpe`,
  "A protected multinode virtual network",
);

/**
 * Network stack based on gVisor
 */
export const gvproxy = mkPackage(
  nixRaw`pkgs.gvproxy`,
  "Network stack based on gVisor",
);

/**
 * GUI application for removing noise (hiss, pops and clicks) from audio files
 */
export const gwc = mkPackage(
  nixRaw`pkgs.gwc`,
  "GUI application for removing noise (hiss, pops and clicks) from audio files",
);

/**
 * System utility designed to provide information, control the fans and overclock your NVIDIA card
 */
export const gwe = mkPackage(
  nixRaw`pkgs.gwe`,
  "System utility designed to provide information, control the fans and overclock your NVIDIA card",
);

/**
 * Bejeweled clone game
 */
export const gweled = mkPackage(
  nixRaw`pkgs.gweled`,
  "Bejeweled clone game",
);

/**
 * OS abstraction functions used by aqbanking and related tools
 */
export const gwenhywfar = mkPackage(
  nixRaw`pkgs.gwenhywfar`,
  "OS abstraction functions used by aqbanking and related tools",
);

/**
 * A wrapper generator for Guile
 */
export const gwrap = mkPackage(
  nixRaw`pkgs.gwrap`,
  "A wrapper generator for Guile",
);

/**
 * A development toolkit for building and optimizing complex browser-based applications
 */
export const gwt240 = mkPackage(
  nixRaw`pkgs.gwt240`,
  "A development toolkit for building and optimizing complex browser-based applications",
);

/**
 * Scanning probe microscopy data visualization and analysis
 */
export const gwyddion = mkPackage(
  nixRaw`pkgs.gwyddion`,
  "Scanning probe microscopy data visualization and analysis",
);

/**
 * A packaging tool built around IPFS
 */
export const gx = mkPackage(
  nixRaw`pkgs.gx`,
  "A packaging tool built around IPFS",
);

/**
 * A tool for importing go packages into gx
 */
export const gx_go = mkPackage(
  nixRaw`pkgs.gx-go`,
  "A tool for importing go packages into gx",
);

/**
 * Gavare's experimental emulator
 */
export const gxemul = mkPackage(
  nixRaw`pkgs.gxemul`,
  "Gavare's experimental emulator",
);

/**
 * X11 keyboard indicator and switcher
 */
export const gxkb = mkPackage(
  nixRaw`pkgs.gxkb`,
  "X11 keyboard indicator and switcher",
);

/**
 * Matching Equalizer to apply EQ curve from one source to another source
 */
export const gxmatcheq_lv2 = mkPackage(
  nixRaw`pkgs.gxmatcheq-lv2`,
  "Matching Equalizer to apply EQ curve from one source to another source",
);

/**
 * A GTK enabled dropin replacement for xmessage
 */
export const gxmessage = mkPackage(
  nixRaw`pkgs.gxmessage`,
  "A GTK enabled dropin replacement for xmessage",
);

/**
 * GUI for XNEUR keyboard layout switcher
 */
export const gxneur = mkPackage(
  nixRaw`pkgs.gxneur`,
  "GUI for XNEUR keyboard layout switcher",
);

/**
 * A set of extra lv2 plugins from the guitarix project
 */
export const gxplugins_lv2 = mkPackage(
  nixRaw`pkgs.gxplugins-lv2`,
  "A set of extra lv2 plugins from the guitarix project",
);

        /**
         * Got Your Back (GYB) is a command line tool for backing up your Gmail
messages to your computer using Gmail's API over HTTPS.

         */
export const gyb = mkPackage(
  nixRaw`pkgs.gyb`,
  "Got Your Back (GYB) is a command line tool for backing up your Gmail\nmessages to your computer using Gmail's API over HTTPS.\n",
);

/**
 * OpenType fonts from the Gyre project, suitable for use with (La)TeX
 */
export const gyre_fonts = mkPackage(
  nixRaw`pkgs.gyre-fonts`,
  "OpenType fonts from the Gyre project, suitable for use with (La)TeX",
);

/**
 * Modder-friendly OpenGL and Vulkan source port based on the DOOM engine
 */
export const gzdoom = mkPackage(
  nixRaw`pkgs.gzdoom`,
  "Modder-friendly OpenGL and Vulkan source port based on the DOOM engine",
);

/**
 * GNU zip compression program
 */
export const gzip = mkPackage(
  nixRaw`pkgs.gzip`,
  "GNU zip compression program",
);

/**
 * The gzip Recovery Toolkit
 */
export const gzrt = mkPackage(
  nixRaw`pkgs.gzrt`,
  "The gzip Recovery Toolkit",
);

/**
 * faster shell navigation of projects
 */
export const h = mkPackage(
  nixRaw`pkgs.h`,
  "faster shell navigation of projects",
);

/**
 * The Java SQL database
 */
export const h2 = mkPackage(
  nixRaw`pkgs.h2`,
  "The Java SQL database",
);

/**
 * Optimized HTTP/1 and HTTP/2 server
 */
export const h2o = mkPackage(
  nixRaw`pkgs.h2o`,
  "Optimized HTTP/1 and HTTP/2 server",
);

/**
 * Hexagonal hierarchical geospatial indexing system
 */
export const h3 = mkPackage(
  nixRaw`pkgs.h3`,
  "Hexagonal hierarchical geospatial indexing system",
);

/**
 * Hexagonal hierarchical geospatial indexing system
 */
export const h3_3 = mkPackage(
  nixRaw`pkgs.h3_3`,
  "Hexagonal hierarchical geospatial indexing system",
);

/**
 * Hexagonal hierarchical geospatial indexing system
 */
export const h3_4 = mkPackage(
  nixRaw`pkgs.h3_4`,
  "Hexagonal hierarchical geospatial indexing system",
);

/**
 * A set of utilities for visualization and conversion of scientific data in the free, portable HDF5 format
 */
export const h5utils = mkPackage(
  nixRaw`pkgs.h5utils`,
  "A set of utilities for visualization and conversion of scientific data in the free, portable HDF5 format",
);

/**
 * CLI for creating Home Assistant compatible MQTT entities that will be automatically discovered
 */
export const ha_mqtt_discoverable_cli = mkPackage(
  nixRaw`pkgs.ha-mqtt-discoverable-cli`,
  "CLI for creating Home Assistant compatible MQTT entities that will be automatically discovered",
);

/**
 * An application automation framework
 */
export const habitat = mkPackage(
  nixRaw`pkgs.habitat`,
  "An application automation framework",
);

/**
 * Python library to view and edit a binary stream
 */
export const hachoir = mkPackage(
  nixRaw`pkgs.hachoir`,
  "Python library to view and edit a binary stream",
);

/**
 * A typeface designed for source code
 */
export const hack_font = mkPackage(
  nixRaw`pkgs.hack-font`,
  "A typeface designed for source code",
);

/**
 * A bastard hacked offspring of Blackbox
 */
export const hackedbox = mkPackage(
  nixRaw`pkgs.hackedbox`,
  "A bastard hacked offspring of Blackbox",
);

/**
 * A C rewrite of hackertyper.net
 */
export const hackertyper = mkPackage(
  nixRaw`pkgs.hackertyper`,
  "A C rewrite of hackertyper.net",
);

/**
 * A composite font of Hack and GenJyuu-Goghic
 */
export const hackgen_font = mkPackage(
  nixRaw`pkgs.hackgen-font`,
  "A composite font of Hack and GenJyuu-Goghic",
);

/**
 * A composite font of Hack, GenJyuu-Gothic and nerd-fonts
 */
export const hackgen_nf_font = mkPackage(
  nixRaw`pkgs.hackgen-nf-font`,
  "A composite font of Hack, GenJyuu-Gothic and nerd-fonts",
);

/**
 * A scalable cursor theme that resembles Windows 3.x/NT 3.x cursors
 */
export const hackneyed = mkPackage(
  nixRaw`pkgs.hackneyed`,
  "A scalable cursor theme that resembles Windows 3.x/NT 3.x cursors",
);

/**
 * An open source SDR platform
 */
export const hackrf = mkPackage(
  nixRaw`pkgs.hackrf`,
  "An open source SDR platform",
);

/**
 * Lightweight selection tool for usage in screenshot scripts etc
 */
export const hacksaw = mkPackage(
  nixRaw`pkgs.hacksaw`,
  "Lightweight selection tool for usage in screenshot scripts etc",
);

/**
 * Make and repack Nintendo Switch NCAs/NSPs
 */
export const hacpack = mkPackage(
  nixRaw`pkgs.hacpack`,
  "Make and repack Nintendo Switch NCAs/NSPs",
);

/**
 * A tool to manipulate common file formats for the Nintendo Switch
 */
export const hactool = mkPackage(
  nixRaw`pkgs.hactool`,
  "A tool to manipulate common file formats for the Nintendo Switch",
);

/**
 * Dockerfile Linter JavaScript API
 */
export const hadolint = mkPackage(
  nixRaw`pkgs.hadolint`,
  "Dockerfile Linter JavaScript API",
);

/**
 * Framework for distributed processing of large data sets across clusters of computers
 */
export const hadoop = mkPackage(
  nixRaw`pkgs.hadoop`,
  "Framework for distributed processing of large data sets across clusters of computers",
);

/**
 * Framework for distributed processing of large data sets across clusters of computers
 */
export const hadoop2 = mkPackage(
  nixRaw`pkgs.hadoop2`,
  "Framework for distributed processing of large data sets across clusters of computers",
);

/**
 * Framework for distributed processing of large data sets across clusters of computers
 */
export const hadoop3 = mkPackage(
  nixRaw`pkgs.hadoop3`,
  "Framework for distributed processing of large data sets across clusters of computers",
);

/**
 * Framework for distributed processing of large data sets across clusters of computers
 */
export const hadoop_3_2 = mkPackage(
  nixRaw`pkgs.hadoop_3_2`,
  "Framework for distributed processing of large data sets across clusters of computers",
);

/**
 * Framework for distributed processing of large data sets across clusters of computers
 */
export const hadoop_3_3 = mkPackage(
  nixRaw`pkgs.hadoop_3_3`,
  "Framework for distributed processing of large data sets across clusters of computers",
);

/**
 * Graphical frontend for Hamachi on Linux
 */
export const haguichi = mkPackage(
  nixRaw`pkgs.haguichi`,
  "Graphical frontend for Hamachi on Linux",
);

/**
 * A collection of tools that allows capturing TCP/IP packets and filtering them based on Lua policy files
 */
export const haka = mkPackage(
  nixRaw`pkgs.haka`,
  "A collection of tools that allows capturing TCP/IP packets and filtering them based on Lua policy files",
);

/**
 * Web crawler for the discovery of endpoints and assets
 */
export const hakrawler = mkPackage(
  nixRaw`pkgs.hakrawler`,
  "Web crawler for the discovery of endpoints and assets",
);

/**
 * Manga & Anime Downloader
 */
export const hakuneko = mkPackage(
  nixRaw`pkgs.hakuneko`,
  "Manga & Anime Downloader",
);

/**
 * A comprehensive reverse engineering and manipulation framework for gate-level netlists
 */
export const hal_hardware_analyzer = mkPackage(
  nixRaw`pkgs.hal-hardware-analyzer`,
  "A comprehensive reverse engineering and manipulation framework for gate-level netlists",
);

/**
 * C++ library for half precision floating point arithmetics
 */
export const half = mkPackage(
  nixRaw`pkgs.half`,
  "C++ library for half precision floating point arithmetics",
);

/**
 * Fast, parallel test case minimization tool
 */
export const halfempty = mkPackage(
  nixRaw`pkgs.halfempty`,
  "Fast, parallel test case minimization tool",
);

/**
 * Simple app for giving images that pixel-art style
 */
export const halftone = mkPackage(
  nixRaw`pkgs.halftone`,
  "Simple app for giving images that pixel-art style",
);

/**
 * Documentation production system for software manuals
 */
export const halibut = mkPackage(
  nixRaw`pkgs.halibut`,
  "Documentation production system for software manuals",
);

/**
 * C++ based language for image processing and computational photography
 */
export const halide = mkPackage(
  nixRaw`pkgs.halide`,
  "C++ based language for image processing and computational photography",
);

/**
 * IRC application
 */
export const halloy = mkPackage(
  nixRaw`pkgs.halloy`,
  "IRC application",
);

/**
 * A CLI tool to get help with CLI tools
 */
export const halp = mkPackage(
  nixRaw`pkgs.halp`,
  "A CLI tool to get help with CLI tools",
);

/**
 * A tool to manage big projects consisting of multiple loosely-coupled git repositories
 */
export const ham = mkPackage(
  nixRaw`pkgs.ham`,
  "A tool to manage big projects consisting of multiple loosely-coupled git repositories",
);

/**
 * Runtime library to control radio transceivers and receivers
 */
export const hamlib = mkPackage(
  nixRaw`pkgs.hamlib`,
  "Runtime library to control radio transceivers and receivers",
);

/**
 * Runtime library to control radio transceivers and receivers
 */
export const hamlib_3 = mkPackage(
  nixRaw`pkgs.hamlib_3`,
  "Runtime library to control radio transceivers and receivers",
);

/**
 * Runtime library to control radio transceivers and receivers
 */
export const hamlib_4 = mkPackage(
  nixRaw`pkgs.hamlib_4`,
  "Runtime library to control radio transceivers and receivers",
);

/**
 * A bit-oriented parser combinator library
 */
export const hammer = mkPackage(
  nixRaw`pkgs.hammer`,
  "A bit-oriented parser combinator library",
);

/**
 * A free and open source messaging and emailing app that combines common web applications into one
 */
export const hamsket = mkPackage(
  nixRaw`pkgs.hamsket`,
  "A free and open source messaging and emailing app that combines common web applications into one",
);

/**
 * Time tracking application
 */
export const hamster = mkPackage(
  nixRaw`pkgs.hamster`,
  "Time tracking application",
);

/**
 * Japanese Mincho-typeface TrueType font
 */
export const hanazono = mkPackage(
  nixRaw`pkgs.hanazono`,
  "Japanese Mincho-typeface TrueType font",
);

/**
 * A tool for converting video files and ripping DVDs
 */
export const handbrake = mkPackage(
  nixRaw`pkgs.handbrake`,
  "A tool for converting video files and ripping DVDs",
);

/**
 * Alternative to xdg-open to manage default applications with ease
 */
export const handlr = mkPackage(
  nixRaw`pkgs.handlr`,
  "Alternative to xdg-open to manage default applications with ease",
);

/**
 * Fork of handlr with support for regex
 */
export const handlr_regex = mkPackage(
  nixRaw`pkgs.handlr-regex`,
  "Fork of handlr with support for regex",
);

/**
 * UNICODE Han Nom Font Set
 */
export const hannom = mkPackage(
  nixRaw`pkgs.hannom`,
  "UNICODE Han Nom Font Set",
);

/**
 * Tunnel IPv4 over ICMP
 */
export const hans = mkPackage(
  nixRaw`pkgs.hans`,
  "Tunnel IPv4 over ICMP",
);

/**
 * Happy is a parser generator for Haskell
 */
export const happy = mkPackage(
  nixRaw`pkgs.happy`,
  "Happy is a parser generator for Haskell",
);

/**
 * Reliable, high performance TCP/HTTP load balancer
 */
export const haproxy = mkPackage(
  nixRaw`pkgs.haproxy`,
  "Reliable, high performance TCP/HTTP load balancer",
);

/**
 * Display information about your hardware and operating system
 */
export const hardinfo = mkPackage(
  nixRaw`pkgs.hardinfo`,
  "Display information about your hardware and operating system",
);

/**
 * An OpenType text shaping engine
 */
export const harfbuzz = mkPackage(
  nixRaw`pkgs.harfbuzz`,
  "An OpenType text shaping engine",
);

/**
 * An OpenType text shaping engine
 */
export const harfbuzzFull = mkPackage(
  nixRaw`pkgs.harfbuzzFull`,
  "An OpenType text shaping engine",
);

/**
 * Harmonic inversion algorithm of Mandelshtam: decompose signal into sum of decaying sinusoids
 */
export const harminv = mkPackage(
  nixRaw`pkgs.harminv`,
  "Harmonic inversion algorithm of Mandelshtam: decompose signal into sum of decaying sinusoids",
);

/**
 * Nix binary cache
 */
export const harmonia = mkPackage(
  nixRaw`pkgs.harmonia`,
  "Nix binary cache",
);

/**
 * A stealth coffee-break roguelike game
 */
export const harmonist = mkPackage(
  nixRaw`pkgs.harmonist`,
  "A stealth coffee-break roguelike game",
);

/**
 * CLI habit tracking for geeks
 */
export const harsh = mkPackage(
  nixRaw`pkgs.harsh`,
  "CLI habit tracking for geeks",
);

/**
 * Open source video player built with Qt/QML and libmpv
 */
export const haruna = mkPackage(
  nixRaw`pkgs.haruna`,
  "Open source video player built with Qt/QML and libmpv",
);

/**
 * Decodes still images from movie files and serves them via HTTP
 */
export const harvid = mkPackage(
  nixRaw`pkgs.harvid`,
  "Decodes still images from movie files and serves them via HTTP",
);

/**
 * Checks presence of various command line tools and their versions on the path
 */
export const has = mkPackage(
  nixRaw`pkgs.has`,
  "Checks presence of various command line tools and their versions on the path",
);

/**
 * An open-source artillery shooter
 */
export const hase = mkPackage(
  nixRaw`pkgs.hase`,
  "An open-source artillery shooter",
);

/**
 * Tool to automate hash length extension attacks
 */
export const hash_extender = mkPackage(
  nixRaw`pkgs.hash_extender`,
  "Tool to automate hash length extension attacks",
);

/**
 * Software to identify the different types of hashes used to encrypt data and especially passwords.
 */
export const hash_identifier = mkPackage(
  nixRaw`pkgs.hash-identifier`,
  "Software to identify the different types of hashes used to encrypt data and especially passwords.",
);

/**
 * Various tools to generate special DNS records
 */
export const hash_slinger = mkPackage(
  nixRaw`pkgs.hash-slinger`,
  "Various tools to generate special DNS records",
);

/**
 * Proof-of-work algorithm used as spam and denial-of-service counter measure
 */
export const hashcash = mkPackage(
  nixRaw`pkgs.hashcash`,
  "Proof-of-work algorithm used as spam and denial-of-service counter measure",
);

/**
 * Fast password cracker
 */
export const hashcat = mkPackage(
  nixRaw`pkgs.hashcat`,
  "Fast password cracker",
);

/**
 * Small utilities that are useful in advanced password cracking
 */
export const hashcat_utils = mkPackage(
  nixRaw`pkgs.hashcat-utils`,
  "Small utilities that are useful in advanced password cracking",
);

/**
 * A set of cross-platform tools to compute hashes
 */
export const hashdeep = mkPackage(
  nixRaw`pkgs.hashdeep`,
  "A set of cross-platform tools to compute hashes",
);

/**
 * A modern user interface for hashicorp Consul & Nomad
 */
export const hashi_ui = mkPackage(
  nixRaw`pkgs.hashi-ui`,
  "A modern user interface for hashicorp Consul & Nomad",
);

/**
 * A lightweight utility to install HashiCorp Consul, Nomad, or Vault on any remote Linux host
 */
export const hashi_up = mkPackage(
  nixRaw`pkgs.hashi-up`,
  "A lightweight utility to install HashiCorp Consul, Nomad, or Vault on any remote Linux host",
);

/**
 * A simple app for checking usual checksums - Designed for elementary OS
 */
export const hashit = mkPackage(
  nixRaw`pkgs.hashit`,
  "A simple app for checking usual checksums - Designed for elementary OS",
);

/**
 * A virtual machine for Haxe
 */
export const hashlink = mkPackage(
  nixRaw`pkgs.hashlink`,
  "A virtual machine for Haxe",
);

/**
 * A tool to exploit the hash length extension attack in various hashing algorithms
 */
export const hashpump = mkPackage(
  nixRaw`pkgs.hashpump`,
  "A tool to exploit the hash length extension attack in various hashing algorithms",
);

/**
 * Command-line hash-generation utility
 */
export const hashrat = mkPackage(
  nixRaw`pkgs.hashrat`,
  "Command-line hash-generation utility",
);

export * as haskellPackages from "./haskellPackages/mod.ts";

/**
 * Cabal package script generator for Travis-CI
 */
export const haskell_ci = mkPackage(
  nixRaw`pkgs.haskell-ci`,
  "Cabal package script generator for Travis-CI",
);

/**
 * LSP server for GHC
 */
export const haskell_language_server = mkPackage(
  nixRaw`pkgs.haskell-language-server`,
  "LSP server for GHC",
);

/**
 * A font with ligatures for Haskell code based off Source Code Pro
 */
export const hasklig = mkPackage(
  nixRaw`pkgs.hasklig`,
  "A font with ligatures for Haskell code based off Source Code Pro",
);

/**
 * Simple tray icon for detecting new email on IMAP servers
 */
export const hasmail = mkPackage(
  nixRaw`pkgs.hasmail`,
  "Simple tray icon for detecting new email on IMAP servers",
);

/**
 * Intent parsing for Home Assistant
 */
export const hassil = mkPackage(
  nixRaw`pkgs.hassil`,
  "Intent parsing for Home Assistant",
);

/**
 * Command line interface to the AnyStyle Parser and Finder
 */
export const haste_client = mkPackage(
  nixRaw`pkgs.haste-client`,
  "Command line interface to the AnyStyle Parser and Finder",
);

/**
 * Open source pastebin written in Node.js
 */
export const haste_server = mkPackage(
  nixRaw`pkgs.haste-server`,
  "Open source pastebin written in Node.js",
);

/**
 * Hasura GraphQL Engine CLI
 */
export const hasura_cli = mkPackage(
  nixRaw`pkgs.hasura-cli`,
  "Hasura GraphQL Engine CLI",
);

/**
 * Atari ST/STE/TT/Falcon emulator
 */
export const hatari = mkPackage(
  nixRaw`pkgs.hatari`,
  "Atari ST/STE/TT/Falcon emulator",
);

/**
 * Modern, extensible Python project manager
 */
export const hatch = mkPackage(
  nixRaw`pkgs.hatch`,
  "Modern, extensible Python project manager",
);

/**
 * Guile-based static site generator
 */
export const haunt = mkPackage(
  nixRaw`pkgs.haunt`,
  "Guile-based static site generator",
);

/**
 * A simple entropy daemon
 */
export const haveged = mkPackage(
  nixRaw`pkgs.haveged`,
  "A simple entropy daemon",
);

/**
 * Haven Protocol is the world's only network of private stable asset
 */
export const haven_cli = mkPackage(
  nixRaw`pkgs.haven-cli`,
  "Haven Protocol is the world's only network of private stable asset",
);

/**
 * A minimal terminal emulator for Wayland
 */
export const havoc = mkPackage(
  nixRaw`pkgs.havoc`,
  "A minimal terminal emulator for Wayland",
);

/**
 * Free, open source, game oriented network API
 */
export const hawknl = mkPackage(
  nixRaw`pkgs.hawknl`,
  "Free, open source, game oriented network API",
);

/**
 * Hackbrary to Hook and Augment X11 protocol calls
 */
export const hax11 = mkPackage(
  nixRaw`pkgs.hax11`,
  "Hackbrary to Hook and Augment X11 protocol calls",
);

/**
 * Programming language targeting JavaScript, Flash, NekoVM, PHP, C++
 */
export const haxe = mkPackage(
  nixRaw`pkgs.haxe`,
  "Programming language targeting JavaScript, Flash, NekoVM, PHP, C++",
);

/**
 * Programming language targeting JavaScript, Flash, NekoVM, PHP, C++
 */
export const haxe_4_0 = mkPackage(
  nixRaw`pkgs.haxe_4_0`,
  "Programming language targeting JavaScript, Flash, NekoVM, PHP, C++",
);

/**
 * Programming language targeting JavaScript, Flash, NekoVM, PHP, C++
 */
export const haxe_4_1 = mkPackage(
  nixRaw`pkgs.haxe_4_1`,
  "Programming language targeting JavaScript, Flash, NekoVM, PHP, C++",
);

/**
 * Programming language targeting JavaScript, Flash, NekoVM, PHP, C++
 */
export const haxe_4_2 = mkPackage(
  nixRaw`pkgs.haxe_4_2`,
  "Programming language targeting JavaScript, Flash, NekoVM, PHP, C++",
);

/**
 * Browse Hacker News like a haxor
 */
export const haxor_news = mkPackage(
  nixRaw`pkgs.haxor-news`,
  "Browse Hacker News like a haxor",
);

/**
 * Work with references: Literature database management, storage, and citation formatting
 */
export const hayagriva = mkPackage(
  nixRaw`pkgs.hayagriva`,
  "Work with references: Literature database management, storage, and citation formatting",
);

/**
 * A distributed, scalable, big data store
 */
export const hbase = mkPackage(
  nixRaw`pkgs.hbase`,
  "A distributed, scalable, big data store",
);

/**
 * A distributed, scalable, big data store
 */
export const hbase2 = mkPackage(
  nixRaw`pkgs.hbase2`,
  "A distributed, scalable, big data store",
);

/**
 * A distributed, scalable, big data store
 */
export const hbase3 = mkPackage(
  nixRaw`pkgs.hbase3`,
  "A distributed, scalable, big data store",
);

/**
 * A distributed, scalable, big data store
 */
export const hbase_2_4 = mkPackage(
  nixRaw`pkgs.hbase_2_4`,
  "A distributed, scalable, big data store",
);

/**
 * A distributed, scalable, big data store
 */
export const hbase_2_5 = mkPackage(
  nixRaw`pkgs.hbase_2_5`,
  "A distributed, scalable, big data store",
);

/**
 * A distributed, scalable, big data store
 */
export const hbase_3_0 = mkPackage(
  nixRaw`pkgs.hbase_3_0`,
  "A distributed, scalable, big data store",
);

/**
 * Improve your security and privacy by blocking ads, tracking and malware domains
 */
export const hblock = mkPackage(
  nixRaw`pkgs.hblock`,
  "Improve your security and privacy by blocking ads, tracking and malware domains",
);

/**
 * The hci command for working with Hercules CI
 */
export const hci = mkPackage(
  nixRaw`pkgs.hci`,
  "The hci command for working with Hercules CI",
);

/**
 * A close to drop in replacement for cut that can use a regex delimiter instead of a fixed string
 */
export const hck = mkPackage(
  nixRaw`pkgs.hck`,
  "A close to drop in replacement for cut that can use a regex delimiter instead of a fixed string",
);

/**
 * Convert hcl2 to json
 */
export const hcl2json = mkPackage(
  nixRaw`pkgs.hcl2json`,
  "Convert hcl2 to json",
);

/**
 * A command line editor for HCL
 */
export const hcledit = mkPackage(
  nixRaw`pkgs.hcledit`,
  "A command line editor for HCL",
);

/**
 * a code formatter for the Hashicorp Configuration Language (HCL) format
 */
export const hclfmt = mkPackage(
  nixRaw`pkgs.hclfmt`,
  "a code formatter for the Hashicorp Configuration Language (HCL) format",
);

/**
 * A command-line interface for Hetzner Cloud, a provider for cloud virtual private servers
 */
export const hcloud = mkPackage(
  nixRaw`pkgs.hcloud`,
  "A command-line interface for Hetzner Cloud, a provider for cloud virtual private servers",
);

/**
 * Small tool to capture packets from wlan devices
 */
export const hcxdumptool = mkPackage(
  nixRaw`pkgs.hcxdumptool`,
  "Small tool to capture packets from wlan devices",
);

/**
 * Tools for capturing wlan traffic and conversion to hashcat and John the Ripper formats
 */
export const hcxtools = mkPackage(
  nixRaw`pkgs.hcxtools`,
  "Tools for capturing wlan traffic and conversion to hashcat and John the Ripper formats",
);

/**
 * Spins down external disks after a period of idle time
 */
export const hd_idle = mkPackage(
  nixRaw`pkgs.hd-idle`,
  "Spins down external disks after a period of idle time",
);

/**
 * GL-based laptop model that rotates in real-time via hdaps
 */
export const hdaps_gl = mkPackage(
  nixRaw`pkgs.hdaps-gl`,
  "GL-based laptop model that rotates in real-time via hdaps",
);

/**
 * Hard Drive Active Protection System Daemon
 */
export const hdapsd = mkPackage(
  nixRaw`pkgs.hdapsd`,
  "Hard Drive Active Protection System Daemon",
);

/**
 * Hebrew calendar and solar astronomical times library and utilities
 */
export const hdate = mkPackage(
  nixRaw`pkgs.hdate`,
  "Hebrew calendar and solar astronomical times library and utilities",
);

/**
 * Dynamically control fan speed according to hard drive temperature on Linux
 */
export const hddfancontrol = mkPackage(
  nixRaw`pkgs.hddfancontrol`,
  "Dynamically control fan speed according to hard drive temperature on Linux",
);

/**
 * Tool for displaying hard disk temperature
 */
export const hddtemp = mkPackage(
  nixRaw`pkgs.hddtemp`,
  "Tool for displaying hard disk temperature",
);

/**
 * Data model, library, and file format for storing and managing data
 */
export const hdf4 = mkPackage(
  nixRaw`pkgs.hdf4`,
  "Data model, library, and file format for storing and managing data",
);

/**
 * Data model, library, and file format for storing and managing data
 */
export const hdf5 = mkPackage(
  nixRaw`pkgs.hdf5`,
  "Data model, library, and file format for storing and managing data",
);

/**
 * Data model, library, and file format for storing and managing data
 */
export const hdf5_1_10 = mkPackage(
  nixRaw`pkgs.hdf5_1_10`,
  "Data model, library, and file format for storing and managing data",
);

/**
 * Filter for HDF5 that uses the Blosc compressor
 */
export const hdf5_blosc = mkPackage(
  nixRaw`pkgs.hdf5-blosc`,
  "Filter for HDF5 that uses the Blosc compressor",
);

/**
 * Data model, library, and file format for storing and managing data
 */
export const hdf5_cpp = mkPackage(
  nixRaw`pkgs.hdf5-cpp`,
  "Data model, library, and file format for storing and managing data",
);

/**
 * Data model, library, and file format for storing and managing data
 */
export const hdf5_fortran = mkPackage(
  nixRaw`pkgs.hdf5-fortran`,
  "Data model, library, and file format for storing and managing data",
);

/**
 * Data model, library, and file format for storing and managing data
 */
export const hdf5_mpi = mkPackage(
  nixRaw`pkgs.hdf5-mpi`,
  "Data model, library, and file format for storing and managing data",
);

/**
 * Data model, library, and file format for storing and managing data
 */
export const hdf5_threadsafe = mkPackage(
  nixRaw`pkgs.hdf5-threadsafe`,
  "Data model, library, and file format for storing and managing data",
);

/**
 * A visual tool for browsing and editing HDF4 and HDF5 files
 */
export const hdfview = mkPackage(
  nixRaw`pkgs.hdfview`,
  "A visual tool for browsing and editing HDF4 and HDF5 files",
);

/**
 * GUI for configuring Silicondust HDHomeRun TV tuners
 */
export const hdhomerun_config_gui = mkPackage(
  nixRaw`pkgs.hdhomerun-config-gui`,
  "GUI for configuring Silicondust HDHomeRun TV tuners",
);

/**
 * PlayStation 2 HDLoader image dump/install utility
 */
export const hdl_dump = mkPackage(
  nixRaw`pkgs.hdl-dump`,
  "PlayStation 2 HDLoader image dump/install utility",
);

/**
 * A tool to get/set ATA/SATA drive parameters under Linux
 */
export const hdparm = mkPackage(
  nixRaw`pkgs.hdparm`,
  "A tool to get/set ATA/SATA drive parameters under Linux",
);

/**
 * Combines two or more raw images into an HDR
 */
export const hdrmerge = mkPackage(
  nixRaw`pkgs.hdrmerge`,
  "Combines two or more raw images into an HDR",
);

/**
 * Header Dictionary Triples (HDT) is a compression format for RDF data that can also be queried for Triple Patterns
 */
export const hdt = mkPackage(
  nixRaw`pkgs.hdt`,
  "Header Dictionary Triples (HDT) is a compression format for RDF data that can also be queried for Triple Patterns",
);

/**
 * Lightweight tool for managing headers in source code files
 */
export const headache = mkPackage(
  nixRaw`pkgs.headache`,
  "Lightweight tool for managing headers in source code files",
);

/**
 * GTK4 / Libadwaita Reddit client written in C++
 */
export const headlines = mkPackage(
  nixRaw`pkgs.headlines`,
  "GTK4 / Libadwaita Reddit client written in C++",
);

/**
 * Automatic music downloader for SABnzbd
 */
export const headphones = mkPackage(
  nixRaw`pkgs.headphones`,
  "Automatic music downloader for SABnzbd",
);

/**
 * A UI for configuring Ploopy Headphones
 */
export const headphones_toolbox = mkPackage(
  nixRaw`pkgs.headphones-toolbox`,
  "A UI for configuring Ploopy Headphones",
);

/**
 * An open source, self-hosted implementation of the Tailscale control server
 */
export const headscale = mkPackage(
  nixRaw`pkgs.headscale`,
  "An open source, self-hosted implementation of the Tailscale control server",
);

/**
 * A simple music player for YouTube and Reddit
 */
export const headset = mkPackage(
  nixRaw`pkgs.headset`,
  "A simple music player for YouTube and Reddit",
);

/**
 * A app-indicator for GNOME desktops for controlling some features of various wireless headsets
 */
export const headset_charge_indicator = mkPackage(
  nixRaw`pkgs.headset-charge-indicator`,
  "A app-indicator for GNOME desktops for controlling some features of various wireless headsets",
);

/**
 * Sidetone and Battery status for Logitech G930, G533, G633, G933 SteelSeries Arctis 7/PRO 2019 and Corsair VOID (Pro)
 */
export const headsetcontrol = mkPackage(
  nixRaw`pkgs.headsetcontrol`,
  "Sidetone and Battery status for Logitech G930, G533, G633, G933 SteelSeries Arctis 7/PRO 2019 and Corsair VOID (Pro)",
);

/**
 * A health tracking app for the GNOME desktop
 */
export const health = mkPackage(
  nixRaw`pkgs.health`,
  "A health tracking app for the GNOME desktop",
);

/**
 * Process monitoring tool
 */
export const health_check = mkPackage(
  nixRaw`pkgs.health-check`,
  "Process monitoring tool",
);

/**
 * A cron monitoring tool written in Python & Django 
 */
export const healthchecks = mkPackage(
  nixRaw`pkgs.healthchecks`,
  "A cron monitoring tool written in Python & Django ",
);

/**
 * Heap memory profiler for Linux
 */
export const heaptrack = mkPackage(
  nixRaw`pkgs.heaptrack`,
  "Heap memory profiler for Linux",
);

/**
 * Lightweight shipper for uptime monitoring
 */
export const heartbeat = mkPackage(
  nixRaw`pkgs.heartbeat`,
  "Lightweight shipper for uptime monitoring",
);

/**
 * Lightweight shipper for uptime monitoring
 */
export const heartbeat7 = mkPackage(
  nixRaw`pkgs.heartbeat7`,
  "Lightweight shipper for uptime monitoring",
);

/**
 * Library for Heat built on the Heat orchestration API
 */
export const heatclient = mkPackage(
  nixRaw`pkgs.heatclient`,
  "Library for Heat built on the Heat orchestration API",
);

/**
 * A general-purpose fuzzy selector
 */
export const heatseeker = mkPackage(
  nixRaw`pkgs.heatseeker`,
  "A general-purpose fuzzy selector",
);

/**
 * A data compression/decompression library for embedded/real-time systems
 */
export const heatshrink = mkPackage(
  nixRaw`pkgs.heatshrink`,
  "A data compression/decompression library for embedded/real-time systems",
);

/**
 * A Matrix bot which can generate "This Week in X" like blog posts 
 */
export const hebbot = mkPackage(
  nixRaw`pkgs.hebbot`,
  "A Matrix bot which can generate \"This Week in X\" like blog posts ",
);

/**
 * A perpetual Jewish Calendar
 */
export const hebcal = mkPackage(
  nixRaw`pkgs.hebcal`,
  "A perpetual Jewish Calendar",
);

/**
 * terminal hex editor
 */
export const hecate = mkPackage(
  nixRaw`pkgs.hecate`,
  "terminal hex editor",
);

/**
 * Realtime collaborative markdown notes on all platforms
 */
export const hedgedoc = mkPackage(
  nixRaw`pkgs.hedgedoc`,
  "Realtime collaborative markdown notes on all platforms",
);

/**
 * Hedgedoc CLI
 */
export const hedgedoc_cli = mkPackage(
  nixRaw`pkgs.hedgedoc-cli`,
  "Hedgedoc CLI",
);

/**
 * Turn-based strategy artillery game similar to Worms
 */
export const hedgewars = mkPackage(
  nixRaw`pkgs.hedgewars`,
  "Turn-based strategy artillery game similar to Worms",
);

/**
 * A cross-platform terminal UI used for modifying file data in hex or ASCII.
 */
export const heh = mkPackage(
  nixRaw`pkgs.heh`,
  "A cross-platform terminal UI used for modifying file data in hex or ASCII.",
);

/**
 * An implementation of Kerberos 5 (and some more stuff)
 */
export const heimdal = mkPackage(
  nixRaw`pkgs.heimdal`,
  "An implementation of Kerberos 5 (and some more stuff)",
);

/**
 * A cross-platform tool suite to flash firmware onto Samsung Galaxy S devices
 */
export const heimdall = mkPackage(
  nixRaw`pkgs.heimdall`,
  "A cross-platform tool suite to flash firmware onto Samsung Galaxy S devices",
);

/**
 * A cross-platform tool suite to flash firmware onto Samsung Galaxy S devices
 */
export const heimdall_gui = mkPackage(
  nixRaw`pkgs.heimdall-gui`,
  "A cross-platform tool suite to flash firmware onto Samsung Galaxy S devices",
);

/**
 * Simple cross-platform mind map and note-taking tool written in Qt
 */
export const heimer = mkPackage(
  nixRaw`pkgs.heimer`,
  "Simple cross-platform mind map and note-taking tool written in Qt",
);

/**
 * A bouncer-style Matrix-IRC bridge.
 */
export const heisenbridge = mkPackage(
  nixRaw`pkgs.heisenbridge`,
  "A bouncer-style Matrix-IRC bridge.",
);

/**
 * One music sequencer for all major platforms, both desktop and mobile
 */
export const helio_workstation = mkPackage(
  nixRaw`pkgs.helio-workstation`,
  "One music sequencer for all major platforms, both desktop and mobile",
);

/**
 * A post-modern modal text editor
 */
export const helix = mkPackage(
  nixRaw`pkgs.helix`,
  "A post-modern modal text editor",
);

/**
 * A program that produces a familiar, friendly greeting
 */
export const hello = mkPackage(
  nixRaw`pkgs.hello`,
  "A program that produces a familiar, friendly greeting",
);

/**
 * An example package with unfree license (for testing)
 */
export const hello_unfree = mkPackage(
  nixRaw`pkgs.hello-unfree`,
  "An example package with unfree license (for testing)",
);

/**
 * Hello world Wayland client
 */
export const hello_wayland = mkPackage(
  nixRaw`pkgs.hello-wayland`,
  "Hello world Wayland client",
);

/**
 * A free, cross-platform, polyphonic synthesizer
 */
export const helm = mkPackage(
  nixRaw`pkgs.helm`,
  "A free, cross-platform, polyphonic synthesizer",
);

/**
 * A simplified way of working with Helm
 */
export const helm_dashboard = mkPackage(
  nixRaw`pkgs.helm-dashboard`,
  "A simplified way of working with Helm",
);

/**
 * A tool for automatically generating markdown documentation for Helm charts
 */
export const helm_docs = mkPackage(
  nixRaw`pkgs.helm-docs`,
  "A tool for automatically generating markdown documentation for Helm charts",
);

/**
 * Language server for Helm
 */
export const helm_ls = mkPackage(
  nixRaw`pkgs.helm-ls`,
  "Language server for Helm",
);

/**
 * Declarative spec for deploying Helm charts
 */
export const helmfile = mkPackage(
  nixRaw`pkgs.helmfile`,
  "Declarative spec for deploying Helm charts",
);

/**
 * Declarative spec for deploying Helm charts
 */
export const helmfile_wrapped = mkPackage(
  nixRaw`pkgs.helmfile-wrapped`,
  "Declarative spec for deploying Helm charts",
);

/**
 * Time domain pitch tracker for Pure Data
 */
export const helmholtz = mkPackage(
  nixRaw`pkgs.helmholtz`,
  "Time domain pitch tracker for Pure Data",
);

/**
 * Helm Charts (k8s applications) as Code tool
 */
export const helmsman = mkPackage(
  nixRaw`pkgs.helmsman`,
  "Helm Charts (k8s applications) as Code tool",
);

/**
 * Generate man pages from `--help' output
 */
export const help2man = mkPackage(
  nixRaw`pkgs.help2man`,
  "Generate man pages from `--help' output",
);

/**
 * Helvetica Neue LT Std font
 */
export const helvetica_neue_lt_std = mkPackage(
  nixRaw`pkgs.helvetica-neue-lt-std`,
  "Helvetica Neue LT Std font",
);

/**
 * A GTK patchbay for pipewire
 */
export const helvum = mkPackage(
  nixRaw`pkgs.helvum`,
  "A GTK patchbay for pipewire",
);

/**
 * The HepMC package is an object oriented event record written in C++ for High Energy Physics Monte Carlo Generators
 */
export const hepmc2 = mkPackage(
  nixRaw`pkgs.hepmc2`,
  "The HepMC package is an object oriented event record written in C++ for High Energy Physics Monte Carlo Generators",
);

/**
 * The HepMC package is an object oriented, C++ event record for High Energy Physics Monte Carlo generators and simulation
 */
export const hepmc3 = mkPackage(
  nixRaw`pkgs.hepmc3`,
  "The HepMC package is an object oriented, C++ event record for High Energy Physics Monte Carlo generators and simulation",
);

/**
 * Compiler for the Heptagon/BZR synchronous programming language
 */
export const heptagon = mkPackage(
  nixRaw`pkgs.heptagon`,
  "Compiler for the Heptagon/BZR synchronous programming language",
);

/**
 * Daemon-less notifications without D-Bus
 */
export const herbe = mkPackage(
  nixRaw`pkgs.herbe`,
  "Daemon-less notifications without D-Bus",
);

/**
 * A manual tiling window manager for X
 */
export const herbstluftwm = mkPackage(
  nixRaw`pkgs.herbstluftwm`,
  "A manual tiling window manager for X",
);

/**
 * IBM mainframe emulator
 */
export const hercules = mkPackage(
  nixRaw`pkgs.hercules`,
  "IBM mainframe emulator",
);

/**
 * Runs Continuous Integration tasks on your machines
 */
export const hercules_ci_agent = mkPackage(
  nixRaw`pkgs.hercules-ci-agent`,
  "Runs Continuous Integration tasks on your machines",
);

/**
 * monospace font designed to be clear, pragmatic and very readable
 */
export const hermit = mkPackage(
  nixRaw`pkgs.hermit`,
  "monospace font designed to be clear, pragmatic and very readable",
);

/**
 * A Native GOG, Epic, and Amazon Games Launcher for Linux, Windows and Mac
 */
export const heroic = mkPackage(
  nixRaw`pkgs.heroic`,
  "A Native GOG, Epic, and Amazon Games Launcher for Linux, Windows and Mac",
);

/**
 * A Native GOG, Epic, and Amazon Games Launcher for Linux, Windows and Mac
 */
export const heroic_unwrapped = mkPackage(
  nixRaw`pkgs.heroic-unwrapped`,
  "A Native GOG, Epic, and Amazon Games Launcher for Linux, Windows and Mac",
);

/**
 * Everything you need to get started using Heroku
 */
export const heroku = mkPackage(
  nixRaw`pkgs.heroku`,
  "Everything you need to get started using Heroku",
);

/**
 * A software library for building UPnP devices and control points
 */
export const herqq = mkPackage(
  nixRaw`pkgs.herqq`,
  "A software library for building UPnP devices and control points",
);

/**
 * A multi-purpose particle physics event generator
 */
export const herwig = mkPackage(
  nixRaw`pkgs.herwig`,
  "A multi-purpose particle physics event generator",
);

/**
 * A CLI tool for provisioning Kubernetes clusters on Hetzner Cloud
 */
export const hetzner_kube = mkPackage(
  nixRaw`pkgs.hetzner-kube`,
  "A CLI tool for provisioning Kubernetes clusters on Hetzner Cloud",
);

/**
 * A quite complete and fast LATEX to HTML translator
 */
export const hevea = mkPackage(
  nixRaw`pkgs.hevea`,
  "A quite complete and fast LATEX to HTML translator",
);

/**
 * Futuristic take on hexdump, made in Rust
 */
export const hex = mkPackage(
  nixRaw`pkgs.hex`,
  "Futuristic take on hexdump, made in Rust",
);

/**
 * A puzzle game based on hexagonal tiles
 */
export const hex_a_hop = mkPackage(
  nixRaw`pkgs.hex-a-hop`,
  "A puzzle game based on hexagonal tiles",
);

        /**
         * Six utility programs to convert between hex, binary, ascii-binary
and the oddball NIST format for 90B testing.

         */
export const hexbinhex = mkPackage(
  nixRaw`pkgs.hexbinhex`,
  "Six utility programs to convert between hex, binary, ascii-binary\nand the oddball NIST format for 90B testing.\n",
);

/**
 * A popular and easy to use graphical IRC (chat) client
 */
export const hexchat = mkPackage(
  nixRaw`pkgs.hexchat`,
  "A popular and easy to use graphical IRC (chat) client",
);

/**
 * ncurses-based console hexeditor written in C
 */
export const hexcurse = mkPackage(
  nixRaw`pkgs.hexcurse`,
  "ncurses-based console hexeditor written in C",
);

/**
 * Colourful, human-friendly hexdump tool
 */
export const hexd = mkPackage(
  nixRaw`pkgs.hexd`,
  "Colourful, human-friendly hexdump tool",
);

/**
 * A terminal application for differencing two binary files, with color-coded output
 */
export const hexdiff = mkPackage(
  nixRaw`pkgs.hexdiff`,
  "A terminal application for differencing two binary files, with color-coded output",
);

/**
 * A hex editor with vim like keybindings written in Rust
 */
export const hexdino = mkPackage(
  nixRaw`pkgs.hexdino`,
  "A hex editor with vim like keybindings written in Rust",
);

export const hexdump = mkPackage(
  nixRaw`pkgs.hexdump`,
  "",
);

/**
 * View and edit files in hexadecimal or in ASCII
 */
export const hexedit = mkPackage(
  nixRaw`pkgs.hexedit`,
  "View and edit files in hexadecimal or in ASCII",
);

/**
 * Open-source macOS hex editor
 */
export const hexfiend = mkPackage(
  nixRaw`pkgs.hexfiend`,
  "Open-source macOS hex editor",
);

/**
 * GUI for the board game Hex
 */
export const hexgui = mkPackage(
  nixRaw`pkgs.hexgui`,
  "GUI for the board game Hex",
);

/**
 * Low-level I/O helpers for hexadecimal, tty/serial devices and so on
 */
export const hexio = mkPackage(
  nixRaw`pkgs.hexio`,
  "Low-level I/O helpers for hexadecimal, tty/serial devices and so on",
);

/**
 * Command line interface for Hexo
 */
export const hexo_cli = mkPackage(
  nixRaw`pkgs.hexo-cli`,
  "Command line interface for Hexo",
);

/**
 * A command-line hex viewer
 */
export const hexyl = mkPackage(
  nixRaw`pkgs.hexyl`,
  "A command-line hex viewer",
);

/**
 * HTTP load generator, ApacheBench (ab) replacement
 */
export const hey = mkPackage(
  nixRaw`pkgs.hey`,
  "HTTP load generator, ApacheBench (ab) replacement",
);

/**
 * A simple command-line interface for ChatGPT API.
 */
export const heygpt = mkPackage(
  nixRaw`pkgs.heygpt`,
  "A simple command-line interface for ChatGPT API.",
);

/**
 * Fingerprinting tool for HTTP requests
 */
export const hfinger = mkPackage(
  nixRaw`pkgs.hfinger`,
  "Fingerprinting tool for HTTP requests",
);

/**
 * HFS/HFS+ user space utils
 */
export const hfsprogs = mkPackage(
  nixRaw`pkgs.hfsprogs`,
  "HFS/HFS+ user space utils",
);

/**
 * FST language processing library
 */
export const hfst = mkPackage(
  nixRaw`pkgs.hfst`,
  "FST language processing library",
);

/**
 * HFST spell checker library and command line tool 
 */
export const hfst_ospell = mkPackage(
  nixRaw`pkgs.hfst-ospell`,
  "HFST spell checker library and command line tool ",
);

/**
 * Remote protein homology detection suite
 */
export const hh_suite = mkPackage(
  nixRaw`pkgs.hh-suite`,
  "Remote protein homology detection suite",
);

/**
 * Linux port of Raven Game's Heretic
 */
export const hheretic = mkPackage(
  nixRaw`pkgs.hheretic`,
  "Linux port of Raven Game's Heretic",
);

/**
 * Linux port of Raven Game's Hexen
 */
export const hhexen = mkPackage(
  nixRaw`pkgs.hhexen`,
  "Linux port of Raven Game's Hexen",
);

/**
 * Hides the mouse pointer in X11
 */
export const hhpc = mkPackage(
  nixRaw`pkgs.hhpc`,
  "Hides the mouse pointer in X11",
);

/**
 * An advanced and secure webserver
 */
export const hiawatha = mkPackage(
  nixRaw`pkgs.hiawatha`,
  "An advanced and secure webserver",
);

/**
 * The `hibernate' script for swsusp and Tux-on-Ice
 */
export const hibernate = mkPackage(
  nixRaw`pkgs.hibernate`,
  "The `hibernate' script for swsusp and Tux-on-Ice",
);

/**
 * Default fallback theme used by implementations of the icon theme specification
 */
export const hicolor_icon_theme = mkPackage(
  nixRaw`pkgs.hicolor-icon-theme`,
  "Default fallback theme used by implementations of the icon theme specification",
);

/**
 * A tool thats prints debugging information from usb HID devices
 */
export const hid_listen = mkPackage(
  nixRaw`pkgs.hid-listen`,
  "A tool thats prints debugging information from usb HID devices",
);

/**
 * Python scripts to manipulate HID data
 */
export const hid_tools = mkPackage(
  nixRaw`pkgs.hid-tools`,
  "Python scripts to manipulate HID data",
);

/**
 * Library for communicating with USB and Bluetooth HID devices
 */
export const hidapi = mkPackage(
  nixRaw`pkgs.hidapi`,
  "Library for communicating with USB and Bluetooth HID devices",
);

/**
 * HID report descriptor I/O library and conversion tool
 */
export const hidrd = mkPackage(
  nixRaw`pkgs.hidrd`,
  "HID report descriptor I/O library and conversion tool",
);

/**
 * Per-value asymmetric encryption of sensitive data for Hiera
 */
export const hiera_eyaml = mkPackage(
  nixRaw`pkgs.hiera-eyaml`,
  "Per-value asymmetric encryption of sensitive data for Hiera",
);

/**
 * Dual-pane graphical file manager for Windows, macOS and Linux
 */
export const hifile = mkPackage(
  nixRaw`pkgs.hifile`,
  "Dual-pane graphical file manager for Windows, macOS and Linux",
);

/**
 * An open-source, cycle-accurate multi-system emulator
 */
export const higan = mkPackage(
  nixRaw`pkgs.higan`,
  "An open-source, cycle-accurate multi-system emulator",
);

/**
 * Header-only C++ HDF5 interface
 */
export const highfive = mkPackage(
  nixRaw`pkgs.highfive`,
  "Header-only C++ HDF5 interface",
);

/**
 * Header-only C++ HDF5 interface
 */
export const highfive_mpi = mkPackage(
  nixRaw`pkgs.highfive-mpi`,
  "Header-only C++ HDF5 interface",
);

/**
 * Source code highlighting tool
 */
export const highlight = mkPackage(
  nixRaw`pkgs.highlight`,
  "Source code highlighting tool",
);

/**
 * A tool for unit testing tree sitter highlights for nvim-treesitter
 */
export const highlight_assertions = mkPackage(
  nixRaw`pkgs.highlight-assertions`,
  "A tool for unit testing tree sitter highlights for nvim-treesitter",
);

/**
 * Stacking Wayland compositor which is actively developed on FreeBSD but also supports Linux
 */
export const hikari = mkPackage(
  nixRaw`pkgs.hikari`,
  "Stacking Wayland compositor which is actively developed on FreeBSD but also supports Linux",
);

/**
 * A free platform-based fighting game
 */
export const hikounomizu = mkPackage(
  nixRaw`pkgs.hikounomizu`,
  "A free platform-based fighting game",
);

/**
 * Tool to convert Hikvision camera events to MQTT
 */
export const hiksink = mkPackage(
  nixRaw`pkgs.hiksink`,
  "Tool to convert Hikvision camera events to MQTT",
);

/**
 * An interactive Unix-like shell written in Go
 */
export const hilbish = mkPackage(
  nixRaw`pkgs.hilbish`,
  "An interactive Unix-like shell written in Go",
);

/**
 * CLI to manage your emails.
 */
export const himalaya = mkPackage(
  nixRaw`pkgs.himalaya`,
  "CLI to manage your emails.",
);

/**
 * A useful input method engine for Asia region
 */
export const hime = mkPackage(
  nixRaw`pkgs.hime`,
  "A useful input method engine for Asia region",
);

/**
 * A secret storage manager
 */
export const himitsu = mkPackage(
  nixRaw`pkgs.himitsu`,
  "A secret storage manager",
);

/**
 * Generic project initialization tool
 */
export const hinit = mkPackage(
  nixRaw`pkgs.hinit`,
  "Generic project initialization tool",
);

/**
 * Desktop client for HipChat services
 */
export const hipchat = mkPackage(
  nixRaw`pkgs.hipchat`,
  "Desktop client for HipChat services",
);

/**
 * Share files with an expiration date
 */
export const hiraeth = mkPackage(
  nixRaw`pkgs.hiraeth`,
  "Share files with an expiration date",
);

/**
 * Minimalistic C client for Redis >= 1.2
 */
export const hiredis = mkPackage(
  nixRaw`pkgs.hiredis`,
  "Minimalistic C client for Redis >= 1.2",
);

/**
 * A C client library for the Redis database
 */
export const hiredis_vip = mkPackage(
  nixRaw`pkgs.hiredis-vip`,
  "A C client library for the Redis database",
);

/**
 * Graph based aligner
 */
export const hisat2 = mkPackage(
  nixRaw`pkgs.hisat2`,
  "Graph based aligner",
);

/**
 * Your shell history: synced, queryable, and in context
 */
export const hishtory = mkPackage(
  nixRaw`pkgs.hishtory`,
  "Your shell history: synced, queryable, and in context",
);

/**
 * Libev-based high performance SSL/TLS proxy by Varnish Software
 */
export const hitch = mkPackage(
  nixRaw`pkgs.hitch`,
  "Libev-based high performance SSL/TLS proxy by Varnish Software",
);

/**
 * Chip music tracker based upon the AHX format
 */
export const hivelytracker = mkPackage(
  nixRaw`pkgs.hivelytracker`,
  "Chip music tracker based upon the AHX format",
);

/**
 * Process manager for Procfile-based applications
 */
export const hivemind = mkPackage(
  nixRaw`pkgs.hivemind`,
  "Process manager for Procfile-based applications",
);

/**
 * Windows registry hive extraction library
 */
export const hivex = mkPackage(
  nixRaw`pkgs.hivex`,
  "Windows registry hive extraction library",
);

/**
 * A user interface for JSON
 */
export const hjson = mkPackage(
  nixRaw`pkgs.hjson`,
  "A user interface for JSON",
);

/**
 * Utility to convert JSON to and from HJSON
 */
export const hjson_go = mkPackage(
  nixRaw`pkgs.hjson-go`,
  "Utility to convert JSON to and from HJSON",
);

/**
 * Command-line interface for the hledger accounting system
 */
export const hledger = mkPackage(
  nixRaw`pkgs.hledger`,
  "Command-line interface for the hledger accounting system",
);

/**
 * Complex account balance assertions for hledger journals
 */
export const hledger_check_fancyassertions = mkPackage(
  nixRaw`pkgs.hledger-check-fancyassertions`,
  "Complex account balance assertions for hledger journals",
);

/**
 * computes interest for a given account
 */
export const hledger_interest = mkPackage(
  nixRaw`pkgs.hledger-interest`,
  "computes interest for a given account",
);

/**
 * Curses-style terminal interface for the hledger accounting system
 */
export const hledger_ui = mkPackage(
  nixRaw`pkgs.hledger-ui`,
  "Curses-style terminal interface for the hledger accounting system",
);

/**
 * Utilities extending hledger
 */
export const hledger_utils = mkPackage(
  nixRaw`pkgs.hledger-utils`,
  "Utilities extending hledger",
);

/**
 * Web-based user interface for the hledger accounting system
 */
export const hledger_web = mkPackage(
  nixRaw`pkgs.hledger-web`,
  "Web-based user interface for the hledger accounting system",
);

/**
 * Source code suggestions
 */
export const hlint = mkPackage(
  nixRaw`pkgs.hlint`,
  "Source code suggestions",
);

/**
 * Brother HL-L2390DW combined print driver
 */
export const hll2390dw_cups = mkPackage(
  nixRaw`pkgs.hll2390dw-cups`,
  "Brother HL-L2390DW combined print driver",
);

/**
 * A hierarchical matrix C/C++ library
 */
export const hmat_oss = mkPackage(
  nixRaw`pkgs.hmat-oss`,
  "A hierarchical matrix C/C++ library",
);

/**
 * A Minecraft Launcher which is multi-functional, cross-platform and popular
 */
export const hmcl = mkPackage(
  nixRaw`pkgs.hmcl`,
  "A Minecraft Launcher which is multi-functional, cross-platform and popular",
);

/**
 * hMETIS is a set of programs for partitioning hypergraphs
 */
export const hmetis = mkPackage(
  nixRaw`pkgs.hmetis`,
  "hMETIS is a set of programs for partitioning hypergraphs",
);

/**
 * A small command-line note-taking app
 */
export const hmm = mkPackage(
  nixRaw`pkgs.hmm`,
  "A small command-line note-taking app",
);

/**
 * Biosequence analysis using profile hidden Markov models
 */
export const hmmer = mkPackage(
  nixRaw`pkgs.hmmer`,
  "Biosequence analysis using profile hidden Markov models",
);

/**
 * Header-only C++/python library for fast approximate nearest neighbors
 */
export const hnswlib = mkPackage(
  nixRaw`pkgs.hnswlib`,
  "Header-only C++/python library for fast approximate nearest neighbors",
);

/**
 * CLI command organizer written in rust
 */
export const hoard = mkPackage(
  nixRaw`pkgs.hoard`,
  "CLI command organizer written in rust",
);

/**
 * A language and an embedded JIT compiler
 */
export const hobbes = mkPackage(
  nixRaw`pkgs.hobbes`,
  "A language and an embedded JIT compiler",
);

/**
 * A multi-platform GUI for bit-based analysis, processing, and visualization
 */
export const hobbits = mkPackage(
  nixRaw`pkgs.hobbits`,
  "A multi-platform GUI for bit-based analysis, processing, and visualization",
);

/**
 * OpenPGP Key Server
 */
export const hockeypuck = mkPackage(
  nixRaw`pkgs.hockeypuck`,
  "OpenPGP Key Server",
);

/**
 * OpenPGP Key Server web resources
 */
export const hockeypuck_web = mkPackage(
  nixRaw`pkgs.hockeypuck-web`,
  "OpenPGP Key Server web resources",
);

        /**
         * 
Tools for manipulating and evaluating the hOCR format for representing multi-lingual OCR results by embedding them into HTML
         */
export const hocr_tools = mkPackage(
  nixRaw`pkgs.hocr-tools`,
  "\nTools for manipulating and evaluating the hOCR format for representing multi-lingual OCR results by embedding them into HTML",
);

/**
 * Interactive theorem prover based on Higher-Order Logic
 */
export const hol = mkPackage(
  nixRaw`pkgs.hol`,
  "Interactive theorem prover based on Higher-Order Logic",
);

/**
 * Interactive theorem prover based on Higher-Order Logic
 */
export const hol_light = mkPackage(
  nixRaw`pkgs.hol_light`,
  "Interactive theorem prover based on Higher-Order Logic",
);

/**
 * CLI to check if the mail is used on different sites
 */
export const holehe = mkPackage(
  nixRaw`pkgs.holehe`,
  "CLI to check if the mail is used on different sites",
);

/**
 * Fill your console with Hollywood melodrama technobabble
 */
export const hollywood = mkPackage(
  nixRaw`pkgs.hollywood`,
  "Fill your console with Hollywood melodrama technobabble",
);

/**
 * Cross-distribution system package compiler
 */
export const holo_build = mkPackage(
  nixRaw`pkgs.holo-build`,
  "Cross-distribution system package compiler",
);

/**
 * A cross-platform executable that launches a local Holochain conductor, and installs and opens apps
 */
export const holochain_launcher = mkPackage(
  nixRaw`pkgs.holochain-launcher`,
  "A cross-platform executable that launches a local Holochain conductor, and installs and opens apps",
);

/**
 * Easy, painless AWS credentials on developer laptops
 */
export const hologram = mkPackage(
  nixRaw`pkgs.hologram`,
  "Easy, painless AWS credentials on developer laptops",
);

/**
 * Open source home automation that puts local control and privacy first
 */
export const home_assistant = mkPackage(
  nixRaw`pkgs.home-assistant`,
  "Open source home automation that puts local control and privacy first",
);

/**
 * Command-line tool for Home Assistant
 */
export const home_assistant_cli = mkPackage(
  nixRaw`pkgs.home-assistant-cli`,
  "Command-line tool for Home Assistant",
);

/**
 * A Nix-based user environment configurator
 */
export const home_manager = mkPackage(
  nixRaw`pkgs.home-manager`,
  "A Nix-based user environment configurator",
);

/**
 * Streaming audio satellite for Home Assistant
 */
export const homeassistant_satellite = mkPackage(
  nixRaw`pkgs.homeassistant-satellite`,
  "Streaming audio satellite for Home Assistant",
);

/**
 * Free, easy, personal accounting for everyone
 */
export const homebank = mkPackage(
  nixRaw`pkgs.homebank`,
  "Free, easy, personal accounting for everyone",
);

/**
 * A highly customisable dashboard with Docker and service API integrations.
 */
export const homepage_dashboard = mkPackage(
  nixRaw`pkgs.homepage-dashboard`,
  "A highly customisable dashboard with Docker and service API integrations.",
);

/**
 * Your home directory is your castle. Don't leave your dotfiles behind
 */
export const homesick = mkPackage(
  nixRaw`pkgs.homesick`,
  "Your home directory is your castle. Don't leave your dotfiles behind",
);

/**
 * A Python clone of Foreman, a tool for managing Procfile-based applications
 */
export const honcho = mkPackage(
  nixRaw`pkgs.honcho`,
  "A Python clone of Foreman, a tool for managing Procfile-based applications",
);

/**
 * A tail-sampling proxy for OpenTelemetry
 */
export const honeycomb_refinery = mkPackage(
  nixRaw`pkgs.honeycomb-refinery`,
  "A tail-sampling proxy for OpenTelemetry",
);

/**
 * Advanced Honeypot framework
 */
export const honeytrap = mkPackage(
  nixRaw`pkgs.honeytrap`,
  "Advanced Honeypot framework",
);

/**
 * A security oriented, feedback-driven, evolutionary, easy-to-use fuzzer
 */
export const honggfuzz = mkPackage(
  nixRaw`pkgs.honggfuzz`,
  "A security oriented, feedback-driven, evolutionary, easy-to-use fuzzer",
);

/**
 * An ActivityPub server with minimal setup and support costs.
 */
export const honk = mkPackage(
  nixRaw`pkgs.honk`,
  "An ActivityPub server with minimal setup and support costs.",
);

/**
 * A multi-tier programming language for the Web 2.0 and the so-called diffuse Web
 */
export const hop = mkPackage(
  nixRaw`pkgs.hop`,
  "A multi-tier programming language for the Web 2.0 and the so-called diffuse Web",
);

/**
 * Interact with Hop in your terminal
 */
export const hop_cli = mkPackage(
  nixRaw`pkgs.hop-cli`,
  "Interact with Hop in your terminal",
);

/**
 * A macOS and Linux Disassembler
 */
export const hopper = mkPackage(
  nixRaw`pkgs.hopper`,
  "A macOS and Linux Disassembler",
);

/**
 * Higher Order Perturbative Parton Evolution Toolkit
 */
export const hoppet = mkPackage(
  nixRaw`pkgs.hoppet`,
  "Higher Order Perturbative Parton Evolution Toolkit",
);

/**
 * A free EDA software to develop printed circuit boards
 */
export const horizon_eda = mkPackage(
  nixRaw`pkgs.horizon-eda`,
  "A free EDA software to develop printed circuit boards",
);

/**
 * Instant coding answers via the command line
 */
export const hors = mkPackage(
  nixRaw`pkgs.hors`,
  "Instant coding answers via the command line",
);

/**
 * Small and lightweight IEEE802.11 wireless LAN analyzer with a text interface
 */
export const horst = mkPackage(
  nixRaw`pkgs.horst`,
  "Small and lightweight IEEE802.11 wireless LAN analyzer with a text interface",
);

/**
 * Domain name server
 */
export const host = mkPackage(
  nixRaw`pkgs.host`,
  "Domain name server",
);

/**
 * A user space daemon for access point and authentication servers
 */
export const hostapd = mkPackage(
  nixRaw`pkgs.hostapd`,
  "A user space daemon for access point and authentication servers",
);

/**
 * A featureful rogue wifi access point tool
 */
export const hostapd_mana = mkPackage(
  nixRaw`pkgs.hostapd-mana`,
  "A featureful rogue wifi access point tool",
);

/**
 * CLI tool to manage the /etc/hosts file
 */
export const hostctl = mkPackage(
  nixRaw`pkgs.hostctl`,
  "CLI tool to manage the /etc/hosts file",
);

/**
 * An idempotent command-line utility for managing your /etc/hosts* file.
 */
export const hostess = mkPackage(
  nixRaw`pkgs.hostess`,
  "An idempotent command-line utility for managing your /etc/hosts* file.",
);

/**
 * Small wrapper script for tmux to easily connect to a series of hosts via ssh and open a split pane for each of the hosts
 */
export const hostmux = mkPackage(
  nixRaw`pkgs.hostmux`,
  "Small wrapper script for tmux to easily connect to a series of hosts via ssh and open a split pane for each of the hosts",
);

export const hostname = mkPackage(
  nixRaw`pkgs.hostname`,
  "",
);

/**
 * Utility to set/show the host name or domain name
 */
export const hostname_debian = mkPackage(
  nixRaw`pkgs.hostname-debian`,
  "Utility to set/show the host name or domain name",
);

/**
 * An ad- and malware-blocking script for Linux
 */
export const hostsblock = mkPackage(
  nixRaw`pkgs.hostsblock`,
  "An ad- and malware-blocking script for Linux",
);

/**
 * The tastiest API documentation system
 */
export const hotdoc = mkPackage(
  nixRaw`pkgs.hotdoc`,
  "The tastiest API documentation system",
);

/**
 * Hot patching executables on Linux using .so file injection
 */
export const hotpatch = mkPackage(
  nixRaw`pkgs.hotpatch`,
  "Hot patching executables on Linux using .so file injection",
);

/**
 * A GUI for Linux perf
 */
export const hotspot = mkPackage(
  nixRaw`pkgs.hotspot`,
  "A GUI for Linux perf",
);

export const houdini = mkPackage(
  nixRaw`pkgs.houdini`,
  "",
);

/**
 * Lightning fast code searching made easy
 */
export const hound = mkPackage(
  nixRaw`pkgs.hound`,
  "Lightning fast code searching made easy",
);

export const hover = mkPackage(
  nixRaw`pkgs.hover`,
  "",
);

/**
 * Makes impress.js presentations from reStructuredText
 */
export const hovercraft = mkPackage(
  nixRaw`pkgs.hovercraft`,
  "Makes impress.js presentations from reStructuredText",
);

/**
 * A date and time library based on the C++11/14/17 <chrono> header
 */
export const howard_hinnant_date = mkPackage(
  nixRaw`pkgs.howard-hinnant-date`,
  "A date and time library based on the C++11/14/17 <chrono> header",
);

/**
 * A general purpose, fast and lightweight editor with a keyboard-centric minimalistic user interface
 */
export const howl = mkPackage(
  nixRaw`pkgs.howl`,
  "A general purpose, fast and lightweight editor with a keyboard-centric minimalistic user interface",
);

/**
 * A MPI based benchmark for network diagnostics
 */
export const hp2p = mkPackage(
  nixRaw`pkgs.hp2p`,
  "A MPI based benchmark for network diagnostics",
);

/**
 * A modern format for Haskell packages
 */
export const hpack = mkPackage(
  nixRaw`pkgs.hpack`,
  "A modern format for Haskell packages",
);

/**
 * HPC Container Maker
 */
export const hpccm = mkPackage(
  nixRaw`pkgs.hpccm`,
  "HPC Container Maker",
);

/**
 * HPC conjugate gradient benchmark
 */
export const hpcg = mkPackage(
  nixRaw`pkgs.hpcg`,
  "HPC conjugate gradient benchmark",
);

/**
 * HPE's implementation of the open-source tape filesystem standard ltfs
 */
export const hpe_ltfs = mkPackage(
  nixRaw`pkgs.hpe-ltfs`,
  "HPE's implementation of the open-source tape filesystem standard ltfs",
);

/**
 * A command-line oriented TCP/IP packet assembler/analyzer
 */
export const hping = mkPackage(
  nixRaw`pkgs.hping`,
  "A command-line oriented TCP/IP packet assembler/analyzer",
);

/**
 * Portable Implementation of the Linpack Benchmark for Distributed-Memory Computers
 */
export const hpl = mkPackage(
  nixRaw`pkgs.hpl`,
  "Portable Implementation of the Linpack Benchmark for Distributed-Memory Computers",
);

/**
 * Print, scan and fax HP drivers for Linux
 */
export const hplip = mkPackage(
  nixRaw`pkgs.hplip`,
  "Print, scan and fax HP drivers for Linux",
);

/**
 * Print, scan and fax HP drivers for Linux
 */
export const hplipWithPlugin = mkPackage(
  nixRaw`pkgs.hplipWithPlugin`,
  "Print, scan and fax HP drivers for Linux",
);

/**
 * Client for HPE's MyRoom web conferencing solution
 */
export const hpmyroom = mkPackage(
  nixRaw`pkgs.hpmyroom`,
  "Client for HPE's MyRoom web conferencing solution",
);

/**
 * An extension of the Flexible Collision Library
 */
export const hpp_fcl = mkPackage(
  nixRaw`pkgs.hpp-fcl`,
  "An extension of the Flexible Collision Library",
);

/**
 * C++ standard library for concurrency and parallelism
 */
export const hpx = mkPackage(
  nixRaw`pkgs.hpx`,
  "C++ standard library for concurrency and parallelism",
);

/**
 * High-end upsampling multichannel software HD-audio player
 */
export const hqplayer_desktop = mkPackage(
  nixRaw`pkgs.hqplayer-desktop`,
  "High-end upsampling multichannel software HD-audio player",
);

/**
 * High-end upsampling multichannel software embedded HD-audio player
 */
export const hqplayerd = mkPackage(
  nixRaw`pkgs.hqplayerd`,
  "High-end upsampling multichannel software embedded HD-audio player",
);

/**
 * A horizontal bar for your terminal
 */
export const hr = mkPackage(
  nixRaw`pkgs.hr`,
  "A horizontal bar for your terminal",
);

/**
 * A command-line tool to extract data from HTML
 */
export const hred = mkPackage(
  nixRaw`pkgs.hred`,
  "A command-line tool to extract data from HTML",
);

/**
 * Colourise Haskell code
 */
export const hscolour = mkPackage(
  nixRaw`pkgs.hscolour`,
  "Colourise Haskell code",
);

/**
 * Implementation of the Handshake protocol
 */
export const hsd = mkPackage(
  nixRaw`pkgs.hsd`,
  "Implementation of the Handshake protocol",
);

/**
 * Allows you to compose wallpapers ('root pixmaps') for X
 */
export const hsetroot = mkPackage(
  nixRaw`pkgs.hsetroot`,
  "Allows you to compose wallpapers ('root pixmaps') for X",
);

/**
 * Hebrew spell checker
 */
export const hspell = mkPackage(
  nixRaw`pkgs.hspell`,
  "Hebrew spell checker",
);

/**
 * Bluetooth HSP/HFP daemon
 */
export const hsphfpd = mkPackage(
  nixRaw`pkgs.hsphfpd`,
  "Bluetooth HSP/HFP daemon",
);

/**
 * A relational, embedable database management system written in Java and a set of related tools
 */
export const hsqldb = mkPackage(
  nixRaw`pkgs.hsqldb`,
  "A relational, embedable database management system written in Java and a set of related tools",
);

/**
 * A SSH helper that uses regex and fancy expansion to dynamically manage SSH shortcuts.

 */
export const hss = mkPackage(
  nixRaw`pkgs.hss`,
  "A SSH helper that uses regex and fancy expansion to dynamically manage SSH shortcuts.\n",
);

/**
 * Shell history suggest box - easily view, navigate, search and use your command history
 */
export const hstr = mkPackage(
  nixRaw`pkgs.hstr`,
  "Shell history suggest box - easily view, navigate, search and use your command history",
);

/**
 * Tool to parse Firefox and Chrome HSTS databases into forensic artifacts
 */
export const hstsparser = mkPackage(
  nixRaw`pkgs.hstsparser`,
  "Tool to parse Firefox and Chrome HSTS databases into forensic artifacts",
);

/**
 * File editor/viewer/analyzer for executables
 */
export const ht = mkPackage(
  nixRaw`pkgs.ht`,
  "File editor/viewer/analyzer for executables",
);

/**
 * Convert HTML to plain text
 */
export const html2text = mkPackage(
  nixRaw`pkgs.html2text`,
  "Convert HTML to plain text",
);

/**
 * Command line tool that tests files for HTML5 validity
 */
export const html5validator = mkPackage(
  nixRaw`pkgs.html5validator`,
  "Command line tool that tests files for HTML5 validity",
);

/**
 * Highly configurable, well-tested, JavaScript-based HTML minifier
 */
export const html_minifier = mkPackage(
  nixRaw`pkgs.html-minifier`,
  "Highly configurable, well-tested, JavaScript-based HTML minifier",
);

/**
 * A tool to validate HTML files
 */
export const html_proofer = mkPackage(
  nixRaw`pkgs.html-proofer`,
  "A tool to validate HTML files",
);

/**
 * A HTML validator and `tidier'
 */
export const html_tidy = mkPackage(
  nixRaw`pkgs.html-tidy`,
  "A HTML validator and `tidier'",
);

/**
 * Utilities for manipulating HTML and XML files
 */
export const html_xml_utils = mkPackage(
  nixRaw`pkgs.html-xml-utils`,
  "Utilities for manipulating HTML and XML files",
);

/**
 * A simple non-validating css1 and html parser for C++
 */
export const htmlcxx = mkPackage(
  nixRaw`pkgs.htmlcxx`,
  "A simple non-validating css1 and html parser for C++",
);

/**
 * Converts HTML files to PostScript and PDF
 */
export const htmldoc = mkPackage(
  nixRaw`pkgs.htmldoc`,
  "Converts HTML files to PostScript and PDF",
);

/**
 * Static code analysis tool for HTML
 */
export const htmlhint = mkPackage(
  nixRaw`pkgs.htmlhint`,
  "Static code analysis tool for HTML",
);

/**
 * Like jq, but for HTML
 */
export const htmlq = mkPackage(
  nixRaw`pkgs.htmlq`,
  "Like jq, but for HTML",
);

/**
 * Tool to test generated HTML output
 */
export const htmltest = mkPackage(
  nixRaw`pkgs.htmltest`,
  "Tool to test generated HTML output",
);

/**
 * A WebDriver server for running Selenium tests on the HtmlUnit headless browser
 */
export const htmlunit_driver = mkPackage(
  nixRaw`pkgs.htmlunit-driver`,
  "A WebDriver server for running Selenium tests on the HtmlUnit headless browser",
);

/**
 * An interactive process viewer
 */
export const htop = mkPackage(
  nixRaw`pkgs.htop`,
  "An interactive process viewer",
);

/**
 * An interactive process viewer for Linux, with vim-style keybindings
 */
export const htop_vim = mkPackage(
  nixRaw`pkgs.htop-vim`,
  "An interactive process viewer for Linux, with vim-style keybindings",
);

/**
 * Utility to fetch time and set the system clock over HTTP
 */
export const htpdate = mkPackage(
  nixRaw`pkgs.htpdate`,
  "Utility to fetch time and set the system clock over HTTP",
);

/**
 * A C library for reading/writing high-throughput sequencing data
 */
export const htslib = mkPackage(
  nixRaw`pkgs.htslib`,
  "A C library for reading/writing high-throughput sequencing data",
);

/**
 * Interactive, file-level Time Machine-like tool for ZFS/btrfs
 */
export const httm = mkPackage(
  nixRaw`pkgs.httm`,
  "Interactive, file-level Time Machine-like tool for ZFS/btrfs",
);

/**
 * A tool for tunneling TCP connections via HTTP GET requests
 */
export const http2tcp = mkPackage(
  nixRaw`pkgs.http2tcp`,
  "A tool for tunneling TCP connections via HTTP GET requests",
);

/**
 * Simple getter for HTTP URLs using cURL
 */
export const http_getter = mkPackage(
  nixRaw`pkgs.http-getter`,
  "Simple getter for HTTP URLs using cURL",
);

/**
 * An HTTP message parser written in C
 */
export const http_parser = mkPackage(
  nixRaw`pkgs.http-parser`,
  "An HTTP message parser written in C",
);

/**
 * An interactive command-line HTTP client featuring autocomplete and syntax highlighting
 */
export const http_prompt = mkPackage(
  nixRaw`pkgs.http-prompt`,
  "An interactive command-line HTTP client featuring autocomplete and syntax highlighting",
);

/**
 * A FUSE filesystem for HTTP directory listings
 */
export const httpdirfs = mkPackage(
  nixRaw`pkgs.httpdirfs`,
  "A FUSE filesystem for HTTP directory listings",
);

/**
 * Parse and display HTTP traffic from network device or pcap file
 */
export const httpdump = mkPackage(
  nixRaw`pkgs.httpdump`,
  "Parse and display HTTP traffic from network device or pcap file",
);

/**
 * The httperf HTTP load generator
 */
export const httperf = mkPackage(
  nixRaw`pkgs.httperf`,
  "The httperf HTTP load generator",
);

/**
 * FUSE-based HTTP filesystem for Linux
 */
export const httpfs2 = mkPackage(
  nixRaw`pkgs.httpfs2`,
  "FUSE-based HTTP filesystem for Linux",
);

/**
 * A command line HTTP client whose goal is to make CLI human-friendly
 */
export const httpie = mkPackage(
  nixRaw`pkgs.httpie`,
  "A command line HTTP client whose goal is to make CLI human-friendly",
);

/**
 * ping with HTTP requests
 */
export const httping = mkPackage(
  nixRaw`pkgs.httping`,
  "ping with HTTP requests",
);

/**
 * Interactive WebServer
 */
export const httplab = mkPackage(
  nixRaw`pkgs.httplab`,
  "Interactive WebServer",
);

/**
 * A C++ header-only HTTP/HTTPS server and client library
 */
export const httplib = mkPackage(
  nixRaw`pkgs.httplib`,
  "A C++ header-only HTTP/HTTPS server and client library",
);

/**
 * A basic http server for hosting a folder fast and simply
 */
export const httplz = mkPackage(
  nixRaw`pkgs.httplz`,
  "A basic http server for hosting a folder fast and simply",
);

/**
 * Command line, offline, access to HTTP status code, common header, and port references
 */
export const httpref = mkPackage(
  nixRaw`pkgs.httpref`,
  "Command line, offline, access to HTTP status code, common header, and port references",
);

/**
 * Take a list of domains and probe for working HTTP and HTTPS servers
 */
export const httprobe = mkPackage(
  nixRaw`pkgs.httprobe`,
  "Take a list of domains and probe for working HTTP and HTTPS servers",
);

/**
 * DNS to DNS over HTTPS (DoH) proxy
 */
export const https_dns_proxy = mkPackage(
  nixRaw`pkgs.https-dns-proxy`,
  "DNS to DNS over HTTPS (DoH) proxy",
);

/**
 * curl statistics made simple
 */
export const httpstat = mkPackage(
  nixRaw`pkgs.httpstat`,
  "curl statistics made simple",
);

/**
 * Creates a bidirectional virtual data connection tunnelled in HTTP requests
 */
export const httptunnel = mkPackage(
  nixRaw`pkgs.httptunnel`,
  "Creates a bidirectional virtual data connection tunnelled in HTTP requests",
);

export const httpunit = mkPackage(
  nixRaw`pkgs.httpunit`,
  "",
);

/**
 * Fast and multi-purpose HTTP toolkit
 */
export const httpx = mkPackage(
  nixRaw`pkgs.httpx`,
  "Fast and multi-purpose HTTP toolkit",
);

/**
 * Easy-to-use offline browser / website mirroring utility
 */
export const httrack = mkPackage(
  nixRaw`pkgs.httrack`,
  "Easy-to-use offline browser / website mirroring utility",
);

/**
 * Easy-to-use offline browser / website mirroring utility - QT frontend
 */
export const httraqt = mkPackage(
  nixRaw`pkgs.httraqt`,
  "Easy-to-use offline browser / website mirroring utility - QT frontend",
);

/**
 * Command-line wrapper for git that makes you better at GitHub
 */
export const hub = mkPackage(
  nixRaw`pkgs.hub`,
  "Command-line wrapper for git that makes you better at GitHub",
);

/**
 * Network, Service & Security Observability for Kubernetes using eBPF
 */
export const hubble = mkPackage(
  nixRaw`pkgs.hubble`,
  "Network, Service & Security Observability for Kubernetes using eBPF",
);

/**
 * FUSE-based filesystem to access hubic cloud storage
 */
export const hubicfuse = mkPackage(
  nixRaw`pkgs.hubicfuse`,
  "FUSE-based filesystem to access hubic cloud storage",
);

/**
 * A variable font from GitHub
 */
export const hubot_sans = mkPackage(
  nixRaw`pkgs.hubot-sans`,
  "A variable font from GitHub",
);

/**
 * Time tracking software
 */
export const hubstaff = mkPackage(
  nixRaw`pkgs.hubstaff`,
  "Time tracking software",
);

/**
 * Command line interface for controlling Philips Hue system's lights and bridge
 */
export const hue_cli = mkPackage(
  nixRaw`pkgs.hue-cli`,
  "Command line interface for controlling Philips Hue system's lights and bridge",
);

/**
 * A Windows and Linux driver in Python for the NZXT Hue+
 */
export const hue_plus = mkPackage(
  nixRaw`pkgs.hue-plus`,
  "A Windows and Linux driver in Python for the NZXT Hue+",
);

/**
 * Command line management interface to Philips Hue
 */
export const hueadm = mkPackage(
  nixRaw`pkgs.hueadm`,
  "Command line management interface to Philips Hue",
);

/**
 * Anti-vandalism tool for use on MediaWiki-based projects
 */
export const huggle = mkPackage(
  nixRaw`pkgs.huggle`,
  "Anti-vandalism tool for use on MediaWiki-based projects",
);

/**
 * Toolkit for stitching photographs and assembling panoramas, together with an easy to use graphical front end
 */
export const hugin = mkPackage(
  nixRaw`pkgs.hugin`,
  "Toolkit for stitching photographs and assembling panoramas, together with an easy to use graphical front end",
);

/**
 * A fast and modern static website engine
 */
export const hugo = mkPackage(
  nixRaw`pkgs.hugo`,
  "A fast and modern static website engine",
);

/**
 * Haskell interpreter
 */
export const hugs = mkPackage(
  nixRaw`pkgs.hugs`,
  "Haskell interpreter",
);

/**
 * Human friendly output for text interfaces using Python
 */
export const humanfriendly = mkPackage(
  nixRaw`pkgs.humanfriendly`,
  "Human friendly output for text interfaces using Python",
);

/**
 * Humanity icons from Ubuntu
 */
export const humanity_icon_theme = mkPackage(
  nixRaw`pkgs.humanity-icon-theme`,
  "Humanity icons from Ubuntu",
);

/**
 * Debugger for Hubris
 */
export const humility = mkPackage(
  nixRaw`pkgs.humility`,
  "Debugger for Hubris",
);

/**
 * A CLI for managing and sending data to Humio
 */
export const humioctl = mkPackage(
  nixRaw`pkgs.humioctl`,
  "A CLI for managing and sending data to Humio",
);

/**
 * Command line utility to remove duplicates from the given input
 */
export const huniq = mkPackage(
  nixRaw`pkgs.huniq`,
  "Command line utility to remove duplicates from the given input",
);

/**
 * Spell checker
 */
export const hunspell = mkPackage(
  nixRaw`pkgs.hunspell`,
  "Spell checker",
);

/**
 * Simplified Find command made with Rust
 */
export const hunt = mkPackage(
  nixRaw`pkgs.hunt`,
  "Simplified Find command made with Rust",
);

/**
 * Command line tool that performs HTTP requests defined in a simple plain text format.
 */
export const hurl = mkPackage(
  nixRaw`pkgs.hurl`,
  "Command line tool that performs HTTP requests defined in a simple plain text format.",
);

/**
 * Mute your microphone while typing
 */
export const hushboard = mkPackage(
  nixRaw`pkgs.hushboard`,
  "Mute your microphone while typing",
);

/**
 * Git hooks made easy 🐶 woof!
 */
export const husky = mkPackage(
  nixRaw`pkgs.husky`,
  "Git hooks made easy 🐶 woof!",
);

/**
 * A CLI tool for Sourcehut / sr.ht
 */
export const hut = mkPackage(
  nixRaw`pkgs.hut`,
  "A CLI tool for Sourcehut / sr.ht",
);

/**
 * A pure functional compile target that is lazy, non-garbage-collected, and parallel
 */
export const hvm = mkPackage(
  nixRaw`pkgs.hvm`,
  "A pure functional compile target that is lazy, non-garbage-collected, and parallel",
);

/**
 * Probe for hardware, check operability and find drivers
 */
export const hw_probe = mkPackage(
  nixRaw`pkgs.hw-probe`,
  "Probe for hardware, check operability and find drivers",
);

/**
 * Modern alternative to the watch command
 */
export const hwatch = mkPackage(
  nixRaw`pkgs.hwatch`,
  "Modern alternative to the watch command",
);

/**
 * Hardware Database, including Monitors, pci.ids, usb.ids, and video cards
 */
export const hwdata = mkPackage(
  nixRaw`pkgs.hwdata`,
  "Hardware Database, including Monitors, pci.ids, usb.ids, and video cards",
);

/**
 * Bitcoin Hardware Wallet Interface
 */
export const hwi = mkPackage(
  nixRaw`pkgs.hwi`,
  "Bitcoin Hardware Wallet Interface",
);

/**
 * Hardware detection tool from openSUSE
 */
export const hwinfo = mkPackage(
  nixRaw`pkgs.hwinfo`,
  "Hardware detection tool from openSUSE",
);

/**
 * Portable abstraction of hierarchical architectures for high-performance computing
 */
export const hwloc = mkPackage(
  nixRaw`pkgs.hwloc`,
  "Portable abstraction of hierarchical architectures for high-performance computing",
);

/**
 * Runtime support library for the Haxe C++ backend
 */
export const hxcpp = mkPackage(
  nixRaw`pkgs.hxcpp`,
  "Runtime support library for the Haxe C++ backend",
);

/**
 * A LISP dialect embedded in Python
 */
export const hy = mkPackage(
  nixRaw`pkgs.hy`,
  "A LISP dialect embedded in Python",
);

/**
 * Reverb effect using hybrid impulse convolution
 */
export const hybridreverb2 = mkPackage(
  nixRaw`pkgs.hybridreverb2`,
  "Reverb effect using hybrid impulse convolution",
);

export const hydraAntLogger = mkPackage(
  nixRaw`pkgs.hydraAntLogger`,
  "",
);

/**
 * check hydra for the build status of a package
 */
export const hydra_check = mkPackage(
  nixRaw`pkgs.hydra-check`,
  "check hydra for the build status of a package",
);

/**
 * A client for the Hydra CI
 */
export const hydra_cli = mkPackage(
  nixRaw`pkgs.hydra-cli`,
  "A client for the Hydra CI",
);

/**
 * Nix-based continuous build system
 */
export const hydra_unstable = mkPackage(
  nixRaw`pkgs.hydra_unstable`,
  "Nix-based continuous build system",
);

/**
 * Advanced drum machine
 */
export const hydrogen = mkPackage(
  nixRaw`pkgs.hydrogen`,
  "Advanced drum machine",
);

/**
 * Lightweight matrix client with legacy and mobile browser support
 */
export const hydrogen_web = mkPackage(
  nixRaw`pkgs.hydrogen-web`,
  "Lightweight matrix client with legacy and mobile browser support",
);

/**
 * Lightweight matrix client with legacy and mobile browser support
 */
export const hydrogen_web_unwrapped = mkPackage(
  nixRaw`pkgs.hydrogen-web-unwrapped`,
  "Lightweight matrix client with legacy and mobile browser support",
);

/**
 * High performance media tagger and organizer
 */
export const hydron = mkPackage(
  nixRaw`pkgs.hydron`,
  "High performance media tagger and organizer",
);

/**
 * A third-party, open-source ProtonMail bridge
 */
export const hydroxide = mkPackage(
  nixRaw`pkgs.hydroxide`,
  "A third-party, open-source ProtonMail bridge",
);

/**
 * Danbooru-like image tagging and searching system for the desktop
 */
export const hydrus = mkPackage(
  nixRaw`pkgs.hydrus`,
  "Danbooru-like image tagging and searching system for the desktop",
);

/**
 * A C# library which contains a hodge-podge of random stuff
 */
export const hyena = mkPackage(
  nixRaw`pkgs.hyena`,
  "A C# library which contains a hodge-podge of random stuff",
);

/**
 * 
 */
export const hyenae = mkPackage(
  nixRaw`pkgs.hyenae`,
  "",
);

/**
 * neofetch with pride flags <3
 */
export const hyfetch = mkPackage(
  nixRaw`pkgs.hyfetch`,
  "neofetch with pride flags <3",
);

/**
 * enterprise-class system for sending and receiving facsimiles
 */
export const hylafaxplus = mkPackage(
  nixRaw`pkgs.hylafaxplus`,
  "enterprise-class system for sending and receiving facsimiles",
);

/**
 * Hyperminimal https server
 */
export const hyp = mkPackage(
  nixRaw`pkgs.hyp`,
  "Hyperminimal https server",
);

/**
 * Import Hyperlynx Boardsim files to openEMS, an open source 3D full-wave electromagnetic field solver
 */
export const hyp2mat = mkPackage(
  nixRaw`pkgs.hyp2mat`,
  "Import Hyperlynx Boardsim files to openEMS, an open source 3D full-wave electromagnetic field solver",
);

/**
 * A terminal built on web technologies
 */
export const hyper = mkPackage(
  nixRaw`pkgs.hyper`,
  "A terminal built on web technologies",
);

/**
 * The strongly hyped graphical interpreter for the Haskell programming language
 */
export const hyper_haskell = mkPackage(
  nixRaw`pkgs.hyper-haskell`,
  "The strongly hyped graphical interpreter for the Haskell programming language",
);

/**
 * Command-line benchmarking tool
 */
export const hyperfine = mkPackage(
  nixRaw`pkgs.hyperfine`,
  "Command-line benchmarking tool",
);

/**
 * An opensource Bias or Ambient Lighting implementation
 */
export const hyperion_ng = mkPackage(
  nixRaw`pkgs.hyperion-ng`,
  "An opensource Bias or Ambient Lighting implementation",
);

/**
 * High-performance, secure, permissioned blockchain network
 */
export const hyperledger_fabric = mkPackage(
  nixRaw`pkgs.hyperledger-fabric`,
  "High-performance, secure, permissioned blockchain network",
);

/**
 * Very fast link checker for CI
 */
export const hyperlink = mkPackage(
  nixRaw`pkgs.hyperlink`,
  "Very fast link checker for CI",
);

/**
 * YAML based HTTP script processing engine
 */
export const hyperpotamus = mkPackage(
  nixRaw`pkgs.hyperpotamus`,
  "YAML based HTTP script processing engine",
);

/**
 * A roguelike game set in hyperbolic geometry
 */
export const hyperrogue = mkPackage(
  nixRaw`pkgs.hyperrogue`,
  "A roguelike game set in hyperbolic geometry",
);

/**
 * High-performance multiple regex matching library
 */
export const hyperscan = mkPackage(
  nixRaw`pkgs.hyperscan`,
  "High-performance multiple regex matching library",
);

/**
 * A modern stencil typeface inspired by stained glass technique
 */
export const hyperscrypt_font = mkPackage(
  nixRaw`pkgs.hyperscrypt-font`,
  "A modern stencil typeface inspired by stained glass technique",
);

/**
 * A text hyphenation library
 */
export const hyphen = mkPackage(
  nixRaw`pkgs.hyphen`,
  "A text hyphenation library",
);

/**
 * IPTV streaming application
 */
export const hypnotix = mkPackage(
  nixRaw`pkgs.hypnotix`,
  "IPTV streaming application",
);

/**
 * A tiling X11 window manager written in modern C++
 */
export const hypr = mkPackage(
  nixRaw`pkgs.hypr`,
  "A tiling X11 window manager written in modern C++",
);

/**
 * Automatically dim windows in Hyprland when switching between them
 */
export const hyprdim = mkPackage(
  nixRaw`pkgs.hyprdim`,
  "Automatically dim windows in Hyprland when switching between them",
);

/**
 * A simple, scriptable keybind retrieval utility for Hyprland
 */
export const hyprkeys = mkPackage(
  nixRaw`pkgs.hyprkeys`,
  "A simple, scriptable keybind retrieval utility for Hyprland",
);

/**
 * A dynamic tiling Wayland compositor that doesn't sacrifice on its looks
 */
export const hyprland = mkPackage(
  nixRaw`pkgs.hyprland`,
  "A dynamic tiling Wayland compositor that doesn't sacrifice on its looks",
);

/**
 * Automatically rename workspaces with icons of started applications
 */
export const hyprland_autoname_workspaces = mkPackage(
  nixRaw`pkgs.hyprland-autoname-workspaces`,
  "Automatically rename workspaces with icons of started applications",
);

/**
 * Per window keyboard layout (language) for Hyprland wayland compositor
 */
export const hyprland_per_window_layout = mkPackage(
  nixRaw`pkgs.hyprland-per-window-layout`,
  "Per window keyboard layout (language) for Hyprland wayland compositor",
);

/**
 * Wayland protocol extensions for Hyprland
 */
export const hyprland_protocols = mkPackage(
  nixRaw`pkgs.hyprland-protocols`,
  "Wayland protocol extensions for Hyprland",
);

/**
 * GNOME-like workspace switching in Hyprland
 */
export const hyprnome = mkPackage(
  nixRaw`pkgs.hyprnome`,
  "GNOME-like workspace switching in Hyprland",
);

/**
 * A blazing fast wayland wallpaper utility
 */
export const hyprpaper = mkPackage(
  nixRaw`pkgs.hyprpaper`,
  "A blazing fast wayland wallpaper utility",
);

/**
 * A wlroots-compatible Wayland color picker that does not suck
 */
export const hyprpicker = mkPackage(
  nixRaw`pkgs.hyprpicker`,
  "A wlroots-compatible Wayland color picker that does not suck",
);

/**
 * Hyprland shade configuration tool
 */
export const hyprshade = mkPackage(
  nixRaw`pkgs.hyprshade`,
  "Hyprland shade configuration tool",
);

/**
 * A feature-packed proxy & relay utility optimized for lossy, unstable connections
 */
export const hysteria = mkPackage(
  nixRaw`pkgs.hysteria`,
  "A feature-packed proxy & relay utility optimized for lossy, unstable connections",
);

/**
 * minimalistic but powerful Linux console hex editor
 */
export const hyx = mkPackage(
  nixRaw`pkgs.hyx`,
  "minimalistic but powerful Linux console hex editor",
);

/**
 * Set of I2C tools for Linux
 */
export const i2c_tools = mkPackage(
  nixRaw`pkgs.i2c-tools`,
  "Set of I2C tools for Linux",
);

/**
 * Applications and router for I2P, anonymity over the Internet
 */
export const i2p = mkPackage(
  nixRaw`pkgs.i2p`,
  "Applications and router for I2P, anonymity over the Internet",
);

/**
 * Minimal I2P router written in C++
 */
export const i2pd = mkPackage(
  nixRaw`pkgs.i2pd`,
  "Minimal I2P router written in C++",
);

/**
 * A tiling window manager
 */
export const i3 = mkPackage(
  nixRaw`pkgs.i3`,
  "A tiling window manager",
);

/**
 * Automatic, optimal tiling for i3wm
 */
export const i3_auto_layout = mkPackage(
  nixRaw`pkgs.i3-auto-layout`,
  "Automatic, optimal tiling for i3wm",
);

/**
 * Balance windows and workspaces in i3wm
 */
export const i3_balance_workspace = mkPackage(
  nixRaw`pkgs.i3-balance-workspace`,
  "Balance windows and workspaces in i3wm",
);

/**
 * A simple tool to cyclically switch between the windows on the active workspace
 */
export const i3_cycle_focus = mkPackage(
  nixRaw`pkgs.i3-cycle-focus`,
  "A simple tool to cyclically switch between the windows on the active workspace",
);

/**
 * Focus and select windows in i3
 */
export const i3_easyfocus = mkPackage(
  nixRaw`pkgs.i3-easyfocus`,
  "Focus and select windows in i3",
);

/**
 * Saving, loading and managing layouts for i3wm
 */
export const i3_layout_manager = mkPackage(
  nixRaw`pkgs.i3-layout-manager`,
  "Saving, loading and managing layouts for i3wm",
);

/**
 * Resize newly created windows
 */
export const i3_ratiosplit = mkPackage(
  nixRaw`pkgs.i3-ratiosplit`,
  "Resize newly created windows",
);

/**
 * A simple but flexible solution to saving and restoring i3 workspaces
 */
export const i3_resurrect = mkPackage(
  nixRaw`pkgs.i3-resurrect`,
  "A simple but flexible solution to saving and restoring i3 workspaces",
);

/**
 * A fork of i3-gaps that adds rounding to window corners
 */
export const i3_rounded = mkPackage(
  nixRaw`pkgs.i3-rounded`,
  "A fork of i3-gaps that adds rounding to window corners",
);

/**
 * Swallow a terminal window in i3wm
 */
export const i3_swallow = mkPackage(
  nixRaw`pkgs.i3-swallow`,
  "Swallow a terminal window in i3wm",
);

/**
 * XMonad-like workspace switching for i3 and sway
 */
export const i3_wk_switch = mkPackage(
  nixRaw`pkgs.i3-wk-switch`,
  "XMonad-like workspace switching for i3 and sway",
);

/**
 * A set of scripts used for automation of i3 and sway window manager layouts
 */
export const i3a = mkPackage(
  nixRaw`pkgs.i3a`,
  "A set of scripts used for automation of i3 and sway window manager layouts",
);

/**
 * Helps you handle more efficiently your screen real estate in i3wm by auto-splitting windows on their longest side
 */
export const i3altlayout = mkPackage(
  nixRaw`pkgs.i3altlayout`,
  "Helps you handle more efficiently your screen real estate in i3wm by auto-splitting windows on their longest side",
);

/**
 * A port of i3bar for river
 */
export const i3bar_river = mkPackage(
  nixRaw`pkgs.i3bar-river`,
  "A port of i3bar for river",
);

/**
 * A flexible scheduler for your i3bar blocks
 */
export const i3blocks = mkPackage(
  nixRaw`pkgs.i3blocks`,
  "A flexible scheduler for your i3bar blocks",
);

/**
 * A flexible scheduler for your i3bar blocks -- this is a fork to use with i3-gaps
 */
export const i3blocks_gaps = mkPackage(
  nixRaw`pkgs.i3blocks-gaps`,
  "A flexible scheduler for your i3bar blocks -- this is a fork to use with i3-gaps",
);

/**
 * A C interface library to i3wm
 */
export const i3ipc_glib = mkPackage(
  nixRaw`pkgs.i3ipc-glib`,
  "A C interface library to i3wm",
);

/**
 * A simple screen locker like slock
 */
export const i3lock = mkPackage(
  nixRaw`pkgs.i3lock`,
  "A simple screen locker like slock",
);

/**
 * An improved screenlocker based upon XCB and PAM with background blurring filter
 */
export const i3lock_blur = mkPackage(
  nixRaw`pkgs.i3lock-blur`,
  "An improved screenlocker based upon XCB and PAM with background blurring filter",
);

/**
 * A simple screen locker like slock, enhanced version with extra configuration options
 */
export const i3lock_color = mkPackage(
  nixRaw`pkgs.i3lock-color`,
  "A simple screen locker like slock, enhanced version with extra configuration options",
);

/**
 * i3lock is a bash script that takes a screenshot of the desktop, blurs the background and adds a lock icon and text
 */
export const i3lock_fancy = mkPackage(
  nixRaw`pkgs.i3lock-fancy`,
  "i3lock is a bash script that takes a screenshot of the desktop, blurs the background and adds a lock icon and text",
);

/**
 * A faster implementation of i3lock-fancy
 */
export const i3lock_fancy_rapid = mkPackage(
  nixRaw`pkgs.i3lock-fancy-rapid`,
  "A faster implementation of i3lock-fancy",
);

/**
 * Simple i3lock helper which pixels a screenshot by scaling it down and up to get a pixeled version of the screen when the lock is active
 */
export const i3lock_pixeled = mkPackage(
  nixRaw`pkgs.i3lock-pixeled`,
  "Simple i3lock helper which pixels a screenshot by scaling it down and up to get a pixeled version of the screen when the lock is active",
);

/**
 * i3 project manager similar to tmuxinator
 */
export const i3minator = mkPackage(
  nixRaw`pkgs.i3minator`,
  "i3 project manager similar to tmuxinator",
);

/**
 * Tmuxinator for the i3 window manager
 */
export const i3nator = mkPackage(
  nixRaw`pkgs.i3nator`,
  "Tmuxinator for the i3 window manager",
);

/**
 * A complete replacement for i3status
 */
export const i3pystatus = mkPackage(
  nixRaw`pkgs.i3pystatus`,
  "A complete replacement for i3status",
);

/**
 * Generates a status line for i3bar, dzen2, xmobar or lemonbar
 */
export const i3status = mkPackage(
  nixRaw`pkgs.i3status`,
  "Generates a status line for i3bar, dzen2, xmobar or lemonbar",
);

/**
 * Very resource-friendly and feature-rich replacement for i3status
 */
export const i3status_rust = mkPackage(
  nixRaw`pkgs.i3status-rust`,
  "Very resource-friendly and feature-rich replacement for i3status",
);

/**
 * Automatically change i3 workspace names based on their contents
 */
export const i3wsr = mkPackage(
  nixRaw`pkgs.i3wsr`,
  "Automatically change i3 workspace names based on their contents",
);

/**
 * A better i7 (and now i3, i5) reporting tool for Linux
 */
export const i7z = mkPackage(
  nixRaw`pkgs.i7z`,
  "A better i7 (and now i3, i5) reporting tool for Linux",
);

/**
 * A utility for switching between the LCD and external VGA display on Intel graphics cards
 */
export const i810switch = mkPackage(
  nixRaw`pkgs.i810switch`,
  "A utility for switching between the LCD and external VGA display on Intel graphics cards",
);

/**
 * An open source Pan-CJK serif typeface
 */
export const i_dot_ming = mkPackage(
  nixRaw`pkgs.i-dot-ming`,
  "An open source Pan-CJK serif typeface",
);

/**
 * A universal force engine for ab initio and force field driven (path integral) molecular dynamics
 */
export const i_pi = mkPackage(
  nixRaw`pkgs.i-pi`,
  "A universal force engine for ab initio and force field driven (path integral) molecular dynamics",
);

/**
 * iA Writer Duospace Typeface
 */
export const ia_writer_duospace = mkPackage(
  nixRaw`pkgs.ia-writer-duospace`,
  "iA Writer Duospace Typeface",
);

/**
 * Intel Architecture Code Analyzer
 */
export const iaca = mkPackage(
  nixRaw`pkgs.iaca`,
  "Intel Architecture Code Analyzer",
);

/**
 * Intel Architecture Code Analyzer
 */
export const iaca_2_1 = mkPackage(
  nixRaw`pkgs.iaca_2_1`,
  "Intel Architecture Code Analyzer",
);

/**
 * Intel Architecture Code Analyzer
 */
export const iaca_3_0 = mkPackage(
  nixRaw`pkgs.iaca_3_0`,
  "Intel Architecture Code Analyzer",
);

/**
 * An official graphical interface of radare2
 */
export const iaito = mkPackage(
  nixRaw`pkgs.iaito`,
  "An official graphical interface of radare2",
);

/**
 * Small tool to convert an IAM Policy in JSON format into a Terraform aws_iam_policy_document 
 */
export const iam_policy_json_to_terraform = mkPackage(
  nixRaw`pkgs.iam-policy-json-to-terraform`,
  "Small tool to convert an IAM Policy in JSON format into a Terraform aws_iam_policy_document ",
);

/**
 * A Matrix client for Vim addicts
 */
export const iamb = mkPackage(
  nixRaw`pkgs.iamb`,
  "A Matrix client for Vim addicts",
);

/**
 * A cli tool for importing and exporting AWS IAM configuration to YAML files
 */
export const iamy = mkPackage(
  nixRaw`pkgs.iamy`,
  "A cli tool for importing and exporting AWS IAM configuration to YAML files",
);

/**
 * IANA protocol and port number assignments (/etc/protocols and /etc/services)
 */
export const iana_etc = mkPackage(
  nixRaw`pkgs.iana-etc`,
  "IANA protocol and port number assignments (/etc/protocols and /etc/services)",
);

/**
 * Graphical open-source sequencer
 */
export const iannix = mkPackage(
  nixRaw`pkgs.iannix`,
  "Graphical open-source sequencer",
);

/**
 * The Iso9660 Analyzer Tool is a tool for detecting the structure of many types of CD/DVD images. It can convert from IMG to ISO format.
 */
export const iat = mkPackage(
  nixRaw`pkgs.iat`,
  "The Iso9660 Analyzer Tool is a tool for detecting the structure of many types of CD/DVD images. It can convert from IMG to ISO format.",
);

/**
 * Minimalistic, blazing-fast, and extendable prompt for bash and zsh
 */
export const iay = mkPackage(
  nixRaw`pkgs.iay`,
  "Minimalistic, blazing-fast, and extendable prompt for bash and zsh",
);

/**
 * Automation Controller for the Trader Work Station of Interactive Brokers
 */
export const ib_controller = mkPackage(
  nixRaw`pkgs.ib-controller`,
  "Automation Controller for the Trader Work Station of Interactive Brokers",
);

/**
 * Trader Work Station of Interactive Brokers
 */
export const ib_tws = mkPackage(
  nixRaw`pkgs.ib-tws`,
  "Trader Work Station of Interactive Brokers",
);

/**
 * IBM Plex Typeface
 */
export const ibm_plex = mkPackage(
  nixRaw`pkgs.ibm-plex`,
  "IBM Plex Typeface",
);

/**
 * IBM's Software TPM 2.0, an implementation of the TCG TPM 2.0 specification
 */
export const ibm_sw_tpm2 = mkPackage(
  nixRaw`pkgs.ibm-sw-tpm2`,
  "IBM's Software TPM 2.0, an implementation of the TCG TPM 2.0 specification",
);

/**
 * Command line client for IBM Cloud
 */
export const ibmcloud_cli = mkPackage(
  nixRaw`pkgs.ibmcloud-cli`,
  "Command line client for IBM Cloud",
);

/**
 * Virtual machine designed for extremely compact low-level audiovisual programs
 */
export const ibniz = mkPackage(
  nixRaw`pkgs.ibniz`,
  "Virtual machine designed for extremely compact low-level audiovisual programs",
);

/**
 * Intelligent Input Bus, input method framework
 */
export const ibus = mkPackage(
  nixRaw`pkgs.ibus`,
  "Intelligent Input Bus, input method framework",
);

/**
 * Generate the IBus GTK or GNOME Shell theme from existing themes
 */
export const ibus_theme_tools = mkPackage(
  nixRaw`pkgs.ibus-theme-tools`,
  "Generate the IBus GTK or GNOME Shell theme from existing themes",
);

/**
 * Intelligent Input Bus, input method framework
 */
export const ibus_with_plugins = mkPackage(
  nixRaw`pkgs.ibus-with-plugins`,
  "Intelligent Input Bus, input method framework",
);

/**
 * Hierarchical Deterministic Key Derivation for the Internet Computer
 */
export const ic_keysmith = mkPackage(
  nixRaw`pkgs.ic-keysmith`,
  "Hierarchical Deterministic Key Derivation for the Internet Computer",
);

/**
 * Converting ICAL file into org-mode format
 */
export const ical2orgpy = mkPackage(
  nixRaw`pkgs.ical2orgpy`,
  "Converting ICAL file into org-mode format",
);

/**
 * 3D vector-based clone of the atari game Missile Command
 */
export const icbm3d = mkPackage(
  nixRaw`pkgs.icbm3d`,
  "3D vector-based clone of the atari game Missile Command",
);

/**
 * Side-by-side highlighted command line diffs
 */
export const icdiff = mkPackage(
  nixRaw`pkgs.icdiff`,
  "Side-by-side highlighted command line diffs",
);

/**
 * Web app that allows students to ask real-time, anonymous questions during class
 */
export const icebreaker = mkPackage(
  nixRaw`pkgs.icebreaker`,
  "Web app that allows students to ask real-time, anonymous questions during class",
);

/**
 * Server software for streaming multimedia
 */
export const icecast = mkPackage(
  nixRaw`pkgs.icecast`,
  "Server software for streaming multimedia",
);

/**
 * Distributed compiler with a central scheduler to share build load
 */
export const icecream = mkPackage(
  nixRaw`pkgs.icecream`,
  "Distributed compiler with a central scheduler to share build load",
);

/**
 * Icecream GUI Monitor
 */
export const icemon = mkPackage(
  nixRaw`pkgs.icemon`,
  "Icecream GUI Monitor",
);

/**
 * A simple tool to allow storage of signed, encrypted, incremental backups using Amazon's Glacier storage
 */
export const iceshelf = mkPackage(
  nixRaw`pkgs.iceshelf`,
  "A simple tool to allow storage of signed, encrypted, incremental backups using Amazon's Glacier storage",
);

/**
 * GPU-accelerated procedural modeler and slicer for 3D printing
 */
export const icesl = mkPackage(
  nixRaw`pkgs.icesl`,
  "GPU-accelerated procedural modeler and slicer for 3D printing",
);

/**
 * Documentation and tools for Lattice iCE40 FPGAs
 */
export const icestorm = mkPackage(
  nixRaw`pkgs.icestorm`,
  "Documentation and tools for Lattice iCE40 FPGAs",
);

/**
 * A simple, lightweight X window manager
 */
export const icewm = mkPackage(
  nixRaw`pkgs.icewm`,
  "A simple, lightweight X window manager",
);

/**
 * Open source monitoring system
 */
export const icinga2 = mkPackage(
  nixRaw`pkgs.icinga2`,
  "Open source monitoring system",
);

/**
 * Open source monitoring system
 */
export const icinga2_agent = mkPackage(
  nixRaw`pkgs.icinga2-agent`,
  "Open source monitoring system",
);

/**
 * Webinterface for Icinga 2
 */
export const icingaweb2 = mkPackage(
  nixRaw`pkgs.icingaweb2`,
  "Webinterface for Icinga 2",
);

/**
 * PHP library package for Icingaweb 2
 */
export const icingaweb2_ipl = mkPackage(
  nixRaw`pkgs.icingaweb2-ipl`,
  "PHP library package for Icingaweb 2",
);

/**
 * Third party dependencies for Icingaweb 2
 */
export const icingaweb2_thirdparty = mkPackage(
  nixRaw`pkgs.icingaweb2-thirdparty`,
  "Third party dependencies for Icingaweb 2",
);

/**
 * A program maintenance (make) utility using a C-like grammar
 */
export const icmake = mkPackage(
  nixRaw`pkgs.icmake`,
  "A program maintenance (make) utility using a C-like grammar",
);

/**
 * Tools for icon conversion specific to nix package manager
 */
export const iconConvTools = mkPackage(
  nixRaw`pkgs.iconConvTools`,
  "Tools for icon conversion specific to nix package manager",
);

/**
 * A very high level general-purpose programming language
 */
export const icon_lang = mkPackage(
  nixRaw`pkgs.icon-lang`,
  "A very high level general-purpose programming language",
);

/**
 * Symbolic icons for your apps
 */
export const icon_library = mkPackage(
  nixRaw`pkgs.icon-library`,
  "Symbolic icons for your apps",
);

/**
 * Utility for generating icon themes and libXcursor cursor themes
 */
export const icon_slicer = mkPackage(
  nixRaw`pkgs.icon-slicer`,
  "Utility for generating icon themes and libXcursor cursor themes",
);

export const iconnamingutils = mkPackage(
  nixRaw`pkgs.iconnamingutils`,
  "",
);

/**
 * Icon pack based upon Faenza and Mint-X
 */
export const iconpack_jade = mkPackage(
  nixRaw`pkgs.iconpack-jade`,
  "Icon pack based upon Faenza and Mint-X",
);

/**
 * Gnome icon pack based upon Faenza
 */
export const iconpack_obsidian = mkPackage(
  nixRaw`pkgs.iconpack-obsidian`,
  "Gnome icon pack based upon Faenza",
);

/**
 * The GNU C Library
 */
export const iconv = mkPackage(
  nixRaw`pkgs.iconv`,
  "The GNU C Library",
);

/**
 * Set of programs to deal with Microsoft Windows(R) icon and cursor files
 */
export const icoutils = mkPackage(
  nixRaw`pkgs.icoutils`,
  "Set of programs to deal with Microsoft Windows(R) icon and cursor files",
);

/**
 * Interactive console for the Crystal programming language
 */
export const icr = mkPackage(
  nixRaw`pkgs.icr`,
  "Interactive console for the Crystal programming language",
);

/**
 * Like tree but interactive
 */
export const ictree = mkPackage(
  nixRaw`pkgs.ictree`,
  "Like tree but interactive",
);

/**
 * Unicode and globalization support library
 */
export const icu = mkPackage(
  nixRaw`pkgs.icu`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu58 = mkPackage(
  nixRaw`pkgs.icu58`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu60 = mkPackage(
  nixRaw`pkgs.icu60`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu63 = mkPackage(
  nixRaw`pkgs.icu63`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu64 = mkPackage(
  nixRaw`pkgs.icu64`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu66 = mkPackage(
  nixRaw`pkgs.icu66`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu67 = mkPackage(
  nixRaw`pkgs.icu67`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu68 = mkPackage(
  nixRaw`pkgs.icu68`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu69 = mkPackage(
  nixRaw`pkgs.icu69`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu70 = mkPackage(
  nixRaw`pkgs.icu70`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu71 = mkPackage(
  nixRaw`pkgs.icu71`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu72 = mkPackage(
  nixRaw`pkgs.icu72`,
  "Unicode and globalization support library",
);

/**
 * Unicode and globalization support library
 */
export const icu73 = mkPackage(
  nixRaw`pkgs.icu73`,
  "Unicode and globalization support library",
);

/**
 * Library for reading, writing, and manipulating ID3v1 and ID3v2 tags
 */
export const id3lib = mkPackage(
  nixRaw`pkgs.id3lib`,
  "Library for reading, writing, and manipulating ID3v1 and ID3v2 tags",
);

/**
 * A command line editor for id3v2 tags
 */
export const id3v2 = mkPackage(
  nixRaw`pkgs.id3v2`,
  "A command line editor for id3v2 tags",
);

/**
 * Python API and CLI for the ikea IDÅSEN desk
 */
export const idasen = mkPackage(
  nixRaw`pkgs.idasen`,
  "Python API and CLI for the ikea IDÅSEN desk",
);

/**
 * A program for comparing multiple versions of an image or video
 */
export const identity = mkPackage(
  nixRaw`pkgs.identity`,
  "A program for comparing multiple versions of an image or video",
);

/**
 * Insert emoji anywhere, even in non-native apps - designed for elementary OS
 */
export const ideogram = mkPackage(
  nixRaw`pkgs.ideogram`,
  "Insert emoji anywhere, even in non-native apps - designed for elementary OS",
);

/**
 * List/modify installed apps of iOS devices
 */
export const ideviceinstaller = mkPackage(
  nixRaw`pkgs.ideviceinstaller`,
  "List/modify installed apps of iOS devices",
);

/**
 * Restore/upgrade firmware of iOS devices
 */
export const idevicerestore = mkPackage(
  nixRaw`pkgs.idevicerestore`,
  "Restore/upgrade firmware of iOS devices",
);

/**
 * Tool to get/set the infamous idle3 timer in WD HDDs
 */
export const idle3tools = mkPackage(
  nixRaw`pkgs.idle3tools`,
  "Tool to get/set the infamous idle3 timer in WD HDDs",
);

/**
 * Provides functionalities about i18n domain name processing
 */
export const idnkit = mkPackage(
  nixRaw`pkgs.idnkit`,
  "Provides functionalities about i18n domain name processing",
);

export const idris = mkPackage(
  nixRaw`pkgs.idris`,
  "",
);

/**
 * A purely functional programming language with first class types
 */
export const idris2 = mkPackage(
  nixRaw`pkgs.idris2`,
  "A purely functional programming language with first class types",
);

/**
 * Manipulating CPC dsk images and files
 */
export const idsk = mkPackage(
  nixRaw`pkgs.idsk`,
  "Manipulating CPC dsk images and files",
);

/**
 * Text searching utility
 */
export const idutils = mkPackage(
  nixRaw`pkgs.idutils`,
  "Text searching utility",
);

/**
 * Open source IFC library and geometry engine
 */
export const ifcopenshell = mkPackage(
  nixRaw`pkgs.ifcopenshell`,
  "Open source IFC library and geometry engine",
);

/**
 * PC/SC IFD Handler based on libnfc
 */
export const ifdnfc = mkPackage(
  nixRaw`pkgs.ifdnfc`,
  "PC/SC IFD Handler based on libnfc",
);

/**
 * Extract and dump Intel Firmware Descriptor information
 */
export const ifdtool = mkPackage(
  nixRaw`pkgs.ifdtool`,
  "Extract and dump Intel Firmware Descriptor information",
);

/**
 * Utility for enslaving networking interfaces under a bond
 */
export const ifenslave = mkPackage(
  nixRaw`pkgs.ifenslave`,
  "Utility for enslaving networking interfaces under a bond",
);

/**
 * Generate "if err != nil {" block
 */
export const iferr = mkPackage(
  nixRaw`pkgs.iferr`,
  "Generate \"if err != nil {\" block",
);

/**
 * Interactive fiction mapper
 */
export const ifm = mkPackage(
  nixRaw`pkgs.ifm`,
  "Interactive fiction mapper",
);

/**
 * Tool for setting IP interface metrics
 */
export const ifmetric = mkPackage(
  nixRaw`pkgs.ifmetric`,
  "Tool for setting IP interface metrics",
);

/**
 * Rust utility to extract UEFI IFR data into human-readable text
 */
export const ifrextractor_rs = mkPackage(
  nixRaw`pkgs.ifrextractor-rs`,
  "Rust utility to extract UEFI IFR data into human-readable text",
);

/**
 * Report network interfaces bandwith just like vmstat/iostat do for other system counters - legacy version
 */
export const ifstat_legacy = mkPackage(
  nixRaw`pkgs.ifstat-legacy`,
  "Report network interfaces bandwith just like vmstat/iostat do for other system counters - legacy version",
);

/**
 * Display bandwidth usage on a network interface
 */
export const iftop = mkPackage(
  nixRaw`pkgs.iftop`,
  "Display bandwidth usage on a network interface",
);

/**
 * A fuse filesystem implementation to access the contents of iOS devices
 */
export const ifuse = mkPackage(
  nixRaw`pkgs.ifuse`,
  "A fuse filesystem implementation to access the contents of iOS devices",
);

/**
 * A simple wrapper over nmcli using wifiscanner made in rust
 */
export const ifwifi = mkPackage(
  nixRaw`pkgs.ifwifi`,
  "A simple wrapper over nmcli using wifiscanner made in rust",
);

/**
 * A daemon that routes multicast using IGMP forwarding
 */
export const igmpproxy = mkPackage(
  nixRaw`pkgs.igmpproxy`,
  "A daemon that routes multicast using IGMP forwarding",
);

/**
 * Ignite a Firecracker microVM
 */
export const ignite = mkPackage(
  nixRaw`pkgs.ignite`,
  "Ignite a Firecracker microVM",
);

/**
 * The Ignominous Profiler
 */
export const igprof = mkPackage(
  nixRaw`pkgs.igprof`,
  "The Ignominous Profiler",
);

/**
 * C library for complex network analysis and graph theory
 */
export const igraph = mkPackage(
  nixRaw`pkgs.igraph`,
  "C library for complex network analysis and graph theory",
);

/**
 * Interactive Grep
 */
export const igrep = mkPackage(
  nixRaw`pkgs.igrep`,
  "Interactive Grep",
);

/**
 * A visualization tool for interactive exploration of genomic datasets
 */
export const igv = mkPackage(
  nixRaw`pkgs.igv`,
  "A visualization tool for interactive exploration of genomic datasets",
);

export const ihaskell = mkPackage(
  nixRaw`pkgs.ihaskell`,
  "",
);

/**
 * Project generator for the IHP (Integrated Haskell Platform) web framework
 */
export const ihp_new = mkPackage(
  nixRaw`pkgs.ihp-new`,
  "Project generator for the IHP (Integrated Haskell Platform) web framework",
);

/**
 * Irc it, simple FIFO based irc client
 */
export const ii = mkPackage(
  nixRaw`pkgs.ii`,
  "Irc it, simple FIFO based irc client",
);

/**
 * The modern media player for macOS
 */
export const iina = mkPackage(
  nixRaw`pkgs.iina`,
  "The modern media player for macOS",
);

/**
 * Proxy for sending IIO sensor data to D-Bus
 */
export const iio_sensor_proxy = mkPackage(
  nixRaw`pkgs.iio-sensor-proxy`,
  "Proxy for sending IIO sensor data to D-Bus",
);

/**
 * A DSP IIR realtime filter library written in C++
 */
export const iir1 = mkPackage(
  nixRaw`pkgs.iir1`,
  "A DSP IIR realtime filter library written in C++",
);

/**
 * Interactive wrapper for jq
 */
export const ijq = mkPackage(
  nixRaw`pkgs.ijq`,
  "Interactive wrapper for jq",
);

/**
 * Raster printer driver architecture
 */
export const ijs = mkPackage(
  nixRaw`pkgs.ijs`,
  "Raster printer driver architecture",
);

/**
 * Tool to discover, fingerprint and test IPsec VPN servers
 */
export const ike_scan = mkPackage(
  nixRaw`pkgs.ike-scan`,
  "Tool to discover, fingerprint and test IPsec VPN servers",
);

/**
 * Interactively kill running processes
 */
export const ikill = mkPackage(
  nixRaw`pkgs.ikill`,
  "Interactively kill running processes",
);

/**
 * Wiki compiler, storing pages and history in a RCS
 */
export const ikiwiki = mkPackage(
  nixRaw`pkgs.ikiwiki`,
  "Wiki compiler, storing pages and history in a RCS",
);

/**
 * Wiki compiler, storing pages and history in a RCS
 */
export const ikiwiki_full = mkPackage(
  nixRaw`pkgs.ikiwiki-full`,
  "Wiki compiler, storing pages and history in a RCS",
);

/**
 * Static analyzer for C/C++ based on the theory of Abstract Interpretation
 */
export const ikos = mkPackage(
  nixRaw`pkgs.ikos`,
  "Static analyzer for C/C++ based on the theory of Abstract Interpretation",
);

/**
 * XML parser for jabber
 */
export const iksemel = mkPackage(
  nixRaw`pkgs.iksemel`,
  "XML parser for jabber",
);

export const ilbc = mkPackage(
  nixRaw`pkgs.ilbc`,
  "",
);

/**
 * The INTERLIS Compiler
 */
export const ili2c = mkPackage(
  nixRaw`pkgs.ili2c`,
  "The INTERLIS Compiler",
);

/**
 * Daemon that wires button presses to screen backlight level
 */
export const illum = mkPackage(
  nixRaw`pkgs.illum`,
  "Daemon that wires button presses to screen backlight level",
);

/**
 *  A library for 2D/3D vectors and matrices and other mathematical objects, functions and data types for computer graphics
 */
export const ilmbase = mkPackage(
  nixRaw`pkgs.ilmbase`,
  " A library for 2D/3D vectors and matrices and other mathematical objects, functions and data types for computer graphics",
);

/**
 * Tool for decompiling .NET assemblies and generating portable PDBs
 */
export const ilspycmd = mkPackage(
  nixRaw`pkgs.ilspycmd`,
  "Tool for decompiling .NET assemblies and generating portable PDBs",
);

/**
 * evmctl utility to manage digital signatures of the Linux kernel integrity subsystem (IMA/EVM)
 */
export const ima_evm_utils = mkPackage(
  nixRaw`pkgs.ima-evm-utils`,
  "evmctl utility to manage digital signatures of the Linux kernel integrity subsystem (IMA/EVM)",
);

/**
 * A suite of tools for emulating optical drives and discs
 */
export const image_analyzer = mkPackage(
  nixRaw`pkgs.image-analyzer`,
  "A suite of tools for emulating optical drives and discs",
);

/**
 * Optimize images using multiple utilities
 */
export const image_optim = mkPackage(
  nixRaw`pkgs.image_optim`,
  "Optimize images using multiple utilities",
);

/**
 * Simple and fast GTK image viewer with basic image manipulation tools
 */
export const image_roll = mkPackage(
  nixRaw`pkgs.image-roll`,
  "Simple and fast GTK image viewer with basic image manipulation tools",
);

/**
 * Image processing and analysis in Java
 */
export const imagej = mkPackage(
  nixRaw`pkgs.imagej`,
  "Image processing and analysis in Java",
);

/**
 * Simple program to store a file into a PNG image
 */
export const imagelol = mkPackage(
  nixRaw`pkgs.imagelol`,
  "Simple program to store a file into a PNG image",
);

/**
 * A software suite to create, edit, compose, or convert bitmap images
 */
export const imagemagick = mkPackage(
  nixRaw`pkgs.imagemagick`,
  "A software suite to create, edit, compose, or convert bitmap images",
);

/**
 * A software suite to create, edit, compose, or convert bitmap images
 */
export const imagemagick6 = mkPackage(
  nixRaw`pkgs.imagemagick6`,
  "A software suite to create, edit, compose, or convert bitmap images",
);

/**
 * A software suite to create, edit, compose, or convert bitmap images
 */
export const imagemagick6Big = mkPackage(
  nixRaw`pkgs.imagemagick6Big`,
  "A software suite to create, edit, compose, or convert bitmap images",
);

/**
 * A software suite to create, edit, compose, or convert bitmap images
 */
export const imagemagick6_light = mkPackage(
  nixRaw`pkgs.imagemagick6_light`,
  "A software suite to create, edit, compose, or convert bitmap images",
);

/**
 * A software suite to create, edit, compose, or convert bitmap images
 */
export const imagemagickBig = mkPackage(
  nixRaw`pkgs.imagemagickBig`,
  "A software suite to create, edit, compose, or convert bitmap images",
);

/**
 * A software suite to create, edit, compose, or convert bitmap images
 */
export const imagemagick_light = mkPackage(
  nixRaw`pkgs.imagemagick_light`,
  "A software suite to create, edit, compose, or convert bitmap images",
);

/**
 * A raster image scaling and processing utility
 */
export const imageworsener = mkPackage(
  nixRaw`pkgs.imageworsener`,
  "A raster image scaling and processing utility",
);

/**
 * Fast, simple, scalable, Docker-ready HTTP microservice for high-level image processing
 */
export const imaginary = mkPackage(
  nixRaw`pkgs.imaginary`,
  "Fast, simple, scalable, Docker-ready HTTP microservice for high-level image processing",
);

/**
 * Lightweight and simple DVD slide show maker
 */
export const imagination = mkPackage(
  nixRaw`pkgs.imagination`,
  "Lightweight and simple DVD slide show maker",
);

/**
 * Imaginer with AI
 */
export const imaginer = mkPackage(
  nixRaw`pkgs.imaginer`,
  "Imaginer with AI",
);

/**
 * Mail filtering utility
 */
export const imapfilter = mkPackage(
  nixRaw`pkgs.imapfilter`,
  "Mail filtering utility",
);

/**
 * Execute scripts on new messages using IDLE imap command
 */
export const imapnotify = mkPackage(
  nixRaw`pkgs.imapnotify`,
  "Execute scripts on new messages using IDLE imap command",
);

/**
 * Mail folder synchronizer between IMAP servers
 */
export const imapsync = mkPackage(
  nixRaw`pkgs.imapsync`,
  "Mail folder synchronizer between IMAP servers",
);

/**
 * Imath is a C++ and python library of 2D and 3D vector, matrix, and math operations for computer graphics
 */
export const imath = mkPackage(
  nixRaw`pkgs.imath`,
  "Imath is a C++ and python library of 2D and 3D vector, matrix, and math operations for computer graphics",
);

/**
 * Tool to migrate workloads to IMDSv2
 */
export const imdshift = mkPackage(
  nixRaw`pkgs.imdshift`,
  "Tool to migrate workloads to IMDSv2",
);

/**
 * Standalone, daemon-less, unprivileged Dockerfile and OCI compatible container image builder. 
 */
export const img = mkPackage(
  nixRaw`pkgs.img`,
  "Standalone, daemon-less, unprivileged Dockerfile and OCI compatible container image builder. ",
);

/**
 * Convert images to PDF via direct JPEG inclusion
 */
export const img2pdf = mkPackage(
  nixRaw`pkgs.img2pdf`,
  "Convert images to PDF via direct JPEG inclusion",
);

/**
 * A tool to output images as RGB ANSI graphics on the terminal
 */
export const img_cat = mkPackage(
  nixRaw`pkgs.img-cat`,
  "A tool to output images as RGB ANSI graphics on the terminal",
);

/**
 * Very customizable imageboard/booru downloader with powerful filenaming features
 */
export const imgbrd_grabber = mkPackage(
  nixRaw`pkgs.imgbrd-grabber`,
  "Very customizable imageboard/booru downloader with powerful filenaming features",
);

/**
 * It's like cat, but for images
 */
export const imgcat = mkPackage(
  nixRaw`pkgs.imgcat`,
  "It's like cat, but for images",
);

/**
 * Image encryption library and command line tool
 */
export const imgcrypt = mkPackage(
  nixRaw`pkgs.imgcrypt`,
  "Image encryption library and command line tool",
);

/**
 * High-performance CLI batch image resizer & rotator
 */
export const imgp = mkPackage(
  nixRaw`pkgs.imgp`,
  "High-performance CLI batch image resizer & rotator",
);

/**
 * Tools to manipulate Android OTA archives
 */
export const imgpatchtools = mkPackage(
  nixRaw`pkgs.imgpatchtools`,
  "Tools to manipulate Android OTA archives",
);

/**
 * Fast and secure on-the-fly image processing server written in Go
 */
export const imgproxy = mkPackage(
  nixRaw`pkgs.imgproxy`,
  "Fast and secure on-the-fly image processing server written in Go",
);

/**
 * Bloat-free Graphical User interface for C++ with minimal dependencies
 */
export const imgui = mkPackage(
  nixRaw`pkgs.imgui`,
  "Bloat-free Graphical User interface for C++ with minimal dependencies",
);

/**
 * A tool for easy screencapping and uploading to imgur
 */
export const imgur_screenshot = mkPackage(
  nixRaw`pkgs.imgur-screenshot`,
  "A tool for easy screencapping and uploading to imgur",
);

/**
 * A shell script that uploads images to imgur
 */
export const imgurbash2 = mkPackage(
  nixRaw`pkgs.imgurbash2`,
  "A shell script that uploads images to imgur",
);

/**
 * Hex Editor for Reverse Engineers, Programmers and people who value their retinas when working at 3 AM
 */
export const imhex = mkPackage(
  nixRaw`pkgs.imhex`,
  "Hex Editor for Reverse Engineers, Programmers and people who value their retinas when working at 3 AM",
);

/**
 * Algorithms for computing exact solutions to dense systems of linear equations over the integers
 */
export const iml = mkPackage(
  nixRaw`pkgs.iml`,
  "Algorithms for computing exact solutions to dense systems of linear equations over the integers",
);

/**
 * Image manipulation library
 */
export const imlib2 = mkPackage(
  nixRaw`pkgs.imlib2`,
  "Image manipulation library",
);

/**
 * Image manipulation library
 */
export const imlib2Full = mkPackage(
  nixRaw`pkgs.imlib2Full`,
  "Image manipulation library",
);

/**
 * Image manipulation library
 */
export const imlib2_nox = mkPackage(
  nixRaw`pkgs.imlib2-nox`,
  "Image manipulation library",
);

/**
 * A Xinerama Aware Background Changer
 */
export const imlibsetroot = mkPackage(
  nixRaw`pkgs.imlibsetroot`,
  "A Xinerama Aware Background Changer",
);

/**
 * Postmodern immutable and persistent data structures for C++ — value semantics at scale
 */
export const immer = mkPackage(
  nixRaw`pkgs.immer`,
  "Postmodern immutable and persistent data structures for C++ — value semantics at scale",
);

/**
 * A VR coworking platform
 */
export const immersed_vr = mkPackage(
  nixRaw`pkgs.immersed-vr`,
  "A VR coworking platform",
);

/**
 * CLI utilities for Immich to help upload images and videos
 */
export const immich_cli = mkPackage(
  nixRaw`pkgs.immich-cli`,
  "CLI utilities for Immich to help upload images and videos",
);

/**
 * Immutable database based on zero trust, SQL and Key-Value, tamperproof, data change history
 */
export const immudb = mkPackage(
  nixRaw`pkgs.immudb`,
  "Immutable database based on zero trust, SQL and Key-Value, tamperproof, data change history",
);

/**
 * Generate method stubs for implementing an interface
 */
export const impl = mkPackage(
  nixRaw`pkgs.impl`,
  "Generate method stubs for implementing an interface",
);

/**
 * Straight-forward and modern application to create bootable drives
 */
export const impression = mkPackage(
  nixRaw`pkgs.impression`,
  "Straight-forward and modern application to create bootable drives",
);

/**
 * A simple library for loading/saving images and animations, written in C
 */
export const impy = mkPackage(
  nixRaw`pkgs.impy`,
  "A simple library for loading/saving images and animations, written in C",
);

/**
 * Immediate mode text-based user interface library
 */
export const imtui = mkPackage(
  nixRaw`pkgs.imtui`,
  "Immediate mode text-based user interface library",
);

/**
 * A command line image viewer for tiling window managers
 */
export const imv = mkPackage(
  nixRaw`pkgs.imv`,
  "A command line image viewer for tiling window managers",
);

/**
 * Mouse wheel configuration tool for XFree86/Xorg
 */
export const imwheel = mkPackage(
  nixRaw`pkgs.imwheel`,
  "Mouse wheel configuration tool for XFree86/Xorg",
);

/**
 * A real-time pitch and formant tracking software
 */
export const in_formant = mkPackage(
  nixRaw`pkgs.in-formant`,
  "A real-time pitch and formant tracking software",
);

/**
 * Free dynamic DNS client
 */
export const inadyn = mkPackage(
  nixRaw`pkgs.inadyn`,
  "Free dynamic DNS client",
);

/**
 * Tools for working with blackbox flight logs
 */
export const inav_blackbox_tools = mkPackage(
  nixRaw`pkgs.inav-blackbox-tools`,
  "Tools for working with blackbox flight logs",
);

/**
 * The iNav flight control system configuration tool
 */
export const inav_configurator = mkPackage(
  nixRaw`pkgs.inav-configurator`,
  "The iNav flight control system configuration tool",
);

/**
 * IUPAC International Chemical Identifier library
 */
export const inchi = mkPackage(
  nixRaw`pkgs.inchi`,
  "IUPAC International Chemical Identifier library",
);

/**
 * Analyze #includes in C/C++ source files with clang
 */
export const include_what_you_use = mkPackage(
  nixRaw`pkgs.include-what-you-use`,
  "Analyze #includes in C/C++ source files with clang",
);

/**
 * A monospace font for both screen and print
 */
export const inconsolata = mkPackage(
  nixRaw`pkgs.inconsolata`,
  "A monospace font for both screen and print",
);

/**
 * Fork of Inconsolata font, with proper support of Cyrillic and Greek
 */
export const inconsolata_lgc = mkPackage(
  nixRaw`pkgs.inconsolata-lgc`,
  "Fork of Inconsolata font, with proper support of Cyrillic and Greek",
);

/**
 * Iconic font aggregator, collection, & patcher. 3,600+ icons, 50+ patched fonts
 */
export const inconsolata_nerdfont = mkPackage(
  nixRaw`pkgs.inconsolata-nerdfont`,
  "Iconic font aggregator, collection, & patcher. 3,600+ icons, 50+ patched fonts",
);

/**
 * A cron-like daemon which handles filesystem events
 */
export const incron = mkPackage(
  nixRaw`pkgs.incron`,
  "A cron-like daemon which handles filesystem events",
);

/**
 * Object Oriented Enhancements for Tcl/Tk
 */
export const incrtcl = mkPackage(
  nixRaw`pkgs.incrtcl`,
  "Object Oriented Enhancements for Tcl/Tk",
);

/**
 * Powerful system container and virtual machine manager
 */
export const incus = mkPackage(
  nixRaw`pkgs.incus`,
  "Powerful system container and virtual machine manager",
);

/**
 * Powerful system container and virtual machine manager
 */
export const incus_unwrapped = mkPackage(
  nixRaw`pkgs.incus-unwrapped`,
  "Powerful system container and virtual machine manager",
);

/**
 * A source code reformatter
 */
export const indent = mkPackage(
  nixRaw`pkgs.indent`,
  "A source code reformatter",
);

/**
 * Python library for parallel decompression and seeking within compressed bzip2 files
 */
export const indexed_bzip2 = mkPackage(
  nixRaw`pkgs.indexed-bzip2`,
  "Python library for parallel decompression and seeking within compressed bzip2 files",
);

/**
 * Implementation of the INDI protocol for POSIX operating systems
 */
export const indi_full = mkPackage(
  nixRaw`pkgs.indi-full`,
  "Implementation of the INDI protocol for POSIX operating systems",
);

/**
 * Indicator to take menus from applications and place them in the panel (GTK 2 library for Xfce/LXDE)
 */
export const indicator_application_gtk2 = mkPackage(
  nixRaw`pkgs.indicator-application-gtk2`,
  "Indicator to take menus from applications and place them in the panel (GTK 2 library for Xfce/LXDE)",
);

/**
 * Indicator to take menus from applications and place them in the panel
 */
export const indicator_application_gtk3 = mkPackage(
  nixRaw`pkgs.indicator-application-gtk3`,
  "Indicator to take menus from applications and place them in the panel",
);

/**
 * Sound input/output selector indicator for Linux
 */
export const indicator_sound_switcher = mkPackage(
  nixRaw`pkgs.indicator-sound-switcher`,
  "Sound input/output selector indicator for Linux",
);

/**
 * IndieWeb app with extensions for sharing to/reading from micropub endpoints
 */
export const indigenous_desktop = mkPackage(
  nixRaw`pkgs.indigenous-desktop`,
  "IndieWeb app with extensions for sharing to/reading from micropub endpoints",
);

/**
 * Implementation of the INDI protocol for POSIX operating systems
 */
export const indilib = mkPackage(
  nixRaw`pkgs.indilib`,
  "Implementation of the INDI protocol for POSIX operating systems",
);

/**
 * A graph database written in rust 
 */
export const indradb_client = mkPackage(
  nixRaw`pkgs.indradb-client`,
  "A graph database written in rust ",
);

/**
 * A graph database written in rust 
 */
export const indradb_server = mkPackage(
  nixRaw`pkgs.indradb-server`,
  "A graph database written in rust ",
);

/**
 * This program generates synthesized percussion sounds using physical modelling
 */
export const industrializer = mkPackage(
  nixRaw`pkgs.industrializer`,
  "This program generates synthesized percussion sounds using physical modelling",
);

/**
 * Detect ineffectual assignments in Go code
 */
export const ineffassign = mkPackage(
  nixRaw`pkgs.ineffassign`,
  "Detect ineffectual assignments in Go code",
);

/**
 * Collection of common network programs
 */
export const inetutils = mkPackage(
  nixRaw`pkgs.inetutils`,
  "Collection of common network programs",
);

/**
 * A collection of open-source LV2 plugins
 */
export const infamousPlugins = mkPackage(
  nixRaw`pkgs.infamousPlugins`,
  "A collection of open-source LV2 plugins",
);

/**
 * A port of parts of the flamegraph toolkit to Rust
 */
export const inferno = mkPackage(
  nixRaw`pkgs.inferno`,
  "A port of parts of the flamegraph toolkit to Rust",
);

/**
 * The official Infisical CLI
 */
export const infisical = mkPackage(
  nixRaw`pkgs.infisical`,
  "The official Infisical CLI",
);

/**
 * An open-source distributed time series database
 */
export const influxdb = mkPackage(
  nixRaw`pkgs.influxdb`,
  "An open-source distributed time series database",
);

export const influxdb2 = mkPackage(
  nixRaw`pkgs.influxdb2`,
  "",
);

/**
 * CLI for managing resources in InfluxDB v2
 */
export const influxdb2_cli = mkPackage(
  nixRaw`pkgs.influxdb2-cli`,
  "CLI for managing resources in InfluxDB v2",
);

/**
 * A small utility to help provisioning influxdb2
 */
export const influxdb2_provision = mkPackage(
  nixRaw`pkgs.influxdb2-provision`,
  "A small utility to help provisioning influxdb2",
);

/**
 * An open-source distributed time series database
 */
export const influxdb2_server = mkPackage(
  nixRaw`pkgs.influxdb2-server`,
  "An open-source distributed time series database",
);

/**
 * Utility program to manipulate influxdb api tokens for declarative setups
 */
export const influxdb2_token_manipulator = mkPackage(
  nixRaw`pkgs.influxdb2-token-manipulator`,
  "Utility program to manipulate influxdb api tokens for declarative setups",
);

/**
 * Driver for the Infinite Noise TRNG
 */
export const infnoise = mkPackage(
  nixRaw`pkgs.infnoise`,
  "Driver for the Infinite Noise TRNG",
);

/**
 * Interactive fiction compiler and libraries
 */
export const inform6 = mkPackage(
  nixRaw`pkgs.inform6`,
  "Interactive fiction compiler and libraries",
);

/**
 * A design system for interactive fiction
 */
export const inform7 = mkPackage(
  nixRaw`pkgs.inform7`,
  "A design system for interactive fiction",
);

/**
 * Infra manages access to infrastructure such as Kubernetes
 */
export const infra = mkPackage(
  nixRaw`pkgs.infra`,
  "Infra manages access to infrastructure such as Kubernetes",
);

/**
 * A Lovecraftian single-player roguelike game
 */
export const infra_arcana = mkPackage(
  nixRaw`pkgs.infra-arcana`,
  "A Lovecraftian single-player roguelike game",
);

/**
 * Cloud cost estimates for Terraform in your CLI and pull requests
 */
export const infracost = mkPackage(
  nixRaw`pkgs.infracost`,
  "Cloud cost estimates for Terraform in your CLI and pull requests",
);

/**
 * Read your tfstate or HCL to generate a graph specific for each provider, showing only the resources that are most important/relevant.
 */
export const inframap = mkPackage(
  nixRaw`pkgs.inframap`,
  "Read your tfstate or HCL to generate a graph specific for each provider, showing only the resources that are most important/relevant.",
);

/**
 * A modular audio processing system using JACK and LV2 or LADSPA plugins
 */
export const ingen = mkPackage(
  nixRaw`pkgs.ingen`,
  "A modular audio processing system using JACK and LV2 or LADSPA plugins",
);

/**
 * A knowledge management meta-framework for geeks
 */
export const inherd_quake = mkPackage(
  nixRaw`pkgs.inherd-quake`,
  "A knowledge management meta-framework for geeks",
);

/**
 * Simple .INI file parser in C, good for embedded systems
 */
export const inih = mkPackage(
  nixRaw`pkgs.inih`,
  "Simple .INI file parser in C, good for embedded systems",
);

/**
 * Free standalone ini file parsing library
 */
export const iniparser = mkPackage(
  nixRaw`pkgs.iniparser`,
  "Free standalone ini file parsing library",
);

/**
 * Manipulate INI files from the command line
 */
export const initool = mkPackage(
  nixRaw`pkgs.initool`,
  "Manipulate INI files from the command line",
);

/**
 * A command line tool for checking the ink level of your locally connected printer
 */
export const ink = mkPackage(
  nixRaw`pkgs.ink`,
  "A command line tool for checking the ink level of your locally connected printer",
);

/**
 * Control 2D plotters, cutters, engravers, and CNC machines
 */
export const inkcut = mkPackage(
  nixRaw`pkgs.inkcut`,
  "Control 2D plotters, cutters, engravers, and CNC machines",
);

/**
 * Compiler for ink, inkle's scripting language
 */
export const inklecate = mkPackage(
  nixRaw`pkgs.inklecate`,
  "Compiler for ink, inkle's scripting language",
);

/**
 * A GNU/Linux-friendly version of the Wacom Inkling SketchManager
 */
export const inklingreader = mkPackage(
  nixRaw`pkgs.inklingreader`,
  "A GNU/Linux-friendly version of the Wacom Inkling SketchManager",
);

/**
 * Vector graphics editor
 */
export const inkscape = mkPackage(
  nixRaw`pkgs.inkscape`,
  "Vector graphics editor",
);

/**
 * Vector graphics editor
 */
export const inkscape_with_extensions = mkPackage(
  nixRaw`pkgs.inkscape-with-extensions`,
  "Vector graphics editor",
);

/**
 * A GPU powered browserless markdown viewer
 */
export const inlyne = mkPackage(
  nixRaw`pkgs.inlyne`,
  "A GPU powered browserless markdown viewer",
);

/**
 * A private network system that uses WireGuard under the hood
 */
export const innernet = mkPackage(
  nixRaw`pkgs.innernet`,
  "A private network system that uses WireGuard under the hood",
);

/**
 * A tool to unpack installers created by Inno Setup
 */
export const innoextract = mkPackage(
  nixRaw`pkgs.innoextract`,
  "A tool to unpack installers created by Inno Setup",
);

/**
 * Program to normalize intensity of MINC files
 */
export const inormalize = mkPackage(
  nixRaw`pkgs.inormalize`,
  "Program to normalize intensity of MINC files",
);

export const inotify_tools = mkPackage(
  nixRaw`pkgs.inotify-tools`,
  "",
);

/**
 * Fonts for Code, from Font Bureau
 */
export const input_fonts = mkPackage(
  nixRaw`pkgs.input-fonts`,
  "Fonts for Code, from Font Bureau",
);

/**
 * Open-source KVM software
 */
export const input_leap = mkPackage(
  nixRaw`pkgs.input-leap`,
  "Open-source KVM software",
);

/**
 * An easy to use tool to change the mapping of your input device buttons
 */
export const input_remapper = mkPackage(
  nixRaw`pkgs.input-remapper`,
  "An easy to use tool to change the mapping of your input device buttons",
);

/**
 * Input layer utilities, includes lsinput
 */
export const input_utils = mkPackage(
  nixRaw`pkgs.input-utils`,
  "Input layer utilities, includes lsinput",
);

/**
 * Monitor XInput events and run arbitrary scripts on hierarchy change events
 */
export const inputplug = mkPackage(
  nixRaw`pkgs.inputplug`,
  "Monitor XInput events and run arbitrary scripts on hierarchy change events",
);

/**
 * Security testing tool for GraphQL
 */
export const inql = mkPackage(
  nixRaw`pkgs.inql`,
  "Security testing tool for GraphQL",
);

/**
 * Inria Sans and Inria Serif
 */
export const inriafonts = mkPackage(
  nixRaw`pkgs.inriafonts`,
  "Inria Sans and Inria Serif",
);

/**
 * The most intuitive cross-platform REST API Client
 */
export const insomnia = mkPackage(
  nixRaw`pkgs.insomnia`,
  "The most intuitive cross-platform REST API Client",
);

/**
 * Inspec is an open-source testing framework for infrastructure with a human- and machine-readable language for specifying compliance, security and policy requirements
 */
export const inspec = mkPackage(
  nixRaw`pkgs.inspec`,
  "Inspec is an open-source testing framework for infrastructure with a human- and machine-readable language for specifying compliance, security and policy requirements",
);

/**
 * Tool for analysing captured signals from sdr receivers
 */
export const inspectrum = mkPackage(
  nixRaw`pkgs.inspectrum`,
  "Tool for analysing captured signals from sdr receivers",
);

/**
 * A modular C++ IRC server
 */
export const inspircd = mkPackage(
  nixRaw`pkgs.inspircd`,
  "A modular C++ IRC server",
);

/**
 * A modular C++ IRC server
 */
export const inspircdMinimal = mkPackage(
  nixRaw`pkgs.inspircdMinimal`,
  "A modular C++ IRC server",
);

export const installShellFiles = mkPackage(
  nixRaw`pkgs.installShellFiles`,
  "",
);

/**
 * Download pictures (or videos) along with their captions and other metadata from Instagram
 */
export const instaloader = mkPackage(
  nixRaw`pkgs.instaloader`,
  "Download pictures (or videos) along with their captions and other metadata from Instagram",
);

/**
 * Simple text adventure interpreter for Unix and Windows
 */
export const instead = mkPackage(
  nixRaw`pkgs.instead`,
  "Simple text adventure interpreter for Unix and Windows",
);

/**
 * Google Drive sync and backup with multiple account support
 */
export const insync = mkPackage(
  nixRaw`pkgs.insync`,
  "Google Drive sync and backup with multiple account support",
);

/**
 * Firmware for Intel 2200BG cards
 */
export const intel2200BGFirmware = mkPackage(
  nixRaw`pkgs.intel2200BGFirmware`,
  "Firmware for Intel 2200BG cards",
);

/**
 * User space software for Intel(R) Resource Director Technology
 */
export const intel_cmt_cat = mkPackage(
  nixRaw`pkgs.intel-cmt-cat`,
  "User space software for Intel(R) Resource Director Technology",
);

/**
 * Intel Graphics Compute Runtime for OpenCL. Replaces Beignet for Gen8 (Broadwell) and beyond
 */
export const intel_compute_runtime = mkPackage(
  nixRaw`pkgs.intel-compute-runtime`,
  "Intel Graphics Compute Runtime for OpenCL. Replaces Beignet for Gen8 (Broadwell) and beyond",
);

/**
 * Intel Graphics Memory Management Library
 */
export const intel_gmmlib = mkPackage(
  nixRaw`pkgs.intel-gmmlib`,
  "Intel Graphics Memory Management Library",
);

/**
 * Tools for development and testing of the Intel DRM driver
 */
export const intel_gpu_tools = mkPackage(
  nixRaw`pkgs.intel-gpu-tools`,
  "Tools for development and testing of the Intel DRM driver",
);

/**
 * LLVM-based compiler for OpenCL targeting Intel Gen graphics hardware
 */
export const intel_graphics_compiler = mkPackage(
  nixRaw`pkgs.intel-graphics-compiler`,
  "LLVM-based compiler for OpenCL targeting Intel Gen graphics hardware",
);

/**
 * Intel Media Driver for VAAPI — Broadwell+ iGPUs
 */
export const intel_media_driver = mkPackage(
  nixRaw`pkgs.intel-media-driver`,
  "Intel Media Driver for VAAPI — Broadwell+ iGPUs",
);

/**
 * Intel Media SDK
 */
export const intel_media_sdk = mkPackage(
  nixRaw`pkgs.intel-media-sdk`,
  "Intel Media SDK",
);

/**
 * Official OpenCL runtime for Intel CPUs
 */
export const intel_ocl = mkPackage(
  nixRaw`pkgs.intel-ocl`,
  "Official OpenCL runtime for Intel CPUs",
);

/**
 * Intel One Mono, an expressive monospaced font family that’s built with clarity, legibility, and the needs of developers in mind
 */
export const intel_one_mono = mkPackage(
  nixRaw`pkgs.intel-one-mono`,
  "Intel One Mono, an expressive monospaced font family that’s built with clarity, legibility, and the needs of developers in mind",
);

/**
 * VA-API user mode driver for Intel GEN Graphics family
 */
export const intel_vaapi_driver = mkPackage(
  nixRaw`pkgs.intel-vaapi-driver`,
  "VA-API user mode driver for Intel GEN Graphics family",
);

/**
 * Dump interesting things about Management Engine
 */
export const intelmetool = mkPackage(
  nixRaw`pkgs.intelmetool`,
  "Dump interesting things about Management Engine",
);

/**
 * Provides information about Intel CPU/chipset hardware configuration (register contents, MSRs, etc)
 */
export const inteltool = mkPackage(
  nixRaw`pkgs.inteltool`,
  "Provides information about Intel CPU/chipset hardware configuration (register contents, MSRs, etc)",
);

/**
 * MRI intensity normalization tools
 */
export const intensity_normalization = mkPackage(
  nixRaw`pkgs.intensity-normalization`,
  "MRI intensity normalization tools",
);

/**
 * A typeface specially designed for user interfaces
 */
export const inter = mkPackage(
  nixRaw`pkgs.inter`,
  "A typeface specially designed for user interfaces",
);

/**
 * An Out of bounds interaction gathering server and client library
 */
export const interactsh = mkPackage(
  nixRaw`pkgs.interactsh`,
  "An Out of bounds interaction gathering server and client library",
);

/**
 * The original esoteric programming language
 */
export const intercal = mkPackage(
  nixRaw`pkgs.intercal`,
  "The original esoteric programming language",
);

/**
 * A minimal composable infrastructure on top of libudev and libevdev
 */
export const interception_tools = mkPackage(
  nixRaw`pkgs.interception-tools`,
  "A minimal composable infrastructure on top of libudev and libevdev",
);

/**
 * File encryption tool and an HSM frontend
 */
export const interlock = mkPackage(
  nixRaw`pkgs.interlock`,
  "File encryption tool and an HSM frontend",
);

/**
 * User-friendly and featureful command-line BitTorrent metainfo utility
 */
export const intermodal = mkPackage(
  nixRaw`pkgs.intermodal`,
  "User-friendly and featureful command-line BitTorrent metainfo utility",
);

/**
 * A Python and Command-Line Interface to Archive.org
 */
export const internetarchive = mkPackage(
  nixRaw`pkgs.internetarchive`,
  "A Python and Command-Line Interface to Archive.org",
);

/**
 * Translation helper tool
 */
export const intltool = mkPackage(
  nixRaw`pkgs.intltool`,
  "Translation helper tool",
);

/**
 * An open source alternative front-end to YouTube
 */
export const invidious = mkPackage(
  nixRaw`pkgs.invidious`,
  "An open source alternative front-end to YouTube",
);

/**
 * Command line invoice generator
 */
export const invoice = mkPackage(
  nixRaw`pkgs.invoice`,
  "Command line invoice generator",
);

/**
 * Data extractor for PDF invoices
 */
export const invoice2data = mkPackage(
  nixRaw`pkgs.invoice2data`,
  "Data extractor for PDF invoices",
);

/**
 * Self-hosted open source application for managing your invoices, clients and payments
 */
export const invoiceplane = mkPackage(
  nixRaw`pkgs.invoiceplane`,
  "Self-hosted open source application for managing your invoices, clients and payments",
);

/**
 * A full featured CLI system information tool
 */
export const inxi = mkPackage(
  nixRaw`pkgs.inxi`,
  "A full featured CLI system information tool",
);

/**
 * Io programming language
 */
export const io = mkPackage(
  nixRaw`pkgs.io`,
  "Io programming language",
);

/**
 * Tool to search a filesystem for indicators of compromise (IoC)
 */
export const ioc_scan = mkPackage(
  nixRaw`pkgs.ioc-scan`,
  "Tool to search a filesystem for indicators of compromise (IoC)",
);

/**
 * Tool for researching IOCs
 */
export const ioccheck = mkPackage(
  nixRaw`pkgs.ioccheck`,
  "Tool for researching IOCs",
);

/**
 * Module to extract Indicator of Compromises (IOC)
 */
export const iocextract = mkPackage(
  nixRaw`pkgs.iocextract`,
  "Module to extract Indicator of Compromises (IOC)",
);

/**
 * Lightweight C++ I/O library for POSIX operation systems
 */
export const iodash = mkPackage(
  nixRaw`pkgs.iodash`,
  "Lightweight C++ I/O library for POSIX operation systems",
);

/**
 * Tool to tunnel IPv4 data through a DNS server
 */
export const iodine = mkPackage(
  nixRaw`pkgs.iodine`,
  "Tool to tunnel IPv4 data through a DNS server",
);

/**
 * A simple yet effective way to benchmark disk IO in Linux systems
 */
export const iomelt = mkPackage(
  nixRaw`pkgs.iomelt`,
  "A simple yet effective way to benchmark disk IO in Linux systems",
);

/**
 * Modern system shell with simple (and powerful) syntax
 */
export const ion = mkPackage(
  nixRaw`pkgs.ion`,
  "Modern system shell with simple (and powerful) syntax",
);

/**
 * Tiling tabbed window manager designed with keyboard users in mind
 */
export const ion3 = mkPackage(
  nixRaw`pkgs.ion3`,
  "Tiling tabbed window manager designed with keyboard users in mind",
);

/**
 * Disk I/O latency measuring tool
 */
export const ioping = mkPackage(
  nixRaw`pkgs.ioping`,
  "Disk I/O latency measuring tool",
);

/**
 * Direct access to I/O ports from the command line
 */
export const ioport = mkPackage(
  nixRaw`pkgs.ioport`,
  "Direct access to I/O ports from the command line",
);

/**
 * A fast-paced 3D first-person shooter, a community effort to continue supporting/developing id's Quake III Arena
 */
export const ioquake3 = mkPackage(
  nixRaw`pkgs.ioquake3`,
  "A fast-paced 3D first-person shooter, a community effort to continue supporting/developing id's Quake III Arena",
);

/**
 * Parallel file system I/O performance test
 */
export const ior = mkPackage(
  nixRaw`pkgs.ior`,
  "Parallel file system I/O performance test",
);

/**
 * Game engine for Return to Castle Wolfenstein
 */
export const iortcw = mkPackage(
  nixRaw`pkgs.iortcw`,
  "Game engine for Return to Castle Wolfenstein",
);

/**
 * Single player version of game engine for Return to Castle Wolfenstein
 */
export const iortcw_sp = mkPackage(
  nixRaw`pkgs.iortcw_sp`,
  "Single player version of game engine for Return to Castle Wolfenstein",
);

/**
 * Provides an iOS cross compiler from 7.1 up to iOS-9.2 and ldid
 */
export const ios_cross_compile = mkPackage(
  nixRaw`pkgs.ios-cross-compile`,
  "Provides an iOS cross compiler from 7.1 up to iOS-9.2 and ldid",
);

/**
 * A DevTools proxy (Chrome Remote Debugging Protocol) for iOS devices (Safari Remote Web Inspector)
 */
export const ios_webkit_debug_proxy = mkPackage(
  nixRaw`pkgs.ios-webkit-debug-proxy`,
  "A DevTools proxy (Chrome Remote Debugging Protocol) for iOS devices (Safari Remote Web Inspector)",
);

/**
 * Versatile typeface for code, from code.
 */
export const iosevka = mkPackage(
  nixRaw`pkgs.iosevka`,
  "Versatile typeface for code, from code.",
);

/**
 * Versatile typeface for code, from code.
 */
export const iosevka_bin = mkPackage(
  nixRaw`pkgs.iosevka-bin`,
  "Versatile typeface for code, from code.",
);

/**
 * Simple note taking with mobile-first design and Nextcloud sync
 */
export const iotas = mkPackage(
  nixRaw`pkgs.iotas`,
  "Simple note taking with mobile-first design and Nextcloud sync",
);

  /**
   * Set of simple command line tools which allow access to
hardware device registers
   */
export const iotools = mkPackage(
  nixRaw`pkgs.iotools`,
  "Set of simple command line tools which allow access to\n      hardware device registers",
);

/**
 * A tool to find out the processes doing the most IO
 */
export const iotop = mkPackage(
  nixRaw`pkgs.iotop`,
  "A tool to find out the processes doing the most IO",
);

/**
 * iotop identifies processes that use high amount of input/output requests on your machine
 */
export const iotop_c = mkPackage(
  nixRaw`pkgs.iotop-c`,
  "iotop identifies processes that use high amount of input/output requests on your machine",
);

/**
 * IOzone Filesystem Benchmark
 */
export const iozone = mkPackage(
  nixRaw`pkgs.iozone`,
  "IOzone Filesystem Benchmark",
);

/**
 * A storage load analysis tool for OpenZFS
 */
export const ioztat = mkPackage(
  nixRaw`pkgs.ioztat`,
  "A storage load analysis tool for OpenZFS",
);

/**
 * Look up locations of host names and IP addresses
 */
export const ip2location = mkPackage(
  nixRaw`pkgs.ip2location`,
  "Look up locations of host names and IP addresses",
);

/**
 * Library to look up locations of host names and IP addresses
 */
export const ip2location_c = mkPackage(
  nixRaw`pkgs.ip2location-c`,
  "Library to look up locations of host names and IP addresses",
);

/**
 * Turn IP sockets into Unix domain sockets
 */
export const ip2unix = mkPackage(
  nixRaw`pkgs.ip2unix`,
  "Turn IP sockets into Unix domain sockets",
);

/**
 * Apple device USB charging utility for Linux
 */
export const ipad_charge = mkPackage(
  nixRaw`pkgs.ipad_charge`,
  "Apple device USB charging utility for Linux",
);

/**
 * Japanese font package with Mincho and Gothic fonts
 */
export const ipaexfont = mkPackage(
  nixRaw`pkgs.ipaexfont`,
  "Japanese font package with Mincho and Gothic fonts",
);

/**
 * Japanese font package with Mincho and Gothic fonts
 */
export const ipafont = mkPackage(
  nixRaw`pkgs.ipafont`,
  "Japanese font package with Mincho and Gothic fonts",
);

/**
 * Command-line tool that allows searching and downloading app packages (known as ipa files) from the iOS App Store
 */
export const ipatool = mkPackage(
  nixRaw`pkgs.ipatool`,
  "Command-line tool that allows searching and downloading app packages (known as ipa files) from the iOS App Store",
);

/**
 * A high-tech ttyrec player for Unix
 */
export const ipbt = mkPackage(
  nixRaw`pkgs.ipbt`,
  "A high-tech ttyrec player for Unix",
);

/**
 * Simple IP network calculator
 */
export const ipcalc = mkPackage(
  nixRaw`pkgs.ipcalc`,
  "Simple IP network calculator",
);

/**
 * An editor for drawing figures
 */
export const ipe = mkPackage(
  nixRaw`pkgs.ipe`,
  "An editor for drawing figures",
);

/**
 * Tool to measure IP bandwidth using UDP or TCP
 */
export const iperf = mkPackage(
  nixRaw`pkgs.iperf`,
  "Tool to measure IP bandwidth using UDP or TCP",
);

/**
 * Tool to measure IP bandwidth using UDP or TCP
 */
export const iperf2 = mkPackage(
  nixRaw`pkgs.iperf2`,
  "Tool to measure IP bandwidth using UDP or TCP",
);

/**
 * Tool to measure IP bandwidth using UDP or TCP
 */
export const iperf3 = mkPackage(
  nixRaw`pkgs.iperf3`,
  "Tool to measure IP bandwidth using UDP or TCP",
);

/**
 * A iperf3 client and server wrapper for dynamic server ports
 */
export const iperf3d = mkPackage(
  nixRaw`pkgs.iperf3d`,
  "A iperf3 client and server wrapper for dynamic server ports",
);

/**
 * Neofetch but for ip addresses
 */
export const ipfetch = mkPackage(
  nixRaw`pkgs.ipfetch`,
  "Neofetch but for ip addresses",
);

/**
 * Allocate, replicate, and track Pins across a cluster of IPFS daemons
 */
export const ipfs_cluster = mkPackage(
  nixRaw`pkgs.ipfs-cluster`,
  "Allocate, replicate, and track Pins across a cluster of IPFS daemons",
);

/**
 * A minimal CLI tool to upload files and directories to IPFS via Infura's IPFS or another API endpoint
 */
export const ipfs_upload_client = mkPackage(
  nixRaw`pkgs.ipfs-upload-client`,
  "A minimal CLI tool to upload files and directories to IPFS via Infura's IPFS or another API endpoint",
);

/**
 * Retrieve files over IPFS and save them locally
 */
export const ipget = mkPackage(
  nixRaw`pkgs.ipget`,
  "Retrieve files over IPFS and save them locally",
);

/**
 * Extract, defang, resolve names and IPs from text
 */
export const ipgrep = mkPackage(
  nixRaw`pkgs.ipgrep`,
  "Extract, defang, resolve names and IPs from text",
);

/**
 * Command Line Interface for the IPinfo API
 */
export const ipinfo = mkPackage(
  nixRaw`pkgs.ipinfo`,
  "Command Line Interface for the IPinfo API",
);

/**
 * Supermicro IPMI configuration tool
 */
export const ipmicfg = mkPackage(
  nixRaw`pkgs.ipmicfg`,
  "Supermicro IPMI configuration tool",
);

/**
 * Command-line interface to IPMI-enabled devices
 */
export const ipmitool = mkPackage(
  nixRaw`pkgs.ipmitool`,
  "Command-line interface to IPMI-enabled devices",
);

/**
 * An easy-to-use IPMI server management utility
 */
export const ipmiutil = mkPackage(
  nixRaw`pkgs.ipmiutil`,
  "An easy-to-use IPMI server management utility",
);

export const ipmiview = mkPackage(
  nixRaw`pkgs.ipmiview`,
  "",
);

/**
 * A software package for large-scale nonlinear optimization
 */
export const ipopt = mkPackage(
  nixRaw`pkgs.ipopt`,
  "A software package for large-scale nonlinear optimization",
);

/**
 * Daemon to use the IPP everywhere protocol with USB printers
 */
export const ipp_usb = mkPackage(
  nixRaw`pkgs.ipp-usb`,
  "Daemon to use the IPP everywhere protocol with USB printers",
);

/**
 * manage IP ranges
 */
export const iprange = mkPackage(
  nixRaw`pkgs.iprange`,
  "manage IP ranges",
);

/**
 * A collection of utilities for controlling TCP/IP networking and traffic control in Linux
 */
export const iproute2 = mkPackage(
  nixRaw`pkgs.iproute2`,
  "A collection of utilities for controlling TCP/IP networking and traffic control in Linux",
);

/**
 * An automated first-order logic theorem prover
 */
export const iprover = mkPackage(
  nixRaw`pkgs.iprover`,
  "An automated first-order logic theorem prover",
);

/**
 * Angry IP Scanner - fast and friendly network scanner
 */
export const ipscan = mkPackage(
  nixRaw`pkgs.ipscan`,
  "Angry IP Scanner - fast and friendly network scanner",
);

/**
 * Administration tool for IP sets
 */
export const ipset = mkPackage(
  nixRaw`pkgs.ipset`,
  "Administration tool for IP sets",
);

/**
 * A program to configure the Linux IP packet filtering ruleset
 */
export const iptables = mkPackage(
  nixRaw`pkgs.iptables`,
  "A program to configure the Linux IP packet filtering ruleset",
);

/**
 * A program to configure the Linux IP packet filtering ruleset
 */
export const iptables_legacy = mkPackage(
  nixRaw`pkgs.iptables-legacy`,
  "A program to configure the Linux IP packet filtering ruleset",
);

/**
 * A program to configure the Linux IP packet filtering ruleset
 */
export const iptables_nftables_compat = mkPackage(
  nixRaw`pkgs.iptables-nftables-compat`,
  "A program to configure the Linux IP packet filtering ruleset",
);

/**
 * A console-based network monitoring utility (fork of iptraf)
 */
export const iptraf_ng = mkPackage(
  nixRaw`pkgs.iptraf-ng`,
  "A console-based network monitoring utility (fork of iptraf)",
);

/**
 * Userspace daemon for Intel Precise Touch & Stylus
 */
export const iptsd = mkPackage(
  nixRaw`pkgs.iptsd`,
  "Userspace daemon for Intel Precise Touch & Stylus",
);

/**
 * Conntrack top like tool
 */
export const iptstate = mkPackage(
  nixRaw`pkgs.iptstate`,
  "Conntrack top like tool",
);

/**
 * Tiger Lake IPU firmware and proprietary image processing libraries
 */
export const ipu6_camera_bin = mkPackage(
  nixRaw`pkgs.ipu6-camera-bin`,
  "Tiger Lake IPU firmware and proprietary image processing libraries",
);

/**
 * HAL for processing of images in userspace
 */
export const ipu6_camera_hal = mkPackage(
  nixRaw`pkgs.ipu6-camera-hal`,
  "HAL for processing of images in userspace",
);

/**
 * Alder Lake IPU firmware and proprietary image processing libraries
 */
export const ipu6ep_camera_bin = mkPackage(
  nixRaw`pkgs.ipu6ep-camera-bin`,
  "Alder Lake IPU firmware and proprietary image processing libraries",
);

/**
 * HAL for processing of images in userspace
 */
export const ipu6ep_camera_hal = mkPackage(
  nixRaw`pkgs.ipu6ep-camera-hal`,
  "HAL for processing of images in userspace",
);

/**
 * A set of small useful utilities for Linux networking
 */
export const iputils = mkPackage(
  nixRaw`pkgs.iputils`,
  "A set of small useful utilities for Linux networking",
);

/**
 * Calculate/manipulate (not only) IPv6 addresses
 */
export const ipv6calc = mkPackage(
  nixRaw`pkgs.ipv6calc`,
  "Calculate/manipulate (not only) IPv6 addresses",
);

/**
 * Linux Virtual Server support programs
 */
export const ipvsadm = mkPackage(
  nixRaw`pkgs.ipvsadm`,
  "Linux Virtual Server support programs",
);

/**
 * Network boot firmware
 */
export const ipxe = mkPackage(
  nixRaw`pkgs.ipxe`,
  "Network boot firmware",
);

/**
 * Efficient and versatile phylogenomic software by maximum likelihood
 */
export const iqtree = mkPackage(
  nixRaw`pkgs.iqtree`,
  "Efficient and versatile phylogenomic software by maximum likelihood",
);

/**
 * Indexed queue
 */
export const iqueue = mkPackage(
  nixRaw`pkgs.iqueue`,
  "Indexed queue",
);

/**
 * Iran Supreme Council of Information and Communication Technology (SCICT) standard Persian fonts series
 */
export const ir_standard_fonts = mkPackage(
  nixRaw`pkgs.ir-standard-fonts`,
  "Iran Supreme Council of Information and Communication Technology (SCICT) standard Persian fonts series",
);

/**
 * Send events to IRC channels from scripts and other applications
 */
export const irccat = mkPackage(
  nixRaw`pkgs.irccat`,
  "Send events to IRC channels from scripts and other applications",
);

/**
 * A desktop client for IRCCloud
 */
export const irccloud = mkPackage(
  nixRaw`pkgs.irccloud`,
  "A desktop client for IRCCloud",
);

/**
 * An IPv6-capable IRC server
 */
export const ircdHybrid = mkPackage(
  nixRaw`pkgs.ircdHybrid`,
  "An IPv6-capable IRC server",
);

/**
 * ircdog is a simple wrapper over the raw IRC protocol that can respond to pings, and interprets formatting codes
 */
export const ircdog = mkPackage(
  nixRaw`pkgs.ircdog`,
  "ircdog is a simple wrapper over the raw IRC protocol that can respond to pings, and interprets formatting codes",
);

/**
 * A Terminal Client for Redis with AutoCompletion and Syntax Highlighting
 */
export const iredis = mkPackage(
  nixRaw`pkgs.iredis`,
  "A Terminal Client for Redis with AutoCompletion and Syntax Highlighting",
);

/**
 * IRC client that runs as a daemon accepting notification requests
 */
export const irker = mkPackage(
  nixRaw`pkgs.irker`,
  "IRC client that runs as a daemon accepting notification requests",
);

/**
 * Integrated Rule-Oriented Data System (iRODS)
 */
export const irods = mkPackage(
  nixRaw`pkgs.irods`,
  "Integrated Rule-Oriented Data System (iRODS)",
);

/**
 * Integrated Rule-Oriented Data System (iRODS) CLI clients
 */
export const irods_icommands = mkPackage(
  nixRaw`pkgs.irods-icommands`,
  "Integrated Rule-Oriented Data System (iRODS) CLI clients",
);

/**
 * Efficient IPFS for the whole world right now
 */
export const iroh = mkPackage(
  nixRaw`pkgs.iroh`,
  "Efficient IPFS for the whole world right now",
);

/**
 * Customizable gtk-layer-shell wlroots/sway bar written in Rust
 */
export const ironbar = mkPackage(
  nixRaw`pkgs.ironbar`,
  "Customizable gtk-layer-shell wlroots/sway bar written in Rust",
);

/**
 * A client for OpenStack bare metal provisioning API, includes a Python module (ironicclient) and CLI (baremetal).
 */
export const ironicclient = mkPackage(
  nixRaw`pkgs.ironicclient`,
  "A client for OpenStack bare metal provisioning API, includes a Python module (ironicclient) and CLI (baremetal).",
);

/**
 * A fork of the QuakeSpasm engine for iD software's Quake
 */
export const ironwail = mkPackage(
  nixRaw`pkgs.ironwail`,
  "A fork of the QuakeSpasm engine for iD software's Quake",
);

/**
 * The server part of irony
 */
export const irony_server = mkPackage(
  nixRaw`pkgs.irony-server`,
  "The server part of irony",
);

/**
 * Brazillian government application for reporting income tax
 */
export const irpf = mkPackage(
  nixRaw`pkgs.irpf`,
  "Brazillian government application for reporting income tax",
);

/**
 * A daemon to help balance the cpu load generated by interrupts across all of a systems cpus
 */
export const irqbalance = mkPackage(
  nixRaw`pkgs.irqbalance`,
  "A daemon to help balance the cpu load generated by interrupts across all of a systems cpus",
);

/**
 * An Internet Routing Registry database server, processing IRR objects in the RPSL format
 */
export const irrd = mkPackage(
  nixRaw`pkgs.irrd`,
  "An Internet Routing Registry database server, processing IRR objects in the RPSL format",
);

/**
 * Open source high performance realtime 3D engine written in C++
 */
export const irrlicht = mkPackage(
  nixRaw`pkgs.irrlicht`,
  "Open source high performance realtime 3D engine written in C++",
);

/**
 * Minetest project's fork of Irrlicht, a realtime 3D engine written in C++
 */
export const irrlichtmt = mkPackage(
  nixRaw`pkgs.irrlichtmt`,
  "Minetest project's fork of Irrlicht, a realtime 3D engine written in C++",
);

/**
 * Terminal based IRC client
 */
export const irssi = mkPackage(
  nixRaw`pkgs.irssi`,
  "Terminal based IRC client",
);

/**
 * Ruby kernel for Jupyter
 */
export const iruby = mkPackage(
  nixRaw`pkgs.iruby`,
  "Ruby kernel for Jupyter",
);

/**
 * A collection of optimised low-level functions targeting storage applications
 */
export const isa_l = mkPackage(
  nixRaw`pkgs.isa-l`,
  "A collection of optimised low-level functions targeting storage applications",
);

/**
 * A generic proof assistant
 */
export const isabelle = mkPackage(
  nixRaw`pkgs.isabelle`,
  "A generic proof assistant",
);

/**
 * A numeric sequence editor
 */
export const ised = mkPackage(
  nixRaw`pkgs.ised`,
  "A numeric sequence editor",
);

/**
 * A library for manipulating sets and relations of integer points bounded by linear constraints
 */
export const isl = mkPackage(
  nixRaw`pkgs.isl`,
  "A library for manipulating sets and relations of integer points bounded by linear constraints",
);

/**
 * A library for manipulating sets and relations of integer points bounded by linear constraints
 */
export const isl_0_11 = mkPackage(
  nixRaw`pkgs.isl_0_11`,
  "A library for manipulating sets and relations of integer points bounded by linear constraints",
);

/**
 * A library for manipulating sets and relations of integer points bounded by linear constraints
 */
export const isl_0_14 = mkPackage(
  nixRaw`pkgs.isl_0_14`,
  "A library for manipulating sets and relations of integer points bounded by linear constraints",
);

/**
 * A library for manipulating sets and relations of integer points bounded by linear constraints
 */
export const isl_0_17 = mkPackage(
  nixRaw`pkgs.isl_0_17`,
  "A library for manipulating sets and relations of integer points bounded by linear constraints",
);

/**
 * A library for manipulating sets and relations of integer points bounded by linear constraints
 */
export const isl_0_20 = mkPackage(
  nixRaw`pkgs.isl_0_20`,
  "A library for manipulating sets and relations of integer points bounded by linear constraints",
);

/**
 * A library for manipulating sets and relations of integer points bounded by linear constraints
 */
export const isl_0_24 = mkPackage(
  nixRaw`pkgs.isl_0_24`,
  "A library for manipulating sets and relations of integer points bounded by linear constraints",
);

/**
 * 248 country flag SVG & PNG icons with different icon styles
 */
export const iso_flags = mkPackage(
  nixRaw`pkgs.iso-flags`,
  "248 country flag SVG & PNG icons with different icon styles",
);

/**
 * Various ISO codes packaged as XML files
 */
export const isocodes = mkPackage(
  nixRaw`pkgs.isocodes`,
  "Various ISO codes packaged as XML files",
);

/**
 * ISO Image Writer is a tool to write a .iso file to a USB disk.
 */
export const isoimagewriter = mkPackage(
  nixRaw`pkgs.isoimagewriter`,
  "ISO Image Writer is a tool to write a .iso file to a USB disk.",
);

/**
 * Sandbox for securely executing untrusted programs
 */
export const isolate = mkPackage(
  nixRaw`pkgs.isolate`,
  "Sandbox for securely executing untrusted programs",
);

/**
 * Verify size of ISO 9660 image against Volume Descriptor fields
 */
export const isolyzer = mkPackage(
  nixRaw`pkgs.isolyzer`,
  "Verify size of ISO 9660 image against Volume Descriptor fields",
);

/**
 * Utilities for working with md5sum implanted in ISO images
 */
export const isomd5sum = mkPackage(
  nixRaw`pkgs.isomd5sum`,
  "Utilities for working with md5sum implanted in ISO images",
);

/**
 * A Python utility / library to sort Python imports
 */
export const isort = mkPackage(
  nixRaw`pkgs.isort`,
  "A Python utility / library to sort Python imports",
);

/**
 * Intel 'Single Program, Multiple Data' Compiler, a vectorised language
 */
export const ispc = mkPackage(
  nixRaw`pkgs.ispc`,
  "Intel 'Single Program, Multiple Data' Compiler, a vectorised language",
);

/**
 * An interactive spell-checking program for Unix
 */
export const ispell = mkPackage(
  nixRaw`pkgs.ispell`,
  "An interactive spell-checking program for Unix",
);

/**
 * Spiking neural interface between iCub and a spiking neural simulator
 */
export const ispike = mkPackage(
  nixRaw`pkgs.ispike`,
  "Spiking neural interface between iCub and a spiking neural simulator",
);

/**
 * A commenting server similar to Disqus
 */
export const isso = mkPackage(
  nixRaw`pkgs.isso`,
  "A commenting server similar to Disqus",
);

/**
 * Istio configuration command line utility for service operators to debug and diagnose their Istio mesh
 */
export const istioctl = mkPackage(
  nixRaw`pkgs.istioctl`,
  "Istio configuration command line utility for service operators to debug and diagnose their Istio mesh",
);

/**
 * Free IMAP and MailDir mailbox synchronizer
 */
export const isync = mkPackage(
  nixRaw`pkgs.isync`,
  "Free IMAP and MailDir mailbox synchronizer",
);

/**
 * Simple and lightweight configuration management tool inspired by Chef
 */
export const itamae = mkPackage(
  nixRaw`pkgs.itamae`,
  "Simple and lightweight configuration management tool inspired by Chef",
);

/**
 * The best way to play itch.io games
 */
export const itch = mkPackage(
  nixRaw`pkgs.itch`,
  "The best way to play itch.io games",
);

/**
 * itch.io download tool
 */
export const itchiodl = mkPackage(
  nixRaw`pkgs.itchiodl`,
  "itch.io download tool",
);

/**
 * itd is a daemon to interact with the PineTime running InfiniTime
 */
export const itd = mkPackage(
  nixRaw`pkgs.itd`,
  "itd is a daemon to interact with the PineTime running InfiniTime",
);

/**
 * Commands to control ite-backlight devices
 */
export const ite_backlight = mkPackage(
  nixRaw`pkgs.ite-backlight`,
  "Commands to control ite-backlight devices",
);

/**
 * A replacement for Terminal and the successor to iTerm
 */
export const iterm2 = mkPackage(
  nixRaw`pkgs.iterm2`,
  "A replacement for Terminal and the successor to iTerm",
);

/**
 * Insight Segmentation and Registration Toolkit
 */
export const itk = mkPackage(
  nixRaw`pkgs.itk`,
  "Insight Segmentation and Registration Toolkit",
);

/**
 * Insight Segmentation and Registration Toolkit
 */
export const itk_5 = mkPackage(
  nixRaw`pkgs.itk_5`,
  "Insight Segmentation and Registration Toolkit",
);

/**
 * Insight Segmentation and Registration Toolkit
 */
export const itk_5_2 = mkPackage(
  nixRaw`pkgs.itk_5_2`,
  "Insight Segmentation and Registration Toolkit",
);

/**
 * Mega-widget toolkit for incr Tk
 */
export const itktcl = mkPackage(
  nixRaw`pkgs.itktcl`,
  "Mega-widget toolkit for incr Tk",
);

/**
 * Tools for analyzing ITM traces
 */
export const itm_tools = mkPackage(
  nixRaw`pkgs.itm-tools`,
  "Tools for analyzing ITM traces",
);

/**
 * IT++ is a C++ library of mathematical, signal processing and communication classes and functions
 */
export const itpp = mkPackage(
  nixRaw`pkgs.itpp`,
  "IT++ is a C++ library of mathematical, signal processing and communication classes and functions",
);

/**
 * XML to PO and back again
 */
export const itstool = mkPackage(
  nixRaw`pkgs.itstool`,
  "XML to PO and back again",
);

/**
 * Improved software detection and extraction of ITS1 and ITS2 from ribosomal ITS sequences of fungi and other eukaryotes for use in environmental sequencing
 */
export const itsx = mkPackage(
  nixRaw`pkgs.itsx`,
  "Improved software detection and extraction of ITS1 and ITS2 from ribosomal ITS sequences of fungi and other eukaryotes for use in environmental sequencing",
);

/**
 * Intel® 64 and IA-32 processor microcode tool
 */
export const iucode_tool = mkPackage(
  nixRaw`pkgs.iucode-tool`,
  "Intel® 64 and IA-32 processor microcode tool",
);

/**
 * InterViews graphical library for Neuron
 */
export const iv = mkPackage(
  nixRaw`pkgs.iv`,
  "InterViews graphical library for Neuron",
);

/**
 * Graphical roguelike game
 */
export const ivan = mkPackage(
  nixRaw`pkgs.ivan`,
  "Graphical roguelike game",
);

/**
 * Official IVPN Desktop app
 */
export const ivpn = mkPackage(
  nixRaw`pkgs.ivpn`,
  "Official IVPN Desktop app",
);

/**
 * Official IVPN Desktop app
 */
export const ivpn_service = mkPackage(
  nixRaw`pkgs.ivpn-service`,
  "Official IVPN Desktop app",
);

/**
 * Firmware binaries for the Intel Vision Sensing Controller
 */
export const ivsc_firmware = mkPackage(
  nixRaw`pkgs.ivsc-firmware`,
  "Firmware binaries for the Intel Vision Sensing Controller",
);

/**
 * ivy, an APL-like calculator
 */
export const ivy = mkPackage(
  nixRaw`pkgs.ivy`,
  "ivy, an APL-like calculator",
);

/**
 * Tool to use nl80211
 */
export const iw = mkPackage(
  nixRaw`pkgs.iw`,
  "Tool to use nl80211",
);

/**
 * Wireless daemon for Linux
 */
export const iwd = mkPackage(
  nixRaw`pkgs.iwd`,
  "Wireless daemon for Linux",
);

/**
 * Lightweight, graphical wifi management utility for Linux
 */
export const iwgtk = mkPackage(
  nixRaw`pkgs.iwgtk`,
  "Lightweight, graphical wifi management utility for Linux",
);

/**
 * A two-element sans-serif typeface, created by Małgorzata Budyta
 */
export const iwona = mkPackage(
  nixRaw`pkgs.iwona`,
  "A two-element sans-serif typeface, created by Małgorzata Budyta",
);

/**
 * Command line pastebin
 */
export const ix = mkPackage(
  nixRaw`pkgs.ix`,
  "Command line pastebin",
);

/**
 * J programming language, an ASCII-based APL successor
 */
export const j = mkPackage(
  nixRaw`pkgs.j`,
  "J programming language, an ASCII-based APL successor",
);

/**
 * Jinja2 Command-Line Tool
 */
export const j2cli = mkPackage(
  nixRaw`pkgs.j2cli`,
  "Jinja2 Command-Line Tool",
);

/**
 * A wrapper for dmenu that recognize .desktop files
 */
export const j4_dmenu_desktop = mkPackage(
  nixRaw`pkgs.j4-dmenu-desktop`,
  "A wrapper for dmenu that recognize .desktop files",
);

/**
 * Jagged Alliance 2, with community fixes
 */
export const ja2_stracciatella = mkPackage(
  nixRaw`pkgs.ja2-stracciatella`,
  "Jagged Alliance 2, with community fixes",
);

/**
 * JACK and ALSA Audio Analyser
 */
export const jaaa = mkPackage(
  nixRaw`pkgs.jaaa`,
  "JACK and ALSA Audio Analyser",
);

/**
 * A high-capacity 2D color bar code (library)
 */
export const jabcode = mkPackage(
  nixRaw`pkgs.jabcode`,
  "A high-capacity 2D color bar code (library)",
);

/**
 * A high-capacity 2D color bar code (reader)
 */
export const jabcode_reader = mkPackage(
  nixRaw`pkgs.jabcode-reader`,
  "A high-capacity 2D color bar code (reader)",
);

/**
 * A high-capacity 2D color bar code (writer)
 */
export const jabcode_writer = mkPackage(
  nixRaw`pkgs.jabcode-writer`,
  "A high-capacity 2D color bar code (writer)",
);

/**
 * Open source bibliography reference manager
 */
export const jabref = mkPackage(
  nixRaw`pkgs.jabref`,
  "Open source bibliography reference manager",
);

/**
 * Functional, expression-oriented data processing language
 */
export const jacinda = mkPackage(
  nixRaw`pkgs.jacinda`,
  "Functional, expression-oriented data processing language",
);

/**
 * JACK audio connection kit
 */
export const jack1 = mkPackage(
  nixRaw`pkgs.jack1`,
  "JACK audio connection kit",
);

/**
 * JACK audio connection kit, version 2 with jackdbus
 */
export const jack2 = mkPackage(
  nixRaw`pkgs.jack2`,
  "JACK audio connection kit, version 2 with jackdbus",
);

/**
 * Tiny application that reacts on port registrations by clients and connects them
 */
export const jack_autoconnect = mkPackage(
  nixRaw`pkgs.jack_autoconnect`,
  "Tiny application that reacts on port registrations by clients and connects them",
);

/**
 * A program for recording soundfiles with jack
 */
export const jack_capture = mkPackage(
  nixRaw`pkgs.jack_capture`,
  "A program for recording soundfiles with jack",
);

/**
 * Official examples and tools from the JACK project
 */
export const jack_example_tools = mkPackage(
  nixRaw`pkgs.jack-example-tools`,
  "Official examples and tools from the JACK project",
);

/**
 * A simple waveform viewer for JACK
 */
export const jack_oscrolloscope = mkPackage(
  nixRaw`pkgs.jack_oscrolloscope`,
  "A simple waveform viewer for JACK",
);

/**
 * An effects "rack" for the JACK low latency audio API
 */
export const jack_rack = mkPackage(
  nixRaw`pkgs.jack_rack`,
  "An effects \"rack\" for the JACK low latency audio API",
);

/**
 * API Support for your favorite torrent trackers
 */
export const jackett = mkPackage(
  nixRaw`pkgs.jackett`,
  "API Support for your favorite torrent trackers",
);

/**
 * minimalistic secure XMPP client in OCaml
 */
export const jackline = mkPackage(
  nixRaw`pkgs.jackline`,
  "minimalistic secure XMPP client in OCaml",
);

/**
 * Console jack loudness meter
 */
export const jackmeter = mkPackage(
  nixRaw`pkgs.jackmeter`,
  "Console jack loudness meter",
);

/**
 * Matrix-Mixer for the Jack-Audio-connection-Kit
 */
export const jackmix = mkPackage(
  nixRaw`pkgs.jackmix`,
  "Matrix-Mixer for the Jack-Audio-connection-Kit",
);

/**
 * Matrix-Mixer for the Jack-Audio-connection-Kit
 */
export const jackmix_jack1 = mkPackage(
  nixRaw`pkgs.jackmix_jack1`,
  "Matrix-Mixer for the Jack-Audio-connection-Kit",
);

/**
 * Multi-machine audio network performance over the Internet
 */
export const jacktrip = mkPackage(
  nixRaw`pkgs.jacktrip`,
  "Multi-machine audio network performance over the Internet",
);

/**
 * A free code coverage library for Java
 */
export const jacoco = mkPackage(
  nixRaw`pkgs.jacoco`,
  "A free code coverage library for Java",
);

/**
 * James Clark's DSSSL Engine
 */
export const jade = mkPackage(
  nixRaw`pkgs.jade`,
  "James Clark's DSSSL Engine",
);

/**
 * Dex to Java decompiler
 */
export const jadx = mkPackage(
  nixRaw`pkgs.jadx`,
  "Dex to Java decompiler",
);

/**
 * Tool for automated Web application testing
 */
export const jaeles = mkPackage(
  nixRaw`pkgs.jaeles`,
  "Tool for automated Web application testing",
);

/**
 * Just Another Gibbs Sampler
 */
export const jags = mkPackage(
  nixRaw`pkgs.jags`,
  "Just Another Gibbs Sampler",
);

/**
 * JavaScript build tool, similar to Make or Rake
 */
export const jake = mkPackage(
  nixRaw`pkgs.jake`,
  "JavaScript build tool, similar to Make or Rake",
);

/**
 * A simple but fully featured LV2 host for Jack
 */
export const jalv = mkPackage(
  nixRaw`pkgs.jalv`,
  "A simple but fully featured LV2 host for Jack",
);

/**
 * Just Another Make
 */
export const jam = mkPackage(
  nixRaw`pkgs.jam`,
  "Just Another Make",
);

/**
 * JAMA/C++ Linear Algebra Package: Java-like matrix C++ templates
 */
export const jama = mkPackage(
  nixRaw`pkgs.jama`,
  "JAMA/C++ Linear Algebra Package: Java-like matrix C++ templates",
);

/**
 * Free Runtime Environment for Java Applications
 */
export const jameica = mkPackage(
  nixRaw`pkgs.jameica`,
  "Free Runtime Environment for Java Applications",
);

/**
 * An audio effect processor for PipeWire clients
 */
export const jamesdsp = mkPackage(
  nixRaw`pkgs.jamesdsp`,
  "An audio effect processor for PipeWire clients",
);

/**
 * An audio effect processor for PipeWire clients
 */
export const jamesdsp_pulse = mkPackage(
  nixRaw`pkgs.jamesdsp-pulse`,
  "An audio effect processor for PipeWire clients",
);

/**
 * The free and universal communication platform that respects the privacy and freedoms of its users
 */
export const jami = mkPackage(
  nixRaw`pkgs.jami`,
  "The free and universal communication platform that respects the privacy and freedoms of its users",
);

/**
 * JACK Audio Mastering interface
 */
export const jamin = mkPackage(
  nixRaw`pkgs.jamin`,
  "JACK Audio Mastering interface",
);

/**
 * Enables musicians to perform real-time jam sessions over the internet
 */
export const jamulus = mkPackage(
  nixRaw`pkgs.jamulus`,
  "Enables musicians to perform real-time jam sessions over the internet",
);

/**
 * Janet programming language
 */
export const janet = mkPackage(
  nixRaw`pkgs.janet`,
  "Janet programming language",
);

/**
 * C library for encoding, decoding and manipulating JSON data
 */
export const jansson = mkPackage(
  nixRaw`pkgs.jansson`,
  "C library for encoding, decoding and manipulating JSON data",
);

/**
 * General purpose WebRTC server
 */
export const janus_gateway = mkPackage(
  nixRaw`pkgs.janus-gateway`,
  "General purpose WebRTC server",
);

/**
 * An open-source, distributed graph database
 */
export const janusgraph = mkPackage(
  nixRaw`pkgs.janusgraph`,
  "An open-source, distributed graph database",
);

/**
 * A 'perceptual' or 'psychoacoustic' audio spectrum analyser for JACK and ALSA
 */
export const japa = mkPackage(
  nixRaw`pkgs.japa`,
  "A 'perceptual' or 'psychoacoustic' audio spectrum analyser for JACK and ALSA",
);

/**
 * A jq clone focused on correctness, speed and simplicity
 */
export const jaq = mkPackage(
  nixRaw`pkgs.jaq`,
  "A jq clone focused on correctness, speed and simplicity",
);

/**
 * Fast Jaro and Jaro-Winkler distance
 */
export const jarowinkler_cpp = mkPackage(
  nixRaw`pkgs.jarowinkler-cpp`,
  "Fast Jaro and Jaro-Winkler distance",
);

/**
 * An assembler for the Java Virtual Machine
 */
export const jasmin = mkPackage(
  nixRaw`pkgs.jasmin`,
  "An assembler for the Java Virtual Machine",
);

/**
 * A workbench for high-assurance and high-speed cryptography
 */
export const jasmin_compiler = mkPackage(
  nixRaw`pkgs.jasmin-compiler`,
  "A workbench for high-assurance and high-speed cryptography",
);

/**
 * Image processing/coding toolkit
 */
export const jasper = mkPackage(
  nixRaw`pkgs.jasper`,
  "Image processing/coding toolkit",
);

/**
 * LALR parser generator for Java
 */
export const javaCup = mkPackage(
  nixRaw`pkgs.javaCup`,
  "LALR parser generator for Java",
);

/**
 * A Java language server based on v3.0 of the protocol and implemented using the Java compiler API
 */
export const java_language_server = mkPackage(
  nixRaw`pkgs.java-language-server`,
  "A Java language server based on v3.0 of the protocol and implemented using the Java compiler API",
);

/**
 * Enables a Java Application to be run as a Windows Service or Unix Daemon
 */
export const java_service_wrapper = mkPackage(
  nixRaw`pkgs.java-service-wrapper`,
  "Enables a Java Application to be run as a Windows Service or Unix Daemon",
);

/**
 * Official development kit by Oracle for programming for the Java Card platform
 */
export const javacard_devkit = mkPackage(
  nixRaw`pkgs.javacard-devkit`,
  "Official development kit by Oracle for programming for the Java Card platform",
);

/**
 * A parser generator for building parsers from grammars
 */
export const javacc = mkPackage(
  nixRaw`pkgs.javacc`,
  "A parser generator for building parsers from grammars",
);

/**
 * JavaScript and TypeScript code intelligence through the Language Server Protocol
 */
export const javascript_typescript_langserver = mkPackage(
  nixRaw`pkgs.javascript-typescript-langserver`,
  "JavaScript and TypeScript code intelligence through the Language Server Protocol",
);

/**
 * A Wayland compositor written in Rust
 */
export const jay = mkPackage(
  nixRaw`pkgs.jay`,
  "A Wayland compositor written in Rust",
);

/**
 * Open-source Jazz Jackrabbit 2 reimplementation
 */
export const jazz2 = mkPackage(
  nixRaw`pkgs.jazz2`,
  "Open-source Jazz Jackrabbit 2 reimplementation",
);

/**
 * Assets needed for jazz2
 */
export const jazz2_content = mkPackage(
  nixRaw`pkgs.jazz2-content`,
  "Assets needed for jazz2",
);

/**
 * A command-line utility that generates documentation for Swift or Objective-C
 */
export const jazzy = mkPackage(
  nixRaw`pkgs.jazzy`,
  "A command-line utility that generates documentation for Swift or Objective-C",
);

/**
 * Java based, open source, static site/blog generator for developers & designers
 */
export const jbake = mkPackage(
  nixRaw`pkgs.jbake`,
  "Java based, open source, static site/blog generator for developers & designers",
);

/**
 * Run java as scripts anywhere
 */
export const jbang = mkPackage(
  nixRaw`pkgs.jbang`,
  "Run java as scripts anywhere",
);

/**
 * Decoder implementation of the JBIG2 image compression format
 */
export const jbig2dec = mkPackage(
  nixRaw`pkgs.jbig2dec`,
  "Decoder implementation of the JBIG2 image compression format",
);

/**
 * Encoder for the JBIG2 image compression format
 */
export const jbig2enc = mkPackage(
  nixRaw`pkgs.jbig2enc`,
  "Encoder for the JBIG2 image compression format",
);

/**
 * A software implementation of the JBIG1 data compression standard
 */
export const jbigkit = mkPackage(
  nixRaw`pkgs.jbigkit`,
  "A software implementation of the JBIG1 data compression standard",
);

/**
 * Parser & analyser for Lojban
 */
export const jbofihe = mkPackage(
  nixRaw`pkgs.jbofihe`,
  "Parser & analyser for Lojban",
);

/**
 * Open Source J2EE application server
 */
export const jboss = mkPackage(
  nixRaw`pkgs.jboss`,
  "Open Source J2EE application server",
);

/**
 * MySQL Connector/J
 */
export const jboss_mysql_jdbc = mkPackage(
  nixRaw`pkgs.jboss_mysql_jdbc`,
  "MySQL Connector/J",
);

/**
 * The next-generation genome browser
 */
export const jbrowse = mkPackage(
  nixRaw`pkgs.jbrowse`,
  "The next-generation genome browser",
);

/**
 * This tool serializes the output of popular command line tools and filetypes to structured JSON output
 */
export const jc = mkPackage(
  nixRaw`pkgs.jc`,
  "This tool serializes the output of popular command line tools and filetypes to structured JSON output",
);

/**
 * Jalali calendar is a small and portable free software library to manipulate date and time in Jalali calendar system
 */
export const jcal = mkPackage(
  nixRaw`pkgs.jcal`,
  "Jalali calendar is a small and portable free software library to manipulate date and time in Jalali calendar system",
);

/**
 * Jenkins CLI allows you to manage your Jenkins in an easy way
 */
export const jcli = mkPackage(
  nixRaw`pkgs.jcli`,
  "Jenkins CLI allows you to manage your Jenkins in an easy way",
);

/**
 * A JACK client and audio file convolver with reverb samples
 */
export const jconvolver = mkPackage(
  nixRaw`pkgs.jconvolver`,
  "A JACK client and audio file convolver with reverb samples",
);

/**
 * Simple command line wrapper around JD Core Java Decompiler project
 */
export const jd_cli = mkPackage(
  nixRaw`pkgs.jd-cli`,
  "Simple command line wrapper around JD Core Java Decompiler project",
);

/**
 * Commandline utility and Go library for diffing and patching JSON values
 */
export const jd_diff_patch = mkPackage(
  nixRaw`pkgs.jd-diff-patch`,
  "Commandline utility and Go library for diffing and patching JSON values",
);

/**
 * Fast Java Decompiler with powerful GUI
 */
export const jd_gui = mkPackage(
  nixRaw`pkgs.jd-gui`,
  "Fast Java Decompiler with powerful GUI",
);

/**
 * Traverses Java class file directories and generates design quality metrics for each Java package
 */
export const jdepend = mkPackage(
  nixRaw`pkgs.jdepend`,
  "Traverses Java class file directories and generates design quality metrics for each Java package",
);

/**
 * A graphical utility to visualize disk usage
 */
export const jdiskreport = mkPackage(
  nixRaw`pkgs.jdiskreport`,
  "A graphical utility to visualize disk usage",
);

/**
 * The open-source Java Development Kit
 */
export const jdk = mkPackage(
  nixRaw`pkgs.jdk`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk11 = mkPackage(
  nixRaw`pkgs.jdk11`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk11_headless = mkPackage(
  nixRaw`pkgs.jdk11_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk17 = mkPackage(
  nixRaw`pkgs.jdk17`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk17_headless = mkPackage(
  nixRaw`pkgs.jdk17_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk19 = mkPackage(
  nixRaw`pkgs.jdk19`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk19_headless = mkPackage(
  nixRaw`pkgs.jdk19_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk20 = mkPackage(
  nixRaw`pkgs.jdk20`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk20_headless = mkPackage(
  nixRaw`pkgs.jdk20_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk21 = mkPackage(
  nixRaw`pkgs.jdk21`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk21_headless = mkPackage(
  nixRaw`pkgs.jdk21_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk8 = mkPackage(
  nixRaw`pkgs.jdk8`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk8_headless = mkPackage(
  nixRaw`pkgs.jdk8_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const jdk_headless = mkPackage(
  nixRaw`pkgs.jdk_headless`,
  "The open-source Java Development Kit",
);

/**
 * Java-based solution for accessing, manipulating, and outputting XML data from Java code
 */
export const jdom = mkPackage(
  nixRaw`pkgs.jdom`,
  "Java-based solution for accessing, manipulating, and outputting XML data from Java code",
);

/**
 * Java language server
 */
export const jdt_language_server = mkPackage(
  nixRaw`pkgs.jdt-language-server`,
  "Java language server",
);

/**
 * A powerful duplicate file finder and an enhanced fork of 'fdupes'
 */
export const jdupes = mkPackage(
  nixRaw`pkgs.jdupes`,
  "A powerful duplicate file finder and an enhanced fork of 'fdupes'",
);

/**
 * A programmable text editor written around S-Lang
 */
export const jed = mkPackage(
  nixRaw`pkgs.jed`,
  "A programmable text editor written around S-Lang",
);

/**
 * Mature programmer's text editor (Java based)
 */
export const jedit = mkPackage(
  nixRaw`pkgs.jedit`,
  "Mature programmer's text editor (Java based)",
);

/**
 * JFFS2 filesystem extraction tool
 */
export const jefferson = mkPackage(
  nixRaw`pkgs.jefferson`,
  "JFFS2 filesystem extraction tool",
);

/**
 * A blog-aware, static site generator, written in Ruby
 */
export const jekyll = mkPackage(
  nixRaw`pkgs.jekyll`,
  "A blog-aware, static site generator, written in Ruby",
);

/**
 * CLI tool to filter JSON and JSON Lines data with Python syntax
 */
export const jello = mkPackage(
  nixRaw`pkgs.jello`,
  "CLI tool to filter JSON and JSON Lines data with Python syntax",
);

/**
 * A recreational programming language inspired by J
 */
export const jelly = mkPackage(
  nixRaw`pkgs.jelly`,
  "A recreational programming language inspired by J",
);

/**
 * Jellyfin terminal client
 */
export const jellycli = mkPackage(
  nixRaw`pkgs.jellycli`,
  "Jellyfin terminal client",
);

/**
 * The Free Software Media System
 */
export const jellyfin = mkPackage(
  nixRaw`pkgs.jellyfin`,
  "The Free Software Media System",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video (Jellyfin fork)
 */
export const jellyfin_ffmpeg = mkPackage(
  nixRaw`pkgs.jellyfin-ffmpeg`,
  "A complete, cross-platform solution to record, convert and stream audio and video (Jellyfin fork)",
);

/**
 * Jellyfin Desktop Client based on Plex Media Player
 */
export const jellyfin_media_player = mkPackage(
  nixRaw`pkgs.jellyfin-media-player`,
  "Jellyfin Desktop Client based on Plex Media Player",
);

/**
 * Allows casting of videos to MPV via the jellyfin mobile and web app
 */
export const jellyfin_mpv_shim = mkPackage(
  nixRaw`pkgs.jellyfin-mpv-shim`,
  "Allows casting of videos to MPV via the jellyfin mobile and web app",
);

/**
 * Web Client for Jellyfin
 */
export const jellyfin_web = mkPackage(
  nixRaw`pkgs.jellyfin-web`,
  "Web Client for Jellyfin",
);

/**
 * Fork of overseerr for jellyfin support
 */
export const jellyseerr = mkPackage(
  nixRaw`pkgs.jellyseerr`,
  "Fork of overseerr for jellyfin support",
);

/**
 * General purpose malloc(3) implementation
 */
export const jemalloc = mkPackage(
  nixRaw`pkgs.jemalloc`,
  "General purpose malloc(3) implementation",
);

/**
 * A simple CLI generation tool for creating large datasets
 */
export const jen = mkPackage(
  nixRaw`pkgs.jen`,
  "A simple CLI generation tool for creating large datasets",
);

/**
 * An extendable open source continuous integration server
 */
export const jenkins = mkPackage(
  nixRaw`pkgs.jenkins`,
  "An extendable open source continuous integration server",
);

/**
 * Jenkins Job Builder is a system for configuring Jenkins jobs using simple YAML files stored in Git
 */
export const jenkins_job_builder = mkPackage(
  nixRaw`pkgs.jenkins-job-builder`,
  "Jenkins Job Builder is a system for configuring Jenkins jobs using simple YAML files stored in Git",
);

/**
 * An ncurses client for libtorrent, ideal for use with screen, tmux, or dtach (jesec's fork)
 */
export const jesec_rtorrent = mkPackage(
  nixRaw`pkgs.jesec-rtorrent`,
  "An ncurses client for libtorrent, ideal for use with screen, tmux, or dtach (jesec's fork)",
);

/**
 * CLI to transform between JSON, EDN, YAML and Transit, powered with a minimal query language
 */
export const jet = mkPackage(
  nixRaw`pkgs.jet`,
  "CLI to transform between JSON, EDN, YAML and Transit, powered with a minimal query language",
);

/**
 * A typeface made for developers
 */
export const jetbrains_mono = mkPackage(
  nixRaw`pkgs.jetbrains-mono`,
  "A typeface made for developers",
);

/**
 * Jetbrains Toolbox
 */
export const jetbrains_toolbox = mkPackage(
  nixRaw`pkgs.jetbrains-toolbox`,
  "Jetbrains Toolbox",
);

/**
 * A Web server and javax.servlet container
 */
export const jetty = mkPackage(
  nixRaw`pkgs.jetty`,
  "A Web server and javax.servlet container",
);

/**
 * A tool which mechanically generates Java bindings from a native library headers
 */
export const jextract = mkPackage(
  nixRaw`pkgs.jextract`,
  "A tool which mechanically generates Java bindings from a native library headers",
);

/**
 * A small utility to safely format and print JSON objects in the commandline
 */
export const jf = mkPackage(
  nixRaw`pkgs.jf`,
  "A small utility to safely format and print JSON objects in the commandline",
);

/**
 * Java Foreign Function Interface 
 */
export const jffi = mkPackage(
  nixRaw`pkgs.jffi`,
  "Java Foreign Function Interface ",
);

/**
 * GUI tool for experimenting with formal languages topics
 */
export const jflap = mkPackage(
  nixRaw`pkgs.jflap`,
  "GUI tool for experimenting with formal languages topics",
);

/**
 * Lexical analyzer generator for Java, written in Java
 */
export const jflex = mkPackage(
  nixRaw`pkgs.jflex`,
  "Lexical analyzer generator for Java, written in Java",
);

/**
 * CLI utility to format json files
 */
export const jfmt = mkPackage(
  nixRaw`pkgs.jfmt`,
  "CLI utility to format json files",
);

/**
 * Client for accessing to JFrog's Artifactory and Mission Control through their respective REST APIs
 */
export const jfrog_cli = mkPackage(
  nixRaw`pkgs.jfrog-cli`,
  "Client for accessing to JFrog's Artifactory and Mission Control through their respective REST APIs",
);

/**
 * IBM JFS utilities
 */
export const jfsutils = mkPackage(
  nixRaw`pkgs.jfsutils`,
  "IBM JFS utilities",
);

/**
 * Modern port the original Shadow Warrior
 */
export const jfsw = mkPackage(
  nixRaw`pkgs.jfsw`,
  "Modern port the original Shadow Warrior",
);

/**
 * Jellyfin Terminal User Interface 
 */
export const jftui = mkPackage(
  nixRaw`pkgs.jftui`,
  "Jellyfin Terminal User Interface ",
);

/**
 * Small X11 menu intended to be used with openbox and tint2
 */
export const jgmenu = mkPackage(
  nixRaw`pkgs.jgmenu`,
  "Small X11 menu intended to be used with openbox and tint2",
);

/**
 * Exif Jpeg header manipulation tool
 */
export const jhead = mkPackage(
  nixRaw`pkgs.jhead`,
  "Exif Jpeg header manipulation tool",
);

/**
 * Measure JVM application stalls and GC pauses
 */
export const jhiccup = mkPackage(
  nixRaw`pkgs.jhiccup`,
  "Measure JVM application stalls and GC pauses",
);

/**
 * JItsi BRoadcasting Infrastructure
 */
export const jibri = mkPackage(
  nixRaw`pkgs.jibri`,
  "JItsi BRoadcasting Infrastructure",
);

/**
 * A server side focus component used in Jitsi Meet conferences
 */
export const jicofo = mkPackage(
  nixRaw`pkgs.jicofo`,
  "A server side focus component used in Jitsi Meet conferences",
);

/**
 * A command-line tool to incrementally drill down JSON
 */
export const jid = mkPackage(
  nixRaw`pkgs.jid`,
  "A command-line tool to incrementally drill down JSON",
);

/**
 * Download utility that can fetch files from several sources simultaneously
 */
export const jigdo = mkPackage(
  nixRaw`pkgs.jigdo`,
  "Download utility that can fetch files from several sources simultaneously",
);

/**
 * The Jikes Parser Generator
 */
export const jikespg = mkPackage(
  nixRaw`pkgs.jikespg`,
  "The Jikes Parser Generator",
);

/**
 * An open source small-footprint implementation of the Tcl programming language
 */
export const jimtcl = mkPackage(
  nixRaw`pkgs.jimtcl`,
  "An open source small-footprint implementation of the Tcl programming language",
);

/**
 * A RELAX NG validator in Java
 */
export const jing = mkPackage(
  nixRaw`pkgs.jing`,
  "A RELAX NG validator in Java",
);

/**
 * A RELAX NG validator in Java
 */
export const jing_trang = mkPackage(
  nixRaw`pkgs.jing-trang`,
  "A RELAX NG validator in Java",
);

/**
 * CLI for Jinja2
 */
export const jinja2_cli = mkPackage(
  nixRaw`pkgs.jinja2-cli`,
  "CLI for Jinja2",
);

/**
 * jid on jq - interactive JSON query tool using jq expressions
 */
export const jiq = mkPackage(
  nixRaw`pkgs.jiq`,
  "jid on jq - interactive JSON query tool using jq expressions",
);

/**
 * Feature-rich interactive Jira command line
 */
export const jira_cli_go = mkPackage(
  nixRaw`pkgs.jira-cli-go`,
  "Feature-rich interactive Jira command line",
);

/**
 * Website permitting upload of a file in a simple way and giving a unique link to it
 */
export const jirafeau = mkPackage(
  nixRaw`pkgs.jirafeau`,
  "Website permitting upload of a file in a simple way and giving a unique link to it",
);

/**
 * Japanese android/cli/web dictionary based on jmdict/kanjidic
 */
export const jiten = mkPackage(
  nixRaw`pkgs.jiten`,
  "Japanese android/cli/web dictionary based on jmdict/kanjidic",
);

/**
 * Open Source Video Calls and Chat
 */
export const jitsi = mkPackage(
  nixRaw`pkgs.jitsi`,
  "Open Source Video Calls and Chat",
);

/**
 * Secure, Simple and Scalable Video Conferences
 */
export const jitsi_meet = mkPackage(
  nixRaw`pkgs.jitsi-meet`,
  "Secure, Simple and Scalable Video Conferences",
);

/**
 * Jitsi Meet desktop application powered by Electron
 */
export const jitsi_meet_electron = mkPackage(
  nixRaw`pkgs.jitsi-meet-electron`,
  "Jitsi Meet desktop application powered by Electron",
);

/**
 * Prosody configuration for Jitsi Meet
 */
export const jitsi_meet_prosody = mkPackage(
  nixRaw`pkgs.jitsi-meet-prosody`,
  "Prosody configuration for Jitsi Meet",
);

/**
 * A WebRTC compatible video router
 */
export const jitsi_videobridge = mkPackage(
  nixRaw`pkgs.jitsi-videobridge`,
  "A WebRTC compatible video router",
);

/**
 * Provides a noise source using the CPU execution timing jitter
 */
export const jitterentropy = mkPackage(
  nixRaw`pkgs.jitterentropy`,
  "Provides a noise source using the CPU execution timing jitter",
);

/**
 * A random number generator, which injects entropy to the kernel
 */
export const jitterentropy_rngd = mkPackage(
  nixRaw`pkgs.jitterentropy-rngd`,
  "A random number generator, which injects entropy to the kernel",
);

/**
 * Functional sed for JSON
 */
export const jl = mkPackage(
  nixRaw`pkgs.jl`,
  "Functional sed for JSON",
);

/**
 * A command-line pager for JSON data
 */
export const jless = mkPackage(
  nixRaw`pkgs.jless`,
  "A command-line pager for JSON data",
);

/**
 * A JMESPath implementation in Go
 */
export const jmespath = mkPackage(
  nixRaw`pkgs.jmespath`,
  "A JMESPath implementation in Go",
);

/**
 * A 100% pure Java desktop application designed to load test functional behavior and measure performance
 */
export const jmeter = mkPackage(
  nixRaw`pkgs.jmeter`,
  "A 100% pure Java desktop application designed to load test functional behavior and measure performance",
);

/**
 * A Java 3D viewer for chemical structures
 */
export const jmol = mkPackage(
  nixRaw`pkgs.jmol`,
  "A Java 3D viewer for chemical structures",
);

/**
 * A FUSE filesystem for MTP devices like Android phones
 */
export const jmtpfs = mkPackage(
  nixRaw`pkgs.jmtpfs`,
  "A FUSE filesystem for MTP devices like Android phones",
);

/**
 * Discord music bot that's easy to set up and run yourself
 */
export const jmusicbot = mkPackage(
  nixRaw`pkgs.jmusicbot`,
  "Discord music bot that's easy to set up and run yourself",
);

/**
 * Java Native Access
 */
export const jna = mkPackage(
  nixRaw`pkgs.jna`,
  "Java Native Access",
);

/**
 * Graphical network monitoring and documentation tool
 */
export const jnetmap = mkPackage(
  nixRaw`pkgs.jnetmap`,
  "Graphical network monitoring and documentation tool",
);

/**
 * Network traffic visualizer
 */
export const jnettop = mkPackage(
  nixRaw`pkgs.jnettop`,
  "Network traffic visualizer",
);

/**
 * A small utility to create JSON objects
 */
export const jo = mkPackage(
  nixRaw`pkgs.jo`,
  "A small utility to create JSON objects",
);

/**
 * An alternative to cron, with sophisticated status-reporting and error-handling
 */
export const jobber = mkPackage(
  nixRaw`pkgs.jobber`,
  "An alternative to cron, with sophisticated status-reporting and error-handling",
);

/**
 * A full featured terminal-based screen editor
 */
export const joe = mkPackage(
  nixRaw`pkgs.joe`,
  "A full featured terminal-based screen editor",
);

/**
 * John the Ripper password cracker
 */
export const john = mkPackage(
  nixRaw`pkgs.john`,
  "John the Ripper password cracker",
);

/**
 * Open Source GUI frontend for John the Ripper
 */
export const johnny = mkPackage(
  nixRaw`pkgs.johnny`,
  "Open Source GUI frontend for John the Ripper",
);

/**
 * An open-source engine for the classic "Johnny Castaway" screensaver (ready to use, with resources)
 */
export const johnny_reborn = mkPackage(
  nixRaw`pkgs.johnny-reborn`,
  "An open-source engine for the classic \"Johnny Castaway\" screensaver (ready to use, with resources)",
);

/**
 * An open-source engine for the classic "Johnny Castaway" screensaver (engine only)
 */
export const johnny_reborn_engine = mkPackage(
  nixRaw`pkgs.johnny-reborn-engine`,
  "An open-source engine for the classic \"Johnny Castaway\" screensaver (engine only)",
);

/**
 * Merge multiple pcap files together, gracefully
 */
export const joincap = mkPackage(
  nixRaw`pkgs.joincap`,
  "Merge multiple pcap files together, gracefully",
);

/**
 * A small Clojure interpreter and linter written in Go
 */
export const joker = mkPackage(
  nixRaw`pkgs.joker`,
  "A small Clojure interpreter and linter written in Go",
);

/**
 * Fairly compliant SIIT and Stateful NAT64 for Linux - CLI tools
 */
export const jool_cli = mkPackage(
  nixRaw`pkgs.jool-cli`,
  "Fairly compliant SIIT and Stateful NAT64 for Linux - CLI tools",
);

/**
 * Joplin CLI Client
 */
export const joplin = mkPackage(
  nixRaw`pkgs.joplin`,
  "Joplin CLI Client",
);

/**
 * An open source note taking and to-do application with synchronisation capabilities
 */
export const joplin_desktop = mkPackage(
  nixRaw`pkgs.joplin-desktop`,
  "An open source note taking and to-do application with synchronisation capabilities",
);

/**
 * C-language implementation of Javascript Object Signing and Encryption
 */
export const jose = mkPackage(
  nixRaw`pkgs.jose`,
  "C-language implementation of Javascript Object Signing and Encryption",
);

/**
 * Just One Single History
 */
export const josh = mkPackage(
  nixRaw`pkgs.josh`,
  "Just One Single History",
);

/**
 * Ranger-like terminal file manager written in Rust
 */
export const joshuto = mkPackage(
  nixRaw`pkgs.joshuto`,
  "Ranger-like terminal file manager written in Rust",
);

/**
 * An extensible editor for OpenStreetMap
 */
export const josm = mkPackage(
  nixRaw`pkgs.josm`,
  "An extensible editor for OpenStreetMap",
);

/**
 * A sans serif font by Indestructible Type
 */
export const jost = mkPackage(
  nixRaw`pkgs.jost`,
  "A sans serif font by Indestructible Type",
);

/**
 * Rapid note management for the terminal
 */
export const jot = mkPackage(
  nixRaw`pkgs.jot`,
  "Rapid note management for the terminal",
);

/**
 * A minimal Djot CLI
 */
export const jotdown = mkPackage(
  nixRaw`pkgs.jotdown`,
  "A minimal Djot CLI",
);

/**
 * Jottacloud CLI
 */
export const jotta_cli = mkPackage(
  nixRaw`pkgs.jotta-cli`,
  "Jottacloud CLI",
);

/**
 * Log forwarder from journald to Stackdriver Logging
 */
export const journaldriver = mkPackage(
  nixRaw`pkgs.journaldriver`,
  "Log forwarder from journald to Stackdriver Logging",
);

/**
 * Jonathan's Own Version of Emacs
 */
export const jove = mkPackage(
  nixRaw`pkgs.jove`,
  "Jonathan's Own Version of Emacs",
);

/**
 * Userspace daemon to combine joy-cons from the hid-nintendo kernel driver
 */
export const joycond = mkPackage(
  nixRaw`pkgs.joycond`,
  "Userspace daemon to combine joy-cons from the hid-nintendo kernel driver",
);

/**
 * The finest emoji you can use legally (formerly EmojiOne)
 */
export const joypixels = mkPackage(
  nixRaw`pkgs.joypixels`,
  "The finest emoji you can use legally (formerly EmojiOne)",
);

/**
 * A joystick-aware screen waker
 */
export const joystickwake = mkPackage(
  nixRaw`pkgs.joystickwake`,
  "A joystick-aware screen waker",
);

/**
 * A command line interface to the JMESPath expression language for JSON
 */
export const jp = mkPackage(
  nixRaw`pkgs.jp`,
  "A command line interface to the JMESPath expression language for JSON",
);

/**
 * A small utility that converts JPG images to ASCII
 */
export const jp2a = mkPackage(
  nixRaw`pkgs.jp2a`,
  "A small utility that converts JPG images to ASCII",
);

/**
 * C++ wrapper for PCRE2 Library
 */
export const jpcre2 = mkPackage(
  nixRaw`pkgs.jpcre2`,
  "C++ wrapper for PCRE2 Library",
);

/**
 * Utilities for archiving photos for saving to long term storage or serving over the web
 */
export const jpeg_archive = mkPackage(
  nixRaw`pkgs.jpeg-archive`,
  "Utilities for archiving photos for saving to long term storage or serving over the web",
);

/**
 * Utility program to get and set the Exif Orientation Tag
 */
export const jpegexiforient = mkPackage(
  nixRaw`pkgs.jpegexiforient`,
  "Utility program to get and set the Exif Orientation Tag",
);

/**
 * Prints information and tests integrity of JPEG/JFIF files
 */
export const jpeginfo = mkPackage(
  nixRaw`pkgs.jpeginfo`,
  "Prints information and tests integrity of JPEG/JFIF files",
);

/**
 * Optimize JPEG files
 */
export const jpegoptim = mkPackage(
  nixRaw`pkgs.jpegoptim`,
  "Optimize JPEG files",
);

/**
 * Losslessly shrink any JPEG file
 */
export const jpegrescan = mkPackage(
  nixRaw`pkgs.jpegrescan`,
  "Losslessly shrink any JPEG file",
);

/**
 * Flash SWF decompiler and editor
 */
export const jpexs = mkPackage(
  nixRaw`pkgs.jpexs`,
  "Flash SWF decompiler and editor",
);

/**
 * Janet Project Manager for the Janet programming language
 */
export const jpm = mkPackage(
  nixRaw`pkgs.jpm`,
  "Janet Project Manager for the Janet programming language",
);

/**
 * JProfiler's intuitive UI helps you resolve performance bottlenecks
 */
export const jprofiler = mkPackage(
  nixRaw`pkgs.jprofiler`,
  "JProfiler's intuitive UI helps you resolve performance bottlenecks",
);

/**
 * Cross-platform PlayStation 1 audio and video converter
 */
export const jpsxdec = mkPackage(
  nixRaw`pkgs.jpsxdec`,
  "Cross-platform PlayStation 1 audio and video converter",
);

/**
 * JP2 (JPEG 2000 Part 1) image validator and properties extractor
 */
export const jpylyzer = mkPackage(
  nixRaw`pkgs.jpylyzer`,
  "JP2 (JPEG 2000 Part 1) image validator and properties extractor",
);

/**
 * A lightweight and flexible command-line JSON processor
 */
export const jq = mkPackage(
  nixRaw`pkgs.jq`,
  "A lightweight and flexible command-line JSON processor",
);

/**
 * A JSON Query Language CLI tool built with Rust
 */
export const jql = mkPackage(
  nixRaw`pkgs.jql`,
  "A JSON Query Language CLI tool built with Rust",
);

/**
 * A TUI playground to experiment with jq
 */
export const jqp = mkPackage(
  nixRaw`pkgs.jqp`,
  "A TUI playground to experiment with jq",
);

/**
 * Real-time earthquake map of Japan
 */
export const jquake = mkPackage(
  nixRaw`pkgs.jquake`,
  "Real-time earthquake map of Japan",
);

/**
 * The open-source Java Development Kit
 */
export const jre = mkPackage(
  nixRaw`pkgs.jre`,
  "The open-source Java Development Kit",
);

export const jre17_minimal = mkPackage(
  nixRaw`pkgs.jre17_minimal`,
  "",
);

/**
 * The open-source Java Development Kit
 */
export const jre8 = mkPackage(
  nixRaw`pkgs.jre8`,
  "The open-source Java Development Kit",
);

export const jre8Plugin = mkPackage(
  nixRaw`pkgs.jre8Plugin`,
  "",
);

/**
 * The open-source Java Development Kit
 */
export const jre8_headless = mkPackage(
  nixRaw`pkgs.jre8_headless`,
  "The open-source Java Development Kit",
);

export const jrePlugin = mkPackage(
  nixRaw`pkgs.jrePlugin`,
  "",
);

/**
 * The open-source Java Development Kit
 */
export const jre_headless = mkPackage(
  nixRaw`pkgs.jre_headless`,
  "The open-source Java Development Kit",
);

export const jre_minimal = mkPackage(
  nixRaw`pkgs.jre_minimal`,
  "",
);

/**
 * Simple command line journal application that stores your journal in a plain text file
 */
export const jrnl = mkPackage(
  nixRaw`pkgs.jrnl`,
  "Simple command line journal application that stores your journal in a plain text file",
);

/**
 * Purely-functional configuration language that helps you define JSON data
 */
export const jrsonnet = mkPackage(
  nixRaw`pkgs.jrsonnet`,
  "Purely-functional configuration language that helps you define JSON data",
);

/**
 * Ruby interpreter written in Java
 */
export const jruby = mkPackage(
  nixRaw`pkgs.jruby`,
  "Ruby interpreter written in Java",
);

/**
 * Weak-signal keyboard messaging for amateur radio
 */
export const js8call = mkPackage(
  nixRaw`pkgs.js8call`,
  "Weak-signal keyboard messaging for amateur radio",
);

/**
 * Like awk, but for JSON
 */
export const jsawk = mkPackage(
  nixRaw`pkgs.jsawk`,
  "Like awk, but for JSON",
);

/**
 * JavaScript unobfuscator and beautifier
 */
export const jsbeautifier = mkPackage(
  nixRaw`pkgs.jsbeautifier`,
  "JavaScript unobfuscator and beautifier",
);

/**
 * Code coverage for JavaScript
 */
export const jscoverage = mkPackage(
  nixRaw`pkgs.jscoverage`,
  "Code coverage for JavaScript",
);

/**
 * Simple JavaScript Duckumentation generator
 */
export const jsduck = mkPackage(
  nixRaw`pkgs.jsduck`,
  "Simple JavaScript Duckumentation generator",
);

/**
 * JSON parser designed for maximum convenience within the shell
 */
export const jshon = mkPackage(
  nixRaw`pkgs.jshon`,
  "JSON parser designed for maximum convenience within the shell",
);

/**
 * Tool for extracting URLs, paths, secrets, and other data from JavaScript source code
 */
export const jsluice = mkPackage(
  nixRaw`pkgs.jsluice`,
  "Tool for extracting URLs, paths, secrets, and other data from JavaScript source code",
);

/**
 * Convert JSON to HCL, and vice versa
 */
export const json2hcl = mkPackage(
  nixRaw`pkgs.json2hcl`,
  "Convert JSON to HCL, and vice versa",
);

/**
 * JSON to TSV converter
 */
export const json2tsv = mkPackage(
  nixRaw`pkgs.json2tsv`,
  "JSON to TSV converter",
);

/**
 * Utility to convert a file from JSON to YAML format. (deprecated)
 */
export const json2yaml = mkPackage(
  nixRaw`pkgs.json2yaml`,
  "Utility to convert a file from JSON to YAML format. (deprecated)",
);

/**
 * A JSON implementation in C
 */
export const json_c = mkPackage(
  nixRaw`pkgs.json_c`,
  "A JSON implementation in C",
);

/**
 * Modern Fortran JSON API
 */
export const json_fortran = mkPackage(
  nixRaw`pkgs.json-fortran`,
  "Modern Fortran JSON API",
);

/**
 * A library providing (de)serialization support for the JavaScript Object Notation (JSON) format
 */
export const json_glib = mkPackage(
  nixRaw`pkgs.json-glib`,
  "A library providing (de)serialization support for the JavaScript Object Notation (JSON) format",
);

/**
 * Dead simple terminal plots from JSON (or CSV) data. Bar charts, line charts, scatter plots, histograms and heatmaps are supported.
 */
export const json_plot = mkPackage(
  nixRaw`pkgs.json-plot`,
  "Dead simple terminal plots from JSON (or CSV) data. Bar charts, line charts, scatter plots, histograms and heatmaps are supported.",
);

/**
 * Quickly generate HTML documentation from a JSON schema
 */
export const json_schema_for_humans = mkPackage(
  nixRaw`pkgs.json-schema-for-humans`,
  "Quickly generate HTML documentation from a JSON schema",
);

/**
 * A C++ library for interacting with JSON
 */
export const jsoncpp = mkPackage(
  nixRaw`pkgs.jsoncpp`,
  "A C++ library for interacting with JSON",
);

/**
 * Formatter for JSON files
 */
export const jsonfmt = mkPackage(
  nixRaw`pkgs.jsonfmt`,
  "Formatter for JSON files",
);

/**
 * Purely-functional configuration language that helps you define JSON data
 */
export const jsonnet = mkPackage(
  nixRaw`pkgs.jsonnet`,
  "Purely-functional configuration language that helps you define JSON data",
);

/**
 * A jsonnet package manager
 */
export const jsonnet_bundler = mkPackage(
  nixRaw`pkgs.jsonnet-bundler`,
  "A jsonnet package manager",
);

/**
 * Language Server Protocol server for Jsonnet
 */
export const jsonnet_language_server = mkPackage(
  nixRaw`pkgs.jsonnet-language-server`,
  "Language Server Protocol server for Jsonnet",
);

/**
 * A library to communicate using the JSON-RPC 2.0 specification
 */
export const jsonrpc_glib = mkPackage(
  nixRaw`pkgs.jsonrpc-glib`,
  "A library to communicate using the JSON-RPC 2.0 specification",
);

/**
 * Like watch -d but for JSON
 */
export const jsonwatch = mkPackage(
  nixRaw`pkgs.jsonwatch`,
  "Like watch -d but for JSON",
);

/**
 * A simple joystick tester based on Gtk+
 */
export const jstest_gtk = mkPackage(
  nixRaw`pkgs.jstest-gtk`,
  "A simple joystick tester based on Gtk+",
);

/**
 * Tool to search for in Javascript hidden subdomains and secrets
 */
export const jsubfinder = mkPackage(
  nixRaw`pkgs.jsubfinder`,
  "Tool to search for in Javascript hidden subdomains and secrets",
);

/**
 * JSVC is part of the Apache Commons Daemon software, a set of utilities and Java support classes for running Java applications as server processes.
 */
export const jsvc = mkPackage(
  nixRaw`pkgs.jsvc`,
  "JSVC is part of the Apache Commons Daemon software, a set of utilities and Java support classes for running Java applications as server processes.",
);

/**
 * Remote JTAG server for remote debugging
 */
export const jtag_remote_server = mkPackage(
  nixRaw`pkgs.jtag-remote-server`,
  "Remote JTAG server for remote debugging",
);

/**
 * JSON manipulation and transformation tool
 */
export const jtc = mkPackage(
  nixRaw`pkgs.jtc`,
  "JSON manipulation and transformation tool",
);

/**
 * Pure Java (type 4) JDBC 3.0 driver for Microsoft SQL Server
 */
export const jtds_jdbc = mkPackage(
  nixRaw`pkgs.jtds_jdbc`,
  "Pure Java (type 4) JDBC 3.0 driver for Microsoft SQL Server",
);

/**
 * Cross-platform C++ application framework
 */
export const juce = mkPackage(
  nixRaw`pkgs.juce`,
  "Cross-platform C++ application framework",
);

/**
 * State-of-the-art C library that implements a sparse dynamic array
 */
export const judy = mkPackage(
  nixRaw`pkgs.judy`,
  "State-of-the-art C library that implements a sparse dynamic array",
);

/**
 * A program to visualize different juggling pattens
 */
export const jugglinglab = mkPackage(
  nixRaw`pkgs.jugglinglab`,
  "A program to visualize different juggling pattens",
);

/**
 * A distributed POSIX file system built on top of Redis and S3
 */
export const juicefs = mkPackage(
  nixRaw`pkgs.juicefs`,
  "A distributed POSIX file system built on top of Redis and S3",
);

/**
 * A quic-based proxy protocol
 */
export const juicity = mkPackage(
  nixRaw`pkgs.juicity`,
  "A quic-based proxy protocol",
);

/**
 * Open source modelling tool for operating software in the cloud
 */
export const juju = mkPackage(
  nixRaw`pkgs.juju`,
  "Open source modelling tool for operating software in the cloud",
);

/**
 * A Git-compatible DVCS that is both simple and powerful
 */
export const jujutsu = mkPackage(
  nixRaw`pkgs.jujutsu`,
  "A Git-compatible DVCS that is both simple and powerful",
);

/**
 * Utilities around FireWire devices connected to a Linux computer
 */
export const jujuutils = mkPackage(
  nixRaw`pkgs.jujuutils`,
  "Utilities around FireWire devices connected to a Linux computer",
);

/**
 * High-level performance-oriented dynamical language for technical computing
 */
export const julia = mkPackage(
  nixRaw`pkgs.julia`,
  "High-level performance-oriented dynamical language for technical computing",
);

/**
 * High-level, high-performance, dynamic language for technical computing
 */
export const julia_16_bin = mkPackage(
  nixRaw`pkgs.julia_16-bin`,
  "High-level, high-performance, dynamic language for technical computing",
);

/**
 * High-level performance-oriented dynamical language for technical computing
 */
export const julia_18 = mkPackage(
  nixRaw`pkgs.julia_18`,
  "High-level performance-oriented dynamical language for technical computing",
);

/**
 * High-level, high-performance, dynamic language for technical computing
 */
export const julia_18_bin = mkPackage(
  nixRaw`pkgs.julia_18-bin`,
  "High-level, high-performance, dynamic language for technical computing",
);

/**
 * High-level performance-oriented dynamical language for technical computing
 */
export const julia_19 = mkPackage(
  nixRaw`pkgs.julia_19`,
  "High-level performance-oriented dynamical language for technical computing",
);

/**
 * High-level, high-performance, dynamic language for technical computing
 */
export const julia_19_bin = mkPackage(
  nixRaw`pkgs.julia_19-bin`,
  "High-level, high-performance, dynamic language for technical computing",
);

/**
 * High-level, high-performance, dynamic language for technical computing
 */
export const julia_bin = mkPackage(
  nixRaw`pkgs.julia-bin`,
  "High-level, high-performance, dynamic language for technical computing",
);

/**
 * High-level, high-performance, dynamic language for technical computing
 */
export const julia_lts = mkPackage(
  nixRaw`pkgs.julia-lts`,
  "High-level, high-performance, dynamic language for technical computing",
);

/**
 * High-level, high-performance, dynamic language for technical computing
 */
export const julia_lts_bin = mkPackage(
  nixRaw`pkgs.julia-lts-bin`,
  "High-level, high-performance, dynamic language for technical computing",
);

/**
 * A monospaced font for scientific and technical computing
 */
export const julia_mono = mkPackage(
  nixRaw`pkgs.julia-mono`,
  "A monospaced font for scientific and technical computing",
);

/**
 * High-level performance-oriented dynamical language for technical computing
 */
export const julia_stable = mkPackage(
  nixRaw`pkgs.julia-stable`,
  "High-level performance-oriented dynamical language for technical computing",
);

/**
 * High-level, high-performance, dynamic language for technical computing
 */
export const julia_stable_bin = mkPackage(
  nixRaw`pkgs.julia-stable-bin`,
  "High-level, high-performance, dynamic language for technical computing",
);

/**
 * An open source re-implementation of Caesar III
 */
export const julius = mkPackage(
  nixRaw`pkgs.julius`,
  "An open source re-implementation of Caesar III",
);

/**
 * A Japanese morphological analyser using a recurrent neural network language model (RNNLM)
 */
export const jumanpp = mkPackage(
  nixRaw`pkgs.jumanpp`,
  "A Japanese morphological analyser using a recurrent neural network language model (RNNLM)",
);

/**
 * Navigate directories faster by learning your habits
 */
export const jump = mkPackage(
  nixRaw`pkgs.jump`,
  "Navigate directories faster by learning your habits",
);

/**
 * A run-or-raise application switcher for any X11 desktop
 */
export const jumpapp = mkPackage(
  nixRaw`pkgs.jumpapp`,
  "A run-or-raise application switcher for any X11 desktop",
);

/**
 * cute, true multiplayer platform game with bunnies
 */
export const jumpnbump = mkPackage(
  nixRaw`pkgs.jumpnbump`,
  "cute, true multiplayer platform game with bunnies",
);

/**
 * A tool for building modern cloud native development environments
 */
export const jumppad = mkPackage(
  nixRaw`pkgs.jumppad`,
  "A tool for building modern cloud native development environments",
);

/**
 * A tactical 2D shooter played by up to 4 players online or on a shared screen
 */
export const jumpy = mkPackage(
  nixRaw`pkgs.jumpy`,
  "A tactical 2D shooter played by up to 4 players online or on a shared screen",
);

/**
 * Choose the application to open files and links
 */
export const junction = mkPackage(
  nixRaw`pkgs.junction`,
  "Choose the application to open files and links",
);

/**
 * Junction is a a humanist sans-serif font
 */
export const junction_font = mkPackage(
  nixRaw`pkgs.junction-font`,
  "Junction is a a humanist sans-serif font",
);

/**
 * A Unicode font for medievalists
 */
export const junicode = mkPackage(
  nixRaw`pkgs.junicode`,
  "A Unicode font for medievalists",
);

/**
 * Functional reactive programming language for programming Arduino
 */
export const juniper = mkPackage(
  nixRaw`pkgs.juniper`,
  "Functional reactive programming language for programming Arduino",
);

/**
 * Deep packet inspection swiss-army knife
 */
export const junkie = mkPackage(
  nixRaw`pkgs.junkie`,
  "Deep packet inspection swiss-army knife",
);

/**
 * GTK themes inspired by epic vscode themes
 */
export const juno_theme = mkPackage(
  nixRaw`pkgs.juno-theme`,
  "GTK themes inspired by epic vscode themes",
);

/**
 * A portable fork of Joe's editor
 */
export const jupp = mkPackage(
  nixRaw`pkgs.jupp`,
  "A portable fork of Joe's editor",
);

/**
 * Web-based notebook environment for interactive computing
 */
export const jupyter = mkPackage(
  nixRaw`pkgs.jupyter`,
  "Web-based notebook environment for interactive computing",
);

/**
 * Web-based notebook environment for interactive computing
 */
export const jupyter_all = mkPackage(
  nixRaw`pkgs.jupyter-all`,
  "Web-based notebook environment for interactive computing",
);

/**
 * just a useless shell
 */
export const jush = mkPackage(
  nixRaw`pkgs.jush`,
  "just a useless shell",
);

/**
 * A handy way to save and run project-specific commands
 */
export const just = mkPackage(
  nixRaw`pkgs.just`,
  "A handy way to save and run project-specific commands",
);

/**
 * a generic build tool
 */
export const justbuild = mkPackage(
  nixRaw`pkgs.justbuild`,
  "a generic build tool",
);

/**
 * Simple text alignment tool that supports left/right/center/fill justify alignment
 */
export const justify = mkPackage(
  nixRaw`pkgs.justify`,
  "Simple text alignment tool that supports left/right/center/fill justify alignment",
);

/**
 * A MASM-compatible x86 assembler
 */
export const jwasm = mkPackage(
  nixRaw`pkgs.jwasm`,
  "A MASM-compatible x86 assembler",
);

/**
 * A client for the WHOIS protocol allowing you to query the owner of a domain name
 */
export const jwhois = mkPackage(
  nixRaw`pkgs.jwhois`,
  "A client for the WHOIS protocol allowing you to query the owner of a domain name",
);

/**
 * Joe's Window Manager is a light-weight X11 window manager
 */
export const jwm = mkPackage(
  nixRaw`pkgs.jwm`,
  "Joe's Window Manager is a light-weight X11 window manager",
);

/**
 * A full configuration manager for JWM
 */
export const jwm_settings_manager = mkPackage(
  nixRaw`pkgs.jwm-settings-manager`,
  "A full configuration manager for JWM",
);

/**
 * Super fast CLI tool to decode and encode JWTs
 */
export const jwt_cli = mkPackage(
  nixRaw`pkgs.jwt-cli`,
  "Super fast CLI tool to decode and encode JWTs",
);

/**
 * Tool for attacking JWT
 */
export const jwt_hack = mkPackage(
  nixRaw`pkgs.jwt-hack`,
  "Tool for attacking JWT",
);

/**
 *  Implementation of various JWx (Javascript Object Signing and Encryption/JOSE) technologies
 */
export const jwx = mkPackage(
  nixRaw`pkgs.jwx`,
  " Implementation of various JWx (Javascript Object Signing and Encryption/JOSE) technologies",
);

/**
 * Command line tool for installing and using Jenkins X
 */
export const jx = mkPackage(
  nixRaw`pkgs.jx`,
  "Command line tool for installing and using Jenkins X",
);

/**
 * A Java Ldap Browser
 */
export const jxplorer = mkPackage(
  nixRaw`pkgs.jxplorer`,
  "A Java Ldap Browser",
);

/**
 * Implementation of the JPEG XR image codec standard
 */
export const jxrlib = mkPackage(
  nixRaw`pkgs.jxrlib`,
  "Implementation of the JPEG XR image codec standard",
);

/**
 * Python interpreter written in Java
 */
export const jython = mkPackage(
  nixRaw`pkgs.jython`,
  "Python interpreter written in Java",
);

/**
 * A bootstrapping and management tool for k0s clusters.
 */
export const k0sctl = mkPackage(
  nixRaw`pkgs.k0sctl`,
  "A bootstrapping and management tool for k0s clusters.",
);

/**
 * Optimizes PDF/DJVU files for mobile e-readers (e.g. the Kindle) and smartphones
 */
export const k2pdfopt = mkPackage(
  nixRaw`pkgs.k2pdfopt`,
  "Optimizes PDF/DJVU files for mobile e-readers (e.g. the Kindle) and smartphones",
);

/**
 * Kubernetes YAML to Terraform HCL converter
 */
export const k2tf = mkPackage(
  nixRaw`pkgs.k2tf`,
  "Kubernetes YAML to Terraform HCL converter",
);

/**
 * A helper to run k3s (Lightweight Kubernetes. 5 less than k8s) in a docker container
 */
export const k3d = mkPackage(
  nixRaw`pkgs.k3d`,
  "A helper to run k3s (Lightweight Kubernetes. 5 less than k8s) in a docker container",
);

/**
 * A lightweight Kubernetes distribution
 */
export const k3s = mkPackage(
  nixRaw`pkgs.k3s`,
  "A lightweight Kubernetes distribution",
);

/**
 * A lightweight Kubernetes distribution
 */
export const k3s_1_24 = mkPackage(
  nixRaw`pkgs.k3s_1_24`,
  "A lightweight Kubernetes distribution",
);

/**
 * A lightweight Kubernetes distribution
 */
export const k3s_1_25 = mkPackage(
  nixRaw`pkgs.k3s_1_25`,
  "A lightweight Kubernetes distribution",
);

/**
 * A lightweight Kubernetes distribution
 */
export const k3s_1_26 = mkPackage(
  nixRaw`pkgs.k3s_1_26`,
  "A lightweight Kubernetes distribution",
);

/**
 * A lightweight Kubernetes distribution
 */
export const k3s_1_27 = mkPackage(
  nixRaw`pkgs.k3s_1_27`,
  "A lightweight Kubernetes distribution",
);

/**
 * Bootstrap Kubernetes with k3s over SSH
 */
export const k3sup = mkPackage(
  nixRaw`pkgs.k3sup`,
  "Bootstrap Kubernetes with k3s over SSH",
);

/**
 * Control software for the stock K40 Laser controller

 */
export const k40_whisperer = mkPackage(
  nixRaw`pkgs.k40-whisperer`,
  "Control software for the stock K40 Laser controller\n",
);

/**
 * A small utility program that sums up disk usage for directory trees
 */
export const k4dirstat = mkPackage(
  nixRaw`pkgs.k4dirstat`,
  "A small utility program that sums up disk usage for directory trees",
);

/**
 * A modern load testing tool, using Go and JavaScript
 */
export const k6 = mkPackage(
  nixRaw`pkgs.k6`,
  "A modern load testing tool, using Go and JavaScript",
);

/**
 * Giving Kubernetes Superpowers to everyone
 */
export const k8sgpt = mkPackage(
  nixRaw`pkgs.k8sgpt`,
  "Giving Kubernetes Superpowers to everyone",
);

/**
 * Kubernetes CLI To Manage Your Clusters In Style
 */
export const k9s = mkPackage(
  nixRaw`pkgs.k9s`,
  "Kubernetes CLI To Manage Your Clusters In Style",
);

/**
 * Survive as a stray cat in an ncurses game
 */
export const kabeljau = mkPackage(
  nixRaw`pkgs.kabeljau`,
  "Survive as a stray cat in an ncurses game",
);

/**
 * KACST Latin-Arabic TrueType fonts
 */
export const kacst = mkPackage(
  nixRaw`pkgs.kacst`,
  "KACST Latin-Arabic TrueType fonts",
);

/**
 * Modern CLI for Apache Kafka, written in Go
 */
export const kaf = mkPackage(
  nixRaw`pkgs.kaf`,
  "Modern CLI for Apache Kafka, written in Go",
);

/**
 * KDE media player
 */
export const kaffeine = mkPackage(
  nixRaw`pkgs.kaffeine`,
  "KDE media player",
);

/**
 * A highly efficient daemon for streaming data from Kafka into Delta Lake
 */
export const kafka_delta_ingest = mkPackage(
  nixRaw`pkgs.kafka-delta-ingest`,
  "A highly efficient daemon for streaming data from Kafka into Delta Lake",
);

/**
 * Command Line Tool for managing Apache Kafka
 */
export const kafkactl = mkPackage(
  nixRaw`pkgs.kafkactl`,
  "Command Line Tool for managing Apache Kafka",
);

/**
 * Official API for https://www.kaggle.com, accessible using a command line tool implemented in Python 3
 */
export const kaggle = mkPackage(
  nixRaw`pkgs.kaggle`,
  "Official API for https://www.kaggle.com, accessible using a command line tool implemented in Python 3",
);

/**
 * User-friendly and modern chat app, using XMPP
 */
export const kaidan = mkPackage(
  nixRaw`pkgs.kaidan`,
  "User-friendly and modern chat app, using XMPP",
);

/**
 * Kubernetes log viewer
 */
export const kail = mkPackage(
  nixRaw`pkgs.kail`,
  "Kubernetes log viewer",
);

/**
 * Compiler to generate binary data parsers in C++ / C# / Go / Java / JavaScript / Lua / Perl / PHP / Python / Ruby 
 */
export const kaitai_struct_compiler = mkPackage(
  nixRaw`pkgs.kaitai-struct-compiler`,
  "Compiler to generate binary data parsers in C++ / C# / Go / Java / JavaScript / Lua / Perl / PHP / Python / Ruby ",
);

/**
 * Kakoune Language Server Protocol Client
 */
export const kak_lsp = mkPackage(
  nixRaw`pkgs.kak-lsp`,
  "Kakoune Language Server Protocol Client",
);

/**
 * Kanji Kana Simple Inverter
 */
export const kakasi = mkPackage(
  nixRaw`pkgs.kakasi`,
  "Kanji Kana Simple Inverter",
);

/**
 * A vim inspired text editor
 */
export const kakoune = mkPackage(
  nixRaw`pkgs.kakoune`,
  "A vim inspired text editor",
);

/**
 * A command-line tool for Kakoune
 */
export const kakoune_cr = mkPackage(
  nixRaw`pkgs.kakoune-cr`,
  "A command-line tool for Kakoune",
);

/**
 * A vim inspired text editor
 */
export const kakoune_unwrapped = mkPackage(
  nixRaw`pkgs.kakoune-unwrapped`,
  "A vim inspired text editor",
);

/**
 * Speech Recognition Toolkit
 */
export const kaldi = mkPackage(
  nixRaw`pkgs.kaldi`,
  "Speech Recognition Toolkit",
);

/**
 * Calculate local oscillator frequency offset in hackrf devices
 */
export const kalibrate_hackrf = mkPackage(
  nixRaw`pkgs.kalibrate-hackrf`,
  "Calculate local oscillator frequency offset in hackrf devices",
);

/**
 * Calculate local oscillator frequency offset in RTL-SDR devices
 */
export const kalibrate_rtl = mkPackage(
  nixRaw`pkgs.kalibrate-rtl`,
  "Calculate local oscillator frequency offset in RTL-SDR devices",
);

/**
 * A fast multiple sequence alignment program
 */
export const kalign = mkPackage(
  nixRaw`pkgs.kalign`,
  "A fast multiple sequence alignment program",
);

/**
 * A command line calculator
 */
export const kalker = mkPackage(
  nixRaw`pkgs.kalker`,
  "A command line calculator",
);

/**
 * Program for quantifying abundances of transcripts from RNA-Seq data
 */
export const kallisto = mkPackage(
  nixRaw`pkgs.kallisto`,
  "Program for quantifying abundances of transcripts from RNA-Seq data",
);

/**
 * Fast and flexible SIP server, proxy, SBC, and load balancer
 */
export const kamailio = mkPackage(
  nixRaw`pkgs.kamailio`,
  "Fast and flexible SIP server, proxy, SBC, and load balancer",
);

/**
 * A FREE, easy-to-use and portable implementation of a 9p file server daemon for UNIX-like systems
 */
export const kamid = mkPackage(
  nixRaw`pkgs.kamid`,
  "A FREE, easy-to-use and portable implementation of a 9p file server daemon for UNIX-like systems",
);

/**
 * A functional, flexible, and concise Lisp
 */
export const kamilalisp = mkPackage(
  nixRaw`pkgs.kamilalisp`,
  "A functional, flexible, and concise Lisp",
);

/**
 * A tool to improve keyboard comfort and usability with advanced customization
 */
export const kanata = mkPackage(
  nixRaw`pkgs.kanata`,
  "A tool to improve keyboard comfort and usability with advanced customization",
);

/**
 * A tool to improve keyboard comfort and usability with advanced customization
 */
export const kanata_with_cmd = mkPackage(
  nixRaw`pkgs.kanata-with-cmd`,
  "A tool to improve keyboard comfort and usability with advanced customization",
);

/**
 * A simple, secure and fast identity management platform
 */
export const kanidm = mkPackage(
  nixRaw`pkgs.kanidm`,
  "A simple, secure and fast identity management platform",
);

/**
 * Cluster management and administration swiss army knife
 */
export const kanif = mkPackage(
  nixRaw`pkgs.kanif`,
  "Cluster management and administration swiss army knife",
);

/**
 * A tool to build container images from a Dockerfile, inside a container or Kubernetes cluster
 */
export const kaniko = mkPackage(
  nixRaw`pkgs.kaniko`,
  "A tool to build container images from a Dockerfile, inside a container or Kubernetes cluster",
);

/**
 * A loopless Thai and sans serif Latin typeface for contemporary and futuristic uses
 */
export const kanit_font = mkPackage(
  nixRaw`pkgs.kanit-font`,
  "A loopless Thai and sans serif Latin typeface for contemporary and futuristic uses",
);

/**
 * Font containing stroke order diagrams for over 6500 kanji, 180 kana and other characters
 */
export const kanji_stroke_order_font = mkPackage(
  nixRaw`pkgs.kanji-stroke-order-font`,
  "Font containing stroke order diagrams for over 6500 kanji, 180 kana and other characters",
);

/**
 * Handwritten kanji recognition
 */
export const kanjidraw = mkPackage(
  nixRaw`pkgs.kanjidraw`,
  "Handwritten kanji recognition",
);

/**
 * Dynamic display configuration tool
 */
export const kanshi = mkPackage(
  nixRaw`pkgs.kanshi`,
  "Dynamic display configuration tool",
);

/**
 * Open source framework for processing, monitoring, and alerting on time series data
 */
export const kapacitor = mkPackage(
  nixRaw`pkgs.kapacitor`,
  "Open source framework for processing, monitoring, and alerting on time series data",
);

/**
 * Set of LADSPA and LV2 plugins for guitar sound processing
 */
export const kapitonov_plugins_pack = mkPackage(
  nixRaw`pkgs.kapitonov-plugins-pack`,
  "Set of LADSPA and LV2 plugins for guitar sound processing",
);

/**
 * Punch clock to track time spent on projects
 */
export const kapow = mkPackage(
  nixRaw`pkgs.kapow`,
  "Punch clock to track time spent on projects",
);

/**
 * Expose command-line tools over HTTP
 */
export const kapowbang = mkPackage(
  nixRaw`pkgs.kapowbang`,
  "Expose command-line tools over HTTP",
);

/**
 * CLI tool that encourages Kubernetes users to manage bulk resources with an application abstraction for grouping
 */
export const kapp = mkPackage(
  nixRaw`pkgs.kapp`,
  "CLI tool that encourages Kubernetes users to manage bulk resources with an application abstraction for grouping",
);

/**
 * Remote control for Icom radio transceivers
 */
export const kappanhang = mkPackage(
  nixRaw`pkgs.kappanhang`,
  "Remote control for Icom radio transceivers",
);

/**
 * Karabiner-Elements is a powerful utility for keyboard customization on macOS Sierra (10.12) or later.
 */
export const karabiner_elements = mkPackage(
  nixRaw`pkgs.karabiner-elements`,
  "Karabiner-Elements is a powerful utility for keyboard customization on macOS Sierra (10.12) or later.",
);

/**
 * API Test Automation Made Simple
 */
export const karate = mkPackage(
  nixRaw`pkgs.karate`,
  "API Test Automation Made Simple",
);

/**
 * A tool helps to deploy a kubernetes cluster with Ansible
 */
export const kargo = mkPackage(
  nixRaw`pkgs.kargo`,
  "A tool helps to deploy a kubernetes cluster with Ansible",
);

/**
 * Mobile-friendly GTK calendar application
 */
export const karlender = mkPackage(
  nixRaw`pkgs.karlender`,
  "Mobile-friendly GTK calendar application",
);

/**
 * Alert dashboard for Prometheus Alertmanager
 */
export const karma = mkPackage(
  nixRaw`pkgs.karma`,
  "Alert dashboard for Prometheus Alertmanager",
);

/**
 * Spectacular Test Runner for JavaScript
 */
export const karma_runner = mkPackage(
  nixRaw`pkgs.karma-runner`,
  "Spectacular Test Runner for JavaScript",
);

/**
 * A client tool to help manage KubeArmor
 */
export const karmor = mkPackage(
  nixRaw`pkgs.karmor`,
  "A client tool to help manage KubeArmor",
);

/**
 * Streaming containerized apps and desktops to end-users
 */
export const kasmweb = mkPackage(
  nixRaw`pkgs.kasmweb`,
  "Streaming containerized apps and desktops to end-users",
);

/**
 * Go engine modeled after AlphaGo Zero
 */
export const katago = mkPackage(
  nixRaw`pkgs.katago`,
  "Go engine modeled after AlphaGo Zero",
);

/**
 * Go engine modeled after AlphaGo Zero
 */
export const katagoCPU = mkPackage(
  nixRaw`pkgs.katagoCPU`,
  "Go engine modeled after AlphaGo Zero",
);

/**
 * Go engine modeled after AlphaGo Zero
 */
export const katagoTensorRT = mkPackage(
  nixRaw`pkgs.katagoTensorRT`,
  "Go engine modeled after AlphaGo Zero",
);

/**
 * Go engine modeled after AlphaGo Zero
 */
export const katagoWithCuda = mkPackage(
  nixRaw`pkgs.katagoWithCuda`,
  "Go engine modeled after AlphaGo Zero",
);

/**
 * A next-generation crawling and spidering framework
 */
export const katana = mkPackage(
  nixRaw`pkgs.katana`,
  "A next-generation crawling and spidering framework",
);

/**
 * Bishoujo-style visual novel by Four Leaf Studios, built in Ren'Py
 */
export const katawa_shoujo = mkPackage(
  nixRaw`pkgs.katawa-shoujo`,
  "Bishoujo-style visual novel by Four Leaf Studios, built in Ren'Py",
);

/**
 * An experimental GNU make clone
 */
export const kati = mkPackage(
  nixRaw`pkgs.kati`,
  "An experimental GNU make clone",
);

/**
 * A non-reparenting, dynamic window manager with decorations
 */
export const katriawm = mkPackage(
  nixRaw`pkgs.katriawm`,
  "A non-reparenting, dynamic window manager with decorations",
);

/**
 * A to-do list for shopping or other use cases
 */
export const kaufkauflist = mkPackage(
  nixRaw`pkgs.kaufkauflist`,
  "A to-do list for shopping or other use cases",
);

/**
 * A fast, feature rich, cross platform reading server
 */
export const kavita = mkPackage(
  nixRaw`pkgs.kavita`,
  "A fast, feature rich, cross platform reading server",
);

/**
 * An arab fixed-width font
 */
export const kawkab_mono_font = mkPackage(
  nixRaw`pkgs.kawkab-mono-font`,
  "An arab fixed-width font",
);

/**
 * A screencasting program created with design in mind
 */
export const kazam = mkPackage(
  nixRaw`pkgs.kazam`,
  "A screencasting program created with design in mind",
);

/**
 * A minimalist command line knowledge base manager
 */
export const kb = mkPackage(
  nixRaw`pkgs.kb`,
  "A minimalist command line knowledge base manager",
);

/**
 * Linux keyboard tools and keyboard maps
 */
export const kbd = mkPackage(
  nixRaw`pkgs.kbd`,
  "Linux keyboard tools and keyboard maps",
);

/**
 * Simple daemon and library to make per window layout using XKB
 */
export const kbdd = mkPackage(
  nixRaw`pkgs.kbdd`,
  "Simple daemon and library to make per window layout using XKB",
);

/**
 * A very simple application that changes MacBooks' keyboard backlight level
 */
export const kbdlight = mkPackage(
  nixRaw`pkgs.kbdlight`,
  "A very simple application that changes MacBooks' keyboard backlight level",
);

/**
 * The Keybase filesystem
 */
export const kbfs = mkPackage(
  nixRaw`pkgs.kbfs`,
  "The Keybase filesystem",
);

/**
 * Bibliography editor for KDE
 */
export const kbibtex = mkPackage(
  nixRaw`pkgs.kbibtex`,
  "Bibliography editor for KDE",
);

/**
 * A secret manager backed by age
 */
export const kbs2 = mkPackage(
  nixRaw`pkgs.kbs2`,
  "A secret manager backed by age",
);

/**
 * Kubestack framework CLI
 */
export const kbst = mkPackage(
  nixRaw`pkgs.kbst`,
  "Kubestack framework CLI",
);

/**
 * Keyboard tester in terminal
 */
export const kbt = mkPackage(
  nixRaw`pkgs.kbt`,
  "Keyboard tester in terminal",
);

/**
 * A generic non-JVM producer and consumer for Apache Kafka
 */
export const kcat = mkPackage(
  nixRaw`pkgs.kcat`,
  "A generic non-JVM producer and consumer for Apache Kafka",
);

/**
 * Python app to convert comic/manga files or folders to EPUB, Panel View MOBI or E-Ink optimized CBZ
 */
export const kcc = mkPackage(
  nixRaw`pkgs.kcc`,
  "Python app to convert comic/manga files or folders to EPUB, Panel View MOBI or E-Ink optimized CBZ",
);

/**
 * Minimal CGI and FastCGI library for C/C++
 */
export const kcgi = mkPackage(
  nixRaw`pkgs.kcgi`,
  "Minimal CGI and FastCGI library for C/C++",
);

/**
 * CHM (Winhelp) files viewer
 */
export const kchmviewer = mkPackage(
  nixRaw`pkgs.kchmviewer`,
  "CHM (Winhelp) files viewer",
);

/**
 * A graphical frontend to collectd
 */
export const kcollectd = mkPackage(
  nixRaw`pkgs.kcollectd`,
  "A graphical frontend to collectd",
);

/**
 * An opinionated command line tool for managing multiple kubeconfigs
 */
export const kconf = mkPackage(
  nixRaw`pkgs.kconf`,
  "An opinionated command line tool for managing multiple kubeconfigs",
);

/**
 * Out of Linux tree packaging of the kconfig infrastructure
 */
export const kconfig_frontends = mkPackage(
  nixRaw`pkgs.kconfig-frontends`,
  "Out of Linux tree packaging of the kconfig infrastructure",
);

/**
 * Code coverage tester for compiled programs, Python scripts and shell scripts
 */
export const kcov = mkPackage(
  nixRaw`pkgs.kcov`,
  "Code coverage tester for compiled programs, Python scripts and shell scripts",
);

/**
 * A Fast and Reliable ARQ Protocol
 */
export const kcp = mkPackage(
  nixRaw`pkgs.kcp`,
  "A Fast and Reliable ARQ Protocol",
);

/**
 * A simple and fast dashboard for Kubernetes
 */
export const kdash = mkPackage(
  nixRaw`pkgs.kdash`,
  "A simple and fast dashboard for Kubernetes",
);

        /**
         * A graphical user interface to gdb, the GNU debugger. It provides an
intuitive interface for setting breakpoints, inspecting variables, and
stepping through code.

         */
export const kdbg = mkPackage(
  nixRaw`pkgs.kdbg`,
  "A graphical user interface to gdb, the GNU debugger. It provides an\nintuitive interface for setting breakpoints, inspecting variables, and\nstepping through code.\n",
);

/**
 * Analytics and time-series database
 */
export const kdbplus = mkPackage(
  nixRaw`pkgs.kdbplus`,
  "Analytics and time-series database",
);

/**
 * KDAB's Dock Widget Framework for Qt
 */
export const kddockwidgets = mkPackage(
  nixRaw`pkgs.kddockwidgets`,
  "KDAB's Dock Widget Framework for Qt",
);

/**
 * A suite of themes for KDE applications that match the retro gruvbox colorscheme
 */
export const kde_gruvbox = mkPackage(
  nixRaw`pkgs.kde-gruvbox`,
  "A suite of themes for KDE applications that match the retro gruvbox colorscheme",
);

/**
 * Rounds the corners of your windows
 */
export const kde_rounded_corners = mkPackage(
  nixRaw`pkgs.kde-rounded-corners`,
  "Rounds the corners of your windows",
);

/**
 * Delta Chat client using Kirigami framework
 */
export const kdeltachat = mkPackage(
  nixRaw`pkgs.kdeltachat`,
  "Delta Chat client using Kirigami framework",
);

/**
 * Compares and merges 2 or 3 files or directories
 */
export const kdiff3 = mkPackage(
  nixRaw`pkgs.kdiff3`,
  "Compares and merges 2 or 3 files or directories",
);

/**
 * An in-pod context discovery tool for Kubernetes penetration testing
 */
export const kdigger = mkPackage(
  nixRaw`pkgs.kdigger`,
  "An in-pod context discovery tool for Kubernetes penetration testing",
);

/**
 * HDD and SSD benchmark tool with a friendly graphical user interface
 */
export const kdiskmark = mkPackage(
  nixRaw`pkgs.kdiskmark`,
  "HDD and SSD benchmark tool with a friendly graphical user interface",
);

/**
 * Dock any application into the system tray
 */
export const kdocker = mkPackage(
  nixRaw`pkgs.kdocker`,
  "Dock any application into the system tray",
);

/**
 * Environment analysis tool for Kotlin Multiplatform Mobile
 */
export const kdoctor = mkPackage(
  nixRaw`pkgs.kdoctor`,
  "Environment analysis tool for Kotlin Multiplatform Mobile",
);

/**
 * High-performance, extensible DHCP server by ISC
 */
export const kea = mkPackage(
  nixRaw`pkgs.kea`,
  "High-performance, extensible DHCP server by ISC",
);

/**
 * Kea Migration Assistent
 */
export const keama = mkPackage(
  nixRaw`pkgs.keama`,
  "Kea Migration Assistent",
);

/**
 * Commander Keen Episode 4: Secret of the Oracle
 */
export const keen4 = mkPackage(
  nixRaw`pkgs.keen4`,
  "Commander Keen Episode 4: Secret of the Oracle",
);

export const keepBuildTree = mkPackage(
  nixRaw`pkgs.keepBuildTree`,
  "",
);

/**
 * Routing software written in C
 */
export const keepalived = mkPackage(
  nixRaw`pkgs.keepalived`,
  "Routing software written in C",
);

/**
 * GUI password manager with strong cryptography
 */
export const keepass = mkPackage(
  nixRaw`pkgs.keepass`,
  "GUI password manager with strong cryptography",
);

export const keepass_charactercopy = mkPackage(
  nixRaw`pkgs.keepass-charactercopy`,
  "",
);

/**
 * A CLI-tool to diff Keepass (.kdbx) files
 */
export const keepass_diff = mkPackage(
  nixRaw`pkgs.keepass-diff`,
  "A CLI-tool to diff Keepass (.kdbx) files",
);

export const keepass_keeagent = mkPackage(
  nixRaw`pkgs.keepass-keeagent`,
  "",
);

export const keepass_keepasshttp = mkPackage(
  nixRaw`pkgs.keepass-keepasshttp`,
  "",
);

export const keepass_keepassrpc = mkPackage(
  nixRaw`pkgs.keepass-keepassrpc`,
  "",
);

export const keepass_keetraytotp = mkPackage(
  nixRaw`pkgs.keepass-keetraytotp`,
  "",
);

export const keepass_otpkeyprov = mkPackage(
  nixRaw`pkgs.keepass-otpkeyprov`,
  "",
);

export const keepass_qrcodeview = mkPackage(
  nixRaw`pkgs.keepass-qrcodeview`,
  "",
);

/**
 * Offline password manager with many features.
 */
export const keepassxc = mkPackage(
  nixRaw`pkgs.keepassxc`,
  "Offline password manager with many features.",
);

/**
 * A dungeon management rogue-like
 */
export const keeperrl = mkPackage(
  nixRaw`pkgs.keeperrl`,
  "A dungeon management rogue-like",
);

/**
 * Using KeepKey as hardware-based SSH/PGP agent
 */
export const keepkey_agent = mkPackage(
  nixRaw`pkgs.keepkey_agent`,
  "Using KeepKey as hardware-based SSH/PGP agent",
);

/**
 * Dmenu/Rofi frontend for Keepass databases
 */
export const keepmenu = mkPackage(
  nixRaw`pkgs.keepmenu`,
  "Dmenu/Rofi frontend for Keepass databases",
);

/**
 * Tool to automate KeePass discovery and secret extraction
 */
export const keepwn = mkPackage(
  nixRaw`pkgs.keepwn`,
  "Tool to automate KeePass discovery and secret extraction",
);

/**
 * Peer-to-Peer Chat
 */
export const keet = mkPackage(
  nixRaw`pkgs.keet`,
  "Peer-to-Peer Chat",
);

/**
 * Free cross-platform password manager compatible with KeePass
 */
export const keeweb = mkPackage(
  nixRaw`pkgs.keeweb`,
  "Free cross-platform password manager compatible with KeePass",
);

/**
 * Sega SG1000, SC3000, SF7000, Master System, Game Gear, Genesis/Megadrive, SVP, Pico, SegaCD/MegaCD and 32X emulator
 */
export const kega_fusion = mkPackage(
  nixRaw`pkgs.kega-fusion`,
  "Sega SG1000, SC3000, SF7000, Master System, Game Gear, Genesis/Megadrive, SVP, Pico, SegaCD/MegaCD and 32X emulator",
);

/**
 * macOS file archiver
 */
export const keka = mkPackage(
  nixRaw`pkgs.keka`,
  "macOS file archiver",
);

/**
 * Kimai desktop client written in QT6
 */
export const kemai = mkPackage(
  nixRaw`pkgs.kemai`,
  "Kimai desktop client written in QT6",
);

/**
 * UCSC Genome Bioinformatics Group's suite of biological analysis tools, i.e. the kent utilities
 */
export const kent = mkPackage(
  nixRaw`pkgs.kent`,
  "UCSC Genome Bioinformatics Group's suite of biological analysis tools, i.e. the kent utilities",
);

/**
 * NIST-based CVE lookup store and API powered by Rust
 */
export const kepler = mkPackage(
  nixRaw`pkgs.kepler`,
  "NIST-based CVE lookup store and API powered by Rust",
);

/**
 * EPUB to KEPUB converter
 */
export const kepubify = mkPackage(
  nixRaw`pkgs.kepubify`,
  "EPUB to KEPUB converter",
);

/**
 * Kerberos bruteforce utility
 */
export const kerbrute = mkPackage(
  nixRaw`pkgs.kerbrute`,
  "Kerberos bruteforce utility",
);

/**
 * Columnar tick database and time-series language
 */
export const kerf = mkPackage(
  nixRaw`pkgs.kerf`,
  "Columnar tick database and time-series language",
);

/**
 * Columnar tick database and time-series language
 */
export const kerf_1 = mkPackage(
  nixRaw`pkgs.kerf_1`,
  "Columnar tick database and time-series language",
);

/**
 * Portable Scriptable Network and Serial Communication Software
 */
export const kermit = mkPackage(
  nixRaw`pkgs.kermit`,
  "Portable Scriptable Network and Serial Communication Software",
);

/**
 * A VTE-based, simple and froggy terminal emulator
 */
export const kermit_terminal = mkPackage(
  nixRaw`pkgs.kermit-terminal`,
  "A VTE-based, simple and froggy terminal emulator",
);

/**
 * GUI for trace-cmd which is an interface for the Linux kernel ftrace subsystem
 */
export const kernelshark = mkPackage(
  nixRaw`pkgs.kernelshark`,
  "GUI for trace-cmd which is an interface for the Linux kernel ftrace subsystem",
);

/**
 * File encryption done right
 */
export const kestrel = mkPackage(
  nixRaw`pkgs.kestrel`,
  "File encryption done right",
);

/**
 * Tools related to the kexec Linux feature
 */
export const kexec_tools = mkPackage(
  nixRaw`pkgs.kexec-tools`,
  "Tools related to the kexec Linux feature",
);

/**
 * A open source visual database applications creator, a long-awaited competitor for programs like MS Access or Filemaker
 */
export const kexi = mkPackage(
  nixRaw`pkgs.kexi`,
  "A open source visual database applications creator, a long-awaited competitor for programs like MS Access or Filemaker",
);

/**
 * Java formal verification tool
 */
export const key = mkPackage(
  nixRaw`pkgs.key`,
  "Java formal verification tool",
);

/**
 * The Keybase official command-line utility and service
 */
export const keybase = mkPackage(
  nixRaw`pkgs.keybase`,
  "The Keybase official command-line utility and service",
);

/**
 * The Keybase official GUI
 */
export const keybase_gui = mkPackage(
  nixRaw`pkgs.keybase-gui`,
  "The Keybase official GUI",
);

/**
 * Library for registering global key bindings
 */
export const keybinder = mkPackage(
  nixRaw`pkgs.keybinder`,
  "Library for registering global key bindings",
);

/**
 * Library for registering global key bindings
 */
export const keybinder3 = mkPackage(
  nixRaw`pkgs.keybinder3`,
  "Library for registering global key bindings",
);

/**
 * A command line tool and shell to manage keycards
 */
export const keycard_cli = mkPackage(
  nixRaw`pkgs.keycard-cli`,
  "A command line tool and shell to manage keycards",
);

/**
 * Keychain management tool
 */
export const keychain = mkPackage(
  nixRaw`pkgs.keychain`,
  "Keychain management tool",
);

/**
 * Identity and access management for modern applications and services
 */
export const keycloak = mkPackage(
  nixRaw`pkgs.keycloak`,
  "Identity and access management for modern applications and services",
);

/**
 * A key remapping daemon for linux.
 */
export const keyd = mkPackage(
  nixRaw`pkgs.keyd`,
  "A key remapping daemon for linux.",
);

/**
 * Musical key detection for digital audio (graphical UI)
 */
export const keyfinder = mkPackage(
  nixRaw`pkgs.keyfinder`,
  "Musical key detection for digital audio (graphical UI)",
);

/**
 * Musical key detection for digital audio (command-line tool)
 */
export const keyfinder_cli = mkPackage(
  nixRaw`pkgs.keyfinder-cli`,
  "Musical key detection for digital audio (command-line tool)",
);

/**
 * Manipulate the scancode/keycode translation tables of keyboard drivers
 */
export const keyfuzz = mkPackage(
  nixRaw`pkgs.keyfuzz`,
  "Manipulate the scancode/keycode translation tables of keyboard drivers",
);

/**
 * Advanced RGB animation service for Logitech keyboards
 */
export const keyleds = mkPackage(
  nixRaw`pkgs.keyleds`,
  "Advanced RGB animation service for Logitech keyboards",
);

/**
 * A desktop application to control Elgato Keylights
 */
export const keylight_controller_mschneider82 = mkPackage(
  nixRaw`pkgs.keylight-controller-mschneider82`,
  "A desktop application to control Elgato Keylights",
);

/**
 * A cross-platform context-aware key remapper
 */
export const keymapper = mkPackage(
  nixRaw`pkgs.keymapper`,
  "A cross-platform context-aware key remapper",
);

/**
 * A qmk keymap.c visualizer
 */
export const keymapviz = mkPackage(
  nixRaw`pkgs.keymapviz`,
  "A qmk keymap.c visualizer",
);

/**
 * Generate X11 mouse clicks from keyboard
 */
export const keynav = mkPackage(
  nixRaw`pkgs.keynav`,
  "Generate X11 mouse clicks from keyboard",
);

/**
 * A key and secret workflow (validation, invalidation, etc.) tool
 */
export const keyscope = mkPackage(
  nixRaw`pkgs.keyscope`,
  "A key and secret workflow (validation, invalidation, etc.) tool",
);

/**
 * Lightweight multi-platform, multi-architecture assembler framework
 */
export const keystone = mkPackage(
  nixRaw`pkgs.keystone`,
  "Lightweight multi-platform, multi-architecture assembler framework",
);

/**
 * Open source GUI replacement for the Java command-line utilities keytool and jarsigner
 */
export const keystore_explorer = mkPackage(
  nixRaw`pkgs.keystore-explorer`,
  "Open source GUI replacement for the Java command-line utilities keytool and jarsigner",
);

/**
 * Tools used to control the Linux kernel key management system
 */
export const keyutils = mkPackage(
  nixRaw`pkgs.keyutils`,
  "Tools used to control the Linux kernel key management system",
);

/**
 * Command-line tool that filters Kubernetes resources
 */
export const kfilt = mkPackage(
  nixRaw`pkgs.kfilt`,
  "Command-line tool that filters Kubernetes resources",
);

/**
 * A Graphviz dot graph viewer for KDE
 */
export const kgraphviewer = mkPackage(
  nixRaw`pkgs.kgraphviewer`,
  "A Graphviz dot graph viewer for KDE",
);

/**
 * BNF wrangling and railroad diagrams
 */
export const kgt = mkPackage(
  nixRaw`pkgs.kgt`,
  "BNF wrangling and railroad diagrams",
);

/**
 * CLI calendar application
 */
export const khal = mkPackage(
  nixRaw`pkgs.khal`,
  "CLI calendar application",
);

/**
 * Console carddav client
 */
export const khard = mkPackage(
  nixRaw`pkgs.khard`,
  "Console carddav client",
);

/**
 * A simple modal hotkey daemon for OSX
 */
export const khd = mkPackage(
  nixRaw`pkgs.khd`,
  "A simple modal hotkey daemon for OSX",
);

/**
 * KhmerOS Unicode fonts for the Khmer language
 */
export const khmeros = mkPackage(
  nixRaw`pkgs.khmeros`,
  "KhmerOS Unicode fonts for the Khmer language",
);

/**
 * Natural Language Search Assistant for your Org-Mode and Markdown notes, Beancount transactions and Photos
 */
export const khoj = mkPackage(
  nixRaw`pkgs.khoj`,
  "Natural Language Search Assistant for your Org-Mode and Markdown notes, Beancount transactions and Photos",
);

/**
 * Track each task's time in a simple inobtrusive way
 */
export const khronos = mkPackage(
  nixRaw`pkgs.khronos`,
  "Track each task's time in a simple inobtrusive way",
);

/**
 * Official Khronos OpenCL ICD Loader
 */
export const khronos_ocl_icd_loader = mkPackage(
  nixRaw`pkgs.khronos-ocl-icd-loader`,
  "Official Khronos OpenCL ICD Loader",
);

/**
 * Visualize logs and time-stamped data
 */
export const kibana = mkPackage(
  nixRaw`pkgs.kibana`,
  "Visualize logs and time-stamped data",
);

/**
 * Visualize logs and time-stamped data
 */
export const kibana7 = mkPackage(
  nixRaw`pkgs.kibana7`,
  "Visualize logs and time-stamped data",
);

/**
 * A text editor in ≤1024 lines of code, written in Rust
 */
export const kibi = mkPackage(
  nixRaw`pkgs.kibi`,
  "A text editor in ≤1024 lines of code, written in Rust",
);

/**
 * Open Source Electronics Design Automation suite
 */
export const kicad = mkPackage(
  nixRaw`pkgs.kicad`,
  "Open Source Electronics Design Automation suite",
);

/**
 * Open Source Electronics Design Automation suite, without 3D models
 */
export const kicad_small = mkPackage(
  nixRaw`pkgs.kicad-small`,
  "Open Source Electronics Design Automation suite, without 3D models",
);

/**
 * Open Source EDA suite, development build
 */
export const kicad_unstable = mkPackage(
  nixRaw`pkgs.kicad-unstable`,
  "Open Source EDA suite, development build",
);

/**
 * Open Source EDA suite, development build, without 3D models
 */
export const kicad_unstable_small = mkPackage(
  nixRaw`pkgs.kicad-unstable-small`,
  "Open Source EDA suite, development build, without 3D models",
);

/**
 * Minimalistic program launcher
 */
export const kickoff = mkPackage(
  nixRaw`pkgs.kickoff`,
  "Minimalistic program launcher",
);

/**
 * CLI interface to the Kimai time tracking project
 */
export const kicli = mkPackage(
  nixRaw`pkgs.kicli`,
  "CLI interface to the Kimai time tracking project",
);

        /**
         * Find security vulnerabilities, compliance issues, and infrastructure misconfigurations early in the development
cycle of your infrastructure-as-code with KICS by Checkmarx.

         */
export const kics = mkPackage(
  nixRaw`pkgs.kics`,
  "Find security vulnerabilities, compliance issues, and infrastructure misconfigurations early in the development\ncycle of your infrastructure-as-code with KICS by Checkmarx.\n",
);

/**
 * A simple and powerful audio tag editor
 */
export const kid3 = mkPackage(
  nixRaw`pkgs.kid3`,
  "A simple and powerful audio tag editor",
);

/**
 * User-friendly TeX/LaTeX authoring tool for the KDE desktop environment
 */
export const kile = mkPackage(
  nixRaw`pkgs.kile`,
  "User-friendly TeX/LaTeX authoring tool for the KDE desktop environment",
);

/**
 * A tiling layout generator for river
 */
export const kile_wl = mkPackage(
  nixRaw`pkgs.kile-wl`,
  "A tiling layout generator for river",
);

export const killall = mkPackage(
  nixRaw`pkgs.killall`,
  "",
);

/**
 * A command-line tool to easily kill processes running on a specified port
 */
export const killport = mkPackage(
  nixRaw`pkgs.killport`,
  "A command-line tool to easily kill processes running on a specified port",
);

/**
 * A simple static site generator for Gemini
 */
export const kiln = mkPackage(
  nixRaw`pkgs.kiln`,
  "A simple static site generator for Gemini",
);

/**
 * Korean IME
 */
export const kime = mkPackage(
  nixRaw`pkgs.kime`,
  "Korean IME",
);

/**
 * Kubernetes IN Docker - local clusters for testing Kubernetes
 */
export const kind = mkPackage(
  nixRaw`pkgs.kind`,
  "Kubernetes IN Docker - local clusters for testing Kubernetes",
);

/**
 * A functional programming language and proof assistant
 */
export const kind2 = mkPackage(
  nixRaw`pkgs.kind2`,
  "A functional programming language and proof assistant",
);

/**
 * Tools to enable audio input from the Microsoft Kinect sensor device
 */
export const kinect_audio_setup = mkPackage(
  nixRaw`pkgs.kinect-audio-setup`,
  "Tools to enable audio input from the Microsoft Kinect sensor device",
);

/**
 * Kingst Virtual Instruments Studio, software for logic analyzers
 */
export const kingstvis = mkPackage(
  nixRaw`pkgs.kingstvis`,
  "Kingst Virtual Instruments Studio, software for logic analyzers",
);

/**
 * FUSE Interface for KIO
 */
export const kio_fuse = mkPackage(
  nixRaw`pkgs.kio-fuse`,
  "FUSE Interface for KIO",
);

/**
 * Tiny IRC client written in C99
 */
export const kirc = mkPackage(
  nixRaw`pkgs.kirc`,
  "Tiny IRC client written in C99",
);

/**
 * Wireless network sniffer
 */
export const kismet = mkPackage(
  nixRaw`pkgs.kismet`,
  "Wireless network sniffer",
);

/**
 * A 'keep it simple and clean bare metal SAT solver' written in C
 */
export const kissat = mkPackage(
  nixRaw`pkgs.kissat`,
  "A 'keep it simple and clean bare metal SAT solver' written in C",
);

/**
 * A mixed-radix Fast Fourier Transform based up on the KISS principle
 */
export const kissfft = mkPackage(
  nixRaw`pkgs.kissfft`,
  "A mixed-radix Fast Fourier Transform based up on the KISS principle",
);

/**
 * A mixed-radix Fast Fourier Transform based up on the KISS principle
 */
export const kissfftFloat = mkPackage(
  nixRaw`pkgs.kissfftFloat`,
  "A mixed-radix Fast Fourier Transform based up on the KISS principle",
);

/**
 * Convert STL files into Gcode
 */
export const kisslicer = mkPackage(
  nixRaw`pkgs.kisslicer`,
  "Convert STL files into Gcode",
);

/**
 * Contextual content discovery tool
 */
export const kiterunner = mkPackage(
  nixRaw`pkgs.kiterunner`,
  "Contextual content discovery tool",
);

/**
 * An accounting tool suitable for Finnish associations and small business
 */
export const kitsas = mkPackage(
  nixRaw`pkgs.kitsas`,
  "An accounting tool suitable for Finnish associations and small business",
);

/**
 * Kitty drop-down service for sway & i3wm
 */
export const kitti3 = mkPackage(
  nixRaw`pkgs.kitti3`,
  "Kitty drop-down service for sway & i3wm",
);

/**
 * A modern, hackable, featureful, OpenGL based terminal emulator
 */
export const kitty = mkPackage(
  nixRaw`pkgs.kitty`,
  "A modern, hackable, featureful, OpenGL based terminal emulator",
);

/**
 * Print images inline in kitty
 */
export const kitty_img = mkPackage(
  nixRaw`pkgs.kitty-img`,
  "Print images inline in kitty",
);

/**
 * Themes for the kitty terminal emulator
 */
export const kitty_themes = mkPackage(
  nixRaw`pkgs.kitty-themes`,
  "Themes for the kitty terminal emulator",
);

/**
 * An offline reader for Web content
 */
export const kiwix = mkPackage(
  nixRaw`pkgs.kiwix`,
  "An offline reader for Web content",
);

/**
 * Command line Kiwix tools: kiwix-serve, kiwix-manage, ...
 */
export const kiwix_tools = mkPackage(
  nixRaw`pkgs.kiwix-tools`,
  "Command line Kiwix tools: kiwix-serve, kiwix-manage, ...",
);

/**
 * The Bible, King James Version
 */
export const kjv = mkPackage(
  nixRaw`pkgs.kjv`,
  "The Bible, King James Version",
);

/**
 * The first Git web viewer that Just Works
 */
export const klaus = mkPackage(
  nixRaw`pkgs.klaus`,
  "The first Git web viewer that Just Works",
);

/**
 * Free touch typing tutor program
 */
export const klavaro = mkPackage(
  nixRaw`pkgs.klavaro`,
  "Free touch typing tutor program",
);

/**
 * High performance layout viewer and editor with support for GDS and OASIS
 */
export const klayout = mkPackage(
  nixRaw`pkgs.klayout`,
  "High performance layout viewer and editor with support for GDS and OASIS",
);

/**
 * A symbolic virtual machine built on top of LLVM
 */
export const klee = mkPackage(
  nixRaw`pkgs.klee`,
  "A symbolic virtual machine built on top of LLVM",
);

/**
 * Minimalistic libc subset for initramfs usage
 */
export const klibc = mkPackage(
  nixRaw`pkgs.klibc`,
  "Minimalistic libc subset for initramfs usage",
);

/**
 * Minimalistic libc subset for initramfs usage
 */
export const klibcShrunk = mkPackage(
  nixRaw`pkgs.klibcShrunk`,
  "Minimalistic libc subset for initramfs usage",
);

/**
 * Advanced command-line metronome for JACK
 */
export const klick = mkPackage(
  nixRaw`pkgs.klick`,
  "Advanced command-line metronome for JACK",
);

/**
 * The Klipper 3D printer firmware
 */
export const klipper = mkPackage(
  nixRaw`pkgs.klipper`,
  "The Klipper 3D printer firmware",
);

/**
 * Tool for determining the time a print will take using the Klipper firmware
 */
export const klipper_estimator = mkPackage(
  nixRaw`pkgs.klipper-estimator`,
  "Tool for determining the time a print will take using the Klipper firmware",
);

/**
 * Firmware part of Klipper
 */
export const klipper_firmware = mkPackage(
  nixRaw`pkgs.klipper-firmware`,
  "Firmware part of Klipper",
);

export const klipper_flash = mkPackage(
  nixRaw`pkgs.klipper-flash`,
  "",
);

export const klipper_genconf = mkPackage(
  nixRaw`pkgs.klipper-genconf`,
  "",
);

/**
 * Touchscreen GUI for the Klipper 3D printer firmware
 */
export const klipperscreen = mkPackage(
  nixRaw`pkgs.klipperscreen`,
  "Touchscreen GUI for the Klipper 3D printer firmware",
);

/**
 * A multiplatform free hamradio logger
 */
export const klog = mkPackage(
  nixRaw`pkgs.klog`,
  "A multiplatform free hamradio logger",
);

/**
 * The missing glue to put together large Kubernetes deployments
 */
export const kluctl = mkPackage(
  nixRaw`pkgs.kluctl`,
  "The missing glue to put together large Kubernetes deployments",
);

/**
 * A chiptune tracker
 */
export const klystrack = mkPackage(
  nixRaw`pkgs.klystrack`,
  "A chiptune tracker",
);

/**
 * ALSA MIDI metronome with Qt interface
 */
export const kmetronome = mkPackage(
  nixRaw`pkgs.kmetronome`,
  "ALSA MIDI metronome with Qt interface",
);

/**
 * Tools for loading and managing Linux kernel modules
 */
export const kmod = mkPackage(
  nixRaw`pkgs.kmod`,
  "Tools for loading and managing Linux kernel modules",
);

/**
 * Linux kernel module blacklists from Ubuntu
 */
export const kmod_blacklist_ubuntu = mkPackage(
  nixRaw`pkgs.kmod-blacklist-ubuntu`,
  "Linux kernel module blacklists from Ubuntu",
);

/**
 * Linux configuration file for modprobe
 */
export const kmod_debian_aliases = mkPackage(
  nixRaw`pkgs.kmod-debian-aliases`,
  "Linux configuration file for modprobe",
);

/**
 * Linux Kernel Manager and Activity Monitor
 */
export const kmon = mkPackage(
  nixRaw`pkgs.kmon`,
  "Linux Kernel Manager and Activity Monitor",
);

/**
 * MPlayer front-end for KDE
 */
export const kmplayer = mkPackage(
  nixRaw`pkgs.kmplayer`,
  "MPlayer front-end for KDE",
);

/**
 * KMS/DRM based System Console
 */
export const kmscon = mkPackage(
  nixRaw`pkgs.kmscon`,
  "KMS/DRM based System Console",
);

/**
 * Example OpenGL app using KMS/GBM
 */
export const kmscube = mkPackage(
  nixRaw`pkgs.kmscube`,
  "Example OpenGL app using KMS/GBM",
);

/**
 * A VNC server for DRM/KMS capable GNU/Linux devices
 */
export const kmsvnc = mkPackage(
  nixRaw`pkgs.kmsvnc`,
  "A VNC server for DRM/KMS capable GNU/Linux devices",
);

/**
 * C++11 library, utilities and python bindings for Linux kernel mode setting
 */
export const kmsxx = mkPackage(
  nixRaw`pkgs.kmsxx`,
  "C++11 library, utilities and python bindings for Linux kernel mode setting",
);

/**
 * Personal finance manager for KDE
 */
export const kmymoney = mkPackage(
  nixRaw`pkgs.kmymoney`,
  "Personal finance manager for KDE",
);

/**
 * The Knative client kn is your door to the Knative world. It allows you to create Knative resources interactively from the command line or from within scripts
 */
export const kn = mkPackage(
  nixRaw`pkgs.kn`,
  "The Knative client kn is your door to the Knative world. It allows you to create Knative resources interactively from the command line or from within scripts",
);

/**
 *  A bold, painted face for the rocker within
 */
export const knewave = mkPackage(
  nixRaw`pkgs.knewave`,
  " A bold, painted face for the rocker within",
);

/**
 * Utility to write a KFS filesystem into a ROM file
 */
export const knightos_genkfs = mkPackage(
  nixRaw`pkgs.knightos-genkfs`,
  "Utility to write a KFS filesystem into a ROM file",
);

/**
 * KnightOS C compiler
 */
export const knightos_kcc = mkPackage(
  nixRaw`pkgs.knightos-kcc`,
  "KnightOS C compiler",
);

/**
 * Converts image formats supported by stb_image to the KnightOS image format
 */
export const knightos_kimg = mkPackage(
  nixRaw`pkgs.knightos-kimg`,
  "Converts image formats supported by stb_image to the KnightOS image format",
);

/**
 * A tool to create or extract KnightOS packages
 */
export const knightos_kpack = mkPackage(
  nixRaw`pkgs.knightos-kpack`,
  "A tool to create or extract KnightOS packages",
);

/**
 * Packages KnightOS distribution files into a ROM
 */
export const knightos_mkrom = mkPackage(
  nixRaw`pkgs.knightos-mkrom`,
  "Packages KnightOS distribution files into a ROM",
);

/**
 * Makes TI calculator upgrade files from ROM dumps
 */
export const knightos_mktiupgrade = mkPackage(
  nixRaw`pkgs.knightos-mktiupgrade`,
  "Makes TI calculator upgrade files from ROM dumps",
);

/**
 * Patches jumptables into TI calculator ROM files and generates an include file
 */
export const knightos_patchrom = mkPackage(
  nixRaw`pkgs.knightos-patchrom`,
  "Patches jumptables into TI calculator ROM files and generates an include file",
);

/**
 * Assembler and linker for the Z80
 */
export const knightos_scas = mkPackage(
  nixRaw`pkgs.knightos-scas`,
  "Assembler and linker for the Z80",
);

/**
 * A Z80 calculator emulator and debugger
 */
export const knightos_z80e = mkPackage(
  nixRaw`pkgs.knightos-z80e`,
  "A Z80 calculator emulator and debugger",
);

/**
 * A simple and flexible build tool using Lua, similar to make/mk
 */
export const knit = mkPackage(
  nixRaw`pkgs.knit`,
  "A simple and flexible build tool using Lua, similar to make/mk",
);

/**
 * Tool to scan subdomains
 */
export const knockpy = mkPackage(
  nixRaw`pkgs.knockpy`,
  "Tool to scan subdomains",
);

/**
 * Authoritative-only DNS server from .cz domain registry
 */
export const knot_dns = mkPackage(
  nixRaw`pkgs.knot-dns`,
  "Authoritative-only DNS server from .cz domain registry",
);

/**
 * Caching validating DNS resolver, from .cz domain registry
 */
export const knot_resolver = mkPackage(
  nixRaw`pkgs.knot-resolver`,
  "Caching validating DNS resolver, from .cz domain registry",
);

/**
 * Tool for pentesting Microsoft Active Directory
 */
export const knowsmore = mkPackage(
  nixRaw`pkgs.knowsmore`,
  "Tool for pentesting Microsoft Active Directory",
);

/**
 * Kubernetes namespace switcher
 */
export const kns = mkPackage(
  nixRaw`pkgs.kns`,
  "Kubernetes namespace switcher",
);

/**
 * Advanced router/gateway for KNX
 */
export const knxd = mkPackage(
  nixRaw`pkgs.knxd`,
  "Advanced router/gateway for KNX",
);

/**
 * Build and deploy Go applications on Kubernetes
 */
export const ko = mkPackage(
  nixRaw`pkgs.ko`,
  "Build and deploy Go applications on Kubernetes",
);

/**
 * Enhanced version of Akira Higuchi's game XKobo  for Un*x systems with X11
 */
export const kobodeluxe = mkPackage(
  nixRaw`pkgs.kobodeluxe`,
  "Enhanced version of Akira Higuchi's game XKobo  for Un*x systems with X11",
);

/**
 * A frantic 80's style 2D shooter, similar to XKobo and Kobo Deluxe
 */
export const koboredux = mkPackage(
  nixRaw`pkgs.koboredux`,
  "A frantic 80's style 2D shooter, similar to XKobo and Kobo Deluxe",
);

/**
 * A frantic 80's style 2D shooter, similar to XKobo and Kobo Deluxe (built without proprietary assets)
 */
export const koboredux_free = mkPackage(
  nixRaw`pkgs.koboredux-free`,
  "A frantic 80's style 2D shooter, similar to XKobo and Kobo Deluxe (built without proprietary assets)",
);

/**
 * Japanese font, a free replacement for MS Gothic and MS Mincho
 */
export const kochi_substitute = mkPackage(
  nixRaw`pkgs.kochi-substitute`,
  "Japanese font, a free replacement for MS Gothic and MS Mincho",
);

/**
 * Japanese font, non-free replacement for MS Gothic and MS Mincho
 */
export const kochi_substitute_naga10 = mkPackage(
  nixRaw`pkgs.kochi-substitute-naga10`,
  "Japanese font, non-free replacement for MS Gothic and MS Mincho",
);

/**
 * A custom-designed typeface explicitly created for the developer community
 */
export const kode_mono = mkPackage(
  nixRaw`pkgs.kode-mono`,
  "A custom-designed typeface explicitly created for the developer community",
);

/**
 * Real-time GPU shader editor
 */
export const kodelife = mkPackage(
  nixRaw`pkgs.kodelife`,
  "Real-time GPU shader editor",
);

/**
 * Media center
 */
export const kodi = mkPackage(
  nixRaw`pkgs.kodi`,
  "Media center",
);

/**
 * Kodi/XBMC bash script to send Kodi commands using JSON RPC. It also allows sending YouTube videos to Kodi
 */
export const kodi_cli = mkPackage(
  nixRaw`pkgs.kodi-cli`,
  "Kodi/XBMC bash script to send Kodi commands using JSON RPC. It also allows sending YouTube videos to Kodi",
);

/**
 * Media center
 */
export const kodi_gbm = mkPackage(
  nixRaw`pkgs.kodi-gbm`,
  "Media center",
);

/**
 * Kodi retroarch advanced launchers
 */
export const kodi_retroarch_advanced_launchers = mkPackage(
  nixRaw`pkgs.kodi-retroarch-advanced-launchers`,
  "Kodi retroarch advanced launchers",
);

/**
 * Media center
 */
export const kodi_wayland = mkPackage(
  nixRaw`pkgs.kodi-wayland`,
  "Media center",
);

/**
 * Koka language compiler and interpreter
 */
export const koka = mkPackage(
  nixRaw`pkgs.koka`,
  "Koka language compiler and interpreter",
);

/**
 * C++ Performance Portability Programming EcoSystem
 */
export const kokkos = mkPackage(
  nixRaw`pkgs.kokkos`,
  "C++ Performance Portability Programming EcoSystem",
);

/**
 * Free and open source comics/mangas server
 */
export const komga = mkPackage(
  nixRaw`pkgs.komga`,
  "Free and open source comics/mangas server",
);

/**
 * Manga reader for GNOME
 */
export const komikku = mkPackage(
  nixRaw`pkgs.komikku`,
  "Manga reader for GNOME",
);

/**
 * A beautiful and customizable wallpaper manager for Linux
 */
export const komorebi = mkPackage(
  nixRaw`pkgs.komorebi`,
  "A beautiful and customizable wallpaper manager for Linux",
);

/**
 * A tool to help users who are familiar with docker-compose move to Kubernetes
 */
export const kompose = mkPackage(
  nixRaw`pkgs.kompose`,
  "A tool to help users who are familiar with docker-compose move to Kubernetes",
);

/**
 * General purpose GPU compute framework built on Vulkan
 */
export const kompute = mkPackage(
  nixRaw`pkgs.kompute`,
  "General purpose GPU compute framework built on Vulkan",
);

/**
 * An interpreter of K, APL-like programming language
 */
export const kona = mkPackage(
  nixRaw`pkgs.kona`,
  "An interpreter of K, APL-like programming language",
);

/**
 * A case converting app suitable for coding or typing
 */
export const konbucase = mkPackage(
  nixRaw`pkgs.konbucase`,
  "A case converting app suitable for coding or typing",
);

/**
 * Save disk space by cleaning unneeded files from software projects
 */
export const kondo = mkPackage(
  nixRaw`pkgs.kondo`,
  "Save disk space by cleaning unneeded files from software projects",
);

/**
 * Lightweight and blazing fast kubeconfig manager which allows to use different kubeconfigs at the same time
 */
export const konf = mkPackage(
  nixRaw`pkgs.konf`,
  "Lightweight and blazing fast kubeconfig manager which allows to use different kubeconfigs at the same time",
);

/**
 * Save Linux Customization
 */
export const konsave = mkPackage(
  nixRaw`pkgs.konsave`,
  "Save Linux Customization",
);

/**
 * A policy management tool for interacting with Gatekeeper
 */
export const konstraint = mkPackage(
  nixRaw`pkgs.konstraint`,
  "A policy management tool for interacting with Gatekeeper",
);

/**
 * Extremely simple Kubernetes resource templates
 */
export const kontemplate = mkPackage(
  nixRaw`pkgs.kontemplate`,
  "Extremely simple Kubernetes resource templates",
);

/**
 * Elegantly record your screen
 */
export const kooha = mkPackage(
  nixRaw`pkgs.kooha`,
  "Elegantly record your screen",
);

/**
 * From local development to the cloud: development workflow made easy
 */
export const kool = mkPackage(
  nixRaw`pkgs.kool`,
  "From local development to the cloud: development workflow made easy",
);

/**
 * Cross-platform backup tool with fast, incremental backups, client-side end-to-end encryption, compression and data deduplication
 */
export const kopia = mkPackage(
  nixRaw`pkgs.kopia`,
  "Cross-platform backup tool with fast, incremental backups, client-side end-to-end encryption, compression and data deduplication",
);

/**
 * Easiest way to get a production Kubernetes up and running
 */
export const kops = mkPackage(
  nixRaw`pkgs.kops`,
  "Easiest way to get a production Kubernetes up and running",
);

/**
 * Easiest way to get a production Kubernetes up and running
 */
export const kops_1_26 = mkPackage(
  nixRaw`pkgs.kops_1_26`,
  "Easiest way to get a production Kubernetes up and running",
);

/**
 * Easiest way to get a production Kubernetes up and running
 */
export const kops_1_27 = mkPackage(
  nixRaw`pkgs.kops_1_27`,
  "Easiest way to get a production Kubernetes up and running",
);

/**
 * Easiest way to get a production Kubernetes up and running
 */
export const kops_1_28 = mkPackage(
  nixRaw`pkgs.kops_1_28`,
  "Easiest way to get a production Kubernetes up and running",
);

/**
 * An SVG icon theme in four variants
 */
export const kora_icon_theme = mkPackage(
  nixRaw`pkgs.kora-icon-theme`,
  "An SVG icon theme in four variants",
);

/**
 * A music theory binary and library for Rust
 */
export const kord = mkPackage(
  nixRaw`pkgs.kord`,
  "A music theory binary and library for Rust",
);

/**
 * An easy to use web application framework for C
 */
export const kore = mkPackage(
  nixRaw`pkgs.kore`,
  "An easy to use web application framework for C",
);

/**
 * An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Cervantes, Kindle, Kobo, PocketBook and Android devices
 */
export const koreader = mkPackage(
  nixRaw`pkgs.koreader`,
  "An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Cervantes, Kindle, Kobo, PocketBook and Android devices",
);

/**
 * Kotatogram – experimental Telegram Desktop fork
 */
export const kotatogram_desktop = mkPackage(
  nixRaw`pkgs.kotatogram-desktop`,
  "Kotatogram – experimental Telegram Desktop fork",
);

/**
 * Kotatogram – experimental Telegram Desktop fork
 */
export const kotatogram_desktop_with_webkit = mkPackage(
  nixRaw`pkgs.kotatogram-desktop-with-webkit`,
  "Kotatogram – experimental Telegram Desktop fork",
);

/**
 * General purpose programming language
 */
export const kotlin = mkPackage(
  nixRaw`pkgs.kotlin`,
  "General purpose programming language",
);

/**
 * kotlin language server
 */
export const kotlin_language_server = mkPackage(
  nixRaw`pkgs.kotlin-language-server`,
  "kotlin language server",
);

/**
 * A modern programming language that makes developers happier
 */
export const kotlin_native = mkPackage(
  nixRaw`pkgs.kotlin-native`,
  "A modern programming language that makes developers happier",
);

/**
 * Fast arcade game based on the fundamental law of body attraction
 */
export const koules = mkPackage(
  nixRaw`pkgs.koules`,
  "Fast arcade game based on the fundamental law of body attraction",
);

/**
 * KeePass Command Line Interface
 */
export const kpcli = mkPackage(
  nixRaw`pkgs.kpcli`,
  "KeePass Command Line Interface",
);

/**
 * Efficient image organization and indexing
 */
export const kphotoalbum = mkPackage(
  nixRaw`pkgs.kphotoalbum`,
  "Efficient image organization and indexing",
);

/**
 * A toolkit to help you manage, manipulate, customize, and apply Kubernetes Resource configuration data files
 */
export const kpt = mkPackage(
  nixRaw`pkgs.kpt`,
  "A toolkit to help you manage, manipulate, customize, and apply Kubernetes Resource configuration data files",
);

/**
 * Print pokemon sprites in your terminal
 */
export const krabby = mkPackage(
  nixRaw`pkgs.krabby`,
  "Print pokemon sprites in your terminal",
);

/**
 * Build and use highly customized and ultra-lightweight unikernel VMs
 */
export const kraft = mkPackage(
  nixRaw`pkgs.kraft`,
  "Build and use highly customized and ultra-lightweight unikernel VMs",
);

/**
 * Python script to control NZXT cooler Kraken X52/X62/X72
 */
export const krakenx = mkPackage(
  nixRaw`pkgs.krakenx`,
  "Python script to control NZXT cooler Kraken X52/X62/X72",
);

/**
 * A kramdown extension for converting Markdown documents to AsciiDoc
 */
export const kramdown_asciidoc = mkPackage(
  nixRaw`pkgs.kramdown-asciidoc`,
  "A kramdown extension for converting Markdown documents to AsciiDoc",
);

/**
 * A command-line tool that helps you ship changes to a Kubernetes namespace and understand the result
 */
export const krane = mkPackage(
  nixRaw`pkgs.krane`,
  "A command-line tool that helps you ship changes to a Kubernetes namespace and understand the result",
);

/**
 * Krank checks issue tracker link status in your source code
 */
export const krank = mkPackage(
  nixRaw`pkgs.krank`,
  "Krank checks issue tracker link status in your source code",
);

/**
 * A CLI helper to manage, package and publish Nextcloud apps
 */
export const krankerl = mkPackage(
  nixRaw`pkgs.krankerl`,
  "A CLI helper to manage, package and publish Nextcloud apps",
);

/**
 * Visualize a log file with sparklines
 */
export const krapslog = mkPackage(
  nixRaw`pkgs.krapslog`,
  "Visualize a log file with sparklines",
);

/**
 * An API-first Identity and User Management system that is built according to cloud architecture best practices
 */
export const kratos = mkPackage(
  nixRaw`pkgs.kratos`,
  "An API-first Identity and User Management system that is built according to cloud architecture best practices",
);

/**
 * MIT Kerberos 5
 */
export const krb5 = mkPackage(
  nixRaw`pkgs.krb5`,
  "MIT Kerberos 5",
);

/**
 * Fullwidth scalable monospace font designed specifically to support pseudographics, semigraphics, and private use characters
 */
export const kreative_square_fonts = mkPackage(
  nixRaw`pkgs.kreative-square-fonts`,
  "Fullwidth scalable monospace font designed specifically to support pseudographics, semigraphics, and private use characters",
);

/**
 * A better alternative to `kubectl port-forward` that can forward TCP or UDP traffic to IP/Host which is accessible inside the cluster.
 */
export const krelay = mkPackage(
  nixRaw`pkgs.krelay`,
  "A better alternative to `kubectl port-forward` that can forward TCP or UDP traffic to IP/Host which is accessible inside the cluster.",
);

/**
 * A powerful batch renamer for KDE
 */
export const krename = mkPackage(
  nixRaw`pkgs.krename`,
  "A powerful batch renamer for KDE",
);

/**
 * Package manager for kubectl plugins
 */
export const krew = mkPackage(
  nixRaw`pkgs.krew`,
  "Package manager for kubectl plugins",
);

/**
 * RPKI Certificate Authority and Publication Server written in Rust
 */
export const krill = mkPackage(
  nixRaw`pkgs.krill`,
  "RPKI Certificate Authority and Publication Server written in Rust",
);

/**
 * Graphical small-internet client, supports gemini, http, https, gopher, finger
 */
export const kristall = mkPackage(
  nixRaw`pkgs.kristall`,
  "Graphical small-internet client, supports gemini, http, https, gopher, finger",
);

/**
 * A free and open source painting application
 */
export const krita = mkPackage(
  nixRaw`pkgs.krita`,
  "A free and open source painting application",
);

/**
 * A stopwatch application
 */
export const kronometer = mkPackage(
  nixRaw`pkgs.kronometer`,
  "A stopwatch application",
);

/**
 * VPN on steroids
 */
export const kronosnet = mkPackage(
  nixRaw`pkgs.kronosnet`,
  "VPN on steroids",
);

/**
 * Graphical tool to crop the pages of PDF files
 */
export const krop = mkPackage(
  nixRaw`pkgs.krop`,
  "Graphical tool to crop the pages of PDF files",
);

/**
 * Integrates krunner with pass the unix standard password manager (https://www.passwordstore.org/)
 */
export const krunner_pass = mkPackage(
  nixRaw`pkgs.krunner-pass`,
  "Integrates krunner with pass the unix standard password manager (https://www.passwordstore.org/)",
);

/**
 * A plugin for KRunner which integrates a translator, supports Google Translate, Bing Translator, youdao and Baidu Fanyi
 */
export const krunner_translator = mkPackage(
  nixRaw`pkgs.krunner-translator`,
  "A plugin for KRunner which integrates a translator, supports Google Translate, Bing Translator, youdao and Baidu Fanyi",
);

/**
 * A CLI-based utility for creating microVMs from OCI images
 */
export const krunvm = mkPackage(
  nixRaw`pkgs.krunvm`,
  "A CLI-based utility for creating microVMs from OCI images",
);

/**
 * Norton/Total Commander clone for KDE
 */
export const krusader = mkPackage(
  nixRaw`pkgs.krusader`,
  "Norton/Total Commander clone for KDE",
);

/**
 * KornShell Command And Programming Language
 */
export const ksh = mkPackage(
  nixRaw`pkgs.ksh`,
  "KornShell Command And Programming Language",
);

/**
 * Userspace utilities for the ksmbd kernel SMB server
 */
export const ksmbd_tools = mkPackage(
  nixRaw`pkgs.ksmbd-tools`,
  "Userspace utilities for the ksmbd kernel SMB server",
);

/**
 * A cool desktop panel for KDE Plasma 5
 */
export const ksmoothdock = mkPackage(
  nixRaw`pkgs.ksmoothdock`,
  "A cool desktop panel for KDE Plasma 5",
);

/**
 * Cross-platform screenshot tool with many annotation features
 */
export const ksnip = mkPackage(
  nixRaw`pkgs.ksnip`,
  "Cross-platform screenshot tool with many annotation features",
);

/**
 * K-mer substring space decomposition
 */
export const kssd = mkPackage(
  nixRaw`pkgs.kssd`,
  "K-mer substring space decomposition",
);

/**
 * Virtual planetarium astronomy software
 */
export const kstars = mkPackage(
  nixRaw`pkgs.kstars`,
  "Virtual planetarium astronomy software",
);

/**
 * Modified version of kerberos tools that support automatic ticket refresh
 */
export const kstart = mkPackage(
  nixRaw`pkgs.kstart`,
  "Modified version of kerberos tools that support automatic ticket refresh",
);

/**
 * A tool to be able to bind the super key as a key rather than a modifier
 */
export const ksuperkey = mkPackage(
  nixRaw`pkgs.ksuperkey`,
  "A tool to be able to bind the super key as a key rather than a modifier",
);

/**
 * Kafka command line tool
 */
export const kt = mkPackage(
  nixRaw`pkgs.kt`,
  "Kafka command line tool",
);

/**
 * A GUI to monitor and manage Tailscale on your Linux desktop
 */
export const ktailctl = mkPackage(
  nixRaw`pkgs.ktailctl`,
  "A GUI to monitor and manage Tailscale on your Linux desktop",
);

/**
 * Various text handling addons for KDE applications
 */
export const ktextaddons = mkPackage(
  nixRaw`pkgs.ktextaddons`,
  "Various text handling addons for KDE applications",
);

/**
 * A program that reformats Kotlin source code to comply with the common community standard for Kotlin code conventions.
 */
export const ktfmt = mkPackage(
  nixRaw`pkgs.ktfmt`,
  "A program that reformats Kotlin source code to comply with the common community standard for Kotlin code conventions.",
);

/**
 * Prometheus Alertmanager alert acknowledgement management daemon
 */
export const kthxbye = mkPackage(
  nixRaw`pkgs.kthxbye`,
  "Prometheus Alertmanager alert acknowledgement management daemon",
);

/**
 * Todo management and time tracking application
 */
export const ktimetracker = mkPackage(
  nixRaw`pkgs.ktimetracker`,
  "Todo management and time tracking application",
);

/**
 * An anti-bikeshedding Kotlin linter with built-in formatter
 */
export const ktlint = mkPackage(
  nixRaw`pkgs.ktlint`,
  "An anti-bikeshedding Kotlin linter with built-in formatter",
);

/**
 * A top-like tool for your Kubernetes cluster
 */
export const ktop = mkPackage(
  nixRaw`pkgs.ktop`,
  "A top-like tool for your Kubernetes cluster",
);

/**
 * A cli that exposes your local resources to kubernetes 
 */
export const ktunnel = mkPackage(
  nixRaw`pkgs.ktunnel`,
  "A cli that exposes your local resources to kubernetes ",
);

/**
 * Checks whether Kubernetes is deployed according to security best practices as defined in the CIS Kubernetes Benchmark
 */
export const kube_bench = mkPackage(
  nixRaw`pkgs.kube-bench`,
  "Checks whether Kubernetes is deployed according to security best practices as defined in the CIS Kubernetes Benchmark",
);

/**
 * A simple CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster
 */
export const kube_capacity = mkPackage(
  nixRaw`pkgs.kube-capacity`,
  "A simple CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster",
);

/**
 * Tool to search issues in Kubernetes clusters
 */
export const kube_hunter = mkPackage(
  nixRaw`pkgs.kube-hunter`,
  "Tool to search issues in Kubernetes clusters",
);

/**
 * A static analysis tool that checks Kubernetes YAML files and Helm charts
 */
export const kube_linter = mkPackage(
  nixRaw`pkgs.kube-linter`,
  "A static analysis tool that checks Kubernetes YAML files and Helm charts",
);

/**
 * An interactive kubernetes client featuring auto-complete
 */
export const kube_prompt = mkPackage(
  nixRaw`pkgs.kube-prompt`,
  "An interactive kubernetes client featuring auto-complete",
);

/**
 * All-in-one router, firewall and service proxy for Kubernetes
 */
export const kube_router = mkPackage(
  nixRaw`pkgs.kube-router`,
  "All-in-one router, firewall and service proxy for Kubernetes",
);

/**
 * Kubernetes object analysis with recommendations for improved reliability and security
 */
export const kube_score = mkPackage(
  nixRaw`pkgs.kube-score`,
  "Kubernetes object analysis with recommendations for improved reliability and security",
);

/**
 * Audit tool for Kubernetes
 */
export const kubeaudit = mkPackage(
  nixRaw`pkgs.kubeaudit`,
  "Audit tool for Kubernetes",
);

/**
 * SDK for building Kubernetes APIs using CRDs
 */
export const kubebuilder = mkPackage(
  nixRaw`pkgs.kubebuilder`,
  "SDK for building Kubernetes APIs using CRDs",
);

/**
 * A tool for managing Kubernetes resources as code
 */
export const kubecfg = mkPackage(
  nixRaw`pkgs.kubecfg`,
  "A tool for managing Kubernetes resources as code",
);

/**
 * Kubernetes runtime scanner
 */
export const kubeclarity = mkPackage(
  nixRaw`pkgs.kubeclarity`,
  "Kubernetes runtime scanner",
);

/**
 * Manage your kubeconfig more easily
 */
export const kubecm = mkPackage(
  nixRaw`pkgs.kubecm`,
  "Manage your kubeconfig more easily",
);

/**
 * Colorizes kubectl output
 */
export const kubecolor = mkPackage(
  nixRaw`pkgs.kubecolor`,
  "Colorizes kubectl output",
);

/**
 * A FAST Kubernetes manifests validator, with support for Custom Resources!
 */
export const kubeconform = mkPackage(
  nixRaw`pkgs.kubeconform`,
  "A FAST Kubernetes manifests validator, with support for Custom Resources!",
);

/**
 * Kubernetes CLI
 */
export const kubectl = mkPackage(
  nixRaw`pkgs.kubectl`,
  "Kubernetes CLI",
);

/**
 * Plugin for kubectl to manage a CloudNativePG cluster in Kubernetes
 */
export const kubectl_cnpg = mkPackage(
  nixRaw`pkgs.kubectl-cnpg`,
  "Plugin for kubectl to manage a CloudNativePG cluster in Kubernetes",
);

/**
 * Kubernetes CLI
 */
export const kubectl_convert = mkPackage(
  nixRaw`pkgs.kubectl-convert`,
  "Kubernetes CLI",
);

/**
 * kubectl cluster triage plugin for k8s
 */
export const kubectl_doctor = mkPackage(
  nixRaw`pkgs.kubectl-doctor`,
  "kubectl cluster triage plugin for k8s",
);

/**
 * This plugin evicts the given pod and is useful for testing pod disruption budget rules
 */
export const kubectl_evict_pod = mkPackage(
  nixRaw`pkgs.kubectl-evict-pod`,
  "This plugin evicts the given pod and is useful for testing pod disruption budget rules",
);

/**
 * kubectl plugin for retrieving resource example YAMLs
 */
export const kubectl_example = mkPackage(
  nixRaw`pkgs.kubectl-example`,
  "kubectl plugin for retrieving resource example YAMLs",
);

/**
 * A better kubectl explain with the fuzzy finder
 */
export const kubectl_explore = mkPackage(
  nixRaw`pkgs.kubectl-explore`,
  "A better kubectl explain with the fuzzy finder",
);

/**
 * A collection of gadgets for troubleshooting Kubernetes applications using eBPF
 */
export const kubectl_gadget = mkPackage(
  nixRaw`pkgs.kubectl-gadget`,
  "A collection of gadgets for troubleshooting Kubernetes applications using eBPF",
);

/**
 * Show container images used in the cluster.
 */
export const kubectl_images = mkPackage(
  nixRaw`pkgs.kubectl-images`,
  "Show container images used in the cluster.",
);

/**
 * A kubectl plugin to render watch output in a more readable fashion
 */
export const kubectl_klock = mkPackage(
  nixRaw`pkgs.kubectl-klock`,
  "A kubectl plugin to render watch output in a more readable fashion",
);

/**
 * A top-like tool for your Kubernetes clusters
 */
export const kubectl_ktop = mkPackage(
  nixRaw`pkgs.kubectl-ktop`,
  "A top-like tool for your Kubernetes clusters",
);

/**
 * Clean up Kubernetes yaml and json output to make it readable
 */
export const kubectl_neat = mkPackage(
  nixRaw`pkgs.kubectl-neat`,
  "Clean up Kubernetes yaml and json output to make it readable",
);

/**
 * Exec into node via kubectl
 */
export const kubectl_node_shell = mkPackage(
  nixRaw`pkgs.kubectl-node-shell`,
  "Exec into node via kubectl",
);

/**
 * kubectl plugin to browse Kubernetes object hierarchies as a tree
 */
export const kubectl_tree = mkPackage(
  nixRaw`pkgs.kubectl-tree`,
  "kubectl plugin to browse Kubernetes object hierarchies as a tree",
);

/**
 * kubectl plugin to list allocations (cpu, memory, gpu,... X utilization, requested, limit, allocatable,...)
 */
export const kubectl_view_allocations = mkPackage(
  nixRaw`pkgs.kubectl-view-allocations`,
  "kubectl plugin to list allocations (cpu, memory, gpu,... X utilization, requested, limit, allocatable,...)",
);

/**
 * Kubernetes CLI plugin to decode Kubernetes secrets
 */
export const kubectl_view_secret = mkPackage(
  nixRaw`pkgs.kubectl-view-secret`,
  "Kubernetes CLI plugin to decode Kubernetes secrets",
);

/**
 * Fast way to switch between clusters and namespaces in kubectl!
 */
export const kubectx = mkPackage(
  nixRaw`pkgs.kubectx`,
  "Fast way to switch between clusters and namespaces in kubectl!",
);

/**
 * kubectl plugin for KubeDB by AppsCode.
 */
export const kubedb_cli = mkPackage(
  nixRaw`pkgs.kubedb-cli`,
  "kubectl plugin for KubeDB by AppsCode.",
);

        /**
         * A tool to watch and follow Kubernetes resources in CI/CD deployment
pipelines

         */
export const kubedog = mkPackage(
  nixRaw`pkgs.kubedog`,
  "A tool to watch and follow Kubernetes resources in CI/CD deployment\npipelines\n",
);

/**
 * The Kubefirst CLI creates instant GitOps platforms that integrate some of the best tools in cloud native from scratch.
 */
export const kubefirst = mkPackage(
  nixRaw`pkgs.kubefirst`,
  "The Kubefirst CLI creates instant GitOps platforms that integrate some of the best tools in cloud native from scratch.",
);

/**
 * A Kubernetes credential plugin implementing Azure authentication
 */
export const kubelogin = mkPackage(
  nixRaw`pkgs.kubelogin`,
  "A Kubernetes credential plugin implementing Azure authentication",
);

/**
 * A Kubernetes credential plugin implementing OpenID Connect (OIDC) authentication
 */
export const kubelogin_oidc = mkPackage(
  nixRaw`pkgs.kubelogin-oidc`,
  "A Kubernetes credential plugin implementing OpenID Connect (OIDC) authentication",
);

/**
 * KubeMQ Community is the open-source version of KubeMQ, the Kubernetes native message broker.
 */
export const kubemq_community = mkPackage(
  nixRaw`pkgs.kubemq-community`,
  "KubeMQ Community is the open-source version of KubeMQ, the Kubernetes native message broker.",
);

/**
 * Kubemqctl is a command line interface (CLI) for Kubemq Kubernetes Message Broker.
 */
export const kubemqctl = mkPackage(
  nixRaw`pkgs.kubemqctl`,
  "Kubemqctl is a command line interface (CLI) for Kubemq Kubernetes Message Broker.",
);

/**
 * Easily check your cluster for use of deprecated APIs
 */
export const kubent = mkPackage(
  nixRaw`pkgs.kubent`,
  "Easily check your cluster for use of deprecated APIs",
);

/**
 * Automate cluster operations on all your cloud, on-prem, edge, and IoT environments
 */
export const kubeone = mkPackage(
  nixRaw`pkgs.kubeone`,
  "Automate cluster operations on all your cloud, on-prem, edge, and IoT environments",
);

/**
 * Kubernetes prompt
 */
export const kubeprompt = mkPackage(
  nixRaw`pkgs.kubeprompt`,
  "Kubernetes prompt",
);

/**
 * Checks a Kubernetes cluster for objects using deprecated API versions
 */
export const kubepug = mkPackage(
  nixRaw`pkgs.kubepug`,
  "Checks a Kubernetes cluster for objects using deprecated API versions",
);

/**
 * Collection of commands to fill in the gaps between Terraform, Helm, and Kubectl
 */
export const kubergrunt = mkPackage(
  nixRaw`pkgs.kubergrunt`,
  "Collection of commands to fill in the gaps between Terraform, Helm, and Kubectl",
);

/**
 * Production-Grade Container Scheduling and Management
 */
export const kubernetes = mkPackage(
  nixRaw`pkgs.kubernetes`,
  "Production-Grade Container Scheduling and Management",
);

/**
 * Kubernetes code generation
 */
export const kubernetes_code_generator = mkPackage(
  nixRaw`pkgs.kubernetes-code-generator`,
  "Kubernetes code generation",
);

/**
 * Tools to use with the Kubernetes controller-runtime libraries
 */
export const kubernetes_controller_tools = mkPackage(
  nixRaw`pkgs.kubernetes-controller-tools`,
  "Tools to use with the Kubernetes controller-runtime libraries",
);

/**
 * A package manager for kubernetes
 */
export const kubernetes_helm = mkPackage(
  nixRaw`pkgs.kubernetes-helm`,
  "A package manager for kubernetes",
);

/**
 * A package manager for kubernetes
 */
export const kubernetes_helm_wrapped = mkPackage(
  nixRaw`pkgs.kubernetes-helm-wrapped`,
  "A package manager for kubernetes",
);

/**
 * Kubernetes container resource metrics collector
 */
export const kubernetes_metrics_server = mkPackage(
  nixRaw`pkgs.kubernetes-metrics-server`,
  "Kubernetes container resource metrics collector",
);

/**
 * Validate and remediate Kubernetes resources to ensure configuration best practices are followed
 */
export const kubernetes_polaris = mkPackage(
  nixRaw`pkgs.kubernetes-polaris`,
  "Validate and remediate Kubernetes resources to ensure configuration best practices are followed",
);

/**
 * Single dependency Kubernetes clusters for local testing, experimenting and development
 */
export const kubernix = mkPackage(
  nixRaw`pkgs.kubernix`,
  "Single dependency Kubernetes clusters for local testing, experimenting and development",
);

/**
 * Tool for testing if Kubernetes is deployed securely
 */
export const kubescape = mkPackage(
  nixRaw`pkgs.kubescape`,
  "Tool for testing if Kubernetes is deployed securely",
);

/**
 * A Kubernetes controller and tool for one-way encrypted Secrets
 */
export const kubeseal = mkPackage(
  nixRaw`pkgs.kubeseal`,
  "A Kubernetes controller and tool for one-way encrypted Secrets",
);

/**
 * Security risk analysis tool for Kubernetes resources
 */
export const kubesec = mkPackage(
  nixRaw`pkgs.kubesec`,
  "Security risk analysis tool for Kubernetes resources",
);

/**
 * The API Traffic Viewer for Kubernetes
 */
export const kubeshark = mkPackage(
  nixRaw`pkgs.kubeshark`,
  "The API Traffic Viewer for Kubernetes",
);

/**
 * A tool to observe Kubernetes resources in real time
 */
export const kubespy = mkPackage(
  nixRaw`pkgs.kubespy`,
  "A tool to observe Kubernetes resources in real time",
);

/**
 * Kubernetes exploitation tool
 */
export const kubestroyer = mkPackage(
  nixRaw`pkgs.kubestroyer`,
  "Kubernetes exploitation tool",
);

/**
 * The kubectx for operators
 */
export const kubeswitch = mkPackage(
  nixRaw`pkgs.kubeswitch`,
  "The kubectx for operators",
);

/**
 * Bash script to tail Kubernetes logs from multiple pods at the same time
 */
export const kubetail = mkPackage(
  nixRaw`pkgs.kubetail`,
  "Bash script to tail Kubernetes logs from multiple pods at the same time",
);

/**
 * Validate your Kubernetes configuration files
 */
export const kubeval = mkPackage(
  nixRaw`pkgs.kubeval`,
  "Validate your Kubernetes configuration files",
);

export const kubeval_schema = mkPackage(
  nixRaw`pkgs.kubeval-schema`,
  "",
);

/**
 * Client tool to use advanced features such as console access
 */
export const kubevirt = mkPackage(
  nixRaw`pkgs.kubevirt`,
  "Client tool to use advanced features such as console access",
);

/**
 * Create a VPN and connect to Kubernetes cluster network, access resources, and more
 */
export const kubevpn = mkPackage(
  nixRaw`pkgs.kubevpn`,
  "Create a VPN and connect to Kubernetes cluster network, access resources, and more",
);

/**
 * Command supervisor for coordinated Kubernetes pod container termination.
 */
export const kubexit = mkPackage(
  nixRaw`pkgs.kubexit`,
  "Command supervisor for coordinated Kubernetes pod container termination.",
);

/**
 * Shell independent context and namespace switcher for kubectl
 */
export const kubie = mkPackage(
  nixRaw`pkgs.kubie`,
  "Shell independent context and namespace switcher for kubectl",
);

/**
 * An IPFS implementation in Go
 */
export const kubo = mkPackage(
  nixRaw`pkgs.kubo`,
  "An IPFS implementation in Go",
);

/**
 * Migrations for the filesystem repository of Kubo clients
 */
export const kubo_migrator = mkPackage(
  nixRaw`pkgs.kubo-migrator`,
  "Migrations for the filesystem repository of Kubo clients",
);

export const kubo_migrator_all_fs_repo_migrations = mkPackage(
  nixRaw`pkgs.kubo-migrator-all-fs-repo-migrations`,
  "",
);

/**
 * Migrations for the filesystem repository of Kubo clients
 */
export const kubo_migrator_unwrapped = mkPackage(
  nixRaw`pkgs.kubo-migrator-unwrapped`,
  "Migrations for the filesystem repository of Kubo clients",
);

/**
 * Service mesh controller
 */
export const kuma = mkPackage(
  nixRaw`pkgs.kuma`,
  "Service mesh controller",
);

/**
 * Service mesh controller
 */
export const kuma_cp = mkPackage(
  nixRaw`pkgs.kuma-cp`,
  "Service mesh controller",
);

/**
 * Service mesh controller
 */
export const kuma_dp = mkPackage(
  nixRaw`pkgs.kuma-dp`,
  "Service mesh controller",
);

/**
 * Service mesh controller
 */
export const kuma_experimental = mkPackage(
  nixRaw`pkgs.kuma-experimental`,
  "Service mesh controller",
);

/**
 * Service mesh controller
 */
export const kumactl = mkPackage(
  nixRaw`pkgs.kumactl`,
  "Service mesh controller",
);

/**
 * Backup tool for KDE
 */
export const kup = mkPackage(
  nixRaw`pkgs.kup`,
  "Backup tool for KDE",
);

/**
 * A smart, quick launcher
 */
export const kupfer = mkPackage(
  nixRaw`pkgs.kupfer`,
  "A smart, quick launcher",
);

/**
 * An unofficial, featureful, open source, community-driven, free Microsoft To-Do app
 */
export const kuro = mkPackage(
  nixRaw`pkgs.kuro`,
  "An unofficial, featureful, open source, community-driven, free Microsoft To-Do app",
);

/**
 * Customization of kubernetes YAML configurations
 */
export const kustomize = mkPackage(
  nixRaw`pkgs.kustomize`,
  "Customization of kubernetes YAML configurations",
);

/**
 * Customization of kubernetes YAML configurations
 */
export const kustomize_3 = mkPackage(
  nixRaw`pkgs.kustomize_3`,
  "Customization of kubernetes YAML configurations",
);

/**
 * Customization of kubernetes YAML configurations
 */
export const kustomize_4 = mkPackage(
  nixRaw`pkgs.kustomize_4`,
  "Customization of kubernetes YAML configurations",
);

/**
 * A Flexible Kustomize Plugin for SOPS Encrypted Resource
 */
export const kustomize_sops = mkPackage(
  nixRaw`pkgs.kustomize-sops`,
  "A Flexible Kustomize Plugin for SOPS Encrypted Resource",
);

/**
 * The KUbernetes Test TooL (KUTTL) provides a declarative approach to testing production-grade Kubernetes operators
 */
export const kuttl = mkPackage(
  nixRaw`pkgs.kuttl`,
  "The KUbernetes Test TooL (KUTTL) provides a declarative approach to testing production-grade Kubernetes operators",
);

/**
 * Advanced IRC Client
 */
export const kvirc = mkPackage(
  nixRaw`pkgs.kvirc`,
  "Advanced IRC Client",
);

/**
 * A lightweight tool for hosting KVM guests
 */
export const kvmtool = mkPackage(
  nixRaw`pkgs.kvmtool`,
  "A lightweight tool for hosting KVM guests",
);

/**
 * A super small webserver that serves blank pages
 */
export const kwakd = mkPackage(
  nixRaw`pkgs.kwakd`,
  "A super small webserver that serves blank pages",
);

/**
 * Command-Line Interface to the KDE Wallet
 */
export const kwalletcli = mkPackage(
  nixRaw`pkgs.kwalletcli`,
  "Command-Line Interface to the KDE Wallet",
);

/**
 * Tiling window manager with focus follows mouse for OSX
 */
export const kwm = mkPackage(
  nixRaw`pkgs.kwm`,
  "Tiling window manager with focus follows mouse for OSX",
);

/**
 * A library of routines for managing a database
 */
export const kyotocabinet = mkPackage(
  nixRaw`pkgs.kyotocabinet`,
  "A library of routines for managing a database",
);

/**
 * General toolkit developed for analyzing text
 */
export const kytea = mkPackage(
  nixRaw`pkgs.kytea`,
  "General toolkit developed for analyzing text",
);

/**
 * A pluggable, (mostly) language-agnostic ecosystem for building tools that work with code
 */
export const kythe = mkPackage(
  nixRaw`pkgs.kythe`,
  "A pluggable, (mostly) language-agnostic ecosystem for building tools that work with code",
);

/**
 * Kubernetes Native Policy Management
 */
export const kyverno = mkPackage(
  nixRaw`pkgs.kyverno`,
  "Kubernetes Native Policy Management",
);

/**
 * A tool that aggressively optimizes the sizes of Zip archives
 */
export const kzipmix = mkPackage(
  nixRaw`pkgs.kzipmix`,
  "A tool that aggressively optimizes the sizes of Zip archives",
);

/**
 * Convert public-inbox archives to maildir messages
 */
export const l2md = mkPackage(
  nixRaw`pkgs.l2md`,
  "Convert public-inbox archives to maildir messages",
);

/**
 * Simple text editor forked from Leafpad using GTK+ 3.x
 */
export const l3afpad = mkPackage(
  nixRaw`pkgs.l3afpad`,
  "Simple text editor forked from Leafpad using GTK+ 3.x",
);

/**
 * MP4 container utilities
 */
export const l_smash = mkPackage(
  nixRaw`pkgs.l-smash`,
  "MP4 container utilities",
);

/**
 * Icon theme inspired by macOS and Google's Material Design
 */
export const la_capitaine_icon_theme = mkPackage(
  nixRaw`pkgs.la-capitaine-icon-theme`,
  "Icon theme inspired by macOS and Google's Material Design",
);

/**
 * Lab wraps Git or Hub, making it simple to clone, fork, and interact with repositories on GitLab
 */
export const lab = mkPackage(
  nixRaw`pkgs.lab`,
  "Lab wraps Git or Hub, making it simple to clone, fork, and interact with repositories on GitLab",
);

/**
 * collection of helper tools for network engineers, while configuring and experimenting with their own network labs
 */
export const labctl = mkPackage(
  nixRaw`pkgs.labctl`,
  "collection of helper tools for network engineers, while configuring and experimenting with their own network labs",
);

/**
 * A graphical image annotation tool and label object bounding boxes in images
 */
export const labelImg = mkPackage(
  nixRaw`pkgs.labelImg`,
  "A graphical image annotation tool and label object bounding boxes in images",
);

/**
 * LabPlot is a FREE, open source and cross-platform Data Visualization and Analysis software accessible to everyone
 */
export const labplot = mkPackage(
  nixRaw`pkgs.labplot`,
  "LabPlot is a FREE, open source and cross-platform Data Visualization and Analysis software accessible to everyone",
);

/**
 * A Wayland stacking compositor, inspired by Openbox
 */
export const labwc = mkPackage(
  nixRaw`pkgs.labwc`,
  "A Wayland stacking compositor, inspired by Openbox",
);

/**
 * Linux AMDGPU Controller
 */
export const lact = mkPackage(
  nixRaw`pkgs.lact`,
  "Linux AMDGPU Controller",
);

/**
 * LADSPA format audio plugins header file
 */
export const ladspaH = mkPackage(
  nixRaw`pkgs.ladspaH`,
  "LADSPA format audio plugins header file",
);

/**
 * LADSPA format audio plugins
 */
export const ladspaPlugins = mkPackage(
  nixRaw`pkgs.ladspaPlugins`,
  "LADSPA format audio plugins",
);

/**
 * The SDK for the LADSPA audio plugin standard
 */
export const ladspa_sdk = mkPackage(
  nixRaw`pkgs.ladspa-sdk`,
  "The SDK for the LADSPA audio plugin standard",
);

/**
 * A browser using the SerenityOS LibWeb engine with a Qt GUI
 */
export const ladybird = mkPackage(
  nixRaw`pkgs.ladybird`,
  "A browser using the SerenityOS LibWeb engine with a Qt GUI",
);

/**
 * A Beautiful Gemini Client
 */
export const lagrange = mkPackage(
  nixRaw`pkgs.lagrange`,
  "A Beautiful Gemini Client",
);

/**
 * A Beautiful Gemini Client
 */
export const lagrange_tui = mkPackage(
  nixRaw`pkgs.lagrange-tui`,
  "A Beautiful Gemini Client",
);

/**
 * A multi-script display typeface for popular culture
 */
export const lalezar_fonts = mkPackage(
  nixRaw`pkgs.lalezar-fonts`,
  "A multi-script display typeface for popular culture",
);

/**
 * LR(1) parser generator for Rust
 */
export const lalrpop = mkPackage(
  nixRaw`pkgs.lalrpop`,
  "LR(1) parser generator for Rust",
);

/**
 * LMI (Lambda Lisp Machine) emulator
 */
export const lambda_delta = mkPackage(
  nixRaw`pkgs.lambda-delta`,
  "LMI (Lambda Lisp Machine) emulator",
);

/**
 * A Lisp interpreter written in untyped lambda calculus
 */
export const lambda_lisp = mkPackage(
  nixRaw`pkgs.lambda-lisp`,
  "A Lisp interpreter written in untyped lambda calculus",
);

/**
 * A Lisp interpreter written in untyped lambda calculus
 */
export const lambda_lisp_blc = mkPackage(
  nixRaw`pkgs.lambda-lisp-blc`,
  "A Lisp interpreter written in untyped lambda calculus",
);

/**
 * A ZSH theme optimized for people who use Git & Unicode-compatible fonts and terminals
 */
export const lambda_mod_zsh_theme = mkPackage(
  nixRaw`pkgs.lambda-mod-zsh-theme`,
  "A ZSH theme optimized for people who use Git & Unicode-compatible fonts and terminals",
);

/**
 * Lambdabot is a development tool and advanced IRC bot
 */
export const lambdabot = mkPackage(
  nixRaw`pkgs.lambdabot`,
  "Lambdabot is a development tool and advanced IRC bot",
);

/**
 * A high quality MPEG Audio Layer III (MP3) encoder
 */
export const lame = mkPackage(
  nixRaw`pkgs.lame`,
  "A high quality MPEG Audio Layer III (MP3) encoder",
);

/**
 * Lightweight and modular continuous integration service
 */
export const laminar = mkPackage(
  nixRaw`pkgs.laminar`,
  "Lightweight and modular continuous integration service",
);

/**
 * Classical Molecular Dynamics simulation code
 */
export const lammps = mkPackage(
  nixRaw`pkgs.lammps`,
  "Classical Molecular Dynamics simulation code",
);

/**
 * Classical Molecular Dynamics simulation code
 */
export const lammps_mpi = mkPackage(
  nixRaw`pkgs.lammps-mpi`,
  "Classical Molecular Dynamics simulation code",
);

/**
 * A proofreading program for English, French German, Polish, and more
 */
export const languagetool = mkPackage(
  nixRaw`pkgs.languagetool`,
  "A proofreading program for English, French German, Polish, and more",
);

/**
 * LanguageTool API in Rust
 */
export const languagetool_rust = mkPackage(
  nixRaw`pkgs.languagetool-rust`,
  "LanguageTool API in Rust",
);

/**
 * Web application for archival and reading of manga/doujinshi
 */
export const lanraragi = mkPackage(
  nixRaw`pkgs.lanraragi`,
  "Web application for archival and reading of manga/doujinshi",
);

/**
 * TrueType font for Lao language
 */
export const lao = mkPackage(
  nixRaw`pkgs.lao`,
  "TrueType font for Lao language",
);

/**
 * openblas with just the LAPACK C and FORTRAN ABI
 */
export const lapack = mkPackage(
  nixRaw`pkgs.lapack`,
  "openblas with just the LAPACK C and FORTRAN ABI",
);

/**
 * openblas with just the LAPACK C and FORTRAN ABI
 */
export const lapack_ilp64 = mkPackage(
  nixRaw`pkgs.lapack-ilp64`,
  "openblas with just the LAPACK C and FORTRAN ABI",
);

/**
 * Linear Algebra PACKage
 */
export const lapack_reference = mkPackage(
  nixRaw`pkgs.lapack-reference`,
  "Linear Algebra PACKage",
);

/**
 * Lightning-fast and Powerful Code Editor written in Rust
 */
export const lapce = mkPackage(
  nixRaw`pkgs.lapce`,
  "Lightning-fast and Powerful Code Editor written in Rust",
);

/**
 * 9wm-like tiling window manager
 */
export const larswm = mkPackage(
  nixRaw`pkgs.larswm`,
  "9wm-like tiling window manager",
);

/**
 * SVG and MathML rendering library
 */
export const lasem = mkPackage(
  nixRaw`pkgs.lasem`,
  "SVG and MathML rendering library",
);

/**
 * A Linux Audio Session Handler
 */
export const lash = mkPackage(
  nixRaw`pkgs.lash`,
  "A Linux Audio Session Handler",
);

/**
 * Liberty Alliance Single Sign-On library
 */
export const lasso = mkPackage(
  nixRaw`pkgs.lasso`,
  "Liberty Alliance Single Sign-On library",
);

/**
 * Genomic sequence aligner
 */
export const last = mkPackage(
  nixRaw`pkgs.last`,
  "Genomic sequence aligner",
);

/**
 * Fallback font of last resort
 */
export const last_resort = mkPackage(
  nixRaw`pkgs.last-resort`,
  "Fallback font of last resort",
);

/**
 * Stores, retrieves, generates, and synchronizes passwords securely
 */
export const lastpass_cli = mkPackage(
  nixRaw`pkgs.lastpass-cli`,
  "Stores, retrieves, generates, and synchronizes passwords securely",
);

/**
 * Tool to show kernel reports on latencies (LATENCYTOP option)
 */
export const latencytop = mkPackage(
  nixRaw`pkgs.latencytop`,
  "Tool to show kernel reports on latencies (LATENCYTOP option)",
);

/**
 * LaTeX-to-HTML translator
 */
export const latex2html = mkPackage(
  nixRaw`pkgs.latex2html`,
  "LaTeX-to-HTML translator",
);

/**
 * Pure Python library for LaTeX to MathML conversion
 */
export const latex2mathml = mkPackage(
  nixRaw`pkgs.latex2mathml`,
  "Pure Python library for LaTeX to MathML conversion",
);

/**
 * A 21st century LaTeX wrapper
 */
export const latexrun = mkPackage(
  nixRaw`pkgs.latexrun`,
  "A 21st century LaTeX wrapper",
);

/**
 * Sans-serif typeface family designed in Summer 2010 by Łukasz Dziedzic

 */
export const lato = mkPackage(
  nixRaw`pkgs.lato`,
  "Sans-serif typeface family designed in Summer 2010 by Łukasz Dziedzic\n",
);

/**
 * Dock-style app launcher based on Plasma frameworks
 */
export const latte_dock = mkPackage(
  nixRaw`pkgs.latte-dock`,
  "Dock-style app launcher based on Plasma frameworks",
);

/**
 * Software for counting lattice points and integration over convex polytopes
 */
export const latte_integrale = mkPackage(
  nixRaw`pkgs.latte-integrale`,
  "Software for counting lattice points and integration over convex polytopes",
);

/**
 * Vendor development tools for Lattice FPGA devices
 */
export const lattice_diamond = mkPackage(
  nixRaw`pkgs.lattice-diamond`,
  "Vendor development tools for Lattice FPGA devices",
);

/**
 * Transform Linux Audit logs for SIEM usage
 */
export const laurel = mkPackage(
  nixRaw`pkgs.laurel`,
  "Transform Linux Audit logs for SIEM usage",
);

/**
 * A simple launcher panel for Wayland desktops
 */
export const lavalauncher = mkPackage(
  nixRaw`pkgs.lavalauncher`,
  "A simple launcher panel for Wayland desktops",
);

/**
 * Lava lamp simulation in the terminal
 */
export const lavat = mkPackage(
  nixRaw`pkgs.lavat`,
  "Lava lamp simulation in the terminal",
);

/**
 * A flat Material Design theme for GTK 3, GTK 2 and Gnome-Shell.
 */
export const layan_gtk_theme = mkPackage(
  nixRaw`pkgs.layan-gtk-theme`,
  "A flat Material Design theme for GTK 3, GTK 2 and Gnome-Shell.",
);

/**
 * A flat Design theme for KDE Plasma desktop
 */
export const layan_kde = mkPackage(
  nixRaw`pkgs.layan-kde`,
  "A flat Design theme for KDE Plasma desktop",
);

/**
 * Graphical IDE for the FreePascal language
 */
export const lazarus = mkPackage(
  nixRaw`pkgs.lazarus`,
  "Graphical IDE for the FreePascal language",
);

/**
 * Graphical IDE for the FreePascal language
 */
export const lazarus_qt = mkPackage(
  nixRaw`pkgs.lazarus-qt`,
  "Graphical IDE for the FreePascal language",
);

/**
 * Image editor like PaintBrush or Paint.Net
 */
export const lazpaint = mkPackage(
  nixRaw`pkgs.lazpaint`,
  "Image editor like PaintBrush or Paint.Net",
);

/**
 * A tool to static turn CLI commands into TUIs
 */
export const lazycli = mkPackage(
  nixRaw`pkgs.lazycli`,
  "A tool to static turn CLI commands into TUIs",
);

/**
 * A simple terminal UI for both docker and docker-compose
 */
export const lazydocker = mkPackage(
  nixRaw`pkgs.lazydocker`,
  "A simple terminal UI for both docker and docker-compose",
);

/**
 * Simple terminal UI for git commands
 */
export const lazygit = mkPackage(
  nixRaw`pkgs.lazygit`,
  "Simple terminal UI for git commands",
);

/**
 * The Little Brother's Database
 */
export const lbdb = mkPackage(
  nixRaw`pkgs.lbdb`,
  "The Little Brother's Database",
);

/**
 * Breakout clone from the LGames series
 */
export const lbreakout2 = mkPackage(
  nixRaw`pkgs.lbreakout2`,
  "Breakout clone from the LGames series",
);

/**
 * A widescreen Breakout clone
 */
export const lbreakouthd = mkPackage(
  nixRaw`pkgs.lbreakouthd`,
  "A widescreen Breakout clone",
);

/**
 * A browser and wallet for LBRY, the decentralized, user-controlled content marketplace
 */
export const lbry = mkPackage(
  nixRaw`pkgs.lbry`,
  "A browser and wallet for LBRY, the decentralized, user-controlled content marketplace",
);

/**
 * Parallel bzip2 compression utility
 */
export const lbzip2 = mkPackage(
  nixRaw`pkgs.lbzip2`,
  "Parallel bzip2 compression utility",
);

/**
 * Toolchain and emulator for the LC-3 architecture
 */
export const lc3tools = mkPackage(
  nixRaw`pkgs.lc3tools`,
  "Toolchain and emulator for the LC-3 architecture",
);

/**
 * A program for calculating with L-functions
 */
export const lcalc = mkPackage(
  nixRaw`pkgs.lcalc`,
  "A program for calculating with L-functions",
);

/**
 * Utilities for manipulating OpenType, PostScript Type 1, and Multiple Master fonts
 */
export const lcdf_typetools = mkPackage(
  nixRaw`pkgs.lcdf-typetools`,
  "Utilities for manipulating OpenType, PostScript Type 1, and Multiple Master fonts",
);

/**
 * Client/server suite for controlling a wide variety of LCD devices
 */
export const lcdproc = mkPackage(
  nixRaw`pkgs.lcdproc`,
  "Client/server suite for controlling a wide variety of LCD devices",
);

/**
 * Lambda calculus interpreter
 */
export const lci = mkPackage(
  nixRaw`pkgs.lci`,
  "Lambda calculus interpreter",
);

/**
 * Lightweight Communications and Marshalling (LCM)
 */
export const lcm = mkPackage(
  nixRaw`pkgs.lcm`,
  "Lightweight Communications and Marshalling (LCM)",
);

/**
 * Color management engine
 */
export const lcms = mkPackage(
  nixRaw`pkgs.lcms`,
  "Color management engine",
);

/**
 * Color management engine
 */
export const lcms1 = mkPackage(
  nixRaw`pkgs.lcms1`,
  "Color management engine",
);

/**
 * Color management engine
 */
export const lcms2 = mkPackage(
  nixRaw`pkgs.lcms2`,
  "Color management engine",
);

/**
 * Code coverage tool that enhances GNU gcov
 */
export const lcov = mkPackage(
  nixRaw`pkgs.lcov`,
  "Code coverage tool that enhances GNU gcov",
);

/**
 * Librecast RaptorQ library.
 */
export const lcrq = mkPackage(
  nixRaw`pkgs.lcrq`,
  "Librecast RaptorQ library.",
);

/**
 * Librecast File and Syncing Tool
 */
export const lcsync = mkPackage(
  nixRaw`pkgs.lcsync`,
  "Librecast File and Syncing Tool",
);

export const ld_is_cc_hook = mkPackage(
  nixRaw`pkgs.ld-is-cc-hook`,
  "",
);

/**
 * AOSP libldac dispatcher
 */
export const ldacbt = mkPackage(
  nixRaw`pkgs.ldacbt`,
  "AOSP libldac dispatcher",
);

/**
 * Active Directory information dumper via LDAP
 */
export const ldapdomaindump = mkPackage(
  nixRaw`pkgs.ldapdomaindump`,
  "Active Directory information dumper via LDAP",
);

/**
 * Tool to monitor creation, deletion and changes to LDAP objects
 */
export const ldapmonitor = mkPackage(
  nixRaw`pkgs.ldapmonitor`,
  "Tool to monitor creation, deletion and changes to LDAP objects",
);

/**
 * Tool to anonymously bruteforce usernames from Domain controllers
 */
export const ldapnomnom = mkPackage(
  nixRaw`pkgs.ldapnomnom`,
  "Tool to anonymously bruteforce usernames from Domain controllers",
);

/**
 * Interactive LDAP client for Unix terminals
 */
export const ldapvi = mkPackage(
  nixRaw`pkgs.ldapvi`,
  "Interactive LDAP client for Unix terminals",
);

/**
 * A LDAP-like embedded database
 */
export const ldb = mkPackage(
  nixRaw`pkgs.ldb`,
  "A LDAP-like embedded database",
);

/**
 * The LLVM-based D compiler
 */
export const ldc = mkPackage(
  nixRaw`pkgs.ldc`,
  "The LLVM-based D compiler",
);

/**
 * In-depth LDAP enumeration utility
 */
export const ldeep = mkPackage(
  nixRaw`pkgs.ldeep`,
  "In-depth LDAP enumeration utility",
);

/**
 * Link Identity Editor
 */
export const ldid = mkPackage(
  nixRaw`pkgs.ldid`,
  "Link Identity Editor",
);

/**
 * Put real or fake signatures in a Mach-O binary
 */
export const ldid_procursus = mkPackage(
  nixRaw`pkgs.ldid-procursus`,
  "Put real or fake signatures in a Mach-O binary",
);

/**
 * A lightweight device mounter, with libudev as only dependency
 */
export const ldm = mkPackage(
  nixRaw`pkgs.ldm`,
  "A lightweight device mounter, with libudev as only dependency",
);

/**
 * Tool and library for managing Microsoft Windows Dynamic Disks
 */
export const ldmtool = mkPackage(
  nixRaw`pkgs.ldmtool`,
  "Tool and library for managing Microsoft Windows Dynamic Disks",
);

/**
 * A gamedriver for LPMuds including a LPC compiler, interpreter and runtime
 */
export const ldmud = mkPackage(
  nixRaw`pkgs.ldmud`,
  "A gamedriver for LPMuds including a LPC compiler, interpreter and runtime",
);

/**
 * A gamedriver for LPMuds including a LPC compiler, interpreter and runtime
 */
export const ldmud_full = mkPackage(
  nixRaw`pkgs.ldmud-full`,
  "A gamedriver for LPMuds including a LPC compiler, interpreter and runtime",
);

/**
 * Library with the aim of simplifying DNS programming in C
 */
export const ldns = mkPackage(
  nixRaw`pkgs.ldns`,
  "Library with the aim of simplifying DNS programming in C",
);

/**
 * Modern, lightweight and efficient 2D level editor
 */
export const ldtk = mkPackage(
  nixRaw`pkgs.ldtk`,
  "Modern, lightweight and efficient 2D level editor",
);

/**
 * Implementation of a store & forward NNTP proxy, under development
 */
export const leafnode = mkPackage(
  nixRaw`pkgs.leafnode`,
  "Implementation of a store & forward NNTP proxy, under development",
);

/**
 * Implementation of a store & forward NNTP proxy, stable release
 */
export const leafnode1 = mkPackage(
  nixRaw`pkgs.leafnode1`,
  "Implementation of a store & forward NNTP proxy, stable release",
);

/**
 * A notepad clone for GTK 2.0
 */
export const leafpad = mkPackage(
  nixRaw`pkgs.leafpad`,
  "A notepad clone for GTK 2.0",
);

/**
 * A revival of an old classic, Alternate Gothic #1
 */
export const league_gothic = mkPackage(
  nixRaw`pkgs.league-gothic`,
  "A revival of an old classic, Alternate Gothic #1",
);

/**
 * Font Collection by The League of Moveable Type
 */
export const league_of_moveable_type = mkPackage(
  nixRaw`pkgs.league-of-moveable-type`,
  "Font Collection by The League of Moveable Type",
);

/**
 * A modern, coquettish script font
 */
export const league_script_number_one = mkPackage(
  nixRaw`pkgs.league-script-number-one`,
  "A modern, coquettish script font",
);

/**
 * A fantastic new revival of ATF's classic Spartan, a geometric sans-serif that has no problem kicking its enemies in the chest.
 */
export const league_spartan = mkPackage(
  nixRaw`pkgs.league-spartan`,
  "A fantastic new revival of ATF's classic Spartan, a geometric sans-serif that has no problem kicking its enemies in the chest.",
);

/**
 * Automatic and interactive theorem prover
 */
export const lean = mkPackage(
  nixRaw`pkgs.lean`,
  "Automatic and interactive theorem prover",
);

/**
 * Automatic and interactive theorem prover (version with HoTT support)
 */
export const lean2 = mkPackage(
  nixRaw`pkgs.lean2`,
  "Automatic and interactive theorem prover (version with HoTT support)",
);

/**
 * Automatic and interactive theorem prover
 */
export const lean3 = mkPackage(
  nixRaw`pkgs.lean3`,
  "Automatic and interactive theorem prover",
);

/**
 * Automatic and interactive theorem prover
 */
export const lean4 = mkPackage(
  nixRaw`pkgs.lean4`,
  "Automatic and interactive theorem prover",
);

/**
 * Lightweight lossless file minifier/optimizer
 */
export const leanify = mkPackage(
  nixRaw`pkgs.leanify`,
  "Lightweight lossless file minifier/optimizer",
);

/**
 * A pair programming tool and library written in Golang
 */
export const leaps = mkPackage(
  nixRaw`pkgs.leaps`,
  "A pair programming tool and library written in Golang",
);

/**
 * A collection of C++ and CMake utility libraries
 */
export const leatherman = mkPackage(
  nixRaw`pkgs.leatherman`,
  "A collection of C++ and CMake utility libraries",
);

/**
 * Network based LED effect controller with support for advanced real-time audio effects
 */
export const ledfx = mkPackage(
  nixRaw`pkgs.ledfx`,
  "Network based LED effect controller with support for advanced real-time audio effects",
);

/**
 * A double-entry accounting system with a command-line reporting interface
 */
export const ledger = mkPackage(
  nixRaw`pkgs.ledger`,
  "A double-entry accounting system with a command-line reporting interface",
);

/**
 * Ledger to Beancount text-based converter
 */
export const ledger2beancount = mkPackage(
  nixRaw`pkgs.ledger2beancount`,
  "Ledger to Beancount text-based converter",
);

/**
 * Using Ledger as hardware-based SSH/PGP agent
 */
export const ledger_agent = mkPackage(
  nixRaw`pkgs.ledger_agent`,
  "Using Ledger as hardware-based SSH/PGP agent",
);

/**
 * OFX/CSV autosync for ledger and hledger
 */
export const ledger_autosync = mkPackage(
  nixRaw`pkgs.ledger-autosync`,
  "OFX/CSV autosync for ledger and hledger",
);

/**
 * App for Ledger hardware wallets
 */
export const ledger_live_desktop = mkPackage(
  nixRaw`pkgs.ledger-live-desktop`,
  "App for Ledger hardware wallets",
);

/**
 * udev rules for Ledger devices
 */
export const ledger_udev_rules = mkPackage(
  nixRaw`pkgs.ledger-udev-rules`,
  "udev rules for Ledger devices",
);

/**
 * A web frontend to the Ledger CLI tool
 */
export const ledger_web = mkPackage(
  nixRaw`pkgs.ledger-web`,
  "A web frontend to the Ledger CLI tool",
);

/**
 * A line editor, allowing to use shell commands with control characters like in emacs
 */
export const ledit = mkPackage(
  nixRaw`pkgs.ledit`,
  "A line editor, allowing to use shell commands with control characters like in emacs",
);

/**
 * Enclosure LED Utilities
 */
export const ledmon = mkPackage(
  nixRaw`pkgs.ledmon`,
  "Enclosure LED Utilities",
);

/**
 * CLI frontend to the poppler-glib library of PDF tools
 */
export const leela = mkPackage(
  nixRaw`pkgs.leela`,
  "CLI frontend to the poppler-glib library of PDF tools",
);

/**
 * Go engine modeled after AlphaGo Zero
 */
export const leela_zero = mkPackage(
  nixRaw`pkgs.leela-zero`,
  "Go engine modeled after AlphaGo Zero",
);

/**
 * May the code be with you 👻
 */
export const leetcode_cli = mkPackage(
  nixRaw`pkgs.leetcode-cli`,
  "May the code be with you 👻",
);

/**
 * Memory patcher which adds the gore back into Left 4 Dead 2
 */
export const left4gore_bin = mkPackage(
  nixRaw`pkgs.left4gore-bin`,
  "Memory patcher which adds the gore back into Left 4 Dead 2",
);

/**
 * Fast and powerful Git hooks manager for any type of projects
 */
export const lefthook = mkPackage(
  nixRaw`pkgs.lefthook`,
  "Fast and powerful Git hooks manager for any type of projects",
);

/**
 * A tiling window manager for the adventurer
 */
export const leftwm = mkPackage(
  nixRaw`pkgs.leftwm`,
  "A tiling window manager for the adventurer",
);

/**
 * A free and open-source Epic Games Launcher alternative
 */
export const legendary_gl = mkPackage(
  nixRaw`pkgs.legendary-gl`,
  "A free and open-source Epic Games Launcher alternative",
);

/**
 * Git for Humans, Inspired by GitHub for Mac
 */
export const legit = mkPackage(
  nixRaw`pkgs.legit`,
  "Git for Humans, Inspired by GitHub for Mac",
);

/**
 * Web frontend for git
 */
export const legit_web = mkPackage(
  nixRaw`pkgs.legit-web`,
  "Web frontend for git",
);

/**
 * Tool to detect and remediate misconfigurations and security risks of GitHub assets
 */
export const legitify = mkPackage(
  nixRaw`pkgs.legitify`,
  "Tool to detect and remediate misconfigurations and security risks of GitHub assets",
);

/**
 * Let's Encrypt client and ACME library written in Go
 */
export const lego = mkPackage(
  nixRaw`pkgs.lego`,
  "Let's Encrypt client and ACME library written in Go",
);

/**
 * Project automation for Clojure
 */
export const leiningen = mkPackage(
  nixRaw`pkgs.leiningen`,
  "Project automation for Clojure",
);

/**
 * A static content management system
 */
export const lektor = mkPackage(
  nixRaw`pkgs.lektor`,
  "A static content management system",
);

/**
 * A tool to identify anything
 */
export const lemmeknow = mkPackage(
  nixRaw`pkgs.lemmeknow`,
  "A tool to identify anything",
);

/**
 * XML Language Server
 */
export const lemminx = mkPackage(
  nixRaw`pkgs.lemminx`,
  "XML Language Server",
);

/**
 * A CLI for generating vim help docs from emmylua comments
 */
export const lemmy_help = mkPackage(
  nixRaw`pkgs.lemmy-help`,
  "A CLI for generating vim help docs from emmylua comments",
);

/**
 * 🐀 Building a federated alternative to reddit in rust
 */
export const lemmy_server = mkPackage(
  nixRaw`pkgs.lemmy-server`,
  "🐀 Building a federated alternative to reddit in rust",
);

/**
 * Building a federated alternative to reddit in rust
 */
export const lemmy_ui = mkPackage(
  nixRaw`pkgs.lemmy-ui`,
  "Building a federated alternative to reddit in rust",
);

/**
 * An LALR(1) parser generator
 */
export const lemon = mkPackage(
  nixRaw`pkgs.lemon`,
  "An LALR(1) parser generator",
);

/**
 * Efficient library for combinatorial optimization tasks on graphs and networks
 */
export const lemon_graph = mkPackage(
  nixRaw`pkgs.lemon-graph`,
  "Efficient library for combinatorial optimization tasks on graphs and networks",
);

/**
 * Remote utility tool that to copy, paste and open browsers over TCP
 */
export const lemonade = mkPackage(
  nixRaw`pkgs.lemonade`,
  "Remote utility tool that to copy, paste and open browsers over TCP",
);

/**
 * A lightweight xcb based bar
 */
export const lemonbar = mkPackage(
  nixRaw`pkgs.lemonbar`,
  "A lightweight xcb based bar",
);

/**
 * A lightweight xcb based bar with XFT-support
 */
export const lemonbar_xft = mkPackage(
  nixRaw`pkgs.lemonbar-xft`,
  "A lightweight xcb based bar with XFT-support",
);

/**
 * A customizable TUI display/login manager written in Rust
 */
export const lemurs = mkPackage(
  nixRaw`pkgs.lemurs`,
  "A customizable TUI display/login manager written in Rust",
);

/**
 * LenMus Phonascus is a program for learning music
 */
export const lenmus = mkPackage(
  nixRaw`pkgs.lenmus`,
  "LenMus Phonascus is a program for learning music",
);

/**
 * An utility to control Lenovo Legion laptop
 */
export const lenovo_legion = mkPackage(
  nixRaw`pkgs.lenovo-legion`,
  "An utility to control Lenovo Legion laptop",
);

/**
 * A web service that allows you to share notes anonymously, an alternative to pastebin.com
 */
export const lenpaste = mkPackage(
  nixRaw`pkgs.lenpaste`,
  "A web service that allows you to share notes anonymously, an alternative to pastebin.com",
);

/**
 * The Kubernetes IDE
 */
export const lens = mkPackage(
  nixRaw`pkgs.lens`,
  "The Kubernetes IDE",
);

/**
 * An opensource database of photographic lenses and their characteristics
 */
export const lensfun = mkPackage(
  nixRaw`pkgs.lensfun`,
  "An opensource database of photographic lenses and their characteristics",
);

/**
 * A high-performance typed higher order prover
 */
export const leo2 = mkPackage(
  nixRaw`pkgs.leo2`,
  "A high-performance typed higher order prover",
);

/**
 * An automated theorem prover for classical higher-order logic with choice
 */
export const leo3_bin = mkPackage(
  nixRaw`pkgs.leo3-bin`,
  "An automated theorem prover for classical higher-order logic with choice",
);

/**
 * A powerful folding editor
 */
export const leo_editor = mkPackage(
  nixRaw`pkgs.leo-editor`,
  "A powerful folding editor",
);

/**
 * CAD program for creating virtual LEGO models
 */
export const leocad = mkPackage(
  nixRaw`pkgs.leocad`,
  "CAD program for creating virtual LEGO models",
);

/**
 * A tool to losslessly compress JPEGs
 */
export const lepton = mkPackage(
  nixRaw`pkgs.lepton`,
  "A tool to losslessly compress JPEGs",
);

/**
 * Lepton Electronic Design Automation
 */
export const lepton_eda = mkPackage(
  nixRaw`pkgs.lepton-eda`,
  "Lepton Electronic Design Automation",
);

/**
 * Image processing and analysis library
 */
export const leptonica = mkPackage(
  nixRaw`pkgs.leptonica`,
  "Image processing and analysis library",
);

/**
 * A formatter for the leptos view! macro
 */
export const leptosfmt = mkPackage(
  nixRaw`pkgs.leptosfmt`,
  "A formatter for the leptos view! macro",
);

/**
 * C++ library for Limited Error Raster Compression
 */
export const lerc = mkPackage(
  nixRaw`pkgs.lerc`,
  "C++ library for Limited Error Raster Compression",
);

/**
 * Curses RPN calculator written in straight Python
 */
export const lerpn = mkPackage(
  nixRaw`pkgs.lerpn`,
  "Curses RPN calculator written in straight Python",
);

/**
 * A programming language agnostic view layer for creating desktop widgets and status bars
 */
export const lesbar = mkPackage(
  nixRaw`pkgs.lesbar`,
  "A programming language agnostic view layer for creating desktop widgets and status bars",
);

/**
 * A more advanced file pager than 'more'
 */
export const less = mkPackage(
  nixRaw`pkgs.less`,
  "A more advanced file pager than 'more'",
);

/**
 * Leaner CSS
 */
export const lessc = mkPackage(
  nixRaw`pkgs.lessc`,
  "Leaner CSS",
);

/**
 * Python LESS Compiler
 */
export const lesscpy = mkPackage(
  nixRaw`pkgs.lesscpy`,
  "Python LESS Compiler",
);

/**
 * Stateless password manager
 */
export const lesspass_cli = mkPackage(
  nixRaw`pkgs.lesspass-cli`,
  "Stateless password manager",
);

/**
 * A preprocessor for less
 */
export const lesspipe = mkPackage(
  nixRaw`pkgs.lesspipe`,
  "A preprocessor for less",
);

/**
 * An open source clone of the Motif widget set
 */
export const lesstif = mkPackage(
  nixRaw`pkgs.lesstif`,
  "An open source clone of the Motif widget set",
);

/**
 * Tool to wipe drives in a secure way
 */
export const lethe = mkPackage(
  nixRaw`pkgs.lethe`,
  "Tool to wipe drives in a secure way",
);

/**
 * An open source templating and deployment tool for HashiCorp Nomad jobs
 */
export const levant = mkPackage(
  nixRaw`pkgs.levant`,
  "An open source templating and deployment tool for HashiCorp Nomad jobs",
);

/**
 * oneAPI Level Zero Specification Headers and Loader
 */
export const level_zero = mkPackage(
  nixRaw`pkgs.level-zero`,
  "oneAPI Level Zero Specification Headers and Loader",
);

/**
 * Fast and lightweight key/value database library by Google
 */
export const leveldb = mkPackage(
  nixRaw`pkgs.leveldb`,
  "Fast and lightweight key/value database library by Google",
);

/**
 * ANSI C implementations of Levenberg-Marquardt, usable also from C++
 */
export const levmar = mkPackage(
  nixRaw`pkgs.levmar`,
  "ANSI C implementations of Levenberg-Marquardt, usable also from C++",
);

/**
 * A variable font family designed to aid in reading proficiency
 */
export const lexend = mkPackage(
  nixRaw`pkgs.lexend`,
  "A variable font family designed to aid in reading proficiency",
);

/**
 * Manipulate DNS records on various DNS providers in a standardized way
 */
export const lexicon = mkPackage(
  nixRaw`pkgs.lexicon`,
  "Manipulate DNS records on various DNS providers in a standardized way",
);

/**
 * CUPS drivers for Lexmark B2200 and MB2200 Series printers
 */
export const lexmark_aex = mkPackage(
  nixRaw`pkgs.lexmark-aex`,
  "CUPS drivers for Lexmark B2200 and MB2200 Series printers",
);

/**
 * A terminal file manager written in Go and heavily inspired by ranger
 */
export const lf = mkPackage(
  nixRaw`pkgs.lf`,
  "A terminal file manager written in Go and heavily inspired by ranger",
);

/**
 * The best of Erlang and of Lisp; at the same time!
 */
export const lfe = mkPackage(
  nixRaw`pkgs.lfe`,
  "The best of Erlang and of Lisp; at the same time!",
);

/**
 * The best of Erlang and of Lisp; at the same time!
 */
export const lfe_2_1 = mkPackage(
  nixRaw`pkgs.lfe_2_1`,
  "The best of Erlang and of Lisp; at the same time!",
);

/**
 * A file transfer program supporting a number of network protocols
 */
export const lftp = mkPackage(
  nixRaw`pkgs.lftp`,
  "A file transfer program supporting a number of network protocols",
);

/**
 * Unofficial downloader to GOG.com for Linux users. It uses the same API as the official GOGDownloader
 */
export const lgogdownloader = mkPackage(
  nixRaw`pkgs.lgogdownloader`,
  "Unofficial downloader to GOG.com for Linux users. It uses the same API as the official GOGDownloader",
);

/**
 * Adjust brightness for LG UltraFine 4K display (cross platform)
 */
export const lguf_brightness = mkPackage(
  nixRaw`pkgs.lguf-brightness`,
  "Adjust brightness for LG UltraFine 4K display (cross platform)",
);

/**
 * LHa is an archiver and compressor using the LZSS and Huffman encoding compression algorithms
 */
export const lha = mkPackage(
  nixRaw`pkgs.lha`,
  "LHa is an archiver and compressor using the LZSS and Huffman encoding compression algorithms",
);

/**
 * A general purpose interpolator, used for evaluating Parton Distribution Functions from discretised data files
 */
export const lhapdf = mkPackage(
  nixRaw`pkgs.lhapdf`,
  "A general purpose interpolator, used for evaluating Parton Distribution Functions from discretised data files",
);

/**
 * Free Software replacement for the Unix LHA tool
 */
export const lhasa = mkPackage(
  nixRaw`pkgs.lhasa`,
  "Free Software replacement for the Unix LHA tool",
);

/**
 * Preprocessor for typesetting Haskell sources with LaTeX
 */
export const lhs2tex = mkPackage(
  nixRaw`pkgs.lhs2tex`,
  "Preprocessor for typesetting Haskell sources with LaTeX",
);

/**
 * A Bitcoin wallet leveraging on-chain timelocks for safety and recovery
 */
export const liana = mkPackage(
  nixRaw`pkgs.liana`,
  "A Bitcoin wallet leveraging on-chain timelocks for safety and recovery",
);

/**
 * Easy to use 2D geometry library in C++
 */
export const lib2geom = mkPackage(
  nixRaw`pkgs.lib2geom`,
  "Easy to use 2D geometry library in C++",
);

/**
 * Library for managing 3D-Studio Release 3 and 4 ".3DS" files
 */
export const lib3ds = mkPackage(
  nixRaw`pkgs.lib3ds`,
  "Library for managing 3D-Studio Release 3 and 4 \".3DS\" files",
);

/**
 * Reference implementation of the 3D Manufacturing Format file standard
 */
export const lib3mf = mkPackage(
  nixRaw`pkgs.lib3mf`,
  "Reference implementation of the 3D Manufacturing Format file standard",
);

/**
 * A generic image manipulation library
 */
export const libAfterImage = mkPackage(
  nixRaw`pkgs.libAfterImage`,
  "A generic image manipulation library",
);

/**
 * Library and command-line utility for reading GDSII geometry files
 */
export const libGDSII = mkPackage(
  nixRaw`pkgs.libGDSII`,
  "Library and command-line utility for reading GDSII geometry files",
);

/**
 * Stub bindings using libglvnd
 */
export const libGL = mkPackage(
  nixRaw`pkgs.libGL`,
  "Stub bindings using libglvnd",
);

/**
 * OpenGL utility library
 */
export const libGLU = mkPackage(
  nixRaw`pkgs.libGLU`,
  "OpenGL utility library",
);

export const libHX = mkPackage(
  nixRaw`pkgs.libHX`,
  "",
);

/**
 * LAS 1.0/1.1/1.2 ASPRS LiDAR data translation toolset
 */
export const libLAS = mkPackage(
  nixRaw`pkgs.libLAS`,
  "LAS 1.0/1.1/1.2 ASPRS LiDAR data translation toolset",
);

/**
 * Library to access AACS protected Blu-Ray disks
 */
export const libaacs = mkPackage(
  nixRaw`pkgs.libaacs`,
  "Library to access AACS protected Blu-Ray disks",
);

/**
 * Support library for Reiser4
 */
export const libaal = mkPackage(
  nixRaw`pkgs.libaal`,
  "Support library for Reiser4",
);

/**
 * ABI Generic Analysis and Instrumentation Library
 */
export const libabigail = mkPackage(
  nixRaw`pkgs.libabigail`,
  "ABI Generic Analysis and Instrumentation Library",
);

/**
 * Library parsing abiword documents
 */
export const libabw = mkPackage(
  nixRaw`pkgs.libabw`,
  "Library parsing abiword documents",
);

/**
 * Library for managing accounts which can be used from GLib applications
 */
export const libaccounts_glib = mkPackage(
  nixRaw`pkgs.libaccounts-glib`,
  "Library for managing accounts which can be used from GLib applications",
);

/**
 * ACR38U smartcard reader driver for pcsclite
 */
export const libacr38u = mkPackage(
  nixRaw`pkgs.libacr38u`,
  "ACR38U smartcard reader driver for pcsclite",
);

/**
 * IIO AD9361 library for filter design and handling, multi-chip sync, etc
 */
export const libad9361 = mkPackage(
  nixRaw`pkgs.libad9361`,
  "IIO AD9361 library for filter design and handling, multi-chip sync, etc",
);

/**
 * Library to help with developing UI for mobile devices using GTK/GNOME
 */
export const libadwaita = mkPackage(
  nixRaw`pkgs.libadwaita`,
  "Library to help with developing UI for mobile devices using GTK/GNOME",
);

/**
 * Adaptive Entropy Coding library
 */
export const libaec = mkPackage(
  nixRaw`pkgs.libaec`,
  "Adaptive Entropy Coding library",
);

/**
 * Cross-platform GUI toolkit
 */
export const libagar = mkPackage(
  nixRaw`pkgs.libagar`,
  "Cross-platform GUI toolkit",
);

/**
 * Tests for libagar
 */
export const libagar_test = mkPackage(
  nixRaw`pkgs.libagar_test`,
  "Tests for libagar",
);

/**
 * Library for asynchronous I/O in Linux
 */
export const libaio = mkPackage(
  nixRaw`pkgs.libaio`,
  "Library for asynchronous I/O in Linux",
);

/**
 * AJA NTV2 Open Source Static Libs and Headers for building applications that only wish to statically link against
 */
export const libajantv2 = mkPackage(
  nixRaw`pkgs.libajantv2`,
  "AJA NTV2 Open Source Static Libs and Headers for building applications that only wish to statically link against",
);

/**
 * A library of routines that help solvers work with AMPL
 */
export const libamplsolver = mkPackage(
  nixRaw`pkgs.libamplsolver`,
  "A library of routines that help solvers work with AMPL",
);

/**
 * Library for communicating with a RabbitMQ server
 */
export const libamqpcpp = mkPackage(
  nixRaw`pkgs.libamqpcpp`,
  "Library for communicating with a RabbitMQ server",
);

/**
 * C runtime libraries of ANTLR v3
 */
export const libantlr3c = mkPackage(
  nixRaw`pkgs.libantlr3c`,
  "C runtime libraries of ANTLR v3",
);

export const libao = mkPackage(
  nixRaw`pkgs.libao`,
  "",
);

/**
 * Alliance for Open Media AV1 codec library
 */
export const libaom = mkPackage(
  nixRaw`pkgs.libaom`,
  "Alliance for Open Media AV1 codec library",
);

export const libaosd = mkPackage(
  nixRaw`pkgs.libaosd`,
  "",
);

/**
 * A mandatory access control system - library
 */
export const libapparmor = mkPackage(
  nixRaw`pkgs.libapparmor`,
  "A mandatory access control system - library",
);

/**
 * A library to allow applications to export a menu into the Unity Menu bar
 */
export const libappindicator = mkPackage(
  nixRaw`pkgs.libappindicator`,
  "A library to allow applications to export a menu into the Unity Menu bar",
);

/**
 * A library to allow applications to export a menu into the Unity Menu bar
 */
export const libappindicator_gtk2 = mkPackage(
  nixRaw`pkgs.libappindicator-gtk2`,
  "A library to allow applications to export a menu into the Unity Menu bar",
);

/**
 * A library to allow applications to export a menu into the Unity Menu bar
 */
export const libappindicator_gtk3 = mkPackage(
  nixRaw`pkgs.libappindicator-gtk3`,
  "A library to allow applications to export a menu into the Unity Menu bar",
);

/**
 * Multi-format archive and compression library
 */
export const libarchive = mkPackage(
  nixRaw`pkgs.libarchive`,
  "Multi-format archive and compression library",
);

/**
 * A Qt based archiving solution with libarchive backend
 */
export const libarchive_qt = mkPackage(
  nixRaw`pkgs.libarchive-qt`,
  "A Qt based archiving solution with libarchive backend",
);

/**
 * A key derivation function that was selected as the winner of the Password Hashing Competition in July 2015
 */
export const libargon2 = mkPackage(
  nixRaw`pkgs.libargon2`,
  "A key derivation function that was selected as the winner of the Password Hashing Competition in July 2015",
);

/**
 * A simple header-only C++ argument parser library
 */
export const libargs = mkPackage(
  nixRaw`pkgs.libargs`,
  "A simple header-only C++ argument parser library",
);

/**
 * Runtime library of Lev Walkin's asn1c split out as separate library
 */
export const libasn1c = mkPackage(
  nixRaw`pkgs.libasn1c`,
  "Runtime library of Lev Walkin's asn1c split out as separate library",
);

/**
 * Free, simple and portable asynchronous resolver library
 */
export const libasr = mkPackage(
  nixRaw`pkgs.libasr`,
  "Free, simple and portable asynchronous resolver library",
);

/**
 * Portable ASS/SSA subtitle renderer
 */
export const libass = mkPackage(
  nixRaw`pkgs.libass`,
  "Portable ASS/SSA subtitle renderer",
);

/**
 * IPC library used by GnuPG and related software
 */
export const libassuan = mkPackage(
  nixRaw`pkgs.libassuan`,
  "IPC library used by GnuPG and related software",
);

/**
 * Library of Assorted Spiffy Things
 */
export const libast = mkPackage(
  nixRaw`pkgs.libast`,
  "Library of Assorted Spiffy Things",
);

/**
 * A C library for Linux/Unix for executing name service queries asynchronously
 */
export const libasyncns = mkPackage(
  nixRaw`pkgs.libasyncns`,
  "A C library for Linux/Unix for executing name service queries asynchronously",
);

/**
 * Library for querying ATA SMART status
 */
export const libatasmart = mkPackage(
  nixRaw`pkgs.libatasmart`,
  "Library for querying ATA SMART status",
);

/**
 * A library for semi-portable access to hardware-provided atomic memory update operations
 */
export const libatomic_ops = mkPackage(
  nixRaw`pkgs.libatomic_ops`,
  "A library for semi-portable access to hardware-provided atomic memory update operations",
);

/**
 * Legacy D-Bus client library for Audacious
 */
export const libaudclient = mkPackage(
  nixRaw`pkgs.libaudclient`,
  "Legacy D-Bus client library for Audacious",
);

/**
 * A library for reading and resampling audio files
 */
export const libaudec = mkPackage(
  nixRaw`pkgs.libaudec`,
  "A library for reading and resampling audio files",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video (fork of ffmpeg)
 */
export const libav = mkPackage(
  nixRaw`pkgs.libav`,
  "A complete, cross-platform solution to record, convert and stream audio and video (fork of ffmpeg)",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video (fork of ffmpeg)
 */
export const libav_0_8 = mkPackage(
  nixRaw`pkgs.libav_0_8`,
  "A complete, cross-platform solution to record, convert and stream audio and video (fork of ffmpeg)",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video (fork of ffmpeg)
 */
export const libav_11 = mkPackage(
  nixRaw`pkgs.libav_11`,
  "A complete, cross-platform solution to record, convert and stream audio and video (fork of ffmpeg)",
);

/**
 * A complete, cross-platform solution to record, convert and stream audio and video (fork of ffmpeg)
 */
export const libav_12 = mkPackage(
  nixRaw`pkgs.libav_12`,
  "A complete, cross-platform solution to record, convert and stream audio and video (fork of ffmpeg)",
);

/**
 * Programming interface for the 1394 Trade Association AV/C (Audio/Video Control) Digital Interface Command Set
 */
export const libavc1394 = mkPackage(
  nixRaw`pkgs.libavc1394`,
  "Programming interface for the 1394 Trade Association AV/C (Audio/Video Control) Digital Interface Command Set",
);

/**
 * C implementation of the AV1 Image File Format
 */
export const libavif = mkPackage(
  nixRaw`pkgs.libavif`,
  "C implementation of the AV1 Image File Format",
);

/**
 * AX.25 library for hamradio applications
 */
export const libax25 = mkPackage(
  nixRaw`pkgs.libax25`,
  "AX.25 library for hamradio applications",
);

/**
 * Ayatana Application Indicators Shared Library
 */
export const libayatana_appindicator = mkPackage(
  nixRaw`pkgs.libayatana-appindicator`,
  "Ayatana Application Indicators Shared Library",
);

/**
 * Common functions for Ayatana System Indicators
 */
export const libayatana_common = mkPackage(
  nixRaw`pkgs.libayatana-common`,
  "Common functions for Ayatana System Indicators",
);

/**
 * Ayatana Indicators Shared Library
 */
export const libayatana_indicator = mkPackage(
  nixRaw`pkgs.libayatana-indicator`,
  "Ayatana Indicators Shared Library",
);

/**
 * The BLAKE2 family of cryptographic hash functions
 */
export const libb2 = mkPackage(
  nixRaw`pkgs.libb2`,
  "The BLAKE2 family of cryptographic hash functions",
);

/**
 * ANSI C routines for fast base64 encoding/decoding
 */
export const libb64 = mkPackage(
  nixRaw`pkgs.libb64`,
  "ANSI C routines for fast base64 encoding/decoding",
);

/**
 * A C library that may be linked into a C/C++ program to produce symbolic backtraces
 */
export const libbacktrace = mkPackage(
  nixRaw`pkgs.libbacktrace`,
  "A C library that may be linked into a C/C++ program to produce symbolic backtraces",
);

/**
 * A C library for interacting with BAP
 */
export const libbap = mkPackage(
  nixRaw`pkgs.libbap`,
  "A C library for interacting with BAP",
);

/**
 * Library written in C for encoding and decoding data using base32 or base64 (RFC-4648)
 */
export const libbaseencode = mkPackage(
  nixRaw`pkgs.libbaseencode`,
  "Library written in C for encoding and decoding data using base32 or base64 (RFC-4648)",
);

/**
 * Library to access the BitLocker Drive Encryption (BDE) format
 */
export const libbde = mkPackage(
  nixRaw`pkgs.libbde`,
  "Library to access the BitLocker Drive Encryption (BDE) format",
);

/**
 * Library to access BD+ protected Blu-Ray disks
 */
export const libbdplus = mkPackage(
  nixRaw`pkgs.libbdplus`,
  "Library to access BD+ protected Blu-Ray disks",
);

/**
 * A library for manipulating containers of machine code
 */
export const libbfd = mkPackage(
  nixRaw`pkgs.libbfd`,
  "A library for manipulating containers of machine code",
);

/**
 * A library for manipulating containers of machine code
 */
export const libbfd_2_38 = mkPackage(
  nixRaw`pkgs.libbfd_2_38`,
  "A library for manipulating containers of machine code",
);

/**
 * C++ library for building bitcoin applications
 */
export const libbitcoin = mkPackage(
  nixRaw`pkgs.libbitcoin`,
  "C++ library for building bitcoin applications",
);

/**
 * Bitcoin client query library
 */
export const libbitcoin_client = mkPackage(
  nixRaw`pkgs.libbitcoin-client`,
  "Bitcoin client query library",
);

/**
 * Bitcoin command line tool
 */
export const libbitcoin_explorer = mkPackage(
  nixRaw`pkgs.libbitcoin-explorer`,
  "Bitcoin command line tool",
);

/**
 * Bitcoin P2P Network Library
 */
export const libbitcoin_network = mkPackage(
  nixRaw`pkgs.libbitcoin-network`,
  "Bitcoin P2P Network Library",
);

/**
 * Bitcoin Blockchain Query Protocol
 */
export const libbitcoin_protocol = mkPackage(
  nixRaw`pkgs.libbitcoin-protocol`,
  "Bitcoin Blockchain Query Protocol",
);

/**
 * Supporting library of the BladeRF SDR opensource hardware
 */
export const libbladeRF = mkPackage(
  nixRaw`pkgs.libbladeRF`,
  "Supporting library of the BladeRF SDR opensource hardware",
);

/**
 * A library for manipulating block devices
 */
export const libblockdev = mkPackage(
  nixRaw`pkgs.libblockdev`,
  "A library for manipulating block devices",
);

/**
 * Installs the BlocksRuntime library from the compiler-rt
 */
export const libblocksruntime = mkPackage(
  nixRaw`pkgs.libblocksruntime`,
  "Installs the BlocksRuntime library from the compiler-rt",
);

/**
 * Library to access Blu-Ray disks for video playback
 */
export const libbluray = mkPackage(
  nixRaw`pkgs.libbluray`,
  "Library to access Blu-Ray disks for video playback",
);

/**
 * Upstream mirror of libbpf
 */
export const libbpf = mkPackage(
  nixRaw`pkgs.libbpf`,
  "Upstream mirror of libbpf",
);

/**
 * Upstream mirror of libbpf
 */
export const libbpf_0 = mkPackage(
  nixRaw`pkgs.libbpf_0`,
  "Upstream mirror of libbpf",
);

/**
 * build2 package dependency manager utility library
 */
export const libbpkg = mkPackage(
  nixRaw`pkgs.libbpkg`,
  "build2 package dependency manager utility library",
);

/**
 * C++ library for computations on braid groups
 */
export const libbraiding = mkPackage(
  nixRaw`pkgs.libbraiding`,
  "C++ library for computations on braid groups",
);

/**
 * Bauer stereophonic-to-binaural DSP library
 */
export const libbs2b = mkPackage(
  nixRaw`pkgs.libbs2b`,
  "Bauer stereophonic-to-binaural DSP library",
);

/**
 * Common functions found on BSD systems
 */
export const libbsd = mkPackage(
  nixRaw`pkgs.libbsd`,
  "Common functions found on BSD systems",
);

/**
 * A C Library for parsing, editing, and creating BSON documents
 */
export const libbson = mkPackage(
  nixRaw`pkgs.libbson`,
  "A C Library for parsing, editing, and creating BSON documents",
);

/**
 * Bluetooth baseband decoding library
 */
export const libbtbb = mkPackage(
  nixRaw`pkgs.libbtbb`,
  "Bluetooth baseband decoding library",
);

/**
 * A library by which preformatted data get onto optical media: CD, DVD, BD (Blu-Ray)
 */
export const libburn = mkPackage(
  nixRaw`pkgs.libburn`,
  "A library by which preformatted data get onto optical media: CD, DVD, BD (Blu-Ray)",
);

/**
 * build2 utility library
 */
export const libbutl = mkPackage(
  nixRaw`pkgs.libbutl`,
  "build2 utility library",
);

/**
 * A tiny library providing a C 'class' for working with arbitrary big sizes in bytes
 */
export const libbytesize = mkPackage(
  nixRaw`pkgs.libbytesize`,
  "A tiny library providing a C 'class' for working with arbitrary big sizes in bytes",
);

/**
 * A graphics library that outputs text instead of pixels
 */
export const libcaca = mkPackage(
  nixRaw`pkgs.libcaca`,
  "A graphics library that outputs text instead of pixels",
);

/**
 * Smart card emulation library
 */
export const libcacard = mkPackage(
  nixRaw`pkgs.libcacard`,
  "Smart card emulation library",
);

/**
 * An open source camera stack and framework for Linux, Android, and ChromeOS
 */
export const libcamera = mkPackage(
  nixRaw`pkgs.libcamera`,
  "An open source camera stack and framework for Linux, Android, and ChromeOS",
);

/**
 * An implementation of the XDG Sound Theme and Name Specifications
 */
export const libcanberra = mkPackage(
  nixRaw`pkgs.libcanberra`,
  "An implementation of the XDG Sound Theme and Name Specifications",
);

/**
 * An implementation of the XDG Sound Theme and Name Specifications
 */
export const libcanberra_gtk2 = mkPackage(
  nixRaw`pkgs.libcanberra-gtk2`,
  "An implementation of the XDG Sound Theme and Name Specifications",
);

/**
 * An implementation of the XDG Sound Theme and Name Specifications
 */
export const libcanberra_gtk3 = mkPackage(
  nixRaw`pkgs.libcanberra-gtk3`,
  "An implementation of the XDG Sound Theme and Name Specifications",
);

/**
 * An implementation of the XDG Sound Theme and Name Specifications
 */
export const libcanberra_kde = mkPackage(
  nixRaw`pkgs.libcanberra_kde`,
  "An implementation of the XDG Sound Theme and Name Specifications",
);

/**
 * A C library implementing the Cangjie input method
 */
export const libcangjie = mkPackage(
  nixRaw`pkgs.libcangjie`,
  "A C library implementing the Cangjie input method",
);

/**
 * Library for working with POSIX capabilities
 */
export const libcap = mkPackage(
  nixRaw`pkgs.libcap`,
  "Library for working with POSIX capabilities",
);

/**
 * Library for working with POSIX capabilities
 */
export const libcap_ng = mkPackage(
  nixRaw`pkgs.libcap_ng`,
  "Library for working with POSIX capabilities",
);

/**
 * A trivial implementation of libpulse PulseAudio library API
 */
export const libcardiacarrest = mkPackage(
  nixRaw`pkgs.libcardiacarrest`,
  "A trivial implementation of libpulse PulseAudio library API",
);

/**
 * CBOR protocol implementation for C and others
 */
export const libcbor = mkPackage(
  nixRaw`pkgs.libcbor`,
  "CBOR protocol implementation for C and others",
);

/**
 * Library for collision detection between two convex shapes
 */
export const libccd = mkPackage(
  nixRaw`pkgs.libccd`,
  "Library for collision detection between two convex shapes",
);

/**
 * Library for basic data structures in C
 */
export const libcdada = mkPackage(
  nixRaw`pkgs.libcdada`,
  "Library for basic data structures in C",
);

/**
 * A portable library for controlling audio CDs
 */
export const libcdaudio = mkPackage(
  nixRaw`pkgs.libcdaudio`,
  "A portable library for controlling audio CDs",
);

/**
 * C library to access data on a CDDB server (freedb.org)
 */
export const libcddb = mkPackage(
  nixRaw`pkgs.libcddb`,
  "C library to access data on a CDDB server (freedb.org)",
);

/**
 * A library for OS-independent CD-ROM and CD image access
 */
export const libcdio = mkPackage(
  nixRaw`pkgs.libcdio`,
  "A library for OS-independent CD-ROM and CD image access",
);

/**
 * CD paranoia on top of libcdio
 */
export const libcdio_paranoia = mkPackage(
  nixRaw`pkgs.libcdio-paranoia`,
  "CD paranoia on top of libcdio",
);

/**
 * A library providing ability to interpret and import Corel Draw drawings into various applications
 */
export const libcdr = mkPackage(
  nixRaw`pkgs.libcdr`,
  "A library providing ability to interpret and import Corel Draw drawings into various applications",
);

/**
 * Allows you (with the right hardware) to control your device with your TV remote control using existing HDMI cabling
 */
export const libcec = mkPackage(
  nixRaw`pkgs.libcec`,
  "Allows you (with the right hardware) to control your device with your TV remote control using existing HDMI cabling",
);

/**
 * Platform library for libcec and Kodi addons
 */
export const libcec_platform = mkPackage(
  nixRaw`pkgs.libcec_platform`,
  "Platform library for libcec and Kodi addons",
);

/**
 * Simple framework for embedding Chromium-based browsers in other applications
 */
export const libcef = mkPackage(
  nixRaw`pkgs.libcef`,
  "Simple framework for embedding Chromium-based browsers in other applications",
);

/**
 * Higher level programming in C
 */
export const libcello = mkPackage(
  nixRaw`pkgs.libcello`,
  "Higher level programming in C",
);

/**
 * Distributed storage system
 */
export const libceph = mkPackage(
  nixRaw`pkgs.libceph`,
  "Distributed storage system",
);

/**
 * Complex error (erf), Dawson, Faddeeva, and Voigt function library
 */
export const libcerf = mkPackage(
  nixRaw`pkgs.libcerf`,
  "Complex error (erf), Dawson, Faddeeva, and Voigt function library",
);

/**
 * Library and tools to manage Linux cgroups
 */
export const libcgroup = mkPackage(
  nixRaw`pkgs.libcgroup`,
  "Library and tools to manage Linux cgroups",
);

/**
 * C library providing a ClutterActor to display maps
 */
export const libchamplain = mkPackage(
  nixRaw`pkgs.libchamplain`,
  "C library providing a ClutterActor to display maps",
);

/**
 * C library providing a ClutterActor to display maps
 */
export const libchamplain_libsoup3 = mkPackage(
  nixRaw`pkgs.libchamplain_libsoup3`,
  "C library providing a ClutterActor to display maps",
);

/**
 * Mozilla's Universal Charset Detector C/C++ API
 */
export const libchardet = mkPackage(
  nixRaw`pkgs.libchardet`,
  "Mozilla's Universal Charset Detector C/C++ API",
);

/**
 * Intelligent Chinese phonetic input method
 */
export const libchewing = mkPackage(
  nixRaw`pkgs.libchewing`,
  "Intelligent Chinese phonetic input method",
);

/**
 * Library for access to chipcards
 */
export const libchipcard = mkPackage(
  nixRaw`pkgs.libchipcard`,
  "Library for access to chipcards",
);

/**
 * Tools & library for data backup and distributed storage
 */
export const libchop = mkPackage(
  nixRaw`pkgs.libchop`,
  "Tools & library for data backup and distributed storage",
);

/**
 * Manipulate mmCIF and PDB files
 */
export const libcifpp = mkPackage(
  nixRaw`pkgs.libcifpp`,
  "Manipulate mmCIF and PDB files",
);

/**
 * General GTO integrals for quantum chemistry
 */
export const libcint = mkPackage(
  nixRaw`pkgs.libcint`,
  "General GTO integrals for quantum chemistry",
);

/**
 * High-performance concurrency research library
 */
export const libck = mkPackage(
  nixRaw`pkgs.libck`,
  "High-performance concurrency research library",
);

/**
 * A C language family frontend for LLVM
 */
export const libclang = mkPackage(
  nixRaw`pkgs.libclang`,
  "A C language family frontend for LLVM",
);

/**
 * Implementation of the library requirements of the OpenCL C programming language
 */
export const libclc = mkPackage(
  nixRaw`pkgs.libclc`,
  "Implementation of the library requirements of the OpenCL C programming language",
);

/**
 * Emulate a Cisco-style telnet command-line interface
 */
export const libcli = mkPackage(
  nixRaw`pkgs.libcli`,
  "Emulate a Cisco-style telnet command-line interface",
);

/**
 * DBus API that allows cloud storage sync clients to expose their services
 */
export const libcloudproviders = mkPackage(
  nixRaw`pkgs.libcloudproviders`,
  "DBus API that allows cloud storage sync clients to expose their services",
);

/**
 * Zita thread library
 */
export const libclthreads = mkPackage(
  nixRaw`pkgs.libclthreads`,
  "Zita thread library",
);

/**
 * Zita X11 library
 */
export const libclxclient = mkPackage(
  nixRaw`pkgs.libclxclient`,
  "Zita X11 library",
);

/**
 * C++ client library for the CMIS interface
 */
export const libcmis = mkPackage(
  nixRaw`pkgs.libcmis`,
  "C++ client library for the CMIS interface",
);

/**
 * A CoAP (RFC 7252) implementation in C
 */
export const libcoap = mkPackage(
  nixRaw`pkgs.libcoap`,
  "A CoAP (RFC 7252) implementation in C",
);

/**
 * C Library for collectd, a daemon which collects system performance statistics periodically
 */
export const libcollectdclient = mkPackage(
  nixRaw`pkgs.libcollectdclient`,
  "C Library for collectd, a daemon which collects system performance statistics periodically",
);

/**
 * A simple library for processing structured configuration files
 */
export const libconfig = mkPackage(
  nixRaw`pkgs.libconfig`,
  "A simple library for processing structured configuration files",
);

/**
 * Small configuration file parser library for C
 */
export const libconfuse = mkPackage(
  nixRaw`pkgs.libconfuse`,
  "Small configuration file parser library for C",
);

/**
 * A simple, easily embeddable cross-platform C library
 */
export const libcork = mkPackage(
  nixRaw`pkgs.libcork`,
  "A simple, easily embeddable cross-platform C library",
);

/**
 * C library that generates TOTP and HOTP
 */
export const libcotp = mkPackage(
  nixRaw`pkgs.libcotp`,
  "C library that generates TOTP and HOTP",
);

/**
 * C client library for Couchbase
 */
export const libcouchbase = mkPackage(
  nixRaw`pkgs.libcouchbase`,
  "C client library for Couchbase",
);

/**
 * C++ wrapper around libcurl
 */
export const libcpr = mkPackage(
  nixRaw`pkgs.libcpr`,
  "C++ wrapper around libcurl",
);

/**
 * A small C library for x86 CPU detection and feature extraction
 */
export const libcpuid = mkPackage(
  nixRaw`pkgs.libcpuid`,
  "A small C library for x86 CPU detection and feature extraction",
);

/**
 * High level C++ network packet sniffing and crafting library
 */
export const libcrafter = mkPackage(
  nixRaw`pkgs.libcrafter`,
  "High level C++ network packet sniffing and crafting library",
);

/**
 * C client library for Redis (key-value database)
 */
export const libcredis = mkPackage(
  nixRaw`pkgs.libcredis`,
  "C client library for Redis (key-value database)",
);

/**
 * Lightweight cross platform C++ GUID/UUID library
 */
export const libcrossguid = mkPackage(
  nixRaw`pkgs.libcrossguid`,
  "Lightweight cross platform C++ GUID/UUID library",
);

/**
 * Interface components for OpenPGP
 */
export const libcryptui = mkPackage(
  nixRaw`pkgs.libcryptui`,
  "Interface components for OpenPGP",
);

/**
 * CS50 Library for C
 */
export const libcs50 = mkPackage(
  nixRaw`pkgs.libcs50`,
  "CS50 Library for C",
);

/**
 * Smart pointer constructs for the (GNU) C programming language
 */
export const libcsptr = mkPackage(
  nixRaw`pkgs.libcsptr`,
  "Smart pointer constructs for the (GNU) C programming language",
);

/**
 * Communications toolbox
 */
export const libctb = mkPackage(
  nixRaw`pkgs.libctb`,
  "Communications toolbox",
);

/**
 * A simple but powerful template language for C++
 */
export const libctemplate = mkPackage(
  nixRaw`pkgs.libctemplate`,
  "A simple but powerful template language for C++",
);

/**
 * Guile-based library for supporting flexible control files in scientific simulations
 */
export const libctl = mkPackage(
  nixRaw`pkgs.libctl`,
  "Guile-based library for supporting flexible control files in scientific simulations",
);

/**
 * CUE Sheet Parser Library
 */
export const libcue = mkPackage(
  nixRaw`pkgs.libcue`,
  "CUE Sheet Parser Library",
);

/**
 * C++ utility library from Code Synthesis
 */
export const libcutl = mkPackage(
  nixRaw`pkgs.libcutl`,
  "C++ utility library from Code Synthesis",
);

/**
 * C++ standard library
 */
export const libcxx = mkPackage(
  nixRaw`pkgs.libcxx`,
  "C++ standard library",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const libcxxStdenv = mkPackage(
  nixRaw`pkgs.libcxxStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * Provides C++ standard library support
 */
export const libcxxabi = mkPackage(
  nixRaw`pkgs.libcxxabi`,
  "Provides C++ standard library support",
);

/**
 * Implementation of the Code Sourcery C++ ABI
 */
export const libcxxrt = mkPackage(
  nixRaw`pkgs.libcxxrt`,
  "Implementation of the Code Sourcery C++ ABI",
);

/**
 * C library for reading and writing YAML
 */
export const libcyaml = mkPackage(
  nixRaw`pkgs.libcyaml`,
  "C library for reading and writing YAML",
);

/**
 * Lightweight C library that eases the writing of UNIX daemons
 */
export const libdaemon = mkPackage(
  nixRaw`pkgs.libdaemon`,
  "Lightweight C library that eases the writing of UNIX daemons",
);

/**
 * C/C++ WebRTC network library featuring Data Channels, Media Transport, and WebSockets
 */
export const libdatachannel = mkPackage(
  nixRaw`pkgs.libdatachannel`,
  "C/C++ WebRTC network library featuring Data Channels, Media Transport, and WebSockets",
);

/**
 * Client library for accessing SOAP services of Czech government-provided Databox infomation system
 */
export const libdatovka = mkPackage(
  nixRaw`pkgs.libdatovka`,
  "Client library for accessing SOAP services of Czech government-provided Databox infomation system",
);

/**
 * This is an implementation of double-array structure for representing trie
 */
export const libdatrie = mkPackage(
  nixRaw`pkgs.libdatrie`,
  "This is an implementation of double-array structure for representing trie",
);

/**
 * A library to delight your users with fancy features
 */
export const libdazzle = mkPackage(
  nixRaw`pkgs.libdazzle`,
  "A library to delight your users with fancy features",
);

/**
 * DB independent interface to DB
 */
export const libdbi = mkPackage(
  nixRaw`pkgs.libdbi`,
  "DB independent interface to DB",
);

/**
 * Database drivers for libdbi
 */
export const libdbiDrivers = mkPackage(
  nixRaw`pkgs.libdbiDrivers`,
  "Database drivers for libdbi",
);

/**
 * Database drivers for libdbi
 */
export const libdbiDriversBase = mkPackage(
  nixRaw`pkgs.libdbiDriversBase`,
  "Database drivers for libdbi",
);

/**
 * Library for passing menu structures across DBus
 */
export const libdbusmenu = mkPackage(
  nixRaw`pkgs.libdbusmenu`,
  "Library for passing menu structures across DBus",
);

/**
 * Library for passing menu structures across DBus
 */
export const libdbusmenu_gtk2 = mkPackage(
  nixRaw`pkgs.libdbusmenu-gtk2`,
  "Library for passing menu structures across DBus",
);

/**
 * Library for passing menu structures across DBus
 */
export const libdbusmenu_gtk3 = mkPackage(
  nixRaw`pkgs.libdbusmenu-gtk3`,
  "Library for passing menu structures across DBus",
);

/**
 * Capture and control API for IIDC compliant cameras
 */
export const libdc1394 = mkPackage(
  nixRaw`pkgs.libdc1394`,
  "Capture and control API for IIDC compliant cameras",
);

/**
 * Open h.265 video codec implementation
 */
export const libde265 = mkPackage(
  nixRaw`pkgs.libde265`,
  "Open h.265 video codec implementation",
);

/**
 * Client-side decorations library for Wayland clients
 */
export const libdecor = mkPackage(
  nixRaw`pkgs.libdecor`,
  "Client-side decorations library for Wayland clients",
);

/**
 * Fast DEFLATE/zlib/gzip compressor and decompressor
 */
export const libdeflate = mkPackage(
  nixRaw`pkgs.libdeflate`,
  "Fast DEFLATE/zlib/gzip compressor and decompressor",
);

/**
 * Delta Chat Rust Core library
 */
export const libdeltachat = mkPackage(
  nixRaw`pkgs.libdeltachat`,
  "Delta Chat Rust Core library",
);

/**
 * An image library which can can load, save, convert, manipulate, filter and display a wide variety of image formats
 */
export const libdevil = mkPackage(
  nixRaw`pkgs.libdevil`,
  "An image library which can can load, save, convert, manipulate, filter and display a wide variety of image formats",
);

/**
 * An image library which can can load, save, convert, manipulate, filter and display a wide variety of image formats
 */
export const libdevil_nox = mkPackage(
  nixRaw`pkgs.libdevil-nox`,
  "An image library which can can load, save, convert, manipulate, filter and display a wide variety of image formats",
);

/**
 * Library supporting deferred execution for GNOME and GTK
 */
export const libdex = mkPackage(
  nixRaw`pkgs.libdex`,
  "Library supporting deferred execution for GNOME and GTK",
);

/**
 * Library for creating DigiDoc signature files
 */
export const libdigidocpp = mkPackage(
  nixRaw`pkgs.libdigidocpp`,
  "Library for creating DigiDoc signature files",
);

/**
 * A C library for creating MusicBrainz DiscIDs from audio CDs
 */
export const libdiscid = mkPackage(
  nixRaw`pkgs.libdiscid`,
  "A C library for creating MusicBrainz DiscIDs from audio CDs",
);

        /**
         * Drop-in replacement for the libc allocator which improves
the odds of bumping into heap-related security bugs in
several ways.

         */
export const libdislocator = mkPackage(
  nixRaw`pkgs.libdislocator`,
  "Drop-in replacement for the libc allocator which improves\nthe odds of bumping into heap-related security bugs in\nseveral ways.\n",
);

/**
 * EDID and DisplayID library
 */
export const libdisplay_info = mkPackage(
  nixRaw`pkgs.libdisplay-info`,
  "EDID and DisplayID library",
);

/**
 * A cross-platform and open source library for communication with dive computers from various manufacturers
 */
export const libdivecomputer = mkPackage(
  nixRaw`pkgs.libdivecomputer`,
  "A cross-platform and open source library for communication with dive computers from various manufacturers",
);

/**
 * Library to construct the suffix array and the BW transformed string
 */
export const libdivsufsort = mkPackage(
  nixRaw`pkgs.libdivsufsort`,
  "Library to construct the suffix array and the BW transformed string",
);

/**
 * Library that implements the DMAP family of protocols
 */
export const libdmapsharing = mkPackage(
  nixRaw`pkgs.libdmapsharing`,
  "Library that implements the DMAP family of protocols",
);

/**
 * An open source software for reading and writing Data Matrix barcodes
 */
export const libdmtx = mkPackage(
  nixRaw`pkgs.libdmtx`,
  "An open source software for reading and writing Data Matrix barcodes",
);

/**
 * Provides a simplified, portable interface to several low-level networking routines
 */
export const libdnet = mkPackage(
  nixRaw`pkgs.libdnet`,
  "Provides a simplified, portable interface to several low-level networking routines",
);

/**
 * Package management library
 */
export const libdnf = mkPackage(
  nixRaw`pkgs.libdnf`,
  "Package management library",
);

/**
 * C library for Dolby Vision metadata parsing and writing
 */
export const libdovi = mkPackage(
  nixRaw`pkgs.libdovi`,
  "C library for Dolby Vision metadata parsing and writing",
);

/**
 * Direct Rendering Manager library and headers
 */
export const libdrm = mkPackage(
  nixRaw`pkgs.libdrm`,
  "Direct Rendering Manager library and headers",
);

/**
 * A library for accessing discs and disc image files
 */
export const libdsk = mkPackage(
  nixRaw`pkgs.libdsk`,
  "A library for accessing discs and disc image files",
);

/**
 * Software decoder for DV format video, as defined by the IEC 61834 and SMPTE 314M standards
 */
export const libdv = mkPackage(
  nixRaw`pkgs.libdv`,
  "Software decoder for DV format video, as defined by the IEC 61834 and SMPTE 314M standards",
);

/**
 * A free implementation of the DVB Common Scrambling Algorithm with encryption and decryption capabilities
 */
export const libdvbcsa = mkPackage(
  nixRaw`pkgs.libdvbcsa`,
  "A free implementation of the DVB Common Scrambling Algorithm with encryption and decryption capabilities",
);

/**
 * A simple library designed for decoding and generation of MPEG TS and DVB PSI tables according to standards ISO/IEC 13818 and ITU-T H.222.0
 */
export const libdvbpsi = mkPackage(
  nixRaw`pkgs.libdvbpsi`,
  "A simple library designed for decoding and generation of MPEG TS and DVB PSI tables according to standards ISO/IEC 13818 and ITU-T H.222.0",
);

/**
 * A library for decrypting DVDs
 */
export const libdvdcss = mkPackage(
  nixRaw`pkgs.libdvdcss`,
  "A library for decrypting DVDs",
);

/**
 * A library that implements DVD navigation features such as DVD menus
 */
export const libdvdnav = mkPackage(
  nixRaw`pkgs.libdvdnav`,
  "A library that implements DVD navigation features such as DVD menus",
);

/**
 * A library that implements DVD navigation features such as DVD menus
 */
export const libdvdnav_4_2_1 = mkPackage(
  nixRaw`pkgs.libdvdnav_4_2_1`,
  "A library that implements DVD navigation features such as DVD menus",
);

/**
 * A library for reading DVDs
 */
export const libdvdread = mkPackage(
  nixRaw`pkgs.libdvdread`,
  "A library for reading DVDs",
);

/**
 * A library for reading DVDs
 */
export const libdvdread_4_9_9 = mkPackage(
  nixRaw`pkgs.libdvdread_4_9_9`,
  "A library for reading DVDs",
);

export const libdwarf = mkPackage(
  nixRaw`pkgs.libdwarf`,
  "",
);

export const libdwarf_20210528 = mkPackage(
  nixRaw`pkgs.libdwarf_20210528`,
  "",
);

/**
 * Library reading dwg files
 */
export const libdwg = mkPackage(
  nixRaw`pkgs.libdwg`,
  "Library reading dwg files",
);

/**
 * C++ dynamic ndarray library, with Python exposure
 */
export const libdynd = mkPackage(
  nixRaw`pkgs.libdynd`,
  "C++ dynamic ndarray library, with Python exposure",
);

/**
 * Library for reading & writing the E57 file format
 */
export const libe57format = mkPackage(
  nixRaw`pkgs.libe57format`,
  "Library for reading & writing the E57 file format",
);

/**
 * Library for import of reflowable e-book formats
 */
export const libe_book = mkPackage(
  nixRaw`pkgs.libe-book`,
  "Library for import of reflowable e-book formats",
);

/**
 * Small LD_PRELOAD library to disable fsync and friends
 */
export const libeatmydata = mkPackage(
  nixRaw`pkgs.libeatmydata`,
  "Small LD_PRELOAD library to disable fsync and friends",
);

/**
 * C library for accessing Japanese CD-ROM books
 */
export const libeb = mkPackage(
  nixRaw`pkgs.libeb`,
  "C library for accessing Japanese CD-ROM books",
);

/**
 * Extensible Binary Meta Language library
 */
export const libebml = mkPackage(
  nixRaw`pkgs.libebml`,
  "Extensible Binary Meta Language library",
);

/**
 * Implementation of the EBU R128 loudness standard
 */
export const libebur128 = mkPackage(
  nixRaw`pkgs.libebur128`,
  "Implementation of the EBU R128 loudness standard",
);

/**
 * A port of the NetBSD Editline library (libedit)
 */
export const libedit = mkPackage(
  nixRaw`pkgs.libedit`,
  "A port of the NetBSD Editline library (libedit)",
);

/**
 * An Event Expression Library inspired by CEE
 */
export const libee = mkPackage(
  nixRaw`pkgs.libee`,
  "An Event Expression Library inspired by CEE",
);

/**
 * Library for Emulated Input
 */
export const libei = mkPackage(
  nixRaw`pkgs.libei`,
  "Library for Emulated Input",
);

/**
 * ELF object file access library
 */
export const libelf = mkPackage(
  nixRaw`pkgs.libelf`,
  "ELF object file access library",
);

/**
 * C++11 ELF/DWARF parser
 */
export const libelfin = mkPackage(
  nixRaw`pkgs.libelfin`,
  "C++11 ELF/DWARF parser",
);

/**
 * Microsoft EMF to SVG conversion library
 */
export const libemf2svg = mkPackage(
  nixRaw`pkgs.libemf2svg`,
  "Microsoft EMF to SVG conversion library",
);

/**
 * Easy Publish and Consume Library
 */
export const libepc = mkPackage(
  nixRaw`pkgs.libepc`,
  "Easy Publish and Consume Library",
);

/**
 * A library for handling OpenGL function pointer management
 */
export const libepoxy = mkPackage(
  nixRaw`pkgs.libepoxy`,
  "A library for handling OpenGL function pointer management",
);

/**
 * A humorous politically themed ncurses game
 */
export const liberal_crime_squad = mkPackage(
  nixRaw`pkgs.liberal-crime-squad`,
  "A humorous politically themed ncurses game",
);

/**
 * Liberation Sans fork with improved cyrillic support
 */
export const liberastika = mkPackage(
  nixRaw`pkgs.liberastika`,
  "Liberation Sans fork with improved cyrillic support",
);

/**
 * Erasure Code API library written in C with pluggable Erasure Code backends
 */
export const liberasurecode = mkPackage(
  nixRaw`pkgs.liberasurecode`,
  "Erasure Code API library written in C with pluggable Erasure Code backends",
);

/**
 * Real-time strategy game with programmable units
 */
export const liberation_circuit = mkPackage(
  nixRaw`pkgs.liberation-circuit`,
  "Real-time strategy game with programmable units",
);

/**
 * Liberation Sans Narrow Font Family is a replacement for Arial Narrow
 */
export const liberation_sans_narrow = mkPackage(
  nixRaw`pkgs.liberation-sans-narrow`,
  "Liberation Sans Narrow Font Family is a replacement for Arial Narrow",
);

/**
 * Liberation Fonts, replacements for Times New Roman, Arial, and Courier New
 */
export const liberation_ttf = mkPackage(
  nixRaw`pkgs.liberation_ttf`,
  "Liberation Fonts, replacements for Times New Roman, Arial, and Courier New",
);

/**
 * Liberation Fonts, replacements for Times New Roman, Arial, and Courier New
 */
export const liberation_ttf_v1 = mkPackage(
  nixRaw`pkgs.liberation_ttf_v1`,
  "Liberation Fonts, replacements for Times New Roman, Arial, and Courier New",
);

/**
 * Liberation Fonts, replacements for Times New Roman, Arial, and Courier New
 */
export const liberation_ttf_v2 = mkPackage(
  nixRaw`pkgs.liberation_ttf_v2`,
  "Liberation Fonts, replacements for Times New Roman, Arial, and Courier New",
);

/**
 * Essential Routines for Fundamental Astronomy
 */
export const liberfa = mkPackage(
  nixRaw`pkgs.liberfa`,
  "Essential Routines for Fundamental Astronomy",
);

/**
 * Ettus Research DMA I/O Library
 */
export const liberio = mkPackage(
  nixRaw`pkgs.liberio`,
  "Ettus Research DMA I/O Library",
);

/**
 * Linux Libertine Fonts
 */
export const libertine = mkPackage(
  nixRaw`pkgs.libertine`,
  "Linux Libertine Fonts",
);

/**
 * The Libertinus font family
 */
export const libertinus = mkPackage(
  nixRaw`pkgs.libertinus`,
  "The Libertinus font family",
);

/**
 * A Library for Posting Electronic Mail
 */
export const libesmtp = mkPackage(
  nixRaw`pkgs.libesmtp`,
  "A Library for Posting Electronic Mail",
);

/**
 * Some essentials for string handling
 */
export const libestr = mkPackage(
  nixRaw`pkgs.libestr`,
  "Some essentials for string handling",
);

/**
 * Mail Framework for the C Language
 */
export const libetpan = mkPackage(
  nixRaw`pkgs.libetpan`,
  "Mail Framework for the C Language",
);

/**
 * A high-performance event loop/event model with lots of features
 */
export const libev = mkPackage(
  nixRaw`pkgs.libev`,
  "A high-performance event loop/event model with lots of features",
);

/**
 * Wrapper library for evdev devices
 */
export const libevdev = mkPackage(
  nixRaw`pkgs.libevdev`,
  "Wrapper library for evdev devices",
);

/**
 * ChromiumOS libevdev. Renamed to avoid conflicts with the standard libevdev found in Linux distros
 */
export const libevdevc = mkPackage(
  nixRaw`pkgs.libevdevc`,
  "ChromiumOS libevdev. Renamed to avoid conflicts with the standard libevdev found in Linux distros",
);

/**
 * Easy-to-use event device library in C++
 */
export const libevdevplus = mkPackage(
  nixRaw`pkgs.libevdevplus`,
  "Easy-to-use event device library in C++",
);

/**
 * Event notification library
 */
export const libevent = mkPackage(
  nixRaw`pkgs.libevent`,
  "Event notification library",
);

/**
 * Library for support of the Expert Witness Compression Format
 */
export const libewf = mkPackage(
  nixRaw`pkgs.libewf`,
  "Library for support of the Expert Witness Compression Format",
);

/**
 * Quick-n-dirty BSD licensed clone of the GNU libc backtrace facility
 */
export const libexecinfo = mkPackage(
  nixRaw`pkgs.libexecinfo`,
  "Quick-n-dirty BSD licensed clone of the GNU libc backtrace facility",
);

/**
 * A library to read and manipulate EXIF data in digital photographs
 */
export const libexif = mkPackage(
  nixRaw`pkgs.libexif`,
  "A library to read and manipulate EXIF data in digital photographs",
);

/**
 * Library that hides the complexity of using the SIP protocol
 */
export const libexosip = mkPackage(
  nixRaw`pkgs.libexosip`,
  "Library that hides the complexity of using the SIP protocol",
);

/**
 * Driver for exSID USB
 */
export const libexsid = mkPackage(
  nixRaw`pkgs.libexsid`,
  "Driver for exSID USB",
);

/**
 * Simple library for keyword extraction
 */
export const libextractor = mkPackage(
  nixRaw`pkgs.libextractor`,
  "Simple library for keyword extraction",
);

/**
 * An N-Gram-Based Text Categorization library primarily intended for language guessing
 */
export const libexttextcat = mkPackage(
  nixRaw`pkgs.libexttextcat`,
  "An N-Gram-Based Text Categorization library primarily intended for language guessing",
);

/**
 * F2c converts Fortran 77 source code to C
 */
export const libf2c = mkPackage(
  nixRaw`pkgs.libf2c`,
  "F2c converts Fortran 77 source code to C",
);

/**
 * Open Fabric Interfaces
 */
export const libfabric = mkPackage(
  nixRaw`pkgs.libfabric`,
  "Open Fabric Interfaces",
);

/**
 * fakeXinerama for Xpra
 */
export const libfakeXinerama = mkPackage(
  nixRaw`pkgs.libfakeXinerama`,
  "fakeXinerama for Xpra",
);

/**
 * X virtual keyboard library
 */
export const libfakekey = mkPackage(
  nixRaw`pkgs.libfakekey`,
  "X virtual keyboard library",
);

/**
 * Report faked system time to programs without having to change the system-wide time
 */
export const libfaketime = mkPackage(
  nixRaw`pkgs.libfaketime`,
  "Report faked system time to programs without having to change the system-wide time",
);

/**
 * Fast Artificial Neural Network Library
 */
export const libfann = mkPackage(
  nixRaw`pkgs.libfann`,
  "Fast Artificial Neural Network Library",
);

/**
 * C++ library for Finite Fields and Elliptic Curves
 */
export const libff = mkPackage(
  nixRaw`pkgs.libff`,
  "C++ library for Finite Fields and Elliptic Curves",
);

/**
 * FireWire audio drivers
 */
export const libffado = mkPackage(
  nixRaw`pkgs.libffado`,
  "FireWire audio drivers",
);

/**
 * Foreign function call library
 */
export const libffcall = mkPackage(
  nixRaw`pkgs.libffcall`,
  "Foreign function call library",
);

/**
 * A foreign function call interface library
 */
export const libffi = mkPackage(
  nixRaw`pkgs.libffi`,
  "A foreign function call interface library",
);

/**
 * A foreign function call interface library
 */
export const libffiBoot = mkPackage(
  nixRaw`pkgs.libffiBoot`,
  "A foreign function call interface library",
);

/**
 * A foreign function call interface library
 */
export const libffi_3_3 = mkPackage(
  nixRaw`pkgs.libffi_3_3`,
  "A foreign function call interface library",
);

/**
 * Provides library functionality for FIDO 2.0, including communication with a device over USB.

 */
export const libfido2 = mkPackage(
  nixRaw`pkgs.libfido2`,
  "Provides library functionality for FIDO 2.0, including communication with a device over USB.\n",
);

/**
 * A modern C++ library, offering some basic functionality to build high-performing, platform-independent programs
 */
export const libfilezilla = mkPackage(
  nixRaw`pkgs.libfilezilla`,
  "A modern C++ library, offering some basic functionality to build high-performing, platform-independent programs",
);

/**
 * A simple programming interface for decoding and encoding audio data using Xiph.org codecs (FLAC, Speex and Vorbis)
 */
export const libfishsound = mkPackage(
  nixRaw`pkgs.libfishsound`,
  "A simple programming interface for decoding and encoding audio data using Xiph.org codecs (FLAC, Speex and Vorbis)",
);

/**
 * Infrastructure for solid modeling with F-Reps in C, C++, and Guile
 */
export const libfive = mkPackage(
  nixRaw`pkgs.libfive`,
  "Infrastructure for solid modeling with F-Reps in C, C++, and Guile",
);

/**
 * Thin wrapper over POSIX syscalls and some replacement functionality
 */
export const libfixposix = mkPackage(
  nixRaw`pkgs.libfixposix`,
  "Thin wrapper over POSIX syscalls and some replacement functionality",
);

/**
 * A glib-based library for file management
 */
export const libfm = mkPackage(
  nixRaw`pkgs.libfm`,
  "A glib-based library for file management",
);

/**
 * A glib-based library for file management
 */
export const libfm_extra = mkPackage(
  nixRaw`pkgs.libfm-extra`,
  "A glib-based library for file management",
);

/**
 * A library designed to make it easy to add support for consumer fingerprint readers
 */
export const libfprint = mkPackage(
  nixRaw`pkgs.libfprint`,
  "A library designed to make it easy to add support for consumer fingerprint readers",
);

/**
 * Goodix driver module for libfprint-2-tod Touch OEM Driver
 */
export const libfprint_2_tod1_goodix = mkPackage(
  nixRaw`pkgs.libfprint-2-tod1-goodix`,
  "Goodix driver module for libfprint-2-tod Touch OEM Driver",
);

/**
 * Goodix 550a driver module for libfprint-2-tod Touch OEM Driver (from Lenovo)
 */
export const libfprint_2_tod1_goodix_550a = mkPackage(
  nixRaw`pkgs.libfprint-2-tod1-goodix-550a`,
  "Goodix 550a driver module for libfprint-2-tod Touch OEM Driver (from Lenovo)",
);

/**
 * A libfprint-2-tod Touch OEM Driver for 2016 ThinkPad's fingerprint readers
 */
export const libfprint_2_tod1_vfs0090 = mkPackage(
  nixRaw`pkgs.libfprint-2-tod1-vfs0090`,
  "A libfprint-2-tod Touch OEM Driver for 2016 ThinkPad's fingerprint readers",
);

/**
 * A library designed to make it easy to add support for consumer fingerprint readers, with support for loaded drivers
 */
export const libfprint_tod = mkPackage(
  nixRaw`pkgs.libfprint-tod`,
  "A library designed to make it easy to add support for consumer fingerprint readers, with support for loaded drivers",
);

/**
 * A library for manipulating FlashPIX images
 */
export const libfpx = mkPackage(
  nixRaw`pkgs.libfpx`,
  "A library for manipulating FlashPIX images",
);

/**
 * Free Implementation of Audio Processing Technology codec (aptX)
 */
export const libfreeaptx = mkPackage(
  nixRaw`pkgs.libfreeaptx`,
  "Free Implementation of Audio Processing Technology codec (aptX)",
);

/**
 * The libfreefare project aims to provide a convenient API for MIFARE card manipulations
 */
export const libfreefare = mkPackage(
  nixRaw`pkgs.libfreefare`,
  "The libfreefare project aims to provide a convenient API for MIFARE card manipulations",
);

/**
 * DFA regular expression library & friends
 */
export const libfsm = mkPackage(
  nixRaw`pkgs.libfsm`,
  "DFA regular expression library & friends",
);

/**
 * A library to talk to FTDI chips using libusb
 */
export const libftdi = mkPackage(
  nixRaw`pkgs.libftdi`,
  "A library to talk to FTDI chips using libusb",
);

/**
 * A library to talk to FTDI chips using libusb
 */
export const libftdi1 = mkPackage(
  nixRaw`pkgs.libftdi1`,
  "A library to talk to FTDI chips using libusb",
);

/**
 * Chip support package for Cypress EZ-USB FX2 series microcontrollers
 */
export const libfx2 = mkPackage(
  nixRaw`pkgs.libfx2`,
  "Chip support package for Cypress EZ-USB FX2 series microcontrollers",
);

/**
 * Fully feature complete YAML parser and emitter, supporting the latest YAML spec and passing the full YAML testsuite
 */
export const libfyaml = mkPackage(
  nixRaw`pkgs.libfyaml`,
  "Fully feature complete YAML parser and emitter, supporting the latest YAML spec and passing the full YAML testsuite",
);

/**
 * A library to deal with gadu-gadu protocol (most popular polish IM protocol)
 */
export const libgadu = mkPackage(
  nixRaw`pkgs.libgadu`,
  "A library to deal with gadu-gadu protocol (most popular polish IM protocol)",
);

/**
 * Provides functionality for gaming input devices
 */
export const libgaminggear = mkPackage(
  nixRaw`pkgs.libgaminggear`,
  "Provides functionality for gaming input devices",
);

/**
 * GLib-style interface to binder
 */
export const libgbinder = mkPackage(
  nixRaw`pkgs.libgbinder`,
  "GLib-style interface to binder",
);

/**
 * GNU Compiler Collection, version 12.3.0
 */
export const libgcc = mkPackage(
  nixRaw`pkgs.libgcc`,
  "GNU Compiler Collection, version 12.3.0",
);

/**
 * GNU Compiler Collection, version 12.3.0
 */
export const libgccjit = mkPackage(
  nixRaw`pkgs.libgccjit`,
  "GNU Compiler Collection, version 12.3.0",
);

/**
 * General-purpose cryptographic library
 */
export const libgcrypt = mkPackage(
  nixRaw`pkgs.libgcrypt`,
  "General-purpose cryptographic library",
);

/**
 * General-purpose cryptographic library
 */
export const libgcrypt_1_8 = mkPackage(
  nixRaw`pkgs.libgcrypt_1_8`,
  "General-purpose cryptographic library",
);

/**
 * Database access library
 */
export const libgda = mkPackage(
  nixRaw`pkgs.libgda`,
  "Database access library",
);

/**
 * Database access library
 */
export const libgda6 = mkPackage(
  nixRaw`pkgs.libgda6`,
  "Database access library",
);

/**
 * C++ bindings for libgda
 */
export const libgdamm = mkPackage(
  nixRaw`pkgs.libgdamm`,
  "C++ bindings for libgda",
);

/**
 * GData API library
 */
export const libgdata = mkPackage(
  nixRaw`pkgs.libgdata`,
  "GData API library",
);

/**
 * Mono library that provides a GDI+-compatible API on non-Windows operating systems
 */
export const libgdiplus = mkPackage(
  nixRaw`pkgs.libgdiplus`,
  "Mono library that provides a GDI+-compatible API on non-Windows operating systems",
);

/**
 * Utility library providing GObject-based interfaces and classes for commonly used data structures
 */
export const libgee = mkPackage(
  nixRaw`pkgs.libgee`,
  "Utility library providing GObject-based interfaces and classes for commonly used data structures",
);

/**
 * A CLI tool used to access the Library Genesis dataset; written in Go
 */
export const libgen_cli = mkPackage(
  nixRaw`pkgs.libgen-cli`,
  "A CLI tool used to access the Library Genesis dataset; written in Go",
);

/**
 * Library implementing attempt to create a tiff based interchange format for georeferenced raster imagery
 */
export const libgeotiff = mkPackage(
  nixRaw`pkgs.libgeotiff`,
  "Library implementing attempt to create a tiff based interchange format for georeferenced raster imagery",
);

/**
 * GObject based library for handling and rendering epub documents
 */
export const libgepub = mkPackage(
  nixRaw`pkgs.libgepub`,
  "GObject based library for handling and rendering epub documents",
);

/**
 * ChromiumOS libgestures modified to compile for Linux
 */
export const libgestures = mkPackage(
  nixRaw`pkgs.libgestures`,
  "ChromiumOS libgestures modified to compile for Linux",
);

/**
 * Flow graph widget for GTK 3
 */
export const libgflow = mkPackage(
  nixRaw`pkgs.libgflow`,
  "Flow graph widget for GTK 3",
);

/**
 * Gigasampler file access library
 */
export const libgig = mkPackage(
  nixRaw`pkgs.libgig`,
  "Gigasampler file access library",
);

/**
 * Linkable library implementation of Git that you can use in your application
 */
export const libgit2 = mkPackage(
  nixRaw`pkgs.libgit2`,
  "Linkable library implementation of Git that you can use in your application",
);

/**
 * Linkable library implementation of Git that you can use in your application
 */
export const libgit2_1_3_0 = mkPackage(
  nixRaw`pkgs.libgit2_1_3_0`,
  "Linkable library implementation of Git that you can use in your application",
);

/**
 * Linkable library implementation of Git that you can use in your application
 */
export const libgit2_1_5 = mkPackage(
  nixRaw`pkgs.libgit2_1_5`,
  "Linkable library implementation of Git that you can use in your application",
);

/**
 * Linkable library implementation of Git that you can use in your application
 */
export const libgit2_1_6 = mkPackage(
  nixRaw`pkgs.libgit2_1_6`,
  "Linkable library implementation of Git that you can use in your application",
);

/**
 * A glib wrapper library around the libgit2 git access library
 */
export const libgit2_glib = mkPackage(
  nixRaw`pkgs.libgit2-glib`,
  "A glib wrapper library around the libgit2 git access library",
);

/**
 * Library of glib utilities.
 */
export const libglibutil = mkPackage(
  nixRaw`pkgs.libglibutil`,
  "Library of glib utilities.",
);

/**
 * The GL Vendor-Neutral Dispatch library
 */
export const libglvnd = mkPackage(
  nixRaw`pkgs.libglvnd`,
  "The GL Vendor-Neutral Dispatch library",
);

/**
 * GMPRIS GDBus bindings GDBus bindings generated from the GMPRIS XML spec files
 */
export const libgmpris = mkPackage(
  nixRaw`pkgs.libgmpris`,
  "GMPRIS GDBus bindings GDBus bindings generated from the GMPRIS XML spec files",
);

/**
 * Small library intended for internal use by GNOME Games, but it may be used by others
 */
export const libgnome_games_support = mkPackage(
  nixRaw`pkgs.libgnome-games-support`,
  "Small library intended for internal use by GNOME Games, but it may be used by others",
);

/**
 * Small library intended for internal use by GNOME Games, but it may be used by others
 */
export const libgnome_games_support_2_0 = mkPackage(
  nixRaw`pkgs.libgnome-games-support_2_0`,
  "Small library intended for internal use by GNOME Games, but it may be used by others",
);

export const libgnome_keyring = mkPackage(
  nixRaw`pkgs.libgnome-keyring`,
  "",
);

/**
 * Framework for managing passwords and other secrets
 */
export const libgnome_keyring3 = mkPackage(
  nixRaw`pkgs.libgnome-keyring3`,
  "Framework for managing passwords and other secrets",
);

/**
 * Keyboard management library
 */
export const libgnomekbd = mkPackage(
  nixRaw`pkgs.libgnomekbd`,
  "Keyboard management library",
);

/**
 * An ncurses toolkit for creating text-mode graphical user interfaces
 */
export const libgnt = mkPackage(
  nixRaw`pkgs.libgnt`,
  "An ncurses toolkit for creating text-mode graphical user interfaces",
);

/**
 * A fork of libcurl used by GNUnet
 */
export const libgnurl = mkPackage(
  nixRaw`pkgs.libgnurl`,
  "A fork of libcurl used by GNUnet",
);

/**
 * Implementation of Adobe's ADEPT protocol for ePub/PDF DRM
 */
export const libgourou = mkPackage(
  nixRaw`pkgs.libgourou`,
  "Implementation of Adobe's ADEPT protocol for ePub/PDF DRM",
);

/**
 * GObject wrapper for the oVirt REST API
 */
export const libgovirt = mkPackage(
  nixRaw`pkgs.libgovirt`,
  "GObject wrapper for the oVirt REST API",
);

/**
 * A small library that defines common error values for all GnuPG components
 */
export const libgpg_error = mkPackage(
  nixRaw`pkgs.libgpg-error`,
  "A small library that defines common error values for all GnuPG components",
);

/**
 * A small library that defines common error values for all GnuPG components
 */
export const libgpg_error_gen_posix_lock_obj = mkPackage(
  nixRaw`pkgs.libgpg-error-gen-posix-lock-obj`,
  "A small library that defines common error values for all GnuPG components",
);

/**
 * A library for accessing digital cameras
 */
export const libgphoto2 = mkPackage(
  nixRaw`pkgs.libgphoto2`,
  "A library for accessing digital cameras",
);

/**
 * C library and tools for interacting with the linux GPIO character device
 */
export const libgpiod = mkPackage(
  nixRaw`pkgs.libgpiod`,
  "C library and tools for interacting with the linux GPIO character device",
);

/**
 * Library used by gtkpod to access the contents of an ipod
 */
export const libgpod = mkPackage(
  nixRaw`pkgs.libgpod`,
  "Library used by gtkpod to access the contents of an ipod",
);

/**
 * A small library to encapsulate data in an encrypted structure
 */
export const libgringotts = mkPackage(
  nixRaw`pkgs.libgringotts`,
  "A small library to encapsulate data in an encrypted structure",
);

/**
 * Glib abstaction to handle feeds in RSS, Atom and other formats
 */
export const libgrss = mkPackage(
  nixRaw`pkgs.libgrss`,
  "Glib abstaction to handle feeds in RSS, Atom and other formats",
);

/**
 * GNOME's Structured File Library
 */
export const libgsf = mkPackage(
  nixRaw`pkgs.libgsf`,
  "GNOME's Structured File Library",
);

/**
 * Exports a gssapi interface which calls other random gssapi libraries
 */
export const libgssglue = mkPackage(
  nixRaw`pkgs.libgssglue`,
  "Exports a gssapi interface which calls other random gssapi libraries",
);

/**
 * Flow graph widget for GTK 3
 */
export const libgtkflow3 = mkPackage(
  nixRaw`pkgs.libgtkflow3`,
  "Flow graph widget for GTK 3",
);

/**
 * Flow graph widget for GTK 3
 */
export const libgtkflow4 = mkPackage(
  nixRaw`pkgs.libgtkflow4`,
  "Flow graph widget for GTK 3",
);

/**
 * A library that reads information about processes and the running system
 */
export const libgtop = mkPackage(
  nixRaw`pkgs.libgtop`,
  "A library that reads information about processes and the running system",
);

/**
 * A library that provides GObject bindings for libudev
 */
export const libgudev = mkPackage(
  nixRaw`pkgs.libgudev`,
  "A library that provides GObject bindings for libudev",
);

/**
 * Tools for accessing and modifying virtual machine disk images
 */
export const libguestfs = mkPackage(
  nixRaw`pkgs.libguestfs`,
  "Tools for accessing and modifying virtual machine disk images",
);

/**
 * VM appliance disk image used in libguestfs package
 */
export const libguestfs_appliance = mkPackage(
  nixRaw`pkgs.libguestfs-appliance`,
  "VM appliance disk image used in libguestfs package",
);

/**
 * Tools for accessing and modifying virtual machine disk images
 */
export const libguestfs_with_appliance = mkPackage(
  nixRaw`pkgs.libguestfs-with-appliance`,
  "Tools for accessing and modifying virtual machine disk images",
);

/**
 * Library supporting function dispatch on general data containers. C base and Python wrapper
 */
export const libgumath = mkPackage(
  nixRaw`pkgs.libgumath`,
  "Library supporting function dispatch on general data containers. C base and Python wrapper",
);

/**
 * A library to access weather information from online services for numerous locations
 */
export const libgweather = mkPackage(
  nixRaw`pkgs.libgweather`,
  "A library to access weather information from online services for numerous locations",
);

/**
 * A GObject based library for handling and rendering XPS documents
 */
export const libgxps = mkPackage(
  nixRaw`pkgs.libgxps`,
  "A GObject based library for handling and rendering XPS documents",
);

/**
 * Building blocks for modern adaptive GNOME apps
 */
export const libhandy = mkPackage(
  nixRaw`pkgs.libhandy`,
  "Building blocks for modern adaptive GNOME apps",
);

/**
 * A library full of GTK widgets for mobile phones
 */
export const libhandy_0 = mkPackage(
  nixRaw`pkgs.libhandy_0`,
  "A library full of GTK widgets for mobile phones",
);

/**
 * Core algorithm library for Korean input routines
 */
export const libhangul = mkPackage(
  nixRaw`pkgs.libhangul`,
  "Core algorithm library for Korean input routines",
);

/**
 * Cross platform, open source library for generating PDF files
 */
export const libharu = mkPackage(
  nixRaw`pkgs.libharu`,
  "Cross platform, open source library for generating PDF files",
);

/**
 * Implements the libhdhomerun protocol for use with Silicondust HDHomeRun TV tuners
 */
export const libhdhomerun = mkPackage(
  nixRaw`pkgs.libhdhomerun`,
  "Implements the libhdhomerun protocol for use with Silicondust HDHomeRun TV tuners",
);

/**
 * ISO/IEC 23008-12:2017 HEIF image file format decoder and encoder
 */
export const libheif = mkPackage(
  nixRaw`pkgs.libheif`,
  "ISO/IEC 23008-12:2017 HEIF image file format decoder and encoder",
);

/**
 * Library to compute the homfly polynomial of knots and links
 */
export const libhomfly = mkPackage(
  nixRaw`pkgs.libhomfly`,
  "Library to compute the homfly polynomial of knots and links",
);

/**
 * Library to easily check a domain against the Chromium HSTS Preload list
 */
export const libhsts = mkPackage(
  nixRaw`pkgs.libhsts`,
  "Library to easily check a domain against the Chromium HSTS Preload list",
);

/**
 * Library to use HTTPSEverywhere in desktop applications
 */
export const libhttpseverywhere = mkPackage(
  nixRaw`pkgs.libhttpseverywhere`,
  "Library to use HTTPSEverywhere in desktop applications",
);

/**
 * library and utilities for Linux hugepages
 */
export const libhugetlbfs = mkPackage(
  nixRaw`pkgs.libhugetlbfs`,
  "library and utilities for Linux hugepages",
);

/**
 * A c/c++ network library for developing TCP/UDP/SSL/HTTP/WebSocket/MQTT client/server
 */
export const libhv = mkPackage(
  nixRaw`pkgs.libhv`,
  "A c/c++ network library for developing TCP/UDP/SSL/HTTP/WebSocket/MQTT client/server",
);

/**
 * Performance-portable, length-agnostic SIMD with runtime dispatch
 */
export const libhwy = mkPackage(
  nixRaw`pkgs.libhwy`,
  "Performance-portable, length-agnostic SIMD with runtime dispatch",
);

/**
 * Collection of subroutines used by various GNU programs
 */
export const libiberty = mkPackage(
  nixRaw`pkgs.libiberty`,
  "Collection of subroutines used by various GNU programs",
);

export const libibmad = mkPackage(
  nixRaw`pkgs.libibmad`,
  "",
);

export const libibumad = mkPackage(
  nixRaw`pkgs.libibumad`,
  "",
);

/**
 * An Open Source implementation of the iCalendar protocols
 */
export const libical = mkPackage(
  nixRaw`pkgs.libical`,
  "An Open Source implementation of the iCalendar protocols",
);

/**
 * Library for manipulation of the Mac OS icns resource format
 */
export const libicns = mkPackage(
  nixRaw`pkgs.libicns`,
  "Library for manipulation of the Mac OS icns resource format",
);

export const libiconv = mkPackage(
  nixRaw`pkgs.libiconv`,
  "",
);

/**
 * An iconv(3) implementation
 */
export const libiconvReal = mkPackage(
  nixRaw`pkgs.libiconvReal`,
  "An iconv(3) implementation",
);

/**
 * ID3 tag manipulation library
 */
export const libid3tag = mkPackage(
  nixRaw`pkgs.libid3tag`,
  "ID3 tag manipulation library",
);

/**
 * Library for internationalized domain names
 */
export const libidn = mkPackage(
  nixRaw`pkgs.libidn`,
  "Library for internationalized domain names",
);

export const libidn2 = mkPackage(
  nixRaw`pkgs.libidn2`,
  "",
);

export const libiec61883 = mkPackage(
  nixRaw`pkgs.libiec61883`,
  "",
);

/**
 * Parallel port communication library
 */
export const libieee1284 = mkPackage(
  nixRaw`pkgs.libieee1284`,
  "Parallel port communication library",
);

/**
 * API for interfacing with the Linux Industrial I/O Subsystem
 */
export const libiio = mkPackage(
  nixRaw`pkgs.libiio`,
  "API for interfacing with the Linux Industrial I/O Subsystem",
);

/**
 * Image quantization library
 */
export const libimagequant = mkPackage(
  nixRaw`pkgs.libimagequant`,
  "Image quantization library",
);

/**
 * A library to support generic input method implementation
 */
export const libime = mkPackage(
  nixRaw`pkgs.libime`,
  "A library to support generic input method implementation",
);

/**
 * A software library that talks the protocols to support iPhone®, iPod Touch® and iPad® devices on Linux
 */
export const libimobiledevice = mkPackage(
  nixRaw`pkgs.libimobiledevice`,
  "A software library that talks the protocols to support iPhone®, iPod Touch® and iPad® devices on Linux",
);

/**
 * Library with common code used by the libraries and tools around the libimobiledevice project
 */
export const libimobiledevice_glue = mkPackage(
  nixRaw`pkgs.libimobiledevice-glue`,
  "Library with common code used by the libraries and tools around the libimobiledevice project",
);

/**
 * A set of symbols and convenience functions for Ayatana indicators
 */
export const libindicator = mkPackage(
  nixRaw`pkgs.libindicator`,
  "A set of symbols and convenience functions for Ayatana indicators",
);

/**
 * A set of symbols and convenience functions for Ayatana indicators
 */
export const libindicator_gtk2 = mkPackage(
  nixRaw`pkgs.libindicator-gtk2`,
  "A set of symbols and convenience functions for Ayatana indicators",
);

/**
 * A set of symbols and convenience functions for Ayatana indicators
 */
export const libindicator_gtk3 = mkPackage(
  nixRaw`pkgs.libindicator-gtk3`,
  "A set of symbols and convenience functions for Ayatana indicators",
);

/**
 * An implementation of the Infinote protocol written in GObject-based C
 */
export const libinfinity = mkPackage(
  nixRaw`pkgs.libinfinity`,
  "An implementation of the Infinote protocol written in GObject-based C",
);

/**
 * SQL / SQLI tokenizer parser analyzer
 */
export const libinjection = mkPackage(
  nixRaw`pkgs.libinjection`,
  "SQL / SQLI tokenizer parser analyzer",
);

/**
 * A library for checking the ink level of your printer
 */
export const libinklevel = mkPackage(
  nixRaw`pkgs.libinklevel`,
  "A library for checking the ink level of your printer",
);

/**
 * Inotify shim for macOS and BSD
 */
export const libinotify_kqueue = mkPackage(
  nixRaw`pkgs.libinotify-kqueue`,
  "Inotify shim for macOS and BSD",
);

/**
 * Handles input devices in Wayland compositors and provides a generic X.Org input driver
 */
export const libinput = mkPackage(
  nixRaw`pkgs.libinput`,
  "Handles input devices in Wayland compositors and provides a generic X.Org input driver",
);

/**
 * Gesture mapper for libinput
 */
export const libinput_gestures = mkPackage(
  nixRaw`pkgs.libinput-gestures`,
  "Gesture mapper for libinput",
);

/**
 * Crossplatform access to image scanners (paper eaters only)
 */
export const libinsane = mkPackage(
  nixRaw`pkgs.libinsane`,
  "Crossplatform access to image scanners (paper eaters only)",
);

/**
 * MIDI instrument patch files support library
 */
export const libinstpatch = mkPackage(
  nixRaw`pkgs.libinstpatch`,
  "MIDI instrument patch files support library",
);

/**
 * Library for the evaluation of molecular integrals of many-body operators over Gaussian functions
 */
export const libint = mkPackage(
  nixRaw`pkgs.libint`,
  "Library for the evaluation of molecular integrals of many-body operators over Gaussian functions",
);

/**
 * Library for the evaluation of molecular integrals of many-body operators over Gaussian functions
 */
export const libintPsi4 = mkPackage(
  nixRaw`pkgs.libintPsi4`,
  "Library for the evaluation of molecular integrals of many-body operators over Gaussian functions",
);

/**
 * iODBC driver manager
 */
export const libiodbc = mkPackage(
  nixRaw`pkgs.libiodbc`,
  "iODBC driver manager",
);

/**
 * The libipfix C-library implements the IPFIX protocol defined by the IP Flow Information Export working group of the IETF
 */
export const libipfix = mkPackage(
  nixRaw`pkgs.libipfix`,
  "The libipfix C-library implements the IPFIX protocol defined by the IP Flow Information Export working group of the IETF",
);

/**
 * Intel Processor Trace decoder library
 */
export const libipt = mkPackage(
  nixRaw`pkgs.libipt`,
  "Intel Processor Trace decoder library",
);

/**
 * Library for reading and writing the IPTC metadata in images and other files
 */
export const libiptcdata = mkPackage(
  nixRaw`pkgs.libiptcdata`,
  "Library for reading and writing the IPTC metadata in images and other files",
);

/**
 * C++ IRC library written in Qt with support for data serialization
 */
export const libirc = mkPackage(
  nixRaw`pkgs.libirc`,
  "C++ IRC library written in Qt with support for data serialization",
);

/**
 * A small but extremely powerful library which implements the client IRC protocol
 */
export const libircclient = mkPackage(
  nixRaw`pkgs.libircclient`,
  "A small but extremely powerful library which implements the client IRC protocol",
);

/**
 * Library and utility to talk to iBoot/iBSS via USB on Mac OS X, Windows, and Linux
 */
export const libirecovery = mkPackage(
  nixRaw`pkgs.libirecovery`,
  "Library and utility to talk to iBoot/iBSS via USB on Mac OS X, Windows, and Linux",
);

/**
 * iscsi client library and utilities
 */
export const libiscsi = mkPackage(
  nixRaw`pkgs.libiscsi`,
  "iscsi client library and utilities",
);

/**
 * Client library for accessing SOAP services of Czech government-provided Databox infomation system
 */
export const libisds = mkPackage(
  nixRaw`pkgs.libisds`,
  "Client library for accessing SOAP services of Czech government-provided Databox infomation system",
);

/**
 * Enables creation and expansion of ISO-9660 filesystems on CD/DVD/BD 
 */
export const libisoburn = mkPackage(
  nixRaw`pkgs.libisoburn`,
  "Enables creation and expansion of ISO-9660 filesystems on CD/DVD/BD ",
);

/**
 * A library to create an ISO-9660 filesystem with extensions like RockRidge or Joliet
 */
export const libisofs = mkPackage(
  nixRaw`pkgs.libisofs`,
  "A library to create an ISO-9660 filesystem with extensions like RockRidge or Joliet",
);

/**
 * Lightweight library of frog DNA
 */
export const libite = mkPackage(
  nixRaw`pkgs.libite`,
  "Lightweight library of frog DNA",
);

        /**
         * A thin wrapper over various OS'es implementation of I/O readiness
notification facilities

         */
export const libivykis = mkPackage(
  nixRaw`pkgs.libivykis`,
  "A thin wrapper over various OS'es implementation of I/O readiness\nnotification facilities\n",
);

/**
 * Portable, simple C-language 9P client and server library
 */
export const libixp = mkPackage(
  nixRaw`pkgs.libixp`,
  "Portable, simple C-language 9P client and server library",
);

/**
 * JACK audio connection kit, version 2 with jackdbus
 */
export const libjack2 = mkPackage(
  nixRaw`pkgs.libjack2`,
  "JACK audio connection kit, version 2 with jackdbus",
);

/**
 * libjaylink is a shared library written in C to access SEGGER J-Link and compatible devices.
 */
export const libjaylink = mkPackage(
  nixRaw`pkgs.libjaylink`,
  "libjaylink is a shared library written in C to access SEGGER J-Link and compatible devices.",
);

/**
 * Library for reading and writing Jcat files
 */
export const libjcat = mkPackage(
  nixRaw`pkgs.libjcat`,
  "Library for reading and writing Jcat files",
);

/**
 * A faster (using SIMD) libjpeg implementation
 */
export const libjpeg = mkPackage(
  nixRaw`pkgs.libjpeg`,
  "A faster (using SIMD) libjpeg implementation",
);

/**
 * A faster (using SIMD) libjpeg implementation
 */
export const libjpeg8 = mkPackage(
  nixRaw`pkgs.libjpeg8`,
  "A faster (using SIMD) libjpeg implementation",
);

/**
 * A library that implements the JPEG image file format
 */
export const libjpeg_original = mkPackage(
  nixRaw`pkgs.libjpeg_original`,
  "A library that implements the JPEG image file format",
);

/**
 * A faster (using SIMD) libjpeg implementation
 */
export const libjpeg_turbo = mkPackage(
  nixRaw`pkgs.libjpeg_turbo`,
  "A faster (using SIMD) libjpeg implementation",
);

/**
 * A JSON reader and writer
 */
export const libjson = mkPackage(
  nixRaw`pkgs.libjson`,
  "A JSON reader and writer",
);

/**
 * C++ framework for json-rpc (json remote procedure call)
 */
export const libjson_rpc_cpp = mkPackage(
  nixRaw`pkgs.libjson-rpc-cpp`,
  "C++ framework for json-rpc (json remote procedure call)",
);

/**
 * JWT C Library
 */
export const libjwt = mkPackage(
  nixRaw`pkgs.libjwt`,
  "JWT C Library",
);

/**
 * JPEG XL image format reference implementation.
 */
export const libjxl = mkPackage(
  nixRaw`pkgs.libjxl`,
  "JPEG XL image format reference implementation.",
);

/**
 * A library for encoding and decoding Kate streams
 */
export const libkate = mkPackage(
  nixRaw`pkgs.libkate`,
  "A library for encoding and decoding Kate streams",
);

/**
 * Linux Kernel Crypto API User Space Interface Library
 */
export const libkcapi = mkPackage(
  nixRaw`pkgs.libkcapi`,
  "Linux Kernel Crypto API User Space Interface Library",
);

/**
 * Musical key detection for digital audio (C++ library)
 */
export const libkeyfinder = mkPackage(
  nixRaw`pkgs.libkeyfinder`,
  "Musical key detection for digital audio (C++ library)",
);

/**
 * Common code base for all Kiwix ports
 */
export const libkiwix = mkPackage(
  nixRaw`pkgs.libkiwix`,
  "Common code base for all Kiwix ports",
);

/**
 * Japanese Kana Kanji conversion input method library
 */
export const libkkc = mkPackage(
  nixRaw`pkgs.libkkc`,
  "Japanese Kana Kanji conversion input method library",
);

/**
 * Language model data package for libkkc
 */
export const libkkc_data = mkPackage(
  nixRaw`pkgs.libkkc-data`,
  "Language model data package for libkkc",
);

/**
 * kqueue(2) compatibility library
 */
export const libkqueue = mkPackage(
  nixRaw`pkgs.libkqueue`,
  "kqueue(2) compatibility library",
);

/**
 * MIT Kerberos 5
 */
export const libkrb5 = mkPackage(
  nixRaw`pkgs.libkrb5`,
  "MIT Kerberos 5",
);

/**
 * A dynamic library providing Virtualization-based process isolation capabilities
 */
export const libkrun = mkPackage(
  nixRaw`pkgs.libkrun`,
  "A dynamic library providing Virtualization-based process isolation capabilities",
);

/**
 * A dynamic library providing Virtualization-based process isolation capabilities
 */
export const libkrun_sev = mkPackage(
  nixRaw`pkgs.libkrun-sev`,
  "A dynamic library providing Virtualization-based process isolation capabilities",
);

/**
 * A dynamic library bundling the guest payload consumed by libkrun
 */
export const libkrunfw = mkPackage(
  nixRaw`pkgs.libkrunfw`,
  "A dynamic library bundling the guest payload consumed by libkrun",
);

/**
 * Foundational support for signalwire C products
 */
export const libks = mkPackage(
  nixRaw`pkgs.libks`,
  "Foundational support for signalwire C products",
);

/**
 * CMS and X.509 access library
 */
export const libksba = mkPackage(
  nixRaw`pkgs.libksba`,
  "CMS and X.509 access library",
);

/**
 * Keyless Signature Infrastructure API library
 */
export const libksi = mkPackage(
  nixRaw`pkgs.libksi`,
  "Keyless Signature Infrastructure API library",
);

/**
 * An interface library to access tags for identifying languages
 */
export const liblangtag = mkPackage(
  nixRaw`pkgs.liblangtag`,
  "An interface library to access tags for identifying languages",
);

/**
 * Linear Algebra PACKage
 */
export const liblapack = mkPackage(
  nixRaw`pkgs.liblapack`,
  "Linear Algebra PACKage",
);

/**
 * Unofficial C lastfm library
 */
export const liblastfmSF = mkPackage(
  nixRaw`pkgs.liblastfmSF`,
  "Unofficial C lastfm library",
);

/**
 * Library for parsing JSON config files
 */
export const liblaxjson = mkPackage(
  nixRaw`pkgs.liblaxjson`,
  "Library for parsing JSON config files",
);

/**
 * Library of Limited-memory Broyden-Fletcher-Goldfarb-Shanno (L-BFGS)
 */
export const liblbfgs = mkPackage(
  nixRaw`pkgs.liblbfgs`,
  "Library of Limited-memory Broyden-Fletcher-Goldfarb-Shanno (L-BFGS)",
);

/**
 * LC3 (Low Complexity Communication Codec) is an efficient low latency audio codec
 */
export const liblc3 = mkPackage(
  nixRaw`pkgs.liblc3`,
  "LC3 (Low Complexity Communication Codec) is an efficient low latency audio codec",
);

/**
 * Library to handle RPG Maker 2000/2003 and EasyRPG projects
 */
export const liblcf = mkPackage(
  nixRaw`pkgs.liblcf`,
  "Library to handle RPG Maker 2000/2003 and EasyRPG projects",
);

/**
 * A lightweight KMS plane library
 */
export const libliftoff = mkPackage(
  nixRaw`pkgs.libliftoff`,
  "A lightweight KMS plane library",
);

/**
 * A library for large linear classification
 */
export const liblinear = mkPackage(
  nixRaw`pkgs.liblinear`,
  "A library for large linear classification",
);

/**
 * Library for SIP calls and instant messaging
 */
export const liblinphone = mkPackage(
  nixRaw`pkgs.liblinphone`,
  "Library for SIP calls and instant messaging",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const libllvm = mkPackage(
  nixRaw`pkgs.libllvm`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * Lightweight library to handle the sending and receiving of messages according to the Open Sound Control (OSC) protocol
 */
export const liblo = mkPackage(
  nixRaw`pkgs.liblo`,
  "Lightweight library to handle the sending and receiving of messages according to the Open Sound Control (OSC) protocol",
);

/**
 * Shared library with NFS-safe locking functions
 */
export const liblockfile = mkPackage(
  nixRaw`pkgs.liblockfile`,
  "Shared library with NFS-safe locking functions",
);

/**
 * Lightweight signal-safe logging library
 */
export const liblogging = mkPackage(
  nixRaw`pkgs.liblogging`,
  "Lightweight signal-safe logging library",
);

/**
 * Help to make sense out of syslog data, or, actually, any event data that is present in text form
 */
export const liblognorm = mkPackage(
  nixRaw`pkgs.liblognorm`,
  "Help to make sense out of syslog data, or, actually, any event data that is present in text form",
);

/**
 * Open-source braille translator and back-translator
 */
export const liblouis = mkPackage(
  nixRaw`pkgs.liblouis`,
  "Open-source braille translator and back-translator",
);

/**
 * Seam-carving C/C++ library called Liquid Rescaling
 */
export const liblqr1 = mkPackage(
  nixRaw`pkgs.liblqr1`,
  "Seam-carving C/C++ library called Liquid Rescaling",
);

/**
 * LinuxSampler Control Protocol (LSCP) wrapper library
 */
export const liblscp = mkPackage(
  nixRaw`pkgs.liblscp`,
  "LinuxSampler Control Protocol (LSCP) wrapper library",
);

/**
 * POSIX-C Library for handling Linear/Logitudinal Time Code (LTC)
 */
export const libltc = mkPackage(
  nixRaw`pkgs.libltc`,
  "POSIX-C Library for handling Linear/Logitudinal Time Code (LTC)",
);

/**
 * Library for communicating with LXI compatible instruments
 */
export const liblxi = mkPackage(
  nixRaw`pkgs.liblxi`,
  "Library for communicating with LXI compatible instruments",
);

/**
 * A high-quality, fixed-point MPEG audio decoder supporting MPEG-1 and MPEG-2
 */
export const libmad = mkPackage(
  nixRaw`pkgs.libmad`,
  "A high-quality, fixed-point MPEG audio decoder supporting MPEG-1 and MPEG-2",
);

/**
 * A simple GObject game controller library
 */
export const libmanette = mkPackage(
  nixRaw`pkgs.libmanette`,
  "A simple GObject game controller library",
);

/**
 * Library of the matchbox X window manager
 */
export const libmatchbox = mkPackage(
  nixRaw`pkgs.libmatchbox`,
  "Library of the matchbox X window manager",
);

/**
 * A library to parse and evaluate symbolic expressions input as text
 */
export const libmatheval = mkPackage(
  nixRaw`pkgs.libmatheval`,
  "A library to parse and evaluate symbolic expressions input as text",
);

/**
 * A library to parse Matroska files
 */
export const libmatroska = mkPackage(
  nixRaw`pkgs.libmatroska`,
  "A library to parse Matroska files",
);

export const libmatthew_java = mkPackage(
  nixRaw`pkgs.libmatthew_java`,
  "",
);

/**
 * C library for working with MaxMind geolocation DB files
 */
export const libmaxminddb = mkPackage(
  nixRaw`pkgs.libmaxminddb`,
  "C library for working with MaxMind geolocation DB files",
);

/**
 * Library for talking to WWAN modems and devices which speak the Mobile Interface Broadband Model (MBIM) protocol
 */
export const libmbim = mkPackage(
  nixRaw`pkgs.libmbim`,
  "Library for talking to WWAN modems and devices which speak the Mobile Interface Broadband Model (MBIM) protocol",
);

/**
 * Header only library that can collect configuration options from command line arguments
 */
export const libmcfp = mkPackage(
  nixRaw`pkgs.libmcfp`,
  "Header only library that can collect configuration options from command line arguments",
);

/**
 * Replacement for the old crypt() package and crypt(1) command, with extensions
 */
export const libmcrypt = mkPackage(
  nixRaw`pkgs.libmcrypt`,
  "Replacement for the old crypt() package and crypt(1) command, with extensions",
);

/**
 * Message Digest functions from BSD systems
 */
export const libmd = mkPackage(
  nixRaw`pkgs.libmd`,
  "Message Digest functions from BSD systems",
);

/**
 * Library tasked with managing, extracting and handling media art caches
 */
export const libmediaart = mkPackage(
  nixRaw`pkgs.libmediaart`,
  "Library tasked with managing, extracting and handling media art caches",
);

/**
 * Shared library for mediainfo
 */
export const libmediainfo = mkPackage(
  nixRaw`pkgs.libmediainfo`,
  "Shared library for mediainfo",
);

/**
 * Open source C/C++ client library and tools for the memcached server
 */
export const libmemcached = mkPackage(
  nixRaw`pkgs.libmemcached`,
  "Open source C/C++ client library and tools for the memcached server",
);

/**
 * Fork of libstrophe (https://github.com/strophe/libstrophe) for use with Profanity XMPP Client
 */
export const libmesode = mkPackage(
  nixRaw`pkgs.libmesode`,
  "Fork of libstrophe (https://github.com/strophe/libstrophe) for use with Profanity XMPP Client",
);

/**
 * Hash algorithms library
 */
export const libmhash = mkPackage(
  nixRaw`pkgs.libmhash`,
  "Hash algorithms library",
);

/**
 * Minimal mDNS resolver library, used by VLC
 */
export const libmicrodns = mkPackage(
  nixRaw`pkgs.libmicrodns`,
  "Minimal mDNS resolver library, used by VLC",
);

/**
 * Embeddable HTTP server library
 */
export const libmicrohttpd = mkPackage(
  nixRaw`pkgs.libmicrohttpd`,
  "Embeddable HTTP server library",
);

/**
 * Embeddable HTTP server library
 */
export const libmicrohttpd_0_9_69 = mkPackage(
  nixRaw`pkgs.libmicrohttpd_0_9_69`,
  "Embeddable HTTP server library",
);

/**
 * Embeddable HTTP server library
 */
export const libmicrohttpd_0_9_71 = mkPackage(
  nixRaw`pkgs.libmicrohttpd_0_9_71`,
  "Embeddable HTTP server library",
);

/**
 * Embeddable HTTP server library
 */
export const libmicrohttpd_0_9_72 = mkPackage(
  nixRaw`pkgs.libmicrohttpd_0_9_72`,
  "Embeddable HTTP server library",
);

/**
 * A library for playing tracker music module files
 */
export const libmikmod = mkPackage(
  nixRaw`pkgs.libmikmod`,
  "A library for playing tracker music module files",
);

/**
 * Sendmail Milter mail filtering API library
 */
export const libmilter = mkPackage(
  nixRaw`pkgs.libmilter`,
  "Sendmail Milter mail filtering API library",
);

/**
 * Medical imaging library based on HDF5
 */
export const libminc = mkPackage(
  nixRaw`pkgs.libminc`,
  "Medical imaging library based on HDF5",
);

/**
 * A suite of tools for emulating optical drives and discs
 */
export const libmirage = mkPackage(
  nixRaw`pkgs.libmirage`,
  "A suite of tools for emulating optical drives and discs",
);

/**
 * Abandoned library. Alternative lightweight Matroska muxer written for HandBrake
 */
export const libmkv = mkPackage(
  nixRaw`pkgs.libmkv`,
  "Abandoned library. Alternative lightweight Matroska muxer written for HandBrake",
);

/**
 * Library for downloading (streaming) media files using the mmst and mmsh protocols
 */
export const libmms = mkPackage(
  nixRaw`pkgs.libmms`,
  "Library for downloading (streaming) media files using the mmst and mmsh protocols",
);

/**
 * Reference library for reading, displaying, writing and examining Multiple-Image Network Graphics
 */
export const libmng = mkPackage(
  nixRaw`pkgs.libmng`,
  "Reference library for reading, displaying, writing and examining Multiple-Image Network Graphics",
);

/**
 * Minimalistic user-space library oriented to Netlink developers
 */
export const libmnl = mkPackage(
  nixRaw`pkgs.libmnl`,
  "Minimalistic user-space library oriented to Netlink developers",
);

/**
 * Library to send/receive data according to the Modbus protocol
 */
export const libmodbus = mkPackage(
  nixRaw`pkgs.libmodbus`,
  "Library to send/receive data according to the Modbus protocol",
);

/**
 * MOD playing library
 */
export const libmodplug = mkPackage(
  nixRaw`pkgs.libmodplug`,
  "MOD playing library",
);

/**
 * ModSecurity v3 library component.

 */
export const libmodsecurity = mkPackage(
  nixRaw`pkgs.libmodsecurity`,
  "ModSecurity v3 library component.\n",
);

/**
 * C simple and elegant implementation of an actor library
 */
export const libmodule = mkPackage(
  nixRaw`pkgs.libmodule`,
  "C simple and elegant implementation of an actor library",
);

/**
 * C Library for manipulating module metadata files
 */
export const libmodulemd = mkPackage(
  nixRaw`pkgs.libmodulemd`,
  "C Library for manipulating module metadata files",
);

/**
 * Required C library for client-side and queryable encryption in MongoDB
 */
export const libmongocrypt = mkPackage(
  nixRaw`pkgs.libmongocrypt`,
  "Required C library for client-side and queryable encryption in MongoDB",
);

/**
 * A development framework for C providing high performance and highly flexible algorithms
 */
export const libmowgli = mkPackage(
  nixRaw`pkgs.libmowgli`,
  "A development framework for C providing high performance and highly flexible algorithms",
);

/**
 * Utility to split mp3, ogg vorbis and FLAC files without decoding
 */
export const libmp3splt = mkPackage(
  nixRaw`pkgs.libmp3splt`,
  "Utility to split mp3, ogg vorbis and FLAC files without decoding",
);

/**
 * Simple implementation of msgpack in C
 */
export const libmpack = mkPackage(
  nixRaw`pkgs.libmpack`,
  "Simple implementation of msgpack in C",
);

/**
 * Library for multiprecision complex arithmetic with exact rounding
 */
export const libmpc = mkPackage(
  nixRaw`pkgs.libmpc`,
  "Library for multiprecision complex arithmetic with exact rounding",
);

/**
 * Musepack SV7 decoder library
 */
export const libmpcdec = mkPackage(
  nixRaw`pkgs.libmpcdec`,
  "Musepack SV7 decoder library",
);

/**
 * Client library for MPD (music player daemon)
 */
export const libmpdclient = mkPackage(
  nixRaw`pkgs.libmpdclient`,
  "Client library for MPD (music player daemon)",
);

/**
 * A free library for decoding mpeg-2 and mpeg-1 video streams
 */
export const libmpeg2 = mkPackage(
  nixRaw`pkgs.libmpeg2`,
  "A free library for decoding mpeg-2 and mpeg-1 video streams",
);

/**
 * Fast console MPEG Audio Player and decoder library
 */
export const libmpg123 = mkPackage(
  nixRaw`pkgs.libmpg123`,
  "Fast console MPEG Audio Player and decoder library",
);

/**
 * C library for parsing, writing and creating RSS/ATOM files or streams
 */
export const libmrss = mkPackage(
  nixRaw`pkgs.libmrss`,
  "C library for parsing, writing and creating RSS/ATOM files or streams",
);

/**
 * A de/compression library for various Microsoft formats
 */
export const libmspack = mkPackage(
  nixRaw`pkgs.libmspack`,
  "A de/compression library for various Microsoft formats",
);

/**
 *  molecular point group symmetry lib
 */
export const libmsym = mkPackage(
  nixRaw`pkgs.libmsym`,
  " molecular point group symmetry lib",
);

/**
 * A library to emulate Roland MT-32, CM-32L, CM-64 and LAPC-I devices
 */
export const libmt32emu = mkPackage(
  nixRaw`pkgs.libmt32emu`,
  "A library to emulate Roland MT-32, CM-32L, CM-64 and LAPC-I devices",
);

/**
 * An implementation of Microsoft's Media Transfer Protocol
 */
export const libmtp = mkPackage(
  nixRaw`pkgs.libmtp`,
  "An implementation of Microsoft's Media Transfer Protocol",
);

/**
 * MusicBrainz Client Library (3.x version)
 */
export const libmusicbrainz = mkPackage(
  nixRaw`pkgs.libmusicbrainz`,
  "MusicBrainz Client Library (3.x version)",
);

/**
 * MusicBrainz Client Library (3.x version)
 */
export const libmusicbrainz3 = mkPackage(
  nixRaw`pkgs.libmusicbrainz3`,
  "MusicBrainz Client Library (3.x version)",
);

/**
 * MusicBrainz Client Library (5.x version)
 */
export const libmusicbrainz5 = mkPackage(
  nixRaw`pkgs.libmusicbrainz5`,
  "MusicBrainz Client Library (5.x version)",
);

/**
 * Import library for some old mac text documents
 */
export const libmwaw = mkPackage(
  nixRaw`pkgs.libmwaw`,
  "Import library for some old mac text documents",
);

/**
 * A Clutter-based toolkit
 */
export const libmx = mkPackage(
  nixRaw`pkgs.libmx`,
  "A Clutter-based toolkit",
);

/**
 * Library for making brushstrokes which is used by MyPaint and other projects
 */
export const libmypaint = mkPackage(
  nixRaw`pkgs.libmypaint`,
  "Library for making brushstrokes which is used by MyPaint and other projects",
);

/**
 * Reader for AES SOFA files to get better HRTFs
 */
export const libmysofa = mkPackage(
  nixRaw`pkgs.libmysofa`,
  "Reader for AES SOFA files to get better HRTFs",
);

/**
 * Client library that can be used to connect to MySQL or MariaDB
 */
export const libmysqlclient = mkPackage(
  nixRaw`pkgs.libmysqlclient`,
  "Client library that can be used to connect to MySQL or MariaDB",
);

/**
 * Client library that can be used to connect to MySQL or MariaDB
 */
export const libmysqlclient_3_1 = mkPackage(
  nixRaw`pkgs.libmysqlclient_3_1`,
  "Client library that can be used to connect to MySQL or MariaDB",
);

/**
 * Client library that can be used to connect to MySQL or MariaDB
 */
export const libmysqlclient_3_2 = mkPackage(
  nixRaw`pkgs.libmysqlclient_3_2`,
  "Client library that can be used to connect to MySQL or MariaDB",
);

/**
 * Client library that can be used to connect to MySQL or MariaDB
 */
export const libmysqlclient_3_3 = mkPackage(
  nixRaw`pkgs.libmysqlclient_3_3`,
  "Client library that can be used to connect to MySQL or MariaDB",
);

/**
 * C++ library for connecting to mysql servers
 */
export const libmysqlconnectorcpp = mkPackage(
  nixRaw`pkgs.libmysqlconnectorcpp`,
  "C++ library for connecting to mysql servers",
);

/**
 * A fast K Nearest Neighbor library for low-dimensional spaces
 */
export const libnabo = mkPackage(
  nixRaw`pkgs.libnabo`,
  "A fast K Nearest Neighbor library for low-dimensional spaces",
);

/**
 * NAT-PMP client
 */
export const libnatpmp = mkPackage(
  nixRaw`pkgs.libnatpmp`,
  "NAT-PMP client",
);

/**
 * C API for the NATS messaging system
 */
export const libnats_c = mkPackage(
  nixRaw`pkgs.libnats-c`,
  "C API for the NATS messaging system",
);

/**
 * A library intended to smooth national specificities in using of programs
 */
export const libnatspec = mkPackage(
  nixRaw`pkgs.libnatspec`,
  "A library intended to smooth national specificities in using of programs",
);

/**
 * Network Block Device client library in userspace
 */
export const libnbd = mkPackage(
  nixRaw`pkgs.libnbd`,
  "Network Block Device client library in userspace",
);

/**
 * Tools for managing the Linux Non-Volatile Memory Device sub-system
 */
export const libndctl = mkPackage(
  nixRaw`pkgs.libndctl`,
  "Tools for managing the Linux Non-Volatile Memory Device sub-system",
);

/**
 * Library for Neighbor Discovery Protocol
 */
export const libndp = mkPackage(
  nixRaw`pkgs.libndp`,
  "Library for Neighbor Discovery Protocol",
);

/**
 * Dynamic types for data description and in-memory computations
 */
export const libndtypes = mkPackage(
  nixRaw`pkgs.libndtypes`,
  "Dynamic types for data description and in-memory computations",
);

/**
 * 2D irregular bin packaging and nesting library written in modern C++
 */
export const libnest2d = mkPackage(
  nixRaw`pkgs.libnest2d`,
  "2D irregular bin packaging and nesting library written in modern C++",
);

/**
 * Portable framework for low-level network packet construction
 */
export const libnet = mkPackage(
  nixRaw`pkgs.libnet`,
  "Portable framework for low-level network packet construction",
);

/**
 * Userspace library providing interface to extended accounting infrastructure
 */
export const libnetfilter_acct = mkPackage(
  nixRaw`pkgs.libnetfilter_acct`,
  "Userspace library providing interface to extended accounting infrastructure",
);

/**
 * Userspace library providing an API to the in-kernel connection tracking state table
 */
export const libnetfilter_conntrack = mkPackage(
  nixRaw`pkgs.libnetfilter_conntrack`,
  "Userspace library providing an API to the in-kernel connection tracking state table",
);

/**
 * Userspace library that provides the programming interface to the user-space connection tracking helper infrastructure
 */
export const libnetfilter_cthelper = mkPackage(
  nixRaw`pkgs.libnetfilter_cthelper`,
  "Userspace library that provides the programming interface to the user-space connection tracking helper infrastructure",
);

/**
 * Userspace library that provides the programming interface to the connection tracking timeout infrastructure
 */
export const libnetfilter_cttimeout = mkPackage(
  nixRaw`pkgs.libnetfilter_cttimeout`,
  "Userspace library that provides the programming interface to the connection tracking timeout infrastructure",
);

/**
 * Userspace library providing interface to packets that have been logged by the kernel packet filter
 */
export const libnetfilter_log = mkPackage(
  nixRaw`pkgs.libnetfilter_log`,
  "Userspace library providing interface to packets that have been logged by the kernel packet filter",
);

/**
 * Userspace API to packets queued by the kernel packet filter
 */
export const libnetfilter_queue = mkPackage(
  nixRaw`pkgs.libnetfilter_queue`,
  "Userspace API to packets queued by the kernel packet filter",
);

/**
 * Library for Near Field Communication (NFC)
 */
export const libnfc = mkPackage(
  nixRaw`pkgs.libnfc`,
  "Library for Near Field Communication (NFC)",
);

/**
 * Low-level library for netfilter related kernel/userspace communication
 */
export const libnfnetlink = mkPackage(
  nixRaw`pkgs.libnfnetlink`,
  "Low-level library for netfilter related kernel/userspace communication",
);

/**
 * NFS client library
 */
export const libnfs = mkPackage(
  nixRaw`pkgs.libnfs`,
  "NFS client library",
);

/**
 * A userspace library providing a low-level netlink API to the in-kernel nf_tables subsystem
 */
export const libnftnl = mkPackage(
  nixRaw`pkgs.libnftnl`,
  "A userspace library providing a low-level netlink API to the in-kernel nf_tables subsystem",
);

/**
 * HTTP/2 C library and tools
 */
export const libnghttp2 = mkPackage(
  nixRaw`pkgs.libnghttp2`,
  "HTTP/2 C library and tools",
);

/**
 * The Next Generation Spice (Electronic Circuit Simulator)
 */
export const libngspice = mkPackage(
  nixRaw`pkgs.libngspice`,
  "The Next Generation Spice (Electronic Circuit Simulator)",
);

/**
 * GLib ICE implementation
 */
export const libnice = mkPackage(
  nixRaw`pkgs.libnice`,
  "GLib ICE implementation",
);

/**
 * An E-component of Network Intrusion Detection System which emulates the IP stack of Linux 2.0.x
 */
export const libnids = mkPackage(
  nixRaw`pkgs.libnids`,
  "An E-component of Network Intrusion Detection System which emulates the IP stack of Linux 2.0.x",
);

/**
 * Communicate with Nitrokey devices in a clean and easy manner
 */
export const libnitrokey = mkPackage(
  nixRaw`pkgs.libnitrokey`,
  "Communicate with Nitrokey devices in a clean and easy manner",
);

/**
 * XML-based Nix-friendly data integration library
 */
export const libnixxml = mkPackage(
  nixRaw`pkgs.libnixxml`,
  "XML-based Nix-friendly data integration library",
);

/**
 * Linux Netlink interface library suite
 */
export const libnl = mkPackage(
  nixRaw`pkgs.libnl`,
  "Linux Netlink interface library suite",
);

/**
 * Tiny OpenWrt fork of libnl
 */
export const libnl_tiny = mkPackage(
  nixRaw`pkgs.libnl-tiny`,
  "Tiny OpenWrt fork of libnl",
);

/**
 * NetworkManager UI utilities (libnm version)
 */
export const libnma = mkPackage(
  nixRaw`pkgs.libnma`,
  "NetworkManager UI utilities (libnm version)",
);

/**
 * NetworkManager UI utilities (libnm version)
 */
export const libnma_gtk4 = mkPackage(
  nixRaw`pkgs.libnma-gtk4`,
  "NetworkManager UI utilities (libnm version)",
);

/**
 * A library that sends desktop notifications to a notification daemon
 */
export const libnotify = mkPackage(
  nixRaw`pkgs.libnotify`,
  "A library that sends desktop notifications to a notification daemon",
);

/**
 * Celestial Mechanics, Astrometry and Astrodynamics Library
 */
export const libnova = mkPackage(
  nixRaw`pkgs.libnova`,
  "Celestial Mechanics, Astrometry and Astrodynamics Library",
);

/**
 * Client interface library for NIS(YP) and NIS+
 */
export const libnsl = mkPackage(
  nixRaw`pkgs.libnsl`,
  "Client interface library for NIS(YP) and NIS+",
);

/**
 * MySQL module for the Solaris Nameservice Switch (NSS)
 */
export const libnss_mysql = mkPackage(
  nixRaw`pkgs.libnss-mysql`,
  "MySQL module for the Solaris Nameservice Switch (NSS)",
);

/**
 * A library to read/write the NUT video container format
 */
export const libnut = mkPackage(
  nixRaw`pkgs.libnut`,
  "A library to read/write the NUT video container format",
);

/**
 * C Library for NVM Express on Linux
 */
export const libnvme = mkPackage(
  nixRaw`pkgs.libnvme`,
  "C Library for NVM Express on Linux",
);

/**
 * C library for parsing, writing and creating XML 1.0 and 1.1 files or streams
 */
export const libnxml = mkPackage(
  nixRaw`pkgs.libnxml`,
  "C library for parsing, writing and creating XML 1.0 and 1.1 files or streams",
);

/**
 * C library implementing the OAuth secure authentication protocol
 */
export const liboauth = mkPackage(
  nixRaw`pkgs.liboauth`,
  "C library implementing the OAuth secure authentication protocol",
);

/**
 * Common ODB runtime library
 */
export const libodb = mkPackage(
  nixRaw`pkgs.libodb`,
  "Common ODB runtime library",
);

/**
 * SQLite ODB runtime library
 */
export const libodb_sqlite = mkPackage(
  nixRaw`pkgs.libodb-sqlite`,
  "SQLite ODB runtime library",
);

/**
 * A base library for generating ODF documents
 */
export const libodfgen = mkPackage(
  nixRaw`pkgs.libodfgen`,
  "A base library for generating ODF documents",
);

/**
 * Library Open Fingerprint Architecture
 */
export const libofa = mkPackage(
  nixRaw`pkgs.libofa`,
  "Library Open Fingerprint Architecture",
);

/**
 * Opensource implementation of the Open Financial eXchange specification
 */
export const libofx = mkPackage(
  nixRaw`pkgs.libofx`,
  "Opensource implementation of the Open Financial eXchange specification",
);

/**
 * Media container library to manipulate Ogg files
 */
export const libogg = mkPackage(
  nixRaw`pkgs.libogg`,
  "Media container library to manipulate Ogg files",
);

/**
 * A C library and tools for manipulating with Ogg files and streams
 */
export const liboggz = mkPackage(
  nixRaw`pkgs.liboggz`,
  "A C library and tools for manipulating with Ogg files and streams",
);

/**
 * A library of simple functions that are optimized for various CPUs
 */
export const liboil = mkPackage(
  nixRaw`pkgs.liboil`,
  "A library of simple functions that are optimized for various CPUs",
);

/**
 * An opensource implementation of the Khronos OpenMAX Integration Layer API to access multimedia components
 */
export const libomxil_bellagio = mkPackage(
  nixRaw`pkgs.libomxil-bellagio`,
  "An opensource implementation of the Khronos OpenMAX Integration Layer API to access multimedia components",
);

/**
 * Event loop library
 */
export const liboop = mkPackage(
  nixRaw`pkgs.liboop`,
  "Event loop library",
);

/**
 * A library from binutils for manipulating machine code
 */
export const libopcodes = mkPackage(
  nixRaw`pkgs.libopcodes`,
  "A library from binutils for manipulating machine code",
);

/**
 * A library from binutils for manipulating machine code
 */
export const libopcodes_2_38 = mkPackage(
  nixRaw`pkgs.libopcodes_2_38`,
  "A library from binutils for manipulating machine code",
);

/**
 * Audio Processing Technology codec (aptX)
 */
export const libopenaptx = mkPackage(
  nixRaw`pkgs.libopenaptx`,
  "Audio Processing Technology codec (aptX)",
);

/**
 * Library allowing Optional async readback OpenGL frame buffer with optional audio recording
 */
export const libopenglrecorder = mkPackage(
  nixRaw`pkgs.libopenglrecorder`,
  "Library allowing Optional async readback OpenGL frame buffer with optional audio recording",
);

/**
 * Cross-platform C++ and C library to decode tracked music files into a raw PCM audio stream
 */
export const libopenmpt = mkPackage(
  nixRaw`pkgs.libopenmpt`,
  "Cross-platform C++ and C library to decode tracked music files into a raw PCM audio stream",
);

/**
 * A libmodplug emulation layer based on libopenmpt
 */
export const libopenmpt_modplug = mkPackage(
  nixRaw`pkgs.libopenmpt-modplug`,
  "A libmodplug emulation layer based on libopenmpt",
);

/**
 * Library for creating OpenSMTPD filters
 */
export const libopensmtpd = mkPackage(
  nixRaw`pkgs.libopensmtpd`,
  "Library for creating OpenSMTPD filters",
);

/**
 * C library to generate ICMP echo requests (a.k.a. ping packets)
 */
export const liboping = mkPackage(
  nixRaw`pkgs.liboping`,
  "C library to generate ICMP echo requests (a.k.a. ping packets)",
);

/**
 * Open, royalty-free, highly versatile audio codec
 */
export const libopus = mkPackage(
  nixRaw`pkgs.libopus`,
  "Open, royalty-free, highly versatile audio codec",
);

/**
 * Library for encoding .opus audio files and live streams
 */
export const libopusenc = mkPackage(
  nixRaw`pkgs.libopusenc`,
  "Library for encoding .opus audio files and live streams",
);

/**
 * C library for prototyping and experimenting with quantum-resistant cryptography
 */
export const liboqs = mkPackage(
  nixRaw`pkgs.liboqs`,
  "C library for prototyping and experimenting with quantum-resistant cryptography",
);

/**
 * GObject based library API for managing information about operating systems, hypervisors and the (virtual) hardware devices they can support
 */
export const libosinfo = mkPackage(
  nixRaw`pkgs.libosinfo`,
  "GObject based library API for managing information about operating systems, hypervisors and the (virtual) hardware devices they can support",
);

/**
 * The GNU oSIP library, an implementation of the Session Initiation Protocol (SIP)
 */
export const libosip = mkPackage(
  nixRaw`pkgs.libosip`,
  "The GNU oSIP library, an implementation of the Session Initiation Protocol (SIP)",
);

/**
 * Fast and flexible C++ library for working with OpenStreetMap data
 */
export const libosmium = mkPackage(
  nixRaw`pkgs.libosmium`,
  "Fast and flexible C++ library for working with OpenStreetMap data",
);

/**
 * Osmocom network / socket interface library
 */
export const libosmo_netif = mkPackage(
  nixRaw`pkgs.libosmo-netif`,
  "Osmocom network / socket interface library",
);

/**
 * SCCP + SIGTRAN (SUA/M3UA) libraries as well as OsmoSTP
 */
export const libosmo_sccp = mkPackage(
  nixRaw`pkgs.libosmo-sccp`,
  "SCCP + SIGTRAN (SUA/M3UA) libraries as well as OsmoSTP",
);

/**
 * Osmocom Abis interface library
 */
export const libosmoabis = mkPackage(
  nixRaw`pkgs.libosmoabis`,
  "Osmocom Abis interface library",
);

/**
 * Set of Osmocom core libraries
 */
export const libosmocore = mkPackage(
  nixRaw`pkgs.libosmocore`,
  "Set of Osmocom core libraries",
);

/**
 * Simple, high-level interfaces for offline location and POI lokup, rendering and routing functionalities based on OpenStreetMap (OSM) data
 */
export const libosmscout = mkPackage(
  nixRaw`pkgs.libosmscout`,
  "Simple, high-level interfaces for offline location and POI lokup, rendering and routing functionalities based on OpenStreetMap (OSM) data",
);

/**
 * OSSP uuid ISO-C and C++ shared library
 */
export const libossp_uuid = mkPackage(
  nixRaw`pkgs.libossp_uuid`,
  "OSSP uuid ISO-C and C++ shared library",
);

/**
 * Multilingual text processing library (libotf)
 */
export const libotf = mkPackage(
  nixRaw`pkgs.libotf`,
  "Multilingual text processing library (libotf)",
);

/**
 * Library for Off-The-Record Messaging
 */
export const libotr = mkPackage(
  nixRaw`pkgs.libotr`,
  "Library for Off-The-Record Messaging",
);

/**
 * 1-Wire File System full library
 */
export const libow = mkPackage(
  nixRaw`pkgs.libow`,
  "1-Wire File System full library",
);

/**
 * A GPL reimplementation of libdjb
 */
export const libowfat = mkPackage(
  nixRaw`pkgs.libowfat`,
  "A GPL reimplementation of libdjb",
);

/**
 * Zscheile Lowlevel (utility) library
 */
export const libowlevelzs = mkPackage(
  nixRaw`pkgs.libowlevelzs`,
  "Zscheile Lowlevel (utility) library",
);

/**
 * Small layer on top of PKCS#11 API to make PKCS#11 implementations easier
 */
export const libp11 = mkPackage(
  nixRaw`pkgs.libp11`,
  "Small layer on top of PKCS#11 API to make PKCS#11 implementations easier",
);

/**
 * Wrapper for testing PAM modules
 */
export const libpam_wrapper = mkPackage(
  nixRaw`pkgs.libpam-wrapper`,
  "Wrapper for testing PAM modules",
);

/**
 * Dock/panel library for GTK 4
 */
export const libpanel = mkPackage(
  nixRaw`pkgs.libpanel`,
  "Dock/panel library for GTK 4",
);

/**
 * Library for handling paper characteristics
 */
export const libpaper = mkPackage(
  nixRaw`pkgs.libpaper`,
  "Library for handling paper characteristics",
);

/**
 * A library for using Parchives (parity archive volume sets)
 */
export const libpar2 = mkPackage(
  nixRaw`pkgs.libpar2`,
  "A library for using Parchives (parity archive volume sets)",
);

/**
 * Packet Capture Library
 */
export const libpcap = mkPackage(
  nixRaw`pkgs.libpcap`,
  "Packet Capture Library",
);

/**
 * A GObject-based plugins engine
 */
export const libpeas = mkPackage(
  nixRaw`pkgs.libpeas`,
  "A GObject-based plugins engine",
);

/**
 * Library and tools to access the Personal Folder File (PFF) and the Offline Folder File (OFF) format
 */
export const libpff = mkPackage(
  nixRaw`pkgs.libpff`,
  "Library and tools to access the Personal Folder File (PFF) and the Offline Folder File (OFF) format",
);

/**
 * Helper library to program the performance monitoring events
 */
export const libpfm = mkPackage(
  nixRaw`pkgs.libpfm`,
  "Helper library to program the performance monitoring events",
);

/**
 * C library for accessing the PostgreSQL parser outside of the server environment
 */
export const libpg_query = mkPackage(
  nixRaw`pkgs.libpg_query`,
  "C library for accessing the PostgreSQL parser outside of the server environment",
);

/**
 * Progressive Graphics Format
 */
export const libpgf = mkPackage(
  nixRaw`pkgs.libpgf`,
  "Progressive Graphics Format",
);

/**
 * Google's i18n library for parsing and using phone numbers
 */
export const libphonenumber = mkPackage(
  nixRaw`pkgs.libphonenumber`,
  "Google's i18n library for parsing and using phone numbers",
);

/**
 * Library for intelligent sentence-based Chinese pinyin input method
 */
export const libpinyin = mkPackage(
  nixRaw`pkgs.libpinyin`,
  "Library for intelligent sentence-based Chinese pinyin input method",
);

/**
 * C library for manipulating pipelines of subprocesses in a flexible and convenient way
 */
export const libpipeline = mkPackage(
  nixRaw`pkgs.libpipeline`,
  "C library for manipulating pipelines of subprocesses in a flexible and convenient way",
);

/**
 * Package compiler and linker metadata toolkit
 */
export const libpkgconf = mkPackage(
  nixRaw`pkgs.libpkgconf`,
  "Package compiler and linker metadata toolkit",
);

/**
 * Reusable library for GPU-accelerated video/image rendering primitives
 */
export const libplacebo = mkPackage(
  nixRaw`pkgs.libplacebo`,
  "Reusable library for GPU-accelerated video/image rendering primitives",
);

/**
 * Library that uses EtherNet/IP or Modbus TCP to read and write tags in PLCs
 */
export const libplctag = mkPackage(
  nixRaw`pkgs.libplctag`,
  "Library that uses EtherNet/IP or Modbus TCP to read and write tags in PLCs",
);

/**
 * A library to handle Apple Property List format in binary or XML
 */
export const libplist = mkPackage(
  nixRaw`pkgs.libplist`,
  "A library to handle Apple Property List format in binary or XML",
);

/**
 * The official reference implementation for the PNG file format with animation patch
 */
export const libpng = mkPackage(
  nixRaw`pkgs.libpng`,
  "The official reference implementation for the PNG file format with animation patch",
);

/**
 * The official reference implementation for the PNG file format
 */
export const libpng12 = mkPackage(
  nixRaw`pkgs.libpng12`,
  "The official reference implementation for the PNG file format",
);

/**
 * An "Iterative Closest Point" library for 2-D/3-D mapping in robotic
 */
export const libpointmatcher = mkPackage(
  nixRaw`pkgs.libpointmatcher`,
  "An \"Iterative Closest Point\" library for 2-D/3-D mapping in robotic",
);

/**
 * C library for manipulating polynomials
 */
export const libpoly = mkPackage(
  nixRaw`pkgs.libpoly`,
  "C library for manipulating polynomials",
);

/**
 * Flatpak portal library
 */
export const libportal = mkPackage(
  nixRaw`pkgs.libportal`,
  "Flatpak portal library",
);

/**
 * Flatpak portal library
 */
export const libportal_gtk3 = mkPackage(
  nixRaw`pkgs.libportal-gtk3`,
  "Flatpak portal library",
);

/**
 * Flatpak portal library
 */
export const libportal_gtk4 = mkPackage(
  nixRaw`pkgs.libportal-gtk4`,
  "Flatpak portal library",
);

/**
 * Flatpak portal library
 */
export const libportal_qt5 = mkPackage(
  nixRaw`pkgs.libportal-qt5`,
  "Flatpak portal library",
);

/**
 * A C library for parsing/normalizing street addresses around the world. Powered by statistical NLP and open geo data
 */
export const libpostal = mkPackage(
  nixRaw`pkgs.libpostal`,
  "A C library for parsing/normalizing street addresses around the world. Powered by statistical NLP and open geo data",
);

/**
 * A C++ library to access PostgreSQL databases
 */
export const libpqxx = mkPackage(
  nixRaw`pkgs.libpqxx`,
  "A C++ library to access PostgreSQL databases",
);

/**
 * A C++ library to access PostgreSQL databases
 */
export const libpqxx_6 = mkPackage(
  nixRaw`pkgs.libpqxx_6`,
  "A C++ library to access PostgreSQL databases",
);

/**
 * libpulse without any sound daemons over pure ALSA
 */
export const libpressureaudio = mkPackage(
  nixRaw`pkgs.libpressureaudio`,
  "libpulse without any sound daemons over pure ALSA",
);

/**
 * A Prometheus Client in C
 */
export const libprom = mkPackage(
  nixRaw`pkgs.libprom`,
  "A Prometheus Client in C",
);

/**
 * A Prometheus HTTP Endpoint in C
 */
export const libpromhttp = mkPackage(
  nixRaw`pkgs.libpromhttp`,
  "A Prometheus HTTP Endpoint in C",
);

/**
 * A library that provides automatic proxy configuration management
 */
export const libproxy = mkPackage(
  nixRaw`pkgs.libproxy`,
  "A library that provides automatic proxy configuration management",
);

/**
 * Simple, thread-safe messaging between threads
 */
export const libpseudo = mkPackage(
  nixRaw`pkgs.libpseudo`,
  "Simple, thread-safe messaging between threads",
);

/**
 * C library for the Publix Suffix List
 */
export const libpsl = mkPackage(
  nixRaw`pkgs.libpsl`,
  "C library for the Publix Suffix List",
);

/**
 * The PSM2 library supports a number of fabric media and stacks
 */
export const libpsm2 = mkPackage(
  nixRaw`pkgs.libpsm2`,
  "The PSM2 library supports a number of fabric media and stacks",
);

/**
 * A library to read PST (MS Outlook Personal Folders) files
 */
export const libpst = mkPackage(
  nixRaw`pkgs.libpst`,
  "A library to read PST (MS Outlook Personal Folders) files",
);

/**
 * OS independent and secure pty/tty and utmp/wtmp/lastlog
 */
export const libptytty = mkPackage(
  nixRaw`pkgs.libptytty`,
  "OS independent and secure pty/tty and utmp/wtmp/lastlog",
);

/**
 * Apache Pulsar C++ library
 */
export const libpulsar = mkPackage(
  nixRaw`pkgs.libpulsar`,
  "Apache Pulsar C++ library",
);

/**
 * Sound server for POSIX and Win32 systems
 */
export const libpulseaudio = mkPackage(
  nixRaw`pkgs.libpulseaudio`,
  "Sound server for POSIX and Win32 systems",
);

/**
 * Password quality checking and random password generation library
 */
export const libpwquality = mkPackage(
  nixRaw`pkgs.libpwquality`,
  "Password quality checking and random password generation library",
);

/**
 * An advanced calculator library
 */
export const libqalculate = mkPackage(
  nixRaw`pkgs.libqalculate`,
  "An advanced calculator library",
);

/**
 * A library providing high performance logging, tracing, ipc, and poll
 */
export const libqb = mkPackage(
  nixRaw`pkgs.libqb`,
  "A library providing high performance logging, tracing, ipc, and poll",
);

/**
 * Modem protocol helper library
 */
export const libqmi = mkPackage(
  nixRaw`pkgs.libqmi`,
  "Modem protocol helper library",
);

/**
 * Qualcomm IPC Router protocol helper library
 */
export const libqrtr_glib = mkPackage(
  nixRaw`pkgs.libqrtr-glib`,
  "Qualcomm IPC Router protocol helper library",
);

/**
 * Free Pascal Qt5 binding library
 */
export const libqt5pas = mkPackage(
  nixRaw`pkgs.libqt5pas`,
  "Free Pascal Qt5 binding library",
);

/**
 * Library for mocking DBus interactions using Qt
 */
export const libqtdbusmock = mkPackage(
  nixRaw`pkgs.libqtdbusmock`,
  "Library for mocking DBus interactions using Qt",
);

/**
 * Library for testing DBus interactions using Qt
 */
export const libqtdbustest = mkPackage(
  nixRaw`pkgs.libqtdbustest`,
  "Library for testing DBus interactions using Qt",
);

/**
 * A Qt5/Qt6 library to write cross-platform clients for Matrix
 */
export const libquotient = mkPackage(
  nixRaw`pkgs.libquotient`,
  "A Qt5/Qt6 library to write cross-platform clients for Matrix",
);

/**
 * A high-performance path dispatching library
 */
export const libr3 = mkPackage(
  nixRaw`pkgs.libr3`,
  "A high-performance path dispatching library",
);

/**
 * A library for complex text layout
 */
export const libraqm = mkPackage(
  nixRaw`pkgs.libraqm`,
  "A library for complex text layout",
);

/**
 * librarian-puppet implementation in go
 */
export const librarian_puppet_go = mkPackage(
  nixRaw`pkgs.librarian-puppet-go`,
  "librarian-puppet implementation in go",
);

/**
 * Userland tools & libraries for interfacing with Raspberry Pi hardware
 */
export const libraspberrypi = mkPackage(
  nixRaw`pkgs.libraspberrypi`,
  "Userland tools & libraries for interfacing with Raspberry Pi hardware",
);

/**
 * Advanced library supporting raster handling methods
 */
export const librasterlite2 = mkPackage(
  nixRaw`pkgs.librasterlite2`,
  "Advanced library supporting raster handling methods",
);

/**
 * Configuration library for gaming mice
 */
export const libratbag = mkPackage(
  nixRaw`pkgs.libratbag`,
  "Configuration library for gaming mice",
);

/**
 * Library for reading RAW files obtained from digital photo cameras (CRW/CR2, NEF, RAF, DNG, and others)
 */
export const libraw = mkPackage(
  nixRaw`pkgs.libraw`,
  "Library for reading RAW files obtained from digital photo cameras (CRW/CR2, NEF, RAF, DNG, and others)",
);

/**
 * Library providing direct access to the IEEE 1394 bus through the Linux 1394 subsystem's raw1394 user space interface
 */
export const libraw1394 = mkPackage(
  nixRaw`pkgs.libraw1394`,
  "Library providing direct access to the IEEE 1394 bus through the Linux 1394 subsystem's raw1394 user space interface",
);

/**
 * Rclone as a C library
 */
export const librclone = mkPackage(
  nixRaw`pkgs.librclone`,
  "Rclone as a C library",
);

/**
 * The RDF Parser Toolkit
 */
export const librdf_raptor = mkPackage(
  nixRaw`pkgs.librdf_raptor`,
  "The RDF Parser Toolkit",
);

/**
 * The RDF Parser Toolkit
 */
export const librdf_raptor2 = mkPackage(
  nixRaw`pkgs.librdf_raptor2`,
  "The RDF Parser Toolkit",
);

/**
 * Library that handles Resource Description Framework (RDF)
 */
export const librdf_rasqal = mkPackage(
  nixRaw`pkgs.librdf_rasqal`,
  "Library that handles Resource Description Framework (RDF)",
);

/**
 * C libraries that provide support for the Resource Description Framework (RDF)
 */
export const librdf_redland = mkPackage(
  nixRaw`pkgs.librdf_redland`,
  "C libraries that provide support for the Resource Description Framework (RDF)",
);

/**
 * A library for real-time communications with async IO support and a complete SIP stack
 */
export const libre = mkPackage(
  nixRaw`pkgs.libre`,
  "A library for real-time communications with async IO support and a complete SIP stack",
);

/**
 * A webfont family optimized for body text
 */
export const libre_baskerville = mkPackage(
  nixRaw`pkgs.libre-baskerville`,
  "A webfont family optimized for body text",
);

/**
 * Bodoni fonts adapted for today's web requirements
 */
export const libre_bodoni = mkPackage(
  nixRaw`pkgs.libre-bodoni`,
  "Bodoni fonts adapted for today's web requirements",
);

/**
 * Caslon fonts based on hand-lettered American Caslons of 1960s
 */
export const libre_caslon = mkPackage(
  nixRaw`pkgs.libre-caslon`,
  "Caslon fonts based on hand-lettered American Caslons of 1960s",
);

/**
 * A reinterpretation and expansion based on the 1912 Morris Fuller Benton’s classic.
 */
export const libre_franklin = mkPackage(
  nixRaw`pkgs.libre-franklin`,
  "A reinterpretation and expansion based on the 1912 Morris Fuller Benton’s classic.",
);

/**
 * A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)
 */
export const librealsense = mkPackage(
  nixRaw`pkgs.librealsense`,
  "A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)",
);

/**
 * A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)
 */
export const librealsenseWithCuda = mkPackage(
  nixRaw`pkgs.librealsenseWithCuda`,
  "A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)",
);

/**
 * A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)
 */
export const librealsenseWithoutCuda = mkPackage(
  nixRaw`pkgs.librealsenseWithoutCuda`,
  "A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)",
);

/**
 * A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)
 */
export const librealsense_gui = mkPackage(
  nixRaw`pkgs.librealsense-gui`,
  "A cross-platform library for Intel® RealSense™ depth cameras (D400 series and the SR300)",
);

/**
 * 2D CAD package based on Qt
 */
export const librecad = mkPackage(
  nixRaw`pkgs.librecad`,
  "2D CAD package based on Qt",
);

/**
 * IPv6 multicast library
 */
export const librecast = mkPackage(
  nixRaw`pkgs.librecast`,
  "IPv6 multicast library",
);

/**
 * Private front-end for Reddit
 */
export const libreddit = mkPackage(
  nixRaw`pkgs.libreddit`,
  "Private front-end for Reddit",
);

/**
 * An LD_PRELOAD library to intercept and rewrite the paths in glibc calls
 */
export const libredirect = mkPackage(
  nixRaw`pkgs.libredirect`,
  "An LD_PRELOAD library to intercept and rewrite the paths in glibc calls",
);

/**
 * Free implementation of the DWG file format
 */
export const libredwg = mkPackage(
  nixRaw`pkgs.libredwg`,
  "Free implementation of the DWG file format",
);

/**
 * DVB firmware from LibreELEC
 */
export const libreelec_dvb_firmware = mkPackage(
  nixRaw`pkgs.libreelec-dvb-firmware`,
  "DVB firmware from LibreELEC",
);

/**
 * A reliable logging library
 */
export const librelp = mkPackage(
  nixRaw`pkgs.librelp`,
  "A reliable logging library",
);

/**
 * A library for real-time audio and video processing
 */
export const librem = mkPackage(
  nixRaw`pkgs.librem`,
  "A library for real-time audio and video processing",
);

/**
 * A modern C++ MIDI real-time & file I/O library
 */
export const libremidi = mkPackage(
  nixRaw`pkgs.libremidi`,
  "A modern C++ MIDI real-time & file I/O library",
);

/**
 * Qt based Minesweeper game
 */
export const libremines = mkPackage(
  nixRaw`pkgs.libremines`,
  "Qt based Minesweeper game",
);

/**
 * A auto-discovering PHP/MySQL/SNMP based network monitoring
 */
export const librenms = mkPackage(
  nixRaw`pkgs.librenms`,
  "A auto-discovering PHP/MySQL/SNMP based network monitoring",
);

/**
 * Comprehensive, professional-quality productivity suite, a variant of openoffice.org
 */
export const libreoffice = mkPackage(
  nixRaw`pkgs.libreoffice`,
  "Comprehensive, professional-quality productivity suite, a variant of openoffice.org",
);

/**
 * Comprehensive, professional-quality productivity suite, a variant of openoffice.org
 */
export const libreoffice_bin = mkPackage(
  nixRaw`pkgs.libreoffice-bin`,
  "Comprehensive, professional-quality productivity suite, a variant of openoffice.org",
);

/**
 * Comprehensive, professional-quality productivity suite, a variant of openoffice.org
 */
export const libreoffice_fresh = mkPackage(
  nixRaw`pkgs.libreoffice-fresh`,
  "Comprehensive, professional-quality productivity suite, a variant of openoffice.org",
);

/**
 * Comprehensive, professional-quality productivity suite, a variant of openoffice.org
 */
export const libreoffice_fresh_unwrapped = mkPackage(
  nixRaw`pkgs.libreoffice-fresh-unwrapped`,
  "Comprehensive, professional-quality productivity suite, a variant of openoffice.org",
);

/**
 * Comprehensive, professional-quality productivity suite, a variant of openoffice.org
 */
export const libreoffice_qt = mkPackage(
  nixRaw`pkgs.libreoffice-qt`,
  "Comprehensive, professional-quality productivity suite, a variant of openoffice.org",
);

/**
 * Comprehensive, professional-quality productivity suite, a variant of openoffice.org
 */
export const libreoffice_still = mkPackage(
  nixRaw`pkgs.libreoffice-still`,
  "Comprehensive, professional-quality productivity suite, a variant of openoffice.org",
);

/**
 * Comprehensive, professional-quality productivity suite, a variant of openoffice.org
 */
export const libreoffice_still_unwrapped = mkPackage(
  nixRaw`pkgs.libreoffice-still-unwrapped`,
  "Comprehensive, professional-quality productivity suite, a variant of openoffice.org",
);

/**
 * Comprehensive, professional-quality productivity suite, a variant of openoffice.org
 */
export const libreoffice_unwrapped = mkPackage(
  nixRaw`pkgs.libreoffice-unwrapped`,
  "Comprehensive, professional-quality productivity suite, a variant of openoffice.org",
);

/**
 * Fast, lightweight, and versatile Lisp environment
 */
export const librep = mkPackage(
  nixRaw`pkgs.librep`,
  "Fast, lightweight, and versatile Lisp environment",
);

/**
 * A free EDA software to develop printed circuit boards
 */
export const librepcb = mkPackage(
  nixRaw`pkgs.librepcb`,
  "A free EDA software to develop printed circuit boards",
);

/**
 * Library providing C and Python (libcURL like) API for downloading linux repository metadata and packages
 */
export const librepo = mkPackage(
  nixRaw`pkgs.librepo`,
  "Library providing C and Python (libcURL like) API for downloading linux repository metadata and packages",
);

/**
 * A real-time library for sampling rate conversion library
 */
export const libresample = mkPackage(
  nixRaw`pkgs.libresample`,
  "A real-time library for sampling rate conversion library",
);

/**
 * Command line client for LibreSpeed
 */
export const librespeed_cli = mkPackage(
  nixRaw`pkgs.librespeed-cli`,
  "Command line client for LibreSpeed",
);

/**
 * Open Source Spotify client library and playback daemon
 */
export const librespot = mkPackage(
  nixRaw`pkgs.librespot`,
  "Open Source Spotify client library and playback daemon",
);

/**
 * Animated sprite editor & pixel art tool, fork of Aseprite
 */
export const libresprite = mkPackage(
  nixRaw`pkgs.libresprite`,
  "Animated sprite editor & pixel art tool, fork of Aseprite",
);

/**
 * Free TLS/SSL implementation
 */
export const libressl = mkPackage(
  nixRaw`pkgs.libressl`,
  "Free TLS/SSL implementation",
);

/**
 * Free TLS/SSL implementation
 */
export const libressl_3_6 = mkPackage(
  nixRaw`pkgs.libressl_3_6`,
  "Free TLS/SSL implementation",
);

/**
 * Free TLS/SSL implementation
 */
export const libressl_3_7 = mkPackage(
  nixRaw`pkgs.libressl_3_7`,
  "Free TLS/SSL implementation",
);

/**
 * Helper library for RESTful services
 */
export const librest = mkPackage(
  nixRaw`pkgs.librest`,
  "Helper library for RESTful services",
);

/**
 * Helper library for RESTful services
 */
export const librest_1_0 = mkPackage(
  nixRaw`pkgs.librest_1_0`,
  "Helper library for RESTful services",
);

/**
 * A free software implementation of the VPN protocol based on IPSec and the Internet Key Exchange
 */
export const libreswan = mkPackage(
  nixRaw`pkgs.libreswan`,
  "A free software implementation of the VPN protocol based on IPSec and the Internet Key Exchange",
);

/**
 * Free and Open Source Machine Translation API. Self-hosted, no limits, no ties to proprietary services
 */
export const libretranslate = mkPackage(
  nixRaw`pkgs.libretranslate`,
  "Free and Open Source Machine Translation API. Self-hosted, no limits, no ties to proprietary services",
);

/**
 * Libretro's core info files
 */
export const libretro_core_info = mkPackage(
  nixRaw`pkgs.libretro-core-info`,
  "Libretro's core info files",
);

/**
 * A base library for writing document import filters
 */
export const librevenge = mkPackage(
  nixRaw`pkgs.librevenge`,
  "A base library for writing document import filters",
);

/**
 * A fork of Firefox, focused on privacy, security and freedom
 */
export const librewolf = mkPackage(
  nixRaw`pkgs.librewolf`,
  "A fork of Firefox, focused on privacy, security and freedom",
);

/**
 * A fork of Firefox, focused on privacy, security and freedom
 */
export const librewolf_unwrapped = mkPackage(
  nixRaw`pkgs.librewolf-unwrapped`,
  "A fork of Firefox, focused on privacy, security and freedom",
);

/**
 * Rime Input Method Engine, the core library
 */
export const librime = mkPackage(
  nixRaw`pkgs.librime`,
  "Rime Input Method Engine, the core library",
);

/**
 * A library that can be used to easily add the RIST protocol to your application.
 */
export const librist = mkPackage(
  nixRaw`pkgs.librist`,
  "A library that can be used to easily add the RIST protocol to your application.",
);

/**
 * This library is minimum, easy-to-use, C implementation for xml file parsing
 */
export const libroxml = mkPackage(
  nixRaw`pkgs.libroxml`,
  "This library is minimum, easy-to-use, C implementation for xml file parsing",
);

/**
 * Shared memory parallel sparse matrix and sparse BLAS library
 */
export const librsb = mkPackage(
  nixRaw`pkgs.librsb`,
  "Shared memory parallel sparse matrix and sparse BLAS library",
);

/**
 * Userspace library for the Linux Restartable Sequence API
 */
export const librseq = mkPackage(
  nixRaw`pkgs.librseq`,
  "Userspace library for the Linux Restartable Sequence API",
);

/**
 * A small library to render SVG images to Cairo surfaces
 */
export const librsvg = mkPackage(
  nixRaw`pkgs.librsvg`,
  "A small library to render SVG images to Cairo surfaces",
);

/**
 * Implementation of the rsync remote-delta algorithm
 */
export const librsync = mkPackage(
  nixRaw`pkgs.librsync`,
  "Implementation of the rsync remote-delta algorithm",
);

/**
 * Highly optimized library for processing RAW images
 */
export const librtprocess = mkPackage(
  nixRaw`pkgs.librtprocess`,
  "Highly optimized library for processing RAW images",
);

/**
 * RT Topology Library
 */
export const librttopo = mkPackage(
  nixRaw`pkgs.librttopo`,
  "RT Topology Library",
);

/**
 * A library for interfacing with amazon s3
 */
export const libs3 = mkPackage(
  nixRaw`pkgs.libs3`,
  "A library for interfacing with amazon s3",
);

/**
 * Sample Rate Converter for audio
 */
export const libsamplerate = mkPackage(
  nixRaw`pkgs.libsamplerate`,
  "Sample Rate Converter for audio",
);

/**
 * A C/C++ implementation of a Sass compiler
 */
export const libsass = mkPackage(
  nixRaw`pkgs.libsass`,
  "A C/C++ implementation of a Sass compiler",
);

/**
 * Subband sinusoidal modeling library for time stretching and pitch scaling audio
 */
export const libsbsms = mkPackage(
  nixRaw`pkgs.libsbsms`,
  "Subband sinusoidal modeling library for time stretching and pitch scaling audio",
);

/**
 * Subband sinusoidal modeling library for time stretching and pitch scaling audio
 */
export const libsbsms_2_0_2 = mkPackage(
  nixRaw`pkgs.libsbsms_2_0_2`,
  "Subband sinusoidal modeling library for time stretching and pitch scaling audio",
);

/**
 * Subband sinusoidal modeling library for time stretching and pitch scaling audio
 */
export const libsbsms_2_3_0 = mkPackage(
  nixRaw`pkgs.libsbsms_2_3_0`,
  "Subband sinusoidal modeling library for time stretching and pitch scaling audio",
);

/**
 * A lightweight TrueType font rendering library
 */
export const libschrift = mkPackage(
  nixRaw`pkgs.libschrift`,
  "A lightweight TrueType font rendering library",
);

/**
 * Embeddable HTML/CSS/JavaScript engine for modern UI development
 */
export const libsciter = mkPackage(
  nixRaw`pkgs.libsciter`,
  "Embeddable HTML/CSS/JavaScript engine for modern UI development",
);

/**
 * Shared library that implements scrypt() functionality
 */
export const libscrypt = mkPackage(
  nixRaw`pkgs.libscrypt`,
  "Shared library that implements scrypt() functionality",
);

/**
 * A simple and easy-to-use C language RPC framework based on GObject System
 */
export const libsearpc = mkPackage(
  nixRaw`pkgs.libsearpc`,
  "A simple and easy-to-use C language RPC framework based on GObject System",
);

/**
 * High level library for the Linux Kernel seccomp filter
 */
export const libseccomp = mkPackage(
  nixRaw`pkgs.libseccomp`,
  "High level library for the Linux Kernel seccomp filter",
);

/**
 * A library for storing and retrieving passwords and other secrets
 */
export const libsecret = mkPackage(
  nixRaw`pkgs.libsecret`,
  "A library for storing and retrieving passwords and other secrets",
);

/**
 * Implementation of libSegFault.so with Boost.stracktrace
 */
export const libsegfault = mkPackage(
  nixRaw`pkgs.libsegfault`,
  "Implementation of libSegFault.so with Boost.stracktrace",
);

/**
 * SELinux core library
 */
export const libselinux = mkPackage(
  nixRaw`pkgs.libselinux`,
  "SELinux core library",
);

/**
 * Policy management tools for SELinux
 */
export const libsemanage = mkPackage(
  nixRaw`pkgs.libsemanage`,
  "Policy management tools for SELinux",
);

/**
 * SELinux binary policy manipulation library
 */
export const libsepol = mkPackage(
  nixRaw`pkgs.libsepol`,
  "SELinux binary policy manipulation library",
);

/**
 * A schema-based serializer/deserializer C/C++ library with support for Avro and the Confluent Platform Schema Registry
 */
export const libserdes = mkPackage(
  nixRaw`pkgs.libserdes`,
  "A schema-based serializer/deserializer C/C++ library with support for Avro and the Confluent Platform Schema Registry",
);

/**
 * Cross-platform shared library for serial port access
 */
export const libserialport = mkPackage(
  nixRaw`pkgs.libserialport`,
  "Cross-platform shared library for serial port access",
);

/**
 * icecast 'c' language bindings
 */
export const libshout = mkPackage(
  nixRaw`pkgs.libshout`,
  "icecast 'c' language bindings",
);

/**
 * GTK toolkit providing widgets for embedded maps
 */
export const libshumate = mkPackage(
  nixRaw`pkgs.libshumate`,
  "GTK toolkit providing widgets for embedded maps",
);

/**
 * A library to play Commodore 64 music derived from libsidplay2
 */
export const libsidplayfp = mkPackage(
  nixRaw`pkgs.libsidplayfp`,
  "A library to play Commodore 64 music derived from libsidplay2",
);

/**
 * An interpreter for RFC 3028 Sieve and various extensions
 */
export const libsieve = mkPackage(
  nixRaw`pkgs.libsieve`,
  "An interpreter for RFC 3028 Sieve and various extensions",
);

/**
 * A typesafe callback system for standard C++
 */
export const libsigcxx = mkPackage(
  nixRaw`pkgs.libsigcxx`,
  "A typesafe callback system for standard C++",
);

/**
 * A typesafe callback system for standard C++
 */
export const libsigcxx12 = mkPackage(
  nixRaw`pkgs.libsigcxx12`,
  "A typesafe callback system for standard C++",
);

/**
 * A typesafe callback system for standard C++
 */
export const libsigcxx30 = mkPackage(
  nixRaw`pkgs.libsigcxx30`,
  "A typesafe callback system for standard C++",
);

/**
 * Signal Protocol C Library
 */
export const libsignal_protocol_c = mkPackage(
  nixRaw`pkgs.libsignal-protocol-c`,
  "Signal Protocol C Library",
);

/**
 * A library for managing single signon credentials which can be used from GLib applications
 */
export const libsignon_glib = mkPackage(
  nixRaw`pkgs.libsignon-glib`,
  "A library for managing single signon credentials which can be used from GLib applications",
);

/**
 * Core library of the sigrok signal analysis software suite
 */
export const libsigrok = mkPackage(
  nixRaw`pkgs.libsigrok`,
  "Core library of the sigrok signal analysis software suite",
);

/**
 * Protocol decoding library for the sigrok signal analysis software suite
 */
export const libsigrokdecode = mkPackage(
  nixRaw`pkgs.libsigrokdecode`,
  "Protocol decoding library for the sigrok signal analysis software suite",
);

/**
 * Library to handle page faults in user mode
 */
export const libsigsegv = mkPackage(
  nixRaw`pkgs.libsigsegv`,
  "Library to handle page faults in user mode",
);

/**
 * The SIXEL library for console graphics, and converter programs
 */
export const libsixel = mkPackage(
  nixRaw`pkgs.libsixel`,
  "The SIXEL library for console graphics, and converter programs",
);

/**
 * A library to deal with Japanese kana-to-kanji conversion method
 */
export const libskk = mkPackage(
  nixRaw`pkgs.libskk`,
  "A library to deal with Japanese kana-to-kanji conversion method",
);

/**
 * General purpose TCP-IP emulator
 */
export const libslirp = mkPackage(
  nixRaw`pkgs.libslirp`,
  "General purpose TCP-IP emulator",
);

/**
 * smart column output alignment library
 */
export const libsmartcols = mkPackage(
  nixRaw`pkgs.libsmartcols`,
  "smart column output alignment library",
);

/**
 * A library to obtain BIOS information
 */
export const libsmbios = mkPackage(
  nixRaw`pkgs.libsmbios`,
  "A library to obtain BIOS information",
);

/**
 * A C library for reading and writing Standard MIDI Files
 */
export const libsmf = mkPackage(
  nixRaw`pkgs.libsmf`,
  "A C library for reading and writing Standard MIDI Files",
);

/**
 * A Library to Access SMI MIB Information
 */
export const libsmi = mkPackage(
  nixRaw`pkgs.libsmi`,
  "A Library to Access SMI MIB Information",
);

/**
 * C++ library for zkSNARKs
 */
export const libsnark = mkPackage(
  nixRaw`pkgs.libsnark`,
  "C++ library for zkSNARKs",
);

/**
 * A C library for reading and writing files containing sampled sound
 */
export const libsndfile = mkPackage(
  nixRaw`pkgs.libsndfile`,
  "A C library for reading and writing files containing sampled sound",
);

/**
 * A modern and easy-to-use crypto library
 */
export const libsodium = mkPackage(
  nixRaw`pkgs.libsodium`,
  "A modern and easy-to-use crypto library",
);

/**
 * A free package dependency solver
 */
export const libsolv = mkPackage(
  nixRaw`pkgs.libsolv`,
  "A free package dependency solver",
);

/**
 * Cross platform audio input and output
 */
export const libsoundio = mkPackage(
  nixRaw`pkgs.libsoundio`,
  "Cross platform audio input and output",
);

/**
 * HTTP client/server library for GNOME
 */
export const libsoup = mkPackage(
  nixRaw`pkgs.libsoup`,
  "HTTP client/server library for GNOME",
);

/**
 * HTTP client/server library for GNOME
 */
export const libsoup_3 = mkPackage(
  nixRaw`pkgs.libsoup_3`,
  "HTTP client/server library for GNOME",
);

/**
 * Ambisonic encoding / decoding and binauralization library in C++
 */
export const libspatialaudio = mkPackage(
  nixRaw`pkgs.libspatialaudio`,
  "Ambisonic encoding / decoding and binauralization library in C++",
);

/**
 * Extensible spatial index library in C++
 */
export const libspatialindex = mkPackage(
  nixRaw`pkgs.libspatialindex`,
  "Extensible spatial index library in C++",
);

/**
 * Extensible spatial index library in C++
 */
export const libspatialite = mkPackage(
  nixRaw`pkgs.libspatialite`,
  "Extensible spatial index library in C++",
);

/**
 * C library for audio noise reduction
 */
export const libspecbleach = mkPackage(
  nixRaw`pkgs.libspecbleach`,
  "C library for audio noise reduction",
);

/**
 * PostScript rendering library
 */
export const libspectre = mkPackage(
  nixRaw`pkgs.libspectre`,
  "PostScript rendering library",
);

/**
 * ZX Spectrum input and output support library
 */
export const libspectrum = mkPackage(
  nixRaw`pkgs.libspectrum`,
  "ZX Spectrum input and output support library",
);

/**
 * Spellcheck library for GTK 4
 */
export const libspelling = mkPackage(
  nixRaw`pkgs.libspelling`,
  "Spellcheck library for GTK 4",
);

/**
 * Implementation of the Sender Policy Framework for SMTP authorization (Helsinki Systems fork)
 */
export const libspf2 = mkPackage(
  nixRaw`pkgs.libspf2`,
  "Implementation of the Sender Policy Framework for SMTP authorization (Helsinki Systems fork)",
);

/**
 * A library that simplifies the drawing of beautiful curves
 */
export const libspiro = mkPackage(
  nixRaw`pkgs.libspiro`,
  "A library that simplifies the drawing of beautiful curves",
);

/**
 * Device driver and SDK for 3Dconnexion 3D input devices
 */
export const libspnav = mkPackage(
  nixRaw`pkgs.libspnav`,
  "Device driver and SDK for 3Dconnexion 3D input devices",
);

/**
 * Simple, modern libpng alternative
 */
export const libspng = mkPackage(
  nixRaw`pkgs.libspng`,
  "Simple, modern libpng alternative",
);

/**
 * The next generation SRS library from the original designer of SRS
 */
export const libsrs2 = mkPackage(
  nixRaw`pkgs.libsrs2`,
  "The next generation SRS library from the original designer of SRS",
);

/**
 * SSH client library
 */
export const libssh = mkPackage(
  nixRaw`pkgs.libssh`,
  "SSH client library",
);

/**
 * A client-side C library implementing the SSH2 protocol
 */
export const libssh2 = mkPackage(
  nixRaw`pkgs.libssh2`,
  "A client-side C library implementing the SSH2 protocol",
);

/**
 * Application startup notification and feedback library
 */
export const libstartup_notification = mkPackage(
  nixRaw`pkgs.libstartup_notification`,
  "Application startup notification and feedback library",
);

/**
 * A library that provides cross platforms access to statistics about the running system
 */
export const libstatgrab = mkPackage(
  nixRaw`pkgs.libstatgrab`,
  "A library that provides cross platforms access to statistics about the running system",
);

/**
 * GNU Compiler Collection, version 3.3.6 -- C++ standard library
 */
export const libstdcxx5 = mkPackage(
  nixRaw`pkgs.libstdcxx5`,
  "GNU Compiler Collection, version 3.3.6 -- C++ standard library",
);

/**
 * Snowball Stemming Algorithms
 */
export const libstemmer = mkPackage(
  nixRaw`pkgs.libstemmer`,
  "Snowball Stemming Algorithms",
);

/**
 * Frame rate limiter for Linux/OpenGL
 */
export const libstrangle = mkPackage(
  nixRaw`pkgs.libstrangle`,
  "Frame rate limiter for Linux/OpenGL",
);

/**
 * A library for simple gesture recognition
 */
export const libstroke = mkPackage(
  nixRaw`pkgs.libstroke`,
  "A library for simple gesture recognition",
);

/**
 * A simple, lightweight C library for writing XMPP clients
 */
export const libstrophe = mkPackage(
  nixRaw`pkgs.libstrophe`,
  "A simple, lightweight C library for writing XMPP clients",
);

/**
 * Open Source Lighthouse Tracking System
 */
export const libsurvive = mkPackage(
  nixRaw`pkgs.libsurvive`,
  "Open Source Lighthouse Tracking System",
);

/**
 * Public domain cross-platform semantic versioning in C99
 */
export const libsv = mkPackage(
  nixRaw`pkgs.libsv`,
  "Public domain cross-platform semantic versioning in C99",
);

/**
 * A library for support vector machines
 */
export const libsvm = mkPackage(
  nixRaw`pkgs.libsvm`,
  "A library for support vector machines",
);

/**
 * Static library for Sysprof capture data generation
 */
export const libsysprof_capture = mkPackage(
  nixRaw`pkgs.libsysprof-capture`,
  "Static library for Sysprof capture data generation",
);

/**
 * Statically defined probes development files
 */
export const libsystemtap = mkPackage(
  nixRaw`pkgs.libsystemtap`,
  "Statically defined probes development files",
);

/**
 * A library to implement a test protocol
 */
export const libtap = mkPackage(
  nixRaw`pkgs.libtap`,
  "A library to implement a test protocol",
);

/**
 * C library for manipulating POSIX tar files
 */
export const libtar = mkPackage(
  nixRaw`pkgs.libtar`,
  "C library for manipulating POSIX tar files",
);

/**
 * An ASN.1 library
 */
export const libtasn1 = mkPackage(
  nixRaw`pkgs.libtasn1`,
  "An ASN.1 library",
);

/**
 * API for roguelike games
 */
export const libtcod = mkPackage(
  nixRaw`pkgs.libtcod`,
  "API for roguelike games",
);

/**
 * Simple RFC-complient TELNET implementation as a C library
 */
export const libtelnet = mkPackage(
  nixRaw`pkgs.libtelnet`,
  "Simple RFC-complient TELNET implementation as a C library",
);

/**
 * Terminal keypress reading library
 */
export const libtermkey = mkPackage(
  nixRaw`pkgs.libtermkey`,
  "Terminal keypress reading library",
);

/**
 * Set of Thai language support routines
 */
export const libthai = mkPackage(
  nixRaw`pkgs.libthai`,
  "Set of Thai language support routines",
);

/**
 * Library for Theora, a free and open video compression format
 */
export const libtheora = mkPackage(
  nixRaw`pkgs.libtheora`,
  "Library for Theora, a free and open video compression format",
);

/**
 * A C++ library that provides several classes to manipulate threads
 */
export const libthreadar = mkPackage(
  nixRaw`pkgs.libthreadar`,
  "A C++ library that provides several classes to manipulate threads",
);

/**
 * This library is part of the TiLP framework
 */
export const libticables2 = mkPackage(
  nixRaw`pkgs.libticables2`,
  "This library is part of the TiLP framework",
);

/**
 * This library is part of the TiLP framework
 */
export const libticalcs2 = mkPackage(
  nixRaw`pkgs.libticalcs2`,
  "This library is part of the TiLP framework",
);

/**
 * A terminal interface construction kit
 */
export const libtickit = mkPackage(
  nixRaw`pkgs.libtickit`,
  "A terminal interface construction kit",
);

/**
 * This library is part of the TiLP framework
 */
export const libticonv = mkPackage(
  nixRaw`pkgs.libticonv`,
  "This library is part of the TiLP framework",
);

/**
 * Library and utilities for working with the TIFF image file format
 */
export const libtiff = mkPackage(
  nixRaw`pkgs.libtiff`,
  "Library and utilities for working with the TIFF image file format",
);

/**
 * This library is part of the TiLP framework
 */
export const libtifiles2 = mkPackage(
  nixRaw`pkgs.libtifiles2`,
  "This library is part of the TiLP framework",
);

/**
 * A rendering library for Kate streams using Pango and Cairo
 */
export const libtiger = mkPackage(
  nixRaw`pkgs.libtiger`,
  "A rendering library for Kate streams using Pango and Cairo",
);

/**
 * High-level, multiplatform C++ network packet sniffing and crafting library
 */
export const libtins = mkPackage(
  nixRaw`pkgs.libtins`,
  "High-level, multiplatform C++ network packet sniffing and crafting library",
);

/**
 * The transport-independent Sun RPC implementation (TI-RPC)
 */
export const libtirpc = mkPackage(
  nixRaw`pkgs.libtirpc`,
  "The transport-independent Sun RPC implementation (TI-RPC)",
);

/**
 * A fairly comprehensive, modular and portable cryptographic toolkit
 */
export const libtomcrypt = mkPackage(
  nixRaw`pkgs.libtomcrypt`,
  "A fairly comprehensive, modular and portable cryptographic toolkit",
);

/**
 * A library for integer-based number-theoretic applications
 */
export const libtommath = mkPackage(
  nixRaw`pkgs.libtommath`,
  "A library for integer-based number-theoretic applications",
);

/**
 * GNU Libtool, a generic library support script
 */
export const libtool = mkPackage(
  nixRaw`pkgs.libtool`,
  "GNU Libtool, a generic library support script",
);

/**
 * Generic library support script
 */
export const libtool_1_5 = mkPackage(
  nixRaw`pkgs.libtool_1_5`,
  "Generic library support script",
);

/**
 * GNU Libtool, a generic library support script
 */
export const libtool_2 = mkPackage(
  nixRaw`pkgs.libtool_2`,
  "GNU Libtool, a generic library support script",
);

/**
 * C++ API of the PyTorch machine learning framework
 */
export const libtorch_bin = mkPackage(
  nixRaw`pkgs.libtorch-bin`,
  "C++ API of the PyTorch machine learning framework",
);

/**
 * A C++ BitTorrent implementation focusing on efficiency and scalability
 */
export const libtorrent_rasterbar = mkPackage(
  nixRaw`pkgs.libtorrent-rasterbar`,
  "A C++ BitTorrent implementation focusing on efficiency and scalability",
);

/**
 * A C++ BitTorrent implementation focusing on efficiency and scalability
 */
export const libtorrent_rasterbar_1_2_x = mkPackage(
  nixRaw`pkgs.libtorrent-rasterbar-1_2_x`,
  "A C++ BitTorrent implementation focusing on efficiency and scalability",
);

/**
 * A C++ BitTorrent implementation focusing on efficiency and scalability
 */
export const libtorrent_rasterbar_2_0_x = mkPackage(
  nixRaw`pkgs.libtorrent-rasterbar-2_0_x`,
  "A C++ BitTorrent implementation focusing on efficiency and scalability",
);

/**
 * P2P FOSS instant messaging application aimed to replace Skype
 */
export const libtoxcore = mkPackage(
  nixRaw`pkgs.libtoxcore`,
  "P2P FOSS instant messaging application aimed to replace Skype",
);

/**
 * The libtpms library provides software emulation of a Trusted Platform Module (TPM 1.2 and TPM 2.0)
 */
export const libtpms = mkPackage(
  nixRaw`pkgs.libtpms`,
  "The libtpms library provides software emulation of a Trusted Platform Module (TPM 1.2 and TPM 2.0)",
);

/**
 * Linux kernel trace event library
 */
export const libtraceevent = mkPackage(
  nixRaw`pkgs.libtraceevent`,
  "Linux kernel trace event library",
);

/**
 * Linux kernel trace file system library
 */
export const libtracefs = mkPackage(
  nixRaw`pkgs.libtracefs`,
  "Linux kernel trace file system library",
);

/**
 * A fast, easy and free BitTorrent client
 */
export const libtransmission = mkPackage(
  nixRaw`pkgs.libtransmission`,
  "A fast, easy and free BitTorrent client",
);

/**
 * A fast, easy and free BitTorrent client
 */
export const libtransmission_4 = mkPackage(
  nixRaw`pkgs.libtransmission_4`,
  "A fast, easy and free BitTorrent client",
);

/**
 * Tree ldd with an option to bundle dependencies into a single folder
 */
export const libtree = mkPackage(
  nixRaw`pkgs.libtree`,
  "Tree ldd with an option to bundle dependencies into a single folder",
);

/**
 * Terminal-emulator State Machine
 */
export const libtsm = mkPackage(
  nixRaw`pkgs.libtsm`,
  "Terminal-emulator State Machine",
);

/**
 * A C library and command-line tool that implements the host-side of the U2F protocol
 */
export const libu2f_host = mkPackage(
  nixRaw`pkgs.libu2f-host`,
  "A C library and command-line tool that implements the host-side of the U2F protocol",
);

/**
 * A C library that implements the server-side of the U2F protocol
 */
export const libu2f_server = mkPackage(
  nixRaw`pkgs.libu2f-server`,
  "A C library that implements the server-side of the U2F protocol",
);

/**
 * C utility functions for OpenWrt
 */
export const libubox = mkPackage(
  nixRaw`pkgs.libubox`,
  "C utility functions for OpenWrt",
);

/**
 * C utility functions for OpenWrt
 */
export const libubox_mbedtls = mkPackage(
  nixRaw`pkgs.libubox-mbedtls`,
  "C utility functions for OpenWrt",
);

/**
 * C utility functions for OpenWrt
 */
export const libubox_nossl = mkPackage(
  nixRaw`pkgs.libubox-nossl`,
  "C utility functions for OpenWrt",
);

/**
 * C utility functions for OpenWrt
 */
export const libubox_wolfssl = mkPackage(
  nixRaw`pkgs.libubox-wolfssl`,
  "C utility functions for OpenWrt",
);

/**
 * Mozilla's Universal Charset Detector C/C++ API
 */
export const libuchardet = mkPackage(
  nixRaw`pkgs.libuchardet`,
  "Mozilla's Universal Charset Detector C/C++ API",
);

/**
 * Universal configuration library parser
 */
export const libucl = mkPackage(
  nixRaw`pkgs.libucl`,
  "Universal configuration library parser",
);

/**
 * ucontext implementation featuring glibc-compatible ABI
 */
export const libucontext = mkPackage(
  nixRaw`pkgs.libucontext`,
  "ucontext implementation featuring glibc-compatible ABI",
);

/**
 * Shim to preserve libudev.so.0 compatibility
 */
export const libudev0_shim = mkPackage(
  nixRaw`pkgs.libudev0-shim`,
  "Shim to preserve libudev.so.0 compatibility",
);

/**
 * Daemonless replacement for libudev
 */
export const libudev_zero = mkPackage(
  nixRaw`pkgs.libudev-zero`,
  "Daemonless replacement for libudev",
);

/**
 * UDF reader
 */
export const libudfread = mkPackage(
  nixRaw`pkgs.libudfread`,
  "UDF reader",
);

/**
 * Very small Elliptic Curve Cryptography library
 */
export const libuecc = mkPackage(
  nixRaw`pkgs.libuecc`,
  "Very small Elliptic Curve Cryptography library",
);

/**
 * Lightweight event loop library for Linux epoll() family APIs
 */
export const libuev = mkPackage(
  nixRaw`pkgs.libuev`,
  "Lightweight event loop library for Linux epoll() family APIs",
);

/**
 * Simple and portable (but not inflexible) GUI library in C that uses the native GUI technologies of each platform it supports
 */
export const libui = mkPackage(
  nixRaw`pkgs.libui`,
  "Simple and portable (but not inflexible) GUI library in C that uses the native GUI technologies of each platform it supports",
);

/**
 * Easy-to-use uinput library in C++
 */
export const libuinputplus = mkPackage(
  nixRaw`pkgs.libuinputplus`,
  "Easy-to-use uinput library in C++",
);

/**
 * A C library to provide global keyboard and mouse hooks from userland
 */
export const libuiohook = mkPackage(
  nixRaw`pkgs.libuiohook`,
  "A C library to provide global keyboard and mouse hooks from userland",
);

/**
 * Library to talk to uldaq devices
 */
export const libuldaq = mkPackage(
  nixRaw`pkgs.libuldaq`,
  "Library to talk to uldaq devices",
);

/**
 * A lightweight decompression library with support for rar, tar and zip archives
 */
export const libunarr = mkPackage(
  nixRaw`pkgs.libunarr`,
  "A lightweight decompression library with support for rar, tar and zip archives",
);

/**
 * Implementation of line breaking and word breaking algorithms as in the Unicode standard
 */
export const libunibreak = mkPackage(
  nixRaw`pkgs.libunibreak`,
  "Implementation of line breaking and word breaking algorithms as in the Unicode standard",
);

/**
 * A Library of Unicode names and annotation data
 */
export const libuninameslist = mkPackage(
  nixRaw`pkgs.libuninameslist`,
  "A Library of Unicode names and annotation data",
);

/**
 * A library for writing single instance applications
 */
export const libunique = mkPackage(
  nixRaw`pkgs.libunique`,
  "A library for writing single instance applications",
);

/**
 * A library for writing single instance applications
 */
export const libunique3 = mkPackage(
  nixRaw`pkgs.libunique3`,
  "A library for writing single instance applications",
);

/**
 * Unicode string library
 */
export const libunistring = mkPackage(
  nixRaw`pkgs.libunistring`,
  "Unicode string library",
);

/**
 * A library for instrumenting and integrating with all aspects of the Unity shell
 */
export const libunity = mkPackage(
  nixRaw`pkgs.libunity`,
  "A library for instrumenting and integrating with all aspects of the Unity shell",
);

/**
 * A portable and efficient API to determine the call-chain of a program
 */
export const libunwind = mkPackage(
  nixRaw`pkgs.libunwind`,
  "A portable and efficient API to determine the call-chain of a program",
);

/**
 * An open source UPnP development kit for Linux
 */
export const libupnp = mkPackage(
  nixRaw`pkgs.libupnp`,
  "An open source UPnP development kit for Linux",
);

/**
 * Userspace RCU (read-copy-update) library
 */
export const liburcu = mkPackage(
  nixRaw`pkgs.liburcu`,
  "Userspace RCU (read-copy-update) library",
);

/**
 * Userspace library for the Linux io_uring API
 */
export const liburing = mkPackage(
  nixRaw`pkgs.liburing`,
  "Userspace library for the Linux io_uring API",
);

/**
 * cross-platform user-mode USB device library
 */
export const libusb1 = mkPackage(
  nixRaw`pkgs.libusb1`,
  "cross-platform user-mode USB device library",
);

/**
 * cross-platform user-mode USB device library
 */
export const libusb_compat_0_1 = mkPackage(
  nixRaw`pkgs.libusb-compat-0_1`,
  "cross-platform user-mode USB device library",
);

/**
 * C library encapsulating the kernel USB gadget-configfs userspace API functionality
 */
export const libusbgx = mkPackage(
  nixRaw`pkgs.libusbgx`,
  "C library encapsulating the kernel USB gadget-configfs userspace API functionality",
);

/**
 * A client library to multiplex connections from and to iOS devices
 */
export const libusbmuxd = mkPackage(
  nixRaw`pkgs.libusbmuxd`,
  "A client library to multiplex connections from and to iOS devices",
);

/**
 * Library for communicating with devices connected via the USB bridge on LPC-Link2 and MCU-Link debug probes on supported NXP microcontroller evaluation boards
 */
export const libusbsio = mkPackage(
  nixRaw`pkgs.libusbsio`,
  "Library for communicating with devices connected via the USB bridge on LPC-Link2 and MCU-Link debug probes on supported NXP microcontroller evaluation boards",
);

/**
 * Interface for terminal emulators such as screen and xterm to record user sessions to utmp and wtmp files
 */
export const libutempter = mkPackage(
  nixRaw`pkgs.libutempter`,
  "Interface for terminal emulators such as screen and xterm to record user sessions to utmp and wtmp files",
);

/**
 * uTorrent Transport Protocol library
 */
export const libutp = mkPackage(
  nixRaw`pkgs.libutp`,
  "uTorrent Transport Protocol library",
);

/**
 * uTorrent Transport Protocol library
 */
export const libutp_3_4 = mkPackage(
  nixRaw`pkgs.libutp_3_4`,
  "uTorrent Transport Protocol library",
);

/**
 * A set of system utilities for Linux
 */
export const libuuid = mkPackage(
  nixRaw`pkgs.libuuid`,
  "A set of system utilities for Linux",
);

/**
 * A multi-platform support library with a focus on asynchronous I/O
 */
export const libuv = mkPackage(
  nixRaw`pkgs.libuv`,
  "A multi-platform support library with a focus on asynchronous I/O",
);

/**
 * Cross-platform library for USB video devices
 */
export const libuvc = mkPackage(
  nixRaw`pkgs.libuvc`,
  "Cross-platform library for USB video devices",
);

/**
 * V4L utils and libv4l, provide common image formats regardless of the v4l device
 */
export const libv4l = mkPackage(
  nixRaw`pkgs.libv4l`,
  "V4L utils and libv4l, provide common image formats regardless of the v4l device",
);

/**
 * An implementation for VA-API (Video Acceleration API)
 */
export const libva = mkPackage(
  nixRaw`pkgs.libva`,
  "An implementation for VA-API (Video Acceleration API)",
);

/**
 * VAAPI library: Video Acceleration API
 */
export const libva1 = mkPackage(
  nixRaw`pkgs.libva1`,
  "VAAPI library: Video Acceleration API",
);

/**
 * VAAPI library: Video Acceleration API
 */
export const libva1_minimal = mkPackage(
  nixRaw`pkgs.libva1-minimal`,
  "VAAPI library: Video Acceleration API",
);

/**
 * An implementation for VA-API (Video Acceleration API)
 */
export const libva_minimal = mkPackage(
  nixRaw`pkgs.libva-minimal`,
  "An implementation for VA-API (Video Acceleration API)",
);

/**
 * A collection of utilities and examples for VA-API
 */
export const libva_utils = mkPackage(
  nixRaw`pkgs.libva-utils`,
  "A collection of utilities and examples for VA-API",
);

/**
 * C implementation of the Varlink protocol and command line tool
 */
export const libvarlink = mkPackage(
  nixRaw`pkgs.libvarlink`,
  "C implementation of the Varlink protocol and command line tool",
);

/**
 * Library to use the Video Decode and Presentation API for Unix (VDPAU)
 */
export const libvdpau = mkPackage(
  nixRaw`pkgs.libvdpau`,
  "Library to use the Video Decode and Presentation API for Unix (VDPAU)",
);

/**
 * VDPAU driver with OpenGL/VAAPI backend
 */
export const libvdpau_va_gl = mkPackage(
  nixRaw`pkgs.libvdpau-va-gl`,
  "VDPAU driver with OpenGL/VAAPI backend",
);

/**
 * Portable C library of density functionals with van der Waals interactions for density functional theory
 */
export const libvdwxc = mkPackage(
  nixRaw`pkgs.libvdwxc`,
  "Portable C library of density functionals with van der Waals interactions for density functional theory",
);

/**
 * Advanced version string comparison library
 */
export const libversion = mkPackage(
  nixRaw`pkgs.libversion`,
  "Advanced version string comparison library",
);

/**
 * Asynchronous event loop abstraction library
 */
export const libverto = mkPackage(
  nixRaw`pkgs.libverto`,
  "Asynchronous event loop abstraction library",
);

/**
 * More modular rewrite of most components from VGMPlay
 */
export const libvgm = mkPackage(
  nixRaw`pkgs.libvgm`,
  "More modular rewrite of most components from VGMPlay",
);

/**
 * Simple window creation and management facilities for the console
 */
export const libviper = mkPackage(
  nixRaw`pkgs.libviper`,
  "Simple window creation and management facilities for the console",
);

/**
 * The ViPER FX core
 */
export const libviperfx = mkPackage(
  nixRaw`pkgs.libviperfx`,
  "The ViPER FX core",
);

/**
 * A toolkit to interact with the virtualization capabilities of recent versions of Linux and other OSes
 */
export const libvirt = mkPackage(
  nixRaw`pkgs.libvirt`,
  "A toolkit to interact with the virtualization capabilities of recent versions of Linux and other OSes",
);

/**
 * Library for working with virtual machines
 */
export const libvirt_glib = mkPackage(
  nixRaw`pkgs.libvirt-glib`,
  "Library for working with virtual machines",
);

/**
 * A library providing ability to interpret and import visio diagrams into various applications
 */
export const libvisio = mkPackage(
  nixRaw`pkgs.libvisio`,
  "A library providing ability to interpret and import visio diagrams into various applications",
);

/**
 * Library and tools to convert Microsoft Visio documents (VSS and VSD) to SVG
 */
export const libvisio2svg = mkPackage(
  nixRaw`pkgs.libvisio2svg`,
  "Library and tools to convert Microsoft Visio documents (VSS and VSD) to SVG",
);

/**
 * An abstraction library for audio visualisations
 */
export const libvisual = mkPackage(
  nixRaw`pkgs.libvisual`,
  "An abstraction library for audio visualisations",
);

/**
 * Cross-platform media player and streaming server
 */
export const libvlc = mkPackage(
  nixRaw`pkgs.libvlc`,
  "Cross-platform media player and streaming server",
);

/**
 * Perceptual video quality assessment based on multi-method fusion (VMAF)
 */
export const libvmaf = mkPackage(
  nixRaw`pkgs.libvmaf`,
  "Perceptual video quality assessment based on multi-method fusion (VMAF)",
);

/**
 * A C library for virtual machine introspection
 */
export const libvmi = mkPackage(
  nixRaw`pkgs.libvmi`,
  "A C library for virtual machine introspection",
);

/**
 * VNC server library
 */
export const libvncserver = mkPackage(
  nixRaw`pkgs.libvncserver`,
  "VNC server library",
);

/**
 * Finnish language processing library
 */
export const libvoikko = mkPackage(
  nixRaw`pkgs.libvoikko`,
  "Finnish language processing library",
);

export const libvolume_id = mkPackage(
  nixRaw`pkgs.libvolume_id`,
  "",
);

/**
 * Vorbis audio compression reference implementation
 */
export const libvorbis = mkPackage(
  nixRaw`pkgs.libvorbis`,
  "Vorbis audio compression reference implementation",
);

/**
 * Library for Voronoi integration of electron densities
 */
export const libvori = mkPackage(
  nixRaw`pkgs.libvori`,
  "Library for Voronoi integration of electron densities",
);

/**
 * WebM VP8/VP9 codec SDK
 */
export const libvpx = mkPackage(
  nixRaw`pkgs.libvpx`,
  "WebM VP8/VP9 codec SDK",
);

/**
 * WebM VP8/VP9 codec SDK
 */
export const libvpx_1_8 = mkPackage(
  nixRaw`pkgs.libvpx_1_8`,
  "WebM VP8/VP9 codec SDK",
);

/**
 * Terminal emulator library to mimic both vt100 and rxvt
 */
export const libvterm = mkPackage(
  nixRaw`pkgs.libvterm`,
  "Terminal emulator library to mimic both vt100 and rxvt",
);

/**
 * VT220/xterm/ECMA-48 terminal emulator library
 */
export const libvterm_neovim = mkPackage(
  nixRaw`pkgs.libvterm-neovim`,
  "VT220/xterm/ECMA-48 terminal emulator library",
);

/**
 * Libraries, configuration, and diagnostic tools for Wacom tablets running under Linux
 */
export const libwacom = mkPackage(
  nixRaw`pkgs.libwacom`,
  "Libraries, configuration, and diagnostic tools for Wacom tablets running under Linux",
);

/**
 * Libraries, configuration, and diagnostic tools for Wacom tablets running under Linux
 */
export const libwacom_surface = mkPackage(
  nixRaw`pkgs.libwacom-surface`,
  "Libraries, configuration, and diagnostic tools for Wacom tablets running under Linux",
);

/**
 * The WBXML Library (aka libwbxml) contains a library and its associated tools to Parse, Encode and Handle WBXML documents
 */
export const libwbxml = mkPackage(
  nixRaw`pkgs.libwbxml`,
  "The WBXML Library (aka libwbxml) contains a library and its associated tools to Parse, Encode and Handle WBXML documents",
);

/**
 * The webcam-tools package
 */
export const libwebcam = mkPackage(
  nixRaw`pkgs.libwebcam`,
  "The webcam-tools package",
);

/**
 * Tools and library for the WebP image format
 */
export const libwebp = mkPackage(
  nixRaw`pkgs.libwebp`,
  "Tools and library for the WebP image format",
);

/**
 * Light, portable C library for websockets
 */
export const libwebsockets = mkPackage(
  nixRaw`pkgs.libwebsockets`,
  "Light, portable C library for websockets",
);

/**
 * Library to report hypervisor information from inside a VM
 */
export const libwhereami = mkPackage(
  nixRaw`pkgs.libwhereami`,
  "Library to report hypervisor information from inside a VM",
);

/**
 * Like `which`, for dynamic libraries
 */
export const libwhich = mkPackage(
  nixRaw`pkgs.libwhich`,
  "Like `which`, for dynamic libraries",
);

/**
 * WMF library from wvWare
 */
export const libwmf = mkPackage(
  nixRaw`pkgs.libwmf`,
  "WMF library from wvWare",
);

/**
 * Library to manage X windows and workspaces (via pagers, tasklists, etc.)
 */
export const libwnck = mkPackage(
  nixRaw`pkgs.libwnck`,
  "Library to manage X windows and workspaces (via pagers, tasklists, etc.)",
);

/**
 * A library for creating task lists and pagers
 */
export const libwnck2 = mkPackage(
  nixRaw`pkgs.libwnck2`,
  "A library for creating task lists and pagers",
);

/**
 * A library for importing and exporting WordPerfect documents
 */
export const libwpd = mkPackage(
  nixRaw`pkgs.libwpd`,
  "A library for importing and exporting WordPerfect documents",
);

/**
 * Library for importing WordPerfect documents
 */
export const libwpd_08 = mkPackage(
  nixRaw`pkgs.libwpd_08`,
  "Library for importing WordPerfect documents",
);

/**
 * General-purpose library for WPE WebKit
 */
export const libwpe = mkPackage(
  nixRaw`pkgs.libwpe`,
  "General-purpose library for WPE WebKit",
);

/**
 * Freedesktop.org backend for WPE WebKit
 */
export const libwpe_fdo = mkPackage(
  nixRaw`pkgs.libwpe-fdo`,
  "Freedesktop.org backend for WPE WebKit",
);

/**
 * C++ library to parse WPG
 */
export const libwpg = mkPackage(
  nixRaw`pkgs.libwpg`,
  "C++ library to parse WPG",
);

/**
 * Microsoft Works document format import filter library
 */
export const libwps = mkPackage(
  nixRaw`pkgs.libwps`,
  "Microsoft Works document format import filter library",
);

/**
 * Simplistic SDL2 GUI framework in early developement
 */
export const libwtk_sdl2 = mkPackage(
  nixRaw`pkgs.libwtk-sdl2`,
  "Simplistic SDL2 GUI framework in early developement",
);

/**
 * Real-mode x86 code emulator
 */
export const libx86 = mkPackage(
  nixRaw`pkgs.libx86`,
  "Real-mode x86 code emulator",
);

/**
 * x86 emulation library
 */
export const libx86emu = mkPackage(
  nixRaw`pkgs.libx86emu`,
  "x86 emulation library",
);

/**
 * Library of exchange-correlation functionals for density-functional theory
 */
export const libxc = mkPackage(
  nixRaw`pkgs.libxc`,
  "Library of exchange-correlation functionals for density-functional theory",
);

/**
 * NX compression library
 */
export const libxcomp = mkPackage(
  nixRaw`pkgs.libxcomp`,
  "NX compression library",
);

/**
 * Extended crypt library for descrypt, md5crypt, bcrypt, and others
 */
export const libxcrypt = mkPackage(
  nixRaw`pkgs.libxcrypt`,
  "Extended crypt library for descrypt, md5crypt, bcrypt, and others",
);

/**
 * Extended crypt library for descrypt, md5crypt, bcrypt, and others
 */
export const libxcrypt_legacy = mkPackage(
  nixRaw`pkgs.libxcrypt-legacy`,
  "Extended crypt library for descrypt, md5crypt, bcrypt, and others",
);

/**
 * Implementation of the XDG Base Directory specification
 */
export const libxdg_basedir = mkPackage(
  nixRaw`pkgs.libxdg_basedir`,
  "Implementation of the XDG Base Directory specification",
);

/**
 * SGI XFS utilities
 */
export const libxfs = mkPackage(
  nixRaw`pkgs.libxfs`,
  "SGI XFS utilities",
);

/**
 * Library to load and write XISF format from PixInsight
 */
export const libxisf = mkPackage(
  nixRaw`pkgs.libxisf`,
  "Library to load and write XISF format from PixInsight",
);

/**
 * A library to handle keyboard descriptions
 */
export const libxkbcommon = mkPackage(
  nixRaw`pkgs.libxkbcommon`,
  "A library to handle keyboard descriptions",
);

/**
 * A library to handle keyboard descriptions
 */
export const libxkbcommon_8 = mkPackage(
  nixRaw`pkgs.libxkbcommon_8`,
  "A library to handle keyboard descriptions",
);

/**
 * Library providing high-level API for X Keyboard Extension known as XKB
 */
export const libxklavier = mkPackage(
  nixRaw`pkgs.libxklavier`,
  "Library providing high-level API for X Keyboard Extension known as XKB",
);

/**
 * A library for parsing Excel files
 */
export const libxl = mkPackage(
  nixRaw`pkgs.libxl`,
  "A library for parsing Excel files",
);

/**
 * Extract Cell Data From Excel xls files
 */
export const libxls = mkPackage(
  nixRaw`pkgs.libxls`,
  "Extract Cell Data From Excel xls files",
);

/**
 * C library for creating Excel XLSX files
 */
export const libxlsxwriter = mkPackage(
  nixRaw`pkgs.libxlsxwriter`,
  "C library for creating Excel XLSX files",
);

/**
 * Library for rasterizing 2-D vector graphics
 */
export const libxmi = mkPackage(
  nixRaw`pkgs.libxmi`,
  "Library for rasterizing 2-D vector graphics",
);

/**
 * XML parsing library for C
 */
export const libxml2 = mkPackage(
  nixRaw`pkgs.libxml2`,
  "XML parsing library for C",
);

export const libxml2Python = mkPackage(
  nixRaw`pkgs.libxml2Python`,
  "",
);

/**
 * A library to help create and query binary XML blobs
 */
export const libxmlb = mkPackage(
  nixRaw`pkgs.libxmlb`,
  "A library to help create and query binary XML blobs",
);

/**
 * C++ wrapper for the libxml2 XML parser library
 */
export const libxmlxx = mkPackage(
  nixRaw`pkgs.libxmlxx`,
  "C++ wrapper for the libxml2 XML parser library",
);

/**
 * C++ wrapper for the libxml2 XML parser library, version 3
 */
export const libxmlxx3 = mkPackage(
  nixRaw`pkgs.libxmlxx3`,
  "C++ wrapper for the libxml2 XML parser library, version 3",
);

/**
 * Extended module player library
 */
export const libxmp = mkPackage(
  nixRaw`pkgs.libxmp`,
  "Extended module player library",
);

/**
 * C library for managing typed memory blocks and Python container module
 */
export const libxnd = mkPackage(
  nixRaw`pkgs.libxnd`,
  "C library for managing typed memory blocks and Python container module",
);

export const libxpdf = mkPackage(
  nixRaw`pkgs.libxpdf`,
  "",
);

/**
 * Playlist parsing library for xplayer
 */
export const libxplayer_plparser = mkPackage(
  nixRaw`pkgs.libxplayer-plparser`,
  "Playlist parsing library for xplayer",
);

/**
 * A C library and tools to do XSL transformations
 */
export const libxslt = mkPackage(
  nixRaw`pkgs.libxslt`,
  "A C library and tools to do XSL transformations",
);

/**
 * Library targeting Intel Architecture for specialized dense and sparse matrix operations, and deep learning primitives
 */
export const libxsmm = mkPackage(
  nixRaw`pkgs.libxsmm`,
  "Library targeting Intel Architecture for specialized dense and sparse matrix operations, and deep learning primitives",
);

/**
 * A free, open source raytracer
 */
export const libyafaray = mkPackage(
  nixRaw`pkgs.libyafaray`,
  "A free, open source raytracer",
);

/**
 * A YAML 1.1 parser and emitter written in C
 */
export const libyaml = mkPackage(
  nixRaw`pkgs.libyaml`,
  "A YAML 1.1 parser and emitter written in C",
);

/**
 * YANG data modelling language parser and toolkit
 */
export const libyang = mkPackage(
  nixRaw`pkgs.libyang`,
  "YANG data modelling language parser and toolkit",
);

/**
 * Yubikey C client library
 */
export const libykclient = mkPackage(
  nixRaw`pkgs.libykclient`,
  "Yubikey C client library",
);

/**
 * A C library to interact with the CCID-part of the Yubikey NEO
 */
export const libykneomgr = mkPackage(
  nixRaw`pkgs.libykneomgr`,
  "A C library to interact with the CCID-part of the Yubikey NEO",
);

/**
 * Yeraze's TNEF Stream Reader - for winmail.dat files
 */
export const libytnef = mkPackage(
  nixRaw`pkgs.libytnef`,
  "Yeraze's TNEF Stream Reader - for winmail.dat files",
);

/**
 * C library for manipulating Yubico YubiKey One-Time Passwords (OTPs)
 */
export const libyubikey = mkPackage(
  nixRaw`pkgs.libyubikey`,
  "C library for manipulating Yubico YubiKey One-Time Passwords (OTPs)",
);

/**
 * Open source project that includes YUV scaling and conversion functionality
 */
export const libyuv = mkPackage(
  nixRaw`pkgs.libyuv`,
  "Open source project that includes YUV scaling and conversion functionality",
);

/**
 * A clean fork of zlib
 */
export const libz = mkPackage(
  nixRaw`pkgs.libz`,
  "A clean fork of zlib",
);

/**
 * GObject wrapper for the SkyDrive and Hotmail REST APIs
 */
export const libzapojit = mkPackage(
  nixRaw`pkgs.libzapojit`,
  "GObject wrapper for the SkyDrive and Hotmail REST APIs",
);

/**
 * ZBC device manipulation library
 */
export const libzbc = mkPackage(
  nixRaw`pkgs.libzbc`,
  "ZBC device manipulation library",
);

/**
 * Zoned block device manipulation library and tools
 */
export const libzbd = mkPackage(
  nixRaw`pkgs.libzbd`,
  "Zoned block device manipulation library and tools",
);

/**
 * A small, easy to use Open Source Database Connection Pool Library
 */
export const libzdb = mkPackage(
  nixRaw`pkgs.libzdb`,
  "A small, easy to use Open Source Database Connection Pool Library",
);

/**
 * Shared library for libmediainfo and mediainfo
 */
export const libzen = mkPackage(
  nixRaw`pkgs.libzen`,
  "Shared library for libmediainfo and mediainfo",
);

/**
 * Reference implementation of the ZIM specification
 */
export const libzim = mkPackage(
  nixRaw`pkgs.libzim`,
  "Reference implementation of the ZIM specification",
);

/**
 * A C library for reading, creating and modifying zip archives
 */
export const libzip = mkPackage(
  nixRaw`pkgs.libzip`,
  "A C library for reading, creating and modifying zip archives",
);

/**
 * A library that parses the file format of Zoner Callisto/Draw documents
 */
export const libzmf = mkPackage(
  nixRaw`pkgs.libzmf`,
  "A library that parses the file format of Zoner Callisto/Draw documents",
);

/**
 * Library for ZStandard random access
 */
export const libzra = mkPackage(
  nixRaw`pkgs.libzra`,
  "Library for ZStandard random access",
);

/**
 * Print license based on selection and user options
 */
export const lice = mkPackage(
  nixRaw`pkgs.lice`,
  "Print license based on selection and user options",
);

/**
 * Command-line tool to easily add license to your project
 */
export const license_cli = mkPackage(
  nixRaw`pkgs.license-cli`,
  "Command-line tool to easily add license to your project",
);

/**
 * Find licenses for your project's dependencies
 */
export const license_finder = mkPackage(
  nixRaw`pkgs.license_finder`,
  "Find licenses for your project's dependencies",
);

/**
 * Command-line tool for generating license files
 */
export const license_generator = mkPackage(
  nixRaw`pkgs.license-generator`,
  "Command-line tool for generating license files",
);

/**
 * Utility that provides an API and CLI to identify licenses and legal terms
 */
export const license_scanner = mkPackage(
  nixRaw`pkgs.license-scanner`,
  "Utility that provides an API and CLI to identify licenses and legal terms",
);

/**
 * A License Classifier
 */
export const licenseclassifier = mkPackage(
  nixRaw`pkgs.licenseclassifier`,
  "A License Classifier",
);

/**
 * A Ruby Gem to detect under what license a project is distributed
 */
export const licensee = mkPackage(
  nixRaw`pkgs.licensee`,
  "A Ruby Gem to detect under what license a project is distributed",
);

/**
 * Write licenses to stdout
 */
export const licensor = mkPackage(
  nixRaw`pkgs.licensor`,
  "Write licenses to stdout",
);

/**
 * A Usenet/BitTorrent music downloader
 */
export const lidarr = mkPackage(
  nixRaw`pkgs.lidarr`,
  "A Usenet/BitTorrent music downloader",
);

/**
 * A Computer algebra package for Lie group computations
 */
export const lie = mkPackage(
  nixRaw`pkgs.lie`,
  "A Computer algebra package for Lie group computations",
);

/**
 * Fast email-fetching and two-way tag synchronization between notmuch and GMail
 */
export const lieer = mkPackage(
  nixRaw`pkgs.lieer`,
  "Fast email-fetching and two-way tag synchronization between notmuch and GMail",
);

/**
 * Library to Instrument Executable Formats
 */
export const lief = mkPackage(
  nixRaw`pkgs.lief`,
  "Library to Instrument Executable Formats",
);

/**
 * A daemon for responding to AWS AutoScaling Lifecycle Hooks
 */
export const lifecycled = mkPackage(
  nixRaw`pkgs.lifecycled`,
  "A daemon for responding to AWS AutoScaling Lifecycle Hooks",
);

/**
 * Genealogy tool with ncurses interface
 */
export const lifelines = mkPackage(
  nixRaw`pkgs.lifelines`,
  "Genealogy tool with ncurses interface",
);

/**
 * Lifeograph is an off-line and private journal and note taking application
 */
export const lifeograph = mkPackage(
  nixRaw`pkgs.lifeograph`,
  "Lifeograph is an off-line and private journal and note taking application",
);

/**
 * A GTK-based news feed aggregator
 */
export const liferea = mkPackage(
  nixRaw`pkgs.liferea`,
  "A GTK-based news feed aggregator",
);

/**
 * GNU/Linux application to control backlights
 */
export const light = mkPackage(
  nixRaw`pkgs.light`,
  "GNU/Linux application to control backlights",
);

/**
 * Layout, editing, and control software for your laser cutter
 */
export const lightburn = mkPackage(
  nixRaw`pkgs.lightburn`,
  "Layout, editing, and control software for your laser cutter",
);

/**
 * A cross-desktop display manager
 */
export const lightdm = mkPackage(
  nixRaw`pkgs.lightdm`,
  "A cross-desktop display manager",
);

        /**
         * A fork of pantheon greeter that positions elements in a central and
vertigal manner and adds a blur effect to the background

         */
export const lightdm_enso_os_greeter = mkPackage(
  nixRaw`pkgs.lightdm-enso-os-greeter`,
  "A fork of pantheon greeter that positions elements in a central and\nvertigal manner and adds a blur effect to the background\n",
);

/**
 * A GTK greeter for LightDM
 */
export const lightdm_gtk_greeter = mkPackage(
  nixRaw`pkgs.lightdm-gtk-greeter`,
  "A GTK greeter for LightDM",
);

/**
 * A minimal, configurable, single-user GTK3 LightDM greeter
 */
export const lightdm_mini_greeter = mkPackage(
  nixRaw`pkgs.lightdm-mini-greeter`,
  "A minimal, configurable, single-user GTK3 LightDM greeter",
);

/**
 * A simple log in screen for use on touch screens
 */
export const lightdm_mobile_greeter = mkPackage(
  nixRaw`pkgs.lightdm-mobile-greeter`,
  "A simple log in screen for use on touch screens",
);

/**
 * A cross-desktop display manager
 */
export const lightdm_qt = mkPackage(
  nixRaw`pkgs.lightdm_qt`,
  "A cross-desktop display manager",
);

/**
 * A slick-looking LightDM greeter
 */
export const lightdm_slick_greeter = mkPackage(
  nixRaw`pkgs.lightdm-slick-greeter`,
  "A slick-looking LightDM greeter",
);

/**
 * A tiny multi user lightdm greeter
 */
export const lightdm_tiny_greeter = mkPackage(
  nixRaw`pkgs.lightdm-tiny-greeter`,
  "A tiny multi user lightdm greeter",
);

/**
 * LightGBM is a gradient boosting framework that uses tree based learning algorithms.
 */
export const lightgbm = mkPackage(
  nixRaw`pkgs.lightgbm`,
  "LightGBM is a gradient boosting framework that uses tree based learning algorithms.",
);

/**
 * Ethereum consensus client in Rust
 */
export const lighthouse = mkPackage(
  nixRaw`pkgs.lighthouse`,
  "Ethereum consensus client in Rust",
);

/**
 * VR Lighthouse power state management
 */
export const lighthouse_steamvr = mkPackage(
  nixRaw`pkgs.lighthouse-steamvr`,
  "VR Lighthouse power state management",
);

/**
 * A simple session-locker for LightDM
 */
export const lightlocker = mkPackage(
  nixRaw`pkgs.lightlocker`,
  "A simple session-locker for LightDM",
);

/**
 * A fork of the Lightly breeze theme style that aims to be visually modern and minimalistic
 */
export const lightly_boehs = mkPackage(
  nixRaw`pkgs.lightly-boehs`,
  "A fork of the Lightly breeze theme style that aims to be visually modern and minimalistic",
);

/**
 * A fork of breeze theme style that aims to be visually modern and minimalistic
 */
export const lightly_qt = mkPackage(
  nixRaw`pkgs.lightly-qt`,
  "A fork of breeze theme style that aims to be visually modern and minimalistic",
);

/**
 * Run-time code generation library
 */
export const lightning = mkPackage(
  nixRaw`pkgs.lightning`,
  "Run-time code generation library",
);

/**
 * Lightning Loop Client
 */
export const lightning_loop = mkPackage(
  nixRaw`pkgs.lightning-loop`,
  "Lightning Loop Client",
);

/**
 * Lightning Pool Client
 */
export const lightning_pool = mkPackage(
  nixRaw`pkgs.lightning-pool`,
  "Lightning Pool Client",
);

/**
 * Extremely fast CSS parser, transformer, and minifier written in Rust
 */
export const lightningcss = mkPackage(
  nixRaw`pkgs.lightningcss`,
  "Extremely fast CSS parser, transformer, and minifier written in Rust",
);

/**
 * Open source Flash Player implementation
 */
export const lightspark = mkPackage(
  nixRaw`pkgs.lightspark`,
  "Open source Flash Player implementation",
);

/**
 * Lightweight high-performance web server
 */
export const lighttpd = mkPackage(
  nixRaw`pkgs.lighttpd`,
  "Lightweight high-performance web server",
);

/**
 * MacBook automatic light sensor daemon
 */
export const lightum = mkPackage(
  nixRaw`pkgs.lightum`,
  "MacBook automatic light sensor daemon",
);

/**
 * A backend service that provides a bandwidth-efficient interface to the Zcash blockchain
 */
export const lightwalletd = mkPackage(
  nixRaw`pkgs.lightwalletd`,
  "A backend service that provides a bandwidth-efficient interface to the Zcash blockchain",
);

/**
 * Professional Non-Linear Video Editor
 */
export const lightworks = mkPackage(
  nixRaw`pkgs.lightworks`,
  "Professional Non-Linear Video Editor",
);

/**
 * A friendly Smart Contract Language for Tezos
 */
export const ligo = mkPackage(
  nixRaw`pkgs.ligo`,
  "A friendly Smart Contract Language for Tezos",
);

/**
 * A tunneling/pivoting tool that uses a TUN interface
 */
export const ligolo_ng = mkPackage(
  nixRaw`pkgs.ligolo-ng`,
  "A tunneling/pivoting tool that uses a TUN interface",
);

/**
 * Offline auditing of Active Directory passwords
 */
export const lil_pwny = mkPackage(
  nixRaw`pkgs.lil-pwny`,
  "Offline auditing of Active Directory passwords",
);

/**
 * Linux bootloader
 */
export const lilo = mkPackage(
  nixRaw`pkgs.lilo`,
  "Linux bootloader",
);

/**
 * A C library to make the use of LV2 plugins
 */
export const lilv = mkPackage(
  nixRaw`pkgs.lilv`,
  "A C library to make the use of LV2 plugins",
);

/**
 * Music typesetting system
 */
export const lilypond = mkPackage(
  nixRaw`pkgs.lilypond`,
  "Music typesetting system",
);

/**
 * Music typesetting system
 */
export const lilypond_unstable = mkPackage(
  nixRaw`pkgs.lilypond-unstable`,
  "Music typesetting system",
);

/**
 * Music typesetting system
 */
export const lilypond_unstable_with_fonts = mkPackage(
  nixRaw`pkgs.lilypond-unstable-with-fonts`,
  "Music typesetting system",
);

/**
 * Music typesetting system
 */
export const lilypond_with_fonts = mkPackage(
  nixRaw`pkgs.lilypond-with-fonts`,
  "Music typesetting system",
);

/**
 * Linux virtual machines (on macOS, in most cases)
 */
export const lima = mkPackage(
  nixRaw`pkgs.lima`,
  "Linux virtual machines (on macOS, in most cases)",
);

/**
 * Linux virtual machines (on macOS, in most cases)
 */
export const lima_bin = mkPackage(
  nixRaw`pkgs.lima-bin`,
  "Linux virtual machines (on macOS, in most cases)",
);

/**
 * End-to-end encryption library for instant messaging. Part of the Linphone project.
 */
export const lime = mkPackage(
  nixRaw`pkgs.lime`,
  "End-to-end encryption library for instant messaging. Part of the Linphone project.",
);

/**
 * CLI for Limes
 */
export const limesctl = mkPackage(
  nixRaw`pkgs.limesctl`,
  "CLI for Limes",
);

/**
 * Driver and GUI for LMS7002M-based SDR platforms
 */
export const limesuite = mkPackage(
  nixRaw`pkgs.limesuite`,
  "Driver and GUI for LMS7002M-based SDR platforms",
);

/**
 * Open source survey application
 */
export const limesurvey = mkPackage(
  nixRaw`pkgs.limesurvey`,
  "Open source survey application",
);

/**
 * A tool to throttle the CPU usage of programs
 */
export const limitcpu = mkPackage(
  nixRaw`pkgs.limitcpu`,
  "A tool to throttle the CPU usage of programs",
);

/**
 * C++ library for exact, high-performance linear algebra
 */
export const linbox = mkPackage(
  nixRaw`pkgs.linbox`,
  "C++ library for exact, high-performance linear algebra",
);

/**
 * City simulation game
 */
export const lincity = mkPackage(
  nixRaw`pkgs.lincity`,
  "City simulation game",
);

/**
 * City building game
 */
export const lincity_ng = mkPackage(
  nixRaw`pkgs.lincity_ng`,
  "City building game",
);

/**
 * A digital version of Frederic Goudy’s Deepdene
 */
export const linden_hill = mkPackage(
  nixRaw`pkgs.linden-hill`,
  "A digital version of Frederic Goudy’s Deepdene",
);

/**
 * Replace Font Awesome with modern line icons
 */
export const line_awesome = mkPackage(
  nixRaw`pkgs.line-awesome`,
  "Replace Font Awesome with modern line icons",
);

/**
 * Crisp Line Icons by Perxis
 */
export const linearicons_free = mkPackage(
  nixRaw`pkgs.linearicons-free`,
  "Crisp Line Icons by Perxis",
);

/**
 * A minimal, zero-config, BSD licensed, readline replacement
 */
export const linenoise = mkPackage(
  nixRaw`pkgs.linenoise`,
  "A minimal, zero-config, BSD licensed, readline replacement",
);

/**
 * A small, portable GNU readline replacement for Linux, Windows and MacOS which is capable of handling UTF-8 characters
 */
export const linenoise_ng = mkPackage(
  nixRaw`pkgs.linenoise-ng`,
  "A small, portable GNU readline replacement for Linux, Windows and MacOS which is capable of handling UTF-8 characters",
);

/**
 * Shell utility to interactively select lines from stdin
 */
export const lineselect = mkPackage(
  nixRaw`pkgs.lineselect`,
  "Shell utility to interactively select lines from stdin",
);

/**
 * Fast SAT solver
 */
export const lingeling = mkPackage(
  nixRaw`pkgs.lingeling`,
  "Fast SAT solver",
);

/**
 * Not a Guitar-Only tuner
 */
export const lingot = mkPackage(
  nixRaw`pkgs.lingot`,
  "Not a Guitar-Only tuner",
);

/**
 * Polyglot coordination language
 */
export const lingua_franca = mkPackage(
  nixRaw`pkgs.lingua-franca`,
  "Polyglot coordination language",
);

/**
 * A sitelen pona font resembling the style found in Toki Pona: The Language of Good (lipu pu), by jan Sa.
 */
export const linja_pi_pu_lukin = mkPackage(
  nixRaw`pkgs.linja-pi-pu-lukin`,
  "A sitelen pona font resembling the style found in Toki Pona: The Language of Good (lipu pu), by jan Sa.",
);

/**
 * An extensive sitelen pona font by lipamanka
 */
export const linja_sike = mkPackage(
  nixRaw`pkgs.linja-sike`,
  "An extensive sitelen pona font by lipamanka",
);

/**
 * A Grammar Checking library
 */
export const link_grammar = mkPackage(
  nixRaw`pkgs.link-grammar`,
  "A Grammar Checking library",
);

/**
 * Check websites for broken links
 */
export const linkchecker = mkPackage(
  nixRaw`pkgs.linkchecker`,
  "Check websites for broken links",
);

/**
 * A simple Kubernetes service mesh that improves security, observability and reliability
 */
export const linkerd = mkPackage(
  nixRaw`pkgs.linkerd`,
  "A simple Kubernetes service mesh that improves security, observability and reliability",
);

/**
 * A simple Kubernetes service mesh that improves security, observability and reliability
 */
export const linkerd_edge = mkPackage(
  nixRaw`pkgs.linkerd_edge`,
  "A simple Kubernetes service mesh that improves security, observability and reliability",
);

/**
 * A simple Kubernetes service mesh that improves security, observability and reliability
 */
export const linkerd_stable = mkPackage(
  nixRaw`pkgs.linkerd_stable`,
  "A simple Kubernetes service mesh that improves security, observability and reliability",
);

/**
 * A small browser with some graphics support
 */
export const links2 = mkPackage(
  nixRaw`pkgs.links2`,
  "A small browser with some graphics support",
);

/**
 * The Linode Command Line Interface
 */
export const linode_cli = mkPackage(
  nixRaw`pkgs.linode-cli`,
  "The Linode Command Line Interface",
);

/**
 * Open source SIP phone for voice/video calls and instant messaging
 */
export const linphone = mkPackage(
  nixRaw`pkgs.linphone`,
  "Open source SIP phone for voice/video calls and instant messaging",
);

/**
 * Graphical wireless scanning for Linux
 */
export const linssid = mkPackage(
  nixRaw`pkgs.linssid`,
  "Graphical wireless scanning for Linux",
);

/**
 * Run linters on git staged files
 */
export const lint_staged = mkPackage(
  nixRaw`pkgs.lint-staged`,
  "Run linters on git staged files",
);

/**
 * A game of playing music using a MIDI keyboard following a MIDI file
 */
export const linthesia = mkPackage(
  nixRaw`pkgs.linthesia`,
  "A game of playing music using a MIDI keyboard following a MIDI file",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper)
 */
export const linux = mkPackage(
  nixRaw`pkgs.linux`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper)",
);

/**
 * A set of tools for joysticks and serial peripherals
 */
export const linuxConsoleTools = mkPackage(
  nixRaw`pkgs.linuxConsoleTools`,
  "A set of tools for joysticks and serial peripherals",
);

/**
 * Header files and scripts for Linux kernel
 */
export const linuxHeaders = mkPackage(
  nixRaw`pkgs.linuxHeaders`,
  "Header files and scripts for Linux kernel",
);

/**
 * Header files and scripts for Linux kernel
 */
export const linuxHeaders_5_19 = mkPackage(
  nixRaw`pkgs.linuxHeaders_5_19`,
  "Header files and scripts for Linux kernel",
);

/**
 * The Linux kernel
 */
export const linuxPackages_custom_tinyconfig_kernel = mkPackage(
  nixRaw`pkgs.linuxPackages_custom_tinyconfig_kernel`,
  "The Linux kernel",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper, modinst-arglist-too-long, linux-hardened-4.19.296-hardened1)
 */
export const linux_4_19_hardened = mkPackage(
  nixRaw`pkgs.linux_4_19_hardened`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper, modinst-arglist-too-long, linux-hardened-4.19.296-hardened1)",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper, linux-hardened-5.10.198-hardened1)
 */
export const linux_5_10_hardened = mkPackage(
  nixRaw`pkgs.linux_5_10_hardened`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper, linux-hardened-5.10.198-hardened1)",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper, linux-hardened-5.15.136-hardened1)
 */
export const linux_5_15_hardened = mkPackage(
  nixRaw`pkgs.linux_5_15_hardened`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper, linux-hardened-5.15.136-hardened1)",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper, rtl8761b-support, linux-hardened-5.4.258-hardened1)
 */
export const linux_5_4_hardened = mkPackage(
  nixRaw`pkgs.linux_5_4_hardened`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper, rtl8761b-support, linux-hardened-5.4.258-hardened1)",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper, linux-hardened-6.1.59-hardened1)
 */
export const linux_6_1_hardened = mkPackage(
  nixRaw`pkgs.linux_6_1_hardened`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper, linux-hardened-6.1.59-hardened1)",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper, linux-hardened-6.5.8-hardened1)
 */
export const linux_6_5_hardened = mkPackage(
  nixRaw`pkgs.linux_6_5_hardened`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper, linux-hardened-6.5.8-hardened1)",
);

/**
 * Linux kernel html documentation
 */
export const linux_doc = mkPackage(
  nixRaw`pkgs.linux-doc`,
  "Linux kernel html documentation",
);

/**
 * Tool designed to assist in detecting security deficiencies for given Linux kernel/Linux-based machine
 */
export const linux_exploit_suggester = mkPackage(
  nixRaw`pkgs.linux-exploit-suggester`,
  "Tool designed to assist in detecting security deficiencies for given Linux kernel/Linux-based machine",
);

/**
 * Binary firmware collection packaged by kernel.org
 */
export const linux_firmware = mkPackage(
  nixRaw`pkgs.linux-firmware`,
  "Binary firmware collection packaged by kernel.org",
);

/**
 * Support package for GPIB (IEEE 488) hardware
 */
export const linux_gpib = mkPackage(
  nixRaw`pkgs.linux-gpib`,
  "Support package for GPIB (IEEE 488) hardware",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper, linux-hardened-6.1.59-hardened1)
 */
export const linux_hardened = mkPackage(
  nixRaw`pkgs.linux_hardened`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper, linux-hardened-6.1.59-hardened1)",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper)
 */
export const linux_latest = mkPackage(
  nixRaw`pkgs.linux_latest`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper)",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper)
 */
export const linux_latest_libre = mkPackage(
  nixRaw`pkgs.linux_latest-libre`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper)",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper)
 */
export const linux_libre = mkPackage(
  nixRaw`pkgs.linux-libre`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper)",
);

/**
 * Prints an ASCII logo and some system info
 */
export const linux_logo = mkPackage(
  nixRaw`pkgs.linux_logo`,
  "Prints an ASCII logo and some system info",
);

/**
 * Linux kernel API manual pages
 */
export const linux_manual = mkPackage(
  nixRaw`pkgs.linux-manual`,
  "Linux kernel API manual pages",
);

/**
 * Pluggable Authentication Modules, a flexible mechanism for authenticating user
 */
export const linux_pam = mkPackage(
  nixRaw`pkgs.linux-pam`,
  "Pluggable Authentication Modules, a flexible mechanism for authenticating user",
);

/**
 * Set Linux as router / Wifi hotspot / proxy in one command
 */
export const linux_router = mkPackage(
  nixRaw`pkgs.linux-router`,
  "Set Linux as router / Wifi hotspot / proxy in one command",
);

/**
 * Set Linux as router / Wifi hotspot / proxy in one command
 */
export const linux_router_without_wifi = mkPackage(
  nixRaw`pkgs.linux-router-without-wifi`,
  "Set Linux as router / Wifi hotspot / proxy in one command",
);

/**
 * The Linux kernel (with patches: rt, bridge-stp-helper, request-key-helper)
 */
export const linux_rt = mkPackage(
  nixRaw`pkgs.linux-rt`,
  "The Linux kernel (with patches: rt, bridge-stp-helper, request-key-helper)",
);

/**
 * The Linux kernel (with patches: rt, bridge-stp-helper, request-key-helper, export-rt-sched-migrate, dell_xps_regression)
 */
export const linux_rt_latest = mkPackage(
  nixRaw`pkgs.linux-rt_latest`,
  "The Linux kernel (with patches: rt, bridge-stp-helper, request-key-helper, export-rt-sched-migrate, dell_xps_regression)",
);

/**
 * The Linux kernel (with patches: bridge-stp-helper, request-key-helper)
 */
export const linux_testing = mkPackage(
  nixRaw`pkgs.linux_testing`,
  "The Linux kernel (with patches: bridge-stp-helper, request-key-helper)",
);

/**
 * The Linux kernel (with patches: bcachefs-84f132d5696138bb038d2dc8f1162d2fab5ac832, bridge-stp-helper, request-key-helper, dell_xps_regression)
 */
export const linux_testing_bcachefs = mkPackage(
  nixRaw`pkgs.linux_testing_bcachefs`,
  "The Linux kernel (with patches: bcachefs-84f132d5696138bb038d2dc8f1162d2fab5ac832, bridge-stp-helper, request-key-helper, dell_xps_regression)",
);

/**
 * Wallpaper Engine backgrounds for Linux
 */
export const linux_wallpaperengine = mkPackage(
  nixRaw`pkgs.linux-wallpaperengine`,
  "Wallpaper Engine backgrounds for Linux",
);

/**
 * Feature-rich wifi hotspot creator for Linux which provides both GUI and command-line interface
 */
export const linux_wifi_hotspot = mkPackage(
  nixRaw`pkgs.linux-wifi-hotspot`,
  "Feature-rich wifi hotspot creator for Linux which provides both GUI and command-line interface",
);

/**
 * Built with custom settings and new features built to provide a stable, responsive and smooth desktop experience
 */
export const linux_xanmod = mkPackage(
  nixRaw`pkgs.linux_xanmod`,
  "Built with custom settings and new features built to provide a stable, responsive and smooth desktop experience",
);

/**
 * Built with custom settings and new features built to provide a stable, responsive and smooth desktop experience
 */
export const linux_xanmod_latest = mkPackage(
  nixRaw`pkgs.linux_xanmod_latest`,
  "Built with custom settings and new features built to provide a stable, responsive and smooth desktop experience",
);

/**
 * Built with custom settings and new features built to provide a stable, responsive and smooth desktop experience
 */
export const linux_xanmod_stable = mkPackage(
  nixRaw`pkgs.linux_xanmod_stable`,
  "Built with custom settings and new features built to provide a stable, responsive and smooth desktop experience",
);

/**
 * Toolset for processing LinuxDoc DTD SGML files
 */
export const linuxdoc_tools = mkPackage(
  nixRaw`pkgs.linuxdoc-tools`,
  "Toolset for processing LinuxDoc DTD SGML files",
);

/**
 * A toolkit for building secure, portable and lean operating systems for containers
 */
export const linuxkit = mkPackage(
  nixRaw`pkgs.linuxkit`,
  "A toolkit for building secure, portable and lean operating systems for containers",
);

/**
 * Implementation of the Precision Time Protocol (PTP) according to IEEE standard 1588 for Linux
 */
export const linuxptp = mkPackage(
  nixRaw`pkgs.linuxptp`,
  "Implementation of the Precision Time Protocol (PTP) according to IEEE standard 1588 for Linux",
);

/**
 * Tools to manage kernel-level quotas in Linux
 */
export const linuxquota = mkPackage(
  nixRaw`pkgs.linuxquota`,
  "Tools to manage kernel-level quotas in Linux",
);

/**
 * Sampler backend
 */
export const linuxsampler = mkPackage(
  nixRaw`pkgs.linuxsampler`,
  "Sampler backend",
);

/**
 * Create stop-motion animation movies
 */
export const linuxstopmotion = mkPackage(
  nixRaw`pkgs.linuxstopmotion`,
  "Create stop-motion animation movies",
);

/**
 * Generate music from the entropy of Linux
 */
export const linuxwave = mkPackage(
  nixRaw`pkgs.linuxwave`,
  "Generate music from the entropy of Linux",
);

/**
 * Graphical companion application for various bridges like LinVst, etc
 */
export const linvstmanager = mkPackage(
  nixRaw`pkgs.linvstmanager`,
  "Graphical companion application for various bridges like LinVst, etc",
);

/**
 * Self-hosted file/code/media sharing website.
 */
export const linx_server = mkPackage(
  nixRaw`pkgs.linx-server`,
  "Self-hosted file/code/media sharing website.",
);

/**
 * A command line tool to analyse the output over time of custom shell commands
 */
export const lipl = mkPackage(
  nixRaw`pkgs.lipl`,
  "A command line tool to analyse the output over time of custom shell commands",
);

/**
 * Version Control for your database
 */
export const liquibase = mkPackage(
  nixRaw`pkgs.liquibase`,
  "Version Control for your database",
);

/**
 * Amazon Redshift extension for Liquibase
 */
export const liquibase_redshift_extension = mkPackage(
  nixRaw`pkgs.liquibase_redshift_extension`,
  "Amazon Redshift extension for Liquibase",
);

/**
 * Digital signal processing library for software-defined radios
 */
export const liquid_dsp = mkPackage(
  nixRaw`pkgs.liquid-dsp`,
  "Digital signal processing library for software-defined radios",
);

/**
 * Cross-platform CLI and Python drivers for AIO liquid coolers and other devices
 */
export const liquidctl = mkPackage(
  nixRaw`pkgs.liquidctl`,
  "Cross-platform CLI and Python drivers for AIO liquid coolers and other devices",
);

/**
 * 2D physics engine based on Box2D
 */
export const liquidfun = mkPackage(
  nixRaw`pkgs.liquidfun`,
  "2D physics engine based on Box2D",
);

/**
 * A full-featured & carefully designed adaptive prompt for Bash & Zsh
 */
export const liquidprompt = mkPackage(
  nixRaw`pkgs.liquidprompt`,
  "A full-featured & carefully designed adaptive prompt for Bash & Zsh",
);

/**
 * Swiss-army knife for multimedia streaming
 */
export const liquidsoap = mkPackage(
  nixRaw`pkgs.liquidsoap`,
  "Swiss-army knife for multimedia streaming",
);

/**
 * Quick tactics game
 */
export const liquidwar = mkPackage(
  nixRaw`pkgs.liquidwar`,
  "Quick tactics game",
);

/**
 * The classic version of a quick tactics game LiquidWar
 */
export const liquidwar5 = mkPackage(
  nixRaw`pkgs.liquidwar5`,
  "The classic version of a quick tactics game LiquidWar",
);

/**
 * Allows to receive and send infrared signals
 */
export const lirc = mkPackage(
  nixRaw`pkgs.lirc`,
  "Allows to receive and send infrared signals",
);

/**
 * Bind gestures via libinput touch events
 */
export const lisgd = mkPackage(
  nixRaw`pkgs.lisgd`,
  "Bind gestures via libinput touch events",
);

/**
 * Command line mailman moderator queue manipulation
 */
export const listadmin = mkPackage(
  nixRaw`pkgs.listadmin`,
  "Command line mailman moderator queue manipulation",
);

/**
 * ListenBrainz submission client for MPD
 */
export const listenbrainz_mpd = mkPackage(
  nixRaw`pkgs.listenbrainz-mpd`,
  "ListenBrainz submission client for MPD",
);

/**
 * High performance, self-hosted, newsletter and mailing list manager with a modern dashboard.
 */
export const listmonk = mkPackage(
  nixRaw`pkgs.listmonk`,
  "High performance, self-hosted, newsletter and mailing list manager with a modern dashboard.",
);

/**
 * Portable tool for executing LLVM and Clang style test suites
 */
export const lit = mkPackage(
  nixRaw`pkgs.lit`,
  "Portable tool for executing LLVM and Clang style test suites",
);

/**
 * A lightweight text editor written in Lua
 */
export const lite = mkPackage(
  nixRaw`pkgs.lite`,
  "A lightweight text editor written in Lua",
);

/**
 * A lightweight text editor written in Lua
 */
export const lite_xl = mkPackage(
  nixRaw`pkgs.lite-xl`,
  "A lightweight text editor written in Lua",
);

/**
 * A simple browser based on the litehtml engine
 */
export const litebrowser = mkPackage(
  nixRaw`pkgs.litebrowser`,
  "A simple browser based on the litehtml engine",
);

/**
 * Command-line interface for SQLite
 */
export const litecli = mkPackage(
  nixRaw`pkgs.litecli`,
  "Command-line interface for SQLite",
);

/**
 * A lite version of Bitcoin using scrypt as a proof-of-work algorithm
 */
export const litecoin = mkPackage(
  nixRaw`pkgs.litecoin`,
  "A lite version of Bitcoin using scrypt as a proof-of-work algorithm",
);

/**
 * A lite version of Bitcoin using scrypt as a proof-of-work algorithm
 */
export const litecoind = mkPackage(
  nixRaw`pkgs.litecoind`,
  "A lite version of Bitcoin using scrypt as a proof-of-work algorithm",
);

/**
 * FUSE-based file system for replicating SQLite databases across a cluster of machines
 */
export const litefs = mkPackage(
  nixRaw`pkgs.litefs`,
  "FUSE-based file system for replicating SQLite databases across a cluster of machines",
);

/**
 * Fast and lightweight HTML/CSS rendering engine
 */
export const litehtml = mkPackage(
  nixRaw`pkgs.litehtml`,
  "Fast and lightweight HTML/CSS rendering engine",
);

/**
 * A suckless markdown viewer
 */
export const litemdview = mkPackage(
  nixRaw`pkgs.litemdview`,
  "A suckless markdown viewer",
);

/**
 * Streaming replication for SQLite
 */
export const litestream = mkPackage(
  nixRaw`pkgs.litestream`,
  "Streaming replication for SQLite",
);

/**
 * WebDAV server protocol compliance test suite
 */
export const litmus = mkPackage(
  nixRaw`pkgs.litmus`,
  "WebDAV server protocol compliance test suite",
);

/**
 * A FUSE wrapper that puts the littlefs in user-space
 */
export const littlefs_fuse = mkPackage(
  nixRaw`pkgs.littlefs-fuse`,
  "A FUSE wrapper that puts the littlefs in user-space",
);

/**
 * A music tracker similar to lsdj optimised to run on portable game consoles
 */
export const littlegptracker = mkPackage(
  nixRaw`pkgs.littlegptracker`,
  "A music tracker similar to lsdj optimised to run on portable game consoles",
);

/**
 * Set of C++ libraries for multimedia streaming, using open standard protocols (RTP/RTCP, RTSP, SIP)
 */
export const live555 = mkPackage(
  nixRaw`pkgs.live555`,
  "Set of C++ libraries for multimedia streaming, using open standard protocols (RTP/RTCP, RTSP, SIP)",
);

/**
 * Automate code & data workflows with interactive Elixir notebooks
 */
export const livebook = mkPackage(
  nixRaw`pkgs.livebook`,
  "Automate code & data workflows with interactive Elixir notebooks",
);

/**
 * Linux Desktop application that provides live captioning
 */
export const livecaptions = mkPackage(
  nixRaw`pkgs.livecaptions`,
  "Linux Desktop application that provides live captioning",
);

/**
 * Command-line tool to download nicovideo.jp livestreams
 */
export const livedl = mkPackage(
  nixRaw`pkgs.livedl`,
  "Command-line tool to download nicovideo.jp livestreams",
);

/**
 * Official Go implementation of the Livepeer protocol
 */
export const livepeer = mkPackage(
  nixRaw`pkgs.livepeer`,
  "Official Go implementation of the Livepeer protocol",
);

/**
 * The Linux kernel as a library
 */
export const lkl = mkPackage(
  nixRaw`pkgs.lkl`,
  "The Linux kernel as a library",
);

/**
 * The Linux kernel as a library
 */
export const lklWithFirewall = mkPackage(
  nixRaw`pkgs.lklWithFirewall`,
  "The Linux kernel as a library",
);

/**
 * Unicode Sinhala font by Lanka Linux User Group
 */
export const lklug_sinhala = mkPackage(
  nixRaw`pkgs.lklug-sinhala`,
  "Unicode Sinhala font by Lanka Linux User Group",
);

export const lkproof = mkPackage(
  nixRaw`pkgs.lkproof`,
  "",
);

/**
 * Linux Kernel Stream Control Transmission Protocol Tools
 */
export const lksctp_tools = mkPackage(
  nixRaw`pkgs.lksctp-tools`,
  "Linux Kernel Stream Control Transmission Protocol Tools",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld = mkPackage(
  nixRaw`pkgs.lld`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_10 = mkPackage(
  nixRaw`pkgs.lld_10`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_11 = mkPackage(
  nixRaw`pkgs.lld_11`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_12 = mkPackage(
  nixRaw`pkgs.lld_12`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_13 = mkPackage(
  nixRaw`pkgs.lld_13`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_14 = mkPackage(
  nixRaw`pkgs.lld_14`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_15 = mkPackage(
  nixRaw`pkgs.lld_15`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_16 = mkPackage(
  nixRaw`pkgs.lld_16`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_5 = mkPackage(
  nixRaw`pkgs.lld_5`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_6 = mkPackage(
  nixRaw`pkgs.lld_6`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_7 = mkPackage(
  nixRaw`pkgs.lld_7`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_8 = mkPackage(
  nixRaw`pkgs.lld_8`,
  "The LLVM linker (unwrapped)",
);

/**
 * The LLVM linker (unwrapped)
 */
export const lld_9 = mkPackage(
  nixRaw`pkgs.lld_9`,
  "The LLVM linker (unwrapped)",
);

/**
 * A lightweight authentication server that provides an opinionated, simplified LDAP interface for authentication
 */
export const lldap = mkPackage(
  nixRaw`pkgs.lldap`,
  "A lightweight authentication server that provides an opinionated, simplified LDAP interface for authentication",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb = mkPackage(
  nixRaw`pkgs.lldb`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_10 = mkPackage(
  nixRaw`pkgs.lldb_10`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_11 = mkPackage(
  nixRaw`pkgs.lldb_11`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_12 = mkPackage(
  nixRaw`pkgs.lldb_12`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_13 = mkPackage(
  nixRaw`pkgs.lldb_13`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_14 = mkPackage(
  nixRaw`pkgs.lldb_14`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_15 = mkPackage(
  nixRaw`pkgs.lldb_15`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_16 = mkPackage(
  nixRaw`pkgs.lldb_16`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_5 = mkPackage(
  nixRaw`pkgs.lldb_5`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_6 = mkPackage(
  nixRaw`pkgs.lldb_6`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_7 = mkPackage(
  nixRaw`pkgs.lldb_7`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_8 = mkPackage(
  nixRaw`pkgs.lldb_8`,
  "A next-generation high-performance debugger",
);

/**
 * A next-generation high-performance debugger
 */
export const lldb_9 = mkPackage(
  nixRaw`pkgs.lldb_9`,
  "A next-generation high-performance debugger",
);

/**
 * 802.1ab implementation (LLDP) to help you locate neighbors of all your equipments
 */
export const lldpd = mkPackage(
  nixRaw`pkgs.lldpd`,
  "802.1ab implementation (LLDP) to help you locate neighbors of all your equipments",
);

/**
 * Port of http_parser to llparse
 */
export const llhttp = mkPackage(
  nixRaw`pkgs.llhttp`,
  "Port of http_parser to llparse",
);

/**
 * A MuPDF based PDF pager written in OCaml
 */
export const llpp = mkPackage(
  nixRaw`pkgs.llpp`,
  "A MuPDF based PDF pager written in OCaml",
);

/**
 * Tool to list listening sockets
 */
export const lls = mkPackage(
  nixRaw`pkgs.lls`,
  "Tool to list listening sockets",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm = mkPackage(
  nixRaw`pkgs.llvm`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_10 = mkPackage(
  nixRaw`pkgs.llvm_10`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_11 = mkPackage(
  nixRaw`pkgs.llvm_11`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_12 = mkPackage(
  nixRaw`pkgs.llvm_12`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_13 = mkPackage(
  nixRaw`pkgs.llvm_13`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_14 = mkPackage(
  nixRaw`pkgs.llvm_14`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_15 = mkPackage(
  nixRaw`pkgs.llvm_15`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_16 = mkPackage(
  nixRaw`pkgs.llvm_16`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_5 = mkPackage(
  nixRaw`pkgs.llvm_5`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_6 = mkPackage(
  nixRaw`pkgs.llvm_6`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_7 = mkPackage(
  nixRaw`pkgs.llvm_7`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_8 = mkPackage(
  nixRaw`pkgs.llvm_8`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * A collection of modular and reusable compiler and toolchain technologies
 */
export const llvm_9 = mkPackage(
  nixRaw`pkgs.llvm_9`,
  "A collection of modular and reusable compiler and toolchain technologies",
);

/**
 * man pages for LLVM 11.1.0
 */
export const llvm_manpages = mkPackage(
  nixRaw`pkgs.llvm-manpages`,
  "man pages for LLVM 11.1.0",
);

/**
 * Tools for reading hardware sensors
 */
export const lm_sensors = mkPackage(
  nixRaw`pkgs.lm_sensors`,
  "Tools for reading hardware sensors",
);

/**
 * Lightning memory-mapped database
 */
export const lmdb = mkPackage(
  nixRaw`pkgs.lmdb`,
  "Lightning memory-mapped database",
);

/**
 * C++11 wrapper for the LMDB embedded B+ tree database library
 */
export const lmdbxx = mkPackage(
  nixRaw`pkgs.lmdbxx`,
  "C++11 wrapper for the LMDB embedded B+ tree database library",
);

/**
 * The Latin Modern Math (LM Math) font completes the modernization of the Computer Modern family of typefaces designed and programmed by Donald E. Knuth
 */
export const lmmath = mkPackage(
  nixRaw`pkgs.lmmath`,
  "The Latin Modern Math (LM Math) font completes the modernization of the Computer Modern family of typefaces designed and programmed by Donald E. Knuth",
);

/**
 * DAW similar to FL Studio (music production software)
 */
export const lmms = mkPackage(
  nixRaw`pkgs.lmms`,
  "DAW similar to FL Studio (music production software)",
);

/**
 * Latin Modern font
 */
export const lmodern = mkPackage(
  nixRaw`pkgs.lmodern`,
  "Latin Modern font",
);

/**
 * Scanning and validation toolkit for the Log4J vulnerability
 */
export const lmp = mkPackage(
  nixRaw`pkgs.lmp`,
  "Scanning and validation toolkit for the Log4J vulnerability",
);

/**
 * The Logfile Navigator
 */
export const lnav = mkPackage(
  nixRaw`pkgs.lnav`,
  "The Logfile Navigator",
);

/**
 * Launches a process and moves it out of the process group
 */
export const lnch = mkPackage(
  nixRaw`pkgs.lnch`,
  "Launches a process and moves it out of the process group",
);

/**
 * Lightning Network Daemon
 */
export const lnd = mkPackage(
  nixRaw`pkgs.lnd`,
  "Lightning Network Daemon",
);

/**
 * Generate QRCode to connect apps to lnd Resources
 */
export const lndconnect = mkPackage(
  nixRaw`pkgs.lndconnect`,
  "Generate QRCode to connect apps to lnd Resources",
);

/**
 * Accounting wrapper for the Lightning Network
 */
export const lndhub_go = mkPackage(
  nixRaw`pkgs.lndhub-go`,
  "Accounting wrapper for the Lightning Network",
);

/**
 * Wallet initializer utility for lnd
 */
export const lndinit = mkPackage(
  nixRaw`pkgs.lndinit`,
  "Wallet initializer utility for lnd",
);

/**
 * Channel management tool for lightning network daemon (LND) operators
 */
export const lndmanage = mkPackage(
  nixRaw`pkgs.lndmanage`,
  "Channel management tool for lightning network daemon (LND) operators",
);

/**
 * Insanely fast, Feature-rich searching. lnx is the adaptable, typo tollerant deployment of the tantivy search engine. Standing on the shoulders of giants. 
 */
export const lnx = mkPackage(
  nixRaw`pkgs.lnx`,
  "Insanely fast, Feature-rich searching. lnx is the adaptable, typo tollerant deployment of the tantivy search engine. Standing on the shoulders of giants. ",
);

/**
 * Porting Windows Dynamic Link Libraries to Linux
 */
export const loadlibrary = mkPackage(
  nixRaw`pkgs.loadlibrary`,
  "Porting Windows Dynamic Link Libraries to Linux",
);

/**
 * Run a program using only idle cycles
 */
export const loadwatch = mkPackage(
  nixRaw`pkgs.loadwatch`,
  "Run a program using only idle cycles",
);

/**
 * The Lobster programming language
 */
export const lobster = mkPackage(
  nixRaw`pkgs.lobster`,
  "The Lobster programming language",
);

/**
 * Count lines of code quickly
 */
export const loc = mkPackage(
  nixRaw`pkgs.loc`,
  "Count lines of code quickly",
);

export const locale = mkPackage(
  nixRaw`pkgs.locale`,
  "",
);

/**
 * AWS IoT Secure Tunneling Local Proxy Reference Implementation C++
 */
export const localproxy = mkPackage(
  nixRaw`pkgs.localproxy`,
  "AWS IoT Secure Tunneling Local Proxy Reference Implementation C++",
);

/**
 * An open source cross-platform alternative to AirDrop
 */
export const localsend = mkPackage(
  nixRaw`pkgs.localsend`,
  "An open source cross-platform alternative to AirDrop",
);

/**
 * A fully functional local Cloud stack
 */
export const localstack = mkPackage(
  nixRaw`pkgs.localstack`,
  "A fully functional local Cloud stack",
);

/**
 * A daemon for keeping the system timezone up-to-date based on the current location
 */
export const localtime = mkPackage(
  nixRaw`pkgs.localtime`,
  "A daemon for keeping the system timezone up-to-date based on the current location",
);

/**
 * Program that looks up in a directory hierarchy for a given filename
 */
export const locate_dominating_file = mkPackage(
  nixRaw`pkgs.locate-dominating-file`,
  "Program that looks up in a directory hierarchy for a given filename",
);

/**
 * Re-implementation of sloccount in Go
 */
export const loccount = mkPackage(
  nixRaw`pkgs.loccount`,
  "Re-implementation of sloccount in Go",
);

/**
 * Userspace locking validation tool built on the Linux kernel
 */
export const lockdep = mkPackage(
  nixRaw`pkgs.lockdep`,
  "Userspace locking validation tool built on the Linux kernel",
);

/**
 * Programs for locking and unlocking files and mailboxes
 */
export const lockfileProgs = mkPackage(
  nixRaw`pkgs.lockfileProgs`,
  "Programs for locking and unlocking files and mailboxes",
);

/**
 * A port the log4j library from Java to C++
 */
export const log4cplus = mkPackage(
  nixRaw`pkgs.log4cplus`,
  "A port the log4j library from Java to C++",
);

/**
 * A logging framework for C++ patterned after Apache log4j
 */
export const log4cpp = mkPackage(
  nixRaw`pkgs.log4cpp`,
  "A logging framework for C++ patterned after Apache log4j",
);

/**
 * A logging framework for C++ patterned after Apache log4j
 */
export const log4cxx = mkPackage(
  nixRaw`pkgs.log4cxx`,
  "A logging framework for C++ patterned after Apache log4j",
);

/**
 * Tool to detect the log4j vulnerability
 */
export const log4j_detect = mkPackage(
  nixRaw`pkgs.log4j-detect`,
  "Tool to detect the log4j vulnerability",
);

/**
 * Scanner for finding hosts which are vulnerable for log4j
 */
export const log4j_scan = mkPackage(
  nixRaw`pkgs.log4j-scan`,
  "Scanner for finding hosts which are vulnerable for log4j",
);

/**
 * Tool that scans archives to check for vulnerable log4j versions
 */
export const log4j_sniffer = mkPackage(
  nixRaw`pkgs.log4j-sniffer`,
  "Tool that scans archives to check for vulnerable log4j versions",
);

/**
 * Local log4j vulnerability scanner
 */
export const log4j_vuln_scanner = mkPackage(
  nixRaw`pkgs.log4j-vuln-scanner`,
  "Local log4j vulnerability scanner",
);

/**
 * Tool to check for vulnerable Log4j (CVE-2021-44228) systems
 */
export const log4jcheck = mkPackage(
  nixRaw`pkgs.log4jcheck`,
  "Tool to check for vulnerable Log4j (CVE-2021-44228) systems",
);

/**
 * Detector for Log4Shell exploitation attempts
 */
export const log4shell_detector = mkPackage(
  nixRaw`pkgs.log4shell-detector`,
  "Detector for Log4Shell exploitation attempts",
);

/**
 * A forked version of log4cpp that has been created for the Shibboleth project
 */
export const log4shib = mkPackage(
  nixRaw`pkgs.log4shib`,
  "A forked version of log4cpp that has been created for the Shibboleth project",
);

/**
 * Tool that helps you to analyze your log files by reducing the content with patterns you define
 */
export const loganalyzer = mkPackage(
  nixRaw`pkgs.loganalyzer`,
  "Tool that helps you to analyze your log files by reducing the content with patterns you define",
);

/**
 * Mails anomalies in the system logfiles to the administrator
 */
export const logcheck = mkPackage(
  nixRaw`pkgs.logcheck`,
  "Mails anomalies in the system logfiles to the administrator",
);

export const logger = mkPackage(
  nixRaw`pkgs.logger`,
  "",
);

/**
 * Unofficial userspace driver for HID++ Logitech devices
 */
export const logiops = mkPackage(
  nixRaw`pkgs.logiops`,
  "Unofficial userspace driver for HID++ Logitech devices",
);

/**
 * Educational tool for designing and simulating digital logic circuits
 */
export const logisim = mkPackage(
  nixRaw`pkgs.logisim`,
  "Educational tool for designing and simulating digital logic circuits",
);

/**
 * Digital logic designer and simulator
 */
export const logisim_evolution = mkPackage(
  nixRaw`pkgs.logisim-evolution`,
  "Digital logic designer and simulator",
);

/**
 * Linux devices manager for the Logitech Unifying Receiver
 */
export const logitech_udev_rules = mkPackage(
  nixRaw`pkgs.logitech-udev-rules`,
  "Linux devices manager for the Logitech Unifying Receiver",
);

/**
 * A GNU/Linux keylogger that works!
 */
export const logkeys = mkPackage(
  nixRaw`pkgs.logkeys`,
  "A GNU/Linux keylogger that works!",
);

/**
 * Tools for fuzzing Log4j2 jndi injection
 */
export const logmap = mkPackage(
  nixRaw`pkgs.logmap`,
  "Tools for fuzzing Log4j2 jndi injection",
);

/**
 * A hosted VPN service that lets you securely extend LAN-like networks to distributed teams
 */
export const logmein_hamachi = mkPackage(
  nixRaw`pkgs.logmein-hamachi`,
  "A hosted VPN service that lets you securely extend LAN-like networks to distributed teams",
);

/**
 * Rotates and compresses system logs
 */
export const logrotate = mkPackage(
  nixRaw`pkgs.logrotate`,
  "Rotates and compresses system logs",
);

/**
 * A local-first, non-linear, outliner notebook for organizing and sharing your personal knowledge base
 */
export const logseq = mkPackage(
  nixRaw`pkgs.logseq`,
  "A local-first, non-linear, outliner notebook for organizing and sharing your personal knowledge base",
);

/**
 * Website traffic visualization tool
 */
export const logstalgia = mkPackage(
  nixRaw`pkgs.logstalgia`,
  "Website traffic visualization tool",
);

/**
 * Logstash is a data pipeline that helps you process logs and other event data from a variety of systems
 */
export const logstash = mkPackage(
  nixRaw`pkgs.logstash`,
  "Logstash is a data pipeline that helps you process logs and other event data from a variety of systems",
);

/**
 * Logstash is a data pipeline that helps you process logs and other event data from a variety of systems
 */
export const logstash7 = mkPackage(
  nixRaw`pkgs.logstash7`,
  "Logstash is a data pipeline that helps you process logs and other event data from a variety of systems",
);

/**
 * Logstash is a data pipeline that helps you process logs and other event data from a variety of systems
 */
export const logstash7_oss = mkPackage(
  nixRaw`pkgs.logstash7-oss`,
  "Logstash is a data pipeline that helps you process logs and other event data from a variety of systems",
);

/**
 * Community-maintained logstash plugins
 */
export const logstash_contrib = mkPackage(
  nixRaw`pkgs.logstash-contrib`,
  "Community-maintained logstash plugins",
);

/**
 * Displays a real-time count of strings received from stdin
 */
export const logtop = mkPackage(
  nixRaw`pkgs.logtop`,
  "Displays a real-time count of strings received from stdin",
);

/**
 * Translation platform for developers. Upload language files, translate, integrate via API
 */
export const lokalise2_cli = mkPackage(
  nixRaw`pkgs.lokalise2-cli`,
  "Translation platform for developers. Upload language files, translate, integrate via API",
);

/**
 * A C++ library of designs, containing flexible implementations of common design patterns and idioms
 */
export const loki = mkPackage(
  nixRaw`pkgs.loki`,
  "A C++ library of designs, containing flexible implementations of common design patterns and idioms",
);

/**
 * Anonymous, decentralized and IP based overlay network for the internet
 */
export const lokinet = mkPackage(
  nixRaw`pkgs.lokinet`,
  "Anonymous, decentralized and IP based overlay network for the internet",
);

/**
 * Linux port of OpenBSD's ksh
 */
export const loksh = mkPackage(
  nixRaw`pkgs.loksh`,
  "Linux port of OpenBSD's ksh",
);

/**
 * A rainbow version of cat
 */
export const lolcat = mkPackage(
  nixRaw`pkgs.lolcat`,
  "A rainbow version of cat",
);

/**
 * An esoteric programming language
 */
export const lolcode = mkPackage(
  nixRaw`pkgs.lolcode`,
  "An esoteric programming language",
);

/**
 * A modern music player for GNOME
 */
export const lollypop = mkPackage(
  nixRaw`pkgs.lollypop`,
  "A modern music player for GNOME",
);

/**
 * A library that can write a lot of boilerplate for your Java project
 */
export const lombok = mkPackage(
  nixRaw`pkgs.lombok`,
  "A library that can write a lot of boilerplate for your Java project",
);

/**
 * A tool for #! scripts with more than one argument
 */
export const long_shebang = mkPackage(
  nixRaw`pkgs.long-shebang`,
  "A tool for #! scripts with more than one argument",
);

/**
 * Collects all of your system-level metrics and sends them to Linode
 */
export const longview = mkPackage(
  nixRaw`pkgs.longview`,
  "Collects all of your system-level metrics and sends them to Linode",
);

/**
 * A KVM Frame Relay (KVMFR) implementation
 */
export const looking_glass_client = mkPackage(
  nixRaw`pkgs.looking-glass-client`,
  "A KVM Frame Relay (KVMFR) implementation",
);

/**
 * UNIX's missing `loop` command
 */
export const loop = mkPackage(
  nixRaw`pkgs.loop`,
  "UNIX's missing `loop` command",
);

/**
 * An infinite canvas drawing/note-taking app
 */
export const lorien = mkPackage(
  nixRaw`pkgs.lorien`,
  "An infinite canvas drawing/note-taking app",
);

/**
 * Your project's nix-env
 */
export const lorri = mkPackage(
  nixRaw`pkgs.lorri`,
  "Your project's nix-env",
);

/**
 * Utility to check whether audio is truly lossless or not
 */
export const losslessaudiochecker = mkPackage(
  nixRaw`pkgs.losslessaudiochecker`,
  "Utility to check whether audio is truly lossless or not",
);

/**
 * The swiss army knife of lossless video/audio editing
 */
export const losslesscut_bin = mkPackage(
  nixRaw`pkgs.losslesscut-bin`,
  "The swiss army knife of lossless video/audio editing",
);

/**
 * Lottie converter utility
 */
export const lottieconverter = mkPackage(
  nixRaw`pkgs.lottieconverter`,
  "Lottie converter utility",
);

export const loudgain = mkPackage(
  nixRaw`pkgs.loudgain`,
  "",
);

/**
 * A lightweight C library for the Jabber protocol
 */
export const loudmouth = mkPackage(
  nixRaw`pkgs.loudmouth`,
  "A lightweight C library for the Jabber protocol",
);

/**
 * Simple and clean GTK theme with vintage scrollbars, inspired by Absolute, based on Adwaita
 */
export const lounge_gtk_theme = mkPackage(
  nixRaw`pkgs.lounge-gtk-theme`,
  "Simple and clean GTK theme with vintage scrollbars, inspired by Absolute, based on Adwaita",
);

/**
 * Document layout system similar in style to LaTeX
 */
export const lout = mkPackage(
  nixRaw`pkgs.lout`,
  "Document layout system similar in style to LaTeX",
);

/**
 * A Lua-based 2D game engine/scripting language
 */
export const love = mkPackage(
  nixRaw`pkgs.love`,
  "A Lua-based 2D game engine/scripting language",
);

/**
 * A Lua-based 2D game engine/scripting language
 */
export const love_0_10 = mkPackage(
  nixRaw`pkgs.love_0_10`,
  "A Lua-based 2D game engine/scripting language",
);

/**
 * A Lua-based 2D game engine/scripting language
 */
export const love_11 = mkPackage(
  nixRaw`pkgs.love_11`,
  "A Lua-based 2D game engine/scripting language",
);

/**
 * Simple markdown translator
 */
export const lowdown = mkPackage(
  nixRaw`pkgs.lowdown`,
  "Simple markdown translator",
);

/**
 * A Password Safe V3 compatible password vault
 */
export const loxodo = mkPackage(
  nixRaw`pkgs.loxodo`,
  "A Password Safe V3 compatible password vault",
);

/**
 * A Mixed Integer Linear Programming (MILP) solver
 */
export const lp_solve = mkPackage(
  nixRaw`pkgs.lp_solve`,
  "A Mixed Integer Linear Programming (MILP) solver",
);

/**
 * Matching the pairs - a typical Memory Game
 */
export const lpairs2 = mkPackage(
  nixRaw`pkgs.lpairs2`,
  "Matching the pairs - a typical Memory Game",
);

/**
 * Experimental Neural Net speech coding for FreeDV
 */
export const lpcnetfreedv = mkPackage(
  nixRaw`pkgs.lpcnetfreedv`,
  "Experimental Neural Net speech coding for FreeDV",
);

/**
 * List files recursively
 */
export const lr = mkPackage(
  nixRaw`pkgs.lr`,
  "List files recursively",
);

/**
 * Littlewood-Richardson calculator
 */
export const lrcalc = mkPackage(
  nixRaw`pkgs.lrcalc`,
  "Littlewood-Richardson calculator",
);

/**
 * Lightweight RDF library with special support for LADSPA plugins
 */
export const lrdf = mkPackage(
  nixRaw`pkgs.lrdf`,
  "Lightweight RDF library with special support for LADSPA plugins",
);

/**
 * Implementation of the reverse search algorithm for vertex enumeration/convex hull problems
 */
export const lrs = mkPackage(
  nixRaw`pkgs.lrs`,
  "Implementation of the reverse search algorithm for vertex enumeration/convex hull problems",
);

/**
 * The CK LRZIP compression program (LZMA + RZIP)
 */
export const lrzip = mkPackage(
  nixRaw`pkgs.lrzip`,
  "The CK LRZIP compression program (LZMA + RZIP)",
);

/**
 * Communication package providing the XMODEM, YMODEM ZMODEM file transfer protocols
 */
export const lrzsz = mkPackage(
  nixRaw`pkgs.lrzsz`,
  "Communication package providing the XMODEM, YMODEM ZMODEM file transfer protocols",
);

/**
 * An extremely fast file and directory name linter
 */
export const ls_lint = mkPackage(
  nixRaw`pkgs.ls-lint`,
  "An extremely fast file and directory name linter",
);

/**
 * Prints certain LSB (Linux Standard Base) and Distribution information
 */
export const lsb_release = mkPackage(
  nixRaw`pkgs.lsb-release`,
  "Prints certain LSB (Linux Standard Base) and Distribution information",
);

/**
 * Rust library and tool to colorize paths using LS_COLORS
 */
export const lscolors = mkPackage(
  nixRaw`pkgs.lscolors`,
  "Rust library and tool to colorize paths using LS_COLORS",
);

/**
 * The next gen ls command
 */
export const lsd = mkPackage(
  nixRaw`pkgs.lsd`,
  "The next gen ls command",
);

/**
 * Lingvo dictionaries decompiler
 */
export const lsd2dsl = mkPackage(
  nixRaw`pkgs.lsd2dsl`,
  "Lingvo dictionaries decompiler",
);

/**
 * Display information about audio, video, and subtitle tracks on a DVD
 */
export const lsdvd = mkPackage(
  nixRaw`pkgs.lsdvd`,
  "Display information about audio, video, and subtitle tracks on a DVD",
);

/**
 * GPL'd implementation of the SSH protocol
 */
export const lsh = mkPackage(
  nixRaw`pkgs.lsh`,
  "GPL'd implementation of the SSH protocol",
);

/**
 * Provide detailed information on the hardware configuration of the machine
 */
export const lshw = mkPackage(
  nixRaw`pkgs.lshw`,
  "Provide detailed information on the hardware configuration of the machine",
);

/**
 * LSI SAS2008/SAS2108 low-level recovery tool for Linux
 */
export const lsirec = mkPackage(
  nixRaw`pkgs.lsirec`,
  "LSI SAS2008/SAS2108 low-level recovery tool for Linux",
);

/**
 * Configuration utility for MPT adapters (FC, SCSI, and SAS/SATA)
 */
export const lsiutil = mkPackage(
  nixRaw`pkgs.lsiutil`,
  "Configuration utility for MPT adapters (FC, SCSI, and SAS/SATA)",
);

/**
 * Shows thumbnails in terminal using sixel graphics
 */
export const lsix = mkPackage(
  nixRaw`pkgs.lsix`,
  "Shows thumbnails in terminal using sixel graphics",
);

/**
 * A tool to list open files
 */
export const lsof = mkPackage(
  nixRaw`pkgs.lsof`,
  "A tool to list open files",
);

/**
 * Collection of open-source audio plugins
 */
export const lsp_plugins = mkPackage(
  nixRaw`pkgs.lsp-plugins`,
  "Collection of open-source audio plugins",
);

export const lsscsi = mkPackage(
  nixRaw`pkgs.lsscsi`,
  "",
);

/**
 * A tool to list passwords and other secrets stored using the org.freedesktop.secrets dbus api
 */
export const lssecret = mkPackage(
  nixRaw`pkgs.lssecret`,
  "A tool to list passwords and other secrets stored using the org.freedesktop.secrets dbus api",
);

/**
 * A command that lists Wayland toplevels
 */
export const lswt = mkPackage(
  nixRaw`pkgs.lswt`,
  "A command that lists Wayland toplevels",
);

/**
 * A utility that synchronizes local directories with remote targets
 */
export const lsyncd = mkPackage(
  nixRaw`pkgs.lsyncd`,
  "A utility that synchronizes local directories with remote targets",
);

/**
 * Tools to deal with linear-timecode (LTC)
 */
export const ltc_tools = mkPackage(
  nixRaw`pkgs.ltc-tools`,
  "Tools to deal with linear-timecode (LTC)",
);

/**
 * LSP language server for LanguageTool
 */
export const ltex_ls = mkPackage(
  nixRaw`pkgs.ltex-ls`,
  "LSP language server for LanguageTool",
);

/**
 * Fast translation from LTL formulae to Buchi automata
 */
export const ltl2ba = mkPackage(
  nixRaw`pkgs.ltl2ba`,
  "Fast translation from LTL formulae to Buchi automata",
);

/**
 * Library call tracer
 */
export const ltrace = mkPackage(
  nixRaw`pkgs.ltrace`,
  "Library call tracer",
);

/**
 * Tetris clone from the LGames series
 */
export const ltris = mkPackage(
  nixRaw`pkgs.ltris`,
  "Tetris clone from the LGames series",
);

/**
 * Tracing tools (kernel + user space) for Linux
 */
export const lttng_tools = mkPackage(
  nixRaw`pkgs.lttng-tools`,
  "Tracing tools (kernel + user space) for Linux",
);

/**
 * LTTng Userspace Tracer libraries
 */
export const lttng_ust = mkPackage(
  nixRaw`pkgs.lttng-ust`,
  "LTTng Userspace Tracer libraries",
);

/**
 * LTTng Userspace Tracer libraries
 */
export const lttng_ust_2_12 = mkPackage(
  nixRaw`pkgs.lttng-ust_2_12`,
  "LTTng Userspace Tracer libraries",
);

/**
 * Graphical trace viewer for LTTng trace files
 */
export const lttv = mkPackage(
  nixRaw`pkgs.lttv`,
  "Graphical trace viewer for LTTng trace files",
);

/**
 * Tool for working with Logitech Unifying receivers and devices
 */
export const ltunify = mkPackage(
  nixRaw`pkgs.ltunify`,
  "Tool for working with Logitech Unifying receivers and devices",
);

/**
 * Logitech wheels configuration tool
 */
export const ltwheelconf = mkPackage(
  nixRaw`pkgs.ltwheelconf`,
  "Logitech wheels configuration tool",
);

/**
 * Powerful, fast, lightweight, embeddable scripting language
 */
export const lua = mkPackage(
  nixRaw`pkgs.lua`,
  "Powerful, fast, lightweight, embeddable scripting language",
);

/**
 * Powerful, fast, lightweight, embeddable scripting language
 */
export const lua5 = mkPackage(
  nixRaw`pkgs.lua5`,
  "Powerful, fast, lightweight, embeddable scripting language",
);

/**
 * Powerful, fast, lightweight, embeddable scripting language
 */
export const lua5_1 = mkPackage(
  nixRaw`pkgs.lua5_1`,
  "Powerful, fast, lightweight, embeddable scripting language",
);

/**
 * Powerful, fast, lightweight, embeddable scripting language
 */
export const lua5_2 = mkPackage(
  nixRaw`pkgs.lua5_2`,
  "Powerful, fast, lightweight, embeddable scripting language",
);

/**
 * Powerful, fast, lightweight, embeddable scripting language
 */
export const lua5_2_compat = mkPackage(
  nixRaw`pkgs.lua5_2_compat`,
  "Powerful, fast, lightweight, embeddable scripting language",
);

/**
 * Powerful, fast, lightweight, embeddable scripting language
 */
export const lua5_3 = mkPackage(
  nixRaw`pkgs.lua5_3`,
  "Powerful, fast, lightweight, embeddable scripting language",
);

/**
 * Powerful, fast, lightweight, embeddable scripting language
 */
export const lua5_3_compat = mkPackage(
  nixRaw`pkgs.lua5_3_compat`,
  "Powerful, fast, lightweight, embeddable scripting language",
);

/**
 * Powerful, fast, lightweight, embeddable scripting language
 */
export const lua5_4 = mkPackage(
  nixRaw`pkgs.lua5_4`,
  "Powerful, fast, lightweight, embeddable scripting language",
);

/**
 * Powerful, fast, lightweight, embeddable scripting language
 */
export const lua5_4_compat = mkPackage(
  nixRaw`pkgs.lua5_4_compat`,
  "Powerful, fast, lightweight, embeddable scripting language",
);

/**
 * A language server that offers Lua language support
 */
export const lua_language_server = mkPackage(
  nixRaw`pkgs.lua-language-server`,
  "A language server that offers Lua language support",
);

/**
 * A library that helps you create bindings between C++ and Lua
 */
export const luabind = mkPackage(
  nixRaw`pkgs.luabind`,
  "A library that helps you create bindings between C++ and Lua",
);

/**
 * A library that helps you create bindings between C++ and Lua
 */
export const luabind_luajit = mkPackage(
  nixRaw`pkgs.luabind_luajit`,
  "A library that helps you create bindings between C++ and Lua",
);

/**
 * A lightweight, dependency-free library for binding Lua to C++
 */
export const luabridge = mkPackage(
  nixRaw`pkgs.luabridge`,
  "A lightweight, dependency-free library for binding Lua to C++",
);

/**
 * Code formatter for Lua
 */
export const luaformatter = mkPackage(
  nixRaw`pkgs.luaformatter`,
  "Code formatter for Lua",
);

/**
 * High-performance JIT compiler for Lua 5.1
 */
export const luajit = mkPackage(
  nixRaw`pkgs.luajit`,
  "High-performance JIT compiler for Lua 5.1",
);

/**
 * High-performance JIT compiler for Lua 5.1
 */
export const luajit_2_0 = mkPackage(
  nixRaw`pkgs.luajit_2_0`,
  "High-performance JIT compiler for Lua 5.1",
);

/**
 * High-performance JIT compiler for Lua 5.1
 */
export const luajit_2_1 = mkPackage(
  nixRaw`pkgs.luajit_2_1`,
  "High-performance JIT compiler for Lua 5.1",
);

/**
 * High-performance JIT compiler for Lua 5.1
 */
export const luajit_openresty = mkPackage(
  nixRaw`pkgs.luajit_openresty`,
  "High-performance JIT compiler for Lua 5.1",
);

/**
 * Fast, small, webkit-based browser framework extensible in Lua
 */
export const luakit = mkPackage(
  nixRaw`pkgs.luakit`,
  "Fast, small, webkit-based browser framework extensible in Lua",
);

/**
 * A package manager for Lua
 */
export const luarocks = mkPackage(
  nixRaw`pkgs.luarocks`,
  "A package manager for Lua",
);

/**
 * A package manager for Lua
 */
export const luarocks_nix = mkPackage(
  nixRaw`pkgs.luarocks-nix`,
  "A package manager for Lua",
);

/**
 * Universal status bar content generator
 */
export const luastatus = mkPackage(
  nixRaw`pkgs.luastatus`,
  "Universal status bar content generator",
);

/**
 * A fast, small, safe, gradually typed embeddable scripting language derived from Lua
 */
export const luau = mkPackage(
  nixRaw`pkgs.luau`,
  "A fast, small, safe, gradually typed embeddable scripting language derived from Lua",
);

/**
 * Java full-text search engine
 */
export const lucene = mkPackage(
  nixRaw`pkgs.lucene`,
  "Java full-text search engine",
);

/**
 * C++ port of the popular Java Lucene search engine
 */
export const lucenepp = mkPackage(
  nixRaw`pkgs.lucenepp`,
  "C++ port of the popular Java Lucene search engine",
);

/**
 * A Crystal library for creating and running tasks. Also generates Lucky projects
 */
export const lucky_cli = mkPackage(
  nixRaw`pkgs.lucky-cli`,
  "A Crystal library for creating and running tasks. Also generates Lucky projects",
);

/**
 * Change the start of your git commit hashes to whatever you want
 */
export const lucky_commit = mkPackage(
  nixRaw`pkgs.lucky-commit`,
  "Change the start of your git commit hashes to whatever you want",
);

/**
 * A powerful, fast and reliable backup & sync tool
 */
export const luckybackup = mkPackage(
  nixRaw`pkgs.luckybackup`,
  "A powerful, fast and reliable backup & sync tool",
);

/**
 * luculent font
 */
export const luculent = mkPackage(
  nixRaw`pkgs.luculent`,
  "luculent font",
);

/**
 * Checks for out-of-date package versions
 */
export const luddite = mkPackage(
  nixRaw`pkgs.luddite`,
  "Checks for out-of-date package versions",
);

/**
 * Backup tool for PC game saves
 */
export const ludusavi = mkPackage(
  nixRaw`pkgs.ludusavi`,
  "Backup tool for PC game saves",
);

/**
 * Third person ninja rabbit fighting game
 */
export const lugaru = mkPackage(
  nixRaw`pkgs.lugaru`,
  "Third person ninja rabbit fighting game",
);

/**
 * Python package that helps you build complex pipelines of batch jobs
 */
export const luigi = mkPackage(
  nixRaw`pkgs.luigi`,
  "Python package that helps you build complex pipelines of batch jobs",
);

/**
 * Read the Word of God from your terminal + Apocrypha
 */
export const lukesmithxyz_bible_kjv = mkPackage(
  nixRaw`pkgs.lukesmithxyz-bible-kjv`,
  "Read the Word of God from your terminal + Apocrypha",
);

/**
 * Luke Smith's fork of st
 */
export const lukesmithxyz_st = mkPackage(
  nixRaw`pkgs.lukesmithxyz-st`,
  "Luke Smith's fork of st",
);

/**
 * Simple library for storing metadata in the LUKSv1 header
 */
export const luksmeta = mkPackage(
  nixRaw`pkgs.luksmeta`,
  "Simple library for storing metadata in the LUKSv1 header",
);

/**
 * Console-based email client
 */
export const lumail = mkPackage(
  nixRaw`pkgs.lumail`,
  "Console-based email client",
);

/**
 * A complete open source solution for HDR photography
 */
export const luminanceHDR = mkPackage(
  nixRaw`pkgs.luminanceHDR`,
  "A complete open source solution for HDR photography",
);

/**
 * Icon pack based on marwaita and papirus icons
 */
export const luna_icons = mkPackage(
  nixRaw`pkgs.luna-icons`,
  "Icon pack based on marwaita and papirus icons",
);

/**
 * Free Minecraft client with mods, cosmetics, and performance boost.
 */
export const lunar_client = mkPackage(
  nixRaw`pkgs.lunar-client`,
  "Free Minecraft client with mods, cosmetics, and performance boost.",
);

/**
 * Standard ML compiler that produces Lua/JavaScript
 */
export const lunarml = mkPackage(
  nixRaw`pkgs.lunarml`,
  "Standard ML compiler that produces Lua/JavaScript",
);

/**
 * An all-in-one encrypted todo list, notebook, habit and mood tracker, pomodoro timer, and journaling app
 */
export const lunatask = mkPackage(
  nixRaw`pkgs.lunatask`,
  "An all-in-one encrypted todo list, notebook, habit and mood tracker, pomodoro timer, and journaling app",
);

/**
 * An Erlang inspired runtime for WebAssembly
 */
export const lunatic = mkPackage(
  nixRaw`pkgs.lunatic`,
  "An Erlang inspired runtime for WebAssembly",
);

/**
 * A standalone Luau script runtime
 */
export const lune = mkPackage(
  nixRaw`pkgs.lune`,
  "A standalone Luau script runtime",
);

/**
 * A music creation tool, intended for live use
 */
export const luppp = mkPackage(
  nixRaw`pkgs.luppp`,
  "A music creation tool, intended for live use",
);

/**
 * 2D point-and-click adventure game with a fantasy theme
 */
export const lure_of_the_temptress = mkPackage(
  nixRaw`pkgs.lure-of-the-temptress`,
  "2D point-and-click adventure game with a fantasy theme",
);

/**
 * A simple and pretty alternative to strace
 */
export const lurk = mkPackage(
  nixRaw`pkgs.lurk`,
  "A simple and pretty alternative to strace",
);

/**
 * A blazingly fast interpolated LUT generator and applicator for arbitrary and popular color palettes
 */
export const lutgen = mkPackage(
  nixRaw`pkgs.lutgen`,
  "A blazingly fast interpolated LUT generator and applicator for arbitrary and popular color palettes",
);

/**
 * Open Source gaming platform for GNU/Linux
 */
export const lutris = mkPackage(
  nixRaw`pkgs.lutris`,
  "Open Source gaming platform for GNU/Linux",
);

/**
 * Open Source gaming platform for GNU/Linux
 */
export const lutris_free = mkPackage(
  nixRaw`pkgs.lutris-free`,
  "Open Source gaming platform for GNU/Linux",
);

/**
 * Open Source gaming platform for GNU/Linux
 */
export const lutris_unwrapped = mkPackage(
  nixRaw`pkgs.lutris-unwrapped`,
  "Open Source gaming platform for GNU/Linux",
);

/**
 * Fast and simple video download library and CLI tool written in Go
 */
export const lux = mkPackage(
  nixRaw`pkgs.lux`,
  "Fast and simple video download library and CLI tool written in Go",
);

/**
 * Powerful multi-lingual file viewer / grep
 */
export const lv = mkPackage(
  nixRaw`pkgs.lv`,
  "Powerful multi-lingual file viewer / grep",
);

/**
 * A plugin standard for audio systems
 */
export const lv2 = mkPackage(
  nixRaw`pkgs.lv2`,
  "A plugin standard for audio systems",
);

/**
 * Tools and libraries that may come in handy when writing LV2 plugins in C++
 */
export const lv2_cpp_tools = mkPackage(
  nixRaw`pkgs.lv2-cpp-tools`,
  "Tools and libraries that may come in handy when writing LV2 plugins in C++",
);

/**
 * A benchmark tool for LV2 plugins
 */
export const lv2bm = mkPackage(
  nixRaw`pkgs.lv2bm`,
  "A benchmark tool for LV2 plugins",
);

/**
 * Check whether a given LV2 plugin is up to the specification
 */
export const lv2lint = mkPackage(
  nixRaw`pkgs.lv2lint`,
  "Check whether a given LV2 plugin is up to the specification",
);

/**
 * Image converter for LVGL
 */
export const lv_img_conv = mkPackage(
  nixRaw`pkgs.lv_img_conv`,
  "Image converter for LVGL",
);

/**
 * Tools to support Logical Volume Management (LVM) on Linux
 */
export const lvm2 = mkPackage(
  nixRaw`pkgs.lvm2`,
  "Tools to support Logical Volume Management (LVM) on Linux",
);

/**
 * Tools to support Logical Volume Management (LVM) on Linux
 */
export const lvm2_dmeventd = mkPackage(
  nixRaw`pkgs.lvm2_dmeventd`,
  "Tools to support Logical Volume Management (LVM) on Linux",
);

/**
 * Tools to support Logical Volume Management (LVM) on Linux
 */
export const lvm2_vdo = mkPackage(
  nixRaw`pkgs.lvm2_vdo`,
  "Tools to support Logical Volume Management (LVM) on Linux",
);

/**
 * Optimised synchronisation of LVM snapshots over a network
 */
export const lvmsync = mkPackage(
  nixRaw`pkgs.lvmsync`,
  "Optimised synchronisation of LVM snapshots over a network",
);

/**
 * A set C++ wrappers around the LV2 C API
 */
export const lvtk = mkPackage(
  nixRaw`pkgs.lvtk`,
  "A set C++ wrappers around the LV2 C API",
);

/**
 * Lightweight high-performance multi-threaded web server
 */
export const lwan = mkPackage(
  nixRaw`pkgs.lwan`,
  "Lightweight high-performance multi-threaded web server",
);

/**
 * A live-updating version of the UNIX wc command
 */
export const lwc = mkPackage(
  nixRaw`pkgs.lwc`,
  "A live-updating version of the UNIX wc command",
);

/**
 * Lightweight Window Manager
 */
export const lwm = mkPackage(
  nixRaw`pkgs.lwm`,
  "Lightweight Window Manager",
);

/**
 * Lightweight program for configuring the theme and fonts of gtk applications
 */
export const lxappearance = mkPackage(
  nixRaw`pkgs.lxappearance`,
  "Lightweight program for configuring the theme and fonts of gtk applications",
);

/**
 * Lightweight program for configuring the theme and fonts of gtk applications
 */
export const lxappearance_gtk2 = mkPackage(
  nixRaw`pkgs.lxappearance-gtk2`,
  "Lightweight program for configuring the theme and fonts of gtk applications",
);

/**
 * Userspace tools for Linux Containers, a lightweight virtualization system
 */
export const lxc = mkPackage(
  nixRaw`pkgs.lxc`,
  "Userspace tools for Linux Containers, a lightweight virtualization system",
);

/**
 * FUSE filesystem for LXC
 */
export const lxcfs = mkPackage(
  nixRaw`pkgs.lxcfs`,
  "FUSE filesystem for LXC",
);

/**
 * Daemon based on liblxc offering a REST API to manage containers
 */
export const lxd = mkPackage(
  nixRaw`pkgs.lxd`,
  "Daemon based on liblxc offering a REST API to manage containers",
);

/**
 * Creates and manages a simplestreams lxd image server on top of nginx
 */
export const lxd_image_server = mkPackage(
  nixRaw`pkgs.lxd-image-server`,
  "Creates and manages a simplestreams lxd image server on top of nginx",
);

/**
 * LXD to Incus migration tool
 */
export const lxd_to_incus = mkPackage(
  nixRaw`pkgs.lxd-to-incus`,
  "LXD to Incus migration tool",
);

/**
 * Daemon based on liblxc offering a REST API to manage containers
 */
export const lxd_unwrapped = mkPackage(
  nixRaw`pkgs.lxd-unwrapped`,
  "Daemon based on liblxc offering a REST API to manage containers",
);

/**
 * Command line tool to make a copy from a video DVD for private use
 */
export const lxdvdrip = mkPackage(
  nixRaw`pkgs.lxdvdrip`,
  "Command line tool to make a copy from a video DVD for private use",
);

/**
 * A Simplified Chinese sans-serif font derived from IPAex Gothic
 */
export const lxgw_neoxihei = mkPackage(
  nixRaw`pkgs.lxgw-neoxihei`,
  "A Simplified Chinese sans-serif font derived from IPAex Gothic",
);

/**
 * An open-source Chinese font derived from Fontworks' Klee One
 */
export const lxgw_wenkai = mkPackage(
  nixRaw`pkgs.lxgw-wenkai`,
  "An open-source Chinese font derived from Fontworks' Klee One",
);

/**
 * Tool for communicating with LXI compatible instruments
 */
export const lxi_tools = mkPackage(
  nixRaw`pkgs.lxi-tools`,
  "Tool for communicating with LXI compatible instruments",
);

/**
 * Tool for communicating with LXI compatible instruments
 */
export const lxi_tools_gui = mkPackage(
  nixRaw`pkgs.lxi-tools-gui`,
  "Tool for communicating with LXI compatible instruments",
);

/**
 * Freedesktop.org desktop menus for LXDE
 */
export const lxmenu_data = mkPackage(
  nixRaw`pkgs.lxmenu-data`,
  "Freedesktop.org desktop menus for LXDE",
);

/**
 * Lightweight X11 desktop panel for LXDE
 */
export const lxpanel = mkPackage(
  nixRaw`pkgs.lxpanel`,
  "Lightweight X11 desktop panel for LXDE",
);

/**
 * Standard screen manager of LXDE
 */
export const lxrandr = mkPackage(
  nixRaw`pkgs.lxrandr`,
  "Standard screen manager of LXDE",
);

/**
 * Classic LXDE session manager
 */
export const lxsession = mkPackage(
  nixRaw`pkgs.lxsession`,
  "Classic LXDE session manager",
);

/**
 * Lightweight and desktop independent task manager
 */
export const lxtask = mkPackage(
  nixRaw`pkgs.lxtask`,
  "Lightweight and desktop independent task manager",
);

/**
 * The standard terminal emulator of LXDE
 */
export const lxterminal = mkPackage(
  nixRaw`pkgs.lxterminal`,
  "The standard terminal emulator of LXDE",
);

/**
 * TUI display manager
 */
export const ly = mkPackage(
  nixRaw`pkgs.ly`,
  "TUI display manager",
);

/**
 * A fast, async, stream-based link checker written in Rust.
 */
export const lychee = mkPackage(
  nixRaw`pkgs.lychee`,
  "A fast, async, stream-based link checker written in Rust.",
);

/**
 * Security auditing tool for Linux, macOS, and UNIX-based systems
 */
export const lynis = mkPackage(
  nixRaw`pkgs.lynis`,
  "Security auditing tool for Linux, macOS, and UNIX-based systems",
);

/**
 * A text-mode web browser
 */
export const lynx = mkPackage(
  nixRaw`pkgs.lynx`,
  "A text-mode web browser",
);

/**
 * A simple to use, composable, command line parser for C++ 11 and beyond
 */
export const lyra = mkPackage(
  nixRaw`pkgs.lyra`,
  "A simple to use, composable, command line parser for C++ 11 and beyond",
);

/**
 * Simple and powerful voice changer for Linux, written in GTK 3
 */
export const lyrebird = mkPackage(
  nixRaw`pkgs.lyrebird`,
  "Simple and powerful voice changer for Linux, written in GTK 3",
);

/**
 * WYSIWYM frontend for LaTeX, DocBook
 */
export const lyx = mkPackage(
  nixRaw`pkgs.lyx`,
  "WYSIWYM frontend for LaTeX, DocBook",
);

/**
 * Extremely fast compression algorithm
 */
export const lz4 = mkPackage(
  nixRaw`pkgs.lz4`,
  "Extremely fast compression algorithm",
);

/**
 * In-memory benchmark of open-source LZ77/LZSS/LZMA compressors
 */
export const lzbench = mkPackage(
  nixRaw`pkgs.lzbench`,
  "In-memory benchmark of open-source LZ77/LZSS/LZMA compressors",
);

/**
 * a reference C implementation of the LZFSE compressor
 */
export const lzfse = mkPackage(
  nixRaw`pkgs.lzfse`,
  "a reference C implementation of the LZFSE compressor",
);

/**
 * Lossless data compression codec with LZMA-like ratios but 1.5x-8x faster decompression speed
 */
export const lzham = mkPackage(
  nixRaw`pkgs.lzham`,
  "Lossless data compression codec with LZMA-like ratios but 1.5x-8x faster decompression speed",
);

/**
 * A lossless data compressor based on the LZMA algorithm
 */
export const lzip = mkPackage(
  nixRaw`pkgs.lzip`,
  "A lossless data compressor based on the LZMA algorithm",
);

/**
 * Data recovery tool for lzip compressed files
 */
export const lziprecover = mkPackage(
  nixRaw`pkgs.lziprecover`,
  "Data recovery tool for lzip compressed files",
);

/**
 * Data compression library providing in-memory LZMA compression and decompression functions, including integrity checking of the decompressed data
 */
export const lzlib = mkPackage(
  nixRaw`pkgs.lzlib`,
  "Data compression library providing in-memory LZMA compression and decompression functions, including integrity checking of the decompressed data",
);

/**
 * Real-time data (de)compression library
 */
export const lzo = mkPackage(
  nixRaw`pkgs.lzo`,
  "Real-time data (de)compression library",
);

/**
 * Fast file compressor
 */
export const lzop = mkPackage(
  nixRaw`pkgs.lzop`,
  "Fast file compressor",
);

/**
 * Enhanced fork of ECWolf, a Wolfenstein 3D source port
 */
export const lzwolf = mkPackage(
  nixRaw`pkgs.lzwolf`,
  "Enhanced fork of ECWolf, a Wolfenstein 3D source port",
);

/**
 * M17 Demodulator in C++
 */
export const m17_cxx_demod = mkPackage(
  nixRaw`pkgs.m17-cxx-demod`,
  "M17 Demodulator in C++",
);

/**
 * Multilingual text processing library (database)
 */
export const m17n_db = mkPackage(
  nixRaw`pkgs.m17n_db`,
  "Multilingual text processing library (database)",
);

/**
 * Multilingual text processing library (runtime)
 */
export const m17n_lib = mkPackage(
  nixRaw`pkgs.m17n_lib`,
  "Multilingual text processing library (runtime)",
);

/**
 * Editor for the Midas M32 digital mixer
 */
export const m32edit = mkPackage(
  nixRaw`pkgs.m32edit`,
  "Editor for the Midas M32 digital mixer",
);

/**
 * A Linux program that can communicate with the Micro 3D printer
 */
export const m33_linux = mkPackage(
  nixRaw`pkgs.m33-linux`,
  "A Linux program that can communicate with the Micro 3D printer",
);

/**
 * GNU M4, a macro processor
 */
export const m4 = mkPackage(
  nixRaw`pkgs.m4`,
  "GNU M4, a macro processor",
);

/**
 * Losslessly & gaplessly cut m4a (AAC in MP4) files.
 */
export const m4acut = mkPackage(
  nixRaw`pkgs.m4acut`,
  "Losslessly & gaplessly cut m4a (AAC in MP4) files.",
);

/**
 * Library to do fast arithmetic with dense matrices over F_2
 */
export const m4ri = mkPackage(
  nixRaw`pkgs.m4ri`,
  "Library to do fast arithmetic with dense matrices over F_2",
);

/**
 * Library for matrix multiplication, reduction and inversion over GF(2^k) for 2 <= k <= 10
 */
export const m4rie = mkPackage(
  nixRaw`pkgs.m4rie`,
  "Library for matrix multiplication, reduction and inversion over GF(2^k) for 2 <= k <= 10",
);

/**
 * Swiss Army Knife for macOS
 */
export const m_cli = mkPackage(
  nixRaw`pkgs.m-cli`,
  "Swiss Army Knife for macOS",
);

/**
 * a federated matrix identity server; fork of mxisd
 */
export const ma1sd = mkPackage(
  nixRaw`pkgs.ma1sd`,
  "a federated matrix identity server; fork of mxisd",
);

/**
 * APE codec and decompressor
 */
export const mac = mkPackage(
  nixRaw`pkgs.mac`,
  "APE codec and decompressor",
);

/**
 * 68K and PowerPC Mac disk partitioning utility, Adélie Linux version
 */
export const mac_fdisk = mkPackage(
  nixRaw`pkgs.mac-fdisk`,
  "68K and PowerPC Mac disk partitioning utility, Adélie Linux version",
);

/**
 * A utility for viewing/manipulating the MAC address of network interfaces
 */
export const macchanger = mkPackage(
  nixRaw`pkgs.macchanger`,
  "A utility for viewing/manipulating the MAC address of network interfaces",
);

/**
 * A fast, minimal and customizable system information fetcher
 */
export const macchina = mkPackage(
  nixRaw`pkgs.macchina`,
  "A fast, minimal and customizable system information fetcher",
);

/**
 * Utility to ease bundling libraries into executables for OSX
 */
export const macdylibbundler = mkPackage(
  nixRaw`pkgs.macdylibbundler`,
  "Utility to ease bundling libraries into executables for OSX",
);

/**
 * Build time stubs for FUSE on macOS
 */
export const macfuse_stubs = mkPackage(
  nixRaw`pkgs.macfuse-stubs`,
  "Build time stubs for FUSE on macOS",
);

/**
 * System monitoring service for mackerel.io
 */
export const mackerel_agent = mkPackage(
  nixRaw`pkgs.mackerel-agent`,
  "System monitoring service for mackerel.io",
);

/**
 * Mascot Constructive Pilot for X
 */
export const macopix = mkPackage(
  nixRaw`pkgs.macopix`,
  "Mascot Constructive Pilot for X",
);

/**
 * Model-based Analysis for ChIP-Seq
 */
export const macs2 = mkPackage(
  nixRaw`pkgs.macs2`,
  "Model-based Analysis for ChIP-Seq",
);

/**
 * Multiple alignment of coding sequences
 */
export const macse = mkPackage(
  nixRaw`pkgs.macse`,
  "Multiple alignment of coding sequences",
);

/**
 * Vim - the text editor - for macOS
 */
export const macvim = mkPackage(
  nixRaw`pkgs.macvim`,
  "Vim - the text editor - for macOS",
);

/**
 * Composable all-in-one mail server
 */
export const maddy = mkPackage(
  nixRaw`pkgs.maddy`,
  "Composable all-in-one mail server",
);

/**
 * CLI for the Mastodon social network API
 */
export const madonctl = mkPackage(
  nixRaw`pkgs.madonctl`,
  "CLI for the Mastodon social network API",
);

/**
 * An arcade-style game resembling Asteroids
 */
export const maelstrom = mkPackage(
  nixRaw`pkgs.maelstrom`,
  "An arcade-style game resembling Asteroids",
);

/**
 * Maestro file parser
 */
export const maeparser = mkPackage(
  nixRaw`pkgs.maeparser`,
  "Maestro file parser",
);

/**
 * Open-source Dropbox client for macOS and Linux
 */
export const maestral = mkPackage(
  nixRaw`pkgs.maestral`,
  "Open-source Dropbox client for macOS and Linux",
);

/**
 * GUI front-end for maestral (an open-source Dropbox client) for Linux
 */
export const maestral_gui = mkPackage(
  nixRaw`pkgs.maestral-gui`,
  "GUI front-end for maestral (an open-source Dropbox client) for Linux",
);

/**
 * Mobile UI Automation tool
 */
export const maestro = mkPackage(
  nixRaw`pkgs.maestro`,
  "Mobile UI Automation tool",
);

/**
 * Multiple alignment program for amino acid or nucleotide sequences
 */
export const mafft = mkPackage(
  nixRaw`pkgs.mafft`,
  "Multiple alignment program for amino acid or nucleotide sequences",
);

/**
 * A Make/Rake-like Build Tool Using Go
 */
export const mage = mkPackage(
  nixRaw`pkgs.mage`,
  "A Make/Rake-like Build Tool Using Go",
);

/**
 * Static reflection for enums (to string, from string, iteration) for modern C++
 */
export const magic_enum = mkPackage(
  nixRaw`pkgs.magic-enum`,
  "Static reflection for enums (to string, from string, iteration) for modern C++",
);

/**
 * VLSI layout tool written in Tcl
 */
export const magic_vlsi = mkPackage(
  nixRaw`pkgs.magic-vlsi`,
  "VLSI layout tool written in Tcl",
);

/**
 * Securely transfer data between computers
 */
export const magic_wormhole = mkPackage(
  nixRaw`pkgs.magic-wormhole`,
  "Securely transfer data between computers",
);

/**
 * Rust implementation of Magic Wormhole, with new features and enhancements
 */
export const magic_wormhole_rs = mkPackage(
  nixRaw`pkgs.magic-wormhole-rs`,
  "Rust implementation of Magic Wormhole, with new features and enhancements",
);

/**
 * Matrix Algebra on GPU and Multicore Architectures
 */
export const magma = mkPackage(
  nixRaw`pkgs.magma`,
  "Matrix Algebra on GPU and Multicore Architectures",
);

/**
 * Matrix Algebra on GPU and Multicore Architectures
 */
export const magma_2_6_2 = mkPackage(
  nixRaw`pkgs.magma_2_6_2`,
  "Matrix Algebra on GPU and Multicore Architectures",
);

/**
 * Matrix Algebra on GPU and Multicore Architectures
 */
export const magma_2_7_2 = mkPackage(
  nixRaw`pkgs.magma_2_7_2`,
  "Matrix Algebra on GPU and Multicore Architectures",
);

/**
 * Matrix Algebra on GPU and Multicore Architectures
 */
export const magma_cuda = mkPackage(
  nixRaw`pkgs.magma-cuda`,
  "Matrix Algebra on GPU and Multicore Architectures",
);

/**
 * Matrix Algebra on GPU and Multicore Architectures
 */
export const magma_cuda_static = mkPackage(
  nixRaw`pkgs.magma-cuda-static`,
  "Matrix Algebra on GPU and Multicore Architectures",
);

/**
 * Matrix Algebra on GPU and Multicore Architectures
 */
export const magma_hip = mkPackage(
  nixRaw`pkgs.magma-hip`,
  "Matrix Algebra on GPU and Multicore Architectures",
);

/**
 * Autonomous (self-hosted) BitTorrent DHT search engine suite
 */
export const magnetico = mkPackage(
  nixRaw`pkgs.magnetico`,
  "Autonomous (self-hosted) BitTorrent DHT search engine suite",
);

/**
 * Icons based on Breeze and Super Flat Remix
 */
export const maia_icon_theme = mkPackage(
  nixRaw`pkgs.maia-icon-theme`,
  "Icons based on Breeze and Super Flat Remix",
);

/**
 * Tool to collect details about an username
 */
export const maigret = mkPackage(
  nixRaw`pkgs.maigret`,
  "Tool to collect details about an username",
);

/**
 * Medley Interlisp virtual machine
 */
export const maiko = mkPackage(
  nixRaw`pkgs.maiko`,
  "Medley Interlisp virtual machine",
);

/**
 * Helper application and MIME type associations for file types
 */
export const mailcap = mkPackage(
  nixRaw`pkgs.mailcap`,
  "Helper application and MIME type associations for file types",
);

/**
 * SMTP server and web interface to locally test outbound emails
 */
export const mailcatcher = mkPackage(
  nixRaw`pkgs.mailcatcher`,
  "SMTP server and web interface to locally test outbound emails",
);

/**
 * Simple command line tool to check for new messages
 */
export const mailcheck = mkPackage(
  nixRaw`pkgs.mailcheck`,
  "Simple command line tool to check for new messages",
);

/**
 * A simple and asynchronous API to work with e-mail protocols IMAP, POP and SMTP
 */
export const mailcore2 = mkPackage(
  nixRaw`pkgs.mailcore2`,
  "A simple and asynchronous API to work with e-mail protocols IMAP, POP and SMTP",
);

/**
 * OAuth2 tool for mail clients
 */
export const mailctl = mkPackage(
  nixRaw`pkgs.mailctl`,
  "OAuth2 tool for mail clients",
);

/**
 * Mail filter/mail delivery agent that is used by the Courier Mail Server
 */
export const maildrop = mkPackage(
  nixRaw`pkgs.maildrop`,
  "Mail filter/mail delivery agent that is used by the Courier Mail Server",
);

/**
 * Web and API based SMTP testing
 */
export const mailhog = mkPackage(
  nixRaw`pkgs.mailhog`,
  "Web and API based SMTP testing",
);

/**
 * Free software for managing electronic mail discussion and newsletter lists
 */
export const mailman = mkPackage(
  nixRaw`pkgs.mailman`,
  "Free software for managing electronic mail discussion and newsletter lists",
);

/**
 * Mailman archiver plugin for HyperKitty
 */
export const mailman_hyperkitty = mkPackage(
  nixRaw`pkgs.mailman-hyperkitty`,
  "Mailman archiver plugin for HyperKitty",
);

/**
 * Mailman archive -> rss converter
 */
export const mailman_rss = mkPackage(
  nixRaw`pkgs.mailman-rss`,
  "Mailman archive -> rss converter",
);

/**
 * Django project for Mailman 3 web interface
 */
export const mailman_web = mkPackage(
  nixRaw`pkgs.mailman-web`,
  "Django project for Mailman 3 web interface",
);

/**
 * An email and SMTP testing tool with API for developers
 */
export const mailpit = mkPackage(
  nixRaw`pkgs.mailpit`,
  "An email and SMTP testing tool with API for developers",
);

/**
 * CLI email sending tool
 */
export const mailsend = mkPackage(
  nixRaw`pkgs.mailsend`,
  "CLI email sending tool",
);

/**
 * A beautiful, fast and maintained fork of Nylas Mail by one of the original authors
 */
export const mailspring = mkPackage(
  nixRaw`pkgs.mailspring`,
  "A beautiful, fast and maintained fork of Nylas Mail by one of the original authors",
);

/**
 * Rich and powerful protocol-independent mail framework
 */
export const mailutils = mkPackage(
  nixRaw`pkgs.mailutils`,
  "Rich and powerful protocol-independent mail framework",
);

/**
 * A command-line screenshot utility
 */
export const maim = mkPackage(
  nixRaw`pkgs.maim`,
  "A command-line screenshot utility",
);

/**
 * Web interface for managing and controlling 3D printers with Klipper
 */
export const mainsail = mkPackage(
  nixRaw`pkgs.mainsail`,
  "Web interface for managing and controlling 3D printers with Klipper",
);

/**
 * Program for indexing and searching email messages stored in maildir, MH or mbox
 */
export const mairix = mkPackage(
  nixRaw`pkgs.mairix`,
  "Program for indexing and searching email messages stored in maildir, MH or mbox",
);

/**
 * CLI tool for the Maizzle Email Framework
 */
export const maizzle = mkPackage(
  nixRaw`pkgs.maizzle`,
  "CLI tool for the Maizzle Email Framework",
);

export const makeBinaryWrapper = mkPackage(
  nixRaw`pkgs.makeBinaryWrapper`,
  "",
);

export const makeGCOVReport = mkPackage(
  nixRaw`pkgs.makeGCOVReport`,
  "",
);

/**
 * Tool for copying binaries and their dependencies
 */
export const makeInitrdNGTool = mkPackage(
  nixRaw`pkgs.makeInitrdNGTool`,
  "Tool for copying binaries and their dependencies",
);

export const makeShellWrapper = mkPackage(
  nixRaw`pkgs.makeShellWrapper`,
  "",
);

export const makeWrapper = mkPackage(
  nixRaw`pkgs.makeWrapper`,
  "",
);

/**
 * Packaged sources for the first bootstrapping stage
 */
export const make_minimal_bootstrap_sources = mkPackage(
  nixRaw`pkgs.make-minimal-bootstrap-sources`,
  "Packaged sources for the first bootstrapping stage",
);

/**
 * Create bootable USB disks using the FAT filesystem and syslinux
 */
export const makebootfat = mkPackage(
  nixRaw`pkgs.makebootfat`,
  "Create bootable USB disks using the FAT filesystem and syslinux",
);

/**
 * Creates a graph of dependencies from GNU-Make; Output is a graphiz-dot file or a Gexf-XML file
 */
export const makefile2graph = mkPackage(
  nixRaw`pkgs.makefile2graph`,
  "Creates a graph of dependencies from GNU-Make; Output is a graphiz-dot file or a Gexf-XML file",
);

/**
 * Convert blu-ray and dvd to mkv
 */
export const makemkv = mkPackage(
  nixRaw`pkgs.makemkv`,
  "Convert blu-ray and dvd to mkv",
);

/**
 * Make mechanical PCBs by combining shapes together.
 */
export const maker_panel = mkPackage(
  nixRaw`pkgs.maker-panel`,
  "Make mechanical PCBs by combining shapes together.",
);

/**
 * A clean, simple RPM packager reimplemented completely from scratch
 */
export const makerpm = mkPackage(
  nixRaw`pkgs.makerpm`,
  "A clean, simple RPM packager reimplemented completely from scratch",
);

/**
 * Utility to create self-extracting packages
 */
export const makeself = mkPackage(
  nixRaw`pkgs.makeself`,
  "Utility to create self-extracting packages",
);

/**
 * A lightweight Wayland notification daemon
 */
export const mako = mkPackage(
  nixRaw`pkgs.mako`,
  "A lightweight Wayland notification daemon",
);

/**
 * Parental controls library
 */
export const malcontent = mkPackage(
  nixRaw`pkgs.malcontent`,
  "Parental controls library",
);

/**
 * UI components for parental controls library
 */
export const malcontent_ui = mkPackage(
  nixRaw`pkgs.malcontent-ui`,
  "UI components for parental controls library",
);

/**
 * Tool to detect Go structs that would take less memory if their fields were sorted
 */
export const maligned = mkPackage(
  nixRaw`pkgs.maligned`,
  "Tool to detect Go structs that would take less memory if their fields were sorted",
);

/**
 * Core libraries of Maliit and server
 */
export const maliit_framework = mkPackage(
  nixRaw`pkgs.maliit-framework`,
  "Core libraries of Maliit and server",
);

/**
 * Virtual keyboard
 */
export const maliit_keyboard = mkPackage(
  nixRaw`pkgs.maliit-keyboard`,
  "Virtual keyboard",
);

/**
 * Memory tool to find where you allocate your memory
 */
export const malt = mkPackage(
  nixRaw`pkgs.malt`,
  "Memory tool to find where you allocate your memory",
);

/**
 * A multi-purpose emulation framework
 */
export const mame = mkPackage(
  nixRaw`pkgs.mame`,
  "A multi-purpose emulation framework",
);

/**
 * A multi-purpose emulation framework (tools only)
 */
export const mame_tools = mkPackage(
  nixRaw`pkgs.mame-tools`,
  "A multi-purpose emulation framework (tools only)",
);

/**
 * An implementation of the standard Unix documentation system accessed using the man command
 */
export const man = mkPackage(
  nixRaw`pkgs.man`,
  "An implementation of the standard Unix documentation system accessed using the man command",
);

/**
 * An implementation of the standard Unix documentation system accessed using the man command
 */
export const man_db = mkPackage(
  nixRaw`pkgs.man-db`,
  "An implementation of the standard Unix documentation system accessed using the man command",
);

/**
 * Linux development manual pages
 */
export const man_pages = mkPackage(
  nixRaw`pkgs.man-pages`,
  "Linux development manual pages",
);

/**
 * POSIX man-pages (0p, 1p, 3p)
 */
export const man_pages_posix = mkPackage(
  nixRaw`pkgs.man-pages-posix`,
  "POSIX man-pages (0p, 1p, 3p)",
);

/**
 * A free OpenSource 2D MMORPG client
 */
export const manaplus = mkPackage(
  nixRaw`pkgs.manaplus`,
  "A free OpenSource 2D MMORPG client",
);

/**
 * A 3D fractal rendering engine
 */
export const mandelbulber = mkPackage(
  nixRaw`pkgs.mandelbulber`,
  "A 3D fractal rendering engine",
);

/**
 * suite of tools compiling mdoc and man
 */
export const mandoc = mkPackage(
  nixRaw`pkgs.mandoc`,
  "suite of tools compiling mdoc and man",
);

/**
 * Markdown to groff (man page) converter
 */
export const mandown = mkPackage(
  nixRaw`pkgs.mandown`,
  "Markdown to groff (man page) converter",
);

/**
 * Bash script for reading mangas via the terminal by scraping manganato
 */
export const manga_cli = mkPackage(
  nixRaw`pkgs.manga-cli`,
  "Bash script for reading mangas via the terminal by scraping manganato",
);

/**
 * A fancy CLI app written in Go which scrapes, downloads and packs manga into different formats
 */
export const mangal = mkPackage(
  nixRaw`pkgs.mangal`,
  "A fancy CLI app written in Go which scrapes, downloads and packs manga into different formats",
);

/**
 * Qt manga reader for local files
 */
export const mangareader = mkPackage(
  nixRaw`pkgs.mangareader`,
  "Qt manga reader for local files",
);

/**
 * A Vulkan and OpenGL overlay for monitoring FPS, temperatures, CPU/GPU load and more
 */
export const mangohud = mkPackage(
  nixRaw`pkgs.mangohud`,
  "A Vulkan and OpenGL overlay for monitoring FPS, temperatures, CPU/GPU load and more",
);

/**
 * CLI tool to help you manage multiple repositories
 */
export const mani = mkPackage(
  nixRaw`pkgs.mani`,
  "CLI tool to help you manage multiple repositories",
);

/**
 * Command line tool to create and query container image manifest list/indexes
 */
export const manifest_tool = mkPackage(
  nixRaw`pkgs.manifest-tool`,
  "Command line tool to create and query container image manifest list/indexes",
);

/**
 * Client library for OpenStack Manila API
 */
export const manilaclient = mkPackage(
  nixRaw`pkgs.manilaclient`,
  "Client library for OpenStack Manila API",
);

/**
 * Animation engine for explanatory math videos - Community version
 */
export const manim = mkPackage(
  nixRaw`pkgs.manim`,
  "Animation engine for explanatory math videos - Community version",
);

/**
 * A Fast Documentation Searcher for Nix
 */
export const manix = mkPackage(
  nixRaw`pkgs.manix`,
  "A Fast Documentation Searcher for Nix",
);

/**
 * Open-source modern sans-serif font family
 */
export const manrope = mkPackage(
  nixRaw`pkgs.manrope`,
  "Open-source modern sans-serif font family",
);

/**
 * Structural variant caller
 */
export const manta = mkPackage(
  nixRaw`pkgs.manta`,
  "Structural variant caller",
);

/**
 * A parallel, pure variant of Standard ML
 */
export const manticore = mkPackage(
  nixRaw`pkgs.manticore`,
  "A parallel, pure variant of Standard ML",
);

/**
 * Easy to use open source fast database for search
 */
export const manticoresearch = mkPackage(
  nixRaw`pkgs.manticoresearch`,
  "Easy to use open source fast database for search",
);

/**
 * Tool used to hunt down API key leaks in JS files and pages
 */
export const mantra = mkPackage(
  nixRaw`pkgs.mantra`,
  "Tool used to hunt down API key leaks in JS files and pages",
);

/**
 * A open-source tool for writers
 */
export const manuskript = mkPackage(
  nixRaw`pkgs.manuskript`,
  "A open-source tool for writers",
);

/**
 * Map lines from stdin to commands
 */
export const map_cmd = mkPackage(
  nixRaw`pkgs.map-cmd`,
  "Map lines from stdin to commands",
);

/**
 * A server that implements tile caching to speed up access to WMS layers
 */
export const mapcache = mkPackage(
  nixRaw`pkgs.mapcache`,
  "A server that implements tile caching to speed up access to WMS layers",
);

/**
 * Small utility program to perform multiple operations for a given subnet/CIDR ranges
 */
export const mapcidr = mkPackage(
  nixRaw`pkgs.mapcidr`,
  "Small utility program to perform multiple operations for a given subnet/CIDR ranges",
);

/**
 * Small command line application for keeping your project hostnames in sync with /etc/hosts
 */
export const maphosts = mkPackage(
  nixRaw`pkgs.maphosts`,
  "Small command line application for keeping your project hostnames in sync with /etc/hosts",
);

/**
 * Open source monospace TrueType font with round corner and ligatures for IDE and command line

 */
export const maple_mono = mkPackage(
  nixRaw`pkgs.maple-mono`,
  "Open source monospace TrueType font with round corner and ligatures for IDE and command line\n",
);

/**
 * Open source Nerd Font font with round corner and ligatures for IDE and command line

 */
export const maple_mono_NF = mkPackage(
  nixRaw`pkgs.maple-mono-NF`,
  "Open source Nerd Font font with round corner and ligatures for IDE and command line\n",
);

/**
 * Open source Nerd Font SC font with round corner and ligatures for IDE and command line

 */
export const maple_mono_SC_NF = mkPackage(
  nixRaw`pkgs.maple-mono-SC-NF`,
  "Open source Nerd Font SC font with round corner and ligatures for IDE and command line\n",
);

/**
 * Open source ttf autohint font with round corner and ligatures for IDE and command line

 */
export const maple_mono_autohint = mkPackage(
  nixRaw`pkgs.maple-mono-autohint`,
  "Open source ttf autohint font with round corner and ligatures for IDE and command line\n",
);

/**
 * Open source OpenType font with round corner and ligatures for IDE and command line

 */
export const maple_mono_otf = mkPackage(
  nixRaw`pkgs.maple-mono-otf`,
  "Open source OpenType font with round corner and ligatures for IDE and command line\n",
);

/**
 * Open source WOFF2.0 font with round corner and ligatures for IDE and command line

 */
export const maple_mono_woff2 = mkPackage(
  nixRaw`pkgs.maple-mono-woff2`,
  "Open source WOFF2.0 font with round corner and ligatures for IDE and command line\n",
);

/**
 * Open source video mapping software
 */
export const mapmap = mkPackage(
  nixRaw`pkgs.mapmap`,
  "Open source video mapping software",
);

/**
 * An open source toolkit for developing mapping applications
 */
export const mapnik = mkPackage(
  nixRaw`pkgs.mapnik`,
  "An open source toolkit for developing mapping applications",
);

/**
 * Open source proxy for geospatial data
 */
export const mapproxy = mkPackage(
  nixRaw`pkgs.mapproxy`,
  "Open source proxy for geospatial data",
);

/**
 * Platform for publishing spatial data and interactive mapping applications to the web
 */
export const mapserver = mkPackage(
  nixRaw`pkgs.mapserver`,
  "Platform for publishing spatial data and interactive mapping applications to the web",
);

/**
 * Virtual Tabletop for playing roleplaying games with remote players or face to face
 */
export const maptool = mkPackage(
  nixRaw`pkgs.maptool`,
  "Virtual Tabletop for playing roleplaying games with remote players or face to face",
);

/**
 * First person Super Mario Bros
 */
export const mar1d = mkPackage(
  nixRaw`pkgs.mar1d`,
  "First person Super Mario Bros",
);

/**
 * Modi script font with Graphite and OpenType support
 */
export const marathi_cursive = mkPackage(
  nixRaw`pkgs.marathi-cursive`,
  "Modi script font with Graphite and OpenType support",
);

/**
 * CLI tool for Marathon
 */
export const marathonctl = mkPackage(
  nixRaw`pkgs.marathonctl`,
  "CLI tool for Marathon",
);

/**
 * A fractal physics game.
 */
export const marble_marcher_ce = mkPackage(
  nixRaw`pkgs.marble-marcher-ce`,
  "A fractal physics game.",
);

/**
 * Crossover between Super Mario Bros. and Portal
 */
export const mari0 = mkPackage(
  nixRaw`pkgs.mari0`,
  "Crossover between Super Mario Bros. and Portal",
);

/**
 * An enhanced, drop-in replacement for MySQL
 */
export const mariadb = mkPackage(
  nixRaw`pkgs.mariadb`,
  "An enhanced, drop-in replacement for MySQL",
);

/**
 * An enhanced, drop-in replacement for MySQL
 */
export const mariadb_1010 = mkPackage(
  nixRaw`pkgs.mariadb_1010`,
  "An enhanced, drop-in replacement for MySQL",
);

/**
 * An enhanced, drop-in replacement for MySQL
 */
export const mariadb_1011 = mkPackage(
  nixRaw`pkgs.mariadb_1011`,
  "An enhanced, drop-in replacement for MySQL",
);

/**
 * An enhanced, drop-in replacement for MySQL
 */
export const mariadb_105 = mkPackage(
  nixRaw`pkgs.mariadb_105`,
  "An enhanced, drop-in replacement for MySQL",
);

/**
 * An enhanced, drop-in replacement for MySQL
 */
export const mariadb_106 = mkPackage(
  nixRaw`pkgs.mariadb_106`,
  "An enhanced, drop-in replacement for MySQL",
);

/**
 * An enhanced, drop-in replacement for MySQL
 */
export const mariadb_110 = mkPackage(
  nixRaw`pkgs.mariadb_110`,
  "An enhanced, drop-in replacement for MySQL",
);

/**
 * Client library that can be used to connect to MySQL or MariaDB
 */
export const mariadb_connector_c = mkPackage(
  nixRaw`pkgs.mariadb-connector-c`,
  "Client library that can be used to connect to MySQL or MariaDB",
);

/**
 * Client library that can be used to connect to MySQL or MariaDB
 */
export const mariadb_connector_c_3_1 = mkPackage(
  nixRaw`pkgs.mariadb-connector-c_3_1`,
  "Client library that can be used to connect to MySQL or MariaDB",
);

/**
 * Client library that can be used to connect to MySQL or MariaDB
 */
export const mariadb_connector_c_3_2 = mkPackage(
  nixRaw`pkgs.mariadb-connector-c_3_2`,
  "Client library that can be used to connect to MySQL or MariaDB",
);

/**
 * Client library that can be used to connect to MySQL or MariaDB
 */
export const mariadb_connector_c_3_3 = mkPackage(
  nixRaw`pkgs.mariadb-connector-c_3_3`,
  "Client library that can be used to connect to MySQL or MariaDB",
);

/**
 * An enhanced, drop-in replacement for MySQL
 */
export const mariadb_embedded = mkPackage(
  nixRaw`pkgs.mariadb-embedded`,
  "An enhanced, drop-in replacement for MySQL",
);

/**
 * Galera 3 wsrep provider library
 */
export const mariadb_galera = mkPackage(
  nixRaw`pkgs.mariadb-galera`,
  "Galera 3 wsrep provider library",
);

/**
 * Static and space-efficient trie data structure library
 */
export const marisa = mkPackage(
  nixRaw`pkgs.marisa`,
  "Static and space-efficient trie data structure library",
);

/**
 * A tool for syncing your markdown documentation with Atlassian Confluence pages
 */
export const mark = mkPackage(
  nixRaw`pkgs.mark`,
  "A tool for syncing your markdown documentation with Atlassian Confluence pages",
);

/**
 * Tool to convert Markdown files into Anki Decks
 */
export const markdown_anki_decks = mkPackage(
  nixRaw`pkgs.markdown-anki-decks`,
  "Tool to convert Markdown files into Anki Decks",
);

/**
 * Command line interface for MarkdownLint
 */
export const markdownlint_cli = mkPackage(
  nixRaw`pkgs.markdownlint-cli`,
  "Command line interface for MarkdownLint",
);

/**
 * A fast, flexible, configuration-based command-line interface for linting Markdown/CommonMark files with the markdownlint library
 */
export const markdownlint_cli2 = mkPackage(
  nixRaw`pkgs.markdownlint-cli2`,
  "A fast, flexible, configuration-based command-line interface for linting Markdown/CommonMark files with the markdownlint library",
);

/**
 * Markdown editor for the Linux desktop made with GTK3
 */
export const marker = mkPackage(
  nixRaw`pkgs.marker`,
  "Markdown editor for the Linux desktop made with GTK3",
);

/**
 * Stock, currency and cryptocurrency tracker
 */
export const markets = mkPackage(
  nixRaw`pkgs.markets`,
  "Stock, currency and cryptocurrency tracker",
);

/**
 * Your personal markdown scribe with template-engine and Git(Hub) & RSS powers
 */
export const markscribe = mkPackage(
  nixRaw`pkgs.markscribe`,
  "Your personal markdown scribe with template-engine and Git(Hub) & RSS powers",
);

/**
 * Language Server for Markdown
 */
export const marksman = mkPackage(
  nixRaw`pkgs.marksman`,
  "Language Server for Markdown",
);

/**
 * A simple and elegant markdown editor, available for Linux, macOS and Windows
 */
export const marktext = mkPackage(
  nixRaw`pkgs.marktext`,
  "A simple and elegant markdown editor, available for Linux, macOS and Windows",
);

/**
 * A hybrid thread / fiber task scheduler written in C++ 11
 */
export const marl = mkPackage(
  nixRaw`pkgs.marl`,
  "A hybrid thread / fiber task scheduler written in C++ 11",
);

/**
 * Marlin 3D printer timing simulator
 */
export const marlin_calc = mkPackage(
  nixRaw`pkgs.marlin-calc`,
  "Marlin 3D printer timing simulator",
);

/**
 * About A CLI interface for Marp and Marpit based converters
 */
export const marp_cli = mkPackage(
  nixRaw`pkgs.marp-cli`,
  "About A CLI interface for Marp and Marpit based converters",
);

/**
 * A game about fighting with ships in a 2D space setting
 */
export const mars = mkPackage(
  nixRaw`pkgs.mars`,
  "A game about fighting with ships in a 2D space setting",
);

/**
 * An IDE for programming in MIPS assembly language intended for educational-level use
 */
export const mars_mips = mkPackage(
  nixRaw`pkgs.mars-mips`,
  "An IDE for programming in MIPS assembly language intended for educational-level use",
);

/**
 * An Algol-60-to-C translator
 */
export const marst = mkPackage(
  nixRaw`pkgs.marst`,
  "An Algol-60-to-C translator",
);

/**
 * Free and open-source monospaced font from Evil Martians
 */
export const martian_mono = mkPackage(
  nixRaw`pkgs.martian-mono`,
  "Free and open-source monospaced font from Evil Martians",
);

/**
 * Blazing fast and lightweight PostGIS vector tiles server
 */
export const martin = mkPackage(
  nixRaw`pkgs.martin`,
  "Blazing fast and lightweight PostGIS vector tiles server",
);

/**
 * Java framework around the IRC protocol to allow application writers easy manipulation of the protocol and client state
 */
export const martyr = mkPackage(
  nixRaw`pkgs.martyr`,
  "Java framework around the IRC protocol to allow application writers easy manipulation of the protocol and client state",
);

/**
 * A chemical modelling, analysis and structure drawing program
 */
export const marvin = mkPackage(
  nixRaw`pkgs.marvin`,
  "A chemical modelling, analysis and structure drawing program",
);

/**
 * GTK theme supporting Budgie, Pantheon, Mate, Xfce4 and GNOME desktops
 */
export const marwaita = mkPackage(
  nixRaw`pkgs.marwaita`,
  "GTK theme supporting Budgie, Pantheon, Mate, Xfce4 and GNOME desktops",
);

/**
 * Manjaro Style (green version) of Marwaita GTK theme
 */
export const marwaita_manjaro = mkPackage(
  nixRaw`pkgs.marwaita-manjaro`,
  "Manjaro Style (green version) of Marwaita GTK theme",
);

/**
 * Marwaita GTK theme with Peppermint Os Linux style
 */
export const marwaita_peppermint = mkPackage(
  nixRaw`pkgs.marwaita-peppermint`,
  "Marwaita GTK theme with Peppermint Os Linux style",
);

/**
 * Marwaita GTK theme with Pop_os Linux style
 */
export const marwaita_pop_os = mkPackage(
  nixRaw`pkgs.marwaita-pop_os`,
  "Marwaita GTK theme with Pop_os Linux style",
);

/**
 * Ubuntu Style of Marwaita GTK theme
 */
export const marwaita_ubuntu = mkPackage(
  nixRaw`pkgs.marwaita-ubuntu`,
  "Ubuntu Style of Marwaita GTK theme",
);

/**
 * Mac App Store command line interface
 */
export const mas = mkPackage(
  nixRaw`pkgs.mas`,
  "Mac App Store command line interface",
);

/**
 * scalability-focused, untraceable, secure, and fungible cryptocurrency using the RingCT protocol
 */
export const masari = mkPackage(
  nixRaw`pkgs.masari`,
  "scalability-focused, untraceable, secure, and fungible cryptocurrency using the RingCT protocol",
);

/**
 * A CLI task runner defined by a simple markdown file
 */
export const mask = mkPackage(
  nixRaw`pkgs.mask`,
  "A CLI task runner defined by a simple markdown file",
);

/**
 * A CAD tool for extracting bits from Mask ROM photographs
 */
export const maskromtool = mkPackage(
  nixRaw`pkgs.maskromtool`,
  "A CAD tool for extracting bits from Mask ROM photographs",
);

/**
 * Fast scan of the Internet
 */
export const masscan = mkPackage(
  nixRaw`pkgs.masscan`,
  "Fast scan of the Internet",
);

/**
 * Tool that visualizes massif data generated by valgrind
 */
export const massif_visualizer = mkPackage(
  nixRaw`pkgs.massif-visualizer`,
  "Tool that visualizes massif data generated by valgrind",
);

/**
 * Easily rename multiple files using your text editor
 */
export const massren = mkPackage(
  nixRaw`pkgs.massren`,
  "Easily rename multiple files using your text editor",
);

/**
 * automatic mastering plugin for live streaming, podcasts and internet radio
 */
export const master_me = mkPackage(
  nixRaw`pkgs.master_me`,
  "automatic mastering plugin for live streaming, podcasts and internet radio",
);

/**
 * Master PDF Editor
 */
export const masterpdfeditor = mkPackage(
  nixRaw`pkgs.masterpdfeditor`,
  "Master PDF Editor",
);

/**
 * Master PDF Editor - version 4, without watermark
 */
export const masterpdfeditor4 = mkPackage(
  nixRaw`pkgs.masterpdfeditor4`,
  "Master PDF Editor - version 4, without watermark",
);

/**
 * Self-hosted, globally interconnected microblogging software based on ActivityPub
 */
export const mastodon = mkPackage(
  nixRaw`pkgs.mastodon`,
  "Self-hosted, globally interconnected microblogging software based on ActivityPub",
);

/**
 * Utility for backing up your Mastodon content
 */
export const mastodon_archive = mkPackage(
  nixRaw`pkgs.mastodon-archive`,
  "Utility for backing up your Mastodon content",
);

/**
 * Bot to publish twitter, tumblr or rss posts to an mastodon account.
 */
export const mastodon_bot = mkPackage(
  nixRaw`pkgs.mastodon-bot`,
  "Bot to publish twitter, tumblr or rss posts to an mastodon account.",
);

/**
 * A collection of command-line tools to work with your Mastodon account
 */
export const mastotool = mkPackage(
  nixRaw`pkgs.mastotool`,
  "A collection of command-line tools to work with your Mastodon account",
);

/**
 * A handy tool to trash your metadata
 */
export const mat2 = mkPackage(
  nixRaw`pkgs.mat2`,
  "A handy tool to trash your metadata",
);

/**
 * A stylish flat Design theme for GTK based desktop environments
 */
export const matcha_gtk_theme = mkPackage(
  nixRaw`pkgs.matcha-gtk-theme`,
  "A stylish flat Design theme for GTK based desktop environments",
);

/**
 * Daily digest generator from a list of RSS feeds
 */
export const matcha_rss_digest = mkPackage(
  nixRaw`pkgs.matcha-rss-digest`,
  "Daily digest generator from a list of RSS feeds",
);

/**
 * X window manager for non-desktop embedded systems
 */
export const matchbox = mkPackage(
  nixRaw`pkgs.matchbox`,
  "X window manager for non-desktop embedded systems",
);

/**
 * A port of the materia theme for Plasma
 */
export const materia_kde_theme = mkPackage(
  nixRaw`pkgs.materia-kde-theme`,
  "A port of the materia theme for Plasma",
);

/**
 * Material Design theme for GNOME/GTK based desktop environments
 */
export const materia_theme = mkPackage(
  nixRaw`pkgs.materia-theme`,
  "Material Design theme for GNOME/GTK based desktop environments",
);

/**
 * 7000+ Material Design Icons from the Community
 */
export const material_design_icons = mkPackage(
  nixRaw`pkgs.material-design-icons`,
  "7000+ Material Design Icons from the Community",
);

/**
 * System status icons by Google, featuring material design
 */
export const material_icons = mkPackage(
  nixRaw`pkgs.material-icons`,
  "System status icons by Google, featuring material design",
);

/**
 * Material-ish window decoration theme for KWin
 */
export const material_kwin_decoration = mkPackage(
  nixRaw`pkgs.material-kwin-decoration`,
  "Material-ish window decoration theme for KWin",
);

/**
 * Material Symbols icons by Google
 */
export const material_symbols = mkPackage(
  nixRaw`pkgs.material-symbols`,
  "Material Symbols icons by Google",
);

/**
 * A streaming SQL materialized view engine for real-time applications
 */
export const materialize = mkPackage(
  nixRaw`pkgs.materialize`,
  "A streaming SQL materialized view engine for real-time applications",
);

/**
 * Emacs preview math inline
 */
export const math_preview = mkPackage(
  nixRaw`pkgs.math-preview`,
  "Emacs preview math inline",
);

/**
 * Wolfram Mathematica computational software system
 */
export const mathematica = mkPackage(
  nixRaw`pkgs.mathematica`,
  "Wolfram Mathematica computational software system",
);

/**
 * Wolfram Mathematica computational software system
 */
export const mathematica_cuda = mkPackage(
  nixRaw`pkgs.mathematica-cuda`,
  "Wolfram Mathematica computational software system",
);

/**
 * A library for scientific data visualization
 */
export const mathgl = mkPackage(
  nixRaw`pkgs.mathgl`,
  "A library for scientific data visualization",
);

/**
 * Supporting tool for Lean's mathlib
 */
export const mathlibtools = mkPackage(
  nixRaw`pkgs.mathlibtools`,
  "Supporting tool for Lean's mathlib",
);

/**
 * OCR tool to convert pictures to LaTeX.
 */
export const mathpix_snipping_tool = mkPackage(
  nixRaw`pkgs.mathpix-snipping-tool`,
  "OCR tool to convert pictures to LaTeX.",
);

/**
 * A C library for reading and writing Matlab MAT files
 */
export const matio = mkPackage(
  nixRaw`pkgs.matio`,
  "A C library for reading and writing Matlab MAT files",
);

/**
 * A real-time web analytics application
 */
export const matomo = mkPackage(
  nixRaw`pkgs.matomo`,
  "A real-time web analytics application",
);

/**
 * A real-time web analytics application
 */
export const matomo_beta = mkPackage(
  nixRaw`pkgs.matomo-beta`,
  "A real-time web analytics application",
);

/**
 * Bot to receive Alertmanager webhook events and forward them to chosen rooms
 */
export const matrix_alertmanager = mkPackage(
  nixRaw`pkgs.matrix-alertmanager`,
  "Bot to receive Alertmanager webhook events and forward them to chosen rooms",
);

/**
 * A bridge between Matrix and Discord
 */
export const matrix_appservice_discord = mkPackage(
  nixRaw`pkgs.matrix-appservice-discord`,
  "A bridge between Matrix and Discord",
);

/**
 * Node.js IRC bridge for Matrix
 */
export const matrix_appservice_irc = mkPackage(
  nixRaw`pkgs.matrix-appservice-irc`,
  "Node.js IRC bridge for Matrix",
);

/**
 * A Matrix <--> Slack bridge
 */
export const matrix_appservice_slack = mkPackage(
  nixRaw`pkgs.matrix-appservice-slack`,
  "A Matrix <--> Slack bridge",
);

/**
 * Simple but convenient CLI-based Matrix client app for sending and receiving
 */
export const matrix_commander = mkPackage(
  nixRaw`pkgs.matrix-commander`,
  "Simple but convenient CLI-based Matrix client app for sending and receiving",
);

/**
 * CLI-based Matrix client app for sending and receiving
 */
export const matrix_commander_rs = mkPackage(
  nixRaw`pkgs.matrix-commander-rs`,
  "CLI-based Matrix client app for sending and receiving",
);

/**
 * A Matrix homeserver written in Rust
 */
export const matrix_conduit = mkPackage(
  nixRaw`pkgs.matrix-conduit`,
  "A Matrix homeserver written in Rust",
);

/**
 * Reconciliator and gateway for a managed Matrix server
 */
export const matrix_corporal = mkPackage(
  nixRaw`pkgs.matrix-corporal`,
  "Reconciliator and gateway for a managed Matrix server",
);

/**
 * Download backlogs from Matrix as raw text
 */
export const matrix_dl = mkPackage(
  nixRaw`pkgs.matrix-dl`,
  "Download backlogs from Matrix as raw text",
);

/**
 * A simple webhook for matrix
 */
export const matrix_hook = mkPackage(
  nixRaw`pkgs.matrix-hook`,
  "A simple webhook for matrix",
);

/**
 * A bridge between Matrix and multiple project management services, such as GitHub, GitLab and JIRA
 */
export const matrix_hookshot = mkPackage(
  nixRaw`pkgs.matrix-hookshot`,
  "A bridge between Matrix and multiple project management services, such as GitHub, GitLab and JIRA",
);

/**
 * A no-network-IO implementation of a state machine that handles E2EE for Matrix clients
 */
export const matrix_sdk_crypto_nodejs = mkPackage(
  nixRaw`pkgs.matrix-sdk-crypto-nodejs`,
  "A no-network-IO implementation of a state machine that handles E2EE for Matrix clients",
);

/**
 * A no-network-IO implementation of a state machine that handles E2EE for Matrix clients
 */
export const matrix_sdk_crypto_nodejs_0_1_0_beta_3 = mkPackage(
  nixRaw`pkgs.matrix-sdk-crypto-nodejs-0_1_0-beta_3`,
  "A no-network-IO implementation of a state machine that handles E2EE for Matrix clients",
);

/**
 * A sliding sync implementation of MSC3575 for matrix
 */
export const matrix_sliding_sync = mkPackage(
  nixRaw`pkgs.matrix-sliding-sync`,
  "A sliding sync implementation of MSC3575 for matrix",
);

export const matrix_synapse = mkPackage(
  nixRaw`pkgs.matrix-synapse`,
  "",
);

/**
 * Matrix reference homeserver
 */
export const matrix_synapse_unwrapped = mkPackage(
  nixRaw`pkgs.matrix-synapse-unwrapped`,
  "Matrix reference homeserver",
);

/**
 * CLI client for Matrix
 */
export const matrixcli = mkPackage(
  nixRaw`pkgs.matrixcli`,
  "CLI client for Matrix",
);

        /**
         * Matter Compiler is a API Blueprint AST Media Types to API Blueprint conversion tool.
It composes an API blueprint from its serialzed AST media-type.

         */
export const matter_compiler = mkPackage(
  nixRaw`pkgs.matter-compiler`,
  "Matter Compiler is a API Blueprint AST Media Types to API Blueprint conversion tool.\nIt composes an API blueprint from its serialzed AST media-type.\n",
);

/**
 * Simple bridge between Mattermost, IRC, XMPP, Gitter, Slack, Discord, Telegram, Rocket.Chat, Hipchat(via xmpp), Matrix and Steam
 */
export const matterbridge = mkPackage(
  nixRaw`pkgs.matterbridge`,
  "Simple bridge between Mattermost, IRC, XMPP, Gitter, Slack, Discord, Telegram, Rocket.Chat, Hipchat(via xmpp), Matrix and Steam",
);

/**
 * Terminal client for the Mattermost chat system
 */
export const matterhorn = mkPackage(
  nixRaw`pkgs.matterhorn`,
  "Terminal client for the Mattermost chat system",
);

/**
 * Minimal IRC server bridge to Mattermost
 */
export const matterircd = mkPackage(
  nixRaw`pkgs.matterircd`,
  "Minimal IRC server bridge to Mattermost",
);

/**
 * Mattermost is an open source platform for secure collaboration across the entire software development lifecycle
 */
export const mattermost = mkPackage(
  nixRaw`pkgs.mattermost`,
  "Mattermost is an open source platform for secure collaboration across the entire software development lifecycle",
);

/**
 * Mattermost Desktop client
 */
export const mattermost_desktop = mkPackage(
  nixRaw`pkgs.mattermost-desktop`,
  "Mattermost Desktop client",
);

/**
 * Build and publish Rust crates Python packages
 */
export const maturin = mkPackage(
  nixRaw`pkgs.maturin`,
  "Build and publish Rust crates Python packages",
);

/**
 * A plugin-based Matrix bot system written in Python
 */
export const maubot = mkPackage(
  nixRaw`pkgs.maubot`,
  "A plugin-based Matrix bot system written in Python",
);

/**
 * High-level specification language
 */
export const maude = mkPackage(
  nixRaw`pkgs.maude`,
  "High-level specification language",
);

/**
 * A Matrix-Discord puppeting bridge
 */
export const mautrix_discord = mkPackage(
  nixRaw`pkgs.mautrix-discord`,
  "A Matrix-Discord puppeting bridge",
);

/**
 * A Matrix-Facebook Messenger puppeting bridge
 */
export const mautrix_facebook = mkPackage(
  nixRaw`pkgs.mautrix-facebook`,
  "A Matrix-Facebook Messenger puppeting bridge",
);

/**
 * A Matrix-Google Chat puppeting bridge
 */
export const mautrix_googlechat = mkPackage(
  nixRaw`pkgs.mautrix-googlechat`,
  "A Matrix-Google Chat puppeting bridge",
);

/**
 * A Matrix-Signal puppeting bridge
 */
export const mautrix_signal = mkPackage(
  nixRaw`pkgs.mautrix-signal`,
  "A Matrix-Signal puppeting bridge",
);

/**
 * A Matrix-Telegram hybrid puppeting/relaybot bridge
 */
export const mautrix_telegram = mkPackage(
  nixRaw`pkgs.mautrix-telegram`,
  "A Matrix-Telegram hybrid puppeting/relaybot bridge",
);

/**
 * Matrix <-> Whatsapp hybrid puppeting/relaybot bridge
 */
export const mautrix_whatsapp = mkPackage(
  nixRaw`pkgs.mautrix-whatsapp`,
  "Matrix <-> Whatsapp hybrid puppeting/relaybot bridge",
);

/**
 * Build automation tool (used primarily for Java projects)
 */
export const maven = mkPackage(
  nixRaw`pkgs.maven`,
  "Build automation tool (used primarily for Java projects)",
);

/**
 * Build automation tool (used primarily for Java projects)
 */
export const maven3 = mkPackage(
  nixRaw`pkgs.maven3`,
  "Build automation tool (used primarily for Java projects)",
);

/**
 * MAVLink proxy and command line ground station
 */
export const mavproxy = mkPackage(
  nixRaw`pkgs.mavproxy`,
  "MAVLink proxy and command line ground station",
);

/**
 * Interpreter for the AWK Programming Language
 */
export const mawk = mkPackage(
  nixRaw`pkgs.mawk`,
  "Interpreter for the AWK Programming Language",
);

/**
 * A fast ISO to CSO compression program for use with PSP and PS2 emulators, which uses multiple algorithms for best compression ratio
 */
export const maxcso = mkPackage(
  nixRaw`pkgs.maxcso`,
  "A fast ISO to CSO compression program for use with PSP and PS2 emulators, which uses multiple algorithms for best compression ratio",
);

/**
 * Software for computing mincut/maxflow in a graph
 */
export const maxflow = mkPackage(
  nixRaw`pkgs.maxflow`,
  "Software for computing mincut/maxflow in a graph",
);

/**
 * Computer algebra system
 */
export const maxima = mkPackage(
  nixRaw`pkgs.maxima`,
  "Computer algebra system",
);

/**
 * Computer algebra system
 */
export const maxima_ecl = mkPackage(
  nixRaw`pkgs.maxima-ecl`,
  "Computer algebra system",
);

/**
 * A library of non-tilde externals for puredata, by Miller Puckette
 */
export const maxlib = mkPackage(
  nixRaw`pkgs.maxlib`,
  "A library of non-tilde externals for puredata, by Miller Puckette",
);

/**
 * Maya Hieroglyphs
 */
export const maya = mkPackage(
  nixRaw`pkgs.maya`,
  "Maya Hieroglyphs",
);

/**
 * mbox to maildir tool
 */
export const mb2md = mkPackage(
  nixRaw`pkgs.mb2md`,
  "mbox to maildir tool",
);

/**
 * Arm Mbed Command Line Interface
 */
export const mbed_cli = mkPackage(
  nixRaw`pkgs.mbed-cli`,
  "Arm Mbed Command Line Interface",
);

/**
 * Portable cryptographic and TLS library, formerly known as PolarSSL
 */
export const mbedtls = mkPackage(
  nixRaw`pkgs.mbedtls`,
  "Portable cryptographic and TLS library, formerly known as PolarSSL",
);

/**
 * Portable cryptographic and TLS library, formerly known as PolarSSL
 */
export const mbedtls_2 = mkPackage(
  nixRaw`pkgs.mbedtls_2`,
  "Portable cryptographic and TLS library, formerly known as PolarSSL",
);

/**
 * P25 Phase 1 and ProVoice vocoder
 */
export const mbelib = mkPackage(
  nixRaw`pkgs.mbelib`,
  "P25 Phase 1 and ProVoice vocoder",
);

/**
 * run command on mailbox change
 */
export const mbidled = mkPackage(
  nixRaw`pkgs.mbidled`,
  "run command on mailbox change",
);

/**
 * Unix utilities for processing and interacting with mail messages which are stored in maildir folders
 */
export const mblaze = mkPackage(
  nixRaw`pkgs.mblaze`,
  "Unix utilities for processing and interacting with mail messages which are stored in maildir folders",
);

/**
 * Driver for mBlock web version
 */
export const mblock_mlink = mkPackage(
  nixRaw`pkgs.mblock-mlink`,
  "Driver for mBlock web version",
);

/**
 * Daemon that uses input from coretemp module and sets the fan speed using the applesmc module
 */
export const mbpfan = mkPackage(
  nixRaw`pkgs.mbpfan`,
  "Daemon that uses input from coretemp module and sets the fan speed using the applesmc module",
);

/**
 * The original BQN implementation in Javascript
 */
export const mbqn = mkPackage(
  nixRaw`pkgs.mbqn`,
  "The original BQN implementation in Javascript",
);

/**
 * Speech synthesizer based on the concatenation of diphones
 */
export const mbrola = mkPackage(
  nixRaw`pkgs.mbrola`,
  "Speech synthesizer based on the concatenation of diphones",
);

/**
 * A simple Go-based server for map tiles stored in mbtiles format
 */
export const mbtileserver = mkPackage(
  nixRaw`pkgs.mbtileserver`,
  "A simple Go-based server for map tiles stored in mbtiles format",
);

/**
 * A tool for buffering data streams with a large set of unique features
 */
export const mbuffer = mkPackage(
  nixRaw`pkgs.mbuffer`,
  "A tool for buffering data streams with a large set of unique features",
);

/**
 * Modbus TCP to Modbus RTU (RS-232/485) gateway
 */
export const mbusd = mkPackage(
  nixRaw`pkgs.mbusd`,
  "Modbus TCP to Modbus RTU (RS-232/485) gateway",
);

/**
 * An importer and exporter for MBTiles
 */
export const mbutil = mkPackage(
  nixRaw`pkgs.mbutil`,
  "An importer and exporter for MBTiles",
);

/**
 * File Manager and User Shell for the GNU Project, known as Midnight Commander
 */
export const mc = mkPackage(
  nixRaw`pkgs.mc`,
  "File Manager and User Shell for the GNU Project, known as Midnight Commander",
);

/**
 * Small Jabber console client
 */
export const mcabber = mkPackage(
  nixRaw`pkgs.mcabber`,
  "Small Jabber console client",
);

/**
 * Suckless Terminal fork
 */
export const mcaimi_st = mkPackage(
  nixRaw`pkgs.mcaimi-st`,
  "Suckless Terminal fork",
);

/**
 * A tool to select chunks from Minecraft worlds for deletion or export
 */
export const mcaselector = mkPackage(
  nixRaw`pkgs.mcaselector`,
  "A tool to select chunks from Minecraft worlds for deletion or export",
);

/**
 * A tool to inject machine checks into x86 kernel for testing
 */
export const mceinject = mkPackage(
  nixRaw`pkgs.mceinject`,
  "A tool to inject machine checks into x86 kernel for testing",
);

/**
 * Log x86 machine checks: memory, IO, and CPU hardware errors
 */
export const mcelog = mkPackage(
  nixRaw`pkgs.mcelog`,
  "Log x86 machine checks: memory, IO, and CPU hardware errors",
);

/**
 * An upgraded ctrl-r where history results make sense for what you're working on right now
 */
export const mcfly = mkPackage(
  nixRaw`pkgs.mcfly`,
  "An upgraded ctrl-r where history results make sense for what you're working on right now",
);

/**
 * Monte Carlo for FeMtobarn processes
 */
export const mcfm = mkPackage(
  nixRaw`pkgs.mcfm`,
  "Monte Carlo for FeMtobarn processes",
);

/**
 * A multithreaded Minecraft server built for redstone
 */
export const mchprs = mkPackage(
  nixRaw`pkgs.mchprs`,
  "A multithreaded Minecraft server built for redstone",
);

/**
 * Comic book reader and image viewer
 */
export const mcomix = mkPackage(
  nixRaw`pkgs.mcomix`,
  "Comic book reader and image viewer",
);

/**
 * Matsui's C preprocessor
 */
export const mcpp = mkPackage(
  nixRaw`pkgs.mcpp`,
  "Matsui's C preprocessor",
);

/**
 * Minecraft console client with Bukkit coloring support
 */
export const mcrcon = mkPackage(
  nixRaw`pkgs.mcrcon`,
  "Minecraft console client with Bukkit coloring support",
);

/**
 * A toolset for model-checking concurrent systems and protocols
 */
export const mcrl2 = mkPackage(
  nixRaw`pkgs.mcrl2`,
  "A toolset for model-checking concurrent systems and protocols",
);

/**
 * Flexible implementation of `cron' in Guile
 */
export const mcron = mkPackage(
  nixRaw`pkgs.mcron`,
  "Flexible implementation of `cron' in Guile",
);

/**
 * Replacement for old UNIX crypt(1)
 */
export const mcrypt = mkPackage(
  nixRaw`pkgs.mcrypt`,
  "Replacement for old UNIX crypt(1)",
);

/**
 * Python library for checking the status of Minecraft servers
 */
export const mcstatus = mkPackage(
  nixRaw`pkgs.mcstatus`,
  "Python library for checking the status of Minecraft servers",
);

/**
 * Modular computation tool chain library
 */
export const mctc_lib = mkPackage(
  nixRaw`pkgs.mctc-lib`,
  "Modular computation tool chain library",
);

/**
 * Mutation-based coverage testing for hardware designs, with Yosys
 */
export const mcy = mkPackage(
  nixRaw`pkgs.mcy`,
  "Mutation-based coverage testing for hardware designs, with Yosys",
);

/**
 * Markdown parser made in C
 */
export const md4c = mkPackage(
  nixRaw`pkgs.md4c`,
  "Markdown parser made in C",
);

/**
 * Generates ("tangles") source code from Markdown documents
 */
export const md_tangle = mkPackage(
  nixRaw`pkgs.md-tangle`,
  "Generates (\"tangles\") source code from Markdown documents",
);

/**
 * An LV2 port of the MDA plugins by Paul Kellett
 */
export const mda_lv2 = mkPackage(
  nixRaw`pkgs.mda_lv2`,
  "An LV2 port of the MDA plugins by Paul Kellett",
);

/**
 * Programs for managing RAID arrays under Linux
 */
export const mdadm = mkPackage(
  nixRaw`pkgs.mdadm`,
  "Programs for managing RAID arrays under Linux",
);

/**
 * Programs for managing RAID arrays under Linux
 */
export const mdadm4 = mkPackage(
  nixRaw`pkgs.mdadm4`,
  "Programs for managing RAID arrays under Linux",
);

/**
 * Create books from MarkDown
 */
export const mdbook = mkPackage(
  nixRaw`pkgs.mdbook`,
  "Create books from MarkDown",
);

/**
 * A preprocessor for mdbook to add Material Design admonishments
 */
export const mdbook_admonish = mkPackage(
  nixRaw`pkgs.mdbook-admonish`,
  "A preprocessor for mdbook to add Material Design admonishments",
);

/**
 * mdbook preprocessor to run arbitrary commands
 */
export const mdbook_cmdrun = mkPackage(
  nixRaw`pkgs.mdbook-cmdrun`,
  "mdbook preprocessor to run arbitrary commands",
);

/**
 * D2 diagram generator plugin for MdBook
 */
export const mdbook_d2 = mkPackage(
  nixRaw`pkgs.mdbook-d2`,
  "D2 diagram generator plugin for MdBook",
);

/**
 * MDBook preprocessor for converting emojicodes (e.g. `: cat :`) into emojis 🐱
 */
export const mdbook_emojicodes = mkPackage(
  nixRaw`pkgs.mdbook-emojicodes`,
  "MDBook preprocessor for converting emojicodes (e.g. `: cat :`) into emojis 🐱",
);

/**
 * mdbook backend for generating an e-book in the EPUB format
 */
export const mdbook_epub = mkPackage(
  nixRaw`pkgs.mdbook-epub`,
  "mdbook backend for generating an e-book in the EPUB format",
);

/**
 * A preprocessor for mdbook, rendering Graphviz graphs to HTML at build time.
 */
export const mdbook_graphviz = mkPackage(
  nixRaw`pkgs.mdbook-graphviz`,
  "A preprocessor for mdbook, rendering Graphviz graphs to HTML at build time.",
);

/**
 * Helpers for a mdbook i18n workflow based on Gettext
 */
export const mdbook_i18n_helpers = mkPackage(
  nixRaw`pkgs.mdbook-i18n-helpers`,
  "Helpers for a mdbook i18n workflow based on Gettext",
);

/**
 * A preprocessor for mdbook, rendering LaTeX equations to HTML at build time.
 */
export const mdbook_katex = mkPackage(
  nixRaw`pkgs.mdbook-katex`,
  "A preprocessor for mdbook, rendering LaTeX equations to HTML at build time.",
);

/**
 * Render Kroki diagrams from files or code blocks in mdbook
 */
export const mdbook_kroki_preprocessor = mkPackage(
  nixRaw`pkgs.mdbook-kroki-preprocessor`,
  "Render Kroki diagrams from files or code blocks in mdbook",
);

/**
 * A backend for `mdbook` which will check your links for you.
 */
export const mdbook_linkcheck = mkPackage(
  nixRaw`pkgs.mdbook-linkcheck`,
  "A backend for `mdbook` which will check your links for you.",
);

/**
 * Generate manual pages from mdBooks
 */
export const mdbook_man = mkPackage(
  nixRaw`pkgs.mdbook-man`,
  "Generate manual pages from mdBooks",
);

/**
 * A preprocessor for mdbook to add mermaid.js support
 */
export const mdbook_mermaid = mkPackage(
  nixRaw`pkgs.mdbook-mermaid`,
  "A preprocessor for mdbook to add mermaid.js support",
);

/**
 * mdbook preprocessor to add a open-on-github link on every page
 */
export const mdbook_open_on_gh = mkPackage(
  nixRaw`pkgs.mdbook-open-on-gh`,
  "mdbook preprocessor to add a open-on-github link on every page",
);

/**
 * Table of contents for mdbook (in sidebar)
 */
export const mdbook_pagetoc = mkPackage(
  nixRaw`pkgs.mdbook-pagetoc`,
  "Table of contents for mdbook (in sidebar)",
);

/**
 * A backend for mdBook written in Rust for generating PDF
 */
export const mdbook_pdf = mkPackage(
  nixRaw`pkgs.mdbook-pdf`,
  "A backend for mdBook written in Rust for generating PDF",
);

/**
 * mdBook preprocessor to render PlantUML diagrams to png images in the book output directory
 */
export const mdbook_plantuml = mkPackage(
  nixRaw`pkgs.mdbook-plantuml`,
  "mdBook preprocessor to render PlantUML diagrams to png images in the book output directory",
);

/**
 * A preprocessor for mdbook to add inline Table of Contents support
 */
export const mdbook_toc = mkPackage(
  nixRaw`pkgs.mdbook-toc`,
  "A preprocessor for mdbook to add inline Table of Contents support",
);

/**
 * .mdb (MS Access) format tools
 */
export const mdbtools = mkPackage(
  nixRaw`pkgs.mdbtools`,
  ".mdb (MS Access) format tools",
);

/**
 * cat for markdown
 */
export const mdcat = mkPackage(
  nixRaw`pkgs.mdcat`,
  "cat for markdown",
);

/**
 * tags for markdown file
 */
export const mdctags = mkPackage(
  nixRaw`pkgs.mdctags`,
  "tags for markdown file",
);

/**
 * A collection of multi-dimensional data structure and indexing algorithms
 */
export const mdds = mkPackage(
  nixRaw`pkgs.mdds`,
  "A collection of multi-dimensional data structure and indexing algorithms",
);

/**
 * A mediated device management utility for linux
 */
export const mdevctl = mkPackage(
  nixRaw`pkgs.mdevctl`,
  "A mediated device management utility for linux",
);

/**
 * mdev-compatible Linux hotplug manager daemon
 */
export const mdevd = mkPackage(
  nixRaw`pkgs.mdevd`,
  "mdev-compatible Linux hotplug manager daemon",
);

/**
 * Small utility that converts MDF images to ISO format
 */
export const mdf2iso = mkPackage(
  nixRaw`pkgs.mdf2iso`,
  "Small utility that converts MDF images to ISO format",
);

/**
 * Really simple CLI Markdown to HTML converter with styling support
 */
export const mdhtml = mkPackage(
  nixRaw`pkgs.mdhtml`,
  "Really simple CLI Markdown to HTML converter with styling support",
);

/**
 * GNU MIX Development Kit (MDK)
 */
export const mdk = mkPackage(
  nixRaw`pkgs.mdk`,
  "GNU MIX Development Kit (MDK)",
);

/**
 * A tool that injects data into wireless networks
 */
export const mdk4 = mkPackage(
  nixRaw`pkgs.mdk4`,
  "A tool that injects data into wireless networks",
);

/**
 * A tool to check markdown files and flag style issues
 */
export const mdl = mkPackage(
  nixRaw`pkgs.mdl`,
  "A tool to check markdown files and flag style issues",
);

/**
 * A command-line based markdown presentation tool
 */
export const mdp = mkPackage(
  nixRaw`pkgs.mdp`,
  "A command-line based markdown presentation tool",
);

/**
 * MarkDown Renderer for the terminal
 */
export const mdr = mkPackage(
  nixRaw`pkgs.mdr`,
  "MarkDown Renderer for the terminal",
);

/**
 * Markdown shell pre-processor
 */
export const mdsh = mkPackage(
  nixRaw`pkgs.mdsh`,
  "Markdown shell pre-processor",
);

export const mdslides = mkPackage(
  nixRaw`pkgs.mdslides`,
  "",
);

/**
 * Plain text Zettelkasten based on mdBook
 */
export const mdzk = mkPackage(
  nixRaw`pkgs.mdzk`,
  "Plain text Zettelkasten based on mdBook",
);

/**
 * Tool for partial deblobbing of Intel ME/TXE firmware images
 */
export const me_cleaner = mkPackage(
  nixRaw`pkgs.me_cleaner`,
  "Tool for partial deblobbing of Intel ME/TXE firmware images",
);

/**
 * Support crate for rustc's self-profiling feature
 */
export const measureme = mkPackage(
  nixRaw`pkgs.measureme`,
  "Support crate for rustc's self-profiling feature",
);

/**
 * Japanese morphological analysis system
 */
export const mecab = mkPackage(
  nixRaw`pkgs.mecab`,
  "Japanese morphological analysis system",
);

/**
 * Library to read and write MED files
 */
export const medfile = mkPackage(
  nixRaw`pkgs.medfile`,
  "Library to read and write MED files",
);

/**
 * A Qt/C++ GUI front end for yt-dlp and others
 */
export const media_downloader = mkPackage(
  nixRaw`pkgs.media-downloader`,
  "A Qt/C++ GUI front end for yt-dlp and others",
);

/**
 * A repository of data files describing media player capabilities
 */
export const media_player_info = mkPackage(
  nixRaw`pkgs.media-player-info`,
  "A repository of data files describing media player capabilities",
);

/**
 * Media Manager for Kodi
 */
export const mediaelch = mkPackage(
  nixRaw`pkgs.mediaelch`,
  "Media Manager for Kodi",
);

/**
 * Media Manager for Kodi
 */
export const mediaelch_qt5 = mkPackage(
  nixRaw`pkgs.mediaelch-qt5`,
  "Media Manager for Kodi",
);

/**
 * Media Manager for Kodi
 */
export const mediaelch_qt6 = mkPackage(
  nixRaw`pkgs.mediaelch-qt6`,
  "Media Manager for Kodi",
);

/**
 * Supplies technical and tag information about a video or audio file
 */
export const mediainfo = mkPackage(
  nixRaw`pkgs.mediainfo`,
  "Supplies technical and tag information about a video or audio file",
);

/**
 * Supplies technical and tag information about a video or audio file (GUI version)
 */
export const mediainfo_gui = mkPackage(
  nixRaw`pkgs.mediainfo-gui`,
  "Supplies technical and tag information about a video or audio file (GUI version)",
);

/**
 * Ready-to-use RTSP server and RTSP proxy that allows to read and publish video and audio streams
 */
export const mediamtx = mkPackage(
  nixRaw`pkgs.mediamtx`,
  "Ready-to-use RTSP server and RTSP proxy that allows to read and publish video and audio streams",
);

/**
 * A powerful and lightweight streaming engine specialized for voice/video telephony applications. Part of the Linphone project
 */
export const mediastreamer = mkPackage(
  nixRaw`pkgs.mediastreamer`,
  "A powerful and lightweight streaming engine specialized for voice/video telephony applications. Part of the Linphone project",
);

/**
 * H.264 encoder/decoder plugin for mediastreamer2. Part of the Linphone project.
 */
export const mediastreamer_openh264 = mkPackage(
  nixRaw`pkgs.mediastreamer-openh264`,
  "H.264 encoder/decoder plugin for mediastreamer2. Part of the Linphone project.",
);

/**
 * Offers access to the Mediathek of different tv stations (ARD, ZDF, Arte, etc.)
 */
export const mediathekview = mkPackage(
  nixRaw`pkgs.mediathekview`,
  "Offers access to the Mediathek of different tv stations (ARD, ZDF, Arte, etc.)",
);

/**
 * The collaborative editing software that runs Wikipedia
 */
export const mediawiki = mkPackage(
  nixRaw`pkgs.mediawiki`,
  "The collaborative editing software that runs Wikipedia",
);

/**
 * Tool to write images files to portable media
 */
export const mediawriter = mkPackage(
  nixRaw`pkgs.mediawriter`,
  "Tool to write images files to portable media",
);

/**
 * Serif font designed by Sora Sagano
 */
export const medio = mkPackage(
  nixRaw`pkgs.medio`,
  "Serif font designed by Sora Sagano",
);

/**
 * A portable, CLI-driven, SDL+OpenGL-based, multi-system emulator
 */
export const mednafen = mkPackage(
  nixRaw`pkgs.mednafen`,
  "A portable, CLI-driven, SDL+OpenGL-based, multi-system emulator",
);

/**
 * Netplay server for Mednafen
 */
export const mednafen_server = mkPackage(
  nixRaw`pkgs.mednafen-server`,
  "Netplay server for Mednafen",
);

/**
 * GTK-based frontend for mednafen emulator
 */
export const mednaffe = mkPackage(
  nixRaw`pkgs.mednaffe`,
  "GTK-based frontend for mednafen emulator",
);

/**
 * A speedy, parallel, and modular, login brute-forcer
 */
export const medusa = mkPackage(
  nixRaw`pkgs.medusa`,
  "A speedy, parallel, and modular, login brute-forcer",
);

/**
 * Blocking-resistant pluggable transport for Tor
 */
export const meek = mkPackage(
  nixRaw`pkgs.meek`,
  "Blocking-resistant pluggable transport for Tor",
);

/**
 * MeerK40t LaserCutter Software
 */
export const meerk40t = mkPackage(
  nixRaw`pkgs.meerk40t`,
  "MeerK40t LaserCutter Software",
);

/**
 * MeerK40t camera plugin
 */
export const meerk40t_camera = mkPackage(
  nixRaw`pkgs.meerk40t-camera`,
  "MeerK40t camera plugin",
);

/**
 * CLI program for LSI MegaRAID cards, which also works with some Dell PERC RAID cards
 */
export const megacli = mkPackage(
  nixRaw`pkgs.megacli`,
  "CLI program for LSI MegaRAID cards, which also works with some Dell PERC RAID cards",
);

/**
 * MEGA Command Line Interactive and Scriptable Application
 */
export const megacmd = mkPackage(
  nixRaw`pkgs.megacmd`,
  "MEGA Command Line Interactive and Scriptable Application",
);

/**
 * An entertaining free (freeware and free software) and open source cross-platform 3D real-time strategy (RTS) game
 */
export const megaglest = mkPackage(
  nixRaw`pkgs.megaglest`,
  "An entertaining free (freeware and free software) and open source cross-platform 3D real-time strategy (RTS) game",
);

/**
 * An ultra-fast single-node solution for large and complex metagenomics assembly via succinct de Bruijn graph
 */
export const megahit = mkPackage(
  nixRaw`pkgs.megahit`,
  "An ultra-fast single-node solution for large and complex metagenomics assembly via succinct de Bruijn graph",
);

/**
 * MEGA Model Optimization Package
 */
export const megam = mkPackage(
  nixRaw`pkgs.megam`,
  "MEGA Model Optimization Package",
);

/**
 * GTK4 camera application that knows how to deal with the media request api
 */
export const megapixels = mkPackage(
  nixRaw`pkgs.megapixels`,
  "GTK4 camera application that knows how to deal with the media request api",
);

/**
 * Easy automated syncing between your computers and your MEGA Cloud Drive
 */
export const megasync = mkPackage(
  nixRaw`pkgs.megasync`,
  "Easy automated syncing between your computers and your MEGA Cloud Drive",
);

/**
 * Command line client for Mega.co.nz
 */
export const megatools = mkPackage(
  nixRaw`pkgs.megatools`,
  "Command line client for Mega.co.nz",
);

/**
 * A minimal image viewer using raw XLib
 */
export const meh = mkPackage(
  nixRaw`pkgs.meh`,
  "A minimal image viewer using raw XLib",
);

/**
 * Powerful, fast, and an easy to use search engine
 */
export const meilisearch = mkPackage(
  nixRaw`pkgs.meilisearch`,
  "Powerful, fast, and an easy to use search engine",
);

/**
 * a Mellin Evolution LibrAry
 */
export const mela = mkPackage(
  nixRaw`pkgs.mela`,
  "a Mellin Evolution LibrAry",
);

/**
 * Build APKs from source code
 */
export const melange = mkPackage(
  nixRaw`pkgs.melange`,
  "Build APKs from source code",
);

/**
 * Visual diff and merge tool
 */
export const meld = mkPackage(
  nixRaw`pkgs.meld`,
  "Visual diff and merge tool",
);

/**
 * A headline typeface that could be used as a movie title
 */
export const melete = mkPackage(
  nixRaw`pkgs.melete`,
  "A headline typeface that could be used as a movie title",
);

/**
 * Terminal e-mail client and e-mail client library
 */
export const meli = mkPackage(
  nixRaw`pkgs.meli`,
  "Terminal e-mail client and e-mail client library",
);

/**
 * Cloud music integration for your desktop
 */
export const mellowplayer = mkPackage(
  nixRaw`pkgs.mellowplayer`,
  "Cloud music integration for your desktop",
);

/**
 * Language that compiles to regular expressions
 */
export const melody = mkPackage(
  nixRaw`pkgs.melody`,
  "Language that compiles to regular expressions",
);

/**
 * Work in progress Nintendo DS emulator
 */
export const melonDS = mkPackage(
  nixRaw`pkgs.melonDS`,
  "Work in progress Nintendo DS emulator",
);

/**
 * Backup and restore Ed25519 SSH keys with seed words
 */
export const melt = mkPackage(
  nixRaw`pkgs.melt`,
  "Backup and restore Ed25519 SSH keys with seed words",
);

/**
 * A distributed memory object caching system
 */
export const memcached = mkPackage(
  nixRaw`pkgs.memcached`,
  "A distributed memory object caching system",
);

/**
 * Play meme bingo using this neat web app
 */
export const meme_bingo_web = mkPackage(
  nixRaw`pkgs.meme-bingo-web`,
  "Play meme bingo using this neat web app",
);

/**
 * A command line utility for creating image macro style memes
 */
export const meme_image_generator = mkPackage(
  nixRaw`pkgs.meme-image-generator`,
  "A command line utility for creating image macro style memes",
);

/**
 * Motif-based sequence analysis tools
 */
export const meme_suite = mkPackage(
  nixRaw`pkgs.meme-suite`,
  "Motif-based sequence analysis tools",
);

/**
 * An mpv-based video player for studying Japanese
 */
export const memento = mkPackage(
  nixRaw`pkgs.memento`,
  "An mpv-based video player for studying Japanese",
);

/**
 * A simple tool written in bash to memorize stuff
 */
export const memo = mkPackage(
  nixRaw`pkgs.memo`,
  "A simple tool written in bash to memorize stuff",
);

/**
 * fmemopen for Mac OS and iOS
 */
export const memorymapping = mkPackage(
  nixRaw`pkgs.memorymapping`,
  "fmemopen for Mac OS and iOS",
);

export const memorymappingHook = mkPackage(
  nixRaw`pkgs.memorymappingHook`,
  "",
);

/**
 * A lightweight, self-hosted memo hub
 */
export const memos = mkPackage(
  nixRaw`pkgs.memos`,
  "A lightweight, self-hosted memo hub",
);

/**
 * Memory profiler for Python
 */
export const memray = mkPackage(
  nixRaw`pkgs.memray`,
  "Memory profiler for Python",
);

/**
 * memstream.c is an implementation of the POSIX function open_memstream() for BSD and BSD-like operating systems
 */
export const memstream = mkPackage(
  nixRaw`pkgs.memstream`,
  "memstream.c is an implementation of the POSIX function open_memstream() for BSD and BSD-like operating systems",
);

export const memstreamHook = mkPackage(
  nixRaw`pkgs.memstreamHook`,
  "",
);

/**
 * A tool to detect memory errors, to be run from a bootloader
 */
export const memtest86_efi = mkPackage(
  nixRaw`pkgs.memtest86-efi`,
  "A tool to detect memory errors, to be run from a bootloader",
);

/**
 * A tool to detect memory errors
 */
export const memtest86plus = mkPackage(
  nixRaw`pkgs.memtest86plus`,
  "A tool to detect memory errors",
);

/**
 * A userspace utility for testing the memory subsystem for faults
 */
export const memtester = mkPackage(
  nixRaw`pkgs.memtester`,
  "A userspace utility for testing the memory subsystem for faults",
);

/**
 * Redis and Memcached traffic generation and benchmarking tool
 */
export const memtier_benchmark = mkPackage(
  nixRaw`pkgs.memtier-benchmark`,
  "Redis and Memcached traffic generation and benchmarking tool",
);

/**
 * Menstruation calendar
 */
export const mencal = mkPackage(
  nixRaw`pkgs.mencal`,
  "Menstruation calendar",
);

/**
 * A reference manager and academic social network
 */
export const mendeley = mkPackage(
  nixRaw`pkgs.mendeley`,
  "A reference manager and academic social network",
);

/**
 * Library to read freedesktop.org menu files
 */
export const menu_cache = mkPackage(
  nixRaw`pkgs.menu-cache`,
  "Library to read freedesktop.org menu files",
);

/**
 * Heuristics-driven menu generator for several window managers
 */
export const menumaker = mkPackage(
  nixRaw`pkgs.menumaker`,
  "Heuristics-driven menu generator for several window managers",
);

/**
 * Screen{shot,cast} and perform ImageOps on the command line
 */
export const menyoki = mkPackage(
  nixRaw`pkgs.menyoki`,
  "Screen{shot,cast} and perform ImageOps on the command line",
);

/**
 * Fast, simple, and hackable OSM map viewer
 */
export const mepo = mkPackage(
  nixRaw`pkgs.mepo`,
  "Fast, simple, and hackable OSM map viewer",
);

/**
 * A simple CLI tool to automate and control your Cisco Meraki Dashboard
 */
export const meraki_cli = mkPackage(
  nixRaw`pkgs.meraki-cli`,
  "A simple CLI tool to automate and control your Cisco Meraki Dashboard",
);

/**
 * A fast, lightweight SCM system for very large distributed projects
 */
export const mercurial = mkPackage(
  nixRaw`pkgs.mercurial`,
  "A fast, lightweight SCM system for very large distributed projects",
);

/**
 * A fast, lightweight SCM system for very large distributed projects
 */
export const mercurialFull = mkPackage(
  nixRaw`pkgs.mercurialFull`,
  "A fast, lightweight SCM system for very large distributed projects",
);

/**
 * A pure logic programming language
 */
export const mercury = mkPackage(
  nixRaw`pkgs.mercury`,
  "A pure logic programming language",
);

/**
 * Small and made-easy HTTP/HTTPS server based on Jef Poskanzer's thttpd
 */
export const merecat = mkPackage(
  nixRaw`pkgs.merecat`,
  "Small and made-easy HTTP/HTTPS server based on Jef Poskanzer's thttpd",
);

/**
 * Git mergetool leveraging code formatters
 */
export const merge_fmt = mkPackage(
  nixRaw`pkgs.merge-fmt`,
  "Git mergetool leveraging code formatters",
);

/**
 * A FUSE based union filesystem
 */
export const mergerfs = mkPackage(
  nixRaw`pkgs.mergerfs`,
  "A FUSE based union filesystem",
);

/**
 * Optional tools to help manage data in a mergerfs pool
 */
export const mergerfs_tools = mkPackage(
  nixRaw`pkgs.mergerfs-tools`,
  "Optional tools to help manage data in a mergerfs pool",
);

/**
 * Action-adventure dungeon crawl game
 */
export const meritous = mkPackage(
  nixRaw`pkgs.meritous`,
  "Action-adventure dungeon crawl game",
);

/**
 * OpenStreetMap editor
 */
export const merkaartor = mkPackage(
  nixRaw`pkgs.merkaartor`,
  "OpenStreetMap editor",
);

/**
 * Generation of diagrams from text in a similar manner as markdown
 */
export const mermaid_cli = mkPackage(
  nixRaw`pkgs.mermaid-cli`,
  "Generation of diagrams from text in a similar manner as markdown",
);

/**
 * Pandoc filter for creating diagrams in mermaid syntax blocks in markdown docs
 */
export const mermaid_filter = mkPackage(
  nixRaw`pkgs.mermaid-filter`,
  "Pandoc filter for creating diagrams in mermaid syntax blocks in markdown docs",
);

/**
 * Create Mermaid-Js ERD diagrams from existing tables
 */
export const mermerd = mkPackage(
  nixRaw`pkgs.mermerd`,
  "Create Mermaid-Js ERD diagrams from existing tables",
);

/**
 * A text face designed to be pleasant to read on screens
 */
export const merriweather = mkPackage(
  nixRaw`pkgs.merriweather`,
  "A text face designed to be pleasant to read on screens",
);

/**
 * Merriweather Sans is a low-contrast semi-condensed sans-serif text typeface family designed to be pleasant to read at very small sizes
 */
export const merriweather_sans = mkPackage(
  nixRaw`pkgs.merriweather-sans`,
  "Merriweather Sans is a low-contrast semi-condensed sans-serif text typeface family designed to be pleasant to read at very small sizes",
);

/**
 * An open source 3D graphics library
 */
export const mesa = mkPackage(
  nixRaw`pkgs.mesa`,
  "An open source 3D graphics library",
);

/**
 * Collection of demos and test programs for OpenGL and Mesa
 */
export const mesa_demos = mkPackage(
  nixRaw`pkgs.mesa-demos`,
  "Collection of demos and test programs for OpenGL and Mesa",
);

/**
 * OpenGL utility library
 */
export const mesa_glu = mkPackage(
  nixRaw`pkgs.mesa_glu`,
  "OpenGL utility library",
);

/**
 * Computer management web app
 */
export const meshcentral = mkPackage(
  nixRaw`pkgs.meshcentral`,
  "Computer management web app",
);

/**
 * A system for processing and editing 3D triangular meshes
 */
export const meshlab = mkPackage(
  nixRaw`pkgs.meshlab`,
  "A system for processing and editing 3D triangular meshes",
);

/**
 * Mesh optimization library that makes meshes smaller and faster to render
 */
export const meshoptimizer = mkPackage(
  nixRaw`pkgs.meshoptimizer`,
  "Mesh optimization library that makes meshes smaller and faster to render",
);

/**
 * A customized version of Apple’s Menlo-Regular font
 */
export const meslo_lg = mkPackage(
  nixRaw`pkgs.meslo-lg`,
  "A customized version of Apple’s Menlo-Regular font",
);

/**
 * Meslo Nerd Font patched for Powerlevel10k
 */
export const meslo_lgs_nf = mkPackage(
  nixRaw`pkgs.meslo-lgs-nf`,
  "Meslo Nerd Font patched for Powerlevel10k",
);

/**
 * An open source, fast and friendly build system made in Python
 */
export const meson = mkPackage(
  nixRaw`pkgs.meson`,
  "An open source, fast and friendly build system made in Python",
);

export const mesonEmulatorHook = mkPackage(
  nixRaw`pkgs.mesonEmulatorHook`,
  "",
);

/**
 * Tools for Amlogic Meson ARM platforms
 */
export const meson_tools = mkPackage(
  nixRaw`pkgs.meson-tools`,
  "Tools for Amlogic Meson ARM platforms",
);

export const mesos_dns = mkPackage(
  nixRaw`pkgs.mesos-dns`,
  "",
);

/**
 * An evolutionary simulation framework
 */
export const messer_slim = mkPackage(
  nixRaw`pkgs.messer-slim`,
  "An evolutionary simulation framework",
);

export const metaBuildEnv = mkPackage(
  nixRaw`pkgs.metaBuildEnv`,
  "",
);

/**
 * The easy, open source way for everyone in your company to ask questions and learn from data
 */
export const metabase = mkPackage(
  nixRaw`pkgs.metabase`,
  "The easy, open source way for everyone in your company to ask questions and learn from data",
);

/**
 * Tool to perform OSINT tasks
 */
export const metabigor = mkPackage(
  nixRaw`pkgs.metabigor`,
  "Tool to perform OSINT tasks",
);

/**
 * Python GTK application to view and clean metadata in files, using mat2
 */
export const metadata_cleaner = mkPackage(
  nixRaw`pkgs.metadata-cleaner`,
  "Python GTK application to view and clean metadata in files, using mat2",
);

/**
 * Official Equinix Metal CLI
 */
export const metal_cli = mkPackage(
  nixRaw`pkgs.metal-cli`,
  "Official Equinix Metal CLI",
);

/**
 * Language server for Scala
 */
export const metals = mkPackage(
  nixRaw`pkgs.metals`,
  "Language server for Scala",
);

/**
 * Interpreter for the metamath proof language
 */
export const metamath = mkPackage(
  nixRaw`pkgs.metamath`,
  "Interpreter for the metamath proof language",
);

/**
 * a graphical mass renaming program for files and folders
 */
export const metamorphose2 = mkPackage(
  nixRaw`pkgs.metamorphose2`,
  "a graphical mass renaming program for files and folders",
);

/**
 * Tool for generating photomosaics
 */
export const metapixel = mkPackage(
  nixRaw`pkgs.metapixel`,
  "Tool for generating photomosaics",
);

/**
 * Downloads weather reports and optionally decodes them
 */
export const metar = mkPackage(
  nixRaw`pkgs.metar`,
  "Downloads weather reports and optionally decodes them",
);

/**
 * Metasploit Framework - a collection of exploits
 */
export const metasploit = mkPackage(
  nixRaw`pkgs.metasploit`,
  "Metasploit Framework - a collection of exploits",
);

/**
 * Store and restore metadata from a filesystem
 */
export const metastore = mkPackage(
  nixRaw`pkgs.metastore`,
  "Store and restore metadata from a filesystem",
);

/**
 * Know the forecast of the next hours & days
 */
export const meteo = mkPackage(
  nixRaw`pkgs.meteo`,
  "Know the forecast of the next hours & days",
);

/**
 * Complete open source platform for building web and mobile apps in pure JavaScript
 */
export const meteor = mkPackage(
  nixRaw`pkgs.meteor`,
  "Complete open source platform for building web and mobile apps in pure JavaScript",
);

/**
 * Various meters (VU, PPM, DPM, JF, SCO) for Jack Audio Connection Kit
 */
export const meterbridge = mkPackage(
  nixRaw`pkgs.meterbridge`,
  "Various meters (VU, PPM, DPM, JF, SCO) for Jack Audio Connection Kit",
);

/**
 * Collection of audio level meters with GUI in LV2 plugin format
 */
export const metersLv2 = mkPackage(
  nixRaw`pkgs.metersLv2`,
  "Collection of audio level meters with GUI in LV2 plugin format",
);

/**
 * A clone of Taito's Bubble Bobble arcade game released for Amiga in 1993 by Apache Software
 */
export const methane = mkPackage(
  nixRaw`pkgs.methane`,
  "A clone of Taito's Bubble Bobble arcade game released for Amiga in 1993 by Apache Software",
);

/**
 * Serial graph partitioning and fill-reducing matrix ordering
 */
export const metis = mkPackage(
  nixRaw`pkgs.metis`,
  "Serial graph partitioning and fill-reducing matrix ordering",
);

/**
 * Automatic theorem prover for first-order logic with equality
 */
export const metis_prover = mkPackage(
  nixRaw`pkgs.metis-prover`,
  "Automatic theorem prover for first-order logic with equality",
);

/**
 * Lightweight shipper for metrics
 */
export const metricbeat = mkPackage(
  nixRaw`pkgs.metricbeat`,
  "Lightweight shipper for metrics",
);

/**
 * Lightweight shipper for metrics
 */
export const metricbeat7 = mkPackage(
  nixRaw`pkgs.metricbeat7`,
  "Lightweight shipper for metrics",
);

/**
 * Brother MFC-5890CN CUPS wrapper driver.
 */
export const mfc5890cncupswrapper = mkPackage(
  nixRaw`pkgs.mfc5890cncupswrapper`,
  "Brother MFC-5890CN CUPS wrapper driver.",
);

/**
 * Brother MFC-5890CN LPR printer driver
 */
export const mfc5890cnlpr = mkPackage(
  nixRaw`pkgs.mfc5890cnlpr`,
  "Brother MFC-5890CN LPR printer driver",
);

/**
 * Brother MFC-9140CDN CUPS wrapper driver
 */
export const mfc9140cdncupswrapper = mkPackage(
  nixRaw`pkgs.mfc9140cdncupswrapper`,
  "Brother MFC-9140CDN CUPS wrapper driver",
);

/**
 * Brother MFC-9140CDN LPR printer driver
 */
export const mfc9140cdnlpr = mkPackage(
  nixRaw`pkgs.mfc9140cdnlpr`,
  "Brother MFC-9140CDN LPR printer driver",
);

/**
 * Brother MFC-J470DW CUPS wrapper driver
 */
export const mfcj470dw_cupswrapper = mkPackage(
  nixRaw`pkgs.mfcj470dw-cupswrapper`,
  "Brother MFC-J470DW CUPS wrapper driver",
);

/**
 * Brother MFC-J470DW LPR driver
 */
export const mfcj470dwlpr = mkPackage(
  nixRaw`pkgs.mfcj470dwlpr`,
  "Brother MFC-J470DW LPR driver",
);

/**
 * Brother MFC-J6510DW CUPS wrapper driver
 */
export const mfcj6510dw_cupswrapper = mkPackage(
  nixRaw`pkgs.mfcj6510dw-cupswrapper`,
  "Brother MFC-J6510DW CUPS wrapper driver",
);

/**
 * Brother MFC-J6510DW LPR driver
 */
export const mfcj6510dwlpr = mkPackage(
  nixRaw`pkgs.mfcj6510dwlpr`,
  "Brother MFC-J6510DW LPR driver",
);

/**
 * Brother MFC-L2700DN CUPS wrapper driver
 */
export const mfcl2700dncupswrapper = mkPackage(
  nixRaw`pkgs.mfcl2700dncupswrapper`,
  "Brother MFC-L2700DN CUPS wrapper driver",
);

/**
 * Brother MFC-L2700DN LPR driver
 */
export const mfcl2700dnlpr = mkPackage(
  nixRaw`pkgs.mfcl2700dnlpr`,
  "Brother MFC-L2700DN LPR driver",
);

/**
 * Brother MFC-L2720DW CUPS wrapper driver
 */
export const mfcl2720dwcupswrapper = mkPackage(
  nixRaw`pkgs.mfcl2720dwcupswrapper`,
  "Brother MFC-L2720DW CUPS wrapper driver",
);

/**
 * Brother MFC-L2720DW lpr driver
 */
export const mfcl2720dwlpr = mkPackage(
  nixRaw`pkgs.mfcl2720dwlpr`,
  "Brother MFC-L2720DW lpr driver",
);

/**
 * Brother MFC-L2740DW CUPS wrapper driver
 */
export const mfcl2740dwcupswrapper = mkPackage(
  nixRaw`pkgs.mfcl2740dwcupswrapper`,
  "Brother MFC-L2740DW CUPS wrapper driver",
);

/**
 * Brother MFC-L2740DW lpr driver
 */
export const mfcl2740dwlpr = mkPackage(
  nixRaw`pkgs.mfcl2740dwlpr`,
  "Brother MFC-L2740DW lpr driver",
);

/**
 * Brother MFCL3770CDW CUPS wrapper driver
 */
export const mfcl3770cdwcupswrapper = mkPackage(
  nixRaw`pkgs.mfcl3770cdwcupswrapper`,
  "Brother MFCL3770CDW CUPS wrapper driver",
);

/**
 * Brother MFCL3770CDW driver
 */
export const mfcl3770cdwlpr = mkPackage(
  nixRaw`pkgs.mfcl3770cdwlpr`,
  "Brother MFCL3770CDW driver",
);

/**
 * Brother MFC-L8690CDW CUPS wrapper driver
 */
export const mfcl8690cdwcupswrapper = mkPackage(
  nixRaw`pkgs.mfcl8690cdwcupswrapper`,
  "Brother MFC-L8690CDW CUPS wrapper driver",
);

/**
 * Brother MFC-L8690CDW LPR printer driver
 */
export const mfcl8690cdwlpr = mkPackage(
  nixRaw`pkgs.mfcl8690cdwlpr`,
  "Brother MFC-L8690CDW LPR printer driver",
);

/**
 * MiFare Classic Universal toolKit
 */
export const mfcuk = mkPackage(
  nixRaw`pkgs.mfcuk`,
  "MiFare Classic Universal toolKit",
);

/**
 * Mifare Classic Offline Cracker
 */
export const mfoc = mkPackage(
  nixRaw`pkgs.mfoc`,
  "Mifare Classic Offline Cracker",
);

/**
 * A fork of mfoc integrating hardnested code from the proxmark
 */
export const mfoc_hardnested = mkPackage(
  nixRaw`pkgs.mfoc-hardnested`,
  "A fork of mfoc integrating hardnested code from the proxmark",
);

/**
 * Scalable PostScript Fonts for MetaFont
 */
export const mftrace = mkPackage(
  nixRaw`pkgs.mftrace`,
  "Scalable PostScript Fonts for MetaFont",
);

/**
 * Micro GNU/emacs, a portable version of the mg maintained by the OpenBSD team
 */
export const mg = mkPackage(
  nixRaw`pkgs.mg`,
  "Micro GNU/emacs, a portable version of the mg maintained by the OpenBSD team",
);

/**
 * A modern GBA emulator with a focus on accuracy
 */
export const mgba = mkPackage(
  nixRaw`pkgs.mgba`,
  "A modern GBA emulator with a focus on accuracy",
);

/**
 * Next generation distributed, event-driven, parallel config management!
 */
export const mgmt = mkPackage(
  nixRaw`pkgs.mgmt`,
  "Next generation distributed, event-driven, parallel config management!",
);

/**
 * Combines a several mount points into the single one
 */
export const mhddfs = mkPackage(
  nixRaw`pkgs.mhddfs`,
  "Combines a several mount points into the single one",
);

/**
 * A mail-to-HTML converter
 */
export const mhonarc = mkPackage(
  nixRaw`pkgs.mhonarc`,
  "A mail-to-HTML converter",
);

/**
 * A modern take on the classic host DNS lookup utility including an easy to use and very fast Rust lookup library
 */
export const mhost = mkPackage(
  nixRaw`pkgs.mhost`,
  "A modern take on the classic host DNS lookup utility including an easy to use and very fast Rust lookup library",
);

/**
 * Graphical program for editing, playing and recording sound files
 */
export const mhwaveedit = mkPackage(
  nixRaw`pkgs.mhwaveedit`,
  "Graphical program for editing, playing and recording sound files",
);

/**
 * MIDI to Lilypond converter
 */
export const mi2ly = mkPackage(
  nixRaw`pkgs.mi2ly`,
  "MIDI to Lilypond converter",
);

/**
 * A native desktop app for Pleroma and Mastodon servers
 */
export const michabo = mkPackage(
  nixRaw`pkgs.michabo`,
  "A native desktop app for Pleroma and Mastodon servers",
);

/**
 * Modern and intuitive terminal-based text editor
 */
export const micro = mkPackage(
  nixRaw`pkgs.micro`,
  "Modern and intuitive terminal-based text editor",
);

/**
 * A really small HTTP server
 */
export const micro_httpd = mkPackage(
  nixRaw`pkgs.micro-httpd`,
  "A really small HTTP server",
);

/**
 * A tiny, self-contained, configurable paste bin and URL shortener written in Rust
 */
export const microbin = mkPackage(
  nixRaw`pkgs.microbin`,
  "A tiny, self-contained, configurable paste bin and URL shortener written in Rust",
);

/**
 * AMD Processor microcode patch
 */
export const microcodeAmd = mkPackage(
  nixRaw`pkgs.microcodeAmd`,
  "AMD Processor microcode patch",
);

/**
 * Microcode for Intel processors
 */
export const microcodeIntel = mkPackage(
  nixRaw`pkgs.microcodeIntel`,
  "Microcode for Intel processors",
);

    /**
     * A minimalistic terminal program for communicating
with devices over a serial connection
     */
export const microcom = mkPackage(
  nixRaw`pkgs.microcom`,
  "A minimalistic terminal program for communicating\n    with devices over a serial connection",
);

/**
 * Lightweight implementation of dnf in C
 */
export const microdnf = mkPackage(
  nixRaw`pkgs.microdnf`,
  "Lightweight implementation of dnf in C",
);

/**
 * Reimplementation of the conda package manager
 */
export const micromamba = mkPackage(
  nixRaw`pkgs.micromamba`,
  "Reimplementation of the conda package manager",
);

/**
 * Modern, JVM-based, full-stack framework for building microservice applications
 */
export const micronaut = mkPackage(
  nixRaw`pkgs.micronaut`,
  "Modern, JVM-based, full-stack framework for building microservice applications",
);

/**
 * Upload tool for micronucleus
 */
export const micronucleus = mkPackage(
  nixRaw`pkgs.micronucleus`,
  "Upload tool for micronucleus",
);

/**
 * A powerful note-taking app that helps you organise + take notes without restrictions
 */
export const micropad = mkPackage(
  nixRaw`pkgs.micropad`,
  "A powerful note-taking app that helps you organise + take notes without restrictions",
);

/**
 * A CLI tool to make git changes across many repos
 */
export const microplane = mkPackage(
  nixRaw`pkgs.microplane`,
  "A CLI tool to make git changes across many repos",
);

/**
 * A lean and efficient Python implementation for microcontrollers and constrained systems
 */
export const micropython = mkPackage(
  nixRaw`pkgs.micropython`,
  "A lean and efficient Python implementation for microcontrollers and constrained systems",
);

/**
 * A Scheme subset for Atmel microcontrollers
 */
export const microscheme = mkPackage(
  nixRaw`pkgs.microscheme`,
  "A Scheme subset for Atmel microcontrollers",
);

/**
 * Simple ad-hoc server with SPA support
 */
export const microserver = mkPackage(
  nixRaw`pkgs.microserver`,
  "Simple ad-hoc server with SPA support",
);

/**
 * The web browser from Microsoft
 */
export const microsoft_edge = mkPackage(
  nixRaw`pkgs.microsoft-edge`,
  "The web browser from Microsoft",
);

/**
 * The web browser from Microsoft
 */
export const microsoft_edge_beta = mkPackage(
  nixRaw`pkgs.microsoft-edge-beta`,
  "The web browser from Microsoft",
);

/**
 * The web browser from Microsoft
 */
export const microsoft_edge_dev = mkPackage(
  nixRaw`pkgs.microsoft-edge-dev`,
  "The web browser from Microsoft",
);

/**
 * C++ Core Guideline support library
 */
export const microsoft_gsl = mkPackage(
  nixRaw`pkgs.microsoft-gsl`,
  "C++ Core Guideline support library",
);

/**
 * System tray application for microphone
 */
export const mictray = mkPackage(
  nixRaw`pkgs.mictray`,
  "System tray application for microphone",
);

/**
 * A simple tool which maps midi notes to simulated keystrokes
 */
export const mid2key = mkPackage(
  nixRaw`pkgs.mid2key`,
  "A simple tool which maps midi notes to simulated keystrokes",
);

/**
 * LV2 plugin which generates MIDI notes by detected audio signal peaks
 */
export const midi_trigger = mkPackage(
  nixRaw`pkgs.midi-trigger`,
  "LV2 plugin which generates MIDI notes by detected audio signal peaks",
);

/**
 * Losslessly translate MIDI to CSV and back
 */
export const midicsv = mkPackage(
  nixRaw`pkgs.midicsv`,
  "Losslessly translate MIDI to CSV and back",
);

/**
 * Multi-protocol translation tool
 */
export const midimonster = mkPackage(
  nixRaw`pkgs.midimonster`,
  "Multi-protocol translation tool",
);

/**
 * Convert MIDI Files to Piano Sheet Music for two hands
 */
export const midisheetmusic = mkPackage(
  nixRaw`pkgs.midisheetmusic`,
  "Convert MIDI Files to Piano Sheet Music for two hands",
);

/**
 * Lightweight WebKitGTK web browser
 */
export const midori = mkPackage(
  nixRaw`pkgs.midori`,
  "Lightweight WebKitGTK web browser",
);

/**
 * Lightweight WebKitGTK web browser
 */
export const midori_unwrapped = mkPackage(
  nixRaw`pkgs.midori-unwrapped`,
  "Lightweight WebKitGTK web browser",
);

/**
 * A high-quality Japanese font based on M+ fonts and IPA fonts
 */
export const migmix = mkPackage(
  nixRaw`pkgs.migmix`,
  "A high-quality Japanese font based on M+ fonts and IPA fonts",
);

/**
 * Like diff but for PostgreSQL schemas
 */
export const migra = mkPackage(
  nixRaw`pkgs.migra`,
  "Like diff but for PostgreSQL schemas",
);

/**
 * Estimates population size, migration, population splitting parameters using genetic/genomic data
 */
export const migrate = mkPackage(
  nixRaw`pkgs.migrate`,
  "Estimates population size, migration, population splitting parameters using genetic/genomic data",
);

/**
 * A high-quality Japanese font based on modified M+ fonts and IPA fonts
 */
export const migu = mkPackage(
  nixRaw`pkgs.migu`,
  "A high-quality Japanese font based on modified M+ fonts and IPA fonts",
);

/**
 * Tracker music player for the terminal
 */
export const mikmod = mkPackage(
  nixRaw`pkgs.mikmod`,
  "Tracker music player for the terminal",
);

/**
 * An extensible Mastodon client
 */
export const mikutter = mkPackage(
  nixRaw`pkgs.mikutter`,
  "An extensible Mastodon client",
);

/**
 * Music tracker application, similar to Fasttracker II
 */
export const milkytracker = mkPackage(
  nixRaw`pkgs.milkytracker`,
  "Music tracker application, similar to Fasttracker II",
);

/**
 * A build tool for Scala, Java and more
 */
export const mill = mkPackage(
  nixRaw`pkgs.mill`,
  "A build tool for Scala, Java and more",
);

/**
 * Like awk, sed, cut, join, and sort for data formats such as CSV, TSV, JSON, JSON Lines, and positionally-indexed
 */
export const miller = mkPackage(
  nixRaw`pkgs.miller`,
  "Like awk, sed, cut, join, and sort for data formats such as CSV, TSV, JSON, JSON Lines, and positionally-indexed",
);

/**
 * A language server for Standard ML
 */
export const millet = mkPackage(
  nixRaw`pkgs.millet`,
  "A language server for Standard ML",
);

/**
 * Camera application for the Librem 5
 */
export const millipixels = mkPackage(
  nixRaw`pkgs.millipixels`,
  "Camera application for the Librem 5",
);

/**
 * Higher Order Mutation Testing Tool for C and C++ programs
 */
export const milu = mkPackage(
  nixRaw`pkgs.milu`,
  "Higher Order Mutation Testing Tool for C and C++ programs",
);

/**
 * Compact, fast, general-purpose memory allocator
 */
export const mimalloc = mkPackage(
  nixRaw`pkgs.mimalloc`,
  "Compact, fast, general-purpose memory allocator",
);

/**
 * Open files by MIME-type or file name using regular expressions
 */
export const mimeo = mkPackage(
  nixRaw`pkgs.mimeo`,
  "Open files by MIME-type or file name using regular expressions",
);

/**
 * MIME handling library
 */
export const mimetic = mkPackage(
  nixRaw`pkgs.mimetic`,
  "MIME handling library",
);

/**
 * Mycroft's TTS engine, based on CMU's Flite (Festival Lite)
 */
export const mimic = mkPackage(
  nixRaw`pkgs.mimic`,
  "Mycroft's TTS engine, based on CMU's Flite (Festival Lite)",
);

/**
 * Grafana Mimir provides horizontally scalable, highly available, multi-tenant, long-term storage for Prometheus. 
 */
export const mimir = mkPackage(
  nixRaw`pkgs.mimir`,
  "Grafana Mimir provides horizontally scalable, highly available, multi-tenant, long-term storage for Prometheus. ",
);

/**
 * Command-line utilities for working with MINC files
 */
export const minc_tools = mkPackage(
  nixRaw`pkgs.minc_tools`,
  "Command-line utilities for working with MINC files",
);

/**
 * Collection of Perl and shell scripts for processing MINC files
 */
export const minc_widgets = mkPackage(
  nixRaw`pkgs.minc_widgets`,
  "Collection of Perl and shell scripts for processing MINC files",
);

/**
 * Mind-mapping application for elementary OS
 */
export const minder = mkPackage(
  nixRaw`pkgs.minder`,
  "Mind-mapping application for elementary OS",
);

/**
 * Thinking Notebook & Markdown IDE
 */
export const mindforger = mkPackage(
  nixRaw`pkgs.mindforger`,
  "Thinking Notebook & Markdown IDE",
);

/**
 * A sandbox tower defense game
 */
export const mindustry = mkPackage(
  nixRaw`pkgs.mindustry`,
  "A sandbox tower defense game",
);

/**
 * A sandbox tower defense game
 */
export const mindustry_server = mkPackage(
  nixRaw`pkgs.mindustry-server`,
  "A sandbox tower defense game",
);

/**
 * A sandbox tower defense game
 */
export const mindustry_wayland = mkPackage(
  nixRaw`pkgs.mindustry-wayland`,
  "A sandbox tower defense game",
);

/**
 * Official launcher for Minecraft, a sandbox-building game
 */
export const minecraft = mkPackage(
  nixRaw`pkgs.minecraft`,
  "Official launcher for Minecraft, a sandbox-building game",
);

/**
 * Minecraft Server
 */
export const minecraft_server = mkPackage(
  nixRaw`pkgs.minecraft-server`,
  "Minecraft Server",
);

/**
 * Autostart and stop minecraft-server when players join/leave
 */
export const minecraft_server_hibernation = mkPackage(
  nixRaw`pkgs.minecraft-server-hibernation`,
  "Autostart and stop minecraft-server when players join/leave",
);

/**
 * Cool Minecraft font
 */
export const minecraftia = mkPackage(
  nixRaw`pkgs.minecraftia`,
  "Cool Minecraft font",
);

/**
 * Sweep some mines for fun, and probably not for profit
 */
export const minesweep_rs = mkPackage(
  nixRaw`pkgs.minesweep-rs`,
  "Sweep some mines for fun, and probably not for profit",
);

/**
 * Infinite-world block sandbox game
 */
export const minetest = mkPackage(
  nixRaw`pkgs.minetest`,
  "Infinite-world block sandbox game",
);

/**
 * Realtime mapserver for minetest
 */
export const minetest_mapserver = mkPackage(
  nixRaw`pkgs.minetest-mapserver`,
  "Realtime mapserver for minetest",
);

/**
 * Infinite-world block sandbox game
 */
export const minetestclient = mkPackage(
  nixRaw`pkgs.minetestclient`,
  "Infinite-world block sandbox game",
);

/**
 * Infinite-world block sandbox game
 */
export const minetestclient_5 = mkPackage(
  nixRaw`pkgs.minetestclient_5`,
  "Infinite-world block sandbox game",
);

/**
 * Infinite-world block sandbox game
 */
export const minetestserver = mkPackage(
  nixRaw`pkgs.minetestserver`,
  "Infinite-world block sandbox game",
);

/**
 * Infinite-world block sandbox game
 */
export const minetestserver_5 = mkPackage(
  nixRaw`pkgs.minetestserver_5`,
  "Infinite-world block sandbox game",
);

export const mingetty = mkPackage(
  nixRaw`pkgs.mingetty`,
  "",
);

/**
 * minimalistic high-performance web server
 */
export const miniHttpd = mkPackage(
  nixRaw`pkgs.miniHttpd`,
  "minimalistic high-performance web server",
);

/**
 * Short read genome assembler
 */
export const minia = mkPackage(
  nixRaw`pkgs.minia`,
  "Short read genome assembler",
);

/**
 * A light-weight integrated development environment for the ChucK digital audio programming language
 */
export const miniaudicle = mkPackage(
  nixRaw`pkgs.miniaudicle`,
  "A light-weight integrated development environment for the ChucK digital audio programming language",
);

/**
 * Single header audio playback and capture library written in C
 */
export const miniaudio = mkPackage(
  nixRaw`pkgs.miniaudio`,
  "Single header audio playback and capture library written in C",
);

/**
 * Smallest Enclosing Balls of Points
 */
export const miniball = mkPackage(
  nixRaw`pkgs.miniball`,
  "Smallest Enclosing Balls of Points",
);

/**
 * A simple tool for generating self signed certificates
 */
export const minica = mkPackage(
  nixRaw`pkgs.minica`,
  "A simple tool for generating self signed certificates",
);

/**
 * Modem control and terminal emulation program
 */
export const minicom = mkPackage(
  nixRaw`pkgs.minicom`,
  "Modem control and terminal emulation program",
);

/**
 * Black-and-white djvu page encoder and decoder that use interpage information
 */
export const minidjvu = mkPackage(
  nixRaw`pkgs.minidjvu`,
  "Black-and-white djvu page encoder and decoder that use interpage information",
);

/**
 * Media server software
 */
export const minidlna = mkPackage(
  nixRaw`pkgs.minidlna`,
  "Media server software",
);

/**
 * A control interface for some MiniDSP products
 */
export const minidsp = mkPackage(
  nixRaw`pkgs.minidsp`,
  "A control interface for some MiniDSP products",
);

/**
 * Minimalist and opinionated feed reader
 */
export const miniflux = mkPackage(
  nixRaw`pkgs.miniflux`,
  "Minimalist and opinionated feed reader",
);

/**
 * Go minifiers for web formats
 */
export const minify = mkPackage(
  nixRaw`pkgs.minify`,
  "Go minifiers for web formats",
);

/**
 * A simple GOG client for Linux
 */
export const minigalaxy = mkPackage(
  nixRaw`pkgs.minigalaxy`,
  "A simple GOG client for Linux",
);

/**
 * Sandboxing library and application using Linux namespaces and capabilities
 */
export const minijail = mkPackage(
  nixRaw`pkgs.minijail`,
  "Sandboxing library and application using Linux namespaces and capabilities",
);

/**
 * A set of tools for minijail
 */
export const minijail_tools = mkPackage(
  nixRaw`pkgs.minijail-tools`,
  "A set of tools for minijail",
);

/**
 * A tool that makes it easy to run Kubernetes locally
 */
export const minikube = mkPackage(
  nixRaw`pkgs.minikube`,
  "A tool that makes it easy to run Kubernetes locally",
);

/**
 * A simple X-Window (X11R6) programming API in C
 */
export const minilibx = mkPackage(
  nixRaw`pkgs.minilibx`,
  "A simple X-Window (X11R6) programming API in C",
);

/**
 * An open-source minimalist computing technology
 */
export const minimacy = mkPackage(
  nixRaw`pkgs.minimacy`,
  "An open-source minimalist computing technology",
);

/**
 * A versatile pairwise aligner for genomic and spliced nucleotide sequences
 */
export const minimap2 = mkPackage(
  nixRaw`pkgs.minimap2`,
  "A versatile pairwise aligner for genomic and spliced nucleotide sequences",
);

/**
 * General-purpose software audio FSK modem
 */
export const minimodem = mkPackage(
  nixRaw`pkgs.minimodem`,
  "General-purpose software audio FSK modem",
);

/**
 * Emulator for rapid prototyping of Software Defined Networks
 */
export const mininet = mkPackage(
  nixRaw`pkgs.mininet`,
  "Emulator for rapid prototyping of Software Defined Networks",
);

/**
 * An S3-compatible object storage server
 */
export const minio = mkPackage(
  nixRaw`pkgs.minio`,
  "An S3-compatible object storage server",
);

/**
 * A simple Minio tool to generate self-signed certificates, and provides SAN certificates with DNS and IP entries
 */
export const minio_certgen = mkPackage(
  nixRaw`pkgs.minio-certgen`,
  "A simple Minio tool to generate self-signed certificates, and provides SAN certificates with DNS and IP entries",
);

/**
 * A replacement for ls, cp, mkdir, diff and rsync commands for filesystems and object storage
 */
export const minio_client = mkPackage(
  nixRaw`pkgs.minio-client`,
  "A replacement for ls, cp, mkdir, diff and rsync commands for filesystems and object storage",
);

/**
 * An S3-compatible object storage server
 */
export const minio_legacy_fs = mkPackage(
  nixRaw`pkgs.minio_legacy_fs`,
  "An S3-compatible object storage server",
);

/**
 * A curses-based MPD client with basic functionality that can also display an album art
 */
export const miniplayer = mkPackage(
  nixRaw`pkgs.miniplayer`,
  "A curses-based MPD client with basic functionality that can also display an album art",
);

/**
 * An open source program for controlling the MiniPRO TL866xx series of chip programmers
 */
export const minipro = mkPackage(
  nixRaw`pkgs.minipro`,
  "An open source program for controlling the MiniPRO TL866xx series of chip programmers",
);

/**
 * Compact and readable SAT solver
 */
export const minisat = mkPackage(
  nixRaw`pkgs.minisat`,
  "Compact and readable SAT solver",
);

/**
 * Compiler and inspector for the miniscript Bitcoin policy language
 */
export const miniscript = mkPackage(
  nixRaw`pkgs.miniscript`,
  "Compiler and inspector for the miniscript Bitcoin policy language",
);

/**
 * CLI tool to serve files and directories over HTTP
 */
export const miniserve = mkPackage(
  nixRaw`pkgs.miniserve`,
  "CLI tool to serve files and directories over HTTP",
);

/**
 * Run OpenShift locally
 */
export const minishift = mkPackage(
  nixRaw`pkgs.minishift`,
  "Run OpenShift locally",
);

/**
 * A simple tool for signing files and verifying signatures
 */
export const minisign = mkPackage(
  nixRaw`pkgs.minisign`,
  "A simple tool for signing files and verifying signatures",
);

/**
 * Small daemon to speed up UPnP device discoveries
 */
export const minissdpd = mkPackage(
  nixRaw`pkgs.minissdpd`,
  "Small daemon to speed up UPnP device discoveries",
);

/**
 * Simple tool for statistical comparison of data sets
 */
export const ministat = mkPackage(
  nixRaw`pkgs.ministat`,
  "Simple tool for statistical comparison of data sets",
);

/**
 * Stand-alone YouTube video player
 */
export const minitube = mkPackage(
  nixRaw`pkgs.minitube`,
  "Stand-alone YouTube video player",
);

/**
 * A client that implements the UPnP Internet Gateway Device (IGD) specification
 */
export const miniupnpc = mkPackage(
  nixRaw`pkgs.miniupnpc`,
  "A client that implements the UPnP Internet Gateway Device (IGD) specification",
);

/**
 * A daemon that implements the UPnP Internet Gateway Device (IGD) specification
 */
export const miniupnpd = mkPackage(
  nixRaw`pkgs.miniupnpd`,
  "A daemon that implements the UPnP Internet Gateway Device (IGD) specification",
);

/**
 * A small XML library
 */
export const minixml = mkPackage(
  nixRaw`pkgs.minixml`,
  "A small XML library",
);

/**
 * Single C source file zlib-replacement library
 */
export const miniz = mkPackage(
  nixRaw`pkgs.miniz`,
  "Single C source file zlib-replacement library",
);

/**
 * Minisign reimplemented in Zig
 */
export const minizign = mkPackage(
  nixRaw`pkgs.minizign`,
  "Minisign reimplemented in Zig",
);

/**
 * A medium-level constraint modelling language
 */
export const minizinc = mkPackage(
  nixRaw`pkgs.minizinc`,
  "A medium-level constraint modelling language",
);

/**
 * IDE for MiniZinc, a medium-level constraint modelling language
 */
export const minizincide = mkPackage(
  nixRaw`pkgs.minizincide`,
  "IDE for MiniZinc, a medium-level constraint modelling language",
);

/**
 * Compression library implementing the deflate compression method found in gzip and PKZIP
 */
export const minizip = mkPackage(
  nixRaw`pkgs.minizip`,
  "Compression library implementing the deflate compression method found in gzip and PKZIP",
);

/**
 * Fork of the popular zip manipulation library found in the zlib distribution
 */
export const minizip_ng = mkPackage(
  nixRaw`pkgs.minizip-ng`,
  "Fork of the popular zip manipulation library found in the zlib distribution",
);

/**
 * A refreshing language for the front-end web
 */
export const mint = mkPackage(
  nixRaw`pkgs.mint`,
  "A refreshing language for the front-end web",
);

/**
 * Mint/metal theme based on mintified versions of Clearlooks Revamp, Elementary and Faenza
 */
export const mint_x_icons = mkPackage(
  nixRaw`pkgs.mint-x-icons`,
  "Mint/metal theme based on mintified versions of Clearlooks Revamp, Elementary and Faenza",
);

/**
 * The Mint-Y icon theme
 */
export const mint_y_icons = mkPackage(
  nixRaw`pkgs.mint-y-icons`,
  "The Mint-Y icon theme",
);

/**
 * A display server and Wayland compositor developed by Canonical
 */
export const mir = mkPackage(
  nixRaw`pkgs.mir`,
  "A display server and Wayland compositor developed by Canonical",
);

/**
 * Dynamically enable sections of config files
 */
export const mir_qualia = mkPackage(
  nixRaw`pkgs.mir-qualia`,
  "Dynamically enable sections of config files",
);

/**
 * Connect external monitors via Wi-Fi
 */
export const miraclecast = mkPackage(
  nixRaw`pkgs.miraclecast`,
  "Connect external monitors via Wi-Fi",
);

/**
 * A fancy, customizable, keyboard-operable Qt/QML+Python Matrix chat client for encrypted and decentralized communication
 */
export const mirage_im = mkPackage(
  nixRaw`pkgs.mirage-im`,
  "A fancy, customizable, keyboard-operable Qt/QML+Python Matrix chat client for encrypted and decentralized communication",
);

/**
 * Resource manager for TV tuners.
 */
export const mirakurun = mkPackage(
  nixRaw`pkgs.mirakurun`,
  "Resource manager for TV tuners.",
);

/**
 * Compiler for Miranda -- a pure, non-strict, polymorphic, higher order functional programming language
 */
export const miranda = mkPackage(
  nixRaw`pkgs.miranda`,
  "Compiler for Miranda -- a pure, non-strict, polymorphic, higher order functional programming language",
);

/**
 * Teredo IPv6 Tunneling Daemon
 */
export const miredo = mkPackage(
  nixRaw`pkgs.miredo`,
  "Teredo IPv6 Tunneling Daemon",
);

/**
 * Mir based Wayland compositor
 */
export const miriway = mkPackage(
  nixRaw`pkgs.miriway`,
  "Mir based Wayland compositor",
);

/**
 * geographical download redirector for distributing files efficiently across a set of mirrors
 */
export const mirrorbits = mkPackage(
  nixRaw`pkgs.mirrorbits`,
  "geographical download redirector for distributing files efficiently across a set of mirrors",
);

/**
 * Medical image registration library and tools
 */
export const mirtk = mkPackage(
  nixRaw`pkgs.mirtk`,
  "Medical image registration library and tools",
);

/**
 * Collection of files not of crucial importance for sysadmins
 */
export const miscfiles = mkPackage(
  nixRaw`pkgs.miscfiles`,
  "Collection of files not of crucial importance for sysadmins",
);

/**
 * Monitor your CPU, Memory, Disk, Network and GPU usage
 */
export const mission_center = mkPackage(
  nixRaw`pkgs.mission-center`,
  "Monitor your CPU, Memory, Disk, Network and GPU usage",
);

/**
 * An ArduPilot ground station
 */
export const mission_planner = mkPackage(
  nixRaw`pkgs.mission-planner`,
  "An ArduPilot ground station",
);

/**
 * A Library that provides `result<T, E>` and `maybe<T>` and monadic functions for them
 */
export const mitama_cpp_result = mkPackage(
  nixRaw`pkgs.mitama-cpp-result`,
  "A Library that provides `result<T, E>` and `maybe<T>` and monadic functions for them",
);

/**
 * DHCPv6 network spoofing application
 */
export const mitm6 = mkPackage(
  nixRaw`pkgs.mitm6`,
  "DHCPv6 network spoofing application",
);

/**
 * Man-in-the-middle proxy
 */
export const mitmproxy = mkPackage(
  nixRaw`pkgs.mitmproxy`,
  "Man-in-the-middle proxy",
);

/**
 * Tool to automagically reverse-engineer REST APIs
 */
export const mitmproxy2swagger = mkPackage(
  nixRaw`pkgs.mitmproxy2swagger`,
  "Tool to automagically reverse-engineer REST APIs",
);

/**
 * MIT/GNU Scheme, a native code Scheme compiler
 */
export const mitscheme = mkPackage(
  nixRaw`pkgs.mitscheme`,
  "MIT/GNU Scheme, a native code Scheme compiler",
);

/**
 * MIT/GNU Scheme, a native code Scheme compiler
 */
export const mitschemeX11 = mkPackage(
  nixRaw`pkgs.mitschemeX11`,
  "MIT/GNU Scheme, a native code Scheme compiler",
);

/**
 * Generate nix expressions from mix.lock file.
 */
export const mix2nix = mkPackage(
  nixRaw`pkgs.mix2nix`,
  "Generate nix expressions from mix.lock file.",
);

/**
 * Digital DJ mixing software
 */
export const mixxx = mkPackage(
  nixRaw`pkgs.mixxx`,
  "Digital DJ mixing software",
);

/**
 * A moderation tool for Matrix
 */
export const mjolnir = mkPackage(
  nixRaw`pkgs.mjolnir`,
  "A moderation tool for Matrix",
);

/**
 * A suite of programs for processing MPEG or MJPEG video
 */
export const mjpegtools = mkPackage(
  nixRaw`pkgs.mjpegtools`,
  "A suite of programs for processing MPEG or MJPEG video",
);

/**
 * A suite of programs for processing MPEG or MJPEG video
 */
export const mjpegtoolsFull = mkPackage(
  nixRaw`pkgs.mjpegtoolsFull`,
  "A suite of programs for processing MPEG or MJPEG video",
);

/**
 * Takes JPGs from Linux-UVC compatible webcams, filesystem or other input plugins and streams them as M-JPEG via HTTP to webbrowsers, VLC and other software
 */
export const mjpg_streamer = mkPackage(
  nixRaw`pkgs.mjpg-streamer`,
  "Takes JPGs from Linux-UVC compatible webcams, filesystem or other input plugins and streams them as M-JPEG via HTTP to webbrowsers, VLC and other software",
);

/**
 * A simple tool for making locally-trusted development certificates
 */
export const mkcert = mkPackage(
  nixRaw`pkgs.mkcert`,
  "A simple tool for making locally-trusted development certificates",
);

/**
 * Cast macOS and Linux Audio/Video to your Google Cast and Sonos Devices
 */
export const mkchromecast = mkPackage(
  nixRaw`pkgs.mkchromecast`,
  "Cast macOS and Linux Audio/Video to your Google Cast and Sonos Devices",
);

/**
 * ANSI Common Lisp Implementation
 */
export const mkcl = mkPackage(
  nixRaw`pkgs.mkcl`,
  "ANSI Common Lisp Implementation",
);

/**
 * Command line tool to clean and optimize Matroska (.mkv / .mka / .mks / .mk3d) and WebM (.webm / .weba) files that have already been muxed
 */
export const mkclean = mkPackage(
  nixRaw`pkgs.mkclean`,
  "Command line tool to clean and optimize Matroska (.mkv / .mka / .mks / .mk3d) and WebM (.webm / .weba) files that have already been muxed",
);

/**
 * Generates CUE sheets from a CD TOC
 */
export const mkcue = mkPackage(
  nixRaw`pkgs.mkcue`,
  "Generates CUE sheets from a CD TOC",
);

/**
 * Project documentation with Markdown / static website generator
 */
export const mkdocs = mkPackage(
  nixRaw`pkgs.mkdocs`,
  "Project documentation with Markdown / static website generator",
);

/**
 * Create maps for Garmin GPS devices from OpenStreetMap (OSM) data
 */
export const mkgmap = mkPackage(
  nixRaw`pkgs.mkgmap`,
  "Create maps for Garmin GPS devices from OpenStreetMap (OSM) data",
);

/**
 * Utility for splitting OpenStreetMap maps into tiles
 */
export const mkgmap_splitter = mkPackage(
  nixRaw`pkgs.mkgmap-splitter`,
  "Utility for splitting OpenStreetMap maps into tiles",
);

/**
 * ipconfig and nfsmount tools for root on NFS, ported from klibc
 */
export const mkinitcpio_nfs_utils = mkPackage(
  nixRaw`pkgs.mkinitcpio-nfs-utils`,
  "ipconfig and nfsmount tools for root on NFS, ported from klibc",
);

/**
 * Intel OneAPI Math Kernel Library
 */
export const mkl = mkPackage(
  nixRaw`pkgs.mkl`,
  "Intel OneAPI Math Kernel Library",
);

/**
 * Build legacy-free OS images
 */
export const mkosi = mkPackage(
  nixRaw`pkgs.mkosi`,
  "Build legacy-free OS images",
);

/**
 * Build legacy-free OS images
 */
export const mkosi_full = mkPackage(
  nixRaw`pkgs.mkosi-full`,
  "Build legacy-free OS images",
);

/**
 * Vanity address generator for tor onion v3 (ed25519) hidden services
 */
export const mkp224o = mkPackage(
  nixRaw`pkgs.mkp224o`,
  "Vanity address generator for tor onion v3 (ed25519) hidden services",
);

/**
 * Overfeatured front-end to crypt, from the Debian whois package
 */
export const mkpasswd = mkPackage(
  nixRaw`pkgs.mkpasswd`,
  "Overfeatured front-end to crypt, from the Debian whois package",
);

/**
 * A Digital Random Bit Generator
 */
export const mkrand = mkPackage(
  nixRaw`pkgs.mkrand`,
  "A Digital Random Bit Generator",
);

/**
 * MirBSD Korn Shell
 */
export const mksh = mkPackage(
  nixRaw`pkgs.mksh`,
  "MirBSD Korn Shell",
);

/**
 * Tool to build and unpack SPIFFS images
 */
export const mkspiffs = mkPackage(
  nixRaw`pkgs.mkspiffs`,
  "Tool to build and unpack SPIFFS images",
);

/**
 * Simple tool to make temporary file handling in shells scripts safe and simple
 */
export const mktemp = mkPackage(
  nixRaw`pkgs.mktemp`,
  "Simple tool to make temporary file handling in shells scripts safe and simple",
);

/**
 * Command line utility to create BitTorrent metainfo files
 */
export const mktorrent = mkPackage(
  nixRaw`pkgs.mktorrent`,
  "Command line utility to create BitTorrent metainfo files",
);

/**
 * Cross-platform tools for Matroska
 */
export const mkvtoolnix = mkPackage(
  nixRaw`pkgs.mkvtoolnix`,
  "Cross-platform tools for Matroska",
);

/**
 * Cross-platform tools for Matroska
 */
export const mkvtoolnix_cli = mkPackage(
  nixRaw`pkgs.mkvtoolnix-cli`,
  "Cross-platform tools for Matroska",
);

/**
 * Imports mail from (pipermail) archives into a maildir
 */
export const mlarchive2maildir = mkPackage(
  nixRaw`pkgs.mlarchive2maildir`,
  "Imports mail from (pipermail) archives into a maildir",
);

/**
 * Intel Memory Latency Checker
 */
export const mlc = mkPackage(
  nixRaw`pkgs.mlc`,
  "Intel Memory Latency Checker",
);

/**
 * Client for many p2p networks, with multiple frontends
 */
export const mldonkey = mkPackage(
  nixRaw`pkgs.mldonkey`,
  "Client for many p2p networks, with multiple frontends",
);

/**
 * Small, flexible, terminal-based text editor
 */
export const mle = mkPackage(
  nixRaw`pkgs.mle`,
  "Small, flexible, terminal-based text editor",
);

/**
 * Open source platform for the machine learning lifecycle
 */
export const mlflow_server = mkPackage(
  nixRaw`pkgs.mlflow-server`,
  "Open source platform for the machine learning lifecycle",
);

/**
 * Library of generic and type safe containers in pure C language
 */
export const mlib = mkPackage(
  nixRaw`pkgs.mlib`,
  "Library of generic and type safe containers in pure C language",
);

/**
 * Standard ML Compiler and Toolkit
 */
export const mlkit = mkPackage(
  nixRaw`pkgs.mlkit`,
  "Standard ML Compiler and Toolkit",
);

/**
 * Mailing List Management Made Joyful
 */
export const mlmmj = mkPackage(
  nixRaw`pkgs.mlmmj`,
  "Mailing List Management Made Joyful",
);

/**
 * Command-line tool to download manga from mangaplus
 */
export const mloader = mkPackage(
  nixRaw`pkgs.mloader`,
  "Command-line tool to download manga from mangaplus",
);

/**
 * Merging locate is an utility to index and quickly search for files
 */
export const mlocate = mkPackage(
  nixRaw`pkgs.mlocate`,
  "Merging locate is an utility to index and quickly search for files",
);

/**
 * Open source multimedia framework, designed for television broadcasting
 */
export const mlt = mkPackage(
  nixRaw`pkgs.mlt`,
  "Open source multimedia framework, designed for television broadcasting",
);

/**
 * Multi Lingual TERMinal emulator
 */
export const mlterm = mkPackage(
  nixRaw`pkgs.mlterm`,
  "Multi Lingual TERMinal emulator",
);

/**
 * Multi Lingual TERMinal emulator
 */
export const mlterm_wayland = mkPackage(
  nixRaw`pkgs.mlterm-wayland`,
  "Multi Lingual TERMinal emulator",
);

/**
 * Open-source, whole-program, optimizing Standard ML compiler
 */
export const mlton = mkPackage(
  nixRaw`pkgs.mlton`,
  "Open-source, whole-program, optimizing Standard ML compiler",
);

/**
 * Open-source, whole-program, optimizing Standard ML compiler
 */
export const mlton20130715 = mkPackage(
  nixRaw`pkgs.mlton20130715`,
  "Open-source, whole-program, optimizing Standard ML compiler",
);

/**
 * Open-source, whole-program, optimizing Standard ML compiler
 */
export const mlton20180207 = mkPackage(
  nixRaw`pkgs.mlton20180207`,
  "Open-source, whole-program, optimizing Standard ML compiler",
);

/**
 * Open-source, whole-program, optimizing Standard ML compiler
 */
export const mlton20180207Binary = mkPackage(
  nixRaw`pkgs.mlton20180207Binary`,
  "Open-source, whole-program, optimizing Standard ML compiler",
);

/**
 * Open-source, whole-program, optimizing Standard ML compiler
 */
export const mlton20210107 = mkPackage(
  nixRaw`pkgs.mlton20210107`,
  "Open-source, whole-program, optimizing Standard ML compiler",
);

/**
 * Open-source, whole-program, optimizing Standard ML compiler
 */
export const mltonHEAD = mkPackage(
  nixRaw`pkgs.mltonHEAD`,
  "Open-source, whole-program, optimizing Standard ML compiler",
);

/**
 * All in one MLV processing app that is pretty great
 */
export const mlv_app = mkPackage(
  nixRaw`pkgs.mlv-app`,
  "All in one MLV processing app that is pretty great",
);

/**
 * Macintosh-like Virtual Window Manager
 */
export const mlvwm = mkPackage(
  nixRaw`pkgs.mlvwm`,
  "Macintosh-like Virtual Window Manager",
);

/**
 * A simple cross-platform graphics library that uses GLFW and OpenGL
 */
export const mlx42 = mkPackage(
  nixRaw`pkgs.mlx42`,
  "A simple cross-platform graphics library that uses GLFW and OpenGL",
);

/**
 * Control BlueField boot partitions
 */
export const mlxbf_bootctl = mkPackage(
  nixRaw`pkgs.mlxbf-bootctl`,
  "Control BlueField boot partitions",
);

/**
 * BlueField boot images
 */
export const mlxbf_bootimages = mkPackage(
  nixRaw`pkgs.mlxbf-bootimages`,
  "BlueField boot images",
);

/**
 * A file system based matrix client
 */
export const mm = mkPackage(
  nixRaw`pkgs.mm`,
  "A file system based matrix client",
);

/**
 * Common build files of GLib/GTK C++ bindings
 */
export const mm_common = mkPackage(
  nixRaw`pkgs.mm-common`,
  "Common build files of GLib/GTK C++ bindings",
);

/**
 * A small program  which wraps make to provide additional functionality
 */
export const mmake = mkPackage(
  nixRaw`pkgs.mmake`,
  "A small program  which wraps make to provide additional functionality",
);

/**
 * A powerful markdown processor in Go geared towards the IETF
 */
export const mmark = mkPackage(
  nixRaw`pkgs.mmark`,
  "A powerful markdown processor in Go geared towards the IETF",
);

/**
 * Configure MMC storage devices from userspace
 */
export const mmc_utils = mkPackage(
  nixRaw`pkgs.mmc-utils`,
  "Configure MMC storage devices from userspace",
);

/**
 * A remote CLI tool for Mattermost
 */
export const mmctl = mkPackage(
  nixRaw`pkgs.mmctl`,
  "A remote CLI tool for Mattermost",
);

/**
 * Minimal Markdown Documentation
 */
export const mmdoc = mkPackage(
  nixRaw`pkgs.mmdoc`,
  "Minimal Markdown Documentation",
);

/**
 * Easy-to-use personal finance software
 */
export const mmex = mkPackage(
  nixRaw`pkgs.mmex`,
  "Easy-to-use personal finance software",
);

/**
 * Set of electronic mail handling programs
 */
export const mmh = mkPackage(
  nixRaw`pkgs.mmh`,
  "Set of electronic mail handling programs",
);

/**
 * MMIX simulator and assembler
 */
export const mmixware = mkPackage(
  nixRaw`pkgs.mmixware`,
  "MMIX simulator and assembler",
);

/**
 * MML (Music Macro Language) editor and compiler GUI, powered by the ctrmml framework
 */
export const mmlgui = mkPackage(
  nixRaw`pkgs.mmlgui`,
  "MML (Music Macro Language) editor and compiler GUI, powered by the ctrmml framework",
);

/**
 * Multimedia Messaging Service Daemon
 */
export const mmsd = mkPackage(
  nixRaw`pkgs.mmsd`,
  "Multimedia Messaging Service Daemon",
);

/**
 * Multimedia Messaging Service Daemon - The Next Generation
 */
export const mmsd_tng = mkPackage(
  nixRaw`pkgs.mmsd-tng`,
  "Multimedia Messaging Service Daemon - The Next Generation",
);

/**
 * Ultra fast and sensitive sequence search and clustering suite
 */
export const mmseqs2 = mkPackage(
  nixRaw`pkgs.mmseqs2`,
  "Ultra fast and sensitive sequence search and clustering suite",
);

/**
 * Minimal mpd terminal client that aims to be simple yet highly configurable
 */
export const mmtc = mkPackage(
  nixRaw`pkgs.mmtc`,
  "Minimal mpd terminal client that aims to be simple yet highly configurable",
);

/**
 * A library of exchange-correlation functionals with arbitrary-order derivatives
 */
export const mmtf_cpp = mkPackage(
  nixRaw`pkgs.mmtf-cpp`,
  "A library of exchange-correlation functionals with arbitrary-order derivatives",
);

/**
 * A set of utilities for querying xrandr monitor information
 */
export const mmutils = mkPackage(
  nixRaw`pkgs.mmutils`,
  "A set of utilities for querying xrandr monitor information",
);

/**
 * Utility for wildcard renaming, copying, etc
 */
export const mmv = mkPackage(
  nixRaw`pkgs.mmv`,
  "Utility for wildcard renaming, copying, etc",
);

/**
 * Rename multiple files using your $EDITOR
 */
export const mmv_go = mkPackage(
  nixRaw`pkgs.mmv-go`,
  "Rename multiple files using your $EDITOR",
);

/**
 * An intelligent and highly configurable media organization utility
 */
export const mnamer = mkPackage(
  nixRaw`pkgs.mnamer`,
  "An intelligent and highly configurable media organization utility",
);

/**
 * Opens the user's crontab and echos the time when the next cronjob will be ran
 */
export const mnc = mkPackage(
  nixRaw`pkgs.mnc`,
  "Opens the user's crontab and echos the time when the next cronjob will be ran",
);

        /**
         * Routines which implement a method for encoding binary data into a sequence
of words which can be spoken over the phone, for example, and converted
back to data on the other side.

         */
export const mnemonicode = mkPackage(
  nixRaw`pkgs.mnemonicode`,
  "Routines which implement a method for encoding binary data into a sequence\nof words which can be spoken over the phone, for example, and converted\nback to data on the other side.\n",
);

/**
 * Spaced-repetition software
 */
export const mnemosyne = mkPackage(
  nixRaw`pkgs.mnemosyne`,
  "Spaced-repetition software",
);

/**
 * Tools for automated registration using the MINC image format
 */
export const mni_autoreg = mkPackage(
  nixRaw`pkgs.mni_autoreg`,
  "Tools for automated registration using the MINC image format",
);

/**
 * A large database of handwritten digits
 */
export const mnist = mkPackage(
  nixRaw`pkgs.mnist`,
  "A large database of handwritten digits",
);

/**
 * minimalist monospaced font
 */
export const mno16 = mkPackage(
  nixRaw`pkgs.mno16`,
  "minimalist monospaced font",
);

/**
 * Nice-to-use pager for humans
 */
export const moar = mkPackage(
  nixRaw`pkgs.moar`,
  "Nice-to-use pager for humans",
);

/**
 * VM with adaptive optimization and JIT compilation, built for Rakudo
 */
export const moarvm = mkPackage(
  nixRaw`pkgs.moarvm`,
  "VM with adaptive optimization and JIT compilation, built for Rakudo",
);

/**
 * Tool for smooth git handover
 */
export const mob = mkPackage(
  nixRaw`pkgs.mob`,
  "Tool for smooth git handover",
);

/**
 * Mobile broadband service provider database
 */
export const mobile_broadband_provider_info = mkPackage(
  nixRaw`pkgs.mobile-broadband-provider-info`,
  "Mobile broadband service provider database",
);

/**
 * A user-friendly desktop wallet with support for transaction history, encrypted contact book, gift codes, and payments
 */
export const mobilecoin_wallet = mkPackage(
  nixRaw`pkgs.mobilecoin-wallet`,
  "A user-friendly desktop wallet with support for transaction history, encrypted contact book, gift codes, and payments",
);

/**
 * Mobilizon is an online tool to help manage your events, your profiles and your groups
 */
export const mobilizon = mkPackage(
  nixRaw`pkgs.mobilizon`,
  "Mobilizon is an online tool to help manage your events, your profiles and your groups",
);

/**
 * An ncurses console audio player designed to be powerful and easy to use
 */
export const moc = mkPackage(
  nixRaw`pkgs.moc`,
  "An ncurses console audio player designed to be powerful and easy to use",
);

/**
 * GoMock is a mocking framework for the Go programming language
 */
export const mockgen = mkPackage(
  nixRaw`pkgs.mockgen`,
  "GoMock is a mocking framework for the Go programming language",
);

/**
 * Generic unit testing framework and methodology for testing any kind of code
 */
export const mockobjects = mkPackage(
  nixRaw`pkgs.mockobjects`,
  "Generic unit testing framework and methodology for testing any kind of code",
);

/**
 * The easiest and quickest way to run mock APIs locally
 */
export const mockoon = mkPackage(
  nixRaw`pkgs.mockoon`,
  "The easiest and quickest way to run mock APIs locally",
);

/**
 * Automated Semantic Import Versioning Upgrades for Go
 */
export const mod = mkPackage(
  nixRaw`pkgs.mod`,
  "Automated Semantic Import Versioning Upgrades for Go",
);

/**
 * a LV2 arpeggiator
 */
export const mod_arpeggiator_lv2 = mkPackage(
  nixRaw`pkgs.mod-arpeggiator-lv2`,
  "a LV2 arpeggiator",
);

/**
 * RedWax CA service module
 */
export const mod_ca = mkPackage(
  nixRaw`pkgs.mod_ca`,
  "RedWax CA service module",
);

/**
 * RedWax module for Certificate Revocation Lists
 */
export const mod_crl = mkPackage(
  nixRaw`pkgs.mod_crl`,
  "RedWax module for Certificate Revocation Lists",
);

/**
 * RedWax CA service module to handle Certificate Signing Requests
 */
export const mod_csr = mkPackage(
  nixRaw`pkgs.mod_csr`,
  "RedWax CA service module to handle Certificate Signing Requests",
);

/**
 * Analog distortion emulation lv2 plugins
 */
export const mod_distortion = mkPackage(
  nixRaw`pkgs.mod-distortion`,
  "Analog distortion emulation lv2 plugins",
);

/**
 * Provide Zeroconf support via DNS-SD using Avahi
 */
export const mod_dnssd = mkPackage(
  nixRaw`pkgs.mod_dnssd`,
  "Provide Zeroconf support via DNS-SD using Avahi",
);

/**
 * Provide support for the FastCGI protocol
 */
export const mod_fastcgi = mkPackage(
  nixRaw`pkgs.mod_fastcgi`,
  "Provide support for the FastCGI protocol",
);

/**
 * RedWax CA service modules of OCSP Online Certificate Validation
 */
export const mod_ocsp = mkPackage(
  nixRaw`pkgs.mod_ocsp`,
  "RedWax CA service modules of OCSP Online Certificate Validation",
);

/**
 * RedWax CA service modules for PKCS#12 format files
 */
export const mod_pkcs12 = mkPackage(
  nixRaw`pkgs.mod_pkcs12`,
  "RedWax CA service modules for PKCS#12 format files",
);

/**
 * An Apache module that embeds the Python interpreter within the server
 */
export const mod_python = mkPackage(
  nixRaw`pkgs.mod_python`,
  "An Apache module that embeds the Python interpreter within the server",
);

/**
 * RedWax CA service modules for SCEP (Automatic ceritifcate issue/renewal)
 */
export const mod_scep = mkPackage(
  nixRaw`pkgs.mod_scep`,
  "RedWax CA service modules for SCEP (Automatic ceritifcate issue/renewal)",
);

/**
 * RedWax CA service module for handling the Netscape keygen requests. 
 */
export const mod_spkac = mkPackage(
  nixRaw`pkgs.mod_spkac`,
  "RedWax CA service module for handling the Netscape keygen requests. ",
);

/**
 * RedWax CA service module for issuing signed timestamps
 */
export const mod_timestamp = mkPackage(
  nixRaw`pkgs.mod_timestamp`,
  "RedWax CA service module for issuing signed timestamps",
);

/**
 * A flexible developer tool that runs processes and responds to filesystem changes
 */
export const modd = mkPackage(
  nixRaw`pkgs.modd`,
  "A flexible developer tool that runs processes and responds to filesystem changes",
);

/**
 * An app to send/receive SMS, make USSD requests, control mobile data usage and more
 */
export const modem_manager_gui = mkPackage(
  nixRaw`pkgs.modem-manager-gui`,
  "An app to send/receive SMS, make USSD requests, control mobile data usage and more",
);

/**
 * WWAN modem manager, part of NetworkManager
 */
export const modemmanager = mkPackage(
  nixRaw`pkgs.modemmanager`,
  "WWAN modem manager, part of NetworkManager",
);

/**
 * A C++ API for Kafka clients (i.e. KafkaProducer, KafkaConsumer, AdminClient)
 */
export const modern_cpp_kafka = mkPackage(
  nixRaw`pkgs.modern-cpp-kafka`,
  "A C++ API for Kafka clients (i.e. KafkaProducer, KafkaConsumer, AdminClient)",
);

/**
 * AI on the command line
 */
export const mods = mkPackage(
  nixRaw`pkgs.mods`,
  "AI on the command line",
);

        /**
         * The OWASP ModSecurity Core Rule Set is a set of generic attack detection
rules for use with ModSecurity or compatible web application firewalls.

         */
export const modsecurity_crs = mkPackage(
  nixRaw`pkgs.modsecurity-crs`,
  "The OWASP ModSecurity Core Rule Set is a set of generic attack detection\nrules for use with ModSecurity or compatible web application firewalls.\n",
);

/**
 * Open source, cross-platform web application firewall (WAF)
 */
export const modsecurity_standalone = mkPackage(
  nixRaw`pkgs.modsecurity_standalone`,
  "Open source, cross-platform web application firewall (WAF)",
);

/**
 * A small, 8-bit clean editor
 */
export const moe = mkPackage(
  nixRaw`pkgs.moe`,
  "A small, 8-bit clean editor",
);

/**
 * The MOE Li Font, a clerical Chinese font by the Ministry of Education, ROC (Taiwan)
 */
export const moeli = mkPackage(
  nixRaw`pkgs.moeli`,
  "The MOE Li Font, a clerical Chinese font by the Ministry of Education, ROC (Taiwan)",
);

/**
 * Mac OSX Mojave like theme for GTK based desktop environments
 */
export const mojave_gtk_theme = mkPackage(
  nixRaw`pkgs.mojave-gtk-theme`,
  "Mac OSX Mojave like theme for GTK based desktop environments",
);

/**
 * Icon theme designed with a minimal flat style using simple geometry and bright colours
 */
export const moka_icon_theme = mkPackage(
  nixRaw`pkgs.moka-icon-theme`,
  "Icon theme designed with a minimal flat style using simple geometry and bright colours",
);

/**
 * Utility to manipulate machines owner keys
 */
export const mokutil = mkPackage(
  nixRaw`pkgs.mokutil`,
  "Utility to manipulate machines owner keys",
);

/**
 * A faster drop-in replacement for existing Unix linkers (unwrapped)
 */
export const mold = mkPackage(
  nixRaw`pkgs.mold`,
  "A faster drop-in replacement for existing Unix linkers (unwrapped)",
);

/**
 * A faster drop-in replacement for existing Unix linkers (unwrapped) (wrapper script)
 */
export const mold_wrapped = mkPackage(
  nixRaw`pkgs.mold-wrapped`,
  "A faster drop-in replacement for existing Unix linkers (unwrapped) (wrapper script)",
);

/**
 * Display and manipulate molecular structures
 */
export const molden = mkPackage(
  nixRaw`pkgs.molden`,
  "Display and manipulate molecular structures",
);

/**
 * CLI application to create SSH tunnels
 */
export const mole = mkPackage(
  nixRaw`pkgs.mole`,
  "CLI application to create SSH tunnels",
);

/**
 * Molecule aids in the development and testing of Ansible roles
 */
export const molecule = mkPackage(
  nixRaw`pkgs.molecule`,
  "Molecule aids in the development and testing of Ansible roles",
);

/**
 * Desktop integration of high performance computing resources
 */
export const molequeue = mkPackage(
  nixRaw`pkgs.molequeue`,
  "Desktop integration of high performance computing resources",
);

/**
 * Full-featured Gemini server
 */
export const molly_brown = mkPackage(
  nixRaw`pkgs.molly-brown`,
  "Full-featured Gemini server",
);

/**
 * Attempts to prevent you from accidentally shutting down or rebooting machines
 */
export const molly_guard = mkPackage(
  nixRaw`pkgs.molly-guard`,
  "Attempts to prevent you from accidentally shutting down or rebooting machines",
);

/**
 * Stereo and mono audio signal dynamic range compressor in LV2 format
 */
export const molot_lite = mkPackage(
  nixRaw`pkgs.molot-lite`,
  "Stereo and mono audio signal dynamic range compressor in LV2 format",
);

/**
 * French TV service
 */
export const molotov = mkPackage(
  nixRaw`pkgs.molotov`,
  "French TV service",
);

/**
 * 2D molecule editor
 */
export const molsketch = mkPackage(
  nixRaw`pkgs.molsketch`,
  "2D molecule editor",
);

/**
 * Flexible Linux input device translator, geared for gamepads
 */
export const moltengamepad = mkPackage(
  nixRaw`pkgs.moltengamepad`,
  "Flexible Linux input device translator, geared for gamepads",
);

/**
 * mommy's here to support you, in any shell, on any system~ ❤️
 */
export const mommy = mkPackage(
  nixRaw`pkgs.mommy`,
  "mommy's here to support you, in any shell, on any system~ ❤️",
);

/**
 * A variable font from GitHub
 */
export const mona_sans = mkPackage(
  nixRaw`pkgs.mona-sans`,
  "A variable font from GitHub",
);

/**
 * Open source XR runtime
 */
export const monado = mkPackage(
  nixRaw`pkgs.monado`,
  "Open source XR runtime",
);

/**
 * Private, secure, untraceable currency
 */
export const monero_cli = mkPackage(
  nixRaw`pkgs.monero-cli`,
  "Private, secure, untraceable currency",
);

/**
 * Private, secure, untraceable currency
 */
export const monero_gui = mkPackage(
  nixRaw`pkgs.monero-gui`,
  "Private, secure, untraceable currency",
);

/**
 * An open source database system
 */
export const monetdb = mkPackage(
  nixRaw`pkgs.monetdb`,
  "An open source database system",
);

/**
 * Moneyplex online banking software
 */
export const moneyplex = mkPackage(
  nixRaw`pkgs.moneyplex`,
  "Moneyplex online banking software",
);

/**
 * MongoDB auditing and pentesting tool
 */
export const mongoaudit = mkPackage(
  nixRaw`pkgs.mongoaudit`,
  "MongoDB auditing and pentesting tool",
);

/**
 * The official C client library for MongoDB
 */
export const mongoc = mkPackage(
  nixRaw`pkgs.mongoc`,
  "The official C client library for MongoDB",
);

/**
 * The official C++ client library for MongoDB
 */
export const mongocxx = mkPackage(
  nixRaw`pkgs.mongocxx`,
  "The official C++ client library for MongoDB",
);

/**
 * A scalable, high-performance, open source NoSQL database
 */
export const mongodb = mkPackage(
  nixRaw`pkgs.mongodb`,
  "A scalable, high-performance, open source NoSQL database",
);

/**
 * A scalable, high-performance, open source NoSQL database
 */
export const mongodb_4_4 = mkPackage(
  nixRaw`pkgs.mongodb-4_4`,
  "A scalable, high-performance, open source NoSQL database",
);

/**
 * A scalable, high-performance, open source NoSQL database
 */
export const mongodb_5_0 = mkPackage(
  nixRaw`pkgs.mongodb-5_0`,
  "A scalable, high-performance, open source NoSQL database",
);

/**
 * A scalable, high-performance, open source NoSQL database
 */
export const mongodb_6_0 = mkPackage(
  nixRaw`pkgs.mongodb-6_0`,
  "A scalable, high-performance, open source NoSQL database",
);

/**
 * The GUI for MongoDB
 */
export const mongodb_compass = mkPackage(
  nixRaw`pkgs.mongodb-compass`,
  "The GUI for MongoDB",
);

/**
 * Tools for the MongoDB
 */
export const mongodb_tools = mkPackage(
  nixRaw`pkgs.mongodb-tools`,
  "Tools for the MongoDB",
);

/**
 * Graph Coarsening and Partitioning Library
 */
export const mongoose = mkPackage(
  nixRaw`pkgs.mongoose`,
  "Graph Coarsening and Partitioning Library",
);

/**
 * The MongoDB Shell
 */
export const mongosh = mkPackage(
  nixRaw`pkgs.mongosh`,
  "The MongoDB Shell",
);

/**
 * Personal CRM
 */
export const monica = mkPackage(
  nixRaw`pkgs.monica`,
  "Personal CRM",
);

/**
 * Monitoring system
 */
export const monit = mkPackage(
  nixRaw`pkgs.monit`,
  "Monitoring system",
);

/**
 * Manage processes and monitor system resources
 */
export const monitor = mkPackage(
  nixRaw`pkgs.monitor`,
  "Manage processes and monitor system resources",
);

/**
 * A macOS system extension to control brightness and volume of external displays with native OSD
 */
export const monitorcontrol = mkPackage(
  nixRaw`pkgs.monitorcontrol`,
  "A macOS system extension to control brightness and volume of external displays with native OSD",
);

/**
 * Official monitoring plugins for Nagios/Icinga/Sensu and others
 */
export const monitoring_plugins = mkPackage(
  nixRaw`pkgs.monitoring-plugins`,
  "Official monitoring plugins for Nagios/Icinga/Sensu and others",
);

/**
 * APE codec and decompressor
 */
export const monkeysAudio = mkPackage(
  nixRaw`pkgs.monkeysAudio`,
  "APE codec and decompressor",
);

/**
 * Leverage the OpenPGP web of trust for SSH and TLS authentication
 */
export const monkeysphere = mkPackage(
  nixRaw`pkgs.monkeysphere`,
  "Leverage the OpenPGP web of trust for SSH and TLS authentication",
);

/**
 * Cross platform, open source .NET development framework
 */
export const mono = mkPackage(
  nixRaw`pkgs.mono`,
  "Cross platform, open source .NET development framework",
);

/**
 * Cross platform, open source .NET development framework
 */
export const mono4 = mkPackage(
  nixRaw`pkgs.mono4`,
  "Cross platform, open source .NET development framework",
);

/**
 * Cross platform, open source .NET development framework
 */
export const mono5 = mkPackage(
  nixRaw`pkgs.mono5`,
  "Cross platform, open source .NET development framework",
);

/**
 * Cross platform, open source .NET development framework
 */
export const mono6 = mkPackage(
  nixRaw`pkgs.mono6`,
  "Cross platform, open source .NET development framework",
);

export const monoDLLFixer = mkPackage(
  nixRaw`pkgs.monoDLLFixer`,
  "",
);

/**
 * A generic framework for creating extensible applications
 */
export const mono_addins = mkPackage(
  nixRaw`pkgs.mono-addins`,
  "A generic framework for creating extensible applications",
);

/**
 * A programming font based on the typeface used in Minecraft
 */
export const monocraft = mkPackage(
  nixRaw`pkgs.monocraft`,
  "A programming font based on the typeface used in Minecraft",
);

/**
 * Boring crypto that simply works
 */
export const monocypher = mkPackage(
  nixRaw`pkgs.monocypher`,
  "Boring crypto that simply works",
);

/**
 * Customisable coding font with alternates, ligatures and contextual positioning
 */
export const monoid = mkPackage(
  nixRaw`pkgs.monoid`,
  "Customisable coding font with alternates, ligatures and contextual positioning",
);

/**
 * Bundle any web page into a single HTML file
 */
export const monolith = mkPackage(
  nixRaw`pkgs.monolith`,
  "Bundle any web page into a single HTML file",
);

/**
 * A font for programming and code review
 */
export const mononoki = mkPackage(
  nixRaw`pkgs.mononoki`,
  "A font for programming and code review",
);

/**
 * SMT solver for Monotonic Theories
 */
export const monosat = mkPackage(
  nixRaw`pkgs.monosat`,
  "SMT solver for Monotonic Theories",
);

/**
 * A free distributed version control system
 */
export const monotone = mkPackage(
  nixRaw`pkgs.monotone`,
  "A free distributed version control system",
);

/**
 * Monotone ancestry visualiser
 */
export const monotoneViz = mkPackage(
  nixRaw`pkgs.monotoneViz`,
  "Monotone ancestry visualiser",
);

/**
 * POSIX Shell script to quickly manage 2-monitors display
 */
export const mons = mkPackage(
  nixRaw`pkgs.mons`,
  "POSIX Shell script to quickly manage 2-monitors display",
);

/**
 * Fast HTTP enumerator
 */
export const monsoon = mkPackage(
  nixRaw`pkgs.monsoon`,
  "Fast HTTP enumerator",
);

/**
 * A geometric sans serif font with extended latin support (Regular, Alternates, Subrayada)
 */
export const montserrat = mkPackage(
  nixRaw`pkgs.montserrat`,
  "A geometric sans serif font with extended latin support (Regular, Alternates, Subrayada)",
);

/**
 * Variable reverb audio effect, jack and lv2
 */
export const mooSpace = mkPackage(
  nixRaw`pkgs.mooSpace`,
  "Variable reverb audio effect, jack and lv2",
);

/**
 * Free and open-source learning management system (LMS) written in PHP
 */
export const moodle = mkPackage(
  nixRaw`pkgs.moodle`,
  "Free and open-source learning management system (LMS) written in PHP",
);

/**
 * A Moodle downloader that downloads course content fast from Moodle
 */
export const moodle_dl = mkPackage(
  nixRaw`pkgs.moodle-dl`,
  "A Moodle downloader that downloads course content fast from Moodle",
);

/**
 * GUI app and daemon to work with Mooltipass device via USB
 */
export const moolticute = mkPackage(
  nixRaw`pkgs.moolticute`,
  "GUI app and daemon to work with Mooltipass device via USB",
);

/**
 * A task runner and repo management tool for the web ecosystem, written in Rust
 */
export const moon = mkPackage(
  nixRaw`pkgs.moon`,
  "A task runner and repo management tool for the web ecosystem, written in Rust",
);

/**
 * A simple character graphics game where you drive some kind of car across the moon's surface
 */
export const moon_buggy = mkPackage(
  nixRaw`pkgs.moon-buggy`,
  "A simple character graphics game where you drive some kind of car across the moon's surface",
);

/**
 * Command-line/WM bar tool to display the moon phase at a certain date
 */
export const moon_phases = mkPackage(
  nixRaw`pkgs.moon-phases`,
  "Command-line/WM bar tool to display the moon phase at a certain date",
);

/**
 * Moonfire NVR, a security camera network video recorder
 */
export const moonfire_nvr = mkPackage(
  nixRaw`pkgs.moonfire-nvr`,
  "Moonfire NVR, a security camera network video recorder",
);

/**
 * Just another "fancy" Gemini client
 */
export const moonlander = mkPackage(
  nixRaw`pkgs.moonlander`,
  "Just another \"fancy\" Gemini client",
);

/**
 * Open source implementation of NVIDIA's GameStream
 */
export const moonlight_embedded = mkPackage(
  nixRaw`pkgs.moonlight-embedded`,
  "Open source implementation of NVIDIA's GameStream",
);

/**
 * Play your PC games on almost any device
 */
export const moonlight_qt = mkPackage(
  nixRaw`pkgs.moonlight-qt`,
  "Play your PC games on almost any device",
);

/**
 * API web server for Klipper
 */
export const moonraker = mkPackage(
  nixRaw`pkgs.moonraker`,
  "API web server for Klipper",
);

/**
 * Open Source, Petabyte, Fault-Tolerant, Highly Performing, Scalable Network Distributed File System
 */
export const moosefs = mkPackage(
  nixRaw`pkgs.moosefs`,
  "Open Source, Petabyte, Fault-Tolerant, Highly Performing, Scalable Network Distributed File System",
);

/**
 * Simple stock tracker implemented in go
 */
export const mop = mkPackage(
  nixRaw`pkgs.mop`,
  "Simple stock tracker implemented in go",
);

/**
 * Semiempirical quantum chemistry
 */
export const mopac = mkPackage(
  nixRaw`pkgs.mopac`,
  "Semiempirical quantum chemistry",
);

/**
 * An extensible music server that plays music from local disk, Spotify, SoundCloud, and more
 */
export const mopidy = mkPackage(
  nixRaw`pkgs.mopidy`,
  "An extensible music server that plays music from local disk, Spotify, SoundCloud, and more",
);

/**
 * Mopidy extension for playing music from bandcamp
 */
export const mopidy_bandcamp = mkPackage(
  nixRaw`pkgs.mopidy-bandcamp`,
  "Mopidy extension for playing music from bandcamp",
);

/**
 * A fully-functional Mopidy web client encompassing Spotify and many other backends
 */
export const mopidy_iris = mkPackage(
  nixRaw`pkgs.mopidy-iris`,
  "A fully-functional Mopidy web client encompassing Spotify and many other backends",
);

/**
 * Mopidy extension for playing audio files from Jellyfin
 */
export const mopidy_jellyfin = mkPackage(
  nixRaw`pkgs.mopidy-jellyfin`,
  "Mopidy extension for playing audio files from Jellyfin",
);

/**
 * Mopidy extension for playing music from your local music archive
 */
export const mopidy_local = mkPackage(
  nixRaw`pkgs.mopidy-local`,
  "Mopidy extension for playing music from your local music archive",
);

/**
 * A web client for Mopidy
 */
export const mopidy_moped = mkPackage(
  nixRaw`pkgs.mopidy-moped`,
  "A web client for Mopidy",
);

/**
 * A mopidy webclient based on the Spotify webbased interface
 */
export const mopidy_mopify = mkPackage(
  nixRaw`pkgs.mopidy-mopify`,
  "A mopidy webclient based on the Spotify webbased interface",
);

/**
 * Mopidy extension for controlling playback from MPD clients
 */
export const mopidy_mpd = mkPackage(
  nixRaw`pkgs.mopidy-mpd`,
  "Mopidy extension for controlling playback from MPD clients",
);

/**
 * Mopidy extension for controlling Mopidy through D-Bus using the MPRIS specification
 */
export const mopidy_mpris = mkPackage(
  nixRaw`pkgs.mopidy-mpris`,
  "Mopidy extension for controlling Mopidy through D-Bus using the MPRIS specification",
);

/**
 * Mopidy web client with Snapcast support
 */
export const mopidy_muse = mkPackage(
  nixRaw`pkgs.mopidy-muse`,
  "Mopidy web client with Snapcast support",
);

/**
 * A Mopidy frontend extension and web client with additional features for Pi MusicBox
 */
export const mopidy_musicbox_webclient = mkPackage(
  nixRaw`pkgs.mopidy-musicbox-webclient`,
  "A Mopidy frontend extension and web client with additional features for Pi MusicBox",
);

/**
 * Mopidy extension for showing desktop notifications on track change
 */
export const mopidy_notify = mkPackage(
  nixRaw`pkgs.mopidy-notify`,
  "Mopidy extension for showing desktop notifications on track change",
);

/**
 * Mopidy extension for browsing and playing podcasts
 */
export const mopidy_podcast = mkPackage(
  nixRaw`pkgs.mopidy-podcast`,
  "Mopidy extension for browsing and playing podcasts",
);

/**
 * Mopidy extension for scrobbling played tracks to Last.fm.
 */
export const mopidy_scrobbler = mkPackage(
  nixRaw`pkgs.mopidy-scrobbler`,
  "Mopidy extension for scrobbling played tracks to Last.fm.",
);

/**
 * Mopidy extension for playing music from SomaFM
 */
export const mopidy_somafm = mkPackage(
  nixRaw`pkgs.mopidy-somafm`,
  "Mopidy extension for playing music from SomaFM",
);

/**
 * Mopidy extension for playing music from SoundCloud
 */
export const mopidy_soundcloud = mkPackage(
  nixRaw`pkgs.mopidy-soundcloud`,
  "Mopidy extension for playing music from SoundCloud",
);

/**
 * Mopidy extension for playing music from Spotify
 */
export const mopidy_spotify = mkPackage(
  nixRaw`pkgs.mopidy-spotify`,
  "Mopidy extension for playing music from Spotify",
);

/**
 * Mopidy extension for playing music from a Subsonic-compatible Music Server
 */
export const mopidy_subidy = mkPackage(
  nixRaw`pkgs.mopidy-subidy`,
  "Mopidy extension for playing music from a Subsonic-compatible Music Server",
);

/**
 * Mopidy extension for playing music from Tidal
 */
export const mopidy_tidal = mkPackage(
  nixRaw`pkgs.mopidy-tidal`,
  "Mopidy extension for playing music from Tidal",
);

/**
 * Mopidy extension for playing music from tunein
 */
export const mopidy_tunein = mkPackage(
  nixRaw`pkgs.mopidy-tunein`,
  "Mopidy extension for playing music from tunein",
);

/**
 * Mopidy extension for playing music from YouTube
 */
export const mopidy_youtube = mkPackage(
  nixRaw`pkgs.mopidy-youtube`,
  "Mopidy extension for playing music from YouTube",
);

/**
 * Mopidy extension for playing music from YouTube Music
 */
export const mopidy_ytmusic = mkPackage(
  nixRaw`pkgs.mopidy-ytmusic`,
  "Mopidy extension for playing music from YouTube Music",
);

/**
 * Interface mocking tool for go generate
 */
export const moq = mkPackage(
  nixRaw`pkgs.moq`,
  "Interface mocking tool for go generate",
);

export const more = mkPackage(
  nixRaw`pkgs.more`,
  "",
);

/**
 * Growing collection of the unix tools that nobody thought to write long ago when unix was young
 */
export const moreutils = mkPackage(
  nixRaw`pkgs.moreutils`,
  "Growing collection of the unix tools that nobody thought to write long ago when unix was young",
);

/**
 * All-in-one Calendars, Tasks and Scheduler
 */
export const morgen = mkPackage(
  nixRaw`pkgs.morgen`,
  "All-in-one Calendars, Tasks and Scheduler",
);

/**
 * A NixOS host manager written in Golang
 */
export const morph = mkPackage(
  nixRaw`pkgs.morph`,
  "A NixOS host manager written in Golang",
);

/**
 * Command line tool to translate morse code input to text in real time
 */
export const morsel = mkPackage(
  nixRaw`pkgs.morsel`,
  "Command line tool to translate morse code input to text in real time",
);

/**
 * Privacy aware web content sanitizer proxy as a service
 */
export const morty = mkPackage(
  nixRaw`pkgs.morty`,
  "Privacy aware web content sanitizer proxy as a service",
);

/**
 * fast BAM/CRAM depth calculation for WGS, exome, or targeted sequencing
 */
export const mosdepth = mkPackage(
  nixRaw`pkgs.mosdepth`,
  "fast BAM/CRAM depth calculation for WGS, exome, or targeted sequencing",
);

/**
 * Clean, friendly gtk-based serial terminal for the gnome desktop
 */
export const moserial = mkPackage(
  nixRaw`pkgs.moserial`,
  "Clean, friendly gtk-based serial terminal for the gnome desktop",
);

/**
 * Mobile shell (ssh replacement)
 */
export const mosh = mkPackage(
  nixRaw`pkgs.mosh`,
  "Mobile shell (ssh replacement)",
);

/**
 * A light-weight implementation of Standard ML
 */
export const mosml = mkPackage(
  nixRaw`pkgs.mosml`,
  "A light-weight implementation of Standard ML",
);

/**
 * An open source MQTT v3.1/3.1.1/5.0 broker
 */
export const mosquitto = mkPackage(
  nixRaw`pkgs.mosquitto`,
  "An open source MQTT v3.1/3.1.1/5.0 broker",
);

/**
 * A terminal pager similar to 'more' and 'less'
 */
export const most = mkPackage(
  nixRaw`pkgs.most`,
  "A terminal pager similar to 'more' and 'less'",
);

/**
 * Unix standard widget-toolkit and window-manager
 */
export const motif = mkPackage(
  nixRaw`pkgs.motif`,
  "Unix standard widget-toolkit and window-manager",
);

/**
 * Monitors the video signal from cameras
 */
export const motion = mkPackage(
  nixRaw`pkgs.motion`,
  "Monitors the video signal from cameras",
);

/**
 * A full-featured download manager
 */
export const motrix = mkPackage(
  nixRaw`pkgs.motrix`,
  "A full-featured download manager",
);

export const mount = mkPackage(
  nixRaw`pkgs.mount`,
  "",
);

/**
 * FUSE file system for ZIP archives
 */
export const mount_zip = mkPackage(
  nixRaw`pkgs.mount-zip`,
  "FUSE file system for ZIP archives",
);

/**
 * Mount server and cloud storage as a disk on macOS and Windows
 */
export const mountain_duck = mkPackage(
  nixRaw`pkgs.mountain-duck`,
  "Mount server and cloud storage as a disk on macOS and Windows",
);

/**
 * Identify any songs in seconds
 */
export const mousai = mkPackage(
  nixRaw`pkgs.mousai`,
  "Identify any songs in seconds",
);

/**
 * Provides mouse accessibility enhancements for the GNOME desktop
 */
export const mousetweaks = mkPackage(
  nixRaw`pkgs.mousetweaks`,
  "Provides mouse accessibility enhancements for the GNOME desktop",
);

/**
 * A cli tool to browse and watch movies
 */
export const mov_cli = mkPackage(
  nixRaw`pkgs.mov-cli`,
  "A cli tool to browse and watch movies",
);

export const moveBuildTree = mkPackage(
  nixRaw`pkgs.moveBuildTree`,
  "",
);

/**
 * A migration manager written in Rust, that attempts to be smart yet minimal
 */
export const movine = mkPackage(
  nixRaw`pkgs.movine`,
  "A migration manager written in Rust, that attempts to be smart yet minimal",
);

/**
 * High-performance, high-quality video filters for the GPU
 */
export const movit = mkPackage(
  nixRaw`pkgs.movit`,
  "High-performance, high-quality video filters for the GPU",
);

/**
 * Modern full-featured open source secure mail server for low-maintenance self-hosted email
 */
export const mox = mkPackage(
  nixRaw`pkgs.mox`,
  "Modern full-featured open source secure mail server for low-maintenance self-hosted email",
);

/**
 * An open source implementation of Oz 3
 */
export const mozart2 = mkPackage(
  nixRaw`pkgs.mozart2`,
  "An open source implementation of Oz 3",
);

/**
 * Multiplatform implementation of the Oz programming language
 */
export const mozart2_binary = mkPackage(
  nixRaw`pkgs.mozart2-binary`,
  "Multiplatform implementation of the Oz programming language",
);

/**
 * Client for the Mozilla VPN service
 */
export const mozillavpn = mkPackage(
  nixRaw`pkgs.mozillavpn`,
  "Client for the Mozilla VPN service",
);

/**
 * Mozilla JPEG Encoder Project
 */
export const mozjpeg = mkPackage(
  nixRaw`pkgs.mozjpeg`,
  "Mozilla JPEG Encoder Project",
);

/**
 * MozLz4a compression/decompression utility
 */
export const mozlz4a = mkPackage(
  nixRaw`pkgs.mozlz4a`,
  "MozLz4a compression/decompression utility",
);

/**
 * Phabricator CLI from Mozilla to support submission of a series of commits
 */
export const mozphab = mkPackage(
  nixRaw`pkgs.mozphab`,
  "Phabricator CLI from Mozilla to support submission of a series of commits",
);

/**
 * MozillaVPN configuration manager giving Linux, macOS users (among others), access to MozillaVPN
 */
export const mozwire = mkPackage(
  nixRaw`pkgs.mozwire`,
  "MozillaVPN configuration manager giving Linux, macOS users (among others), access to MozillaVPN",
);

/**
 * An audio player for the text console
 */
export const mp3blaster = mkPackage(
  nixRaw`pkgs.mp3blaster`,
  "An audio player for the text console",
);

/**
 * A command line program which concatenates MP3 files
 */
export const mp3cat = mkPackage(
  nixRaw`pkgs.mp3cat`,
  "A command line program which concatenates MP3 files",
);

/**
 * FUSE file system that transparently transcodes to MP3
 */
export const mp3fs = mkPackage(
  nixRaw`pkgs.mp3fs`,
  "FUSE file system that transparently transcodes to MP3",
);

/**
 * Lossless mp3 normalizer with statistical analysis
 */
export const mp3gain = mkPackage(
  nixRaw`pkgs.mp3gain`,
  "Lossless mp3 normalizer with statistical analysis",
);

/**
 * MP3 technical info viewer and ID3 1.x tag editor
 */
export const mp3info = mkPackage(
  nixRaw`pkgs.mp3info`,
  "MP3 technical info viewer and ID3 1.x tag editor",
);

/**
 * Utility to split mp3, ogg vorbis and FLAC files without decoding
 */
export const mp3splt = mkPackage(
  nixRaw`pkgs.mp3splt`,
  "Utility to split mp3, ogg vorbis and FLAC files without decoding",
);

/**
 * A tool for validating and repairing MPEG audio streams
 */
export const mp3val = mkPackage(
  nixRaw`pkgs.mp3val`,
  "A tool for validating and repairing MPEG audio streams",
);

/**
 * Provides functions to read, create, and modify mp4 files
 */
export const mp4v2 = mkPackage(
  nixRaw`pkgs.mp4v2`,
  "Provides functions to read, create, and modify mp4 files",
);

/**
 * Utilities for encoding and decoding binary files in MIME
 */
export const mpack = mkPackage(
  nixRaw`pkgs.mpack`,
  "Utilities for encoding and decoding binary files in MIME",
);

/**
 * Many-to-one page printing utility
 */
export const mpage = mkPackage(
  nixRaw`pkgs.mpage`,
  "Many-to-one page printing utility",
);

/**
 * A Musepack (.mpc) audio player
 */
export const mpc123 = mkPackage(
  nixRaw`pkgs.mpc123`,
  "A Musepack (.mpc) audio player",
);

/**
 * A minimalist command line interface to MPD
 */
export const mpc_cli = mkPackage(
  nixRaw`pkgs.mpc-cli`,
  "A minimalist command line interface to MPD",
);

/**
 * Media Player Classic Qute Theater
 */
export const mpc_qt = mkPackage(
  nixRaw`pkgs.mpc-qt`,
  "Media Player Classic Qute Theater",
);

/**
 * A flexible, powerful daemon for playing music
 */
export const mpd = mkPackage(
  nixRaw`pkgs.mpd`,
  "A flexible, powerful daemon for playing music",
);

/**
 * Rust application which displays your currently playing song / album / artist from MPD in Discord using Rich Presence
 */
export const mpd_discord_rpc = mkPackage(
  nixRaw`pkgs.mpd-discord-rpc`,
  "Rust application which displays your currently playing song / album / artist from MPD in Discord using Rich Presence",
);

/**
 * An implementation of the MPRIS protocol for MPD
 */
export const mpd_mpris = mkPackage(
  nixRaw`pkgs.mpd-mpris`,
  "An implementation of the MPRIS protocol for MPD",
);

/**
 * Notifications for mpd
 */
export const mpd_notification = mkPackage(
  nixRaw`pkgs.mpd-notification`,
  "Notifications for mpd",
);

/**
 * An autoqueuing mpd client
 */
export const mpd_sima = mkPackage(
  nixRaw`pkgs.mpd-sima`,
  "An autoqueuing mpd client",
);

/**
 * A flexible, powerful daemon for playing music
 */
export const mpd_small = mkPackage(
  nixRaw`pkgs.mpd-small`,
  "A flexible, powerful daemon for playing music",
);

/**
 * A small MPD client that let's you view covers and has controls suitable for small touchscreens
 */
export const mpd_touch_screen_gui = mkPackage(
  nixRaw`pkgs.mpd-touch-screen-gui`,
  "A small MPD client that let's you view covers and has controls suitable for small touchscreens",
);

/**
 * Music Player Daemon AudioScrobbler
 */
export const mpdas = mkPackage(
  nixRaw`pkgs.mpdas`,
  "Music Player Daemon AudioScrobbler",
);

/**
 * A cron like daemon for mpd
 */
export const mpdcron = mkPackage(
  nixRaw`pkgs.mpdcron`,
  "A cron like daemon for mpd",
);

/**
 * Library for arbitrary precision decimal floating point arithmetic
 */
export const mpdecimal = mkPackage(
  nixRaw`pkgs.mpdecimal`,
  "Library for arbitrary precision decimal floating point arithmetic",
);

/**
 * A simple music browser for MPD
 */
export const mpdevil = mkPackage(
  nixRaw`pkgs.mpdevil`,
  "A simple music browser for MPD",
);

/**
 * MPRIS 2 support for mpd
 */
export const mpdris2 = mkPackage(
  nixRaw`pkgs.mpdris2`,
  "MPRIS 2 support for mpd",
);

/**
 * A MPD client which submits info about tracks being played to a scrobbler
 */
export const mpdscribble = mkPackage(
  nixRaw`pkgs.mpdscribble`,
  "A MPD client which submits info about tracks being played to a scrobbler",
);

/**
 * A free library for decoding mpeg-2 and mpeg-1 video streams
 */
export const mpeg2dec = mkPackage(
  nixRaw`pkgs.mpeg2dec`,
  "A free library for decoding mpeg-2 and mpeg-1 video streams",
);

/**
 * A multiple precision interval arithmetic library based on MPFR
 */
export const mpfi = mkPackage(
  nixRaw`pkgs.mpfi`,
  "A multiple precision interval arithmetic library based on MPFR",
);

/**
 * Library for multiple-precision floating-point arithmetic
 */
export const mpfr = mkPackage(
  nixRaw`pkgs.mpfr`,
  "Library for multiple-precision floating-point arithmetic",
);

/**
 * A simple shell based file explorer for ESP8266 Micropython based devices
 */
export const mpfshell = mkPackage(
  nixRaw`pkgs.mpfshell`,
  "A simple shell based file explorer for ESP8266 Micropython based devices",
);

/**
 * Fast console MPEG Audio Player and decoder library
 */
export const mpg123 = mkPackage(
  nixRaw`pkgs.mpg123`,
  "Fast console MPEG Audio Player and decoder library",
);

/**
 * Command-line MP3 player
 */
export const mpg321 = mkPackage(
  nixRaw`pkgs.mpg321`,
  "Command-line MP3 player",
);

export const mph_2b_damase = mkPackage(
  nixRaw`pkgs.mph_2b_damase`,
  "",
);

/**
 * Open source MPI-3 implementation
 */
export const mpi = mkPackage(
  nixRaw`pkgs.mpi`,
  "Open source MPI-3 implementation",
);

export const mpiCheckPhaseHook = mkPackage(
  nixRaw`pkgs.mpiCheckPhaseHook`,
  "",
);

/**
 * Implementation of the Message Passing Interface (MPI) standard
 */
export const mpich = mkPackage(
  nixRaw`pkgs.mpich`,
  "Implementation of the Message Passing Interface (MPI) standard",
);

/**
 * A highly optimised library for bignum arithmetic forked from GMP
 */
export const mpir = mkPackage(
  nixRaw`pkgs.mpir`,
  "A highly optimised library for bignum arithmetic forked from GMP",
);

/**
 * A movie player that supports many video formats
 */
export const mplayer = mkPackage(
  nixRaw`pkgs.mplayer`,
  "A movie player that supports many video formats",
);

/**
 * POP3 mail retrieval agent
 */
export const mpop = mkPackage(
  nixRaw`pkgs.mpop`,
  "POP3 mail retrieval agent",
);

/**
 * An integrated set of utilities to remotely interact with and automate a MicroPython device over a serial connection
 */
export const mpremote = mkPackage(
  nixRaw`pkgs.mpremote`,
  "An integrated set of utilities to remotely interact with and automate a MicroPython device over a serial connection",
);

/**
 * Mersenne prime search / System stability tester
 */
export const mprime = mkPackage(
  nixRaw`pkgs.mprime`,
  "Mersenne prime search / System stability tester",
);

/**
 * Minimalistic scrobbler for ListenBrainz, libre.fm, & last.fm
 */
export const mpris_scrobbler = mkPackage(
  nixRaw`pkgs.mpris-scrobbler`,
  "Minimalistic scrobbler for ListenBrainz, libre.fm, & last.fm",
);

/**
 * A TUI tool to run multiple commands in parallel and show the output of each command separately
 */
export const mprocs = mkPackage(
  nixRaw`pkgs.mprocs`,
  "A TUI tool to run multiple commands in parallel and show the output of each command separately",
);

/**
 * A flexible memory management and garbage collection library
 */
export const mps = mkPackage(
  nixRaw`pkgs.mps`,
  "A flexible memory management and garbage collection library",
);

/**
 * Multiprecision Polynomial Solver
 */
export const mpsolve = mkPackage(
  nixRaw`pkgs.mpsolve`,
  "Multiprecision Polynomial Solver",
);

/**
 * General-purpose media player, fork of MPlayer and mplayer2
 */
export const mpv = mkPackage(
  nixRaw`pkgs.mpv`,
  "General-purpose media player, fork of MPlayer and mplayer2",
);

/**
 * Preconfigured set of MPV shaders and configurations for MPV Shim media clients.
 */
export const mpv_shim_default_shaders = mkPackage(
  nixRaw`pkgs.mpv-shim-default-shaders`,
  "Preconfigured set of MPV shaders and configurations for MPV Shim media clients.",
);

/**
 * General-purpose media player, fork of MPlayer and mplayer2
 */
export const mpv_unwrapped = mkPackage(
  nixRaw`pkgs.mpv-unwrapped`,
  "General-purpose media player, fork of MPlayer and mplayer2",
);

/**
 * A mpc-like control interface for mpv
 */
export const mpvc = mkPackage(
  nixRaw`pkgs.mpvc`,
  "A mpc-like control interface for mpv",
);

/**
 * A video wallpaper program for wlroots based wayland compositors
 */
export const mpvpaper = mkPackage(
  nixRaw`pkgs.mpvpaper`,
  "A video wallpaper program for wlroots based wayland compositors",
);

/**
 * A stateless password management solution
 */
export const mpw = mkPackage(
  nixRaw`pkgs.mpw`,
  "A stateless password management solution",
);

/**
 * MicroPython development utility programs
 */
export const mpy_utils = mkPackage(
  nixRaw`pkgs.mpy-utils`,
  "MicroPython development utility programs",
);

/**
 * CLI tool to manage POSIX message queues
 */
export const mq_cli = mkPackage(
  nixRaw`pkgs.mq-cli`,
  "CLI tool to manage POSIX message queues",
);

/**
 * MQTT broker benchmarking tool
 */
export const mqtt_benchmark = mkPackage(
  nixRaw`pkgs.mqtt-benchmark`,
  "MQTT broker benchmarking tool",
);

/**
 * MQTT client/server for C++14 based on Boost.Asio
 */
export const mqtt_cpp = mkPackage(
  nixRaw`pkgs.mqtt_cpp`,
  "MQTT client/server for C++14 based on Boost.Asio",
);

/**
 * MQTT traffic monitor
 */
export const mqttmultimeter = mkPackage(
  nixRaw`pkgs.mqttmultimeter`,
  "MQTT traffic monitor",
);

/**
 * Terminal client for MQTT
 */
export const mqttui = mkPackage(
  nixRaw`pkgs.mqttui`,
  "Terminal client for MQTT",
);

/**
 * Multiple Repository management tool
 */
export const mr = mkPackage(
  nixRaw`pkgs.mr`,
  "Multiple Repository management tool",
);

/**
 * Bayesian Inference of Phylogeny
 */
export const mrbayes = mkPackage(
  nixRaw`pkgs.mrbayes`,
  "Bayesian Inference of Phylogeny",
);

/**
 * Write man pages using Markdown, and convert them to Roff or HTML
 */
export const mrkd = mkPackage(
  nixRaw`pkgs.mrkd`,
  "Write man pages using Markdown, and convert them to Roff or HTML",
);

/**
 * Unicode-compliant Mro font
 */
export const mro_unicode = mkPackage(
  nixRaw`pkgs.mro-unicode`,
  "Unicode-compliant Mro font",
);

/**
 * A collection of Pd objectclasses for OSC-messages
 */
export const mrpeach = mkPackage(
  nixRaw`pkgs.mrpeach`,
  "A collection of Pd objectclasses for OSC-messages",
);

/**
 * Arcade-style fire fighting game
 */
export const mrrescue = mkPackage(
  nixRaw`pkgs.mrrescue`,
  "Arcade-style fire fighting game",
);

/**
 * A minimal POSIX shell
 */
export const mrsh = mkPackage(
  nixRaw`pkgs.mrsh`,
  "A minimal POSIX shell",
);

/**
 * The Multi Router Traffic Grapher
 */
export const mrtg = mkPackage(
  nixRaw`pkgs.mrtg`,
  "The Multi Router Traffic Grapher",
);

/**
 * Suite of tools for diffusion imaging
 */
export const mrtrix = mkPackage(
  nixRaw`pkgs.mrtrix`,
  "Suite of tools for diffusion imaging",
);

/**
 * An embeddable implementation of the Ruby language
 */
export const mruby = mkPackage(
  nixRaw`pkgs.mruby`,
  "An embeddable implementation of the Ruby language",
);

/**
 * Mutabah's Rust Compiler
 */
export const mrustc = mkPackage(
  nixRaw`pkgs.mrustc`,
  "Mutabah's Rust Compiler",
);

/**
 * A minimal build of Rust
 */
export const mrustc_bootstrap = mkPackage(
  nixRaw`pkgs.mrustc-bootstrap`,
  "A minimal build of Rust",
);

/**
 * A minimalist builder for Rust
 */
export const mrustc_minicargo = mkPackage(
  nixRaw`pkgs.mrustc-minicargo`,
  "A minimalist builder for Rust",
);

/**
 * Lightweight multitabbed feature-rich X11 terminal emulator
 */
export const mrxvt = mkPackage(
  nixRaw`pkgs.mrxvt`,
  "Lightweight multitabbed feature-rich X11 terminal emulator",
);

/**
 * A program for writing Microsoft-compatible boot records
 */
export const ms_sys = mkPackage(
  nixRaw`pkgs.ms-sys`,
  "A program for writing Microsoft-compatible boot records",
);

/**
 * Mono version of Microsoft Build Engine, the build platform for .NET, and Visual Studio
 */
export const msbuild = mkPackage(
  nixRaw`pkgs.msbuild`,
  "Mono version of Microsoft Build Engine, the build platform for .NET, and Visual Studio",
);

/**
 * Convert Message Sequence Chart descriptions into PNG, SVG, or EPS images
 */
export const mscgen = mkPackage(
  nixRaw`pkgs.mscgen`,
  "Convert Message Sequence Chart descriptions into PNG, SVG, or EPS images",
);

/**
 * MSFvenom Payload Creator
 */
export const msfpc = mkPackage(
  nixRaw`pkgs.msfpc`,
  "MSFvenom Payload Creator",
);

/**
 * MessagePack implementation for C and C++
 */
export const msgpack = mkPackage(
  nixRaw`pkgs.msgpack`,
  "MessagePack implementation for C and C++",
);

/**
 * MessagePack implementation for C
 */
export const msgpack_c = mkPackage(
  nixRaw`pkgs.msgpack-c`,
  "MessagePack implementation for C",
);

/**
 * MessagePack implementation for C++
 */
export const msgpack_cxx = mkPackage(
  nixRaw`pkgs.msgpack-cxx`,
  "MessagePack implementation for C++",
);

/**
 * Command-line tools for converting between MessagePack and JSON
 */
export const msgpack_tools = mkPackage(
  nixRaw`pkgs.msgpack-tools`,
  "Command-line tools for converting between MessagePack and JSON",
);

/**
 * A simple and efficient MsgPack binary serialization library in a self-contained header file
 */
export const msgpuck = mkPackage(
  nixRaw`pkgs.msgpuck`,
  "A simple and efficient MsgPack binary serialization library in a self-contained header file",
);

/**
 * Viewer for .msg files (MS Outlook)
 */
export const msgviewer = mkPackage(
  nixRaw`pkgs.msgviewer`,
  "Viewer for .msg files (MS Outlook)",
);

/**
 * A C library implementing a suite of algorithms to factor large integers
 */
export const msieve = mkPackage(
  nixRaw`pkgs.msieve`,
  "A C library implementing a suite of algorithms to factor large integers",
);

/**
 * Mediastreamer plugin for the iLBC audio codec
 */
export const msilbc = mkPackage(
  nixRaw`pkgs.msilbc`,
  "Mediastreamer plugin for the iLBC audio codec",
);

/**
 * Set of programs to inspect and build Windows Installer (.MSI) files
 */
export const msitools = mkPackage(
  nixRaw`pkgs.msitools`,
  "Set of programs to inspect and build Windows Installer (.MSI) files",
);

/**
 * LDAP enumeration tool
 */
export const msldapdump = mkPackage(
  nixRaw`pkgs.msldapdump`,
  "LDAP enumeration tool",
);

/**
 * Create Windows Shortcut Files (.LNK) without using Windows
 */
export const mslink = mkPackage(
  nixRaw`pkgs.mslink`,
  "Create Windows Shortcut Files (.LNK) without using Windows",
);

/**
 * Simple and easy to use SMTP client with excellent sendmail compatibility
 */
export const msmtp = mkPackage(
  nixRaw`pkgs.msmtp`,
  "Simple and easy to use SMTP client with excellent sendmail compatibility",
);

/**
 * Python tool and library for decrypting MS Office files with passwords or other keys
 */
export const msoffcrypto_tool = mkPackage(
  nixRaw`pkgs.msoffcrypto-tool`,
  "Python tool and library for decrypting MS Office files with passwords or other keys",
);

/**
 * Development headers and linker scripts for TI MSP430 microcontrollers

 */
export const msp430GccSupport = mkPackage(
  nixRaw`pkgs.msp430GccSupport`,
  "Development headers and linker scripts for TI MSP430 microcontrollers\n",
);

export const msp430Newlib = mkPackage(
  nixRaw`pkgs.msp430Newlib`,
  "",
);

export const msp430NewlibCross = mkPackage(
  nixRaw`pkgs.msp430NewlibCross`,
  "",
);

/**
 * A free programmer, debugger, and gdb proxy for MSP430 MCUs
 */
export const mspdebug = mkPackage(
  nixRaw`pkgs.mspdebug`,
  "A free programmer, debugger, and gdb proxy for MSP430 MCUs",
);

/**
 * TI MSP430 FET debug driver
 */
export const mspds = mkPackage(
  nixRaw`pkgs.mspds`,
  "TI MSP430 FET debug driver",
);

/**
 * Unfree binary release of the TI MSP430 FET debug driver
 */
export const mspds_bin = mkPackage(
  nixRaw`pkgs.mspds-bin`,
  "Unfree binary release of the TI MSP430 FET debug driver",
);

/**
 * Linux tool to display or modify x86 model-specific registers (MSRs)
 */
export const msr = mkPackage(
  nixRaw`pkgs.msr`,
  "Linux tool to display or modify x86 model-specific registers (MSRs)",
);

/**
 * Tool to read/write from/to MSR CPU registers on Linux
 */
export const msr_tools = mkPackage(
  nixRaw`pkgs.msr-tools`,
  "Tool to read/write from/to MSR CPU registers on Linux",
);

/**
 * Dump chipset-specific MSR registers
 */
export const msrtool = mkPackage(
  nixRaw`pkgs.msrtool`,
  "Dump chipset-specific MSR registers",
);

export const mssql_jdbc = mkPackage(
  nixRaw`pkgs.mssql_jdbc`,
  "",
);

/**
 * Open source version of Mellanox Firmware Tools (MFT)
 */
export const mstflint = mkPackage(
  nixRaw`pkgs.mstflint`,
  "Open source version of Mellanox Firmware Tools (MFT)",
);

/**
 * Molecular structure store for testing
 */
export const mstore = mkPackage(
  nixRaw`pkgs.mstore`,
  "Molecular structure store for testing",
);

/**
 * Multiple Spanning Tree Protocol daemon
 */
export const mstpd = mkPackage(
  nixRaw`pkgs.mstpd`,
  "Multiple Spanning Tree Protocol daemon",
);

/**
 * A command-line Linux utility that efficiently directs mail synchronization between a pair of mailboxes
 */
export const mswatch = mkPackage(
  nixRaw`pkgs.mswatch`,
  "A command-line Linux utility that efficiently directs mail synchronization between a pair of mailboxes",
);

/**
 * A synthesizer application built on Qt and libmt32emu
 */
export const mt32emu_qt = mkPackage(
  nixRaw`pkgs.mt32emu-qt`,
  "A synthesizer application built on Qt and libmt32emu",
);

/**
 * Produces a WAVE file from a Standard MIDI file (SMF)
 */
export const mt32emu_smf2wav = mkPackage(
  nixRaw`pkgs.mt32emu-smf2wav`,
  "Produces a WAVE file from a Standard MIDI file (SMF)",
);

/**
 * Magnetic Tape control tools for Linux
 */
export const mt_st = mkPackage(
  nixRaw`pkgs.mt-st`,
  "Magnetic Tape control tools for Linux",
);

/**
 * Tool for extracting metrics from application logs
 */
export const mtail = mkPackage(
  nixRaw`pkgs.mtail`,
  "Tool for extracting metrics from application logs",
);

/**
 * Multitouch Protocol Translation Library
 */
export const mtdev = mkPackage(
  nixRaw`pkgs.mtdev`,
  "Multitouch Protocol Translation Library",
);

/**
 * Tools for MTD filesystems
 */
export const mtdutils = mkPackage(
  nixRaw`pkgs.mtdutils`,
  "Tools for MTD filesystems",
);

/**
 * Perhaps the smallest useful terminal multiplexer in the world
 */
export const mtm = mkPackage(
  nixRaw`pkgs.mtm`,
  "Perhaps the smallest useful terminal multiplexer in the world",
);

/**
 * Utilities to access MS-DOS disks
 */
export const mtools = mkPackage(
  nixRaw`pkgs.mtools`,
  "Utilities to access MS-DOS disks",
);

/**
 * A simple GTK painting program
 */
export const mtpaint = mkPackage(
  nixRaw`pkgs.mtpaint`,
  "A simple GTK painting program",
);

/**
 * FUSE Filesystem providing access to MTP devices
 */
export const mtpfs = mkPackage(
  nixRaw`pkgs.mtpfs`,
  "FUSE Filesystem providing access to MTP devices",
);

/**
 * Async MTProto proxy for Telegram
 */
export const mtprotoproxy = mkPackage(
  nixRaw`pkgs.mtprotoproxy`,
  "Async MTProto proxy for Telegram",
);

/**
 * A network diagnostics tool
 */
export const mtr = mkPackage(
  nixRaw`pkgs.mtr`,
  "A network diagnostics tool",
);

        /**
         * Mtr-exporter periodically executes mtr to a given host and
provides the measured results as prometheus metrics.

         */
export const mtr_exporter = mkPackage(
  nixRaw`pkgs.mtr-exporter`,
  "Mtr-exporter periodically executes mtr to a given host and\nprovides the measured results as prometheus metrics.\n",
);

/**
 * A network diagnostics tool
 */
export const mtr_gui = mkPackage(
  nixRaw`pkgs.mtr-gui`,
  "A network diagnostics tool",
);

/**
 * Perl script used to interpret and provide human readable output of the trace log contained in the file mtracedata, whose contents were produced by mtrace(3).
 */
export const mtrace = mkPackage(
  nixRaw`pkgs.mtrace`,
  "Perl script used to interpret and provide human readable output of the trace log contained in the file mtracedata, whose contents were produced by mtrace(3).",
);

/**
 * Media Changer Tools
 */
export const mtx = mkPackage(
  nixRaw`pkgs.mtx`,
  "Media Changer Tools",
);

/**
 * Client API library for the Matrix protocol.
 */
export const mtxclient = mkPackage(
  nixRaw`pkgs.mtxclient`,
  "Client API library for the Matrix protocol.",
);

/**
 * A collection of utilities for indexing and searching Maildirs
 */
export const mu = mkPackage(
  nixRaw`pkgs.mu`,
  "A collection of utilities for indexing and searching Maildirs",
);

/**
 * Tool to help in dealing with multiple git repositories
 */
export const mu_repo = mkPackage(
  nixRaw`pkgs.mu-repo`,
  "Tool to help in dealing with multiple git repositories",
);

/**
 * Proxy checker and IP rotator
 */
export const mubeng = mkPackage(
  nixRaw`pkgs.mubeng`,
  "Proxy checker and IP rotator",
);

/**
 * Synchronize maildirs and notmuch databases
 */
export const muchsync = mkPackage(
  nixRaw`pkgs.muchsync`,
  "Synchronize maildirs and notmuch databases",
);

/**
 * Cross-platform file manager
 */
export const mucommander = mkPackage(
  nixRaw`pkgs.mucommander`,
  "Cross-platform file manager",
);

/**
 * Crossplatform mud client
 */
export const mudlet = mkPackage(
  nixRaw`pkgs.mudlet`,
  "Crossplatform mud client",
);

export const mueval = mkPackage(
  nixRaw`pkgs.mueval`,
  "",
);

/**
 * A website link checker which scrapes and inspects all pages in a website recursively
 */
export const muffet = mkPackage(
  nixRaw`pkgs.muffet`,
  "A website link checker which scrapes and inspects all pages in a website recursively",
);

/**
 * JMAP integration for notmuch mail
 */
export const mujmap = mkPackage(
  nixRaw`pkgs.mujmap`,
  "JMAP integration for notmuch mail",
);

/**
 * Multi-Joint dynamics with Contact. A general purpose physics simulator.
 */
export const mujoco = mkPackage(
  nixRaw`pkgs.mujoco`,
  "Multi-Joint dynamics with Contact. A general purpose physics simulator.",
);

/**
 * A lightweight, embeddable Javascript interpreter
 */
export const mujs = mkPackage(
  nixRaw`pkgs.mujs`,
  "A lightweight, embeddable Javascript interpreter",
);

/**
 * Mullvad VPN command-line client tools
 */
export const mullvad = mkPackage(
  nixRaw`pkgs.mullvad`,
  "Mullvad VPN command-line client tools",
);

/**
 * Privacy-focused browser made in a collaboration between The Tor Project and Mullvad
 */
export const mullvad_browser = mkPackage(
  nixRaw`pkgs.mullvad-browser`,
  "Privacy-focused browser made in a collaboration between The Tor Project and Mullvad",
);

/**
 * Find Mullvad servers with the lowest latency at your location
 */
export const mullvad_closest = mkPackage(
  nixRaw`pkgs.mullvad-closest`,
  "Find Mullvad servers with the lowest latency at your location",
);

/**
 * Client for Mullvad VPN
 */
export const mullvad_vpn = mkPackage(
  nixRaw`pkgs.mullvad-vpn`,
  "Client for Mullvad VPN",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const multiStdenv = mkPackage(
  nixRaw`pkgs.multiStdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * Electronegativity equilibration model for atomic partial charges
 */
export const multicharge = mkPackage(
  nixRaw`pkgs.multicharge`,
  "Electronegativity equilibration model for atomic partial charges",
);

/**
 * Wrapper script for i3lock-color
 */
export const multilockscreen = mkPackage(
  nixRaw`pkgs.multilockscreen`,
  "Wrapper script for i3lock-color",
);

/**
 * A derivative of Markdown that adds new syntax features
 */
export const multimarkdown = mkPackage(
  nixRaw`pkgs.multimarkdown`,
  "A derivative of Markdown that adds new syntax features",
);

/**
 * Multimon is a digital baseband audio protocol decoder
 */
export const multimon_ng = mkPackage(
  nixRaw`pkgs.multimon-ng`,
  "Multimon is a digital baseband audio protocol decoder",
);

/**
 * Http multipart parser implemented in C 
 */
export const multipart_parser_c = mkPackage(
  nixRaw`pkgs.multipart-parser-c`,
  "Http multipart parser implemented in C ",
);

/**
 * Ubuntu VMs on demand for any workstation.
 */
export const multipass = mkPackage(
  nixRaw`pkgs.multipass`,
  "Ubuntu VMs on demand for any workstation.",
);

/**
 * Tools for the Linux multipathing storage driver
 */
export const multipath_tools = mkPackage(
  nixRaw`pkgs.multipath-tools`,
  "Tools for the Linux multipathing storage driver",
);

/**
 * tail on Steroids
 */
export const multitail = mkPackage(
  nixRaw`pkgs.multitail`,
  "tail on Steroids",
);

/**
 * Time command execution over multiple executions
 */
export const multitime = mkPackage(
  nixRaw`pkgs.multitime`,
  "Time command execution over multiple executions",
);

/**
 * Unofficial desktop client for F1 TV®
 */
export const multiviewer_for_f1 = mkPackage(
  nixRaw`pkgs.multiviewer-for-f1`,
  "Unofficial desktop client for F1 TV®",
);

/**
 * Multus CNI is a container network interface (CNI) plugin for Kubernetes that enables attaching multiple network interfaces to pods
 */
export const multus_cni = mkPackage(
  nixRaw`pkgs.multus-cni`,
  "Multus CNI is a container network interface (CNI) plugin for Kubernetes that enables attaching multiple network interfaces to pods",
);

/**
 * Low-latency, high quality voice chat software
 */
export const mumble = mkPackage(
  nixRaw`pkgs.mumble`,
  "Low-latency, high quality voice chat software",
);

export const mumble_overlay = mkPackage(
  nixRaw`pkgs.mumble_overlay`,
  "",
);

/**
 * An authentication service for creating and validating credentials

 */
export const munge = mkPackage(
  nixRaw`pkgs.munge`,
  "An authentication service for creating and validating credentials\n",
);

/**
 * Networked resource monitoring tool
 */
export const munin = mkPackage(
  nixRaw`pkgs.munin`,
  "Networked resource monitoring tool",
);

/**
 * An implementation of Meson build system in C99
 */
export const muon = mkPackage(
  nixRaw`pkgs.muon`,
  "An implementation of Meson build system in C99",
);

/**
 * An implementation of Meson build system in C99
 */
export const muonStandalone = mkPackage(
  nixRaw`pkgs.muonStandalone`,
  "An implementation of Meson build system in C99",
);

/**
 * Modern low-level programming language
 */
export const muonlang = mkPackage(
  nixRaw`pkgs.muonlang`,
  "Modern low-level programming language",
);

/**
 * Music typesetting program (ASCII to PostScript and MIDI)
 */
export const mup = mkPackage(
  nixRaw`pkgs.mup`,
  "Music typesetting program (ASCII to PostScript and MIDI)",
);

/**
 * An extensible high performance math expression parser library written in C++
 */
export const muparser = mkPackage(
  nixRaw`pkgs.muparser`,
  "An extensible high performance math expression parser library written in C++",
);

/**
 * A C++ Library for Parsing Expressions with Strings, Complex Numbers, Vectors, Matrices and more
 */
export const muparserx = mkPackage(
  nixRaw`pkgs.muparserx`,
  "A C++ Library for Parsing Expressions with Strings, Complex Numbers, Vectors, Matrices and more",
);

/**
 * Lightweight PDF, XPS, and E-book viewer and toolkit written in portable C
 */
export const mupdf = mkPackage(
  nixRaw`pkgs.mupdf`,
  "Lightweight PDF, XPS, and E-book viewer and toolkit written in portable C",
);

/**
 * Lightweight PDF, XPS, and E-book viewer and toolkit written in portable C
 */
export const mupdf_1_17 = mkPackage(
  nixRaw`pkgs.mupdf_1_17`,
  "Lightweight PDF, XPS, and E-book viewer and toolkit written in portable C",
);

/**
 * A Nintendo 64 Emulator
 */
export const mupen64plus = mkPackage(
  nixRaw`pkgs.mupen64plus`,
  "A Nintendo 64 Emulator",
);

/**
 * Bash-like shell and scripting environment with advanced features designed for safety and productivity
 */
export const murex = mkPackage(
  nixRaw`pkgs.murex`,
  "Bash-like shell and scripting environment with advanced features designed for safety and productivity",
);

/**
 * Low-latency, high quality voice chat software
 */
export const murmur = mkPackage(
  nixRaw`pkgs.murmur`,
  "Low-latency, high quality voice chat software",
);

/**
 * a pretty good mpd client
 */
export const mus = mkPackage(
  nixRaw`pkgs.mus`,
  "a pretty good mpd client",
);

/**
 * Multiple sequence alignment with top benchmark scores scalable to thousands of sequences
 */
export const muscle = mkPackage(
  nixRaw`pkgs.muscle`,
  "Multiple sequence alignment with top benchmark scores scalable to thousands of sequences",
);

/**
 * MIDI/Audio sequencer with recording and editing capabilities
 */
export const muse = mkPackage(
  nixRaw`pkgs.muse`,
  "MIDI/Audio sequencer with recording and editing capabilities",
);

/**
 * A simple, clean and cross-platform music player
 */
export const museeks = mkPackage(
  nixRaw`pkgs.museeks`,
  "A simple, clean and cross-platform music player",
);

/**
 * Music notation and composition software
 */
export const musescore = mkPackage(
  nixRaw`pkgs.musescore`,
  "Music notation and composition software",
);

/**
 * An extensible music player daemon written in Rust
 */
export const music_player = mkPackage(
  nixRaw`pkgs.music-player`,
  "An extensible music player daemon written in Rust",
);

/**
 * Terminal-based music player, library, and streaming audio server
 */
export const musikcube = mkPackage(
  nixRaw`pkgs.musikcube`,
  "Terminal-based music player, library, and streaming audio server",
);

/**
 * An efficient, small, quality libc implementation
 */
export const musl = mkPackage(
  nixRaw`pkgs.musl`,
  "An efficient, small, quality libc implementation",
);

/**
 * An efficient, small, quality libc implementation
 */
export const muslCross = mkPackage(
  nixRaw`pkgs.muslCross`,
  "An efficient, small, quality libc implementation",
);

/**
 * An implementation of fts(3) for musl-libc
 */
export const musl_fts = mkPackage(
  nixRaw`pkgs.musl-fts`,
  "An implementation of fts(3) for musl-libc",
);

/**
 * An extraction of the obstack functions and macros from GNU libiberty for use with musl-libc
 */
export const musl_obstack = mkPackage(
  nixRaw`pkgs.musl-obstack`,
  "An extraction of the obstack functions and macros from GNU libiberty for use with musl-libc",
);

/**
 * A fast and high-quality audio music similarity library written in C/C++
 */
export const musly = mkPackage(
  nixRaw`pkgs.musly`,
  "A fast and high-quality audio music similarity library written in C/C++",
);

/**
 * An automatic music sorter (based on ID3 tags)
 */
export const muso = mkPackage(
  nixRaw`pkgs.muso`,
  "An automatic music sorter (based on ID3 tags)",
);

/**
 * The mustache template language in Go
 */
export const mustache_go = mkPackage(
  nixRaw`pkgs.mustache-go`,
  "The mustache template language in Go",
);

/**
 * Mustache text templates for modern C++
 */
export const mustache_hpp = mkPackage(
  nixRaw`pkgs.mustache-hpp`,
  "Mustache text templates for modern C++",
);

/**
 * Logic-less templates, specification package
 */
export const mustache_spec = mkPackage(
  nixRaw`pkgs.mustache-spec`,
  "Logic-less templates, specification package",
);

/**
 * Tcl implementation of the mustache templating language
 */
export const mustache_tcl = mkPackage(
  nixRaw`pkgs.mustache-tcl`,
  "Tcl implementation of the mustache templating language",
);

/**
 * Make remote development work with your local tools
 */
export const mutagen = mkPackage(
  nixRaw`pkgs.mutagen`,
  "Make remote development work with your local tools",
);

/**
 * Compose with Mutagen integration
 */
export const mutagen_compose = mkPackage(
  nixRaw`pkgs.mutagen-compose`,
  "Compose with Mutagen integration",
);

/**
 * A BDD testing framework for C, inspired by Mocha
 */
export const mutest = mkPackage(
  nixRaw`pkgs.mutest`,
  "A BDD testing framework for C, inspired by Mocha",
);

/**
 * mutation testing system for Python, with a strong focus on ease of use
 */
export const mutmut = mkPackage(
  nixRaw`pkgs.mutmut`,
  "mutation testing system for Python, with a strong focus on ease of use",
);

/**
 * A small but very powerful text-based mail client
 */
export const mutt = mkPackage(
  nixRaw`pkgs.mutt`,
  "A small but very powerful text-based mail client",
);

/**
 * A tool to show calendar event details in Mutt
 */
export const mutt_ics = mkPackage(
  nixRaw`pkgs.mutt-ics`,
  "A tool to show calendar event details in Mutt",
);

/**
 * System for automatically configuring mutt and isync
 */
export const mutt_wizard = mkPackage(
  nixRaw`pkgs.mutt-wizard`,
  "System for automatically configuring mutt and isync",
);

/**
 * Elegant music streaming app
 */
export const muzika = mkPackage(
  nixRaw`pkgs.muzika`,
  "Elegant music streaming app",
);

/**
 * MPI-3.1 implementation optimized for Infiband transport
 */
export const mvapich = mkPackage(
  nixRaw`pkgs.mvapich`,
  "MPI-3.1 implementation optimized for Infiband transport",
);

/**
 * Boot 64-bit Marvell EBU SoC over UART
 */
export const mvebu64boot = mkPackage(
  nixRaw`pkgs.mvebu64boot`,
  "Boot 64-bit Marvell EBU SoC over UART",
);

/**
 * Markwhen CLI
 */
export const mw = mkPackage(
  nixRaw`pkgs.mw`,
  "Markwhen CLI",
);

/**
 * spell-checker that groups possible misspellings and shows them in their contexts
 */
export const mwic = mkPackage(
  nixRaw`pkgs.mwic`,
  "spell-checker that groups possible misspellings and shows them in their contexts",
);

/**
 * A discord puppeting bridge for matrix
 */
export const mx_puppet_discord = mkPackage(
  nixRaw`pkgs.mx-puppet-discord`,
  "A discord puppeting bridge for matrix",
);

/**
 * Tool to work with DNS MX records
 */
export const mx_takeover = mkPackage(
  nixRaw`pkgs.mx-takeover`,
  "Tool to work with DNS MX records",
);

/**
 * Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler
 */
export const mxnet = mkPackage(
  nixRaw`pkgs.mxnet`,
  "Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler",
);

/**
 * Command line utility for Atmel maXTouch devices
 */
export const mxt_app = mkPackage(
  nixRaw`pkgs.mxt-app`,
  "Command line utility for Atmel maXTouch devices",
);

/**
 * Minimalistic command line interface for fetching user anime data from MyAnimeList
 */
export const mya = mkPackage(
  nixRaw`pkgs.mya`,
  "Minimalistic command line interface for fetching user anime data from MyAnimeList",
);

/**
 * Command-line interface for MySQL
 */
export const mycli = mkPackage(
  nixRaw`pkgs.mycli`,
  "Command-line interface for MySQL",
);

/**
 * Filesystem and git-based wiki engine written in Go using mycomarkup as its primary markup language
 */
export const mycorrhiza = mkPackage(
  nixRaw`pkgs.mycorrhiza`,
  "Filesystem and git-based wiki engine written in Go using mycomarkup as its primary markup language",
);

/**
 * A free, open-source interface for interacting with the blockchain
 */
export const mycrypto = mkPackage(
  nixRaw`pkgs.mycrypto`,
  "A free, open-source interface for interacting with the blockchain",
);

/**
 * High-performance MySQL backup tool
 */
export const mydumper = mkPackage(
  nixRaw`pkgs.mydumper`,
  "High-performance MySQL backup tool",
);

/**
 * Python module to access meal tracking data stored in MyFitnessPal
 */
export const myfitnesspal = mkPackage(
  nixRaw`pkgs.myfitnesspal`,
  "Python module to access meal tracking data stored in MyFitnessPal",
);

/**
 * A gpodder.net client library
 */
export const mygpoclient = mkPackage(
  nixRaw`pkgs.mygpoclient`,
  "A gpodder.net client library",
);

/**
 * Library for creating GUIs for games and 3D applications
 */
export const mygui = mkPackage(
  nixRaw`pkgs.mygui`,
  "Library for creating GUIs for games and 3D applications",
);

/**
 * a tool for quickly creating full physical backups of a MySQL server's data files
 */
export const mylvmbackup = mkPackage(
  nixRaw`pkgs.mylvmbackup`,
  "a tool for quickly creating full physical backups of a MySQL server's data files",
);

/**
 * A PlayStation 2 memory card manager
 */
export const mymcplus = mkPackage(
  nixRaw`pkgs.mymcplus`,
  "A PlayStation 2 memory card manager",
);

/**
 * A standalone and mobile friendly web mpd client with a tiny footprint and advanced features
 */
export const mympd = mkPackage(
  nixRaw`pkgs.mympd`,
  "A standalone and mobile friendly web mpd client with a tiny footprint and advanced features",
);

/**
 * Build and package management tool for embedded development
 */
export const mynewt_newt = mkPackage(
  nixRaw`pkgs.mynewt-newt`,
  "Build and package management tool for embedded development",
);

/**
 * Tool to communicate with devices running Mynewt OS
 */
export const mynewt_newtmgr = mkPackage(
  nixRaw`pkgs.mynewt-newtmgr`,
  "Tool to communicate with devices running Mynewt OS",
);

/**
 * A graphics application for digital painters
 */
export const mypaint = mkPackage(
  nixRaw`pkgs.mypaint`,
  "A graphics application for digital painters",
);

/**
 * Brushes used by MyPaint and other software using libmypaint
 */
export const mypaint_brushes = mkPackage(
  nixRaw`pkgs.mypaint-brushes`,
  "Brushes used by MyPaint and other software using libmypaint",
);

/**
 * Brushes used by MyPaint and other software using libmypaint
 */
export const mypaint_brushes1 = mkPackage(
  nixRaw`pkgs.mypaint-brushes1`,
  "Brushes used by MyPaint and other software using libmypaint",
);

/**
 * Optional static typing for Python
 */
export const mypy = mkPackage(
  nixRaw`pkgs.mypy`,
  "Optional static typing for Python",
);

/**
 * Generate mypy stub files from protobuf specs
 */
export const mypy_protobuf = mkPackage(
  nixRaw`pkgs.mypy-protobuf`,
  "Generate mypy stub files from protobuf specs",
);

/**
 * Systems language that is both powerful and fun to use
 */
export const myrddin = mkPackage(
  nixRaw`pkgs.myrddin`,
  "Systems language that is both powerful and fun to use",
);

export const myrica = mkPackage(
  nixRaw`pkgs.myrica`,
  "",
);

/**
 * Manage macOS Finder sidebar favorites
 */
export const mysides = mkPackage(
  nixRaw`pkgs.mysides`,
  "Manage macOS Finder sidebar favorites",
);

/**
 * Convert MySQL dump files to PostgreSQL-loadable files
 */
export const mysql2pgsql = mkPackage(
  nixRaw`pkgs.mysql2pgsql`,
  "Convert MySQL dump files to PostgreSQL-loadable files",
);

/**
 * The world's most popular open source database
 */
export const mysql80 = mkPackage(
  nixRaw`pkgs.mysql80`,
  "The world's most popular open source database",
);

/**
 * MySQL Connector/J
 */
export const mysql_jdbc = mkPackage(
  nixRaw`pkgs.mysql_jdbc`,
  "MySQL Connector/J",
);

/**
 * A new command line scriptable shell for MySQL
 */
export const mysql_shell = mkPackage(
  nixRaw`pkgs.mysql-shell`,
  "A new command line scriptable shell for MySQL",
);

/**
 * A new command line scriptable shell for MySQL
 */
export const mysql_shell_innovation = mkPackage(
  nixRaw`pkgs.mysql-shell-innovation`,
  "A new command line scriptable shell for MySQL",
);

/**
 * Visual MySQL database modeling, administration and querying tool
 */
export const mysql_workbench = mkPackage(
  nixRaw`pkgs.mysql-workbench`,
  "Visual MySQL database modeling, administration and querying tool",
);

/**
 * Make recommendations for increased performance and stability of MariaDB/MySQL
 */
export const mysqltuner = mkPackage(
  nixRaw`pkgs.mysqltuner`,
  "Make recommendations for increased performance and stability of MariaDB/MySQL",
);

/**
 * Morphological analysis of Russian text
 */
export const mystem = mkPackage(
  nixRaw`pkgs.mystem`,
  "Morphological analysis of Russian text",
);

/**
 * Command line tools for working with MyST Markdown
 */
export const mystmd = mkPackage(
  nixRaw`pkgs.mystmd`,
  "Command line tools for working with MyST Markdown",
);

/**
 * Smart manager for information collecting
 */
export const mytetra = mkPackage(
  nixRaw`pkgs.mytetra`,
  "Smart manager for information collecting",
);

/**
 * Thesaurus library from Hunspell project
 */
export const mythes = mkPackage(
  nixRaw`pkgs.mythes`,
  "Thesaurus library from Hunspell project",
);

/**
 * Open Source DVR
 */
export const mythtv = mkPackage(
  nixRaw`pkgs.mythtv`,
  "Open Source DVR",
);

/**
 * A ninja compatible build system
 */
export const n2 = mkPackage(
  nixRaw`pkgs.n2`,
  "A ninja compatible build system",
);

/**
 * Console implementation of 2048 game
 */
export const n2048 = mkPackage(
  nixRaw`pkgs.n2048`,
  "Console implementation of 2048 game",
);

/**
 * Peer-to-peer VPN
 */
export const n2n = mkPackage(
  nixRaw`pkgs.n2n`,
  "Peer-to-peer VPN",
);

/**
 * MRI non-uniformity correction for MINC files
 */
export const n3 = mkPackage(
  nixRaw`pkgs.n3`,
  "MRI non-uniformity correction for MINC files",
);

/**
 * Free and source-available fair-code licensed workflow automation tool. Easily automate tasks across different services.
 */
export const n8n = mkPackage(
  nixRaw`pkgs.n8n`,
  "Free and source-available fair-code licensed workflow automation tool. Easily automate tasks across different services.",
);

/**
 * The swiss army knife for Magento2 developers
 */
export const n98_magerun2 = mkPackage(
  nixRaw`pkgs.n98-magerun2`,
  "The swiss army knife for Magento2 developers",
);

/**
 * Fast SYN/CONNECT port scanner
 */
export const naabu = mkPackage(
  nixRaw`pkgs.naabu`,
  "Fast SYN/CONNECT port scanner",
);

/**
 * The Easy Hangul XIM
 */
export const nabi = mkPackage(
  nixRaw`pkgs.nabi`,
  "The Easy Hangul XIM",
);

/**
 * A improved version of the Aileron font
 */
export const nacelle = mkPackage(
  nixRaw`pkgs.nacelle`,
  "A improved version of the Aileron font",
);

/**
 * 2D action/rpg space game
 */
export const naev = mkPackage(
  nixRaw`pkgs.naev`,
  "2D action/rpg space game",
);

/**
 * OpenType Urdu font from the Center for Research in Urdu Language Processing
 */
export const nafees = mkPackage(
  nixRaw`pkgs.nafees`,
  "OpenType Urdu font from the Center for Research in Urdu Language Processing",
);

/**
 * A static syntax checker (linter) for Tcl
 */
export const nagelfar = mkPackage(
  nixRaw`pkgs.nagelfar`,
  "A static syntax checker (linter) for Tcl",
);

/**
 * A host, service and network monitoring program
 */
export const nagios = mkPackage(
  nixRaw`pkgs.nagios`,
  "A host, service and network monitoring program",
);

/**
 * A Persian (Farsi) Font - قلم (فونت) فارسی ناهید
 */
export const nahid_fonts = mkPackage(
  nixRaw`pkgs.nahid-fonts`,
  "A Persian (Farsi) Font - قلم (فونت) فارسی ناهید",
);

/**
 * Client, protocol, and server for running Java programs from the command line without incurring the JVM startup overhead
 */
export const nailgun = mkPackage(
  nixRaw`pkgs.nailgun`,
  "Client, protocol, and server for running Java programs from the command line without incurring the JVM startup overhead",
);

/**
 * An offline tool for querying IP geographic information and CDN provider
 */
export const nali = mkPackage(
  nixRaw`pkgs.nali`,
  "An offline tool for querying IP geographic information and CDN provider",
);

/**
 * Snapshot testing tool for Nix based on haumea
 */
export const namaka = mkPackage(
  nixRaw`pkgs.namaka`,
  "Snapshot testing tool for Nix based on haumea",
);

/**
 * Full-text search engine
 */
export const namazu = mkPackage(
  nixRaw`pkgs.namazu`,
  "Full-text search engine",
);

/**
 * Decentralized open source information registration and transfer system based on the Bitcoin cryptocurrency
 */
export const namecoind = mkPackage(
  nixRaw`pkgs.namecoind`,
  "Decentralized open source information registration and transfer system based on the Bitcoin cryptocurrency",
);

/**
 * A command line interface for the Namespaces platform
 */
export const namespace_cli = mkPackage(
  nixRaw`pkgs.namespace-cli`,
  "A command line interface for the Namespaces platform",
);

/**
 * A small, user-friendly console text editor
 */
export const nano = mkPackage(
  nixRaw`pkgs.nano`,
  "A small, user-friendly console text editor",
);

/**
 * Wallet for Nano cryptocurrency
 */
export const nano_wallet = mkPackage(
  nixRaw`pkgs.nano-wallet`,
  "Wallet for Nano cryptocurrency",
);

/**
 * Small weblog engine written in Bash for the command line
 */
export const nanoblogger = mkPackage(
  nixRaw`pkgs.nanoblogger`,
  "Small weblog engine written in Bash for the command line",
);

/**
 * Small C++ wrapper for the native C ODBC API
 */
export const nanodbc = mkPackage(
  nixRaw`pkgs.nanodbc`,
  "Small C++ wrapper for the native C ODBC API",
);

/**
 * A wee tool to build color fonts
 */
export const nanoemoji = mkPackage(
  nixRaw`pkgs.nanoemoji`,
  "A wee tool to build color fonts",
);

/**
 * Header only C++ library for approximate nearest neighbor search
 */
export const nanoflann = mkPackage(
  nixRaw`pkgs.nanoflann`,
  "Header only C++ library for approximate nearest neighbor search",
);

/**
 * An ultra-lightweight and blazing-fast MQTT broker for IoT edge
 */
export const nanomq = mkPackage(
  nixRaw`pkgs.nanomq`,
  "An ultra-lightweight and blazing-fast MQTT broker for IoT edge",
);

/**
 * Socket library that provides several common communication patterns
 */
export const nanomsg = mkPackage(
  nixRaw`pkgs.nanomsg`,
  "Socket library that provides several common communication patterns",
);

/**
 * Protocol Buffers with small code size
 */
export const nanopb = mkPackage(
  nixRaw`pkgs.nanopb`,
  "Protocol Buffers with small code size",
);

/**
 * Protocol Buffers with small code size
 */
export const nanopbMalloc = mkPackage(
  nixRaw`pkgs.nanopbMalloc`,
  "Protocol Buffers with small code size",
);

/**
 * Improved Nano Syntax Highlighting Files
 */
export const nanorc = mkPackage(
  nixRaw`pkgs.nanorc`,
  "Improved Nano Syntax Highlighting Files",
);

/**
 * A port of Nanosaur, a 1998 Macintosh game by Pangea Software, for modern operating systems
 */
export const nanosaur = mkPackage(
  nixRaw`pkgs.nanosaur`,
  "A port of Nanosaur, a 1998 Macintosh game by Pangea Software, for modern operating systems",
);

/**
 * A port of Nanosaur2, a 2004 Macintosh game by Pangea Software, for modern operating systems
 */
export const nanosaur2 = mkPackage(
  nixRaw`pkgs.nanosaur2`,
  "A port of Nanosaur2, a 2004 Macintosh game by Pangea Software, for modern operating systems",
);

/**
 * Simple stupid SVG parser
 */
export const nanosvg = mkPackage(
  nixRaw`pkgs.nanosvg`,
  "Simple stupid SVG parser",
);

/**
 * Speech synthesizer commandline utility that improves pico2wave, included with SVOX PicoTTS
 */
export const nanotts = mkPackage(
  nixRaw`pkgs.nanotts`,
  "Speech synthesizer commandline utility that improves pico2wave, included with SVOX PicoTTS",
);

/**
 * A tool for reading, displaying and saving data from the NanoVNA
 */
export const nanovna_saver = mkPackage(
  nixRaw`pkgs.nanovna-saver`,
  "A tool for reading, displaying and saving data from the NanoVNA",
);

/**
 * Nanum Korean font set
 */
export const nanum = mkPackage(
  nixRaw`pkgs.nanum`,
  "Nanum Korean font set",
);

/**
 * A contemporary monospaced sans-serif typeface with a warm touch
 */
export const nanum_gothic_coding = mkPackage(
  nixRaw`pkgs.nanum-gothic-coding`,
  "A contemporary monospaced sans-serif typeface with a warm touch",
);

/**
 * Code snippets in your terminal 🛌
 */
export const nap = mkPackage(
  nixRaw`pkgs.nap`,
  "Code snippets in your terminal 🛌",
);

/**
 * Network Automation and Programmability Abstraction Layer with Multivendor support
 */
export const napalm = mkPackage(
  nixRaw`pkgs.napalm`,
  "Network Automation and Programmability Abstraction Layer with Multivendor support",
);

/**
 * A fast, interactive, multi-dimensional image viewer
 */
export const napari = mkPackage(
  nixRaw`pkgs.napari`,
  "A fast, interactive, multi-dimensional image viewer",
);

/**
 * CLI tools for napi-rs
 */
export const napi_rs_cli = mkPackage(
  nixRaw`pkgs.napi-rs-cli`,
  "CLI tools for napi-rs",
);

/**
 * Write formal proofs in natural language and LaTeX
 */
export const naproche = mkPackage(
  nixRaw`pkgs.naproche`,
  "Write formal proofs in natural language and LaTeX",
);

/**
 * Serve NAR file contents via HTTP
 */
export const nar_serve = mkPackage(
  nixRaw`pkgs.nar-serve`,
  "Serve NAR file contents via HTTP",
);

/**
 * Narrowlink securely connects devices and services together, even when both nodes are behind separate NAT
 */
export const narrowlink = mkPackage(
  nixRaw`pkgs.narrowlink`,
  "Narrowlink securely connects devices and services together, even when both nodes are behind separate NAT",
);

/**
 * A network transparent, client/server audio transport system
 */
export const nas = mkPackage(
  nixRaw`pkgs.nas`,
  "A network transparent, client/server audio transport system",
);

/**
 * Do maths like a normal person, designed for elementary OS
 */
export const nasc = mkPackage(
  nixRaw`pkgs.nasc`,
  "Do maths like a normal person, designed for elementary OS",
);

/**
 * UCSUR OpenType monospaced font for the Toki Pona writing system, Sitelen Pona
 */
export const nasin_nanpa = mkPackage(
  nixRaw`pkgs.nasin-nanpa`,
  "UCSUR OpenType monospaced font for the Toki Pona writing system, Sitelen Pona",
);

/**
 * An 80x86 and x86-64 assembler designed for portability and modularity
 */
export const nasm = mkPackage(
  nixRaw`pkgs.nasm`,
  "An 80x86 and x86-64 assembler designed for portability and modularity",
);

/**
 * Formatter for NASM source files
 */
export const nasmfmt = mkPackage(
  nixRaw`pkgs.nasmfmt`,
  "Formatter for NASM source files",
);

/**
 * Recover the passphrase of your PGP or GPG-key
 */
export const nasty = mkPackage(
  nixRaw`pkgs.nasty`,
  "Recover the passphrase of your PGP or GPG-key",
);

/**
 * NAT gateway traversal utility
 */
export const nat_traverse = mkPackage(
  nixRaw`pkgs.nat-traverse`,
  "NAT gateway traversal utility",
);

    /**
     * Typeface designed to mimic the national park service
signs that are carved using a router bit
     */
export const national_park_typeface = mkPackage(
  nixRaw`pkgs.national-park-typeface`,
  "Typeface designed to mimic the national park service\n    signs that are carved using a router bit",
);

/**
 * the 'ls' replacement you never knew you needed
 */
export const natls = mkPackage(
  nixRaw`pkgs.natls`,
  "the 'ls' replacement you never knew you needed",
);

/**
 * Node-graph based, open-source compositing software
 */
export const natron = mkPackage(
  nixRaw`pkgs.natron`,
  "Node-graph based, open-source compositing software",
);

/**
 * High-Performance server for NATS
 */
export const nats_server = mkPackage(
  nixRaw`pkgs.nats-server`,
  "High-Performance server for NATS",
);

/**
 * NATS Streaming System Server
 */
export const nats_streaming_server = mkPackage(
  nixRaw`pkgs.nats-streaming-server`,
  "NATS Streaming System Server",
);

/**
 * top-like tool for monitoring NATS servers
 */
export const nats_top = mkPackage(
  nixRaw`pkgs.nats-top`,
  "top-like tool for monitoring NATS servers",
);

/**
 * NATS Command Line Interface
 */
export const natscli = mkPackage(
  nixRaw`pkgs.natscli`,
  "NATS Command Line Interface",
);

/**
 * Documentation generator for multiple programming languages.
 */
export const natural_docs = mkPackage(
  nixRaw`pkgs.natural-docs`,
  "Documentation generator for multiple programming languages.",
);

/**
 * Extension for nautilus, which adds an context-entry for opening other terminal-emulators then `gnome-terminal`
 */
export const nautilus_open_any_terminal = mkPackage(
  nixRaw`pkgs.nautilus-open-any-terminal`,
  "Extension for nautilus, which adds an context-entry for opening other terminal-emulators then `gnome-terminal`",
);

/**
 * Programs for computing automorphism groups of graphs and digraphs
 */
export const nauty = mkPackage(
  nixRaw`pkgs.nauty`,
  "Programs for computing automorphism groups of graphs and digraphs",
);

/**
 * An interactive cheatsheet tool for the command-line and application launchers
 */
export const navi = mkPackage(
  nixRaw`pkgs.navi`,
  "An interactive cheatsheet tool for the command-line and application launchers",
);

/**
 * Navidrome Music Server and Streamer compatible with Subsonic/Airsonic
 */
export const navidrome = mkPackage(
  nixRaw`pkgs.navidrome`,
  "Navidrome Music Server and Streamer compatible with Subsonic/Airsonic",
);

/**
 * A Kannada handwriting font
 */
export const navilu_font = mkPackage(
  nixRaw`pkgs.navilu-font`,
  "A Kannada handwriting font",
);

/**
 * The one, true implementation of AWK
 */
export const nawk = mkPackage(
  nixRaw`pkgs.nawk`,
  "The one, true implementation of AWK",
);

/**
 * A command line note-taking, bookmarking, archiving, and knowledge base application
 */
export const nb = mkPackage(
  nixRaw`pkgs.nb`,
  "A command line note-taking, bookmarking, archiving, and knowledge base application",
);

/**
 * Map arbitrary files as block devices over the network
 */
export const nbd = mkPackage(
  nixRaw`pkgs.nbd`,
  "Map arbitrary files as block devices over the network",
);

/**
 * A synthetic computing benchmark program
 */
export const nbench = mkPackage(
  nixRaw`pkgs.nbench`,
  "A synthetic computing benchmark program",
);

/**
 * Run ruff, isort, pyupgrade, mypy, pylint, flake8, black, blacken-docs, and more on Jupyter Notebooks
 */
export const nbqa = mkPackage(
  nixRaw`pkgs.nbqa`,
  "Run ruff, isort, pyupgrade, mypy, pylint, flake8, black, blacken-docs, and more on Jupyter Notebooks",
);

/**
 * Strip output from Jupyter and IPython notebooks
 */
export const nbstripout = mkPackage(
  nixRaw`pkgs.nbstripout`,
  "Strip output from Jupyter and IPython notebooks",
);

/**
 * NetBIOS scanner written in Rust
 */
export const nbtscanner = mkPackage(
  nixRaw`pkgs.nbtscanner`,
  "NetBIOS scanner written in Rust",
);

/**
 * Tools for offensive security of NetBackup infrastructures
 */
export const nbutools = mkPackage(
  nixRaw`pkgs.nbutools`,
  "Tools for offensive security of NetBackup infrastructures",
);

/**
 * Minimalist UTXO tracker for HD Cryptocurrency Wallets
 */
export const nbxplorer = mkPackage(
  nixRaw`pkgs.nbxplorer`,
  "Minimalist UTXO tracker for HD Cryptocurrency Wallets",
);

/**
 * Packaging helper for Nextcloud apps
 */
export const nc4nix = mkPackage(
  nixRaw`pkgs.nc4nix`,
  "Packaging helper for Nextcloud apps",
);

/**
 * Modern and lightweight direct connect client with a friendly ncurses interface
 */
export const ncdc = mkPackage(
  nixRaw`pkgs.ncdc`,
  "Modern and lightweight direct connect client with a friendly ncurses interface",
);

/**
 * Namecoin to DNS bridge daemon
 */
export const ncdns = mkPackage(
  nixRaw`pkgs.ncdns`,
  "Namecoin to DNS bridge daemon",
);

/**
 * Disk usage analyzer with an ncurses interface
 */
export const ncdu = mkPackage(
  nixRaw`pkgs.ncdu`,
  "Disk usage analyzer with an ncurses interface",
);

/**
 * Disk usage analyzer with an ncurses interface
 */
export const ncdu_1 = mkPackage(
  nixRaw`pkgs.ncdu_1`,
  "Disk usage analyzer with an ncurses interface",
);

/**
 * Command line FTP (File Transfer Protocol) client
 */
export const ncftp = mkPackage(
  nixRaw`pkgs.ncftp`,
  "Command line FTP (File Transfer Protocol) client",
);

/**
 * A gopher and gemini client for the modern internet
 */
export const ncgopher = mkPackage(
  nixRaw`pkgs.ncgopher`,
  "A gopher and gemini client for the modern internet",
);

/**
 * Terminal-based chat client with support for Telegram and WhatsApp
 */
export const nchat = mkPackage(
  nixRaw`pkgs.nchat`,
  "Terminal-based chat client with support for Telegram and WhatsApp",
);

/**
 * Curses-based interface for MPD (music player daemon)
 */
export const ncmpc = mkPackage(
  nixRaw`pkgs.ncmpc`,
  "Curses-based interface for MPD (music player daemon)",
);

/**
 * A featureful ncurses based MPD client inspired by ncmpc
 */
export const ncmpcpp = mkPackage(
  nixRaw`pkgs.ncmpcpp`,
  "A featureful ncurses based MPD client inspired by ncmpc",
);

/**
 * ncnn is a high-performance neural network inference framework optimized for the mobile platform
 */
export const ncnn = mkPackage(
  nixRaw`pkgs.ncnn`,
  "ncnn is a high-performance neural network inference framework optimized for the mobile platform",
);

/**
 * NetCDF Operator toolkit
 */
export const nco = mkPackage(
  nixRaw`pkgs.nco`,
  "NetCDF Operator toolkit",
);

/**
 * A fast, simple LZW file compressor
 */
export const ncompress = mkPackage(
  nixRaw`pkgs.ncompress`,
  "A fast, simple LZW file compressor",
);

/**
 * An ncurses mixer for PulseAudio inspired by pavucontrol
 */
export const ncpamixer = mkPackage(
  nixRaw`pkgs.ncpamixer`,
  "An ncurses mixer for PulseAudio inspired by pavucontrol",
);

/**
 * Network authentication tool
 */
export const ncrack = mkPackage(
  nixRaw`pkgs.ncrack`,
  "Network authentication tool",
);

/**
 * Cross-platform ncurses Spotify client written in Rust, inspired by ncmpc and the likes
 */
export const ncspot = mkPackage(
  nixRaw`pkgs.ncspot`,
  "Cross-platform ncurses Spotify client written in Rust, inspired by ncmpc and the likes",
);

/**
 * Free software emulation of curses in SVR4 and more
 */
export const ncurses = mkPackage(
  nixRaw`pkgs.ncurses`,
  "Free software emulation of curses in SVR4 and more",
);

/**
 * Free software emulation of curses in SVR4 and more
 */
export const ncurses5 = mkPackage(
  nixRaw`pkgs.ncurses5`,
  "Free software emulation of curses in SVR4 and more",
);

/**
 * Free software emulation of curses in SVR4 and more
 */
export const ncurses6 = mkPackage(
  nixRaw`pkgs.ncurses6`,
  "Free software emulation of curses in SVR4 and more",
);

/**
 * Visual browser for netCDF format files
 */
export const ncview = mkPackage(
  nixRaw`pkgs.ncview`,
  "Visual browser for netCDF format files",
);

/**
 * NDI Software Developer Kit
 */
export const ndi = mkPackage(
  nixRaw`pkgs.ndi`,
  "NDI Software Developer Kit",
);

/**
 * A small collection of useful tools for IPv6 networking
 */
export const ndisc6 = mkPackage(
  nixRaw`pkgs.ndisc6`,
  "A small collection of useful tools for IPv6 networking",
);

/**
 * A brand new release of the Djbdns
 */
export const ndjbdns = mkPackage(
  nixRaw`pkgs.ndjbdns`,
  "A brand new release of the Djbdns",
);

/**
 * A Named Data Networking (NDN) or Content Centric Networking (CCN) abstraction
 */
export const ndn_cxx = mkPackage(
  nixRaw`pkgs.ndn-cxx`,
  "A Named Data Networking (NDN) or Content Centric Networking (CCN) abstraction",
);

/**
 * Named Data Networking (NDN) Essential Tools
 */
export const ndn_tools = mkPackage(
  nixRaw`pkgs.ndn-tools`,
  "Named Data Networking (NDN) Essential Tools",
);

/**
 * A library for deep-packet inspection
 */
export const ndpi = mkPackage(
  nixRaw`pkgs.ndpi`,
  "A library for deep-packet inspection",
);

/**
 * A daemon that proxies NDP (Neighbor Discovery Protocol) messages between interfaces
 */
export const ndppd = mkPackage(
  nixRaw`pkgs.ndppd`,
  "A daemon that proxies NDP (Neighbor Discovery Protocol) messages between interfaces",
);

/**
 * A tool to unpack and repack nds rom
 */
export const ndstool = mkPackage(
  nixRaw`pkgs.ndstool`,
  "A tool to unpack and repack nds rom",
);

/**
 * The nice editor
 */
export const ne = mkPackage(
  nixRaw`pkgs.ne`,
  "The nice editor",
);

/**
 * General purpose command line tools for interacting with NEAR Protocol
 */
export const near_cli = mkPackage(
  nixRaw`pkgs.near-cli`,
  "General purpose command line tools for interacting with NEAR Protocol",
);

/**
 * Reference client for NEAR Protocol
 */
export const nearcore = mkPackage(
  nixRaw`pkgs.nearcore`,
  "Reference client for NEAR Protocol",
);

/**
 * Near Field Communication manager
 */
export const neard = mkPackage(
  nixRaw`pkgs.neard`,
  "Near Field Communication manager",
);

/**
 * A VNC server library
 */
export const neatvnc = mkPackage(
  nixRaw`pkgs.neatvnc`,
  "A VNC server library",
);

/**
 * Overlay networking tool with a focus on performance, simplicity and security
 */
export const nebula = mkPackage(
  nixRaw`pkgs.nebula`,
  "Overlay networking tool with a focus on performance, simplicity and security",
);

/**
 * A fast, compact Motif/X11 plain text editor
 */
export const nedit = mkPackage(
  nixRaw`pkgs.nedit`,
  "A fast, compact Motif/X11 plain text editor",
);

/**
 * A CLI to add common aliases and features to deps.edn-based projects
 */
export const neil = mkPackage(
  nixRaw`pkgs.neil`,
  "A CLI to add common aliases and features to deps.edn-based projects",
);

/**
 * A high-level dynamically typed programming language
 */
export const neko = mkPackage(
  nixRaw`pkgs.neko`,
  "A high-level dynamically typed programming language",
);

/**
 * Minimal, efficient, statically-typed and meta-programmable systems programming language heavily inspired by Lua, which compiles to C and native code
 */
export const nelua = mkPackage(
  nixRaw`pkgs.nelua`,
  "Minimal, efficient, statically-typed and meta-programmable systems programming language heavily inspired by Lua, which compiles to C and native code",
);

/**
 * Easy to use standalone C/C++ debugger
 */
export const nemiver = mkPackage(
  nixRaw`pkgs.nemiver`,
  "Easy to use standalone C/C++ debugger",
);

/**
 * Nemo DBus plugin for qml
 */
export const nemo_qml_plugin_dbus = mkPackage(
  nixRaw`pkgs.nemo-qml-plugin-dbus`,
  "Nemo DBus plugin for qml",
);

/**
 * Nengo interactive visualizer
 */
export const nengo_gui = mkPackage(
  nixRaw`pkgs.nengo-gui`,
  "Nengo interactive visualizer",
);

/**
 * Simulates the digital rain from "The Matrix"
 */
export const neo = mkPackage(
  nixRaw`pkgs.neo`,
  "Simulates the digital rain from \"The Matrix\"",
);

/**
 * A highly scalable, robust (fully ACID) native graph database
 */
export const neo4j = mkPackage(
  nixRaw`pkgs.neo4j`,
  "A highly scalable, robust (fully ACID) native graph database",
);

/**
 * A GUI front-end for Neo4j
 */
export const neo4j_desktop = mkPackage(
  nixRaw`pkgs.neo4j-desktop`,
  "A GUI front-end for Neo4j",
);

/**
 * Cowsay reborn, written in Go
 */
export const neo_cowsay = mkPackage(
  nixRaw`pkgs.neo-cowsay`,
  "Cowsay reborn, written in Go",
);

/**
 * A cmake lsp based on tower-lsp and treesitter
 */
export const neocmakelsp = mkPackage(
  nixRaw`pkgs.neocmakelsp`,
  "A cmake lsp based on tower-lsp and treesitter",
);

/**
 * A fork of Compton, a compositor for X11
 */
export const neocomp = mkPackage(
  nixRaw`pkgs.neocomp`,
  "A fork of Compton, a compositor for X11",
);

/**
 * A fast, highly customizable system info script
 */
export const neofetch = mkPackage(
  nixRaw`pkgs.neofetch`,
  "A fast, highly customizable system info script",
);

/**
 * A small but very powerful text-based mail client
 */
export const neomutt = mkPackage(
  nixRaw`pkgs.neomutt`,
  "A small but very powerful text-based mail client",
);

/**
 * An HTTP and WebDAV client library
 */
export const neon = mkPackage(
  nixRaw`pkgs.neon`,
  "An HTTP and WebDAV client library",
);

/**
 * Pipe stdin to matrix
 */
export const neosay = mkPackage(
  nixRaw`pkgs.neosay`,
  "Pipe stdin to matrix",
);

/**
 * This is a simple graphical user interface for Neovim.
 */
export const neovide = mkPackage(
  nixRaw`pkgs.neovide`,
  "This is a simple graphical user interface for Neovim.",
);

/**
 * Vim text editor fork focused on extensibility and agility
 */
export const neovim = mkPackage(
  nixRaw`pkgs.neovim`,
  "Vim text editor fork focused on extensibility and agility",
);

/**
 * Gtk ui for neovim
 */
export const neovim_gtk = mkPackage(
  nixRaw`pkgs.neovim-gtk`,
  "Gtk ui for neovim",
);

/**
 * Neovim client library and GUI, in Qt5
 */
export const neovim_qt = mkPackage(
  nixRaw`pkgs.neovim-qt`,
  "Neovim client library and GUI, in Qt5",
);

/**
 * Neovim client library and GUI, in Qt5
 */
export const neovim_qt_unwrapped = mkPackage(
  nixRaw`pkgs.neovim-qt-unwrapped`,
  "Neovim client library and GUI, in Qt5",
);

/**
 * A tool that helps controlling nvim processes from a terminal
 */
export const neovim_remote = mkPackage(
  nixRaw`pkgs.neovim-remote`,
  "A tool that helps controlling nvim processes from a terminal",
);

/**
 * Vim text editor fork focused on extensibility and agility
 */
export const neovim_unwrapped = mkPackage(
  nixRaw`pkgs.neovim-unwrapped`,
  "Vim text editor fork focused on extensibility and agility",
);

/**
 * Font patcher to generate Nerd font
 */
export const nerd_font_patcher = mkPackage(
  nixRaw`pkgs.nerd-font-patcher`,
  "Font patcher to generate Nerd font",
);

/**
 * A Docker-compatible CLI for containerd
 */
export const nerdctl = mkPackage(
  nixRaw`pkgs.nerdctl`,
  "A Docker-compatible CLI for containerd",
);

/**
 * Nerdfix helps you to find/fix obsolete nerd font icons in your project
 */
export const nerdfix = mkPackage(
  nixRaw`pkgs.nerdfix`,
  "Nerdfix helps you to find/fix obsolete nerd font icons in your project",
);

/**
 * Iconic font aggregator, collection, & patcher. 3,600+ icons, 50+ patched fonts
 */
export const nerdfonts = mkPackage(
  nixRaw`pkgs.nerdfonts`,
  "Iconic font aggregator, collection, & patcher. 3,600+ icons, 50+ patched fonts",
);

/**
 * NEST is a command line tool for simulating neural networks
 */
export const nest = mkPackage(
  nixRaw`pkgs.nest`,
  "NEST is a command line tool for simulating neural networks",
);

/**
 * CLI tool for Nest applications
 */
export const nest_cli = mkPackage(
  nixRaw`pkgs.nest-cli`,
  "CLI tool for Nest applications",
);

/**
 * NEST is a command line tool for simulating neural networks
 */
export const nest_mpi = mkPackage(
  nixRaw`pkgs.nest-mpi`,
  "NEST is a command line tool for simulating neural networks",
);

/**
 * NES emulator with a focus on accuracy
 */
export const nestopia = mkPackage(
  nixRaw`pkgs.nestopia`,
  "NES emulator with a focus on accuracy",
);

/**
 * Clients and server for the SNMP network monitoring protocol
 */
export const net_snmp = mkPackage(
  nixRaw`pkgs.net-snmp`,
  "Clients and server for the SNMP network monitoring protocol",
);

/**
 * A command line utility to test network connectivity between kubernetes objects
 */
export const netassert = mkPackage(
  nixRaw`pkgs.netassert`,
  "A command line utility to test network connectivity between kubernetes objects",
);

/**
 * Apple Filing Protocol Server
 */
export const netatalk = mkPackage(
  nixRaw`pkgs.netatalk`,
  "Apple Filing Protocol Server",
);

/**
 * Rust based network stack for containers
 */
export const netavark = mkPackage(
  nixRaw`pkgs.netavark`,
  "Rust based network stack for containers",
);

/**
 * An integrated development environment for Java, C, C++ and PHP
 */
export const netbeans = mkPackage(
  nixRaw`pkgs.netbeans`,
  "An integrated development environment for Java, C, C++ and PHP",
);

/**
 * Connect your devices into a single secure private WireGuard®-based mesh network with SSO/MFA and simple access controls
 */
export const netbird = mkPackage(
  nixRaw`pkgs.netbird`,
  "Connect your devices into a single secure private WireGuard®-based mesh network with SSO/MFA and simple access controls",
);

/**
 * Connect your devices into a single secure private WireGuard®-based mesh network with SSO/MFA and simple access controls
 */
export const netbird_ui = mkPackage(
  nixRaw`pkgs.netbird-ui`,
  "Connect your devices into a single secure private WireGuard®-based mesh network with SSO/MFA and simple access controls",
);

/**
 * Mini PXE server
 */
export const netboot = mkPackage(
  nixRaw`pkgs.netboot`,
  "Mini PXE server",
);

/**
 * A tool to boot OS installers and utilities over the network, to be run from a bootloader
 */
export const netbootxyz_efi = mkPackage(
  nixRaw`pkgs.netbootxyz-efi`,
  "A tool to boot OS installers and utilities over the network, to be run from a bootloader",
);

/**
 * IP address management (IPAM) and data center infrastructure management (DCIM) tool
 */
export const netbox = mkPackage(
  nixRaw`pkgs.netbox`,
  "IP address management (IPAM) and data center infrastructure management (DCIM) tool",
);

/**
 * Inventory synchronization tool between Netbox and Netshot
 */
export const netbox2netshot = mkPackage(
  nixRaw`pkgs.netbox2netshot`,
  "Inventory synchronization tool between Netbox and Netshot",
);

/**
 * IP address management (IPAM) and data center infrastructure management (DCIM) tool
 */
export const netbox_3_5 = mkPackage(
  nixRaw`pkgs.netbox_3_5`,
  "IP address management (IPAM) and data center infrastructure management (DCIM) tool",
);

/**
 * IP address management (IPAM) and data center infrastructure management (DCIM) tool
 */
export const netbox_3_6 = mkPackage(
  nixRaw`pkgs.netbox_3_6`,
  "IP address management (IPAM) and data center infrastructure management (DCIM) tool",
);

/**
 * Free TLS/SSL implementation
 */
export const netcat = mkPackage(
  nixRaw`pkgs.netcat`,
  "Free TLS/SSL implementation",
);

/**
 * Utility which reads and writes data across network connections
 */
export const netcat_gnu = mkPackage(
  nixRaw`pkgs.netcat-gnu`,
  "Utility which reads and writes data across network connections",
);

/**
 * TCP/IP swiss army knife. OpenBSD variant
 */
export const netcat_openbsd = mkPackage(
  nixRaw`pkgs.netcat-openbsd`,
  "TCP/IP swiss army knife. OpenBSD variant",
);

/**
 * Libraries for the Unidata network Common Data Format
 */
export const netcdf = mkPackage(
  nixRaw`pkgs.netcdf`,
  "Libraries for the Unidata network Common Data Format",
);

/**
 * Libraries for the Unidata network Common Data Format
 */
export const netcdf_mpi = mkPackage(
  nixRaw`pkgs.netcdf-mpi`,
  "Libraries for the Unidata network Common Data Format",
);

/**
 * C++ API to manipulate netcdf files
 */
export const netcdfcxx4 = mkPackage(
  nixRaw`pkgs.netcdfcxx4`,
  "C++ API to manipulate netcdf files",
);

/**
 * Fortran API to manipulate netcdf files
 */
export const netcdffortran = mkPackage(
  nixRaw`pkgs.netcdffortran`,
  "Fortran API to manipulate netcdf files",
);

/**
 * Automated WireGuard® Management Client
 */
export const netclient = mkPackage(
  nixRaw`pkgs.netclient`,
  "Automated WireGuard® Management Client",
);

/**
 * Managed code debugger with MI interface for CoreCLR
 */
export const netcoredbg = mkPackage(
  nixRaw`pkgs.netcoredbg`,
  "Managed code debugger with MI interface for CoreCLR",
);

/**
 * Real-time performance monitoring tool
 */
export const netdata = mkPackage(
  nixRaw`pkgs.netdata`,
  "Real-time performance monitoring tool",
);

/**
 * Real-time performance monitoring tool
 */
export const netdataCloud = mkPackage(
  nixRaw`pkgs.netdataCloud`,
  "Real-time performance monitoring tool",
);

/**
 * Netdata orchestrator for data collection modules written in go
 */
export const netdata_go_plugins = mkPackage(
  nixRaw`pkgs.netdata-go-plugins`,
  "Netdata orchestrator for data collection modules written in go",
);

/**
 * A network address discovering tool, developed mainly for those wireless networks without dhcp server, it also works on hub/switched networks
 */
export const netdiscover = mkPackage(
  nixRaw`pkgs.netdiscover`,
  "A network address discovering tool, developed mainly for those wireless networks without dhcp server, it also works on hub/switched networks",
);

/**
 * A Rust + GTK based netease cloud music player
 */
export const netease_cloud_music_gtk = mkPackage(
  nixRaw`pkgs.netease-cloud-music-gtk`,
  "A Rust + GTK based netease cloud music player",
);

/**
 * netease cloud music terminal client by rust
 */
export const netease_music_tui = mkPackage(
  nixRaw`pkgs.netease-music-tui`,
  "netease cloud music terminal client by rust",
);

/**
 * Share linux event devices with other machines
 */
export const netevent = mkPackage(
  nixRaw`pkgs.netevent`,
  "Share linux event devices with other machines",
);

/**
 * Open Netflix in Google Chrome app mode
 */
export const netflix = mkPackage(
  nixRaw`pkgs.netflix`,
  "Open Netflix in Google Chrome app mode",
);

/**
 * Rogue-like game
 */
export const nethack = mkPackage(
  nixRaw`pkgs.nethack`,
  "Rogue-like game",
);

/**
 * Rogue-like game
 */
export const nethack_qt = mkPackage(
  nixRaw`pkgs.nethack-qt`,
  "Rogue-like game",
);

/**
 * Rogue-like game
 */
export const nethack_x11 = mkPackage(
  nixRaw`pkgs.nethack-x11`,
  "Rogue-like game",
);

/**
 * A small 'net top' tool, grouping bandwidth by process
 */
export const nethogs = mkPackage(
  nixRaw`pkgs.nethogs`,
  "A small 'net top' tool, grouping bandwidth by process",
);

/**
 * Listen to your network traffic
 */
export const nethoscope = mkPackage(
  nixRaw`pkgs.nethoscope`,
  "Listen to your network traffic",
);

/**
 * OpenWrt Network interface configuration daemon
 */
export const netifd = mkPackage(
  nixRaw`pkgs.netifd`,
  "OpenWrt Network interface configuration daemon",
);

/**
 * Netkit TFTP client and server
 */
export const netkittftp = mkPackage(
  nixRaw`pkgs.netkittftp`,
  "Netkit TFTP client and server",
);

export const netlify_cli = mkPackage(
  nixRaw`pkgs.netlify-cli`,
  "",
);

/**
 * Draw SVG digital circuits schematics from yosys JSON netlists
 */
export const netlistsvg = mkPackage(
  nixRaw`pkgs.netlistsvg`,
  "Draw SVG digital circuits schematics from yosys JSON netlists",
);

/**
 * A multi-agent programmable modeling environment
 */
export const netlogo = mkPackage(
  nixRaw`pkgs.netlogo`,
  "A multi-agent programmable modeling environment",
);

/**
 * WireGuard automation from homelab to enterprise
 */
export const netmaker = mkPackage(
  nixRaw`pkgs.netmaker`,
  "WireGuard automation from homelab to enterprise",
);

/**
 * WireGuard automation from homelab to enterprise
 */
export const netmaker_full = mkPackage(
  nixRaw`pkgs.netmaker-full`,
  "WireGuard automation from homelab to enterprise",
);

/**
 * An IP address formatting tool 
 */
export const netmask = mkPackage(
  nixRaw`pkgs.netmask`,
  "An IP address formatting tool ",
);

/**
 * Toolkit for manipulation of graphic images
 */
export const netpbm = mkPackage(
  nixRaw`pkgs.netpbm`,
  "Toolkit for manipulation of graphic images",
);

/**
 * Benchmark to measure the performance of many different types of networking
 */
export const netperf = mkPackage(
  nixRaw`pkgs.netperf`,
  "Benchmark to measure the performance of many different types of networking",
);

/**
 * Backend-agnostic network configuration in YAML
 */
export const netplan = mkPackage(
  nixRaw`pkgs.netplan`,
  "Backend-agnostic network configuration in YAML",
);

/**
 * Tool to monitor network traffic based on processes
 */
export const netproc = mkPackage(
  nixRaw`pkgs.netproc`,
  "Tool to monitor network traffic based on processes",
);

/**
 * A free networked version of T*tris
 */
export const netris = mkPackage(
  nixRaw`pkgs.netris`,
  "A free networked version of T*tris",
);

/**
 * Simple tool for transporting data over the network
 */
export const netrw = mkPackage(
  nixRaw`pkgs.netrw`,
  "Simple tool for transporting data over the network",
);

/**
 * An ultrafast intelligent parallelizing binary-search implementation of "ping"
 */
export const netselect = mkPackage(
  nixRaw`pkgs.netselect`,
  "An ultrafast intelligent parallelizing binary-search implementation of \"ping\"",
);

/**
 * Swiss army knife for daily Linux network plumbing
 */
export const netsniff_ng = mkPackage(
  nixRaw`pkgs.netsniff-ng`,
  "Swiss army knife for daily Linux network plumbing",
);

/**
 * A free, open source, small web browser
 */
export const netsurf_browser = mkPackage(
  nixRaw`pkgs.netsurf-browser`,
  "A free, open source, small web browser",
);

/**
 * Network "tee" program
 */
export const nettee = mkPackage(
  nixRaw`pkgs.nettee`,
  "Network \"tee\" program",
);

/**
 * Cryptographic library
 */
export const nettle = mkPackage(
  nixRaw`pkgs.nettle`,
  "Cryptographic library",
);

/**
 * A set of tools for controlling the network subsystem in Linux
 */
export const nettools = mkPackage(
  nixRaw`pkgs.nettools`,
  "A set of tools for controlling the network subsystem in Linux",
);

/**
 * Network Audio Adapter daemon
 */
export const networkaudiod = mkPackage(
  nixRaw`pkgs.networkaudiod`,
  "Network Audio Adapter daemon",
);

/**
 * Dispatcher service for systemd-networkd connection status changes
 */
export const networkd_dispatcher = mkPackage(
  nixRaw`pkgs.networkd-dispatcher`,
  "Dispatcher service for systemd-networkd connection status changes",
);

/**
 * Desktop notification integration for systemd-networkd
 */
export const networkd_notify = mkPackage(
  nixRaw`pkgs.networkd-notify`,
  "Desktop notification integration for systemd-networkd",
);

/**
 * Experimental implementation of the C++ Networking Technical Specification
 */
export const networking_ts_cxx = mkPackage(
  nixRaw`pkgs.networking-ts-cxx`,
  "Experimental implementation of the C++ Networking Technical Specification",
);

/**
 * Network configuration and management tool
 */
export const networkmanager = mkPackage(
  nixRaw`pkgs.networkmanager`,
  "Network configuration and management tool",
);

/**
 * Small script to manage NetworkManager connections with dmenu instead of nm-applet
 */
export const networkmanager_dmenu = mkPackage(
  nixRaw`pkgs.networkmanager_dmenu`,
  "Small script to manage NetworkManager connections with dmenu instead of nm-applet",
);

/**
 * NetworkManager’s FortiSSL plugin
 */
export const networkmanager_fortisslvpn = mkPackage(
  nixRaw`pkgs.networkmanager-fortisslvpn`,
  "NetworkManager’s FortiSSL plugin",
);

/**
 * NetworkManager's iodine plugin
 */
export const networkmanager_iodine = mkPackage(
  nixRaw`pkgs.networkmanager-iodine`,
  "NetworkManager's iodine plugin",
);

/**
 * L2TP plugin for NetworkManager
 */
export const networkmanager_l2tp = mkPackage(
  nixRaw`pkgs.networkmanager-l2tp`,
  "L2TP plugin for NetworkManager",
);

/**
 * NetworkManager’s OpenConnect plugin
 */
export const networkmanager_openconnect = mkPackage(
  nixRaw`pkgs.networkmanager-openconnect`,
  "NetworkManager’s OpenConnect plugin",
);

/**
 * NetworkManager's OpenVPN plugin
 */
export const networkmanager_openvpn = mkPackage(
  nixRaw`pkgs.networkmanager-openvpn`,
  "NetworkManager's OpenVPN plugin",
);

/**
 * NetworkManager's sstp plugin
 */
export const networkmanager_sstp = mkPackage(
  nixRaw`pkgs.networkmanager-sstp`,
  "NetworkManager's sstp plugin",
);

/**
 * NetworkManager's strongswan plugin
 */
export const networkmanager_strongswan = mkPackage(
  nixRaw`pkgs.networkmanager_strongswan`,
  "NetworkManager's strongswan plugin",
);

/**
 * NetworkManager's VPNC plugin
 */
export const networkmanager_vpnc = mkPackage(
  nixRaw`pkgs.networkmanager-vpnc`,
  "NetworkManager's VPNC plugin",
);

/**
 * NetworkManager control applet for GNOME
 */
export const networkmanagerapplet = mkPackage(
  nixRaw`pkgs.networkmanagerapplet`,
  "NetworkManager control applet for GNOME",
);

/**
 * The Open Source Network Forensic Analysis Tool (NFAT)
 */
export const networkminer = mkPackage(
  nixRaw`pkgs.networkminer`,
  "The Open Source Network Forensic Analysis Tool (NFAT)",
);

/**
 * Simulation environment for empirically-based simulations of neurons and networks of neurons
 */
export const neuron = mkPackage(
  nixRaw`pkgs.neuron`,
  "Simulation environment for empirically-based simulations of neurons and networks of neurons",
);

/**
 * Simulation environment for empirically-based simulations of neurons and networks of neurons
 */
export const neuron_full = mkPackage(
  nixRaw`pkgs.neuron-full`,
  "Simulation environment for empirically-based simulations of neurons and networks of neurons",
);

/**
 * Simulation environment for empirically-based simulations of neurons and networks of neurons
 */
export const neuron_mpi = mkPackage(
  nixRaw`pkgs.neuron-mpi`,
  "Simulation environment for empirically-based simulations of neurons and networks of neurons",
);

/**
 * Tilt the floor to roll a ball
 */
export const neverball = mkPackage(
  nixRaw`pkgs.neverball`,
  "Tilt the floor to roll a ball",
);

/**
 * A session manager designed for audio applications.
 */
export const new_session_manager = mkPackage(
  nixRaw`pkgs.new-session-manager`,
  "A session manager designed for audio applications.",
);

/**
 * a C library intended for use on embedded systems
 */
export const newlib = mkPackage(
  nixRaw`pkgs.newlib`,
  "a C library intended for use on embedded systems",
);

/**
 * a C library intended for use on embedded systems
 */
export const newlibCross = mkPackage(
  nixRaw`pkgs.newlibCross`,
  "a C library intended for use on embedded systems",
);

/**
 * a C library intended for use on embedded systems
 */
export const newlib_nano = mkPackage(
  nixRaw`pkgs.newlib-nano`,
  "a C library intended for use on embedded systems",
);

/**
 * a C library intended for use on embedded systems
 */
export const newlib_nanoCross = mkPackage(
  nixRaw`pkgs.newlib-nanoCross`,
  "a C library intended for use on embedded systems",
);

/**
 * A command-line collection runner for Postman
 */
export const newman = mkPackage(
  nixRaw`pkgs.newman`,
  "A command-line collection runner for Postman",
);

/**
 * System-wide monitoring for newrelic
 */
export const newrelic_sysmond = mkPackage(
  nixRaw`pkgs.newrelic-sysmond`,
  "System-wide monitoring for newrelic",
);

/**
 * A fork of Newsbeuter, an RSS/Atom feed reader for the text console
 */
export const newsboat = mkPackage(
  nixRaw`pkgs.newsboat`,
  "A fork of Newsbeuter, an RSS/Atom feed reader for the text console",
);

/**
 * A modern feed reader designed for the GNOME desktop
 */
export const newsflash = mkPackage(
  nixRaw`pkgs.newsflash`,
  "A modern feed reader designed for the GNOME desktop",
);

/**
 * Library for color text mode, widget based user interfaces
 */
export const newt = mkPackage(
  nixRaw`pkgs.newt`,
  "Library for color text mode, widget based user interfaces",
);

/**
 * A space battle game with gravity as the main theme
 */
export const newtonwars = mkPackage(
  nixRaw`pkgs.newtonwars`,
  "A space battle game with gravity as the main theme",
);

/**
 * Lexer for Go
 */
export const nex = mkPackage(
  nixRaw`pkgs.nex`,
  "Lexer for Go",
);

/**
 * Sharing solution for files, calendars, contacts and more
 */
export const nextcloud26 = mkPackage(
  nixRaw`pkgs.nextcloud26`,
  "Sharing solution for files, calendars, contacts and more",
);

/**
 * Sharing solution for files, calendars, contacts and more
 */
export const nextcloud27 = mkPackage(
  nixRaw`pkgs.nextcloud27`,
  "Sharing solution for files, calendars, contacts and more",
);

/**
 * Nextcloud themed desktop client
 */
export const nextcloud_client = mkPackage(
  nixRaw`pkgs.nextcloud-client`,
  "Nextcloud themed desktop client",
);

/**
 * Fast parallel feed updater for the Nextcloud news app
 */
export const nextcloud_news_updater = mkPackage(
  nixRaw`pkgs.nextcloud-news-updater`,
  "Fast parallel feed updater for the Nextcloud news app",
);

/**
 * Update notifications for nextcloud clients
 */
export const nextcloud_notify_push = mkPackage(
  nixRaw`pkgs.nextcloud-notify_push`,
  "Update notifications for nextcloud clients",
);

/**
 * NextDNS DNS/53 to DoH Proxy
 */
export const nextdns = mkPackage(
  nixRaw`pkgs.nextdns`,
  "NextDNS DNS/53 to DoH Proxy",
);

export const nextflow = mkPackage(
  nixRaw`pkgs.nextflow`,
  "",
);

/**
 * Print upcoming space-related events in your terminal
 */
export const nextinspace = mkPackage(
  nixRaw`pkgs.nextinspace`,
  "Print upcoming space-related events in your terminal",
);

/**
 * Place and route tool for FPGAs
 */
export const nextpnr = mkPackage(
  nixRaw`pkgs.nextpnr`,
  "Place and route tool for FPGAs",
);

/**
 * Place and route tool for FPGAs
 */
export const nextpnrWithGui = mkPackage(
  nixRaw`pkgs.nextpnrWithGui`,
  "Place and route tool for FPGAs",
);

/**
 * An open source visual route tracking CLI tool
 */
export const nexttrace = mkPackage(
  nixRaw`pkgs.nexttrace`,
  "An open source visual route tracking CLI tool",
);

/**
 * A free fast-paced first-person shooter
 */
export const nexuiz = mkPackage(
  nixRaw`pkgs.nexuiz`,
  "A free fast-paced first-person shooter",
);

/**
 * Repository manager for binary software components
 */
export const nexus = mkPackage(
  nixRaw`pkgs.nexus`,
  "Repository manager for binary software components",
);

/**
 * Named Data Networking (NDN) Forwarding Daemon
 */
export const nfd = mkPackage(
  nixRaw`pkgs.nfd`,
  "Named Data Networking (NDN) Forwarding Daemon",
);

/**
 * Tools for working with netflow data
 */
export const nfdump = mkPackage(
  nixRaw`pkgs.nfdump`,
  "Tools for working with netflow data",
);

/**
 * Nonequispaced fast Fourier transform
 */
export const nfft = mkPackage(
  nixRaw`pkgs.nfft`,
  "Nonequispaced fast Fourier transform",
);

/**
 * Numbered Files Leading Zeros helps you to manage ascending numbered file names
 */
export const nflz = mkPackage(
  nixRaw`pkgs.nflz`,
  "Numbered Files Leading Zeros helps you to manage ascending numbered file names",
);

/**
 * A simple deb and rpm packager written in Go
 */
export const nfpm = mkPackage(
  nixRaw`pkgs.nfpm`,
  "A simple deb and rpm packager written in Go",
);

/**
 * NFS server that runs in user space
 */
export const nfs_ganesha = mkPackage(
  nixRaw`pkgs.nfs-ganesha`,
  "NFS server that runs in user space",
);

/**
 * Linux user-space NFS utilities
 */
export const nfs_utils = mkPackage(
  nixRaw`pkgs.nfs-utils`,
  "Linux user-space NFS utilities",
);

/**
 * NFS and CIFS tracing/monitoring/capturing/analyzing tool
 */
export const nfstrace = mkPackage(
  nixRaw`pkgs.nfstrace`,
  "NFS and CIFS tracing/monitoring/capturing/analyzing tool",
);

/**
 * The project that aims to replace the existing {ip,ip6,arp,eb}tables framework
 */
export const nftables = mkPackage(
  nixRaw`pkgs.nftables`,
  "The project that aims to replace the existing {ip,ip6,arp,eb}tables framework",
);

/**
 * Netgear switch (NSDP) administration tool
 */
export const ngadmin = mkPackage(
  nixRaw`pkgs.ngadmin`,
  "Netgear switch (NSDP) administration tool",
);

/**
 * HTTP/2 C library and tools
 */
export const nghttp2 = mkPackage(
  nixRaw`pkgs.nghttp2`,
  "HTTP/2 C library and tools",
);

/**
 * nghttp3 is an implementation of HTTP/3 mapping over QUIC and QPACK in C.
 */
export const nghttp3 = mkPackage(
  nixRaw`pkgs.nghttp3`,
  "nghttp3 is an implementation of HTTP/3 mapping over QUIC and QPACK in C.",
);

/**
 * A reverse proxy and lightweight webserver
 */
export const nginx = mkPackage(
  nixRaw`pkgs.nginx`,
  "A reverse proxy and lightweight webserver",
);

/**
 * A reverse proxy and lightweight webserver
 */
export const nginxMainline = mkPackage(
  nixRaw`pkgs.nginxMainline`,
  "A reverse proxy and lightweight webserver",
);

/**
 * A reverse proxy and lightweight webserver
 */
export const nginxQuic = mkPackage(
  nixRaw`pkgs.nginxQuic`,
  "A reverse proxy and lightweight webserver",
);

/**
 * A reverse proxy and lightweight webserver
 */
export const nginxShibboleth = mkPackage(
  nixRaw`pkgs.nginxShibboleth`,
  "A reverse proxy and lightweight webserver",
);

/**
 * A reverse proxy and lightweight webserver
 */
export const nginxStable = mkPackage(
  nixRaw`pkgs.nginxStable`,
  "A reverse proxy and lightweight webserver",
);

/**
 * nginx config file formatter
 */
export const nginx_config_formatter = mkPackage(
  nixRaw`pkgs.nginx-config-formatter`,
  "nginx config file formatter",
);

/**
 * A reverse proxy and lightweight webserver (documentation)
 */
export const nginx_doc = mkPackage(
  nixRaw`pkgs.nginx-doc`,
  "A reverse proxy and lightweight webserver (documentation)",
);

/**
 * SSO authentication provider for the auth_request nginx module
 */
export const nginx_sso = mkPackage(
  nixRaw`pkgs.nginx-sso`,
  "SSO authentication provider for the auth_request nginx module",
);

/**
 * Next Generation IRC Daemon
 */
export const ngircd = mkPackage(
  nixRaw`pkgs.ngircd`,
  "Next Generation IRC Daemon",
);

/**
 * A simple fast vector programming language
 */
export const ngn_k = mkPackage(
  nixRaw`pkgs.ngn-k`,
  "A simple fast vector programming language",
);

/**
 * Network packet analyzer
 */
export const ngrep = mkPackage(
  nixRaw`pkgs.ngrep`,
  "Network packet analyzer",
);

/**
 * Allows you to expose a web server running on your local machine to the internet
 */
export const ngrok = mkPackage(
  nixRaw`pkgs.ngrok`,
  "Allows you to expose a web server running on your local machine to the internet",
);

/**
 * The Next Generation Spice (Electronic Circuit Simulator)
 */
export const ngspice = mkPackage(
  nixRaw`pkgs.ngspice`,
  "The Next Generation Spice (Electronic Circuit Simulator)",
);

/**
 * Nearest Neighbor Search with Neighborhood Graph and Tree for High-dimensional Data
 */
export const ngt = mkPackage(
  nixRaw`pkgs.ngt`,
  "Nearest Neighbor Search with Neighborhood Graph and Tree for High-dimensional Data",
);

/**
 * ngtcp2 project is an effort to implement QUIC protocol which is now being discussed in IETF QUICWG for its standardization.
 */
export const ngtcp2 = mkPackage(
  nixRaw`pkgs.ngtcp2`,
  "ngtcp2 project is an effort to implement QUIC protocol which is now being discussed in IETF QUICWG for its standardization.",
);

/**
 * an effort to implement RFC9000 QUIC protocol.
 */
export const ngtcp2_gnutls = mkPackage(
  nixRaw`pkgs.ngtcp2-gnutls`,
  "an effort to implement RFC9000 QUIC protocol.",
);

/**
 * Desktop client for the Matrix protocol
 */
export const nheko = mkPackage(
  nixRaw`pkgs.nheko`,
  "Desktop client for the Matrix protocol",
);

/**
 * nHentai is a CLI tool for downloading doujinshi from <http://nhentai.net>
 */
export const nhentai = mkPackage(
  nixRaw`pkgs.nhentai`,
  "nHentai is a CLI tool for downloading doujinshi from <http://nhentai.net>",
);

/**
 * High-performance remote display protocol
 */
export const nice_dcv_client = mkPackage(
  nixRaw`pkgs.nice-dcv-client`,
  "High-performance remote display protocol",
);

/**
 * Better configuration for less
 */
export const nickel = mkPackage(
  nixRaw`pkgs.nickel`,
  "Better configuration for less",
);

/**
 * A graphical client for the SoulSeek peer-to-peer system
 */
export const nicotine_plus = mkPackage(
  nixRaw`pkgs.nicotine-plus`,
  "A graphical client for the SoulSeek peer-to-peer system",
);

/**
 * A program that compares two Nix expressions and determines which attributes changed
 */
export const niff = mkPackage(
  nixRaw`pkgs.niff`,
  "A program that compares two Nix expressions and determines which attributes changed",
);

/**
 * Easy to use, powerful, and reliable system to process and distribute data
 */
export const nifi = mkPackage(
  nixRaw`pkgs.nifi`,
  "Easy to use, powerful, and reliable system to process and distribute data",
);

/**
 * A tool for analyzing and editing NetImmerse/Gamebryo '*.nif' files
 */
export const nifskope = mkPackage(
  nixRaw`pkgs.nifskope`,
  "A tool for analyzing and editing NetImmerse/Gamebryo '*.nif' files",
);

/**
 * Medical imaging format C API
 */
export const nifticlib = mkPackage(
  nixRaw`pkgs.nifticlib`,
  "Medical imaging format C API",
);

/**
 * Medical image registration software
 */
export const niftyreg = mkPackage(
  nixRaw`pkgs.niftyreg`,
  "Medical image registration software",
);

/**
 * Software for medical image segmentation, bias field correction, and cortical thickness calculation
 */
export const niftyseg = mkPackage(
  nixRaw`pkgs.niftyseg`,
  "Software for medical image segmentation, bias field correction, and cortical thickness calculation",
);

/**
 * Persian/Arabic Open Source Font
 */
export const nika_fonts = mkPackage(
  nixRaw`pkgs.nika-fonts`,
  "Persian/Arabic Open Source Font",
);

/**
 * Web server scanner
 */
export const nikto = mkPackage(
  nixRaw`pkgs.nikto`,
  "Web server scanner",
);

/**
 * Yet another language server for Nix
 */
export const nil = mkPackage(
  nixRaw`pkgs.nil`,
  "Yet another language server for Nix",
);

/**
 * Unofficial Amazon Games client
 */
export const nile = mkPackage(
  nixRaw`pkgs.nile`,
  "Unofficial Amazon Games client",
);

/**
 * NILFS utilities
 */
export const nilfs_utils = mkPackage(
  nixRaw`pkgs.nilfs-utils`,
  "NILFS utilities",
);

/**
 * Statically typed, imperative programming language (x86_64-unknown-linux-gnu wrapper)
 */
export const nim = mkPackage(
  nixRaw`pkgs.nim`,
  "Statically typed, imperative programming language (x86_64-unknown-linux-gnu wrapper)",
);

/**
 * Statically typed, imperative programming language (x86_64-unknown-linux-gnu wrapper)
 */
export const nim2 = mkPackage(
  nixRaw`pkgs.nim2`,
  "Statically typed, imperative programming language (x86_64-unknown-linux-gnu wrapper)",
);

export * as nimPackages from "./nimPackages/mod.ts";

/**
 * Statically typed, imperative programming language
 */
export const nim_unwrapped = mkPackage(
  nixRaw`pkgs.nim-unwrapped`,
  "Statically typed, imperative programming language",
);

/**
 * Statically typed, imperative programming language
 */
export const nim_unwrapped_2 = mkPackage(
  nixRaw`pkgs.nim-unwrapped-2`,
  "Statically typed, imperative programming language",
);

/**
 * Run machine learning jobs on AWS with a single command
 */
export const nimbo = mkPackage(
  nixRaw`pkgs.nimbo`,
  "Run machine learning jobs on AWS with a single command",
);

/**
 * Nim based tiling window manager
 */
export const nimdow = mkPackage(
  nixRaw`pkgs.nimdow`,
  "Nim based tiling window manager",
);

/**
 * Language Server Protocol implementation for Nim
 */
export const nimlsp = mkPackage(
  nixRaw`pkgs.nimlsp`,
  "Language Server Protocol implementation for Nim",
);

/**
 * Terminal file manager written in nim
 */
export const nimmm = mkPackage(
  nixRaw`pkgs.nimmm`,
  "Terminal file manager written in nim",
);

/**
 * Small build system with a focus on speed
 */
export const ninja = mkPackage(
  nixRaw`pkgs.ninja`,
  "Small build system with a focus on speed",
);

/**
 * sample slicer plugin for LV2, VST, and jack standalone
 */
export const ninjas2 = mkPackage(
  nixRaw`pkgs.ninjas2`,
  "sample slicer plugin for LV2, VST, and jack standalone",
);

/**
 * A sentence based license detector
 */
export const ninka = mkPackage(
  nixRaw`pkgs.ninka`,
  "A sentence based license detector",
);

/**
 * Space Invaders clone based on ncurses
 */
export const ninvaders = mkPackage(
  nixRaw`pkgs.ninvaders`,
  "Space Invaders clone based on ncurses",
);

/**
 * Graphical user interface for VIPS image processing system
 */
export const nip2 = mkPackage(
  nixRaw`pkgs.nip2`,
  "Graphical user interface for VIPS image processing system",
);

/**
 * Incredibly fast system fetch written in nim
 */
export const nitch = mkPackage(
  nixRaw`pkgs.nitch`,
  "Incredibly fast system fetch written in nim",
);

/**
 * A wallpaper browser and setter for X11
 */
export const nitrogen = mkPackage(
  nixRaw`pkgs.nitrogen`,
  "A wallpaper browser and setter for X11",
);

/**
 * Provides extra functionality for the Nitrokey Pro and Storage
 */
export const nitrokey_app = mkPackage(
  nixRaw`pkgs.nitrokey-app`,
  "Provides extra functionality for the Nitrokey Pro and Storage",
);

/**
 * This application allows to manage Nitrokey 3 devices
 */
export const nitrokey_app2 = mkPackage(
  nixRaw`pkgs.nitrokey-app2`,
  "This application allows to manage Nitrokey 3 devices",
);

/**
 * Alternative Twitter front-end
 */
export const nitter = mkPackage(
  nixRaw`pkgs.nitter`,
  "Alternative Twitter front-end",
);

/**
 * Easy dependency management for Nix projects
 */
export const niv = mkPackage(
  nixRaw`pkgs.niv`,
  "Easy dependency management for Nix projects",
);

/**
 * Powerful package manager that makes package management reliable and reproducible
 */
export const nix = mkPackage(
  nixRaw`pkgs.nix`,
  "Powerful package manager that makes package management reliable and reproducible",
);

/**
 * Powerful package manager that makes package management reliable and reproducible
 */
export const nixStatic = mkPackage(
  nixRaw`pkgs.nixStatic`,
  "Powerful package manager that makes package management reliable and reproducible",
);

/**
 * Bash completions for Nix, NixOS, and NixOps
 */
export const nix_bash_completions = mkPackage(
  nixRaw`pkgs.nix-bash-completions`,
  "Bash completions for Nix, NixOS, and NixOps",
);

/**
 * A set of scripts to serve the Nix store as a binary cache
 */
export const nix_binary_cache = mkPackage(
  nixRaw`pkgs.nix-binary-cache`,
  "A set of scripts to serve the Nix store as a binary cache",
);

/**
 * Bisect nix builds
 */
export const nix_bisect = mkPackage(
  nixRaw`pkgs.nix-bisect`,
  "Bisect nix builds",
);

/**
 * A CI friendly wrapper around nix-build
 */
export const nix_build_uncached = mkPackage(
  nixRaw`pkgs.nix-build-uncached`,
  "A CI friendly wrapper around nix-build",
);

/**
 * Create bundles from Nixpkgs attributes
 */
export const nix_bundle = mkPackage(
  nixRaw`pkgs.nix-bundle`,
  "Create bundles from Nixpkgs attributes",
);

/**
 * Deploy Nix-built software to a NixOS machine
 */
export const nix_deploy = mkPackage(
  nixRaw`pkgs.nix-deploy`,
  "Deploy Nix-built software to a NixOS machine",
);

/**
 * Parse and render *.drv files
 */
export const nix_derivation = mkPackage(
  nixRaw`pkgs.nix-derivation`,
  "Parse and render *.drv files",
);

/**
 * Explain why two Nix derivations differ
 */
export const nix_diff = mkPackage(
  nixRaw`pkgs.nix-diff`,
  "Explain why two Nix derivations differ",
);

/**
 * A fast, persistent use_nix implementation for direnv
 */
export const nix_direnv = mkPackage(
  nixRaw`pkgs.nix-direnv`,
  "A fast, persistent use_nix implementation for direnv",
);

/**
 * An interactive Nix documentation tool
 */
export const nix_doc = mkPackage(
  nixRaw`pkgs.nix-doc`,
  "An interactive Nix documentation tool",
);

/**
 * A tool to determine which gc-roots take space in your nix store
 */
export const nix_du = mkPackage(
  nixRaw`pkgs.nix-du`,
  "A tool to determine which gc-roots take space in your nix store",
);

/**
 * Hydra's builtin hydra-eval-jobs as a standalone
 */
export const nix_eval_jobs = mkPackage(
  nixRaw`pkgs.nix-eval-jobs`,
  "Hydra's builtin hydra-eval-jobs as a standalone",
);

/**
 * Utility to generate a Nix expression for a Perl package from CPAN
 */
export const nix_generate_from_cpan = mkPackage(
  nixRaw`pkgs.nix-generate-from-cpan`,
  "Utility to generate a Nix expression for a Perl package from CPAN",
);

/**
 * A files database for nixpkgs
 */
export const nix_index = mkPackage(
  nixRaw`pkgs.nix-index`,
  "A files database for nixpkgs",
);

/**
 * A files database for nixpkgs
 */
export const nix_index_unwrapped = mkPackage(
  nixRaw`pkgs.nix-index-unwrapped`,
  "A files database for nixpkgs",
);

export const nix_info = mkPackage(
  nixRaw`pkgs.nix-info`,
  "",
);

export const nix_info_tested = mkPackage(
  nixRaw`pkgs.nix-info-tested`,
  "",
);

/**
 * Command line tool to generate Nix packages from URLs
 */
export const nix_init = mkPackage(
  nixRaw`pkgs.nix-init`,
  "Command line tool to generate Nix packages from URLs",
);

/**
 * Run unpatched dynamic binaries on NixOS
 */
export const nix_ld = mkPackage(
  nixRaw`pkgs.nix-ld`,
  "Run unpatched dynamic binaries on NixOS",
);

/**
 * A ranger-like flake.lock viewer
 */
export const nix_melt = mkPackage(
  nixRaw`pkgs.nix-melt`,
  "A ranger-like flake.lock viewer",
);

/**
 * Parses output of nix-build to show additional information
 */
export const nix_output_monitor = mkPackage(
  nixRaw`pkgs.nix-output-monitor`,
  "Parses output of nix-build to show additional information",
);

/**
 * nixpkgs development utility
 */
export const nix_pin = mkPackage(
  nixRaw`pkgs.nix-pin`,
  "nixpkgs development utility",
);

/**
 * Collection of miscellaneous plugins for the nix expression language
 */
export const nix_plugins = mkPackage(
  nixRaw`pkgs.nix-plugins`,
  "Collection of miscellaneous plugins for the nix expression language",
);

/**
 * Prefetch any fetcher function call, e.g. package sources
 */
export const nix_prefetch = mkPackage(
  nixRaw`pkgs.nix-prefetch`,
  "Prefetch any fetcher function call, e.g. package sources",
);

/**
 * Script used to obtain source hashes for fetchbzr
 */
export const nix_prefetch_bzr = mkPackage(
  nixRaw`pkgs.nix-prefetch-bzr`,
  "Script used to obtain source hashes for fetchbzr",
);

/**
 * Script used to obtain source hashes for fetchcvs
 */
export const nix_prefetch_cvs = mkPackage(
  nixRaw`pkgs.nix-prefetch-cvs`,
  "Script used to obtain source hashes for fetchcvs",
);

/**
 * Script used to obtain source hashes for dockerTools.pullImage
 */
export const nix_prefetch_docker = mkPackage(
  nixRaw`pkgs.nix-prefetch-docker`,
  "Script used to obtain source hashes for dockerTools.pullImage",
);

/**
 * Script used to obtain source hashes for fetchgit
 */
export const nix_prefetch_git = mkPackage(
  nixRaw`pkgs.nix-prefetch-git`,
  "Script used to obtain source hashes for fetchgit",
);

/**
 * Prefetch sources from github
 */
export const nix_prefetch_github = mkPackage(
  nixRaw`pkgs.nix-prefetch-github`,
  "Prefetch sources from github",
);

/**
 * Script used to obtain source hashes for fetchhg
 */
export const nix_prefetch_hg = mkPackage(
  nixRaw`pkgs.nix-prefetch-hg`,
  "Script used to obtain source hashes for fetchhg",
);

/**
 * Collection of all the nix-prefetch-* scripts which may be used to obtain source hashes
 */
export const nix_prefetch_scripts = mkPackage(
  nixRaw`pkgs.nix-prefetch-scripts`,
  "Collection of all the nix-prefetch-* scripts which may be used to obtain source hashes",
);

/**
 * Script used to obtain source hashes for fetchsvn
 */
export const nix_prefetch_svn = mkPackage(
  nixRaw`pkgs.nix-prefetch-svn`,
  "Script used to obtain source hashes for fetchsvn",
);

/**
 * GTK viewer for the output of `nix store --query --tree`
 */
export const nix_query_tree_viewer = mkPackage(
  nixRaw`pkgs.nix-query-tree-viewer`,
  "GTK viewer for the output of `nix store --query --tree`",
);

/**
 * A shebang for running inside nix-shell
 */
export const nix_script = mkPackage(
  nixRaw`pkgs.nix-script`,
  "A shebang for running inside nix-shell",
);

/**
 * A utility for sharing a Nix store as a binary cache
 */
export const nix_serve = mkPackage(
  nixRaw`pkgs.nix-serve`,
  "A utility for sharing a Nix store as a binary cache",
);

/**
 * Deploy software or an entire NixOS system configuration to another NixOS system
 */
export const nix_simple_deploy = mkPackage(
  nixRaw`pkgs.nix-simple-deploy`,
  "Deploy software or an entire NixOS system configuration to another NixOS system",
);

/**
 * A HTTP nix store that proxies requests to Google Storage
 */
export const nix_store_gcs_proxy = mkPackage(
  nixRaw`pkgs.nix-store-gcs-proxy`,
  "A HTTP nix store that proxies requests to Google Storage",
);

/**
 * Make creating nix expressions easy
 */
export const nix_template = mkPackage(
  nixRaw`pkgs.nix-template`,
  "Make creating nix expressions easy",
);

/**
 * Create templates of nix expressions from RPM .spec files
 */
export const nix_template_rpm = mkPackage(
  nixRaw`pkgs.nix-template-rpm`,
  "Create templates of nix expressions from RPM .spec files",
);

/**
 * Tracks what nix is building
 */
export const nix_top = mkPackage(
  nixRaw`pkgs.nix-top`,
  "Tracks what nix is building",
);

/**
 * 'the tour of nix' from nixcloud.io/tour as offline version
 */
export const nix_tour = mkPackage(
  nixRaw`pkgs.nix-tour`,
  "'the tour of nix' from nixcloud.io/tour as offline version",
);

/**
 * Interactively browse a Nix store paths dependencies
 */
export const nix_tree = mkPackage(
  nixRaw`pkgs.nix-tree`,
  "Interactively browse a Nix store paths dependencies",
);

/**
 * Uses nixpkgs fetchers to figure out hashes
 */
export const nix_universal_prefetch = mkPackage(
  nixRaw`pkgs.nix-universal-prefetch`,
  "Uses nixpkgs fetchers to figure out hashes",
);

/**
 * Swiss-knife for updating nix packages
 */
export const nix_update = mkPackage(
  nixRaw`pkgs.nix-update`,
  "Swiss-knife for updating nix packages",
);

/**
 * Utility to automate updating of nix derivation sources
 */
export const nix_update_source = mkPackage(
  nixRaw`pkgs.nix-update-source`,
  "Utility to automate updating of nix derivation sources",
);

/**
 * A `nix` and `nix-shell` wrapper for shells other than `bash`
 */
export const nix_your_shell = mkPackage(
  nixRaw`pkgs.nix-your-shell`,
  "A `nix` and `nix-shell` wrapper for shells other than `bash`",
);

/**
 * ZSH completions for Nix, NixOS, and NixOps
 */
export const nix_zsh_completions = mkPackage(
  nixRaw`pkgs.nix-zsh-completions`,
  "ZSH completions for Nix, NixOS, and NixOps",
);

/**
 * A special shebang to run scripts in a nix-shell
 */
export const nixbang = mkPackage(
  nixRaw`pkgs.nixbang`,
  "A special shebang to run scripts in a nix-shell",
);

/**
 * Define and build CI for Nix projects anywhere
 */
export const nixci = mkPackage(
  nixRaw`pkgs.nixci`,
  "Define and build CI for Nix projects anywhere",
);

/**
 * Nix language server
 */
export const nixd = mkPackage(
  nixRaw`pkgs.nixd`,
  "Nix language server",
);

/**
 * Generate documentation for Nix functions
 */
export const nixdoc = mkPackage(
  nixRaw`pkgs.nixdoc`,
  "Generate documentation for Nix functions",
);

/**
 * Lexer, Parser, Abstract Syntax Tree and Concrete Syntax Tree for the Nix Expressions Language
 */
export const nixel = mkPackage(
  nixRaw`pkgs.nixel`,
  "Lexer, Parser, Abstract Syntax Tree and Concrete Syntax Tree for the Nix Expressions Language",
);

/**
 * An opinionated formatter for Nix
 */
export const nixfmt = mkPackage(
  nixRaw`pkgs.nixfmt`,
  "An opinionated formatter for Nix",
);

/**
 * An unofficial client of Evernote
 */
export const nixnote2 = mkPackage(
  nixRaw`pkgs.nixnote2`,
  "An unofficial client of Evernote",
);

/**
 * DNS server for resolving NixOps machines
 */
export const nixops_dns = mkPackage(
  nixRaw`pkgs.nixops-dns`,
  "DNS server for resolving NixOps machines",
);

/**
 * NixOS cloud provisioning and deployment tool
 */
export const nixops_unstable = mkPackage(
  nixRaw`pkgs.nixops_unstable`,
  "NixOS cloud provisioning and deployment tool",
);

/**
 * Install nixos everywhere via ssh
 */
export const nixos_anywhere = mkPackage(
  nixRaw`pkgs.nixos-anywhere`,
  "Install nixos everywhere via ssh",
);

/**
 * BGRT theme with a spinning NixOS logo
 */
export const nixos_bgrt_plymouth = mkPackage(
  nixRaw`pkgs.nixos-bgrt-plymouth`,
  "BGRT theme with a spinning NixOS logo",
);

export const nixos_container = mkPackage(
  nixRaw`pkgs.nixos-container`,
  "",
);

/**
 * Collection of image builders
 */
export const nixos_generators = mkPackage(
  nixRaw`pkgs.nixos-generators`,
  "Collection of image builders",
);

export const nixos_grub2_theme = mkPackage(
  nixRaw`pkgs.nixos-grub2-theme`,
  "",
);

export const nixos_icons = mkPackage(
  nixRaw`pkgs.nixos-icons`,
  "",
);

/**
 * The essential commands from the NixOS installer as a package
 */
export const nixos_install_tools = mkPackage(
  nixRaw`pkgs.nixos-install-tools`,
  "The essential commands from the NixOS installer as a package",
);

export const nixos_option = mkPackage(
  nixRaw`pkgs.nixos-option`,
  "",
);

/**
 * Rebuild your NixOS configuration and switch to it, on local hosts and remote.
 */
export const nixos_rebuild = mkPackage(
  nixRaw`pkgs.nixos-rebuild`,
  "Rebuild your NixOS configuration and switch to it, on local hosts and remote.",
);

/**
 * Renderer for NixOS manual and option docs
 */
export const nixos_render_docs = mkPackage(
  nixRaw`pkgs.nixos-render-docs`,
  "Renderer for NixOS manual and option docs",
);

/**
 * Spawns lightweight nixos vms in a shell
 */
export const nixos_shell = mkPackage(
  nixRaw`pkgs.nixos-shell`,
  "Spawns lightweight nixos vms in a shell",
);

/**
 * App source + Nix packages + Docker = Image Resources
 */
export const nixpacks = mkPackage(
  nixRaw`pkgs.nixpacks`,
  "App source + Nix packages + Docker = Image Resources",
);

/**
 * Nix code formatter for nixpkgs
 */
export const nixpkgs_fmt = mkPackage(
  nixRaw`pkgs.nixpkgs-fmt`,
  "Nix code formatter for nixpkgs",
);

/**
 * A set of nit-picky rules that aim to point out and explain common mistakes in nixpkgs package pull requests
 */
export const nixpkgs_hammering = mkPackage(
  nixRaw`pkgs.nixpkgs-hammering`,
  "A set of nit-picky rules that aim to point out and explain common mistakes in nixpkgs package pull requests",
);

/**
 * A utility for Nixpkgs contributors to check Nixpkgs for common errors
 */
export const nixpkgs_lint = mkPackage(
  nixRaw`pkgs.nixpkgs-lint`,
  "A utility for Nixpkgs contributors to check Nixpkgs for common errors",
);

/**
 * A fast semantic linter for Nix using tree-sitter
 */
export const nixpkgs_lint_community = mkPackage(
  nixRaw`pkgs.nixpkgs-lint-community`,
  "A fast semantic linter for Nix using tree-sitter",
);

/**
 * Tools for removing the tedious nature of creating nixpkgs derivations
 */
export const nixpkgs_pytools = mkPackage(
  nixRaw`pkgs.nixpkgs-pytools`,
  "Tools for removing the tedious nature of creating nixpkgs derivations",
);

/**
 * Review pull-requests on https://github.com/NixOS/nixpkgs
 */
export const nixpkgs_review = mkPackage(
  nixRaw`pkgs.nixpkgs-review`,
  "Review pull-requests on https://github.com/NixOS/nixpkgs",
);

/**
 * Cross-platform pacman-like game
 */
export const njam = mkPackage(
  nixRaw`pkgs.njam`,
  "Cross-platform pacman-like game",
);

/**
 * Public-key signature system for NATS
 */
export const nkeys = mkPackage(
  nixRaw`pkgs.nkeys`,
  "Public-key signature system for NATS",
);

/**
 * Tool for converting encoding of Japanese text
 */
export const nkf = mkPackage(
  nixRaw`pkgs.nkf`,
  "Tool for converting encoding of Japanese text",
);

/**
 * Monitors network traffic and bandwidth usage with ncurses graphs
 */
export const nload = mkPackage(
  nixRaw`pkgs.nload`,
  "Monitors network traffic and bandwidth usage with ncurses graphs",
);

/**
 * JSON for Modern C++
 */
export const nlohmann_json = mkPackage(
  nixRaw`pkgs.nlohmann_json`,
  "JSON for Modern C++",
);

/**
 * Implementation of calculation of the hadron jet cross sections
 */
export const nlojet = mkPackage(
  nixRaw`pkgs.nlojet`,
  "Implementation of calculation of the hadron jet cross sections",
);

/**
 * Free open-source library for nonlinear optimization
 */
export const nlopt = mkPackage(
  nixRaw`pkgs.nlopt`,
  "Free open-source library for nonlinear optimization",
);

/**
 * A language server for the Nickel programming language
 */
export const nls = mkPackage(
  nixRaw`pkgs.nls`,
  "A language server for the Nickel programming language",
);

/**
 * Simple Network Manager frontend written in Qt
 */
export const nm_tray = mkPackage(
  nixRaw`pkgs.nm-tray`,
  "Simple Network Manager frontend written in Qt",
);

/**
 * A free and open source utility for network discovery and security auditing
 */
export const nmap = mkPackage(
  nixRaw`pkgs.nmap`,
  "A free and open source utility for network discovery and security auditing",
);

/**
 * Tool that allows you to convert nmap output
 */
export const nmap_formatter = mkPackage(
  nixRaw`pkgs.nmap-formatter`,
  "Tool that allows you to convert nmap output",
);

/**
 * Qt frontend for nmap
 */
export const nmapsi4 = mkPackage(
  nixRaw`pkgs.nmapsi4`,
  "Qt frontend for nmap",
);

/**
 * New MH Mail Handling System
 */
export const nmh = mkPackage(
  nixRaw`pkgs.nmh`,
  "New MH Mail Handling System",
);

/**
 * AIX & Linux Performance Monitoring tool
 */
export const nmon = mkPackage(
  nixRaw`pkgs.nmon`,
  "AIX & Linux Performance Monitoring tool",
);

/**
 * Netgear Unbrick Utility
 */
export const nmrpflash = mkPackage(
  nixRaw`pkgs.nmrpflash`,
  "Netgear Unbrick Utility",
);

        /**
         * A command line tool that recreates the famous data decryption
effect seen in the 1992 movie Sneakers.

         */
export const nms = mkPackage(
  nixRaw`pkgs.nms`,
  "A command line tool that recreates the famous data decryption\neffect seen in the 1992 movie Sneakers.\n",
);

/**
 * Secure UUCP-like store-and-forward exchanging
 */
export const nncp = mkPackage(
  nixRaw`pkgs.nncp`,
  "Secure UUCP-like store-and-forward exchanging",
);

/**
 * Nanomsg next generation
 */
export const nng = mkPackage(
  nixRaw`pkgs.nng`,
  "Nanomsg next generation",
);

/**
 * Small ncurses-based file browser forked from noice
 */
export const nnn = mkPackage(
  nixRaw`pkgs.nnn`,
  "Small ncurses-based file browser forked from noice",
);

/**
 * An open-source machine learning framework for global analyses of parton distributions
 */
export const nnpdf = mkPackage(
  nixRaw`pkgs.nnpdf`,
  "An open-source machine learning framework for global analyses of parton distributions",
);

/**
 * Simple NNTP proxy with SSL support
 */
export const nntp_proxy = mkPackage(
  nixRaw`pkgs.nntp-proxy`,
  "Simple NNTP proxy with SSL support",
);

/**
 * NOAA APT image decoder
 */
export const noaa_apt = mkPackage(
  nixRaw`pkgs.noaa-apt`,
  "NOAA APT image decoder",
);

/**
 * Bash on Ubuntu on macOS
 */
export const noah = mkPackage(
  nixRaw`pkgs.noah`,
  "Bash on Ubuntu on macOS",
);

/**
 * Generate Nix expressions to build NPM packages
 */
export const node2nix = mkPackage(
  nixRaw`pkgs.node2nix`,
  "Generate Nix expressions to build NPM packages",
);

export * as nodePackages from "./nodePackages/mod.ts";

/**
 * A little globber for Node.js
 */
export const node_glob = mkPackage(
  nixRaw`pkgs.node-glob`,
  "A little globber for Node.js",
);

/**
 * Manta Object-Storage Client CLIs and Node.js SDK
 */
export const node_manta = mkPackage(
  nixRaw`pkgs.node-manta`,
  "Manta Object-Storage Client CLIs and Node.js SDK",
);

/**
 * Various problem detectors running on the Kubernetes nodes
 */
export const node_problem_detector = mkPackage(
  nixRaw`pkgs.node-problem-detector`,
  "Various problem detectors running on the Kubernetes nodes",
);

/**
 * The Hunspell binding for NodeJS that exposes as much of Hunspell as possible and also adds new features
 */
export const nodehun = mkPackage(
  nixRaw`pkgs.nodehun`,
  "The Hunspell binding for NodeJS that exposes as much of Hunspell as possible and also adds new features",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs = mkPackage(
  nixRaw`pkgs.nodejs`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_14 = mkPackage(
  nixRaw`pkgs.nodejs_14`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_16 = mkPackage(
  nixRaw`pkgs.nodejs_16`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_18 = mkPackage(
  nixRaw`pkgs.nodejs_18`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_20 = mkPackage(
  nixRaw`pkgs.nodejs_20`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_21 = mkPackage(
  nixRaw`pkgs.nodejs_21`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_latest = mkPackage(
  nixRaw`pkgs.nodejs_latest`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_slim = mkPackage(
  nixRaw`pkgs.nodejs-slim`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_slim_14 = mkPackage(
  nixRaw`pkgs.nodejs-slim_14`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_slim_16 = mkPackage(
  nixRaw`pkgs.nodejs-slim_16`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_slim_18 = mkPackage(
  nixRaw`pkgs.nodejs-slim_18`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_slim_20 = mkPackage(
  nixRaw`pkgs.nodejs-slim_20`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_slim_21 = mkPackage(
  nixRaw`pkgs.nodejs-slim_21`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Event-driven I/O framework for the V8 JavaScript engine
 */
export const nodejs_slim_latest = mkPackage(
  nixRaw`pkgs.nodejs-slim_latest`,
  "Event-driven I/O framework for the V8 JavaScript engine",
);

/**
 * Manage multiple NodeJS versions
 */
export const nodenv = mkPackage(
  nixRaw`pkgs.nodenv`,
  "Manage multiple NodeJS versions",
);

/**
 * Runtime for Python inspired by Node.JS
 */
export const nodepy_runtime = mkPackage(
  nixRaw`pkgs.nodepy-runtime`,
  "Runtime for Python inspired by Node.JS",
);

/**
 * Small ncurses-based file browser
 */
export const noice = mkPackage(
  nixRaw`pkgs.noice`,
  "Small ncurses-based file browser",
);

/**
 * Dynamic DNS daemon for no-ip accounts
 */
export const noip = mkPackage(
  nixRaw`pkgs.noip`,
  "Dynamic DNS daemon for no-ip accounts",
);

/**
 * An lv2 plugin for broadband noise reduction
 */
export const noise_repellent = mkPackage(
  nixRaw`pkgs.noise-repellent`,
  "An lv2 plugin for broadband noise reduction",
);

/**
 * Virtual microphone device with noise supression for PulseAudio
 */
export const noisetorch = mkPackage(
  nixRaw`pkgs.noisetorch`,
  "Virtual microphone device with noise supression for PulseAudio",
);

/**
 * NoMachine remote desktop client (nxplayer)
 */
export const nomachine_client = mkPackage(
  nixRaw`pkgs.nomachine-client`,
  "NoMachine remote desktop client (nxplayer)",
);

/**
 * Qt-based image viewer
 */
export const nomacs = mkPackage(
  nixRaw`pkgs.nomacs`,
  "Qt-based image viewer",
);

/**
 * A Distributed, Highly Available, Datacenter-Aware Scheduler
 */
export const nomad = mkPackage(
  nixRaw`pkgs.nomad`,
  "A Distributed, Highly Available, Datacenter-Aware Scheduler",
);

/**
 * A Distributed, Highly Available, Datacenter-Aware Scheduler
 */
export const nomad_1_4 = mkPackage(
  nixRaw`pkgs.nomad_1_4`,
  "A Distributed, Highly Available, Datacenter-Aware Scheduler",
);

/**
 * A Distributed, Highly Available, Datacenter-Aware Scheduler
 */
export const nomad_1_5 = mkPackage(
  nixRaw`pkgs.nomad_1_5`,
  "A Distributed, Highly Available, Datacenter-Aware Scheduler",
);

/**
 * A Distributed, Highly Available, Datacenter-Aware Scheduler
 */
export const nomad_1_6 = mkPackage(
  nixRaw`pkgs.nomad_1_6`,
  "A Distributed, Highly Available, Datacenter-Aware Scheduler",
);

/**
 * Autoscaling daemon for Nomad
 */
export const nomad_autoscaler = mkPackage(
  nixRaw`pkgs.nomad-autoscaler`,
  "Autoscaling daemon for Nomad",
);

/**
 * Podman task driver for Nomad
 */
export const nomad_driver_podman = mkPackage(
  nixRaw`pkgs.nomad-driver-podman`,
  "Podman task driver for Nomad",
);

/**
 * Nomad Pack is a templating and packaging tool used with HashiCorp Nomad.
 */
export const nomad_pack = mkPackage(
  nixRaw`pkgs.nomad-pack`,
  "Nomad Pack is a templating and packaging tool used with HashiCorp Nomad.",
);

/**
 * Search engine for OpenStreetMap data
 */
export const nominatim = mkPackage(
  nixRaw`pkgs.nominatim`,
  "Search engine for OpenStreetMap data",
);

/**
 * Batch rename utility for developers
 */
export const nomino = mkPackage(
  nixRaw`pkgs.nomino`,
  "Batch rename utility for developers",
);

/**
 * Lightweight and lightning fast modular Digital Audio Workstation
 */
export const non = mkPackage(
  nixRaw`pkgs.non`,
  "Lightweight and lightning fast modular Digital Audio Workstation",
);

/**
 * Application for practicing playing musical scores and ear training
 */
export const nootka = mkPackage(
  nixRaw`pkgs.nootka`,
  "Application for practicing playing musical scores and ear training",
);

/**
 * Gtk and KDE themes using the Nord color pallete
 */
export const nordic = mkPackage(
  nixRaw`pkgs.nordic`,
  "Gtk and KDE themes using the Nord color pallete",
);

/**
 * Cursor theme using the Nord color palette and based on Vimix and cz-Viator
 */
export const nordzy_cursor_theme = mkPackage(
  nixRaw`pkgs.nordzy-cursor-theme`,
  "Cursor theme using the Nord color palette and based on Vimix and cz-Viator",
);

/**
 * Icon theme using the Nord color palette, based on WhiteSur and Numix icon themes
 */
export const nordzy_icon_theme = mkPackage(
  nixRaw`pkgs.nordzy-icon-theme`,
  "Icon theme using the Nord color palette, based on WhiteSur and Numix icon themes",
);

/**
 * Audio file normalizer
 */
export const normalize = mkPackage(
  nixRaw`pkgs.normalize`,
  "Audio file normalizer",
);

/**
 * OCR powered screen-capture tool to capture information instead of images
 */
export const normcap = mkPackage(
  nixRaw`pkgs.normcap`,
  "OCR powered screen-capture tool to capture information instead of images",
);

/**
 * Open source norminette to apply 42's norme to C files
 */
export const norminette = mkPackage(
  nixRaw`pkgs.norminette`,
  "Open source norminette to apply 42's norme to C files",
);

/**
 * A condensed geometric sans serif by Jamie Wilson
 */
export const norwester_font = mkPackage(
  nixRaw`pkgs.norwester-font`,
  "A condensed geometric sans serif by Jamie Wilson",
);

/**
 * Find secrets and sensitive information in textual data
 */
export const noseyparker = mkPackage(
  nixRaw`pkgs.noseyparker`,
  "Find secrets and sensitive information in textual data",
);

/**
 * SONOS controller for Linux (and macOS)
 */
export const noson = mkPackage(
  nixRaw`pkgs.noson`,
  "SONOS controller for Linux (and macOS)",
);

/**
 * NoSql Injection tool for finding vulnerable websites using MongoDB
 */
export const nosqli = mkPackage(
  nixRaw`pkgs.nosqli`,
  "NoSql Injection tool for finding vulnerable websites using MongoDB",
);

/**
 * Nostr relay written in Rust
 */
export const nostr_rs_relay = mkPackage(
  nixRaw`pkgs.nostr-rs-relay`,
  "Nostr relay written in Rust",
);

/**
 * The most beautiful command line calculator
 */
export const nota = mkPackage(
  nixRaw`pkgs.nota`,
  "The most beautiful command line calculator",
);

/**
 * The markdown-based note-taking app that doesn't suck
 */
export const notable = mkPackage(
  nixRaw`pkgs.notable`,
  "The markdown-based note-taking app that doesn't suck",
);

/**
 * A project that allows anyone to have trust over arbitrary collections of data
 */
export const notary = mkPackage(
  nixRaw`pkgs.notary`,
  "A project that allows anyone to have trust over arbitrary collections of data",
);

/**
 * CLI tool to sign and verify OCI artifacts and container images
 */
export const notation = mkPackage(
  nixRaw`pkgs.notation`,
  "CLI tool to sign and verify OCI artifacts and container images",
);

/**
 * Blingful TUIs and character graphics
 */
export const notcurses = mkPackage(
  nixRaw`pkgs.notcurses`,
  "Blingful TUIs and character graphics",
);

/**
 * Stupidly-simple notes app
 */
export const notejot = mkPackage(
  nixRaw`pkgs.notejot`,
  "Stupidly-simple notes app",
);

/**
 * Mirror notes to IMAP
 */
export const notemap = mkPackage(
  nixRaw`pkgs.notemap`,
  "Mirror notes to IMAP",
);

/**
 * A cross-platform, reimplementation of Notepad++
 */
export const notepad_next = mkPackage(
  nixRaw`pkgs.notepad-next`,
  "A cross-platform, reimplementation of Notepad++",
);

/**
 * Notepad++-like editor for the Linux desktop
 */
export const notepadqq = mkPackage(
  nixRaw`pkgs.notepadqq`,
  "Notepad++-like editor for the Linux desktop",
);

/**
 * A fast and beautiful note-taking app
 */
export const notes = mkPackage(
  nixRaw`pkgs.notes`,
  "A fast and beautiful note-taking app",
);

/**
 * Markdown notes editor and manager designed for elementary OS
 */
export const notes_up = mkPackage(
  nixRaw`pkgs.notes-up`,
  "Markdown notes editor and manager designed for elementary OS",
);

/**
 * Convert scans of handwritten notes to beautiful, compact PDFs
 */
export const noteshrink = mkPackage(
  nixRaw`pkgs.noteshrink`,
  "Convert scans of handwritten notes to beautiful, compact PDFs",
);

/**
 * A fully open source & end-to-end encrypted note taking alternative to Evernote.
 */
export const notesnook = mkPackage(
  nixRaw`pkgs.notesnook`,
  "A fully open source & end-to-end encrypted note taking alternative to Evernote.",
);

/**
 * Monitor a process and trigger a notification
 */
export const noti = mkPackage(
  nixRaw`pkgs.noti`,
  "Monitor a process and trigger a notification",
);

/**
 * Notify allows sending the output from any tool to Slack, Discord and Telegram
 */
export const notify = mkPackage(
  nixRaw`pkgs.notify`,
  "Notify allows sending the output from any tool to Slack, Discord and Telegram",
);

/**
 * Little application that lets you send desktop notifications with one command
 */
export const notify_desktop = mkPackage(
  nixRaw`pkgs.notify-desktop`,
  "Little application that lets you send desktop notifications with one command",
);

/**
 * Daemon that displays passive pop-up notifications
 */
export const notify_osd = mkPackage(
  nixRaw`pkgs.notify-osd`,
  "Daemon that displays passive pop-up notifications",
);

/**
 * Daemon that displays passive pop-up notifications
 */
export const notify_osd_customizable = mkPackage(
  nixRaw`pkgs.notify-osd-customizable`,
  "Daemon that displays passive pop-up notifications",
);

/**
 * D-Bus for .NET
 */
export const notify_sharp = mkPackage(
  nixRaw`pkgs.notify-sharp`,
  "D-Bus for .NET",
);

/**
 * Display desktop notifications for unread mail in a notmuch database
 */
export const notifymuch = mkPackage(
  nixRaw`pkgs.notifymuch`,
  "Display desktop notifications for unread mail in a notmuch database",
);

/**
 * Tiling tabbed window manager
 */
export const notion = mkPackage(
  nixRaw`pkgs.notion`,
  "Tiling tabbed window manager",
);

/**
 * Notion Desktop builds with Notion Enhancer for Windows, MacOS and Linux.
 */
export const notion_app_enhanced = mkPackage(
  nixRaw`pkgs.notion-app-enhanced`,
  "Notion Desktop builds with Notion Enhancer for Windows, MacOS and Linux.",
);

/**
 * Mail indexer
 */
export const notmuch = mkPackage(
  nixRaw`pkgs.notmuch`,
  "Mail indexer",
);

/**
 * Address lookup tool for Notmuch in C
 */
export const notmuch_addrlookup = mkPackage(
  nixRaw`pkgs.notmuch-addrlookup`,
  "Address lookup tool for Notmuch in C",
);

/**
 * A curses terminal client for the Notmuch email system
 */
export const notmuch_bower = mkPackage(
  nixRaw`pkgs.notmuch-bower`,
  "A curses terminal client for the Notmuch email system",
);

/**
 * Application to assign notmuch tagged mails to IMAP folders
 */
export const notmuch_mailmover = mkPackage(
  nixRaw`pkgs.notmuch-mailmover`,
  "Application to assign notmuch tagged mails to IMAP folders",
);

/**
 * Mutt support for notmuch
 */
export const notmuch_mutt = mkPackage(
  nixRaw`pkgs.notmuch-mutt`,
  "Mutt support for notmuch",
);

/**
 * Beautiful and free fonts for many languages
 */
export const noto_fonts = mkPackage(
  nixRaw`pkgs.noto-fonts`,
  "Beautiful and free fonts for many languages",
);

/**
 * Beautiful and free fonts for CJK languages
 */
export const noto_fonts_cjk_sans = mkPackage(
  nixRaw`pkgs.noto-fonts-cjk-sans`,
  "Beautiful and free fonts for CJK languages",
);

/**
 * Beautiful and free fonts for CJK languages
 */
export const noto_fonts_cjk_serif = mkPackage(
  nixRaw`pkgs.noto-fonts-cjk-serif`,
  "Beautiful and free fonts for CJK languages",
);

/**
 * Color emoji font
 */
export const noto_fonts_color_emoji = mkPackage(
  nixRaw`pkgs.noto-fonts-color-emoji`,
  "Color emoji font",
);

/**
 * Noto Emoji with extended Blob support
 */
export const noto_fonts_emoji_blob_bin = mkPackage(
  nixRaw`pkgs.noto-fonts-emoji-blob-bin`,
  "Noto Emoji with extended Blob support",
);

/**
 * Beautiful and free fonts for many languages
 */
export const noto_fonts_lgc_plus = mkPackage(
  nixRaw`pkgs.noto-fonts-lgc-plus`,
  "Beautiful and free fonts for many languages",
);

/**
 * Monochrome emoji font
 */
export const noto_fonts_monochrome_emoji = mkPackage(
  nixRaw`pkgs.noto-fonts-monochrome-emoji`,
  "Monochrome emoji font",
);

/**
 * Helper to create results from local security checks
 */
export const notus_scanner = mkPackage(
  nixRaw`pkgs.notus-scanner`,
  "Helper to create results from local security checks",
);

/**
 * Find outdated or deprecated Helm charts running in your cluster
 */
export const nova = mkPackage(
  nixRaw`pkgs.nova`,
  "Find outdated or deprecated Helm charts running in your cluster",
);

/**
 * LADSPA plugins based on filters of nova
 */
export const nova_filters = mkPackage(
  nixRaw`pkgs.nova-filters`,
  "LADSPA plugins based on filters of nova",
);

/**
 * VNC client web application
 */
export const novnc = mkPackage(
  nixRaw`pkgs.novnc`,
  "VNC client web application",
);

/**
 * A simple, extensible literate-programming tool
 */
export const noweb = mkPackage(
  nixRaw`pkgs.noweb`,
  "A simple, extensible literate-programming tool",
);

/**
 * Tools to make nix nicer to use
 */
export const nox = mkPackage(
  nixRaw`pkgs.nox`,
  "Tools to make nix nicer to use",
);

/**
 * A PC-9801 series emulator
 */
export const np2kai = mkPackage(
  nixRaw`pkgs.np2kai`,
  "A PC-9801 series emulator",
);

/**
 * A bundle of NPAPI headers by Mozilla
 */
export const npapi_sdk = mkPackage(
  nixRaw`pkgs.npapi_sdk`,
  "A bundle of NPAPI headers by Mozilla",
);

/**
 * An interpreter for piet programs. Also includes npietedit and npiet-foogol
 */
export const npiet = mkPackage(
  nixRaw`pkgs.npiet`,
  "An interpreter for piet programs. Also includes npietedit and npiet-foogol",
);

/**
 * Simple and convenient dependency pinning for Nix
 */
export const npins = mkPackage(
  nixRaw`pkgs.npins`,
  "Simple and convenient dependency pinning for Nix",
);

/**
 * Check for outdated, incorrect, and unused dependencies
 */
export const npm_check = mkPackage(
  nixRaw`pkgs.npm-check`,
  "Check for outdated, incorrect, and unused dependencies",
);

/**
 * Find newer versions of package dependencies than what your package.json allows
 */
export const npm_check_updates = mkPackage(
  nixRaw`pkgs.npm-check-updates`,
  "Find newer versions of package dependencies than what your package.json allows",
);

/**
 * The New GNU Portable Threads Library
 */
export const npth = mkPackage(
  nixRaw`pkgs.npth`,
  "The New GNU Portable Threads Library",
);

/**
 * A Sokoban-like game
 */
export const npush = mkPackage(
  nixRaw`pkgs.npush`,
  "A Sokoban-like game",
);

/**
 * Unix command line queue utility
 */
export const nq = mkPackage(
  nixRaw`pkgs.nq`,
  "Unix command line queue utility",
);

/**
 * A programming language for several LEGO MINDSTORMS products including the RCX, CyberMaster, and Scout
 */
export const nqc = mkPackage(
  nixRaw`pkgs.nqc`,
  "A programming language for several LEGO MINDSTORMS products including the RCX, CyberMaster, and Scout",
);

/**
 * Not Quite Perl -- a lightweight Raku-like environment for virtual machines
 */
export const nqp = mkPackage(
  nixRaw`pkgs.nqp`,
  "Not Quite Perl -- a lightweight Raku-like environment for virtual machines",
);

/**
 * Daemon and companion application to Shairport Sync that monitors timing data from any PTP clocks
 */
export const nqptp = mkPackage(
  nixRaw`pkgs.nqptp`,
  "Daemon and companion application to Shairport Sync that monitors timing data from any PTP clocks",
);

/**
 * Nordic Semiconductor nRF5 Software Development Kit
 */
export const nrf5_sdk = mkPackage(
  nixRaw`pkgs.nrf5-sdk`,
  "Nordic Semiconductor nRF5 Software Development Kit",
);

/**
 * Device Firmware Update tool for nRF chips
 */
export const nrfutil = mkPackage(
  nixRaw`pkgs.nrfutil`,
  "Device Firmware Update tool for nRF chips",
);

/**
 * A linux utils for converting CD (or DVD) image generated by Nero Burning Rom to ISO format
 */
export const nrg2iso = mkPackage(
  nixRaw`pkgs.nrg2iso`,
  "A linux utils for converting CD (or DVD) image generated by Nero Burning Rom to ISO format",
);

/**
 * REPL for the Nim programming language
 */
export const nrpl = mkPackage(
  nixRaw`pkgs.nrpl`,
  "REPL for the Nim programming language",
);

/**
 * HD-Radio decoder for RTL-SDR
 */
export const nrsc5 = mkPackage(
  nixRaw`pkgs.nrsc5`,
  "HD-Radio decoder for RTL-SDR",
);

/**
 * A discrete time event network simulator
 */
export const ns_3 = mkPackage(
  nixRaw`pkgs.ns-3`,
  "A discrete time event network simulator",
);

/**
 * All-in-one tool for managing Nintendo Switch homebrew
 */
export const ns_usbloader = mkPackage(
  nixRaw`pkgs.ns-usbloader`,
  "All-in-one tool for managing Nintendo Switch homebrew",
);

/**
 * A tool for creating NATS account and user access configurations
 */
export const nsc = mkPackage(
  nixRaw`pkgs.nsc`,
  "A tool for creating NATS account and user access configurations",
);

/**
 * Authoritative only, high performance, simple and open source name server
 */
export const nsd = mkPackage(
  nixRaw`pkgs.nsd`,
  "Authoritative only, high performance, simple and open source name server",
);

/**
 * A command-line shell like fish, but POSIX compatible
 */
export const nsh = mkPackage(
  nixRaw`pkgs.nsh`,
  "A command-line shell like fish, but POSIX compatible",
);

/**
 * A free scriptable win32 installer/uninstaller system that doesn't suck and isn't huge
 */
export const nsis = mkPackage(
  nixRaw`pkgs.nsis`,
  "A free scriptable win32 installer/uninstaller system that doesn't suck and isn't huge",
);

/**
 * A light-weight process isolation tool, making use of Linux namespaces and seccomp-bpf syscall filters
 */
export const nsjail = mkPackage(
  nixRaw`pkgs.nsjail`,
  "A light-weight process isolation tool, making use of Linux namespaces and seccomp-bpf syscall filters",
);

/**
 * ncurses based snake game for the terminal
 */
export const nsnake = mkPackage(
  nixRaw`pkgs.nsnake`,
  "ncurses based snake game for the terminal",
);

/**
 * the name service non-caching daemon
 */
export const nsncd = mkPackage(
  nixRaw`pkgs.nsncd`,
  "the name service non-caching daemon",
);

/**
 * Netscape Portable Runtime, a platform-neutral API for system-level and libc-like functions
 */
export const nspr = mkPackage(
  nixRaw`pkgs.nspr`,
  "Netscape Portable Runtime, a platform-neutral API for system-level and libc-like functions",
);

/**
 * A realtime distributed messaging platform
 */
export const nsq = mkPackage(
  nixRaw`pkgs.nsq`,
  "A realtime distributed messaging platform",
);

/**
 * A set of libraries for development of security-enabled client and server applications
 */
export const nss = mkPackage(
  nixRaw`pkgs.nss`,
  "A set of libraries for development of security-enabled client and server applications",
);

/**
 * A set of libraries for development of security-enabled client and server applications
 */
export const nssTools = mkPackage(
  nixRaw`pkgs.nssTools`,
  "A set of libraries for development of security-enabled client and server applications",
);

/**
 * A set of libraries for development of security-enabled client and server applications
 */
export const nss_esr = mkPackage(
  nixRaw`pkgs.nss_esr`,
  "A set of libraries for development of security-enabled client and server applications",
);

/**
 * A set of libraries for development of security-enabled client and server applications
 */
export const nss_latest = mkPackage(
  nixRaw`pkgs.nss_latest`,
  "A set of libraries for development of security-enabled client and server applications",
);

/**
 * LDAP module for the Solaris Nameservice Switch (NSS)
 */
export const nss_ldap = mkPackage(
  nixRaw`pkgs.nss_ldap`,
  "LDAP module for the Solaris Nameservice Switch (NSS)",
);

/**
 * LDAP identity and authentication for NSS/PAM
 */
export const nss_pam_ldapd = mkPackage(
  nixRaw`pkgs.nss_pam_ldapd`,
  "LDAP identity and authentication for NSS/PAM",
);

/**
 * A wrapper for the user, group and hosts NSS API
 */
export const nss_wrapper = mkPackage(
  nixRaw`pkgs.nss_wrapper`,
  "A wrapper for the user, group and hosts NSS API",
);

/**
 * The mDNS Name Service Switch (NSS) plug-in
 */
export const nssmdns = mkPackage(
  nixRaw`pkgs.nssmdns`,
  "The mDNS Name Service Switch (NSS) plug-in",
);

/**
 * An implementation of a subset of the pwd.h, group.h and shadow.h family of functions.
 */
export const nsss = mkPackage(
  nixRaw`pkgs.nsss`,
  "An implementation of a subset of the pwd.h, group.h and shadow.h family of functions.",
);

/**
 * New Suckless X Image Viewer
 */
export const nsxiv = mkPackage(
  nixRaw`pkgs.nsxiv`,
  "New Suckless X Image Viewer",
);

/**
 * C library that exports various synchronization primitives
 */
export const nsync = mkPackage(
  nixRaw`pkgs.nsync`,
  "C library that exports various synchronization primitives",
);

/**
 * Homebrew compatible NSP/XCI compressor/decompressor
 */
export const nsz = mkPackage(
  nixRaw`pkgs.nsz`,
  "Homebrew compatible NSP/XCI compressor/decompressor",
);

/**
 * A tiny TLS 1.2 only implementation
 */
export const ntbtls = mkPackage(
  nixRaw`pkgs.ntbtls`,
  "A tiny TLS 1.2 only implementation",
);

/**
 * FUSE-based NTFS driver with full write support
 */
export const ntfs3g = mkPackage(
  nixRaw`pkgs.ntfs3g`,
  "FUSE-based NTFS driver with full write support",
);

/**
 * FUSE-based NTFS driver with full write support
 */
export const ntfsprogs = mkPackage(
  nixRaw`pkgs.ntfsprogs`,
  "FUSE-based NTFS driver with full write support",
);

/**
 * A utility for sending notifications, on demand and when commands finish
 */
export const ntfy = mkPackage(
  nixRaw`pkgs.ntfy`,
  "A utility for sending notifications, on demand and when commands finish",
);

/**
 * Send push notifications to your phone or desktop via PUT/POST
 */
export const ntfy_sh = mkPackage(
  nixRaw`pkgs.ntfy-sh`,
  "Send push notifications to your phone or desktop via PUT/POST",
);

/**
 * Module and CLI for the identification of hashes
 */
export const nth = mkPackage(
  nixRaw`pkgs.nth`,
  "Module and CLI for the identification of hashes",
);

/**
 * Transport-independent RPC (TI-RPC)
 */
export const ntirpc = mkPackage(
  nixRaw`pkgs.ntirpc`,
  "Transport-independent RPC (TI-RPC)",
);

/**
 * Fork of FLTK 1.3.0 with additional functionality
 */
export const ntk = mkPackage(
  nixRaw`pkgs.ntk`,
  "Fork of FLTK 1.3.0 with additional functionality",
);

/**
 * A Library for doing Number Theory
 */
export const ntl = mkPackage(
  nixRaw`pkgs.ntl`,
  "A Library for doing Number Theory",
);

/**
 * Information enumerator for NTLM authentication enabled web endpoints
 */
export const ntlmrecon = mkPackage(
  nixRaw`pkgs.ntlmrecon`,
  "Information enumerator for NTLM authentication enabled web endpoints",
);

/**
 * High-speed web-based traffic analysis and flow collection tool
 */
export const ntopng = mkPackage(
  nixRaw`pkgs.ntopng`,
  "High-speed web-based traffic analysis and flow collection tool",
);

/**
 * An implementation of the Network Time Protocol
 */
export const ntp = mkPackage(
  nixRaw`pkgs.ntp`,
  "An implementation of the Network Time Protocol",
);

/**
 * A full-featured implementation of the Network Time Protocol
 */
export const ntpd_rs = mkPackage(
  nixRaw`pkgs.ntpd-rs`,
  "A full-featured implementation of the Network Time Protocol",
);

/**
 * New test TCP program
 */
export const nttcp = mkPackage(
  nixRaw`pkgs.nttcp`,
  "New test TCP program",
);

/**
 * A Linux network throughput multiple-thread benchmark tool
 */
export const ntttcp = mkPackage(
  nixRaw`pkgs.ntttcp`,
  "A Linux network throughput multiple-thread benchmark tool",
);

/**
 * Symbolic model checker for analysis of finite and infinite state systems
 */
export const nuXmv = mkPackage(
  nixRaw`pkgs.nuXmv`,
  "Symbolic model checker for analysis of finite and infinite state systems",
);

/**
 * A place to share Nushell scripts with each other
 */
export const nu_scripts = mkPackage(
  nixRaw`pkgs.nu_scripts`,
  "A place to share Nushell scripts with each other",
);

/**
 * Streaming music player that finds free music for you
 */
export const nuclear = mkPackage(
  nixRaw`pkgs.nuclear`,
  "Streaming music player that finds free music for you",
);

/**
 * Tool for configurable targeted scanning
 */
export const nuclei = mkPackage(
  nixRaw`pkgs.nuclei`,
  "Tool for configurable targeted scanning",
);

/**
 * An ncurses based sudoku game
 */
export const nudoku = mkPackage(
  nixRaw`pkgs.nudoku`,
  "An ncurses based sudoku game",
);

/**
 * Utility to read and manipulate raw images from digital cameras
 */
export const nufraw = mkPackage(
  nixRaw`pkgs.nufraw`,
  "Utility to read and manipulate raw images from digital cameras",
);

/**
 * Utility to read and manipulate raw images from digital cameras
 */
export const nufraw_thumbnailer = mkPackage(
  nixRaw`pkgs.nufraw-thumbnailer`,
  "Utility to read and manipulate raw images from digital cameras",
);

/**
 * A package manager for the .NET platform
 */
export const nuget = mkPackage(
  nixRaw`pkgs.nuget`,
  "A package manager for the .NET platform",
);

/**
 * Convert a nuget packages directory to a lockfile for buildDotnetModule
 */
export const nuget_to_nix = mkPackage(
  nixRaw`pkgs.nuget-to-nix`,
  "Convert a nuget packages directory to a lockfile for buildDotnetModule",
);

export const nukeReferences = mkPackage(
  nixRaw`pkgs.nukeReferences`,
  "",
);

/**
 * Cycle accurate Mega Drive emulator
 */
export const nuked_md = mkPackage(
  nixRaw`pkgs.nuked-md`,
  "Cycle accurate Mega Drive emulator",
);

/**
 * Simple identd that just replies with a random string or customized userid
 */
export const nullidentdmod = mkPackage(
  nixRaw`pkgs.nullidentdmod`,
  "Simple identd that just replies with a random string or customized userid",
);

        /**
         * A sendmail/qmail/etc replacement MTA for hosts which relay to a fixed set of smart relays.
It is designed to be simple to configure, secure, and easily extendable.

         */
export const nullmailer = mkPackage(
  nixRaw`pkgs.nullmailer`,
  "A sendmail/qmail/etc replacement MTA for hosts which relay to a fixed set of smart relays.\nIt is designed to be simple to configure, secure, and easily extendable.\n",
);

/**
 * Programs for dealing with numbers from the command line
 */
export const num_utils = mkPackage(
  nixRaw`pkgs.num-utils`,
  "Programs for dealing with numbers from the command line",
);

/**
 * Library and tools for non-uniform memory access (NUMA) machines
 */
export const numactl = mkPackage(
  nixRaw`pkgs.numactl`,
  "Library and tools for non-uniform memory access (NUMA) machines",
);

/**
 * A user-level daemon that monitors NUMA topology and processes resource consumption to facilitate good NUMA resource access
 */
export const numad = mkPackage(
  nixRaw`pkgs.numad`,
  "A user-level daemon that monitors NUMA topology and processes resource consumption to facilitate good NUMA resource access",
);

/**
 * Tool for runtime memory locality characterization and analysis of processes and threads on a NUMA system
 */
export const numatop = mkPackage(
  nixRaw`pkgs.numatop`,
  "Tool for runtime memory locality characterization and analysis of processes and threads on a NUMA system",
);

/**
 * TOTP Authentication application for mobile
 */
export const numberstation = mkPackage(
  nixRaw`pkgs.numberstation`,
  "TOTP Authentication application for mobile",
);

/**
 * A Templatized Header Only C++ Implementation of the Python NumPy Library
 */
export const numcpp = mkPackage(
  nixRaw`pkgs.numcpp`,
  "A Templatized Header Only C++ Implementation of the Python NumPy Library",
);

        /**
         * A little program that can be used to compare putatively similar files
line by line and field by field, ignoring small numeric differences
or/and different numeric formats

         */
export const numdiff = mkPackage(
  nixRaw`pkgs.numdiff`,
  "A little program that can be used to compare putatively similar files\nline by line and field by field, ignoring small numeric differences\nor/and different numeric formats\n",
);

/**
 * Numix cursor theme
 */
export const numix_cursor_theme = mkPackage(
  nixRaw`pkgs.numix-cursor-theme`,
  "Numix cursor theme",
);

/**
 * Modern flat theme with a combination of light and dark elements (GNOME, Unity, Xfce and Openbox)
 */
export const numix_gtk_theme = mkPackage(
  nixRaw`pkgs.numix-gtk-theme`,
  "Modern flat theme with a combination of light and dark elements (GNOME, Unity, Xfce and Openbox)",
);

/**
 * Numix icon theme
 */
export const numix_icon_theme = mkPackage(
  nixRaw`pkgs.numix-icon-theme`,
  "Numix icon theme",
);

/**
 * Numix icon theme (circle version)
 */
export const numix_icon_theme_circle = mkPackage(
  nixRaw`pkgs.numix-icon-theme-circle`,
  "Numix icon theme (circle version)",
);

/**
 * Numix icon theme (square version)
 */
export const numix_icon_theme_square = mkPackage(
  nixRaw`pkgs.numix-icon-theme-square`,
  "Numix icon theme (square version)",
);

/**
 * Solarized versions of Numix GTK2 and GTK3 theme
 */
export const numix_solarized_gtk_theme = mkPackage(
  nixRaw`pkgs.numix-solarized-gtk-theme`,
  "Solarized versions of Numix GTK2 and GTK3 theme",
);

/**
 * Gray variation of Numix theme
 */
export const numix_sx_gtk_theme = mkPackage(
  nixRaw`pkgs.numix-sx-gtk-theme`,
  "Gray variation of Numix theme",
);

/**
 * Allows to start X with NumLock turned on
 */
export const numlockx = mkPackage(
  nixRaw`pkgs.numlockx`,
  "Allows to start X with NumLock turned on",
);

/**
 * Simulator for Epsilon, a High-performance graphing calculator operating system
 */
export const numworks_epsilon = mkPackage(
  nixRaw`pkgs.numworks-epsilon`,
  "Simulator for Epsilon, a High-performance graphing calculator operating system",
);

/**
 * Udev rules for Numworks calculators
 */
export const numworks_udev_rules = mkPackage(
  nixRaw`pkgs.numworks-udev-rules`,
  "Udev rules for Numworks calculators",
);

/**
 * C++ implementation of Raft core logic as a replication library
 */
export const nuraft = mkPackage(
  nixRaw`pkgs.nuraft`,
  "C++ implementation of Raft core logic as a replication library",
);

/**
 * Command-line tool to generate Nix fetcher calls from repository URLs
 */
export const nurl = mkPackage(
  nixRaw`pkgs.nurl`,
  "Command-line tool to generate Nix fetcher calls from repository URLs",
);

/**
 * A modern shell written in Rust
 */
export const nushell = mkPackage(
  nixRaw`pkgs.nushell`,
  "A modern shell written in Rust",
);

/**
 * A modern shell written in Rust
 */
export const nushellFull = mkPackage(
  nixRaw`pkgs.nushellFull`,
  "A modern shell written in Rust",
);

/**
 * A new symbolic model checker for the analysis of synchronous finite-state and infinite-state systems
 */
export const nusmv = mkPackage(
  nixRaw`pkgs.nusmv`,
  "A new symbolic model checker for the analysis of synchronous finite-state and infinite-state systems",
);

/**
 * Free and open source C++ spell checking library
 */
export const nuspell = mkPackage(
  nixRaw`pkgs.nuspell`,
  "Free and open source C++ spell checking library",
);

/**
 * Network UPS Tools
 */
export const nut = mkPackage(
  nixRaw`pkgs.nut`,
  "Network UPS Tools",
);

/**
 * Network performance measurement tool
 */
export const nuttcp = mkPackage(
  nixRaw`pkgs.nuttcp`,
  "Network performance measurement tool",
);

/**
 * A simple literate programming tool
 */
export const nuweb = mkPackage(
  nixRaw`pkgs.nuweb`,
  "A simple literate programming tool",
);

/**
 * A wrapper over the nix cli
 */
export const nux = mkPackage(
  nixRaw`pkgs.nux`,
  "A wrapper over the nix cli",
);

/**
 * FFmpeg version of headers for NVENC
 */
export const nv_codec_headers = mkPackage(
  nixRaw`pkgs.nv-codec-headers`,
  "FFmpeg version of headers for NVENC",
);

/**
 * FFmpeg version of headers for NVENC
 */
export const nv_codec_headers_10 = mkPackage(
  nixRaw`pkgs.nv-codec-headers-10`,
  "FFmpeg version of headers for NVENC",
);

/**
 * FFmpeg version of headers for NVENC
 */
export const nv_codec_headers_11 = mkPackage(
  nixRaw`pkgs.nv-codec-headers-11`,
  "FFmpeg version of headers for NVENC",
);

/**
 * FFmpeg version of headers for NVENC
 */
export const nv_codec_headers_12 = mkPackage(
  nixRaw`pkgs.nv-codec-headers-12`,
  "FFmpeg version of headers for NVENC",
);

/**
 * VHDL compiler and simulator
 */
export const nvc = mkPackage(
  nixRaw`pkgs.nvc`,
  "VHDL compiler and simulator",
);

/**
 * New version checker for software
 */
export const nvchecker = mkPackage(
  nixRaw`pkgs.nvchecker`,
  "New version checker for software",
);

/**
 * Nix/NixOS package version diff tool
 */
export const nvd = mkPackage(
  nixRaw`pkgs.nvd`,
  "Nix/NixOS package version diff tool",
);

/**
 * NVidia dynamic fan control for Linux
 */
export const nvfancontrol = mkPackage(
  nixRaw`pkgs.nvfancontrol`,
  "NVidia dynamic fan control for Linux",
);

/**
 * Generate nix sources expr for the latest version of packages
 */
export const nvfetcher = mkPackage(
  nixRaw`pkgs.nvfetcher`,
  "Generate nix sources expr for the latest version of packages",
);

/**
 * The Berkeley Vi Editor
 */
export const nvi = mkPackage(
  nixRaw`pkgs.nvi`,
  "The Berkeley Vi Editor",
);

export const nvidia_cg_toolkit = mkPackage(
  nixRaw`pkgs.nvidia_cg_toolkit`,
  "",
);

export const nvidia_docker = mkPackage(
  nixRaw`pkgs.nvidia-docker`,
  "",
);

/**
 * Nvidia optical flow headers for computing the relative motion of pixels between images
 */
export const nvidia_optical_flow_sdk = mkPackage(
  nixRaw`pkgs.nvidia-optical-flow-sdk`,
  "Nvidia optical flow headers for computing the relative motion of pixels between images",
);

export const nvidia_podman = mkPackage(
  nixRaw`pkgs.nvidia-podman`,
  "",
);

/**
 * Task Manager for Linux for NVIDIA graphics cards
 */
export const nvidia_system_monitor_qt = mkPackage(
  nixRaw`pkgs.nvidia-system-monitor-qt`,
  "Task Manager for Linux for NVIDIA graphics cards",
);

/**
 * A set of cuda-enabled texture tools and compressors
 */
export const nvidia_texture_tools = mkPackage(
  nixRaw`pkgs.nvidia-texture-tools`,
  "A set of cuda-enabled texture tools and compressors",
);

/**
 * A high-level C++ parallel algorithms library that builds on top of CUDA, TBB, OpenMP, etc
 */
export const nvidia_thrust = mkPackage(
  nixRaw`pkgs.nvidia-thrust`,
  "A high-level C++ parallel algorithms library that builds on top of CUDA, TBB, OpenMP, etc",
);

/**
 * A high-level C++ parallel algorithms library that builds on top of CUDA, TBB, OpenMP, etc
 */
export const nvidia_thrust_cuda = mkPackage(
  nixRaw`pkgs.nvidia-thrust-cuda`,
  "A high-level C++ parallel algorithms library that builds on top of CUDA, TBB, OpenMP, etc",
);

/**
 * A high-level C++ parallel algorithms library that builds on top of CUDA, TBB, OpenMP, etc
 */
export const nvidia_thrust_intel = mkPackage(
  nixRaw`pkgs.nvidia-thrust-intel`,
  "A high-level C++ parallel algorithms library that builds on top of CUDA, TBB, OpenMP, etc",
);

/**
 * A VA-API implemention using NVIDIA's NVDEC
 */
export const nvidia_vaapi_driver = mkPackage(
  nixRaw`pkgs.nvidia-vaapi-driver`,
  "A VA-API implemention using NVIDIA's NVDEC",
);

/**
 * Use neovim as pager
 */
export const nvimpager = mkPackage(
  nixRaw`pkgs.nvimpager`,
  "Use neovim as pager",
);

/**
 * An interactive NVIDIA-GPU process viewer, the one-stop solution for GPU process management
 */
export const nvitop = mkPackage(
  nixRaw`pkgs.nvitop`,
  "An interactive NVIDIA-GPU process viewer, the one-stop solution for GPU process management",
);

/**
 * NVM-Express user space tooling for Linux
 */
export const nvme_cli = mkPackage(
  nixRaw`pkgs.nvme-cli`,
  "NVM-Express user space tooling for Linux",
);

/**
 * NVMe target CLI
 */
export const nvmet_cli = mkPackage(
  nixRaw`pkgs.nvmet-cli`,
  "NVMe target CLI",
);

/**
 * A simplenote-syncing note-taking tool inspired by Notational Velocity
 */
export const nvpy = mkPackage(
  nixRaw`pkgs.nvpy`,
  "A simplenote-syncing note-taking tool inspired by Notational Velocity",
);

/**
 * Read and write coreboot parameters and display information from the coreboot table in CMOS/NVRAM
 */
export const nvramtool = mkPackage(
  nixRaw`pkgs.nvramtool`,
  "Read and write coreboot parameters and display information from the coreboot table in CMOS/NVRAM",
);

/**
 * A (h)top like task monitor for AMD, Adreno, Intel and NVIDIA GPUs
 */
export const nvtop = mkPackage(
  nixRaw`pkgs.nvtop`,
  "A (h)top like task monitor for AMD, Adreno, Intel and NVIDIA GPUs",
);

/**
 * A (h)top like task monitor for AMD, Adreno, Intel and NVIDIA GPUs
 */
export const nvtop_amd = mkPackage(
  nixRaw`pkgs.nvtop-amd`,
  "A (h)top like task monitor for AMD, Adreno, Intel and NVIDIA GPUs",
);

/**
 * A (h)top like task monitor for AMD, Adreno, Intel and NVIDIA GPUs
 */
export const nvtop_intel = mkPackage(
  nixRaw`pkgs.nvtop-intel`,
  "A (h)top like task monitor for AMD, Adreno, Intel and NVIDIA GPUs",
);

/**
 * A (h)top like task monitor for AMD, Adreno, Intel and NVIDIA GPUs
 */
export const nvtop_msm = mkPackage(
  nixRaw`pkgs.nvtop-msm`,
  "A (h)top like task monitor for AMD, Adreno, Intel and NVIDIA GPUs",
);

/**
 * A (h)top like task monitor for AMD, Adreno, Intel and NVIDIA GPUs
 */
export const nvtop_nvidia = mkPackage(
  nixRaw`pkgs.nvtop-nvidia`,
  "A (h)top like task monitor for AMD, Adreno, Intel and NVIDIA GPUs",
);

/**
 * Open Source High-Performance Computational Chemistry
 */
export const nwchem = mkPackage(
  nixRaw`pkgs.nwchem`,
  "Open Source High-Performance Computational Chemistry",
);

/**
 * Generate network-diagram image from spec-text file (similar to Graphviz)
 */
export const nwdiag = mkPackage(
  nixRaw`pkgs.nwdiag`,
  "Generate network-diagram image from spec-text file (similar to Graphviz)",
);

/**
 * GTK3-based button bar for sway and other wlroots-based compositors
 */
export const nwg_bar = mkPackage(
  nixRaw`pkgs.nwg-bar`,
  "GTK3-based button bar for sway and other wlroots-based compositors",
);

/**
 * Output management utility for Sway and Hyprland
 */
export const nwg_displays = mkPackage(
  nixRaw`pkgs.nwg-displays`,
  "Output management utility for Sway and Hyprland",
);

/**
 * GTK3-based dock for sway
 */
export const nwg_dock = mkPackage(
  nixRaw`pkgs.nwg-dock`,
  "GTK3-based dock for sway",
);

/**
 * GTK3-based dock for Hyprland
 */
export const nwg_dock_hyprland = mkPackage(
  nixRaw`pkgs.nwg-dock-hyprland`,
  "GTK3-based dock for Hyprland",
);

/**
 * Application drawer for sway Wayland compositor
 */
export const nwg_drawer = mkPackage(
  nixRaw`pkgs.nwg-drawer`,
  "Application drawer for sway Wayland compositor",
);

/**
 * GTK-based launchers: application grid, button bar, dmenu for sway and other window managers
 */
export const nwg_launchers = mkPackage(
  nixRaw`pkgs.nwg-launchers`,
  "GTK-based launchers: application grid, button bar, dmenu for sway and other window managers",
);

/**
 * Nwg-look is a GTK3 settings editor, designed to work properly in wlroots-based Wayland environment.
 */
export const nwg_look = mkPackage(
  nixRaw`pkgs.nwg-look`,
  "Nwg-look is a GTK3 settings editor, designed to work properly in wlroots-based Wayland environment.",
);

/**
 * MenuStart plugin for nwg-panel
 */
export const nwg_menu = mkPackage(
  nixRaw`pkgs.nwg-menu`,
  "MenuStart plugin for nwg-panel",
);

/**
 * GTK3-based panel for Sway window manager
 */
export const nwg_panel = mkPackage(
  nixRaw`pkgs.nwg-panel`,
  "GTK3-based panel for Sway window manager",
);

/**
 * Wrapper to display a script output or a text file content on the desktop in sway or other wlroots-based compositors
 */
export const nwg_wrapper = mkPackage(
  nixRaw`pkgs.nwg-wrapper`,
  "Wrapper to display a script output or a text file content on the desktop in sway or other wlroots-based compositors",
);

/**
 * Securely erase disks
 */
export const nwipe = mkPackage(
  nixRaw`pkgs.nwipe`,
  "Securely erase disks",
);

/**
 * An app runtime based on Chromium and node.js
 */
export const nwjs = mkPackage(
  nixRaw`pkgs.nwjs`,
  "An app runtime based on Chromium and node.js",
);

/**
 * An app runtime based on Chromium and node.js
 */
export const nwjs_sdk = mkPackage(
  nixRaw`pkgs.nwjs-sdk`,
  "An app runtime based on Chromium and node.js",
);

/**
 * Convert Nintendo Switch executable files to ELFs
 */
export const nx2elf = mkPackage(
  nixRaw`pkgs.nx2elf`,
  "Convert Nintendo Switch executable files to ELFs",
);

/**
 * NX X server based on Xnest
 */
export const nx_libs = mkPackage(
  nixRaw`pkgs.nx-libs`,
  "NX X server based on Xnest",
);

/**
 * A domain (ad) block list creator
 */
export const nxdomain = mkPackage(
  nixRaw`pkgs.nxdomain`,
  "A domain (ad) block list creator",
);

/**
 * A complete open-source clone/rewrite of the masterpiece jump-and-run platformer Doukutsu Monogatari (also known as Cave Story)
 */
export const nxengine_evo = mkPackage(
  nixRaw`pkgs.nxengine-evo`,
  "A complete open-source clone/rewrite of the masterpiece jump-and-run platformer Doukutsu Monogatari (also known as Cave Story)",
);

/**
 * Freescale/NXP I.MX chip image deploy tools
 */
export const nxpmicro_mfgtools = mkPackage(
  nixRaw`pkgs.nxpmicro-mfgtools`,
  "Freescale/NXP I.MX chip image deploy tools",
);

/**
 * Nyancat in your terminal, rendered through ANSI escape sequences
 */
export const nyancat = mkPackage(
  nixRaw`pkgs.nyancat`,
  "Nyancat in your terminal, rendered through ANSI escape sequences",
);

/**
 * Nix compatible lockfile manager, without Nix
 */
export const nyarr = mkPackage(
  nixRaw`pkgs.nyarr`,
  "Nix compatible lockfile manager, without Nix",
);

/**
 * Proxy server, supporting SOCKS 4 and 5, as well as a mirror mode
 */
export const nylon = mkPackage(
  nixRaw`pkgs.nylon`,
  "Proxy server, supporting SOCKS 4 and 5, as well as a mirror mode",
);

/**
 * A mixnet providing IP-level privacy
 */
export const nym = mkPackage(
  nixRaw`pkgs.nym`,
  "A mixnet providing IP-level privacy",
);

/**
 * Command-line monitor for Tor
 */
export const nyx = mkPackage(
  nixRaw`pkgs.nyx`,
  "Command-line monitor for Tor",
);

/**
 * Infinitely extensible web-browser (with Lisp development files using WebKitGTK platform port)
 */
export const nyxt = mkPackage(
  nixRaw`pkgs.nyxt`,
  "Infinitely extensible web-browser (with Lisp development files using WebKitGTK platform port)",
);

/**
 * A command line tool for downloading files from news servers
 */
export const nzbget = mkPackage(
  nixRaw`pkgs.nzbget`,
  "A command line tool for downloading files from news servers",
);

/**
 * Usenet meta search
 */
export const nzbhydra2 = mkPackage(
  nixRaw`pkgs.nzbhydra2`,
  "Usenet meta search",
);

/**
 * Expressive, simple, dynamic programming language
 */
export const oak = mkPackage(
  nixRaw`pkgs.oak`,
  "Expressive, simple, dynamic programming language",
);

/**
 * Go client and server OpenAPI 3 generator
 */
export const oapi_codegen = mkPackage(
  nixRaw`pkgs.oapi-codegen`,
  "Go client and server OpenAPI 3 generator",
);

/**
 * Components for building one-time password authentication systems
 */
export const oath_toolkit = mkPackage(
  nixRaw`pkgs.oath-toolkit`,
  "Components for building one-time password authentication systems",
);

/**
 * Light and powerful C++ web framework for highly scalable and resource-efficient web applications
 */
export const oatpp = mkPackage(
  nixRaw`pkgs.oatpp`,
  "Light and powerful C++ web framework for highly scalable and resource-efficient web applications",
);

/**
 * A reverse proxy that provides authentication with Google, Github, or other providers
 */
export const oauth2_proxy = mkPackage(
  nixRaw`pkgs.oauth2-proxy`,
  "A reverse proxy that provides authentication with Google, Github, or other providers",
);

/**
 * User-friendly OAuth2 CLI
 */
export const oauth2c = mkPackage(
  nixRaw`pkgs.oauth2c`,
  "User-friendly OAuth2 CLI",
);

/**
 * GUI configuration tool for openbox
 */
export const obconf = mkPackage(
  nixRaw`pkgs.obconf`,
  "GUI configuration tool for openbox",
);

/**
 * A simple tool which produces pretty-printed output from a Menhir parser file (.mly)
 */
export const obelisk = mkPackage(
  nixRaw`pkgs.obelisk`,
  "A simple tool which produces pretty-printed output from a Menhir parser file (.mly)",
);

/**
 * Emulator for the Oberon RISC machine
 */
export const oberon_risc_emu = mkPackage(
  nixRaw`pkgs.oberon-risc-emu`,
  "Emulator for the Oberon RISC machine",
);

export const obex_data_server = mkPackage(
  nixRaw`pkgs.obex_data_server`,
  "",
);

export const obexd = mkPackage(
  nixRaw`pkgs.obexd`,
  "",
);

/**
 * A tool to mount OBEX-based devices (such as Bluetooth phones)
 */
export const obexfs = mkPackage(
  nixRaw`pkgs.obexfs`,
  "A tool to mount OBEX-based devices (such as Bluetooth phones)",
);

/**
 * A library and tool to access files on OBEX-based devices (such as Bluetooth phones)
 */
export const obexftp = mkPackage(
  nixRaw`pkgs.obexftp`,
  "A library and tool to access files on OBEX-based devices (such as Bluetooth phones)",
);

/**
 * Circumvents censorship by transforming Tor traffic between clients and bridges
 */
export const obfs4 = mkPackage(
  nixRaw`pkgs.obfs4`,
  "Circumvents censorship by transforming Tor traffic between clients and bridges",
);

/**
 * Graphical configurator for Anne Pro and Anne Pro II keyboards
 */
export const obinskit = mkPackage(
  nixRaw`pkgs.obinskit`,
  "Graphical configurator for Anne Pro and Anne Pro II keyboards",
);

/**
 * Management of analyses and data in DNA metabarcoding
 */
export const obitools3 = mkPackage(
  nixRaw`pkgs.obitools3`,
  "Management of analyses and data in DNA metabarcoding",
);

/**
 * Object and executable file converter, modifier and disassembler
 */
export const objconv = mkPackage(
  nixRaw`pkgs.objconv`,
  "Object and executable file converter, modifier and disassembler",
);

/**
 * A GCC wrapper that makes it easy to embed secure computation protocols inside regular C programs
 */
export const obliv_c = mkPackage(
  nixRaw`pkgs.obliv-c`,
  "A GCC wrapper that makes it easy to embed secure computation protocols inside regular C programs",
);

/**
 * OBS-cli is a command-line remote control for OBS
 */
export const obs_cli = mkPackage(
  nixRaw`pkgs.obs-cli`,
  "OBS-cli is a command-line remote control for OBS",
);

/**
 * Free and open source software for video recording and live streaming
 */
export const obs_studio = mkPackage(
  nixRaw`pkgs.obs-studio`,
  "Free and open source software for video recording and live streaming",
);

/**
 * A powerful knowledge base that works on top of a local folder of plain text Markdown files
 */
export const obsidian = mkPackage(
  nixRaw`pkgs.obsidian`,
  "A powerful knowledge base that works on top of a local folder of plain text Markdown files",
);

/**
 * Simple package build system for OCaml
 */
export const obuild = mkPackage(
  nixRaw`pkgs.obuild`,
  "Simple package build system for OCaml",
);

/**
 * OCaml is an industrial-strength programming language supporting functional, imperative and object-oriented styles
 */
export const ocaml = mkPackage(
  nixRaw`pkgs.ocaml`,
  "OCaml is an industrial-strength programming language supporting functional, imperative and object-oriented styles",
);

/**
 * Convert a filesystem into a static OCaml module
 */
export const ocaml_crunch = mkPackage(
  nixRaw`pkgs.ocaml-crunch`,
  "Convert a filesystem into a static OCaml module",
);

/**
 * Generic OCaml Makefile for GNU Make
 */
export const ocaml_make = mkPackage(
  nixRaw`pkgs.ocaml_make`,
  "Generic OCaml Makefile for GNU Make",
);

/**
 * A simple cross-platform OCaml code editor built for top-level evaluation
 */
export const ocaml_top = mkPackage(
  nixRaw`pkgs.ocaml-top`,
  "A simple cross-platform OCaml code editor built for top-level evaluation",
);

/**
 * Auto-formatter for OCaml code
 */
export const ocamlformat = mkPackage(
  nixRaw`pkgs.ocamlformat`,
  "Auto-formatter for OCaml code",
);

/**
 * Auto-formatter for OCaml code
 */
export const ocamlformat_0_19_0 = mkPackage(
  nixRaw`pkgs.ocamlformat_0_19_0`,
  "Auto-formatter for OCaml code",
);

/**
 * Auto-formatter for OCaml code
 */
export const ocamlformat_0_20_0 = mkPackage(
  nixRaw`pkgs.ocamlformat_0_20_0`,
  "Auto-formatter for OCaml code",
);

/**
 * Auto-formatter for OCaml code
 */
export const ocamlformat_0_20_1 = mkPackage(
  nixRaw`pkgs.ocamlformat_0_20_1`,
  "Auto-formatter for OCaml code",
);

/**
 * Auto-formatter for OCaml code
 */
export const ocamlformat_0_21_0 = mkPackage(
  nixRaw`pkgs.ocamlformat_0_21_0`,
  "Auto-formatter for OCaml code",
);

/**
 * Auto-formatter for OCaml code
 */
export const ocamlformat_0_22_4 = mkPackage(
  nixRaw`pkgs.ocamlformat_0_22_4`,
  "Auto-formatter for OCaml code",
);

/**
 * Auto-formatter for OCaml code
 */
export const ocamlformat_0_23_0 = mkPackage(
  nixRaw`pkgs.ocamlformat_0_23_0`,
  "Auto-formatter for OCaml code",
);

/**
 * Auto-formatter for OCaml code
 */
export const ocamlformat_0_24_1 = mkPackage(
  nixRaw`pkgs.ocamlformat_0_24_1`,
  "Auto-formatter for OCaml code",
);

/**
 * Auto-formatter for OCaml code
 */
export const ocamlformat_0_25_1 = mkPackage(
  nixRaw`pkgs.ocamlformat_0_25_1`,
  "Auto-formatter for OCaml code",
);

/**
 * Auto-formatter for OCaml code
 */
export const ocamlformat_0_26_0 = mkPackage(
  nixRaw`pkgs.ocamlformat_0_26_0`,
  "Auto-formatter for OCaml code",
);

export const oceanic_theme = mkPackage(
  nixRaw`pkgs.oceanic-theme`,
  "",
);

/**
 * Cross-platform, easy to use, fast and functional audio editor
 */
export const ocenaudio = mkPackage(
  nixRaw`pkgs.ocenaudio`,
  "Cross-platform, easy to use, fast and functional audio editor",
);

export const ocf_resource_agents = mkPackage(
  nixRaw`pkgs.ocf-resource-agents`,
  "",
);

/**
 * Command Line Interface for Oracle Cloud Infrastructure
 */
export const oci_cli = mkPackage(
  nixRaw`pkgs.oci-cli`,
  "Command Line Interface for Oracle Cloud Infrastructure",
);

/**
 * OCI hook to trace syscalls and generate a seccomp profile

 */
export const oci_seccomp_bpf_hook = mkPackage(
  nixRaw`pkgs.oci-seccomp-bpf-hook`,
  "OCI hook to trace syscalls and generate a seccomp profile\n",
);

/**
 * Orchestrate end-to-end encryption, cryptographic identities, mutual authentication, and authorization policies between distributed applications – at massive scale. Use Ockam to build secure-by-design applications that can Trust Data-in-Motion.
 */
export const ockam = mkPackage(
  nixRaw`pkgs.ockam`,
  "Orchestrate end-to-end encryption, cryptographic identities, mutual authentication, and authorization policies between distributed applications – at massive scale. Use Ockam to build secure-by-design applications that can Trust Data-in-Motion.",
);

/**
 * OpenCL ICD Loader for opencl-headers-2023.02.06
 */
export const ocl_icd = mkPackage(
  nixRaw`pkgs.ocl-icd`,
  "OpenCL ICD Loader for opencl-headers-2023.02.06",
);

/**
 * An OpenCL device simulator and debugger
 */
export const oclgrind = mkPackage(
  nixRaw`pkgs.oclgrind`,
  "An OpenCL device simulator and debugger",
);

/**
 * CLI for the Red Hat OpenShift Cluster Manager
 */
export const ocm = mkPackage(
  nixRaw`pkgs.ocm`,
  "CLI for the Red Hat OpenShift Cluster Manager",
);

/**
 * OpenConnect proxy
 */
export const ocproxy = mkPackage(
  nixRaw`pkgs.ocproxy`,
  "OpenConnect proxy",
);

/**
 * ANSI OCR font from the '60s. CYBER
 */
export const ocr_a = mkPackage(
  nixRaw`pkgs.ocr-a`,
  "ANSI OCR font from the '60s. CYBER",
);

/**
 * Optical character recognition (OCR) program & library
 */
export const ocrad = mkPackage(
  nixRaw`pkgs.ocrad`,
  "Optical character recognition (OCR) program & library",
);

/**
 * Complete Optical Character Recognition and Document Analysis and Recognition program
 */
export const ocrfeeder = mkPackage(
  nixRaw`pkgs.ocrfeeder`,
  "Complete Optical Character Recognition and Document Analysis and Recognition program",
);

/**
 * Adds an OCR text layer to scanned PDF files, allowing them to be searched
 */
export const ocrmypdf = mkPackage(
  nixRaw`pkgs.ocrmypdf`,
  "Adds an OCR text layer to scanned PDF files, allowing them to be searched",
);

/**
 * Open Collaboration System for use with DE store websites
 */
export const ocs_url = mkPackage(
  nixRaw`pkgs.ocs-url`,
  "Open Collaboration System for use with DE store websites",
);

/**
 * OpenConnect VPN server (ocserv), a server for the OpenConnect VPN client
 */
export const ocserv = mkPackage(
  nixRaw`pkgs.ocserv`,
  "OpenConnect VPN server (ocserv), a server for the OpenConnect VPN client",
);

/**
 * I18n made easy for web sites written with eliom
 */
export const ocsigen_i18n = mkPackage(
  nixRaw`pkgs.ocsigen-i18n`,
  "I18n made easy for web sites written with eliom",
);

/**
 * Scientific Programming Language
 */
export const octave = mkPackage(
  nixRaw`pkgs.octave`,
  "Scientific Programming Language",
);

/**
 * Scientific Programming Language
 */
export const octaveFull = mkPackage(
  nixRaw`pkgs.octaveFull`,
  "Scientific Programming Language",
);

/**
 * Github user information on terminal
 */
export const octofetch = mkPackage(
  nixRaw`pkgs.octofetch`,
  "Github user information on terminal",
);

/**
 * A probabilistic, flexible, and compact 3D mapping library for robotic systems
 */
export const octomap = mkPackage(
  nixRaw`pkgs.octomap`,
  "A probabilistic, flexible, and compact 3D mapping library for robotic systems",
);

/**
 * The snappy web interface for your 3D printer
 */
export const octoprint = mkPackage(
  nixRaw`pkgs.octoprint`,
  "The snappy web interface for your 3D printer",
);

/**
 * Real-space time dependent density-functional theory code
 */
export const octopus = mkPackage(
  nixRaw`pkgs.octopus`,
  "Real-space time dependent density-functional theory code",
);

/**
 * Bayesian haplotype-based mutation calling
 */
export const octopus_caller = mkPackage(
  nixRaw`pkgs.octopus-caller`,
  "Bayesian haplotype-based mutation calling",
);

/**
 * A software used to download RPKI (RFC 6480) certificates and validate them
 */
export const octorpki = mkPackage(
  nixRaw`pkgs.octorpki`,
  "A software used to download RPKI (RFC 6480) certificates and validate them",
);

/**
 * Commandline tool for joining, analyzing and transforming data from multiple databases and file formats using SQL
 */
export const octosql = mkPackage(
  nixRaw`pkgs.octosql`,
  "Commandline tool for joining, analyzing and transforming data from multiple databases and file formats using SQL",
);

/**
 * Advanced Github OSINT framework
 */
export const octosuite = mkPackage(
  nixRaw`pkgs.octosuite`,
  "Advanced Github OSINT framework",
);

/**
 * A minimalistic crossplatform image viewer written in Rust
 */
export const oculante = mkPackage(
  nixRaw`pkgs.oculante`,
  "A minimalistic crossplatform image viewer written in Rust",
);

/**
 * For converting between different versions of .dwg and .dxf
 */
export const odafileconverter = mkPackage(
  nixRaw`pkgs.odafileconverter`,
  "For converting between different versions of .dwg and .dxf",
);

/**
 * A client/server port for playing old-school Doom online
 */
export const odamex = mkPackage(
  nixRaw`pkgs.odamex`,
  "A client/server port for playing old-school Doom online",
);

/**
 * Odd Job Daemon
 */
export const oddjob = mkPackage(
  nixRaw`pkgs.oddjob`,
  "Odd Job Daemon",
);

/**
 * Open Dynamics Engine
 */
export const ode = mkPackage(
  nixRaw`pkgs.ode`,
  "Open Dynamics Engine",
);

/**
 * Lookup documentation of installed OCaml packages
 */
export const odig = mkPackage(
  nixRaw`pkgs.odig`,
  "Lookup documentation of installed OCaml packages",
);

/**
 * A fast, concise, readable, pragmatic and open sourced programming language
 */
export const odin = mkPackage(
  nixRaw`pkgs.odin`,
  "A fast, concise, readable, pragmatic and open sourced programming language",
);

/**
 * Odin 2 Synthesizer Plugin
 */
export const odin2 = mkPackage(
  nixRaw`pkgs.odin2`,
  "Odin 2 Synthesizer Plugin",
);

/**
 * Developer-focused CLI for OpenShift and Kubernetes
 */
export const odo = mkPackage(
  nixRaw`pkgs.odo`,
  "Developer-focused CLI for OpenShift and Kubernetes",
);

/**
 * Open Source ERP and CRM
 */
export const odoo = mkPackage(
  nixRaw`pkgs.odoo`,
  "Open Source ERP and CRM",
);

/**
 * Open Source ERP and CRM
 */
export const odoo15 = mkPackage(
  nixRaw`pkgs.odoo15`,
  "Open Source ERP and CRM",
);

/**
 * Open Data Plane optimized for DPDK
 */
export const odp_dpdk = mkPackage(
  nixRaw`pkgs.odp-dpdk`,
  "Open Data Plane optimized for DPDK",
);

/**
 * Oracle ODPI-C library
 */
export const odpic = mkPackage(
  nixRaw`pkgs.odpic`,
  "Oracle ODPI-C library",
);

/**
 * Secure boot enabled boot loader for ODROID-XU{3,4}
 */
export const odroid_xu3_bootloader = mkPackage(
  nixRaw`pkgs.odroid-xu3-bootloader`,
  "Secure boot enabled boot loader for ODROID-XU{3,4}",
);

/**
 * Simple .odt to .txt converter
 */
export const odt2txt = mkPackage(
  nixRaw`pkgs.odt2txt`,
  "Simple .odt to .txt converter",
);

/**
 * Scalable PostgreSQL connection pooler
 */
export const odyssey = mkPackage(
  nixRaw`pkgs.odyssey`,
  "Scalable PostgreSQL connection pooler",
);

/**
 * Portable ed editor from OpenBSD
 */
export const oed = mkPackage(
  nixRaw`pkgs.oed`,
  "Portable ed editor from OpenBSD",
);

/**
 * Advanced bitbake-recipe linter
 */
export const oelint_adv = mkPackage(
  nixRaw`pkgs.oelint-adv`,
  "Advanced bitbake-recipe linter",
);

/**
 * Collection of offensive tools targeting Microsoft Azure
 */
export const offensive_azure = mkPackage(
  nixRaw`pkgs.offensive-azure`,
  "Collection of offensive tools targeting Microsoft Azure",
);

/**
 * A customized version of Source Code Pro
 */
export const office_code_pro = mkPackage(
  nixRaw`pkgs.office-code-pro`,
  "A customized version of Source Code Pro",
);

/**
 * Synchronize emails between two repositories, so that you can read the same mailbox from multiple computers
 */
export const offlineimap = mkPackage(
  nixRaw`pkgs.offlineimap`,
  "Synchronize emails between two repositories, so that you can read the same mailbox from multiple computers",
);

/**
 * An Offline-First browser for the smolnet 
 */
export const offpunk = mkPackage(
  nixRaw`pkgs.offpunk`,
  "An Offline-First browser for the smolnet ",
);

/**
 * Offline RSS/Atom reader
 */
export const offrss = mkPackage(
  nixRaw`pkgs.offrss`,
  "Offline RSS/Atom reader",
);

/**
 * A tool to unpack the zip data contained in any type of file
 */
export const offzip = mkPackage(
  nixRaw`pkgs.offzip`,
  "A tool to unpack the zip data contained in any type of file",
);

/**
 * Infrastructure for building mobile telephony (GSM/UMTS) applications
 */
export const ofono = mkPackage(
  nixRaw`pkgs.ofono`,
  "Infrastructure for building mobile telephony (GSM/UMTS) applications",
);

/**
 * Phone Simulator for modem testing
 */
export const ofono_phonesim = mkPackage(
  nixRaw`pkgs.ofono-phonesim`,
  "Phone Simulator for modem testing",
);

/**
 * Open Graph Drawing Framework/Open Graph algorithms and Data structure Framework
 */
export const ogdf = mkPackage(
  nixRaw`pkgs.ogdf`,
  "Open Graph Drawing Framework/Open Graph algorithms and Data structure Framework",
);

/**
 * Toolbox for manipulating and creating Ogg video files
 */
export const oggvideotools = mkPackage(
  nixRaw`pkgs.oggvideotools`,
  "Toolbox for manipulating and creating Ogg video files",
);

/**
 * Tools for modifying and inspecting OGG media streams
 */
export const ogmtools = mkPackage(
  nixRaw`pkgs.ogmtools`,
  "Tools for modifying and inspecting OGG media streams",
);

/**
 * like cargo, but backwards
 */
export const ograc = mkPackage(
  nixRaw`pkgs.ograc`,
  "like cargo, but backwards",
);

/**
 * 3D Object-Oriented Graphics Rendering Engine
 */
export const ogre = mkPackage(
  nixRaw`pkgs.ogre`,
  "3D Object-Oriented Graphics Rendering Engine",
);

/**
 * 3D Object-Oriented Graphics Rendering Engine
 */
export const ogre_13 = mkPackage(
  nixRaw`pkgs.ogre_13`,
  "3D Object-Oriented Graphics Rendering Engine",
);

/**
 * 3D Object-Oriented Graphics Rendering Engine
 */
export const ogre_14 = mkPackage(
  nixRaw`pkgs.ogre_14`,
  "3D Object-Oriented Graphics Rendering Engine",
);

/**
 * A very nice animated wallpaper daemon for Wayland compositors
 */
export const oguri = mkPackage(
  nixRaw`pkgs.oguri`,
  "A very nice animated wallpaper daemon for Wayland compositors",
);

/**
 * A new Unix shell
 */
export const oh = mkPackage(
  nixRaw`pkgs.oh`,
  "A new Unix shell",
);

/**
 * The Fish Shell Framework
 */
export const oh_my_fish = mkPackage(
  nixRaw`pkgs.oh-my-fish`,
  "The Fish Shell Framework",
);

/**
 * An interactive Git learning game
 */
export const oh_my_git = mkPackage(
  nixRaw`pkgs.oh-my-git`,
  "An interactive Git learning game",
);

/**
 * A prompt theme engine for any shell
 */
export const oh_my_posh = mkPackage(
  nixRaw`pkgs.oh-my-posh`,
  "A prompt theme engine for any shell",
);

/**
 * A framework for managing your zsh configuration
 */
export const oh_my_zsh = mkPackage(
  nixRaw`pkgs.oh-my-zsh`,
  "A framework for managing your zsh configuration",
);

/**
 * HTTP load generator inspired by rakyll/hey with tui animation
 */
export const oha = mkPackage(
  nixRaw`pkgs.oha`,
  "HTTP load generator inspired by rakyll/hey with tui animation",
);

/**
 * Configurable Ident protocol server
 */
export const oidentd = mkPackage(
  nixRaw`pkgs.oidentd`,
  "Configurable Ident protocol server",
);

/**
 * A new unix shell
 */
export const oil = mkPackage(
  nixRaw`pkgs.oil`,
  "A new unix shell",
);

/**
 * Search-as-you-type cli frontend for the buku bookmarks manager using peco
 */
export const oil_buku = mkPackage(
  nixRaw`pkgs.oil-buku`,
  "Search-as-you-type cli frontend for the buku bookmarks manager using peco",
);

/**
 * A naval strategy game
 */
export const oilrush = mkPackage(
  nixRaw`pkgs.oilrush`,
  "A naval strategy game",
);

/**
 * Object-oriented C++ input system
 */
export const ois = mkPackage(
  nixRaw`pkgs.ois`,
  "Object-oriented C++ input system",
);

/**
 * Okapi Library
 */
export const okapi = mkPackage(
  nixRaw`pkgs.okapi`,
  "Okapi Library",
);

/**
 * Portable OpenBSD ksh, based on the Public Domain Korn Shell (pdksh)
 */
export const oksh = mkPackage(
  nixRaw`pkgs.oksh`,
  "Portable OpenBSD ksh, based on the Public Domain Korn Shell (pdksh)",
);

/**
 * A CLI for having Okta as the IdP for AWS CLI operations
 */
export const okta_aws_cli = mkPackage(
  nixRaw`pkgs.okta-aws-cli`,
  "A CLI for having Okta as the IdP for AWS CLI operations",
);

/**
 * A hex editor
 */
export const okteta = mkPackage(
  nixRaw`pkgs.okteta`,
  "A hex editor",
);

/**
 * Develop your applications directly in your Kubernetes Cluster
 */
export const okteto = mkPackage(
  nixRaw`pkgs.okteto`,
  "Develop your applications directly in your Kubernetes Cluster",
);

/**
 * A framework for controlling entertainment lighting equipment
 */
export const ola = mkPackage(
  nixRaw`pkgs.ola`,
  "A framework for controlling entertainment lighting equipment",
);

/**
 * A media manager and transcoding server.
 */
export const olaris_server = mkPackage(
  nixRaw`pkgs.olaris-server`,
  "A media manager and transcoding server.",
);

/**
 * Free Sindhi Khudabadi font
 */
export const oldsindhi = mkPackage(
  nixRaw`pkgs.oldsindhi`,
  "Free Sindhi Khudabadi font",
);

/**
 * An attempt to revive a specific type of Modern style of serif typefaces
 */
export const oldstandard = mkPackage(
  nixRaw`pkgs.oldstandard`,
  "An attempt to revive a specific type of Modern style of serif typefaces",
);

/**
 * Module to analyze MS OLE2 files and MS Office documents
 */
export const oletools = mkPackage(
  nixRaw`pkgs.oletools`,
  "Module to analyze MS OLE2 files and MS Office documents",
);

/**
 * Professional open-source NLE video editor
 */
export const olive_editor = mkPackage(
  nixRaw`pkgs.olive-editor`,
  "Professional open-source NLE video editor",
);

/**
 * Get up and running with large language models locally
 */
export const ollama = mkPackage(
  nixRaw`pkgs.ollama`,
  "Get up and running with large language models locally",
);

/**
 * Implements double cryptographic ratchet and Megolm ratchet
 */
export const olm = mkPackage(
  nixRaw`pkgs.olm`,
  "Implements double cryptographic ratchet and Megolm ratchet",
);

/**
 * Language server for the Odin programming language
 */
export const ols = mkPackage(
  nixRaw`pkgs.ols`,
  "Language server for the Odin programming language",
);

/**
 * An adhoc wireless mesh routing daemon
 */
export const olsrd = mkPackage(
  nixRaw`pkgs.olsrd`,
  "An adhoc wireless mesh routing daemon",
);

/**
 * Portable OpenBSD m4 macro processor
 */
export const om4 = mkPackage(
  nixRaw`pkgs.om4`,
  "Portable OpenBSD m4 macro processor",
);

/**
 * A build system designed for scalability and portability
 */
export const omake = mkPackage(
  nixRaw`pkgs.omake`,
  "A build system designed for scalability and portability",
);

/**
 * Self-hosted web application that automatically gives your shared Plex or Emby users the ability to request content by themselves
 */
export const ombi = mkPackage(
  nixRaw`pkgs.ombi`,
  "Self-hosted web application that automatically gives your shared Plex or Emby users the ability to request content by themselves",
);

/**
 * Implementation of next-generation file format (NGFF) specifications for storing bioimaging data in the cloud.
 */
export const ome_zarr = mkPackage(
  nixRaw`pkgs.ome_zarr`,
  "Implementation of next-generation file format (NGFF) specifications for storing bioimaging data in the cloud.",
);

/**
 * The free computer aided translation (CAT) tool for professionals
 */
export const omegat = mkPackage(
  nixRaw`pkgs.omegat`,
  "The free computer aided translation (CAT) tool for professionals",
);

/**
 * Dark theme created by Rocketseat
 */
export const omni_gtk_theme = mkPackage(
  nixRaw`pkgs.omni-gtk-theme`,
  "Dark theme created by Rocketseat",
);

/**
 * A robust high performance CORBA ORB for C++ and Python
 */
export const omniorb = mkPackage(
  nixRaw`pkgs.omniorb`,
  "A robust high performance CORBA ORB for C++ and Python",
);

/**
 * OmniSharp based on roslyn workspaces
 */
export const omnisharp_roslyn = mkPackage(
  nixRaw`pkgs.omnisharp-roslyn`,
  "OmniSharp based on roslyn workspaces",
);

/**
 * Analysis for Finnish text
 */
export const omorfi = mkPackage(
  nixRaw`pkgs.omorfi`,
  "Analysis for Finnish text",
);

/**
 * Open Multicast Ping (omping) is a tool for testing IPv4/IPv6 multicast connectivity on a LAN
 */
export const omping = mkPackage(
  nixRaw`pkgs.omping`,
  "Open Multicast Ping (omping) is a tool for testing IPv4/IPv6 multicast connectivity on a LAN",
);

/**
 * Commandline OMX player for the Raspberry Pi
 */
export const omxplayer = mkPackage(
  nixRaw`pkgs.omxplayer`,
  "Commandline OMX player for the Raspberry Pi",
);

/**
 * A general purpose application launcher for X and wayland inspired by rofi/wofi and alfred
 */
export const onagre = mkPackage(
  nixRaw`pkgs.onagre`,
  "A general purpose application launcher for X and wayland inspired by rofi/wofi and alfred",
);

/**
 * Onscreen keyboard useful for tablet PC users and for mobility impaired users
 */
export const onboard = mkPackage(
  nixRaw`pkgs.onboard`,
  "Onscreen keyboard useful for tablet PC users and for mobility impaired users",
);

/**
 * a small program to automate tasks specific to certain directories
 */
export const ondir = mkPackage(
  nixRaw`pkgs.ondir`,
  "a small program to automate tasks specific to certain directories",
);

/**
 * oneAPI Deep Neural Network Library (oneDNN)
 */
export const oneDNN = mkPackage(
  nixRaw`pkgs.oneDNN`,
  "oneAPI Deep Neural Network Library (oneDNN)",
);

/**
 * oneAPI Deep Neural Network Library (oneDNN)
 */
export const oneDNN_2 = mkPackage(
  nixRaw`pkgs.oneDNN_2`,
  "oneAPI Deep Neural Network Library (oneDNN)",
);

/**
 * The best tool for finding one gadget RCE in libc.so.6
 */
export const one_gadget = mkPackage(
  nixRaw`pkgs.one_gadget`,
  "The best tool for finding one gadget RCE in libc.so.6",
);

/**
 * A complete tool to interact with OneDrive on Linux
 */
export const onedrive = mkPackage(
  nixRaw`pkgs.onedrive`,
  "A complete tool to interact with OneDrive on Linux",
);

/**
 * A simple GUI for Linux OneDrive Client, with multi-account support
 */
export const onedrivegui = mkPackage(
  nixRaw`pkgs.onedrivegui`,
  "A simple GUI for Linux OneDrive Client, with multi-account support",
);

/**
 * A network filesystem for Linux
 */
export const onedriver = mkPackage(
  nixRaw`pkgs.onedriver`,
  "A network filesystem for Linux",
);

/**
 * Git repository summary on your terminal
 */
export const onefetch = mkPackage(
  nixRaw`pkgs.onefetch`,
  "Git repository summary on your terminal",
);

/**
 * Creates a cute cat chasing around your mouse cursor
 */
export const oneko = mkPackage(
  nixRaw`pkgs.oneko`,
  "Creates a cute cat chasing around your mouse cursor",
);

/**
 * A first-come first-served single-fire HTTP server
 */
export const oneshot = mkPackage(
  nixRaw`pkgs.oneshot`,
  "A first-come first-served single-fire HTTP server",
);

/**
 * Fast SNMP Scanner
 */
export const onesixtyone = mkPackage(
  nixRaw`pkgs.onesixtyone`,
  "Fast SNMP Scanner",
);

/**
 * Gtk theme inspired by the NextStep look
 */
export const onestepback = mkPackage(
  nixRaw`pkgs.onestepback`,
  "Gtk theme inspired by the NextStep look",
);

/**
 * A cross-platform, user-space WireGuard port-forwarder that requires no root-access or system network configurations
 */
export const onetun = mkPackage(
  nixRaw`pkgs.onetun`,
  "A cross-platform, user-space WireGuard port-forwarder that requires no root-access or system network configurations",
);

/**
 * Native, lightweight modal code editor
 */
export const oni2 = mkPackage(
  nixRaw`pkgs.oni2`,
  "Native, lightweight modal code editor",
);

/**
 * Regular expressions library
 */
export const oniguruma = mkPackage(
  nixRaw`pkgs.oniguruma`,
  "Regular expressions library",
);

/**
 * GTK application to display Tor circuits and streams
 */
export const onioncircuits = mkPackage(
  nixRaw`pkgs.onioncircuits`,
  "GTK application to display Tor circuits and streams",
);

/**
 * Securely and anonymously send and receive files
 */
export const onionshare = mkPackage(
  nixRaw`pkgs.onionshare`,
  "Securely and anonymously send and receive files",
);

/**
 * Securely and anonymously send and receive files
 */
export const onionshare_gui = mkPackage(
  nixRaw`pkgs.onionshare-gui`,
  "Securely and anonymously send and receive files",
);

/**
 * Analyze problems of competitive programming and automatically generate boilerplate
 */
export const online_judge_template_generator = mkPackage(
  nixRaw`pkgs.online-judge-template-generator`,
  "Analyze problems of competitive programming and automatically generate boilerplate",
);

/**
 * Tools for various online judges. Download sample cases, generate additional test cases, test your code, and submit it.
 */
export const online_judge_tools = mkPackage(
  nixRaw`pkgs.online-judge-tools`,
  "Tools for various online judges. Download sample cases, generate additional test cases, test your code, and submit it.",
);

export const onlykey = mkPackage(
  nixRaw`pkgs.onlykey`,
  "",
);

/**
 *  The OnlyKey agent is essentially middleware that lets you use OnlyKey as a hardware SSH/GPG device.
 */
export const onlykey_agent = mkPackage(
  nixRaw`pkgs.onlykey-agent`,
  " The OnlyKey agent is essentially middleware that lets you use OnlyKey as a hardware SSH/GPG device.",
);

/**
 * OnlyKey client and command-line tool
 */
export const onlykey_cli = mkPackage(
  nixRaw`pkgs.onlykey-cli`,
  "OnlyKey client and command-line tool",
);

/**
 * Office suite that combines text, spreadsheet and presentation editors allowing to create, view and edit local documents
 */
export const onlyoffice_bin = mkPackage(
  nixRaw`pkgs.onlyoffice-bin`,
  "Office suite that combines text, spreadsheet and presentation editors allowing to create, view and edit local documents",
);

/**
 * Office suite that combines text, spreadsheet and presentation editors allowing to create, view and edit local documents
 */
export const onlyoffice_bin_7_2 = mkPackage(
  nixRaw`pkgs.onlyoffice-bin_7_2`,
  "Office suite that combines text, spreadsheet and presentation editors allowing to create, view and edit local documents",
);

/**
 * Office suite that combines text, spreadsheet and presentation editors allowing to create, view and edit local documents
 */
export const onlyoffice_bin_7_4 = mkPackage(
  nixRaw`pkgs.onlyoffice-bin_7_4`,
  "Office suite that combines text, spreadsheet and presentation editors allowing to create, view and edit local documents",
);

/**
 * Office suite that combines text, spreadsheet and presentation editors allowing to create, view and edit local documents
 */
export const onlyoffice_bin_latest = mkPackage(
  nixRaw`pkgs.onlyoffice-bin_latest`,
  "Office suite that combines text, spreadsheet and presentation editors allowing to create, view and edit local documents",
);

/**
 * ONLYOFFICE Document Server is an online office suite comprising viewers and editors
 */
export const onlyoffice_documentserver = mkPackage(
  nixRaw`pkgs.onlyoffice-documentserver`,
  "ONLYOFFICE Document Server is an online office suite comprising viewers and editors",
);

/**
 * Onmetal OCI Image Specification, Library and Tooling
 */
export const onmetal_image = mkPackage(
  nixRaw`pkgs.onmetal-image`,
  "Onmetal OCI Image Specification, Library and Tooling",
);

/**
 * Cross-platform, high performance scoring engine for ML models
 */
export const onnxruntime = mkPackage(
  nixRaw`pkgs.onnxruntime`,
  "Cross-platform, high performance scoring engine for ML models",
);

/**
 * Japanese visual novel scripting engine
 */
export const onscripter_en = mkPackage(
  nixRaw`pkgs.onscripter-en`,
  "Japanese visual novel scripting engine",
);

/**
 *  QT based Spotify music downloader written in Python
 */
export const onthespot = mkPackage(
  nixRaw`pkgs.onthespot`,
  " QT based Spotify music downloader written in Python",
);

/**
 * Brain Imaging Centre object-oriented programming library (and tools)
 */
export const oobicpl = mkPackage(
  nixRaw`pkgs.oobicpl`,
  "Brain Imaging Centre object-oriented programming library (and tools)",
);

/**
 * Command line internet speedtest tool by Ookla
 */
export const ookla_speedtest = mkPackage(
  nixRaw`pkgs.ookla-speedtest`,
  "Command line internet speedtest tool by Ookla",
);

/**
 * An adhoc wireless mesh routing daemon
 */
export const oonf_olsrd2 = mkPackage(
  nixRaw`pkgs.oonf-olsrd2`,
  "An adhoc wireless mesh routing daemon",
);

/**
 * The Open Observatory of Network Interference command line network probe
 */
export const ooniprobe_cli = mkPackage(
  nixRaw`pkgs.ooniprobe-cli`,
  "The Open Observatory of Network Interference command line network probe",
);

/**
 * 
 */
export const op_geth = mkPackage(
  nixRaw`pkgs.op-geth`,
  "",
);

/**
 * OPAm Light INstaller Engine
 */
export const opaline = mkPackage(
  nixRaw`pkgs.opaline`,
  "OPAm Light INstaller Engine",
);

/**
 * A package manager for OCaml
 */
export const opam = mkPackage(
  nixRaw`pkgs.opam`,
  "A package manager for OCaml",
);

/**
 * convert opam file syntax to JSON
 */
export const opam2json = mkPackage(
  nixRaw`pkgs.opam2json`,
  "convert opam file syntax to JSON",
);

/**
 * Handle (un)installation from opam install files
 */
export const opam_installer = mkPackage(
  nixRaw`pkgs.opam-installer`,
  "Handle (un)installation from opam install files",
);

/**
 * A tool to ease contributions to opam repositories
 */
export const opam_publish = mkPackage(
  nixRaw`pkgs.opam-publish`,
  "A tool to ease contributions to opam repositories",
);

/**
 * CLI for managing authorization policies
 */
export const opcr_policy = mkPackage(
  nixRaw`pkgs.opcr-policy`,
  "CLI for managing authorization policies",
);

/**
 * OPC UA GUI Client
 */
export const opcua_client_gui = mkPackage(
  nixRaw`pkgs.opcua-client-gui`,
  "OPC UA GUI Client",
);

/**
 * Open source implementation of OPC UA
 */
export const open62541 = mkPackage(
  nixRaw`pkgs.open62541`,
  "Open source implementation of OPC UA",
);

/**
 * Font created to increase readability for readers with dyslexia
 */
export const open_dyslexic = mkPackage(
  nixRaw`pkgs.open-dyslexic`,
  "Font created to increase readability for readers with dyslexia",
);

  /**
   * Client side implementation of the eCard-API-Framework (BSI
TR-03112) and related international standards, such as ISO/IEC 24727
   */
export const open_ecard = mkPackage(
  nixRaw`pkgs.open-ecard`,
  "Client side implementation of the eCard-API-Framework (BSI\n      TR-03112) and related international standards, such as ISO/IEC 24727",
);

/**
 * A collection of beautiful free and open source fonts
 */
export const open_fonts = mkPackage(
  nixRaw`pkgs.open-fonts`,
  "A collection of beautiful free and open source fonts",
);

/**
 * Simple web extension to open videos in mpv
 */
export const open_in_mpv = mkPackage(
  nixRaw`pkgs.open-in-mpv`,
  "Simple web extension to open videos in mpv",
);

/**
 * OpenAI's Code Interpreter in your terminal, running locally
 */
export const open_interpreter = mkPackage(
  nixRaw`pkgs.open-interpreter`,
  "OpenAI's Code Interpreter in your terminal, running locally",
);

/**
 * iSNS server and client for Linux
 */
export const open_isns = mkPackage(
  nixRaw`pkgs.open-isns`,
  "iSNS server and client for Linux",
);

/**
 * Digitally sign PDF files from your commandline
 */
export const open_pdf_sign = mkPackage(
  nixRaw`pkgs.open-pdf-sign`,
  "Digitally sign PDF files from your commandline",
);

/**
 * General-purpose policy engine
 */
export const open_policy_agent = mkPackage(
  nixRaw`pkgs.open-policy-agent`,
  "General-purpose policy engine",
);

/**
 * Open Sans fonts
 */
export const open_sans = mkPackage(
  nixRaw`pkgs.open-sans`,
  "Open Sans fonts",
);

/**
 * Libre and modular OSC / MIDI controller
 */
export const open_stage_control = mkPackage(
  nixRaw`pkgs.open-stage-control`,
  "Libre and modular OSC / MIDI controller",
);

/**
 * Set of tools for VMWare guests to improve host-guest interaction
 */
export const open_vm_tools = mkPackage(
  nixRaw`pkgs.open-vm-tools`,
  "Set of tools for VMWare guests to improve host-guest interaction",
);

/**
 * Set of tools for VMWare guests to improve host-guest interaction
 */
export const open_vm_tools_headless = mkPackage(
  nixRaw`pkgs.open-vm-tools-headless`,
  "Set of tools for VMWare guests to improve host-guest interaction",
);

/**
 * A project to maintain and enhance the Watcom C, C++, and Fortran cross compilers and tools
 */
export const open_watcom_bin = mkPackage(
  nixRaw`pkgs.open-watcom-bin`,
  "A project to maintain and enhance the Watcom C, C++, and Fortran cross compilers and tools",
);

/**
 * A project to maintain and enhance the Watcom C, C++, and Fortran cross compilers and tools
 */
export const open_watcom_bin_unwrapped = mkPackage(
  nixRaw`pkgs.open-watcom-bin-unwrapped`,
  "A project to maintain and enhance the Watcom C, C++, and Fortran cross compilers and tools",
);

/**
 * The v2 fork of the Open Watcom suite of compilers and tools
 */
export const open_watcom_v2 = mkPackage(
  nixRaw`pkgs.open-watcom-v2`,
  "The v2 fork of the Open Watcom suite of compilers and tools",
);

/**
 * The v2 fork of the Open Watcom suite of compilers and tools
 */
export const open_watcom_v2_unwrapped = mkPackage(
  nixRaw`pkgs.open-watcom-v2-unwrapped`,
  "The v2 fork of the Open Watcom suite of compilers and tools",
);

/**
 * State-of-the-art MaxSAT and Pseudo-Boolean solver
 */
export const open_wbo = mkPackage(
  nixRaw`pkgs.open-wbo`,
  "State-of-the-art MaxSAT and Pseudo-Boolean solver",
);

/**
 * Open AFS client
 */
export const openafs = mkPackage(
  nixRaw`pkgs.openafs`,
  "Open AFS client",
);

/**
 * Python client library for the OpenAI API
 */
export const openai = mkPackage(
  nixRaw`pkgs.openai`,
  "Python client library for the OpenAI API",
);

/**
 * Python client library for the OpenAI API
 */
export const openai_full = mkPackage(
  nixRaw`pkgs.openai-full`,
  "Python client library for the OpenAI API",
);

/**
 * General-purpose speech recognition model
 */
export const openai_whisper = mkPackage(
  nixRaw`pkgs.openai-whisper`,
  "General-purpose speech recognition model",
);

/**
 * Port of OpenAI's Whisper model in C/C++
 */
export const openai_whisper_cpp = mkPackage(
  nixRaw`pkgs.openai-whisper-cpp`,
  "Port of OpenAI's Whisper model in C/C++",
);

/**
 * OpenAL alternative
 */
export const openal = mkPackage(
  nixRaw`pkgs.openal`,
  "OpenAL alternative",
);

/**
 * OpenAL alternative
 */
export const openalSoft = mkPackage(
  nixRaw`pkgs.openalSoft`,
  "OpenAL alternative",
);

/**
 * Helps fetch data from Suunto Ambit GPS watches
 */
export const openambit = mkPackage(
  nixRaw`pkgs.openambit`,
  "Helps fetch data from Suunto Ambit GPS watches",
);

/**
 * Allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an OpenAPI Spec
 */
export const openapi_generator_cli = mkPackage(
  nixRaw`pkgs.openapi-generator-cli`,
  "Allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an OpenAPI Spec",
);

/**
 * Allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an OpenAPI Spec
 */
export const openapi_generator_cli_unstable = mkPackage(
  nixRaw`pkgs.openapi-generator-cli-unstable`,
  "Allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an OpenAPI Spec",
);

/**
 * A fast-paced 3D first-person shooter, similar to id Software Inc.'s Quake III Arena
 */
export const openarena = mkPackage(
  nixRaw`pkgs.openarena`,
  "A fast-paced 3D first-person shooter, similar to id Software Inc.'s Quake III Arena",
);

/**
 * A toolbox designed to speak the many languages of chemical data
 */
export const openbabel = mkPackage(
  nixRaw`pkgs.openbabel`,
  "A toolbox designed to speak the many languages of chemical data",
);

/**
 * A toolbox designed to speak the many languages of chemical data
 */
export const openbabel2 = mkPackage(
  nixRaw`pkgs.openbabel2`,
  "A toolbox designed to speak the many languages of chemical data",
);

/**
 * A toolbox designed to speak the many languages of chemical data
 */
export const openbabel3 = mkPackage(
  nixRaw`pkgs.openbabel3`,
  "A toolbox designed to speak the many languages of chemical data",
);

/**
 * A free implementation of the Border Gateway Protocol, Version 4. It allows ordinary machines to be used as routers exchanging routes with other systems speaking the BGP protocol
 */
export const openbgpd = mkPackage(
  nixRaw`pkgs.openbgpd`,
  "A free implementation of the Border Gateway Protocol, Version 4. It allows ordinary machines to be used as routers exchanging routes with other systems speaking the BGP protocol",
);

/**
 * Basic Linear Algebra Subprograms
 */
export const openblas = mkPackage(
  nixRaw`pkgs.openblas`,
  "Basic Linear Algebra Subprograms",
);

/**
 * Basic Linear Algebra Subprograms
 */
export const openblasCompat = mkPackage(
  nixRaw`pkgs.openblasCompat`,
  "Basic Linear Algebra Subprograms",
);

/**
 * Interactive whiteboard application
 */
export const openboard = mkPackage(
  nixRaw`pkgs.openboard`,
  "Interactive whiteboard application",
);

/**
 * Linux SDL/ImGui edition software for viewing .brd files
 */
export const openboardview = mkPackage(
  nixRaw`pkgs.openboardview`,
  "Linux SDL/ImGui edition software for viewing .brd files",
);

/**
 * X window manager for non-desktop embedded systems
 */
export const openbox = mkPackage(
  nixRaw`pkgs.openbox`,
  "X window manager for non-desktop embedded systems",
);

/**
 * Dynamic XDG menu generator for Openbox
 */
export const openbox_menu = mkPackage(
  nixRaw`pkgs.openbox-menu`,
  "Dynamic XDG menu generator for Openbox",
);

/**
 * A tool to edit resource files (BRF)
 */
export const openbrf = mkPackage(
  nixRaw`pkgs.openbrf`,
  "A tool to edit resource files (BRF)",
);

/**
 * An implementation of Sun's Basic Security Module (BSM) security audit API and file format
 */
export const openbsm = mkPackage(
  nixRaw`pkgs.openbsm`,
  "An implementation of Sun's Basic Security Module (BSM) security audit API and file format",
);

/**
 * Open source program for Bayesian modelling based on MCMC
 */
export const openbugs = mkPackage(
  nixRaw`pkgs.openbugs`,
  "Open source program for Bayesian modelling based on MCMC",
);

/**
 * Open CASCADE Technology, libraries for 3D modeling and numerical simulation
 */
export const opencascade_occt = mkPackage(
  nixRaw`pkgs.opencascade-occt`,
  "Open CASCADE Technology, libraries for 3D modeling and numerical simulation",
);

/**
 * Kernel driver and development library to control serial CBM devices
 */
export const opencbm = mkPackage(
  nixRaw`pkgs.opencbm`,
  "Kernel driver and development library to control serial CBM devices",
);

/**
 * A project for conversion between Traditional and Simplified Chinese
 */
export const opencc = mkPackage(
  nixRaw`pkgs.opencc`,
  "A project for conversion between Traditional and Simplified Chinese",
);

/**
 * A clang wrapper library with an OpenCL-oriented API and the ability to compile OpenCL C kernels to SPIR-V modules
 */
export const opencl_clang = mkPackage(
  nixRaw`pkgs.opencl-clang`,
  "A clang wrapper library with an OpenCL-oriented API and the ability to compile OpenCL C kernels to SPIR-V modules",
);

/**
 * OpenCL Host API C++ bindings
 */
export const opencl_clhpp = mkPackage(
  nixRaw`pkgs.opencl-clhpp`,
  "OpenCL Host API C++ bindings",
);

/**
 * Khronos OpenCL headers version 2023.02.06
 */
export const opencl_headers = mkPackage(
  nixRaw`pkgs.opencl-headers`,
  "Khronos OpenCL headers version 2023.02.06",
);

/**
 * A tool to dump OpenCL platform/device information
 */
export const opencl_info = mkPackage(
  nixRaw`pkgs.opencl-info`,
  "A tool to dump OpenCL platform/device information",
);

/**
 * A library for handling the COLLADA file format
 */
export const opencollada = mkPackage(
  nixRaw`pkgs.opencollada`,
  "A library for handling the COLLADA file format",
);

/**
 * A color management framework for visual effects and animation
 */
export const opencolorio = mkPackage(
  nixRaw`pkgs.opencolorio`,
  "A color management framework for visual effects and animation",
);

/**
 * A color management framework for visual effects and animation
 */
export const opencolorio_1 = mkPackage(
  nixRaw`pkgs.opencolorio_1`,
  "A color management framework for visual effects and animation",
);

/**
 * Reimplementation of OpenVR, translating calls to OpenXR
 */
export const opencomposite = mkPackage(
  nixRaw`pkgs.opencomposite`,
  "Reimplementation of OpenVR, translating calls to OpenXR",
);

export const opencomposite_helper = mkPackage(
  nixRaw`pkgs.opencomposite-helper`,
  "",
);

/**
 * VPN Client for Cisco's AnyConnect SSL VPN
 */
export const openconnect = mkPackage(
  nixRaw`pkgs.openconnect`,
  "VPN Client for Cisco's AnyConnect SSL VPN",
);

/**
 * VPN Client for Cisco's AnyConnect SSL VPN
 */
export const openconnect_openssl = mkPackage(
  nixRaw`pkgs.openconnect_openssl`,
  "VPN Client for Cisco's AnyConnect SSL VPN",
);

    /**
     * Library of OpenCORE Framework implementation of Adaptive Multi Rate Narrowband and Wideband (AMR-NB and AMR-WB) speech codec.
Library of VisualOn implementation of Adaptive Multi Rate Wideband (AMR-WB)
     */
export const opencore_amr = mkPackage(
  nixRaw`pkgs.opencore-amr`,
  "Library of OpenCORE Framework implementation of Adaptive Multi Rate Narrowband and Wideband (AMR-NB and AMR-WB) speech codec.\n    Library of VisualOn implementation of Adaptive Multi Rate Wideband (AMR-WB)",
);

/**
 * Linux and Mac OS support for the CorsairLink Devices 
 */
export const opencorsairlink = mkPackage(
  nixRaw`pkgs.opencorsairlink`,
  "Linux and Mac OS support for the CorsairLink Devices ",
);

/**
 * A concise ChartPlotter/Navigator
 */
export const opencpn = mkPackage(
  nixRaw`pkgs.opencpn`,
  "A concise ChartPlotter/Navigator",
);

/**
 * PKCS#11 implementation for Linux
 */
export const opencryptoki = mkPackage(
  nixRaw`pkgs.opencryptoki`,
  "PKCS#11 implementation for Linux",
);

/**
 * Constructive Solid Geometry library
 */
export const opencsg = mkPackage(
  nixRaw`pkgs.opencsg`,
  "Constructive Solid Geometry library",
);

/**
 * Drivers for several smart card readers
 */
export const openct = mkPackage(
  nixRaw`pkgs.openct`,
  "Drivers for several smart card readers",
);

/**
 * Open Computer Vision Library with more than 500 algorithms
 */
export const opencv = mkPackage(
  nixRaw`pkgs.opencv`,
  "Open Computer Vision Library with more than 500 algorithms",
);

/**
 * Open Computer Vision Library with more than 500 algorithms
 */
export const opencv2 = mkPackage(
  nixRaw`pkgs.opencv2`,
  "Open Computer Vision Library with more than 500 algorithms",
);

/**
 * Open Computer Vision Library with more than 500 algorithms
 */
export const opencv3 = mkPackage(
  nixRaw`pkgs.opencv3`,
  "Open Computer Vision Library with more than 500 algorithms",
);

/**
 * Open Computer Vision Library with more than 500 algorithms
 */
export const opencv3WithoutCuda = mkPackage(
  nixRaw`pkgs.opencv3WithoutCuda`,
  "Open Computer Vision Library with more than 500 algorithms",
);

/**
 * Open Computer Vision Library with more than 500 algorithms
 */
export const opencv4 = mkPackage(
  nixRaw`pkgs.opencv4`,
  "Open Computer Vision Library with more than 500 algorithms",
);

/**
 * Extremely lightweight but extensible database access library written in C
 */
export const opendbx = mkPackage(
  nixRaw`pkgs.opendbx`,
  "Extremely lightweight but extensible database access library written in C",
);

/**
 * A C++11 Kademlia distributed hash table implementation
 */
export const opendht = mkPackage(
  nixRaw`pkgs.opendht`,
  "A C++11 Kademlia distributed hash table implementation",
);

/**
 * C library for producing DKIM-aware applications and an open source milter for providing DKIM service
 */
export const opendkim = mkPackage(
  nixRaw`pkgs.opendkim`,
  "C library for producing DKIM-aware applications and an open source milter for providing DKIM service",
);

/**
 * A free open source software implementation of the DMARC specification
 */
export const opendmarc = mkPackage(
  nixRaw`pkgs.opendmarc`,
  "A free open source software implementation of the DMARC specification",
);

/**
 * An open Apple AirDrop implementation written in Python
 */
export const opendrop = mkPackage(
  nixRaw`pkgs.opendrop`,
  "An open Apple AirDrop implementation written in Python",
);

/**
 * Dune, Reinvented
 */
export const opendune = mkPackage(
  nixRaw`pkgs.opendune`,
  "Dune, Reinvented",
);

/**
 * An open source, real time strategy game sharing game elements with the Dungeon Keeper series and Evil Genius
 */
export const opendungeons = mkPackage(
  nixRaw`pkgs.opendungeons`,
  "An open source, real time strategy game sharing game elements with the Dungeon Keeper series and Evil Genius",
);

/**
 * A multi-paradigm functional and object-oriented programming language
 */
export const opendylan_bin = mkPackage(
  nixRaw`pkgs.opendylan_bin`,
  "A multi-paradigm functional and object-oriented programming language",
);

/**
 * Open Source Electromagnetic Field Solver
 */
export const openems = mkPackage(
  nixRaw`pkgs.openems`,
  "Open Source Electromagnetic Field Solver",
);

/**
 * Fast, light, robust Ethereum implementation
 */
export const openethereum = mkPackage(
  nixRaw`pkgs.openethereum`,
  "Fast, light, robust Ethereum implementation",
);

/**
 * A high dynamic-range (HDR) image file format
 */
export const openexr = mkPackage(
  nixRaw`pkgs.openexr`,
  "A high dynamic-range (HDR) image file format",
);

/**
 * A high dynamic-range (HDR) image file format
 */
export const openexr_2 = mkPackage(
  nixRaw`pkgs.openexr_2`,
  "A high dynamic-range (HDR) image file format",
);

/**
 * A high dynamic-range (HDR) image file format
 */
export const openexr_3 = mkPackage(
  nixRaw`pkgs.openexr_3`,
  "A high dynamic-range (HDR) image file format",
);

/**
 * OpenEXR files able to isolate any object of a CG image with a perfect antialiazing
 */
export const openexrid_unstable = mkPackage(
  nixRaw`pkgs.openexrid-unstable`,
  "OpenEXR files able to isolate any object of a CG image with a perfect antialiazing",
);

/**
 * Application-level Forward Erasure Correction codes
 */
export const openfec = mkPackage(
  nixRaw`pkgs.openfec`,
  "Application-level Forward Erasure Correction codes",
);

/**
 * Client for PPP+SSL VPN tunnel services
 */
export const openfortivpn = mkPackage(
  nixRaw`pkgs.openfortivpn`,
  "Client for PPP+SSL VPN tunnel services",
);

/**
 * Universal utility for programming FPGAs
 */
export const openfpgaloader = mkPackage(
  nixRaw`pkgs.openfpgaloader`,
  "Universal utility for programming FPGAs",
);

/**
 * Library for working with finite-state transducers
 */
export const openfst = mkPackage(
  nixRaw`pkgs.openfst`,
  "Library for working with finite-state transducers",
);

/**
 * Image processing plug-in standard
 */
export const openfx = mkPackage(
  nixRaw`pkgs.openfx`,
  "Image processing plug-in standard",
);

/**
 * Library to make and modify n-gram language models encoded as weighted finite-state transducers
 */
export const opengrm_ngram = mkPackage(
  nixRaw`pkgs.opengrm-ngram`,
  "Library to make and modify n-gram language models encoded as weighted finite-state transducers",
);

/**
 * Source code search and cross reference engine
 */
export const opengrok = mkPackage(
  nixRaw`pkgs.opengrok`,
  "Source code search and cross reference engine",
);

/**
 * A codec library which supports H.264 encoding and decoding
 */
export const openh264 = mkPackage(
  nixRaw`pkgs.openh264`,
  "A codec library which supports H.264 encoding and decoding",
);

/**
 * Free software for Hantek and compatible (Voltcraft/Darkwire/Protek/Acetech) USB digital signal oscilloscopes
 */
export const openhantek6022 = mkPackage(
  nixRaw`pkgs.openhantek6022`,
  "Free software for Hantek and compatible (Voltcraft/Darkwire/Protek/Acetech) USB digital signal oscilloscopes",
);

/**
 * Library API and drivers immersive technology
 */
export const openhmd = mkPackage(
  nixRaw`pkgs.openhmd`,
  "Library API and drivers immersive technology",
);

/**
 * High-Performance Denoising Library for Ray Tracing
 */
export const openimagedenoise = mkPackage(
  nixRaw`pkgs.openimagedenoise`,
  "High-Performance Denoising Library for Ray Tracing",
);

/**
 * A library and tools for reading and writing images
 */
export const openimageio = mkPackage(
  nixRaw`pkgs.openimageio`,
  "A library and tools for reading and writing images",
);

/**
 * A user-level library that provides a higher-level abstraction of IPMI and generic services
 */
export const openipmi = mkPackage(
  nixRaw`pkgs.openipmi`,
  "A user-level library that provides a higher-level abstraction of IPMI and generic services",
);

/**
 * A high performance, transport independent, multi-platform implementation of RFC3720
 */
export const openiscsi = mkPackage(
  nixRaw`pkgs.openiscsi`,
  "A high performance, transport independent, multi-platform implementation of RFC3720",
);

/**
 * An implementation of DSSSL, an ISO standard for formatting SGML (and XML) documents
 */
export const openjade = mkPackage(
  nixRaw`pkgs.openjade`,
  "An implementation of DSSSL, an ISO standard for formatting SGML (and XML) documents",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk = mkPackage(
  nixRaw`pkgs.openjdk`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk11 = mkPackage(
  nixRaw`pkgs.openjdk11`,
  "The open-source Java Development Kit",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const openjdk11_bootstrap = mkPackage(
  nixRaw`pkgs.openjdk11-bootstrap`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk11_headless = mkPackage(
  nixRaw`pkgs.openjdk11_headless`,
  "The open-source Java Development Kit",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const openjdk16_bootstrap = mkPackage(
  nixRaw`pkgs.openjdk16-bootstrap`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk17 = mkPackage(
  nixRaw`pkgs.openjdk17`,
  "The open-source Java Development Kit",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const openjdk17_bootstrap = mkPackage(
  nixRaw`pkgs.openjdk17-bootstrap`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk17_headless = mkPackage(
  nixRaw`pkgs.openjdk17_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk19 = mkPackage(
  nixRaw`pkgs.openjdk19`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk19_headless = mkPackage(
  nixRaw`pkgs.openjdk19_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk20 = mkPackage(
  nixRaw`pkgs.openjdk20`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk20_headless = mkPackage(
  nixRaw`pkgs.openjdk20_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk21 = mkPackage(
  nixRaw`pkgs.openjdk21`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk21_headless = mkPackage(
  nixRaw`pkgs.openjdk21_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk8 = mkPackage(
  nixRaw`pkgs.openjdk8`,
  "The open-source Java Development Kit",
);

/**
 * AdoptOpenJDK, prebuilt OpenJDK binary
 */
export const openjdk8_bootstrap = mkPackage(
  nixRaw`pkgs.openjdk8-bootstrap`,
  "AdoptOpenJDK, prebuilt OpenJDK binary",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk8_headless = mkPackage(
  nixRaw`pkgs.openjdk8_headless`,
  "The open-source Java Development Kit",
);

/**
 * The open-source Java Development Kit
 */
export const openjdk_headless = mkPackage(
  nixRaw`pkgs.openjdk_headless`,
  "The open-source Java Development Kit",
);

/**
 * The next-generation Java client toolkit
 */
export const openjfx = mkPackage(
  nixRaw`pkgs.openjfx`,
  "The next-generation Java client toolkit",
);

/**
 * The next-generation Java client toolkit
 */
export const openjfx11 = mkPackage(
  nixRaw`pkgs.openjfx11`,
  "The next-generation Java client toolkit",
);

/**
 * The next-generation Java client toolkit
 */
export const openjfx15 = mkPackage(
  nixRaw`pkgs.openjfx15`,
  "The next-generation Java client toolkit",
);

/**
 * The next-generation Java client toolkit
 */
export const openjfx17 = mkPackage(
  nixRaw`pkgs.openjfx17`,
  "The next-generation Java client toolkit",
);

/**
 * The next-generation Java client toolkit
 */
export const openjfx19 = mkPackage(
  nixRaw`pkgs.openjfx19`,
  "The next-generation Java client toolkit",
);

/**
 * The next-generation Java client toolkit
 */
export const openjfx20 = mkPackage(
  nixRaw`pkgs.openjfx20`,
  "The next-generation Java client toolkit",
);

/**
 * The next-generation Java client toolkit
 */
export const openjfx21 = mkPackage(
  nixRaw`pkgs.openjfx21`,
  "The next-generation Java client toolkit",
);

/**
 * An open-source engine for Star Wars Jedi Academy game
 */
export const openjk = mkPackage(
  nixRaw`pkgs.openjk`,
  "An open-source engine for Star Wars Jedi Academy game",
);

/**
 * Open-source JPEG 2000 codec written in C language
 */
export const openjpeg = mkPackage(
  nixRaw`pkgs.openjpeg`,
  "Open-source JPEG 2000 codec written in C language",
);

/**
 * Open source Geographic Information System (GIS) written in the Java programming language
 */
export const openjump = mkPackage(
  nixRaw`pkgs.openjump`,
  "Open source Geographic Information System (GIS) written in the Java programming language",
);

/**
 * An open source implementation of the Lightweight Directory Access Protocol
 */
export const openldap = mkPackage(
  nixRaw`pkgs.openldap`,
  "An open source implementation of the Lightweight Directory Access Protocol",
);

/**
 * The Kubernetes IDE
 */
export const openlens = mkPackage(
  nixRaw`pkgs.openlens`,
  "The Kubernetes IDE",
);

/**
 * High quality system independent, portable, open source libm implementation
 */
export const openlibm = mkPackage(
  nixRaw`pkgs.openlibm`,
  "High quality system independent, portable, open source libm implementation",
);

/**
 * Real-time game with Worms-like shooting
 */
export const openlierox = mkPackage(
  nixRaw`pkgs.openlierox`,
  "Real-time game with Worms-like shooting",
);

/**
 * An open source re-implementation of Chris Sawyer's Locomotion
 */
export const openloco = mkPackage(
  nixRaw`pkgs.openloco`,
  "An open source re-implementation of Chris Sawyer's Locomotion",
);

/**
 * Free church presentation software
 */
export const openlp = mkPackage(
  nixRaw`pkgs.openlp`,
  "Free church presentation software",
);

/**
 * Free church presentation software
 */
export const openlpFull = mkPackage(
  nixRaw`pkgs.openlpFull`,
  "Free church presentation software",
);

/**
 * Toolkit for molecular simulation using high performance GPU code
 */
export const openmm = mkPackage(
  nixRaw`pkgs.openmm`,
  "Toolkit for molecular simulation using high performance GPU code",
);

/**
 * Open-source emojis for designers, developers and everyone else
 */
export const openmoji_black = mkPackage(
  nixRaw`pkgs.openmoji-black`,
  "Open-source emojis for designers, developers and everyone else",
);

/**
 * Open-source emojis for designers, developers and everyone else
 */
export const openmoji_color = mkPackage(
  nixRaw`pkgs.openmoji-color`,
  "Open-source emojis for designers, developers and everyone else",
);

/**
 * Advanced quantum chemistry software package
 */
export const openmolcas = mkPackage(
  nixRaw`pkgs.openmolcas`,
  "Advanced quantum chemistry software package",
);

/**
 * Open source MPI-3 implementation
 */
export const openmpi = mkPackage(
  nixRaw`pkgs.openmpi`,
  "Open source MPI-3 implementation",
);

/**
 * The MSX emulator that aims for perfection
 */
export const openmsx = mkPackage(
  nixRaw`pkgs.openmsx`,
  "The MSX emulator that aims for perfection",
);

/**
 * A library for computer-vision scientists and targeted for the Multiple View Geometry community
 */
export const openmvg = mkPackage(
  nixRaw`pkgs.openmvg`,
  "A library for computer-vision scientists and targeted for the Multiple View Geometry community",
);

/**
 * Open Multi-View Stereo reconstruction library
 */
export const openmvs = mkPackage(
  nixRaw`pkgs.openmvs`,
  "Open Multi-View Stereo reconstruction library",
);

/**
 * An unofficial open source engine reimplementation of the game Morrowind
 */
export const openmw = mkPackage(
  nixRaw`pkgs.openmw`,
  "An unofficial open source engine reimplementation of the game Morrowind",
);

/**
 * Multiplayer for TES3:Morrowind based on OpenMW
 */
export const openmw_tes3mp = mkPackage(
  nixRaw`pkgs.openmw-tes3mp`,
  "Multiplayer for TES3:Morrowind based on OpenMW",
);

/**
 * OpenBSD NTP daemon (Debian port)
 */
export const openntpd = mkPackage(
  nixRaw`pkgs.openntpd`,
  "OpenBSD NTP daemon (Debian port)",
);

/**
 * OpenBSD NTP daemon (Debian port)
 */
export const openntpd_nixos = mkPackage(
  nixRaw`pkgs.openntpd_nixos`,
  "OpenBSD NTP daemon (Debian port)",
);

/**
 * An open source implementation of the Object Exchange (OBEX) protocol
 */
export const openobex = mkPackage(
  nixRaw`pkgs.openobex`,
  "An open source implementation of the Object Exchange (OBEX) protocol",
);

/**
 * Free and Open On-Chip Debugging, In-System Programming and Boundary-Scan Testing
 */
export const openocd = mkPackage(
  nixRaw`pkgs.openocd`,
  "Free and Open On-Chip Debugging, In-System Programming and Boundary-Scan Testing",
);

/**
 * OpenOCD fork for rp2040 microcontroller
 */
export const openocd_rp2040 = mkPackage(
  nixRaw`pkgs.openocd-rp2040`,
  "OpenOCD fork for rp2040 microcontroller",
);

/**
 * An orienteering mapmaking program
 */
export const openorienteering_mapper = mkPackage(
  nixRaw`pkgs.openorienteering-mapper`,
  "An orienteering mapmaking program",
);

/**
 * Atomic primitives for high performance, concurrent software
 */
export const openpa = mkPackage(
  nixRaw`pkgs.openpa`,
  "Atomic primitives for high performance, concurrent software",
);

/**
 * An open source PAM library that focuses on simplicity, correctness, and cleanliness
 */
export const openpam = mkPackage(
  nixRaw`pkgs.openpam`,
  "An open source PAM library that focuses on simplicity, correctness, and cleanliness",
);

/**
 * Intel Open Path Guiding Library
 */
export const openpgl = mkPackage(
  nixRaw`pkgs.openpgl`,
  "Intel Open Path Guiding Library",
);

/**
 * CLI tools for OpenPGP cards
 */
export const openpgp_card_tools = mkPackage(
  nixRaw`pkgs.openpgp-card-tools`,
  "CLI tools for OpenPGP cards",
);

/**
 * Open Source real-time strategy game engine for early Westwood games such as Command & Conquer: Red Alert. release version.
 */
export const openra = mkPackage(
  nixRaw`pkgs.openra`,
  "Open Source real-time strategy game engine for early Westwood games such as Command & Conquer: Red Alert. release version.",
);

/**
 * Open-source re-implementation of Westwood Studios' 2D Command and Conquer games
 */
export const openra_2019 = mkPackage(
  nixRaw`pkgs.openra_2019`,
  "Open-source re-implementation of Westwood Studios' 2D Command and Conquer games",
);

/**
 * An entirely open source user-space daemon that allows you to manage your Razer peripherals on GNU/Linux
 */
export const openrazer_daemon = mkPackage(
  nixRaw`pkgs.openrazer-daemon`,
  "An entirely open source user-space daemon that allows you to manage your Razer peripherals on GNU/Linux",
);

/**
 * Open source re-implementation of RollerCoaster Tycoon 2 (original game required)
 */
export const openrct2 = mkPackage(
  nixRaw`pkgs.openrct2`,
  "Open source re-implementation of RollerCoaster Tycoon 2 (original game required)",
);

/**
 * A program to manage /etc/resolv.conf
 */
export const openresolv = mkPackage(
  nixRaw`pkgs.openresolv`,
  "A program to manage /etc/resolv.conf",
);

/**
 * A fast web application server built on Nginx
 */
export const openresty = mkPackage(
  nixRaw`pkgs.openresty`,
  "A fast web application server built on Nginx",
);

/**
 * Open source RGB lighting control
 */
export const openrgb = mkPackage(
  nixRaw`pkgs.openrgb`,
  "Open source RGB lighting control",
);

/**
 * An effects plugin for OpenRGB
 */
export const openrgb_plugin_effects = mkPackage(
  nixRaw`pkgs.openrgb-plugin-effects`,
  "An effects plugin for OpenRGB",
);

/**
 * Sync your ARGB devices colors with hardware measures (CPU, GPU, fan speed, etc...)
 */
export const openrgb_plugin_hardwaresync = mkPackage(
  nixRaw`pkgs.openrgb-plugin-hardwaresync`,
  "Sync your ARGB devices colors with hardware measures (CPU, GPU, fan speed, etc...)",
);

/**
 * Open source RGB lighting control
 */
export const openrgb_with_all_plugins = mkPackage(
  nixRaw`pkgs.openrgb-with-all-plugins`,
  "Open source RGB lighting control",
);

/**
 * A webring for static site generators
 */
export const openring = mkPackage(
  nixRaw`pkgs.openring`,
  "A webring for static site generators",
);

/**
 * Tool that generates an AI-based risk score
 */
export const openrisk = mkPackage(
  nixRaw`pkgs.openrisk`,
  "Tool that generates an AI-based risk score",
);

/**
 * OpenROAD's unified application implementing an RTL-to-GDS flow
 */
export const openroad = mkPackage(
  nixRaw`pkgs.openroad`,
  "OpenROAD's unified application implementing an RTL-to-GDS flow",
);

/**
 * BSD-licensed implementation of rsync
 */
export const openrsync = mkPackage(
  nixRaw`pkgs.openrsync`,
  "BSD-licensed implementation of rsync",
);

/**
 * Offline Console Russian Dictionary (based on openrussian.org)
 */
export const openrussian_cli = mkPackage(
  nixRaw`pkgs.openrussian-cli`,
  "Offline Console Russian Dictionary (based on openrussian.org)",
);

/**
 * Unofficial open source recreation of the classic Grand Theft Auto III game executable
 */
export const openrw = mkPackage(
  nixRaw`pkgs.openrw`,
  "Unofficial open source recreation of the classic Grand Theft Auto III game executable",
);

/**
 * A low-level library written in C++ that provides support for producing and consuming SAML messages
 */
export const opensaml_cpp = mkPackage(
  nixRaw`pkgs.opensaml-cpp`,
  "A low-level library written in C++ that provides support for producing and consuming SAML messages",
);

/**
 * RISC-V Open Source Supervisor Binary Interface
 */
export const opensbi = mkPackage(
  nixRaw`pkgs.opensbi`,
  "RISC-V Open Source Supervisor Binary Interface",
);

/**
 * Set of libraries and utilities to access smart cards
 */
export const opensc = mkPackage(
  nixRaw`pkgs.opensc`,
  "Set of libraries and utilities to access smart cards",
);

/**
 * 3D parametric model compiler
 */
export const openscad = mkPackage(
  nixRaw`pkgs.openscad`,
  "3D parametric model compiler",
);

/**
 * A LSP (Language Server Protocol) server for OpenSCAD
 */
export const openscad_lsp = mkPackage(
  nixRaw`pkgs.openscad-lsp`,
  "A LSP (Language Server Protocol) server for OpenSCAD",
);

/**
 * A 3D graphics toolkit
 */
export const openscenegraph = mkPackage(
  nixRaw`pkgs.openscenegraph`,
  "A 3D graphics toolkit",
);

/**
 * A collection of command line diagnostic tools for storage devices
 */
export const openseachest = mkPackage(
  nixRaw`pkgs.openseachest`,
  "A collection of command line diagnostic tools for storage devices",
);

/**
 * Open Source, Distributed, RESTful Search Engine
 */
export const opensearch = mkPackage(
  nixRaw`pkgs.opensearch`,
  "Open Source, Distributed, RESTful Search Engine",
);

/**
 * Build, deploy, and manage your applications with Docker and Kubernetes
 */
export const openshift = mkPackage(
  nixRaw`pkgs.openshift`,
  "Build, deploy, and manage your applications with Docker and Kubernetes",
);

/**
 * Free, open-source video editor
 */
export const openshot_qt = mkPackage(
  nixRaw`pkgs.openshot-qt`,
  "Free, open-source video editor",
);

/**
 * A C library that provides a simple interface to read whole-slide images.
 */
export const openslide = mkPackage(
  nixRaw`pkgs.openslide`,
  "A C library that provides a simple interface to read whole-slide images.",
);

/**
 * An open-source implementation of the IETF Service Location Protocol
 */
export const openslp = mkPackage(
  nixRaw`pkgs.openslp`,
  "An open-source implementation of the IETF Service Location Protocol",
);

/**
 * Infiniband subnet manager
 */
export const opensm = mkPackage(
  nixRaw`pkgs.opensm`,
  "Infiniband subnet manager",
);

/**
 * A satisfiability modulo theory (SMT) solver
 */
export const opensmt = mkPackage(
  nixRaw`pkgs.opensmt`,
  "A satisfiability modulo theory (SMT) solver",
);

        /**
         * A free implementation of the server-side SMTP protocol as defined by
RFC 5321, with some additional standard extensions

         */
export const opensmtpd = mkPackage(
  nixRaw`pkgs.opensmtpd`,
  "A free implementation of the server-side SMTP protocol as defined by\nRFC 5321, with some additional standard extensions\n",
);

/**
 * Extra plugins for the OpenSMTPD mail server
 */
export const opensmtpd_extras = mkPackage(
  nixRaw`pkgs.opensmtpd-extras`,
  "Extra plugins for the OpenSMTPD mail server",
);

/**
 * OpenSMTPD filter for DKIM signing
 */
export const opensmtpd_filter_dkimsign = mkPackage(
  nixRaw`pkgs.opensmtpd-filter-dkimsign`,
  "OpenSMTPD filter for DKIM signing",
);

/**
 * OpenSMTPD filter integration for the Rspamd daemon
 */
export const opensmtpd_filter_rspamd = mkPackage(
  nixRaw`pkgs.opensmtpd-filter-rspamd`,
  "OpenSMTPD filter integration for the Rspamd daemon",
);

/**
 * An application firewall
 */
export const opensnitch = mkPackage(
  nixRaw`pkgs.opensnitch`,
  "An application firewall",
);

/**
 * An application firewall
 */
export const opensnitch_ui = mkPackage(
  nixRaw`pkgs.opensnitch-ui`,
  "An application firewall",
);

/**
 * Opensoldat is a unique 2D (side-view) multiplayer action game
 */
export const opensoldat = mkPackage(
  nixRaw`pkgs.opensoldat`,
  "Opensoldat is a unique 2D (side-view) multiplayer action game",
);

/**
 * A suite of SGML/XML processing tools
 */
export const opensp = mkPackage(
  nixRaw`pkgs.opensp`,
  "A suite of SGML/XML processing tools",
);

/**
 * A compatible client of Ace of Spades 0.75
 */
export const openspades = mkPackage(
  nixRaw`pkgs.openspades`,
  "A compatible client of Ace of Spades 0.75",
);

/**
 * A collection of special mathematical functions
 */
export const openspecfun = mkPackage(
  nixRaw`pkgs.openspecfun`,
  "A collection of special mathematical functions",
);

/**
 * Compiler for SPIN/PASM languages for Parallax Propeller MCU
 */
export const openspin = mkPackage(
  nixRaw`pkgs.openspin`,
  "Compiler for SPIN/PASM languages for Parallax Propeller MCU",
);

/**
 * An implementation of the SSH protocol
 */
export const openssh = mkPackage(
  nixRaw`pkgs.openssh`,
  "An implementation of the SSH protocol",
);

/**
 * An implementation of the SSH protocol with GSSAPI support
 */
export const openssh_gssapi = mkPackage(
  nixRaw`pkgs.openssh_gssapi`,
  "An implementation of the SSH protocol with GSSAPI support",
);

/**
 * An implementation of the SSH protocol with high performance networking patches
 */
export const openssh_hpn = mkPackage(
  nixRaw`pkgs.openssh_hpn`,
  "An implementation of the SSH protocol with high performance networking patches",
);

/**
 * A cryptographic library that implements the SSL and TLS protocols
 */
export const openssl = mkPackage(
  nixRaw`pkgs.openssl`,
  "A cryptographic library that implements the SSL and TLS protocols",
);

/**
 * A cryptographic library that implements the SSL and TLS protocols
 */
export const openssl_1_1 = mkPackage(
  nixRaw`pkgs.openssl_1_1`,
  "A cryptographic library that implements the SSL and TLS protocols",
);

/**
 * A cryptographic library that implements the SSL and TLS protocols
 */
export const openssl_3 = mkPackage(
  nixRaw`pkgs.openssl_3`,
  "A cryptographic library that implements the SSL and TLS protocols",
);

/**
 * A cryptographic library that implements the SSL and TLS protocols
 */
export const openssl_legacy = mkPackage(
  nixRaw`pkgs.openssl_legacy`,
  "A cryptographic library that implements the SSL and TLS protocols",
);

/**
 * OpenStack Command-line Client
 */
export const openstackclient = mkPackage(
  nixRaw`pkgs.openstackclient`,
  "OpenStack Command-line Client",
);

/**
 * An Open-Source subdivision surface library
 */
export const opensubdiv = mkPackage(
  nixRaw`pkgs.opensubdiv`,
  "An Open-Source subdivision surface library",
);

/**
 * A decompilation of Supaplex in C and SDL
 */
export const opensupaplex = mkPackage(
  nixRaw`pkgs.opensupaplex`,
  "A decompilation of Supaplex in C and SDL",
);

/**
 * Multi-backend implementation of SYCL for CPUs and GPUs
 */
export const opensycl = mkPackage(
  nixRaw`pkgs.opensycl`,
  "Multi-backend implementation of SYCL for CPUs and GPUs",
);

/**
 * Multi-backend implementation of SYCL for CPUs and GPUs
 */
export const opensyclWithRocm = mkPackage(
  nixRaw`pkgs.opensyclWithRocm`,
  "Multi-backend implementation of SYCL for CPUs and GPUs",
);

/**
 * Open source, cross-platform, user-mode tablet driver
 */
export const opentabletdriver = mkPackage(
  nixRaw`pkgs.opentabletdriver`,
  "Open source, cross-platform, user-mode tablet driver",
);

/**
 * A vendor-agnostic implementation on how to receive, process and export telemetry data
 */
export const opentelemetry_collector = mkPackage(
  nixRaw`pkgs.opentelemetry-collector`,
  "A vendor-agnostic implementation on how to receive, process and export telemetry data",
);

/**
 * OpenTelemetry Collector superset with additional community collectors
 */
export const opentelemetry_collector_contrib = mkPackage(
  nixRaw`pkgs.opentelemetry-collector-contrib`,
  "OpenTelemetry Collector superset with additional community collectors",
);

/**
 * Command-line tool to create and verify OpenTimestamps proofs
 */
export const opentimestamps_client = mkPackage(
  nixRaw`pkgs.opentimestamps-client`,
  "Command-line tool to create and verify OpenTimestamps proofs",
);

/**
 * Tool for building, changing, and versioning infrastructure
 */
export const opentofu = mkPackage(
  nixRaw`pkgs.opentofu`,
  "Tool for building, changing, and versioning infrastructure",
);

/**
 * Full-featured 2D animation creation software
 */
export const opentoonz = mkPackage(
  nixRaw`pkgs.opentoonz`,
  "Full-featured 2D animation creation software",
);

/**
 * C++ implementation of the OpenTracing API
 */
export const opentracing_cpp = mkPackage(
  nixRaw`pkgs.opentracing-cpp`,
  "C++ implementation of the OpenTracing API",
);

/**
 * Head tracking software for MS Windows, Linux, and Apple OSX
 */
export const opentrack = mkPackage(
  nixRaw`pkgs.opentrack`,
  "Head tracking software for MS Windows, Linux, and Apple OSX",
);

/**
 * Bittorrent tracker project which aims for minimal resource usage and is intended to run at your wlan router
 */
export const opentracker = mkPackage(
  nixRaw`pkgs.opentracker`,
  "Bittorrent tracker project which aims for minimal resource usage and is intended to run at your wlan router",
);

/**
 * Time series database with millisecond precision
 */
export const opentsdb = mkPackage(
  nixRaw`pkgs.opentsdb`,
  "Time series database with millisecond precision",
);

/**
 * Open source clone of the Microprose game "Transport Tycoon Deluxe"
 */
export const openttd = mkPackage(
  nixRaw`pkgs.openttd`,
  "Open source clone of the Microprose game \"Transport Tycoon Deluxe\"",
);

/**
 * Low-level (dis)assembler and linter for OpenTTD GRF files
 */
export const openttd_grfcodec = mkPackage(
  nixRaw`pkgs.openttd-grfcodec`,
  "Low-level (dis)assembler and linter for OpenTTD GRF files",
);

export const openttd_jgrpp = mkPackage(
  nixRaw`pkgs.openttd-jgrpp`,
  "",
);

/**
 * Compiler for OpenTTD NML files
 */
export const openttd_nml = mkPackage(
  nixRaw`pkgs.openttd-nml`,
  "Compiler for OpenTTD NML files",
);

/**
 * Multivariate probabilistic modeling and uncertainty treatment library
 */
export const openturns = mkPackage(
  nixRaw`pkgs.openturns`,
  "Multivariate probabilistic modeling and uncertainty treatment library",
);

/**
 * OpenTX Companion transmitter support software
 */
export const opentx = mkPackage(
  nixRaw`pkgs.opentx`,
  "OpenTX Companion transmitter support software",
);

/**
 * Open source port of the game "Tyrian"
 */
export const opentyrian = mkPackage(
  nixRaw`pkgs.opentyrian`,
  "Open source port of the game \"Tyrian\"",
);

/**
 * Open source singing synthesis platform and UTAU successor
 */
export const openutau = mkPackage(
  nixRaw`pkgs.openutau`,
  "Open source singing synthesis platform and UTAU successor",
);

/**
 * An open framework for voxel
 */
export const openvdb = mkPackage(
  nixRaw`pkgs.openvdb`,
  "An open framework for voxel",
);

/**
 * Portable OpenBSD vi for UNIX systems
 */
export const openvi = mkPackage(
  nixRaw`pkgs.openvi`,
  "Portable OpenBSD vi for UNIX systems",
);

/**
 * OpenVINO™ Toolkit repository
 */
export const openvino = mkPackage(
  nixRaw`pkgs.openvino`,
  "OpenVINO™ Toolkit repository",
);

/**
 * A robust and highly flexible tunneling application
 */
export const openvpn = mkPackage(
  nixRaw`pkgs.openvpn`,
  "A robust and highly flexible tunneling application",
);

/**
 * OpenVPN 3 Linux client
 */
export const openvpn3 = mkPackage(
  nixRaw`pkgs.openvpn3`,
  "OpenVPN 3 Linux client",
);

/**
 * LDAP authentication plugin for OpenVPN
 */
export const openvpn_auth_ldap = mkPackage(
  nixRaw`pkgs.openvpn-auth-ldap`,
  "LDAP authentication plugin for OpenVPN",
);

/**
 * Openvpn learn-address script to manage a hosts-like file
 */
export const openvpn_learnaddress = mkPackage(
  nixRaw`pkgs.openvpn_learnaddress`,
  "Openvpn learn-address script to manage a hosts-like file",
);

/**
 * An API and runtime that allows access to VR hardware from multiple vendors without requiring that applications have specific knowledge of the hardware they are targeting
 */
export const openvr = mkPackage(
  nixRaw`pkgs.openvr`,
  "An API and runtime that allows access to VR hardware from multiple vendors without requiring that applications have specific knowledge of the hardware they are targeting",
);

/**
 * Run VS Code on a remote machine
 */
export const openvscode_server = mkPackage(
  nixRaw`pkgs.openvscode-server`,
  "Run VS Code on a remote machine",
);

/**
 * A multilayer virtual switch
 */
export const openvswitch = mkPackage(
  nixRaw`pkgs.openvswitch`,
  "A multilayer virtual switch",
);

/**
 * A multilayer virtual switch
 */
export const openvswitch_lts = mkPackage(
  nixRaw`pkgs.openvswitch-lts`,
  "A multilayer virtual switch",
);

/**
 * A simple DSP library and command-line tool for Software Defined Radio
 */
export const openwebrx = mkPackage(
  nixRaw`pkgs.openwebrx`,
  "A simple DSP library and command-line tool for Software Defined Radio",
);

/**
 * Openwsman server implementation and client API with bindings
 */
export const openwsman = mkPackage(
  nixRaw`pkgs.openwsman`,
  "Openwsman server implementation and client API with bindings",
);

/**
 * Open source clone of UFO: Enemy Unknown
 */
export const openxcom = mkPackage(
  nixRaw`pkgs.openxcom`,
  "Open source clone of UFO: Enemy Unknown",
);

/**
 * Khronos OpenXR loader
 */
export const openxr_loader = mkPackage(
  nixRaw`pkgs.openxr-loader`,
  "Khronos OpenXR loader",
);

/**
 * Improved version of the X-Ray Engine, the game engine used in the world-famous S.T.A.L.K.E.R. game series by GSC Game World
 */
export const openxray = mkPackage(
  nixRaw`pkgs.openxray`,
  "Improved version of the X-Ray Engine, the game engine used in the world-famous S.T.A.L.K.E.R. game series by GSC Game World",
);

/**
 * Clean and sharp X11/Wayland cursor theme
 */
export const openzone_cursors = mkPackage(
  nixRaw`pkgs.openzone-cursors`,
  "Clean and sharp X11/Wayland cursor theme",
);

/**
 * C++ library to control Z-Wave Networks via a USB Z-Wave Controller
 */
export const openzwave = mkPackage(
  nixRaw`pkgs.openzwave`,
  "C++ library to control Z-Wave Networks via a USB Z-Wave Controller",
);

/**
 * Faster, safer and smarter web browser
 */
export const opera = mkPackage(
  nixRaw`pkgs.opera`,
  "Faster, safer and smarter web browser",
);

/**
 * SDK for building Kubernetes applications. Provides high level APIs, useful abstractions, and project scaffolding
 */
export const operator_sdk = mkPackage(
  nixRaw`pkgs.operator-sdk`,
  "SDK for building Kubernetes applications. Provides high level APIs, useful abstractions, and project scaffolding",
);

/**
 * A cross-assembler for the 6502 series of microprocessors
 */
export const ophis = mkPackage(
  nixRaw`pkgs.ophis`,
  "A cross-assembler for the 6502 series of microprocessors",
);

/**
 * A lightweight package management system based upon ipkg
 */
export const opkg = mkPackage(
  nixRaw`pkgs.opkg`,
  "A lightweight package management system based upon ipkg",
);

/**
 * Helper scripts for use with the opkg package manager
 */
export const opkg_utils = mkPackage(
  nixRaw`pkgs.opkg-utils`,
  "Helper scripts for use with the opkg package manager",
);

/**
 * A small cross-platform editor of the OPL3 FM banks of different formats
 */
export const opl3bankeditor = mkPackage(
  nixRaw`pkgs.opl3bankeditor`,
  "A small cross-platform editor of the OPL3 FM banks of different formats",
);

/**
 * A small cross-platform editor of the OPN2 FM banks of different formats
 */
export const opn2bankeditor = mkPackage(
  nixRaw`pkgs.opn2bankeditor`,
  "A small cross-platform editor of the OPN2 FM banks of different formats",
);

/**
 * OPN2 FM Chip Synthesizer
 */
export const opnplug = mkPackage(
  nixRaw`pkgs.opnplug`,
  "OPN2 FM Chip Synthesizer",
);

/**
 * Difficulty and pp calculator for osu!
 */
export const oppai_ng = mkPackage(
  nixRaw`pkgs.oppai-ng`,
  "Difficulty and pp calculator for osu!",
);

/**
 * System-wide profiler for Linux
 */
export const oprofile = mkPackage(
  nixRaw`pkgs.oprofile`,
  "System-wide profiler for Linux",
);

/**
 * Build and run nanos unikernels
 */
export const ops = mkPackage(
  nixRaw`pkgs.ops`,
  "Build and run nanos unikernels",
);

/**
 * An open source chat-ops bot framework
 */
export const opsdroid = mkPackage(
  nixRaw`pkgs.opsdroid`,
  "An open source chat-ops bot framework",
);

/**
 * OPTical ARchiver - it's a codec for encoding data on paper
 */
export const optar = mkPackage(
  nixRaw`pkgs.optar`,
  "OPTical ARchiver - it's a codec for encoding data on paper",
);

/**
 * A Minecraft 1.20.1 optimization mod
 */
export const optifine = mkPackage(
  nixRaw`pkgs.optifine`,
  "A Minecraft 1.20.1 optimization mod",
);

/**
 * Optimism is Ethereum, scaled
 */
export const optimism = mkPackage(
  nixRaw`pkgs.optimism`,
  "Optimism is Ethereum, scaled",
);

/**
 * A PNG optimizer
 */
export const optipng = mkPackage(
  nixRaw`pkgs.optipng`,
  "A PNG optimizer",
);

/**
 * A BASH wrapper for getopts, for simple command-line argument parsing
 */
export const optparse_bash = mkPackage(
  nixRaw`pkgs.optparse-bash`,
  "A BASH wrapper for getopts, for simple command-line argument parsing",
);

/**
 * Tools to work with opus encoded audio streams
 */
export const opusTools = mkPackage(
  nixRaw`pkgs.opusTools`,
  "Tools to work with opus encoded audio streams",
);

/**
 * High-level API for decoding and seeking in .opus files
 */
export const opusfile = mkPackage(
  nixRaw`pkgs.opusfile`,
  "High-level API for decoding and seeking in .opus files",
);

/**
 * Ogg Opus tags editor
 */
export const opustags = mkPackage(
  nixRaw`pkgs.opustags`,
  "Ogg Opus tags editor",
);

/**
 * A performant, and portable jq wrapper
 */
export const oq = mkPackage(
  nixRaw`pkgs.oq`,
  "A performant, and portable jq wrapper",
);

export const or1k_newlib = mkPackage(
  nixRaw`pkgs.or1k-newlib`,
  "",
);

/**
 * Google's software suite for combinatorial optimization.

 */
export const or_tools = mkPackage(
  nixRaw`pkgs.or-tools`,
  "Google's software suite for combinatorial optimization.\n",
);

/**
 * Oracle instant client libraries and sqlplus CLI
 */
export const oracle_instantclient = mkPackage(
  nixRaw`pkgs.oracle-instantclient`,
  "Oracle instant client libraries and sqlplus CLI",
);

export const oraclejdk = mkPackage(
  nixRaw`pkgs.oraclejdk`,
  "",
);

export const oraclejdk11 = mkPackage(
  nixRaw`pkgs.oraclejdk11`,
  "",
);

export const oraclejdk8 = mkPackage(
  nixRaw`pkgs.oraclejdk8`,
  "",
);

export const oraclejre = mkPackage(
  nixRaw`pkgs.oraclejre`,
  "",
);

export const oraclejre8 = mkPackage(
  nixRaw`pkgs.oraclejre8`,
  "",
);

/**
 * Oranchelo icon theme
 */
export const oranchelo_icon_theme = mkPackage(
  nixRaw`pkgs.oranchelo-icon-theme`,
  "Oranchelo icon theme",
);

/**
 * Generate beautiful landing pages for your developer tools
 */
export const oranda = mkPackage(
  nixRaw`pkgs.oranda`,
  "Generate beautiful landing pages for your developer tools",
);

/**
 * Scale-out network file system for use on high-end computing systems
 */
export const orangefs = mkPackage(
  nixRaw`pkgs.orangefs`,
  "Scale-out network file system for use on high-end computing systems",
);

/**
 * The ORAS project provides a way to push and pull OCI Artifacts to and from OCI Registries
 */
export const oras = mkPackage(
  nixRaw`pkgs.oras`,
  "The ORAS project provides a way to push and pull OCI Artifacts to and from OCI Registries",
);

/**
 * Config-free text editor and IDE limited to VT100
 */
export const orbiton = mkPackage(
  nixRaw`pkgs.orbiton`,
  "Config-free text editor and IDE limited to VT100",
);

/**
 * Geometric sans-serif for display purposes by Matt McInerney
 */
export const orbitron = mkPackage(
  nixRaw`pkgs.orbitron`,
  "Geometric sans-serif for display purposes by Matt McInerney",
);

/**
 * Cortex M SWO SWV Demux and Postprocess for the ORBTrace
 */
export const orbuculum = mkPackage(
  nixRaw`pkgs.orbuculum`,
  "Cortex M SWO SWV Demux and Postprocess for the ORBTrace",
);

/**
 * The Oil Runtime Compiler
 */
export const orc = mkPackage(
  nixRaw`pkgs.orc`,
  "The Oil Runtime Compiler",
);

/**
 * Screen reader
 */
export const orca = mkPackage(
  nixRaw`pkgs.orca`,
  "Screen reader",
);

/**
 * An esoteric programming language designed to quickly create procedural sequencers
 */
export const orca_c = mkPackage(
  nixRaw`pkgs.orca-c`,
  "An esoteric programming language designed to quickly create procedural sequencers",
);

/**
 * Potluck with different functions for different purposes that can be shared among C programs
 */
export const orcania = mkPackage(
  nixRaw`pkgs.orcania`,
  "Potluck with different functions for different purposes that can be shared among C programs",
);

/**
 * Orchestrator for running Tart Virtual Machines on a cluster of Apple Silicon devices
 */
export const orchard = mkPackage(
  nixRaw`pkgs.orchard`,
  "Orchestrator for running Tart Virtual Machines on a cluster of Apple Silicon devices",
);

/**
 * A Material Design theme for GNOME/GTK based desktop environments.
 */
export const orchis_theme = mkPackage(
  nixRaw`pkgs.orchis-theme`,
  "A Material Design theme for GNOME/GTK based desktop environments.",
);

/**
 * Get the contributor stats summary from all repos of any given organization
 */
export const org_stats = mkPackage(
  nixRaw`pkgs.org-stats`,
  "Get the contributor stats summary from all repos of any given organization",
);

/**
 * Detailed Offline Maps for Travellers, Tourists, Hikers and Cyclists
 */
export const organicmaps = mkPackage(
  nixRaw`pkgs.organicmaps`,
  "Detailed Offline Maps for Travellers, Tourists, Hikers and Cyclists",
);

export const orion = mkPackage(
  nixRaw`pkgs.orion`,
  "",
);

/**
 * Force programs to exclusively use tor network
 */
export const orjail = mkPackage(
  nixRaw`pkgs.orjail`,
  "Force programs to exclusively use tor network",
);

/**
 * A formatter for Haskell source code
 */
export const ormolu = mkPackage(
  nixRaw`pkgs.ormolu`,
  "A formatter for Haskell source code",
);

/**
 * Kinematics and Dynamics Library
 */
export const orocos_kdl = mkPackage(
  nixRaw`pkgs.orocos-kdl`,
  "Kinematics and Dynamics Library",
);

/**
 * A package manager for tools that use node_modules
 */
export const orogene = mkPackage(
  nixRaw`pkgs.orogene`,
  "A package manager for tools that use node_modules",
);

/**
 * A Curses-based RPN calculator
 */
export const orpie = mkPackage(
  nixRaw`pkgs.orpie`,
  "A Curses-based RPN calculator",
);

/**
 * Recharge the robot
 */
export const orthorobot = mkPackage(
  nixRaw`pkgs.orthorobot`,
  "Recharge the robot",
);

/**
 * A Real-Time Transport Protocol (RFC3550) stack. Part of the Linphone project.
 */
export const ortp = mkPackage(
  nixRaw`pkgs.ortp`,
  "A Real-Time Transport Protocol (RFC3550) stack. Part of the Linphone project.",
);

/**
 * A high performance, general purpose data compressor written in rust
 */
export const orz = mkPackage(
  nixRaw`pkgs.orz`,
  "A high performance, general purpose data compressor written in rust",
);

/**
 * Utility to detect other OSs on a set of drives
 */
export const os_prober = mkPackage(
  nixRaw`pkgs.os-prober`,
  "Utility to detect other OSs on a set of drives",
);

/**
 * A program that allows to copy/paste from a terminal using osc-52 control sequences.
 */
export const oscclip = mkPackage(
  nixRaw`pkgs.oscclip`,
  "A program that allows to copy/paste from a terminal using osc-52 control sequences.",
);

/**
 * Standalone lyrics fetcher/displayer
 */
export const osdlyrics = mkPackage(
  nixRaw`pkgs.osdlyrics`,
  "Standalone lyrics fetcher/displayer",
);

/**
 * Tool for extracting nested CI/CD supply chains and executing commands
 */
export const oshka = mkPackage(
  nixRaw`pkgs.oshka`,
  "Tool for extracting nested CI/CD supply chains and executing commands",
);

/**
 * An abstract base class to a generic linear programming (LP) solver
 */
export const osi = mkPackage(
  nixRaw`pkgs.osi`,
  "An abstract base class to a generic linear programming (LP) solver",
);

/**
 * Osinfo database of information about operating systems for virtualization provisioning tools
 */
export const osinfo_db = mkPackage(
  nixRaw`pkgs.osinfo-db`,
  "Osinfo database of information about operating systems for virtualization provisioning tools",
);

/**
 * Tools for managing the osinfo database
 */
export const osinfo_db_tools = mkPackage(
  nixRaw`pkgs.osinfo-db-tools`,
  "Tools for managing the osinfo database",
);

/**
 * Advanced shading language for production GI renderers
 */
export const osl = mkPackage(
  nixRaw`pkgs.osl`,
  "Advanced shading language for production GI renderers",
);

/**
 * OpenStreetMap data to PostgreSQL converter
 */
export const osm2pgsql = mkPackage(
  nixRaw`pkgs.osm2pgsql`,
  "OpenStreetMap data to PostgreSQL converter",
);

/**
 * Converter from OpenStreetMap data format to OpenOrienteering Mapper format
 */
export const osm2xmap = mkPackage(
  nixRaw`pkgs.osm2xmap`,
  "Converter from OpenStreetMap data format to OpenOrienteering Mapper format",
);

/**
 * GTK widget for displaying OpenStreetMap tiles
 */
export const osm_gps_map = mkPackage(
  nixRaw`pkgs.osm-gps-map`,
  "GTK widget for displaying OpenStreetMap tiles",
);

/**
 * Command line tools for transforming Open Street Map files
 */
export const osmctools = mkPackage(
  nixRaw`pkgs.osmctools`,
  "Command line tools for transforming Open Street Map files",
);

/**
 * A lightweight, portable, easy to use tool to convert MIDI to OSC and OSC to MIDI
 */
export const osmid = mkPackage(
  nixRaw`pkgs.osmid`,
  "A lightweight, portable, easy to use tool to convert MIDI to OSC and OSC to MIDI",
);

/**
 * Multipurpose command line tool for working with OpenStreetMap data based on the Osmium library
 */
export const osmium_tool = mkPackage(
  nixRaw`pkgs.osmium-tool`,
  "Multipurpose command line tool for working with OpenStreetMap data based on the Osmium library",
);

/**
 * A handy personal organizer
 */
export const osmo = mkPackage(
  nixRaw`pkgs.osmo`,
  "A handy personal organizer",
);

/**
 * GSM Base Station Controller
 */
export const osmo_bsc = mkPackage(
  nixRaw`pkgs.osmo-bsc`,
  "GSM Base Station Controller",
);

/**
 * Osmocom GSM Base Transceiver Station (BTS)
 */
export const osmo_bts = mkPackage(
  nixRaw`pkgs.osmo-bts`,
  "Osmocom GSM Base Transceiver Station (BTS)",
);

/**
 * Osmocom Gateway GPRS Support Node (GGSN), successor of OpenGGSN
 */
export const osmo_ggsn = mkPackage(
  nixRaw`pkgs.osmo-ggsn`,
  "Osmocom Gateway GPRS Support Node (GGSN), successor of OpenGGSN",
);

/**
 * Osmocom implementation of 3GPP Home Location Registr (HLR)
 */
export const osmo_hlr = mkPackage(
  nixRaw`pkgs.osmo-hlr`,
  "Osmocom implementation of 3GPP Home Location Registr (HLR)",
);

/**
 * Osmocom Home NodeB Gateway, for attaching femtocells to the 3G CN (OsmoMSC, OsmoSGSN)
 */
export const osmo_hnbgw = mkPackage(
  nixRaw`pkgs.osmo-hnbgw`,
  "Osmocom Home NodeB Gateway, for attaching femtocells to the 3G CN (OsmoMSC, OsmoSGSN)",
);

/**
 * (upper layers of) HomeNodeB
 */
export const osmo_hnodeb = mkPackage(
  nixRaw`pkgs.osmo-hnodeb`,
  "(upper layers of) HomeNodeB",
);

/**
 * Osmocom IuH library
 */
export const osmo_iuh = mkPackage(
  nixRaw`pkgs.osmo-iuh`,
  "Osmocom IuH library",
);

/**
 * Osmocom Media Gateway (MGW). speaks RTP and E1 as well as MGCP
 */
export const osmo_mgw = mkPackage(
  nixRaw`pkgs.osmo-mgw`,
  "Osmocom Media Gateway (MGW). speaks RTP and E1 as well as MGCP",
);

/**
 * Osmocom implementation of 3GPP Mobile Swtiching Centre (MSC)
 */
export const osmo_msc = mkPackage(
  nixRaw`pkgs.osmo-msc`,
  "Osmocom implementation of 3GPP Mobile Swtiching Centre (MSC)",
);

/**
 * Osmocom Packet control Unit (PCU): Network-side GPRS (RLC/MAC); BTS- or BSC-colocated
 */
export const osmo_pcu = mkPackage(
  nixRaw`pkgs.osmo-pcu`,
  "Osmocom Packet control Unit (PCU): Network-side GPRS (RLC/MAC); BTS- or BSC-colocated",
);

/**
 * Osmocom implementation of the 3GPP Serving GPRS Support Node (SGSN)
 */
export const osmo_sgsn = mkPackage(
  nixRaw`pkgs.osmo-sgsn`,
  "Osmocom implementation of the 3GPP Serving GPRS Support Node (SGSN)",
);

/**
 * This implements an interface between the MNCC (Mobile Network Call Control) interface of OsmoMSC (and also previously OsmoNITB) and SIP
 */
export const osmo_sip_connector = mkPackage(
  nixRaw`pkgs.osmo-sip-connector`,
  "This implements an interface between the MNCC (Mobile Network Call Control) interface of OsmoMSC (and also previously OsmoNITB) and SIP",
);

/**
 * Maps server providing tiles, geocoder, and router
 */
export const osmscout_server = mkPackage(
  nixRaw`pkgs.osmscout-server`,
  "Maps server providing tiles, geocoder, and router",
);

/**
 * Converts OSM data to GeoJSON
 */
export const osmtogeojson = mkPackage(
  nixRaw`pkgs.osmtogeojson`,
  "Converts OSM data to GeoJSON",
);

/**
 * OSP server implementation to allow GVM to remotely control an OpenVAS Scanner
 */
export const ospd_openvas = mkPackage(
  nixRaw`pkgs.ospd-openvas`,
  "OSP server implementation to allow GVM to remotely control an OpenVAS Scanner",
);

/**
 * A quadratic programming solver using operator splitting
 */
export const osqp = mkPackage(
  nixRaw`pkgs.osqp`,
  "A quadratic programming solver using operator splitting",
);

/**
 * SQL powered operating system instrumentation, monitoring, and analytics.
 */
export const osquery = mkPackage(
  nixRaw`pkgs.osquery`,
  "SQL powered operating system instrumentation, monitoring, and analytics.",
);

/**
 * Open Source Routing Machine computes shortest paths in a graph. It was designed to run well with map data from the Openstreetmap Project
 */
export const osrm_backend = mkPackage(
  nixRaw`pkgs.osrm-backend`,
  "Open Source Routing Machine computes shortest paths in a graph. It was designed to run well with map data from the Openstreetmap Project",
);

/**
 * Open source host-based instrusion detection system
 */
export const ossec = mkPackage(
  nixRaw`pkgs.ossec`,
  "Open source host-based instrusion detection system",
);

/**
 * OpenSSL based Authenticode signing for PE/MSI/Java CAB files
 */
export const osslsigncode = mkPackage(
  nixRaw`pkgs.osslsigncode`,
  "OpenSSL based Authenticode signing for PE/MSI/Java CAB files",
);

/**
 * A user friendly command line tool to access Alibaba Cloud OSS
 */
export const ossutil = mkPackage(
  nixRaw`pkgs.ossutil`,
  "A user friendly command line tool to access Alibaba Cloud OSS",
);

/**
 * A packet traffic generator and analyzer
 */
export const ostinato = mkPackage(
  nixRaw`pkgs.ostinato`,
  "A packet traffic generator and analyzer",
);

/**
 * Git for operating system binaries
 */
export const ostree = mkPackage(
  nixRaw`pkgs.ostree`,
  "Git for operating system binaries",
);

/**
 * Rust library with higher level APIs on top of the core ostree API
 */
export const ostree_rs_ext = mkPackage(
  nixRaw`pkgs.ostree-rs-ext`,
  "Rust library with higher level APIs on top of the core ostree API",
);

/**
 * A gorgeous modern sans-serif with a very long neck
 */
export const ostrich_sans = mkPackage(
  nixRaw`pkgs.ostrich-sans`,
  "A gorgeous modern sans-serif with a very long neck",
);

/**
 * Rhythm is just a *click* away (no score submission or multiplayer, see osu-lazer-bin)
 */
export const osu_lazer = mkPackage(
  nixRaw`pkgs.osu-lazer`,
  "Rhythm is just a *click* away (no score submission or multiplayer, see osu-lazer-bin)",
);

/**
 * Rhythm is just a *click* away (AppImage version for score submission and multiplayer, and binary distribution for Darwin systems)
 */
export const osu_lazer_bin = mkPackage(
  nixRaw`pkgs.osu-lazer-bin`,
  "Rhythm is just a *click* away (AppImage version for score submission and multiplayer, and binary distribution for Darwin systems)",
);

/**
 * Auditing tool for detecting vulnerabilities
 */
export const osv_detector = mkPackage(
  nixRaw`pkgs.osv-detector`,
  "Auditing tool for detecting vulnerabilities",
);

/**
 * Vulnerability scanner written in Go which uses the data provided by https://osv.dev
 */
export const osv_scanner = mkPackage(
  nixRaw`pkgs.osv-scanner`,
  "Vulnerability scanner written in Go which uses the data provided by https://osv.dev",
);

/**
 * Outputs current CPU temperature for OSX.
 */
export const osx_cpu_temp = mkPackage(
  nixRaw`pkgs.osx-cpu-temp`,
  "Outputs current CPU temperature for OSX.",
);

/**
 * A Plan 9-inspired way to share your OS X clipboard
 */
export const osxsnarf = mkPackage(
  nixRaw`pkgs.osxsnarf`,
  "A Plan 9-inspired way to share your OS X clipboard",
);

/**
 * A command-line tool for sending OpenTelemetry traces
 */
export const otel_cli = mkPackage(
  nixRaw`pkgs.otel-cli`,
  "A command-line tool for sending OpenTelemetry traces",
);

/**
 * OpenType to BDF font converter
 */
export const otf2bdf = mkPackage(
  nixRaw`pkgs.otf2bdf`,
  "OpenType to BDF font converter",
);

/**
 * Optimized OpenType builder and inspector
 */
export const otfcc = mkPackage(
  nixRaw`pkgs.otfcc`,
  "Optimized OpenType builder and inspector",
);

/**
 * Google Authenticator migration decoder
 */
export const otpauth = mkPackage(
  nixRaw`pkgs.otpauth`,
  "Google Authenticator migration decoder",
);

/**
 * Highly secure and easy to use OTP client written in C/GTK that supports both TOTP and HOTP
 */
export const otpclient = mkPackage(
  nixRaw`pkgs.otpclient`,
  "Highly secure and easy to use OTP client written in C/GTK that supports both TOTP and HOTP",
);

/**
 * A one-time password login package
 */
export const otpw = mkPackage(
  nixRaw`pkgs.otpw`,
  "A one-time password login package",
);

/**
 * Share end-to-end encrypted secrets with others via a one-time URL
 */
export const ots = mkPackage(
  nixRaw`pkgs.ots`,
  "Share end-to-end encrypted secrets with others via a one-time URL",
);

/**
 * A tool for the working semanticist
 */
export const ott = mkPackage(
  nixRaw`pkgs.ott`,
  "A tool for the working semanticist",
);

/**
 * A port of Otto Matic, a 2001 Macintosh game by Pangea Software, for modern operating systems
 */
export const otto_matic = mkPackage(
  nixRaw`pkgs.otto-matic`,
  "A port of Otto Matic, a 2001 Macintosh game by Pangea Software, for modern operating systems",
);

/**
 * A purely functional dialect of Lisp
 */
export const otus_lisp = mkPackage(
  nixRaw`pkgs.otus-lisp`,
  "A purely functional dialect of Lisp",
);

/**
 * A command-line utility for easily compressing and decompressing files and directories
 */
export const ouch = mkPackage(
  nixRaw`pkgs.ouch`,
  "A command-line utility for easily compressing and decompressing files and directories",
);

/**
 * MAC Address CLI Toolkit
 */
export const oui = mkPackage(
  nixRaw`pkgs.oui`,
  "MAC Address CLI Toolkit",
);

/**
 * kernel {module, exploit} development tool
 */
export const out_of_tree = mkPackage(
  nixRaw`pkgs.out-of-tree`,
  "kernel {module, exploit} development tool",
);

/**
 * Port of OpenBSD-exclusive tools such as `calendar`, `vis`, and `signify`
 */
export const outils = mkPackage(
  nixRaw`pkgs.outils`,
  "Port of OpenBSD-exclusive tools such as `calendar`, `vis`, and `signify`",
);

/**
 * The fastest wiki and knowledge base for growing teams. Beautiful, feature rich, and markdown compatible
 */
export const outline = mkPackage(
  nixRaw`pkgs.outline`,
  "The fastest wiki and knowledge base for growing teams. Beautiful, feature rich, and markdown compatible",
);

/**
 * A tool for checking tool output inspired by LLVM's FileCheck
 */
export const outputcheck = mkPackage(
  nixRaw`pkgs.outputcheck`,
  "A tool for checking tool output inspired by LLVM's FileCheck",
);

/**
 * Feature-rich terminal-based text viewer
 */
export const ov = mkPackage(
  nixRaw`pkgs.ov`,
  "Feature-rich terminal-based text viewer",
);

/**
 * Open-source streaming video service with sub-second latency
 */
export const oven_media_engine = mkPackage(
  nixRaw`pkgs.oven-media-engine`,
  "Open-source streaming video service with sub-second latency",
);

/**
 * Tool to manage and configure Git hooks
 */
export const overcommit = mkPackage(
  nixRaw`pkgs.overcommit`,
  "Tool to manage and configure Git hooks",
);

/**
 * Process manager for Procfile-based applications and tmux
 */
export const overmind = mkPackage(
  nixRaw`pkgs.overmind`,
  "Process manager for Procfile-based applications and tmux",
);

/**
 * Font heavily inspired by Highway Gothic
 */
export const overpass = mkPackage(
  nixRaw`pkgs.overpass`,
  "Font heavily inspired by Highway Gothic",
);

/**
 * Steering Wheel Manager for Linux
 */
export const oversteer = mkPackage(
  nixRaw`pkgs.oversteer`,
  "Steering Wheel Manager for Linux",
);

/**
 * VMWare tools for working with OVF, OVA, and VMX images
 */
export const ovftool = mkPackage(
  nixRaw`pkgs.ovftool`,
  "VMWare tools for working with OVF, OVA, and VMX images",
);

/**
 * Terminal interaction recorder and player
 */
export const ovh_ttyrec = mkPackage(
  nixRaw`pkgs.ovh-ttyrec`,
  "Terminal interaction recorder and player",
);

/**
 * Scientific visualization and analysis software for atomistic and particle simulation data
 */
export const ovito = mkPackage(
  nixRaw`pkgs.ovito`,
  "Scientific visualization and analysis software for atomistic and particle simulation data",
);

/**
 * A tool for performing one-way active measurements
 */
export const owamp = mkPackage(
  nixRaw`pkgs.owamp`,
  "A tool for performing one-way active measurements",
);

/**
 * An open Apple Wireless Direct Link (AWDL) implementation written in C
 */
export const owl = mkPackage(
  nixRaw`pkgs.owl`,
  "An open Apple Wireless Direct Link (AWDL) implementation written in C",
);

/**
 * A portable Wayland compositor in Objective-C
 */
export const owl_compositor = mkPackage(
  nixRaw`pkgs.owl-compositor`,
  "A portable Wayland compositor in Objective-C",
);

/**
 * A functional Scheme for world domination
 */
export const owl_lisp = mkPackage(
  nixRaw`pkgs.owl-lisp`,
  "A functional Scheme for world domination",
);

/**
 * CLI version of the mod manager for Outer Wilds Mod Loader
 */
export const owmods_cli = mkPackage(
  nixRaw`pkgs.owmods-cli`,
  "CLI version of the mod manager for Outer Wilds Mod Loader",
);

/**
 * self-hosted video live streaming solution
 */
export const owncast = mkPackage(
  nixRaw`pkgs.owncast`,
  "self-hosted video live streaming solution",
);

/**
 * Synchronise your ownCloud with your computer using this desktop client
 */
export const owncloud_client = mkPackage(
  nixRaw`pkgs.owncloud-client`,
  "Synchronise your ownCloud with your computer using this desktop client",
);

/**
 * Store and access data published by OwnTracks apps
 */
export const owntracks_recorder = mkPackage(
  nixRaw`pkgs.owntracks-recorder`,
  "Store and access data published by OwnTracks apps",
);

/**
 * Alternative to *fetch, uwuifies all stats
 */
export const owofetch = mkPackage(
  nixRaw`pkgs.owofetch`,
  "Alternative to *fetch, uwuifies all stats",
);

/**
 * An independent Rust text editor that runs in your terminal
 */
export const ox = mkPackage(
  nixRaw`pkgs.ox`,
  "An independent Rust text editor that runs in your terminal",
);

/**
 * An open source VST 2.4 instrument plugin
 */
export const oxefmsynth = mkPackage(
  nixRaw`pkgs.oxefmsynth`,
  "An open source VST 2.4 instrument plugin",
);

/**
 * A network device configuration backup tool. It's a RANCID replacement!
 */
export const oxidized = mkPackage(
  nixRaw`pkgs.oxidized`,
  "A network device configuration backup tool. It's a RANCID replacement!",
);

/**
 * SPARQL graph database
 */
export const oxigraph = mkPackage(
  nixRaw`pkgs.oxigraph`,
  "SPARQL graph database",
);

/**
 * A multithreaded lossless PNG compression optimizer
 */
export const oxipng = mkPackage(
  nixRaw`pkgs.oxipng`,
  "A multithreaded lossless PNG compression optimizer",
);

/**
 * A simple tui to view & control docker containers
 */
export const oxker = mkPackage(
  nixRaw`pkgs.oxker`,
  "A simple tui to view & control docker containers",
);

/**
 * A suite of high-performance tools for JavaScript and TypeScript written in Rust
 */
export const oxlint = mkPackage(
  nixRaw`pkgs.oxlint`,
  "A suite of high-performance tools for JavaScript and TypeScript written in Rust",
);

/**
 * Utilities for analyzing application performance
 */
export const oxtools = mkPackage(
  nixRaw`pkgs.oxtools`,
  "Utilities for analyzing application performance",
);

/**
 * Desktop/gui font for integrated use with the KDE desktop
 */
export const oxygenfonts = mkPackage(
  nixRaw`pkgs.oxygenfonts`,
  "Desktop/gui font for integrated use with the KDE desktop",
);

/**
 * Perl Console Twitter Client
 */
export const oysttyer = mkPackage(
  nixRaw`pkgs.oysttyer`,
  "Perl Console Twitter Client",
);

/**
 * Passive network reconnaissance and fingerprinting tool
 */
export const p0f = mkPackage(
  nixRaw`pkgs.p0f`,
  "Passive network reconnaissance and fingerprinting tool",
);

/**
 * Library for loading and sharing PKCS#11 modules
 */
export const p11_kit = mkPackage(
  nixRaw`pkgs.p11-kit`,
  "Library for loading and sharing PKCS#11 modules",
);

/**
 * Decentralized pool for Monero mining
 */
export const p2pool = mkPackage(
  nixRaw`pkgs.p2pool`,
  "Decentralized pool for Monero mining",
);

/**
 * A point to point color terminal video chat
 */
export const p2pvc = mkPackage(
  nixRaw`pkgs.p2pvc`,
  "A point to point color terminal video chat",
);

/**
 * Linux Electron Onenote - A Linux compatible version of OneNote
 */
export const p3x_onenote = mkPackage(
  nixRaw`pkgs.p3x-onenote`,
  "Linux Electron Onenote - A Linux compatible version of OneNote",
);

/**
 * Perforce Helix Core command-line client and APIs
 */
export const p4 = mkPackage(
  nixRaw`pkgs.p4`,
  "Perforce Helix Core command-line client and APIs",
);

/**
 * Reference compiler for the P4 programming language
 */
export const p4c = mkPackage(
  nixRaw`pkgs.p4c`,
  "Reference compiler for the P4 programming language",
);

/**
 * Perforce Helix Core Server
 */
export const p4d = mkPackage(
  nixRaw`pkgs.p4d`,
  "Perforce Helix Core Server",
);

/**
 * Parallel AMR on Forests of Octrees
 */
export const p4est = mkPackage(
  nixRaw`pkgs.p4est`,
  "Parallel AMR on Forests of Octrees",
);

/**
 * Parallel AMR on Forests of Octrees
 */
export const p4est_dbg = mkPackage(
  nixRaw`pkgs.p4est-dbg`,
  "Parallel AMR on Forests of Octrees",
);

/**
 * Support for parallel scientific applications
 */
export const p4est_sc = mkPackage(
  nixRaw`pkgs.p4est-sc`,
  "Support for parallel scientific applications",
);

/**
 * Support for parallel scientific applications
 */
export const p4est_sc_dbg = mkPackage(
  nixRaw`pkgs.p4est-sc-dbg`,
  "Support for parallel scientific applications",
);

/**
 * Perforce Helix Visual Client
 */
export const p4v = mkPackage(
  nixRaw`pkgs.p4v`,
  "Perforce Helix Visual Client",
);

/**
 * A new p7zip fork with additional codecs and improvements (forked from https://sourceforge.net/projects/p7zip/)
 */
export const p7zip = mkPackage(
  nixRaw`pkgs.p7zip`,
  "A new p7zip fork with additional codecs and improvements (forked from https://sourceforge.net/projects/p7zip/)",
);

/**
 * Small printer daemon passing jobs directly to the printer
 */
export const p910nd = mkPackage(
  nixRaw`pkgs.p910nd`,
  "Small printer daemon passing jobs directly to the printer",
);

/**
 * 
 */
export const pa_applet = mkPackage(
  nixRaw`pkgs.pa_applet`,
  "",
);

/**
 * Pacemaker is an open source, high availability resource manager suitable for both small and large clusters.
 */
export const pacemaker = mkPackage(
  nixRaw`pkgs.pacemaker`,
  "Pacemaker is an open source, high availability resource manager suitable for both small and large clusters.",
);

/**
 * Containerized Data Analytics
 */
export const pachyderm = mkPackage(
  nixRaw`pkgs.pachyderm`,
  "Containerized Data Analytics",
);

/**
 * A CMake script for packaging C/C++ projects
 */
export const package_project_cmake = mkPackage(
  nixRaw`pkgs.package-project-cmake`,
  "A CMake script for packaging C/C++ projects",
);

/**
 * System to facilitate installing and updating packages
 */
export const packagekit = mkPackage(
  nixRaw`pkgs.packagekit`,
  "System to facilitate installing and updating packages",
);

/**
 * A parser generator for C
 */
export const packcc = mkPackage(
  nixRaw`pkgs.packcc`,
  "A parser generator for C",
);

/**
 * A tool for creating identical machine images for multiple platforms from a single source configuration
 */
export const packer = mkPackage(
  nixRaw`pkgs.packer`,
  "A tool for creating identical machine images for multiple platforms from a single source configuration",
);

/**
 * a CLI tool to manage packet.net services
 */
export const packet = mkPackage(
  nixRaw`pkgs.packet`,
  "a CLI tool to manage packet.net services",
);

/**
 * Prometheus service discovery for Equinix Metal
 */
export const packet_sd = mkPackage(
  nixRaw`pkgs.packet-sd`,
  "Prometheus service discovery for Equinix Metal",
);

/**
 * Network packet analyzer that ships data to Elasticsearch
 */
export const packetbeat = mkPackage(
  nixRaw`pkgs.packetbeat`,
  "Network packet analyzer that ships data to Elasticsearch",
);

/**
 * Network packet analyzer that ships data to Elasticsearch
 */
export const packetbeat7 = mkPackage(
  nixRaw`pkgs.packetbeat7`,
  "Network packet analyzer that ships data to Elasticsearch",
);

/**
 * Quick, precise tests for entire TCP/UDP/IPv4/IPv6 network stacks
 */
export const packetdrill = mkPackage(
  nixRaw`pkgs.packetdrill`,
  "Quick, precise tests for entire TCP/UDP/IPv4/IPv6 network stacks",
);

export const packr = mkPackage(
  nixRaw`pkgs.packr`,
  "",
);

/**
 * A command line tool for editing and distributing Minecraft modpacks, using a git-friendly TOML format
 */
export const packwiz = mkPackage(
  nixRaw`pkgs.packwiz`,
  "A command line tool for editing and distributing Minecraft modpacks, using a git-friendly TOML format",
);

/**
 * A simple library-based package manager
 */
export const pacman = mkPackage(
  nixRaw`pkgs.pacman`,
  "A simple library-based package manager",
);

/**
 * A simple compiled programming language
 */
export const paco = mkPackage(
  nixRaw`pkgs.paco`,
  "A simple compiled programming language",
);

/**
 * A library to parse proxy auto-config (PAC) files
 */
export const pacparser = mkPackage(
  nixRaw`pkgs.pacparser`,
  "A library to parse proxy auto-config (PAC) files",
);

/**
 * A no-frills local HTTP proxy server powered by a proxy auto-config (PAC) file
 */
export const pacproxy = mkPackage(
  nixRaw`pkgs.pacproxy`,
  "A no-frills local HTTP proxy server powered by a proxy auto-config (PAC) file",
);

/**
 * Mod packager for factorio
 */
export const pactorio = mkPackage(
  nixRaw`pkgs.pactorio`,
  "Mod packager for factorio",
);

/**
 * Help maintainers update pacscripts
 */
export const pacup = mkPackage(
  nixRaw`pkgs.pacup`,
  "Help maintainers update pacscripts",
);

/**
 * A game that teaches you vim commands
 */
export const pacvim = mkPackage(
  nixRaw`pkgs.pacvim`,
  "A game that teaches you vim commands",
);

/**
 * Automated script for performing Padding Oracle attacks
 */
export const padbuster = mkPackage(
  nixRaw`pkgs.padbuster`,
  "Automated script for performing Padding Oracle attacks",
);

/**
 * polyphonic additive synthesizer
 */
export const padthv1 = mkPackage(
  nixRaw`pkgs.padthv1`,
  "polyphonic additive synthesizer",
);

/**
 * Use neovim as pager
 */
export const page = mkPackage(
  nixRaw`pkgs.page`,
  "Use neovim as pager",
);

/**
 * Generate low-bandwidth search index for your static website
 */
export const pagefind = mkPackage(
  nixRaw`pkgs.pagefind`,
  "Generate low-bandwidth search index for your static website",
);

/**
 * Interactive memory/page monitor for Linux
 */
export const pagemon = mkPackage(
  nixRaw`pkgs.pagemon`,
  "Interactive memory/page monitor for Linux",
);

/**
 * CLI utility that helps calculating page table indices from a virtual address
 */
export const paging_calculator = mkPackage(
  nixRaw`pkgs.paging-calculator`,
  "CLI utility that helps calculating page table indices from a virtual address",
);

/**
 * Scientific library for massively parallel optimization
 */
export const pagmo2 = mkPackage(
  nixRaw`pkgs.pagmo2`,
  "Scientific library for massively parallel optimization",
);

/**
 * Optimization tools for the (P)MCM problem
 */
export const pagsuite = mkPackage(
  nixRaw`pkgs.pagsuite`,
  "Optimization tools for the (P)MCM problem",
);

/**
 * Eclipse Paho MQTT C Client Library
 */
export const paho_mqtt_c = mkPackage(
  nixRaw`pkgs.paho-mqtt-c`,
  "Eclipse Paho MQTT C Client Library",
);

/**
 * Eclipse Paho MQTT C++ Client Library
 */
export const paho_mqtt_cpp = mkPackage(
  nixRaw`pkgs.paho-mqtt-cpp`,
  "Eclipse Paho MQTT C++ Client Library",
);

/**
 * Shows, manipulates, and pretty-prints debugging information in DWARF, CTF, and BTF formats
 */
export const pahole = mkPackage(
  nixRaw`pkgs.pahole`,
  "Shows, manipulates, and pretty-prints debugging information in DWARF, CTF, and BTF formats",
);

/**
 * Local file sharing in your browser
 */
export const pairdrop = mkPackage(
  nixRaw`pkgs.pairdrop`,
  "Local file sharing in your browser",
);

/**
 * An implementation of the multi-paradigm declarative language Curry
 */
export const pakcs = mkPackage(
  nixRaw`pkgs.pakcs`,
  "An implementation of the multi-paradigm declarative language Curry",
);

/**
 * Command-line calendar program that can keep track of events
 */
export const pal = mkPackage(
  nixRaw`pkgs.pal`,
  "Command-line calendar program that can keep track of events",
);

/**
 * An Open Source, Goanna-based web browser focusing on efficiency and customization
 */
export const palemoon_bin = mkPackage(
  nixRaw`pkgs.palemoon-bin`,
  "An Open Source, Goanna-based web browser focusing on efficiency and customization",
);

export const palenight_theme = mkPackage(
  nixRaw`pkgs.palenight-theme`,
  "",
);

/**
 * Extract the dominant colors from any image
 */
export const paleta = mkPackage(
  nixRaw`pkgs.paleta`,
  "Extract the dominant colors from any image",
);

/**
 * A Package for Analyzing Lattice Polytopes
 */
export const palp = mkPackage(
  nixRaw`pkgs.palp`,
  "A Package for Analyzing Lattice Polytopes",
);

/**
 * Pluggable Authentication Modules, a flexible mechanism for authenticating user
 */
export const pam = mkPackage(
  nixRaw`pkgs.pam`,
  "Pluggable Authentication Modules, a flexible mechanism for authenticating user",
);

/**
 * PAM module to locally authenticate using an enterprise identity when the network is unavailable
 */
export const pam_ccreds = mkPackage(
  nixRaw`pkgs.pam_ccreds`,
  "PAM module to locally authenticate using an enterprise identity when the network is unavailable",
);

/**
 * dp9ik pam module
 */
export const pam_dp9ik = mkPackage(
  nixRaw`pkgs.pam_dp9ik`,
  "dp9ik pam module",
);

/**
 * Unlock GnuPG keys on login
 */
export const pam_gnupg = mkPackage(
  nixRaw`pkgs.pam_gnupg`,
  "Unlock GnuPG keys on login",
);

/**
 * PAM module allowing PAM-aware applications to authenticate users by performing an AS exchange with a Kerberos KDC
 */
export const pam_krb5 = mkPackage(
  nixRaw`pkgs.pam_krb5`,
  "PAM module allowing PAM-aware applications to authenticate users by performing an AS exchange with a Kerberos KDC",
);

/**
 * LDAP backend for PAM
 */
export const pam_ldap = mkPackage(
  nixRaw`pkgs.pam_ldap`,
  "LDAP backend for PAM",
);

/**
 * PAM module to mount volumes for a user session
 */
export const pam_mount = mkPackage(
  nixRaw`pkgs.pam_mount`,
  "PAM module to mount volumes for a user session",
);

/**
 * PAM authentication module against a MySQL database
 */
export const pam_mysql = mkPackage(
  nixRaw`pkgs.pam_mysql`,
  "PAM authentication module against a MySQL database",
);

/**
 * Authentication with PKCS#11 modules
 */
export const pam_p11 = mkPackage(
  nixRaw`pkgs.pam_p11`,
  "Authentication with PKCS#11 modules",
);

/**
 * Support to authenticate against PostgreSQL for PAM-enabled appliations
 */
export const pam_pgsql = mkPackage(
  nixRaw`pkgs.pam_pgsql`,
  "Support to authenticate against PostgreSQL for PAM-enabled appliations",
);

/**
 * Reattach to the user's GUI session on macOS during authentication (for Touch ID support in tmux)
 */
export const pam_reattach = mkPackage(
  nixRaw`pkgs.pam-reattach`,
  "Reattach to the user's GUI session on macOS during authentication (for Touch ID support in tmux)",
);

/**
 * PAM module for authenticating via ssh-agent, written in Rust
 */
export const pam_rssh = mkPackage(
  nixRaw`pkgs.pam_rssh`,
  "PAM module for authenticating via ssh-agent, written in Rust",
);

/**
 * PAM module for authentication through the SSH agent
 */
export const pam_ssh_agent_auth = mkPackage(
  nixRaw`pkgs.pam_ssh_agent_auth`,
  "PAM module for authentication through the SSH agent",
);

/**
 * PAM module for creating safe per-user temporary directories
 */
export const pam_tmpdir = mkPackage(
  nixRaw`pkgs.pam_tmpdir`,
  "PAM module for creating safe per-user temporary directories",
);

/**
 * A PAM module for allowing authentication with a U2F device
 */
export const pam_u2f = mkPackage(
  nixRaw`pkgs.pam_u2f`,
  "A PAM module for allowing authentication with a U2F device",
);

/**
 * Authentication using USB Flash Drives
 */
export const pam_usb = mkPackage(
  nixRaw`pkgs.pam_usb`,
  "Authentication using USB Flash Drives",
);

/**
 * PAM module to authenticate using SSH certificates
 */
export const pam_ussh = mkPackage(
  nixRaw`pkgs.pam_ussh`,
  "PAM module to authenticate using SSH certificates",
);

/**
 * Pulseaudio terminal mixer
 */
export const pamix = mkPackage(
  nixRaw`pkgs.pamix`,
  "Pulseaudio terminal mixer",
);

/**
 * Pulseaudio command line mixer
 */
export const pamixer = mkPackage(
  nixRaw`pkgs.pamixer`,
  "Pulseaudio command line mixer",
);

/**
 * Phylogenetic Analysis by Maximum Likelihood (PAML)
 */
export const paml = mkPackage(
  nixRaw`pkgs.paml`,
  "Phylogenetic Analysis by Maximum Likelihood (PAML)",
);

/**
 * Utility program to test the PAM facility
 */
export const pamtester = mkPackage(
  nixRaw`pkgs.pamtester`,
  "Utility program to test the PAM facility",
);

/**
 * A GTK-based Usenet newsreader good at both text and binaries
 */
export const pan = mkPackage(
  nixRaw`pkgs.pan`,
  "A GTK-based Usenet newsreader good at both text and binaries",
);

/**
 * Mirror rustup and crates.io repositories for offline Rust and cargo usage
 */
export const panamax = mkPackage(
  nixRaw`pkgs.panamax`,
  "Mirror rustup and crates.io repositories for offline Rust and cargo usage",
);

/**
 * Conversion between documentation formats
 */
export const pandoc = mkPackage(
  nixRaw`pkgs.pandoc`,
  "Conversion between documentation formats",
);

/**
 * Pandoc filter which manages acronyms in Pandoc flavored Markdown sources
 */
export const pandoc_acro = mkPackage(
  nixRaw`pkgs.pandoc-acro`,
  "Pandoc filter which manages acronyms in Pandoc flavored Markdown sources",
);

/**
 * Pandoc filter which converts draw.io diagrams to PDF
 */
export const pandoc_drawio_filter = mkPackage(
  nixRaw`pkgs.pandoc-drawio-filter`,
  "Pandoc filter which converts draw.io diagrams to PDF",
);

/**
 * Standalone pandoc filter from the pandoc-xnos suite for numbering equations and equation references
 */
export const pandoc_eqnos = mkPackage(
  nixRaw`pkgs.pandoc-eqnos`,
  "Standalone pandoc filter from the pandoc-xnos suite for numbering equations and equation references",
);

/**
 * Standalone pandoc filter from the pandoc-xnos suite for numbering figures and figure references
 */
export const pandoc_fignos = mkPackage(
  nixRaw`pkgs.pandoc-fignos`,
  "Standalone pandoc filter from the pandoc-xnos suite for numbering figures and figure references",
);

        /**
         * A pandoc filter that will turn code blocks tagged with certain classes
into images or ASCII art

         */
export const pandoc_imagine = mkPackage(
  nixRaw`pkgs.pandoc-imagine`,
  "A pandoc filter that will turn code blocks tagged with certain classes\ninto images or ASCII art\n",
);

/**
 * Pandoc filter to allow file and header includes
 */
export const pandoc_include = mkPackage(
  nixRaw`pkgs.pandoc-include`,
  "Pandoc filter to allow file and header includes",
);

/**
 * Pandoc filter to render math equations using KaTeX
 */
export const pandoc_katex = mkPackage(
  nixRaw`pkgs.pandoc-katex`,
  "Pandoc filter to render math equations using KaTeX",
);

/**
 * A collection of lua filters for pandoc
 */
export const pandoc_lua_filters = mkPackage(
  nixRaw`pkgs.pandoc-lua-filters`,
  "A collection of lua filters for pandoc",
);

/**
 * Pandoc filter which converts PlantUML code blocks to PlantUML images
 */
export const pandoc_plantuml_filter = mkPackage(
  nixRaw`pkgs.pandoc-plantuml-filter`,
  "Pandoc filter which converts PlantUML code blocks to PlantUML images",
);

/**
 * Standalone pandoc filter from the pandoc-xnos suite for numbering sections and section references
 */
export const pandoc_secnos = mkPackage(
  nixRaw`pkgs.pandoc-secnos`,
  "Standalone pandoc filter from the pandoc-xnos suite for numbering sections and section references",
);

/**
 * Standalone pandoc filter from the pandoc-xnos suite for numbering tables and table references
 */
export const pandoc_tablenos = mkPackage(
  nixRaw`pkgs.pandoc-tablenos`,
  "Standalone pandoc filter from the pandoc-xnos suite for numbering tables and table references",
);

/**
 * A library for laying out and rendering of text, with an emphasis on internationalization
 */
export const pango = mkPackage(
  nixRaw`pkgs.pango`,
  "A library for laying out and rendering of text, with an emphasis on internationalization",
);

/**
 * A lightweight portable rapid development library for managing OpenGL display / interaction and abstracting video input
 */
export const pangolin = mkPackage(
  nixRaw`pkgs.pangolin`,
  "A lightweight portable rapid development library for managing OpenGL display / interaction and abstracting video input",
);

/**
 * C++ interface to the Pango text rendering library
 */
export const pangomm = mkPackage(
  nixRaw`pkgs.pangomm`,
  "C++ interface to the Pango text rendering library",
);

/**
 * C++ interface to the Pango text rendering library
 */
export const pangomm_2_42 = mkPackage(
  nixRaw`pkgs.pangomm_2_42`,
  "C++ interface to the Pango text rendering library",
);

/**
 * C++ interface to the Pango text rendering library
 */
export const pangomm_2_48 = mkPackage(
  nixRaw`pkgs.pangomm_2_48`,
  "C++ interface to the Pango text rendering library",
);

/**
 * Crash your app in style (Golang)
 */
export const panicparse = mkPackage(
  nixRaw`pkgs.panicparse`,
  "Crash your app in style (Golang)",
);

/**
 * netCDF, HDF and GRIB Data Viewer
 */
export const panoply = mkPackage(
  nixRaw`pkgs.panoply`,
  "netCDF, HDF and GRIB Data Viewer",
);

/**
 * A libre cross-platform disassembler
 */
export const panopticon = mkPackage(
  nixRaw`pkgs.panopticon`,
  "A libre cross-platform disassembler",
);

/**
 * Free software suite for authoring and displaying virtual reality panoramas
 */
export const panotools = mkPackage(
  nixRaw`pkgs.panotools`,
  "Free software suite for authoring and displaying virtual reality panoramas",
);

/**
 * An end-to-end encryption aware Matrix reverse proxy daemon
 */
export const pantalaimon = mkPackage(
  nixRaw`pkgs.pantalaimon`,
  "An end-to-end encryption aware Matrix reverse proxy daemon",
);

/**
 * An end-to-end encryption aware Matrix reverse proxy daemon
 */
export const pantalaimon_headless = mkPackage(
  nixRaw`pkgs.pantalaimon-headless`,
  "An end-to-end encryption aware Matrix reverse proxy daemon",
);

/**
 * Unofficial system settings panel for Pantheon
 */
export const pantheon_tweaks = mkPackage(
  nixRaw`pkgs.pantheon-tweaks`,
  "Unofficial system settings panel for Pantheon",
);

/**
 * Pantum universal driver
 */
export const pantum_driver = mkPackage(
  nixRaw`pkgs.pantum-driver`,
  "Pantum universal driver",
);

/**
 * Convert websites into ebooks and markdown
 */
export const papeer = mkPackage(
  nixRaw`pkgs.papeer`,
  "Convert websites into ebooks and markdown",
);

/**
 * Easy and secure paper backups of secrets
 */
export const paper_age = mkPackage(
  nixRaw`pkgs.paper-age`,
  "Easy and secure paper backups of secrets",
);

/**
 * A modern desktop theme suite featuring a mostly flat with a minimal use of shadows for depth
 */
export const paper_gtk_theme = mkPackage(
  nixRaw`pkgs.paper-gtk-theme`,
  "A modern desktop theme suite featuring a mostly flat with a minimal use of shadows for depth",
);

/**
 * Modern icon theme designed around bold colours and simple geometric shapes
 */
export const paper_icon_theme = mkPackage(
  nixRaw`pkgs.paper-icon-theme`,
  "Modern icon theme designed around bold colours and simple geometric shapes",
);

/**
 * Store OpenPGP or GnuPG on paper
 */
export const paperkey = mkPackage(
  nixRaw`pkgs.paperkey`,
  "Store OpenPGP or GnuPG on paper",
);

/**
 * Tool to scan, index, and archive all of your physical documents
 */
export const paperless_ngx = mkPackage(
  nixRaw`pkgs.paperless-ngx`,
  "Tool to scan, index, and archive all of your physical documents",
);

/**
 * paperlike-go is a Linux Go library and CLI utility to control a Dasung Paperlike display via I2C DDC.
 */
export const paperlike_go = mkPackage(
  nixRaw`pkgs.paperlike-go`,
  "paperlike-go is a Linux Go library and CLI utility to control a Dasung Paperlike display via I2C DDC.",
);

/**
 * High-performance Minecraft Server
 */
export const papermc = mkPackage(
  nixRaw`pkgs.papermc`,
  "High-performance Minecraft Server",
);

/**
 * An article extractor in Rust
 */
export const paperoni = mkPackage(
  nixRaw`pkgs.paperoni`,
  "An article extractor in Rust",
);

/**
 * Command-line client for Papertrail log management service
 */
export const papertrail = mkPackage(
  nixRaw`pkgs.papertrail`,
  "Command-line client for Papertrail log management service",
);

/**
 * A high performance X11 animated wallpaper setter
 */
export const paperview = mkPackage(
  nixRaw`pkgs.paperview`,
  "A high performance X11 animated wallpaper setter",
);

/**
 * A personal document manager for scanned documents
 */
export const paperwork = mkPackage(
  nixRaw`pkgs.paperwork`,
  "A personal document manager for scanned documents",
);

/**
 * Library providing access to various hardware performance counters
 */
export const papi = mkPackage(
  nixRaw`pkgs.papi`,
  "Library providing access to various hardware performance counters",
);

/**
 * A tool to change papirus icon theme color
 */
export const papirus_folders = mkPackage(
  nixRaw`pkgs.papirus-folders`,
  "A tool to change papirus icon theme color",
);

/**
 * Papirus icon theme
 */
export const papirus_icon_theme = mkPackage(
  nixRaw`pkgs.papirus-icon-theme`,
  "Papirus icon theme",
);

/**
 * Manjaro variation of Papirus icon theme
 */
export const papirus_maia_icon_theme = mkPackage(
  nixRaw`pkgs.papirus-maia-icon-theme`,
  "Manjaro variation of Papirus icon theme",
);

/**
 * Nord version of Papirus Icon Theme
 */
export const papirus_nord = mkPackage(
  nixRaw`pkgs.papirus-nord`,
  "Nord version of Papirus Icon Theme",
);

/**
 * Powerful command-line document and bibliography manager
 */
export const papis = mkPackage(
  nixRaw`pkgs.papis`,
  "Powerful command-line document and bibliography manager",
);

/**
 * C-based framework/library for developing CUPS Printer Applications
 */
export const pappl = mkPackage(
  nixRaw`pkgs.pappl`,
  "C-based framework/library for developing CUPS Printer Applications",
);

/**
 * PulseAudio Preferences
 */
export const paprefs = mkPackage(
  nixRaw`pkgs.paprefs`,
  "PulseAudio Preferences",
);

/**
 * Pango to PostScript converter
 */
export const paps = mkPackage(
  nixRaw`pkgs.paps`,
  "Pango to PostScript converter",
);

/**
 * Paragraph reflow for email
 */
export const par = mkPackage(
  nixRaw`pkgs.par`,
  "Paragraph reflow for email",
);

/**
 * PAR 2.0 compatible file verification and repair tool
 */
export const par2cmdline = mkPackage(
  nixRaw`pkgs.par2cmdline`,
  "PAR 2.0 compatible file verification and repair tool",
);

/**
 * Shell tool for executing jobs in parallel
 */
export const parallel = mkPackage(
  nixRaw`pkgs.parallel`,
  "Shell tool for executing jobs in parallel",
);

export const parallel_full = mkPackage(
  nixRaw`pkgs.parallel-full`,
  "",
);

/**
 * A Persian (Farsi) Font - فونت ( قلم ) فارسی پرستو
 */
export const parastoo_fonts = mkPackage(
  nixRaw`pkgs.parastoo-fonts`,
  "A Persian (Farsi) Font - فونت ( قلم ) فارسی پرستو",
);

/**
 * An open Paratype font
 */
export const paratype_pt_mono = mkPackage(
  nixRaw`pkgs.paratype-pt-mono`,
  "An open Paratype font",
);

/**
 * An open Paratype font
 */
export const paratype_pt_sans = mkPackage(
  nixRaw`pkgs.paratype-pt-sans`,
  "An open Paratype font",
);

/**
 * An open Paratype font
 */
export const paratype_pt_serif = mkPackage(
  nixRaw`pkgs.paratype-pt-serif`,
  "An open Paratype font",
);

/**
 * 3D Data analysis and visualization application
 */
export const paraview = mkPackage(
  nixRaw`pkgs.paraview`,
  "3D Data analysis and visualization application",
);

/**
 * Lightweight GTK clipboard manager
 */
export const parcellite = mkPackage(
  nixRaw`pkgs.parcellite`,
  "Lightweight GTK clipboard manager",
);

/**
 * Computer algebra system for high-performance number theory computations
 */
export const pari = mkPackage(
  nixRaw`pkgs.pari`,
  "Computer algebra system for high-performance number theory computations",
);

/**
 * PARI database needed to compute Galois group in degrees 8 through 11
 */
export const pari_galdata = mkPackage(
  nixRaw`pkgs.pari-galdata`,
  "PARI database needed to compute Galois group in degrees 8 through 11",
);

/**
 * PARI database needed by ellap for large primes
 */
export const pari_seadata_small = mkPackage(
  nixRaw`pkgs.pari-seadata-small`,
  "PARI database needed by ellap for large primes",
);

/**
 * Infer parentheses for Clojure, Lisp, and Scheme
 */
export const parinfer_rust = mkPackage(
  nixRaw`pkgs.parinfer-rust`,
  "Infer parentheses for Clojure, Lisp, and Scheme",
);

/**
 * GNOME audio player for transcription
 */
export const parlatype = mkPackage(
  nixRaw`pkgs.parlatype`,
  "GNOME audio player for transcription",
);

/**
 * An MPI-based parallel library that implements a variety of algorithms for partitioning unstructured graphs, meshes, and for computing fill-reducing orderings of sparse matrices
 */
export const parmetis = mkPackage(
  nixRaw`pkgs.parmetis`,
  "An MPI-based parallel library that implements a variety of algorithms for partitioning unstructured graphs, meshes, and for computing fill-reducing orderings of sparse matrices",
);

/**
 * A CLI tool for parquet files
 */
export const parquet_tools = mkPackage(
  nixRaw`pkgs.parquet-tools`,
  "A CLI tool for parquet files",
);

/**
 * A hassle-free Discord music bot
 */
export const parrot = mkPackage(
  nixRaw`pkgs.parrot`,
  "A hassle-free Discord music bot",
);

/**
 * Parse Command Line Interface
 */
export const parse_cli_bin = mkPackage(
  nixRaw`pkgs.parse-cli-bin`,
  "Parse Command Line Interface",
);

/**
 * Remote streaming service client
 */
export const parsec_bin = mkPackage(
  nixRaw`pkgs.parsec-bin`,
  "Remote streaming service client",
);

/**
 * Python module and CLI utility for parsing DMARC reports
 */
export const parsedmarc = mkPackage(
  nixRaw`pkgs.parsedmarc`,
  "Python module and CLI utility for parsing DMARC reports",
);

/**
 * Robots.txt audit tool
 */
export const parsero = mkPackage(
  nixRaw`pkgs.parsero`,
  "Robots.txt audit tool",
);

/**
 * Lightweight JSON library written in C
 */
export const parson = mkPackage(
  nixRaw`pkgs.parson`,
  "Lightweight JSON library written in C",
);

/**
 * Utilities to save and restore used blocks on a partition
 */
export const partclone = mkPackage(
  nixRaw`pkgs.partclone`,
  "Utilities to save and restore used blocks on a partition",
);

/**
 * Create, destroy, resize, check, and copy partitions
 */
export const parted = mkPackage(
  nixRaw`pkgs.parted`,
  "Create, destroy, resize, check, and copy partitions",
);

/**
 * Privacy-Focused Marketplace & Decentralized Application Platform
 */
export const particl_core = mkPackage(
  nixRaw`pkgs.particl-core`,
  "Privacy-Focused Marketplace & Decentralized Application Platform",
);

/**
 * Opensource disk backup software
 */
export const partimage = mkPackage(
  nixRaw`pkgs.partimage`,
  "Opensource disk backup software",
);

/**
 * C++ (with python bindings) library for easily reading/writing/manipulating common animation particle formats such as PDB, BGEO, PTC
 */
export const partio = mkPackage(
  nixRaw`pkgs.partio`,
  "C++ (with python bindings) library for easily reading/writing/manipulating common animation particle formats such as PDB, BGEO, PTC",
);

/**
 * KDE Partition Manager
 */
export const partition_manager = mkPackage(
  nixRaw`pkgs.partition-manager`,
  "KDE Partition Manager",
);

/**
 * Stores, retrieves, generates, and synchronizes passwords securely
 */
export const pass = mkPackage(
  nixRaw`pkgs.pass`,
  "Stores, retrieves, generates, and synchronizes passwords securely",
);

/**
 * Export pass(1), "the standard unix password manager", to CSV
 */
export const pass2csv = mkPackage(
  nixRaw`pkgs.pass2csv`,
  "Export pass(1), \"the standard unix password manager\", to CSV",
);

/**
 * A git credential helper interfacing with pass, the standard unix password manager
 */
export const pass_git_helper = mkPackage(
  nixRaw`pkgs.pass-git-helper`,
  "A git credential helper interfacing with pass, the standard unix password manager",
);

/**
 * Stores, retrieves, generates, and synchronizes passwords securely
 */
export const pass_nodmenu = mkPackage(
  nixRaw`pkgs.pass-nodmenu`,
  "Stores, retrieves, generates, and synchronizes passwords securely",
);

/**
 * Libsecret D-Bus API with pass as the backend
 */
export const pass_secret_service = mkPackage(
  nixRaw`pkgs.pass-secret-service`,
  "Libsecret D-Bus API with pass as the backend",
);

/**
 * Stores, retrieves, generates, and synchronizes passwords securely
 */
export const pass_wayland = mkPackage(
  nixRaw`pkgs.pass-wayland`,
  "Stores, retrieves, generates, and synchronizes passwords securely",
);

/**
 * Stores, retrieves, generates, and synchronizes passwords securely
 */
export const passage = mkPackage(
  nixRaw`pkgs.passage`,
  "Stores, retrieves, generates, and synchronizes passwords securely",
);

/**
 * A small extensible programming language designed for concise expression with little code
 */
export const passerine = mkPackage(
  nixRaw`pkgs.passerine`,
  "A small extensible programming language designed for concise expression with little code",
);

/**
 * A digital pass manager
 */
export const passes = mkPackage(
  nixRaw`pkgs.passes`,
  "A digital pass manager",
);

/**
 * Host app for the WebExtension PassFF
 */
export const passff_host = mkPackage(
  nixRaw`pkgs.passff-host`,
  "Host app for the WebExtension PassFF",
);

/**
 * An sshpass alternative for non-interactive ssh auth
 */
export const passh = mkPackage(
  nixRaw`pkgs.passh`,
  "An sshpass alternative for non-interactive ssh auth",
);

/**
 * A simple, modern, lightweight, open source and secure password manager
 */
export const passky_desktop = mkPackage(
  nixRaw`pkgs.passky-desktop`,
  "A simple, modern, lightweight, open source and secure password manager",
);

/**
 * Predictable, passphrase-based PGP key generator
 */
export const passphrase2pgp = mkPackage(
  nixRaw`pkgs.passphrase2pgp`,
  "Predictable, passphrase-based PGP key generator",
);

/**
 * Tool to visualize the progress of the year based on the past days
 */
export const past_time = mkPackage(
  nixRaw`pkgs.past-time`,
  "Tool to visualize the progress of the year based on the past days",
);

/**
 * A software that lets you send anything you want directly to a pastebin from the command line
 */
export const pastebinit = mkPackage(
  nixRaw`pkgs.pastebinit`,
  "A software that lets you send anything you want directly to a pastebin from the command line",
);

/**
 * A command-line tool to generate, analyze, convert and manipulate colors
 */
export const pastel = mkPackage(
  nixRaw`pkgs.pastel`,
  "A command-line tool to generate, analyze, convert and manipulate colors",
);

/**
 * PulseAudio system tray
 */
export const pasystray = mkPackage(
  nixRaw`pkgs.pasystray`,
  "PulseAudio system tray",
);

/**
 * Pat is a cross platform Winlink client written in Go.
 */
export const pat = mkPackage(
  nixRaw`pkgs.pat`,
  "Pat is a cross platform Winlink client written in Go.",
);

/**
 * Add cryptographic attestation to patches sent via email
 */
export const patatt = mkPackage(
  nixRaw`pkgs.patatt`,
  "Add cryptographic attestation to patches sent via email",
);

/**
 * GNU Patch, a program to apply differences to files
 */
export const patch = mkPackage(
  nixRaw`pkgs.patch`,
  "GNU Patch, a program to apply differences to files",
);

/**
 * setup hook to patch executable paths in ppd files
 */
export const patchPpdFilesHook = mkPackage(
  nixRaw`pkgs.patchPpdFilesHook`,
  "setup hook to patch executable paths in ppd files",
);

/**
 * Setup-hook to inject source-time PATH prefix to a Bash/Ksh/Zsh script
 */
export const patchRcPathBash = mkPackage(
  nixRaw`pkgs.patchRcPathBash`,
  "Setup-hook to inject source-time PATH prefix to a Bash/Ksh/Zsh script",
);

/**
 * Setup-hook to inject source-time PATH prefix to a Csh script
 */
export const patchRcPathCsh = mkPackage(
  nixRaw`pkgs.patchRcPathCsh`,
  "Setup-hook to inject source-time PATH prefix to a Csh script",
);

/**
 * Setup-hook to inject source-time PATH prefix to a Fish script
 */
export const patchRcPathFish = mkPackage(
  nixRaw`pkgs.patchRcPathFish`,
  "Setup-hook to inject source-time PATH prefix to a Fish script",
);

/**
 * Setup-hook to inject source-time PATH prefix to a POSIX shell script
 */
export const patchRcPathPosix = mkPackage(
  nixRaw`pkgs.patchRcPathPosix`,
  "Setup-hook to inject source-time PATH prefix to a POSIX shell script",
);

/**
 * Modular patch bay for Jack and ALSA systems
 */
export const patchage = mkPackage(
  nixRaw`pkgs.patchage`,
  "Modular patch bay for Jack and ALSA systems",
);

/**
 * JACK Patchbay GUI
 */
export const patchance = mkPackage(
  nixRaw`pkgs.patchance`,
  "JACK Patchbay GUI",
);

/**
 * A small utility to modify the dynamic linker and RPATH of ELF executables
 */
export const patchelf = mkPackage(
  nixRaw`pkgs.patchelf`,
  "A small utility to modify the dynamic linker and RPATH of ELF executables",
);

/**
 * A small utility to modify the dynamic linker and RPATH of ELF executables
 */
export const patchelfStable = mkPackage(
  nixRaw`pkgs.patchelfStable`,
  "A small utility to modify the dynamic linker and RPATH of ELF executables",
);

/**
 * A small utility to modify the dynamic linker and RPATH of ELF executables
 */
export const patchelfUnstable = mkPackage(
  nixRaw`pkgs.patchelfUnstable`,
  "A small utility to modify the dynamic linker and RPATH of ELF executables",
);

/**
 * A small utility to modify the dynamic linker and RPATH of ELF executables
 */
export const patchelf_0_13 = mkPackage(
  nixRaw`pkgs.patchelf_0_13`,
  "A small utility to modify the dynamic linker and RPATH of ELF executables",
);

/**
 * Patch for Windows 95/98/98 SE/Me to fix CPU issues
 */
export const patcher9x = mkPackage(
  nixRaw`pkgs.patcher9x`,
  "Patch for Windows 95/98/98 SE/Me to fix CPU issues",
);

/**
 * Tools to manipulate patch files
 */
export const patchutils = mkPackage(
  nixRaw`pkgs.patchutils`,
  "Tools to manipulate patch files",
);

/**
 * Tools to manipulate patch files
 */
export const patchutils_0_3_3 = mkPackage(
  nixRaw`pkgs.patchutils_0_3_3`,
  "Tools to manipulate patch files",
);

/**
 * Tools to manipulate patch files
 */
export const patchutils_0_4_2 = mkPackage(
  nixRaw`pkgs.patchutils_0_4_2`,
  "Tools to manipulate patch files",
);

/**
 * File Diff using the Patience Diff algorithm
 */
export const patdiff = mkPackage(
  nixRaw`pkgs.patdiff`,
  "File Diff using the Patience Diff algorithm",
);

/**
 * Offline build planner for Path of Exile
 */
export const path_of_building = mkPackage(
  nixRaw`pkgs.path-of-building`,
  "Offline build planner for Path of Exile",
);

/**
 * Declarative edge routing platform that automates route optimization and control plane configuration
 */
export const pathvector = mkPackage(
  nixRaw`pkgs.pathvector`,
  "Declarative edge routing platform that automates route optimization and control plane configuration",
);

/**
 * portable archive file manager
 */
export const patool = mkPackage(
  nixRaw`pkgs.patool`,
  "portable archive file manager",
);

/**
 * Yet another tray pulseaudio frontend
 */
export const patray = mkPackage(
  nixRaw`pkgs.patray`,
  "Yet another tray pulseaudio frontend",
);

/**
 * A Template for PostgreSQL HA with ZooKeeper, etcd or Consul
 */
export const patroni = mkPackage(
  nixRaw`pkgs.patroni`,
  "A Template for PostgreSQL HA with ZooKeeper, etcd or Consul",
);

/**
 * A command-line tool for patching shell scripts inspired by resholve
 */
export const patsh = mkPackage(
  nixRaw`pkgs.patsh`,
  "A command-line tool for patching shell scripts inspired by resholve",
);

/**
 * An uploader for Wikimedia Commons
 */
export const pattypan = mkPackage(
  nixRaw`pkgs.pattypan`,
  "An uploader for Wikimedia Commons",
);

/**
 * Produces high quality extreme sound stretching
 */
export const paulstretch = mkPackage(
  nixRaw`pkgs.paulstretch`,
  "Produces high quality extreme sound stretching",
);

/**
 * PulseAudio Volume Control
 */
export const pavucontrol = mkPackage(
  nixRaw`pkgs.pavucontrol`,
  "PulseAudio Volume Control",
);

/**
 * POSIX standard archive tool from MirBSD
 */
export const pax = mkPackage(
  nixRaw`pkgs.pax`,
  "POSIX standard archive tool from MirBSD",
);

/**
 * The fastest JavaScript bundler in the galaxy
 */
export const pax_rs = mkPackage(
  nixRaw`pkgs.pax-rs`,
  "The fastest JavaScript bundler in the galaxy",
);

/**
 * ELF utils that can check files for security relevant properties
 */
export const pax_utils = mkPackage(
  nixRaw`pkgs.pax-utils`,
  "ELF utils that can check files for security relevant properties",
);

/**
 * A tool for controlling PaX flags on a per binary basis
 */
export const paxctl = mkPackage(
  nixRaw`pkgs.paxctl`,
  "A tool for controlling PaX flags on a per binary basis",
);

/**
 * Test various memory protection measures
 */
export const paxtest = mkPackage(
  nixRaw`pkgs.paxtest`,
  "Test various memory protection measures",
);

/**
 * Android OTA payload dumper
 */
export const payload_dumper = mkPackage(
  nixRaw`pkgs.payload_dumper`,
  "Android OTA payload dumper",
);

/**
 * An android OTA payload dumper written in Go
 */
export const payload_dumper_go = mkPackage(
  nixRaw`pkgs.payload-dumper-go`,
  "An android OTA payload dumper written in Go",
);

/**
 * An autojump "zap to directory" helper
 */
export const pazi = mkPackage(
  nixRaw`pkgs.pazi`,
  "An autojump \"zap to directory\" helper",
);

/**
 * CLI client for Parseable server
 */
export const pb = mkPackage(
  nixRaw`pkgs.pb`,
  "CLI client for Parseable server",
);

/**
 * A no bullshit 0x0.st client
 */
export const pb_cli = mkPackage(
  nixRaw`pkgs.pb_cli`,
  "A no bullshit 0x0.st client",
);

/**
 * Copy and paste between devices
 */
export const pbgopy = mkPackage(
  nixRaw`pkgs.pbgopy`,
  "Copy and paste between devices",
);

/**
 * CLI for managing Akka.NET applications and Akka.NET Clusters.
 */
export const pbm = mkPackage(
  nixRaw`pkgs.pbm`,
  "CLI for managing Akka.NET applications and Akka.NET Clusters.",
);

/**
 * Control Google Pixel Buds Pro from the Linux command line.
 */
export const pbpctrl = mkPackage(
  nixRaw`pkgs.pbpctrl`,
  "Control Google Pixel Buds Pro from the Linux command line.",
);

/**
 * The renderer described in the third edition of the book 'Physically Based Rendering: From Theory To Implementation'
 */
export const pbrt = mkPackage(
  nixRaw`pkgs.pbrt`,
  "The renderer described in the third edition of the book 'Physically Based Rendering: From Theory To Implementation'",
);

/**
 * A parallel implementation of bzip2 for multi-core machines
 */
export const pbzip2 = mkPackage(
  nixRaw`pkgs.pbzip2`,
  "A parallel implementation of bzip2 for multi-core machines",
);

/**
 * Stream parser of Apple's pbzx compression format
 */
export const pbzx = mkPackage(
  nixRaw`pkgs.pbzx`,
  "Stream parser of Apple's pbzx compression format",
);

/**
 * Programmer's calculator
 */
export const pc = mkPackage(
  nixRaw`pkgs.pc`,
  "Programmer's calculator",
);

/**
 * Desktop library for Bluetooth low energy development
 */
export const pc_ble_driver = mkPackage(
  nixRaw`pkgs.pc-ble-driver`,
  "Desktop library for Bluetooth low energy development",
);

/**
 * Programmer's calculator
 */
export const pcalc = mkPackage(
  nixRaw`pkgs.pcalc`,
  "Programmer's calculator",
);

/**
 * Compile libpcap filter expressions into BPF opcodes
 */
export const pcapc = mkPackage(
  nixRaw`pkgs.pcapc`,
  "Compile libpcap filter expressions into BPF opcodes",
);

/**
 * Repair your broken pcap and pcapng files
 */
export const pcapfix = mkPackage(
  nixRaw`pkgs.pcapfix`,
  "Repair your broken pcap and pcapng files",
);

/**
 * Provides a C API to different audio devices
 */
export const pcaudiolib = mkPackage(
  nixRaw`pkgs.pcaudiolib`,
  "Provides a C API to different audio devices",
);

/**
 * Printed Circuit Board editor
 */
export const pcb = mkPackage(
  nixRaw`pkgs.pcb`,
  "Printed Circuit Board editor",
);

/**
 * Command-line tool for isolation, routing and drilling of PCBs 
 */
export const pcb2gcode = mkPackage(
  nixRaw`pkgs.pcb2gcode`,
  "Command-line tool for isolation, routing and drilling of PCBs ",
);

/**
 * Emulator for IBM PC computers and clones
 */
export const pcem = mkPackage(
  nixRaw`pkgs.pcem`,
  "Emulator for IBM PC computers and clones",
);

/**
 * A family of better random number generators
 */
export const pcg_c = mkPackage(
  nixRaw`pkgs.pcg_c`,
  "A family of better random number generators",
);

/**
 * Simple method of reading and writing to memory registers on a PCI card
 */
export const pcimem = mkPackage(
  nixRaw`pkgs.pcimem`,
  "Simple method of reading and writing to memory registers on a PCI card",
);

/**
 * A collection of programs for inspecting and manipulating configuration of PCI devices
 */
export const pciutils = mkPackage(
  nixRaw`pkgs.pciutils`,
  "A collection of programs for inspecting and manipulating configuration of PCI devices",
);

/**
 * Open project for 2D/3D image and point cloud processing
 */
export const pcl = mkPackage(
  nixRaw`pkgs.pcl`,
  "Open project for 2D/3D image and point cloud processing",
);

/**
 * Secure and simple to use cloud storage for your files; pCloud Drive, Electron Edition
 */
export const pcloud = mkPackage(
  nixRaw`pkgs.pcloud`,
  "Secure and simple to use cloud storage for your files; pCloud Drive, Electron Edition",
);

/**
 * Processor counter monitor
 */
export const pcm = mkPackage(
  nixRaw`pkgs.pcm`,
  "Processor counter monitor",
);

/**
 * File manager with GTK interface
 */
export const pcmanfm = mkPackage(
  nixRaw`pkgs.pcmanfm`,
  "File manager with GTK interface",
);

/**
 * File manager and desktop icon manager (Qt port of PCManFM and libfm)
 */
export const pcmanfm_qt = mkPackage(
  nixRaw`pkgs.pcmanfm-qt`,
  "File manager and desktop icon manager (Qt port of PCManFM and libfm)",
);

/**
 * Telnet BBS browser with GTK interface
 */
export const pcmanx_gtk2 = mkPackage(
  nixRaw`pkgs.pcmanx-gtk2`,
  "Telnet BBS browser with GTK interface",
);

export const pcmciaUtils = mkPackage(
  nixRaw`pkgs.pcmciaUtils`,
  "",
);

/**
 * An API for the Polarizable Continuum Model
 */
export const pcmsolver = mkPackage(
  nixRaw`pkgs.pcmsolver`,
  "An API for the Polarizable Continuum Model",
);

/**
 * Command line peer-to-peer data transfer tool based on libp2p
 */
export const pcp = mkPackage(
  nixRaw`pkgs.pcp`,
  "Command line peer-to-peer data transfer tool based on libp2p",
);

/**
 * A library for Perl Compatible Regular Expressions
 */
export const pcre = mkPackage(
  nixRaw`pkgs.pcre`,
  "A library for Perl Compatible Regular Expressions",
);

/**
 * A library for Perl Compatible Regular Expressions
 */
export const pcre16 = mkPackage(
  nixRaw`pkgs.pcre16`,
  "A library for Perl Compatible Regular Expressions",
);

/**
 * Perl Compatible Regular Expressions
 */
export const pcre2 = mkPackage(
  nixRaw`pkgs.pcre2`,
  "Perl Compatible Regular Expressions",
);

/**
 * A library for Perl Compatible Regular Expressions
 */
export const pcre_cpp = mkPackage(
  nixRaw`pkgs.pcre-cpp`,
  "A library for Perl Compatible Regular Expressions",
);

/**
 * REINER SCT cyberJack USB chipcard reader user space driver
 */
export const pcsc_cyberjack = mkPackage(
  nixRaw`pkgs.pcsc-cyberjack`,
  "REINER SCT cyberJack USB chipcard reader user space driver",
);

/**
 * Safenet Authentication Client
 */
export const pcsc_safenet = mkPackage(
  nixRaw`pkgs.pcsc-safenet`,
  "Safenet Authentication Client",
);

/**
 * SCM Microsystems SCL011 chipcard reader user space driver
 */
export const pcsc_scm_scl011 = mkPackage(
  nixRaw`pkgs.pcsc-scm-scl011`,
  "SCM Microsystems SCL011 chipcard reader user space driver",
);

/**
 * Middleware to access a smart card using SCard API (PC/SC)
 */
export const pcsclite = mkPackage(
  nixRaw`pkgs.pcsclite`,
  "Middleware to access a smart card using SCard API (PC/SC)",
);

/**
 * Middleware to access a smart card using SCard API (PC/SC)
 */
export const pcscliteWithPolkit = mkPackage(
  nixRaw`pkgs.pcscliteWithPolkit`,
  "Middleware to access a smart card using SCard API (PC/SC)",
);

/**
 * Tools used to test a PC/SC driver, card or reader
 */
export const pcsctools = mkPackage(
  nixRaw`pkgs.pcsctools`,
  "Tools used to test a PC/SC driver, card or reader",
);

/**
 * Page Cache stat: get page cache stats for files on Linux
 */
export const pcstat = mkPackage(
  nixRaw`pkgs.pcstat`,
  "Page Cache stat: get page cache stats for files on Linux",
);

/**
 * Playstation 2 emulator
 */
export const pcsx2 = mkPackage(
  nixRaw`pkgs.pcsx2`,
  "Playstation 2 emulator",
);

/**
 * Playstation 1 emulator
 */
export const pcsxr = mkPackage(
  nixRaw`pkgs.pcsxr`,
  "Playstation 1 emulator",
);

/**
 * PDAL is Point Data Abstraction Library. GDAL for point cloud data
 */
export const pdal = mkPackage(
  nixRaw`pkgs.pdal`,
  "PDAL is Point Data Abstraction Library. GDAL for point cloud data",
);

/**
 * Software for determining titration states, adding missing atoms, and assigning charges/radii to biomolecules
 */
export const pdb2pqr = mkPackage(
  nixRaw`pkgs.pdb2pqr`,
  "Software for determining titration states, adding missing atoms, and assigning charges/radii to biomolecules",
);

/**
 * Tiny date, time diff calculator
 */
export const pdd = mkPackage(
  nixRaw`pkgs.pdd`,
  "Tiny date, time diff calculator",
);

/**
 * An adaptation of JDepend for PHP
 */
export const pdepend = mkPackage(
  nixRaw`pkgs.pdepend`,
  "An adaptation of JDepend for PHP",
);

/**
 * Creates djvu files from PDF files
 */
export const pdf2djvu = mkPackage(
  nixRaw`pkgs.pdf2djvu`,
  "Creates djvu files from PDF files",
);

/**
 * PDF to ODT format converter
 */
export const pdf2odt = mkPackage(
  nixRaw`pkgs.pdf2odt`,
  "PDF to ODT format converter",
);

/**
 * PDF converter to SVG format
 */
export const pdf2svg = mkPackage(
  nixRaw`pkgs.pdf2svg`,
  "PDF converter to SVG format",
);

/**
 * Parse a PDF document
 */
export const pdf_parser = mkPackage(
  nixRaw`pkgs.pdf-parser`,
  "Parse a PDF document",
);

/**
 * A visual tool for cropping pdf files
 */
export const pdf_quench = mkPackage(
  nixRaw`pkgs.pdf-quench`,
  "A visual tool for cropping pdf files",
);

/**
 * A tool to visually sign PDF files
 */
export const pdf_sign = mkPackage(
  nixRaw`pkgs.pdf-sign`,
  "A tool to visually sign PDF files",
);

/**
 * Merge or split pdf documents and rotate, crop and rearrange their pages using an interactive and intuitive graphical interface
 */
export const pdfarranger = mkPackage(
  nixRaw`pkgs.pdfarranger`,
  "Merge or split pdf documents and rotate, crop and rearrange their pages using an interactive and intuitive graphical interface",
);

/**
 * A graphical user interface for the PDF Toolkit (PDFtk)
 */
export const pdfchain = mkPackage(
  nixRaw`pkgs.pdfchain`,
  "A graphical user interface for the PDF Toolkit (PDFtk)",
);

/**
 * A PDF processor written in Go
 */
export const pdfcpu = mkPackage(
  nixRaw`pkgs.pdfcpu`,
  "A PDF processor written in Go",
);

/**
 * Small command line driven tool for recovering passwords and content from PDF files
 */
export const pdfcrack = mkPackage(
  nixRaw`pkgs.pdfcrack`,
  "Small command line driven tool for recovering passwords and content from PDF files",
);

/**
 * Tool to view the difference between two PDF or PS files
 */
export const pdfdiff = mkPackage(
  nixRaw`pkgs.pdfdiff`,
  "Tool to view the difference between two PDF or PS files",
);

/**
 * Commandline utility to search text in PDF files
 */
export const pdfgrep = mkPackage(
  nixRaw`pkgs.pdfgrep`,
  "Commandline utility to search text in PDF files",
);

/**
 * A Fast and Free C++ Library for Creating, Parsing an Manipulating PDF Files and Streams
 */
export const pdfhummus = mkPackage(
  nixRaw`pkgs.pdfhummus`,
  "A Fast and Free C++ Library for Creating, Parsing an Manipulating PDF Files and Streams",
);

/**
 * PDF parser and analyzer
 */
export const pdfminer = mkPackage(
  nixRaw`pkgs.pdfminer`,
  "PDF parser and analyzer",
);

/**
 * An application to split, merge, rotate and mix PDF files
 */
export const pdfmixtool = mkPackage(
  nixRaw`pkgs.pdfmixtool`,
  "An application to split, merge, rotate and mix PDF files",
);

/**
 * Graphical assistant to reduce the size of a PDF file
 */
export const pdfmm = mkPackage(
  nixRaw`pkgs.pdfmm`,
  "Graphical assistant to reduce the size of a PDF file",
);

/**
 * A presenter console with multi-monitor support for PDF files
 */
export const pdfpc = mkPackage(
  nixRaw`pkgs.pdfpc`,
  "A presenter console with multi-monitor support for PDF files",
);

/**
 * Split large pages of a PDF into smaller ones for poster printing
 */
export const pdfposter = mkPackage(
  nixRaw`pkgs.pdfposter`,
  "Split large pages of a PDF into smaller ones for poster printing",
);

/**
 * Multi-platform software designed to extract pages, split, merge, mix and rotate PDF files
 */
export const pdfsam_basic = mkPackage(
  nixRaw`pkgs.pdfsam-basic`,
  "Multi-platform software designed to extract pages, split, merge, mix and rotate PDF files",
);

/**
 * OCR tool for scanned PDFs
 */
export const pdfsandwich = mkPackage(
  nixRaw`pkgs.pdfsandwich`,
  "OCR tool for scanned PDFs",
);

/**
 * A simple application to extract, merge, rotate and reorder pages of PDF documents
 */
export const pdfslicer = mkPackage(
  nixRaw`pkgs.pdfslicer`,
  "A simple application to extract, merge, rotate and reorder pages of PDF documents",
);

/**
 * An easy to use, full-featured PDF editing software
 */
export const pdfstudio2021 = mkPackage(
  nixRaw`pkgs.pdfstudio2021`,
  "An easy to use, full-featured PDF editing software",
);

/**
 * An easy to use, full-featured PDF editing software
 */
export const pdfstudio2022 = mkPackage(
  nixRaw`pkgs.pdfstudio2022`,
  "An easy to use, full-featured PDF editing software",
);

/**
 * An easy to use, full-featured PDF editing software
 */
export const pdfstudio2023 = mkPackage(
  nixRaw`pkgs.pdfstudio2023`,
  "An easy to use, full-featured PDF editing software",
);

/**
 * An easy to use, full-featured PDF editing software
 */
export const pdfstudioviewer = mkPackage(
  nixRaw`pkgs.pdfstudioviewer`,
  "An easy to use, full-featured PDF editing software",
);

/**
 * Edit metadata found in PDFs
 */
export const pdftag = mkPackage(
  nixRaw`pkgs.pdftag`,
  "Edit metadata found in PDFs",
);

/**
 * Command-line tool for working with PDFs
 */
export const pdftk = mkPackage(
  nixRaw`pkgs.pdftk`,
  "Command-line tool for working with PDFs",
);

/**
 * A program that tries to convert arbitrary PDF documents to Ipe files
 */
export const pdftoipe = mkPackage(
  nixRaw`pkgs.pdftoipe`,
  "A program that tries to convert arbitrary PDF documents to Ipe files",
);

/**
 * A low-level Apple partition table editor for Linux, OSS Apple version
 */
export const pdisk = mkPackage(
  nixRaw`pkgs.pdisk`,
  "A low-level Apple partition table editor for Linux, OSS Apple version",
);

/**
 * A modern Python package manager with PEP 582 support
 */
export const pdm = mkPackage(
  nixRaw`pkgs.pdm`,
  "A modern Python package manager with PEP 582 support",
);

/**
 * Authoritative DNS server
 */
export const pdns = mkPackage(
  nixRaw`pkgs.pdns`,
  "Authoritative DNS server",
);

/**
 * A recursive DNS server
 */
export const pdns_recursor = mkPackage(
  nixRaw`pkgs.pdns-recursor`,
  "A recursive DNS server",
);

/**
 * Permanent DNS caching
 */
export const pdnsd = mkPackage(
  nixRaw`pkgs.pdnsd`,
  "Permanent DNS caching",
);

/**
 * High-performance, parallel remote shell utility
 */
export const pdsh = mkPackage(
  nixRaw`pkgs.pdsh`,
  "High-performance, parallel remote shell utility",
);

/**
 * Portable Executable reversing tool with a friendly GUI
 */
export const pe_bear = mkPackage(
  nixRaw`pkgs.pe-bear`,
  "Portable Executable reversing tool with a friendly GUI",
);

/**
 * A principled, lightweight parser for Windows portable executable files
 */
export const pe_parse = mkPackage(
  nixRaw`pkgs.pe-parse`,
  "A principled, lightweight parser for Windows portable executable files",
);

/**
 * A clock, timer, and stopwatch for the terminal
 */
export const peaclock = mkPackage(
  nixRaw`pkgs.peaclock`,
  "A clock, timer, and stopwatch for the terminal",
);

/**
 * Cross-platform file and archive manager
 */
export const peazip = mkPackage(
  nixRaw`pkgs.peazip`,
  "Cross-platform file and archive manager",
);

/**
 * A miniature version of Boulder, Pebble is a small RFC 8555 ACME test server not suited for a production CA
 */
export const pebble = mkPackage(
  nixRaw`pkgs.pebble`,
  "A miniature version of Boulder, Pebble is a small RFC 8555 ACME test server not suited for a production CA",
);

/**
 * Handwritten font with connected glyphs
 */
export const pecita = mkPackage(
  nixRaw`pkgs.pecita`,
  "Handwritten font with connected glyphs",
);

/**
 * Simplistic interactive filtering tool
 */
export const peco = mkPackage(
  nixRaw`pkgs.peco`,
  "Simplistic interactive filtering tool",
);

/**
 * Simple animated GIF screen recorder with an easy to use interface
 */
export const peek = mkPackage(
  nixRaw`pkgs.peek`,
  "Simple animated GIF screen recorder with an easy to use interface",
);

/**
 * The CLI text viewer tool that works like less command on small pane within the terminal window
 */
export const peep = mkPackage(
  nixRaw`pkgs.peep`,
  "The CLI text viewer tool that works like less command on small pane within the terminal window",
);

/**
 * BGP sessions management tool
 */
export const peering_manager = mkPackage(
  nixRaw`pkgs.peering-manager`,
  "BGP sessions management tool",
);

/**
 * A free software to take back control of your videos
 */
export const peertube = mkPackage(
  nixRaw`pkgs.peertube`,
  "A free software to take back control of your videos",
);

/**
 * Tools for generating recursive-descent parsers: programs that perform pattern matching on text
 */
export const peg = mkPackage(
  nixRaw`pkgs.peg`,
  "Tools for generating recursive-descent parsers: programs that perform pattern matching on text",
);

/**
 * A cross platform, customizable graphical frontend for launching emulators and managing your game collection.
 */
export const pegasus_frontend = mkPackage(
  nixRaw`pkgs.pegasus-frontend`,
  "A cross platform, customizable graphical frontend for launching emulators and managing your game collection.",
);

/**
 * A lightweight window manager
 */
export const pekwm = mkPackage(
  nixRaw`pkgs.pekwm`,
  "A lightweight window manager",
);

/**
 * A simple host availability monitor
 */
export const pell = mkPackage(
  nixRaw`pkgs.pell`,
  "A simple host availability monitor",
);

/**
 * GUI prototyping/mockup tool
 */
export const pencil = mkPackage(
  nixRaw`pkgs.pencil`,
  "GUI prototyping/mockup tool",
);

/**
 * Geometric sans serif designed by Sora Sagano
 */
export const penna = mkPackage(
  nixRaw`pkgs.penna`,
  "Geometric sans serif designed by Sora Sagano",
);

/**
 * GPT-empowered penetration testing tool
 */
export const pentestgpt = mkPackage(
  nixRaw`pkgs.pentestgpt`,
  "GPT-empowered penetration testing tool",
);

/**
 * A computer opponent for the board game Blokus
 */
export const pentobi = mkPackage(
  nixRaw`pkgs.pentobi`,
  "A computer opponent for the board game Blokus",
);

/**
 * Perccli Support for PERC RAID controllers
 */
export const perccli = mkPackage(
  nixRaw`pkgs.perccli`,
  "Perccli Support for PERC RAID controllers",
);

/**
 * A program that compares two images using a perceptually based image metric
 */
export const perceptualdiff = mkPackage(
  nixRaw`pkgs.perceptualdiff`,
  "A program that compares two images using a perceptually based image metric",
);

/**
 * A command-line tool to turn web pages into readable PDF, EPUB, HTML, or Markdown docs
 */
export const percollate = mkPackage(
  nixRaw`pkgs.percollate`,
  "A command-line tool to turn web pages into readable PDF, EPUB, HTML, or Markdown docs",
);

        /**
         * A free, fully compatible, enhanced, open source drop-in replacement for
MySQL® that provides superior performance, scalability and instrumentation.

         */
export const percona_server_8_0 = mkPackage(
  nixRaw`pkgs.percona-server_8_0`,
  "A free, fully compatible, enhanced, open source drop-in replacement for\nMySQL® that provides superior performance, scalability and instrumentation.\n",
);

/**
 * Non-blocking backup tool for MySQL
 */
export const percona_xtrabackup = mkPackage(
  nixRaw`pkgs.percona-xtrabackup`,
  "Non-blocking backup tool for MySQL",
);

/**
 * Non-blocking backup tool for MySQL
 */
export const percona_xtrabackup_8_0 = mkPackage(
  nixRaw`pkgs.percona-xtrabackup_8_0`,
  "Non-blocking backup tool for MySQL",
);

/**
 * Performance analysis tools based on Linux perf_events (aka perf) and ftrace
 */
export const perf_tools = mkPackage(
  nixRaw`pkgs.perf-tools`,
  "Performance analysis tools based on Linux perf_events (aka perf) and ftrace",
);

/**
 * Minimal perfect hash function generator
 */
export const perfect_hash = mkPackage(
  nixRaw`pkgs.perfect-hash`,
  "Minimal perfect hash function generator",
);

/**
 * Karaoke, band and dancing game
 */
export const performous = mkPackage(
  nixRaw`pkgs.performous`,
  "Karaoke, band and dancing game",
);

/**
 * A way of storing, syncing, sharing, modelling and backing up content (née Camlistore)
 */
export const perkeep = mkPackage(
  nixRaw`pkgs.perkeep`,
  "A way of storing, syncing, sharing, modelling and backing up content (née Camlistore)",
);

/**
 * The standard implementation of the Perl 5 programming language
 */
export const perl = mkPackage(
  nixRaw`pkgs.perl`,
  "The standard implementation of the Perl 5 programming language",
);

/**
 * The standard implementation of the Perl 5 programming language
 */
export const perl536 = mkPackage(
  nixRaw`pkgs.perl536`,
  "The standard implementation of the Perl 5 programming language",
);

/**
 * The standard implementation of the Perl 5 programming language
 */
export const perl538 = mkPackage(
  nixRaw`pkgs.perl538`,
  "The standard implementation of the Perl 5 programming language",
);

/**
 * Critique Perl source code for best-practices
 */
export const perlcritic = mkPackage(
  nixRaw`pkgs.perlcritic`,
  "Critique Perl source code for best-practices",
);

/**
 * Perl Language Server that includes syntax checking, perl critic, and code navigation
 */
export const perlnavigator = mkPackage(
  nixRaw`pkgs.perlnavigator`,
  "Perl Language Server that includes syntax checking, perl critic, and code navigation",
);

/**
 * Unofficial ProtonMail bridge
 */
export const peroxide = mkPackage(
  nixRaw`pkgs.peroxide`,
  "Unofficial ProtonMail bridge",
);

/**
 * Persepolis Download Manager is a GUI for aria2
 */
export const persepolis = mkPackage(
  nixRaw`pkgs.persepolis`,
  "Persepolis Download Manager is a GUI for aria2",
);

/**
 * The Persistent Homology Software
 */
export const perseus = mkPackage(
  nixRaw`pkgs.perseus`,
  "The Persistent Homology Software",
);

/**
 * A high-level web development framework for Rust with full support for server-side rendering and static generation
 */
export const perseus_cli = mkPackage(
  nixRaw`pkgs.perseus-cli`,
  "A high-level web development framework for Rust with full support for server-side rendering and static generation",
);

/**
 * Persistent virtual input devices for qemu/libvirt/evdev hotplug support
 */
export const persistent_evdev = mkPackage(
  nixRaw`pkgs.persistent-evdev`,
  "Persistent virtual input devices for qemu/libvirt/evdev hotplug support",
);

/**
 * A tool for including other people's code in your projects
 */
export const peru = mkPackage(
  nixRaw`pkgs.peru`,
  "A tool for including other people's code in your projects",
);

/**
 * A comic book reader
 */
export const peruse = mkPackage(
  nixRaw`pkgs.peruse`,
  "A comic book reader",
);

/**
 * Signing tools for PE-COFF binaries. Compliant with the PE and Authenticode specifications.
 */
export const pesign = mkPackage(
  nixRaw`pkgs.pesign`,
  "Signing tools for PE-COFF binaries. Compliant with the PE and Authenticode specifications.",
);

/**
 * IDE support for Pest, via the LSP.
 */
export const pest_ide_tools = mkPackage(
  nixRaw`pkgs.pest-ide-tools`,
  "IDE support for Pest, via the LSP.",
);

/**
 * Simple command-line snippet manager, written in Go
 */
export const pet = mkPackage(
  nixRaw`pkgs.pet`,
  "Simple command-line snippet manager, written in Go",
);

/**
 * A simple and easy to administer mailing list server
 */
export const petidomo = mkPackage(
  nixRaw`pkgs.petidomo`,
  "A simple and easy to administer mailing list server",
);

/**
 * MIDI controllable audio sampler
 */
export const petrifoo = mkPackage(
  nixRaw`pkgs.petrifoo`,
  "MIDI controllable audio sampler",
);

/**
 * Portable Extensible Toolkit for Scientific computation
 */
export const petsc = mkPackage(
  nixRaw`pkgs.petsc`,
  "Portable Extensible Toolkit for Scientific computation",
);

/**
 * A full-featured, open source, multiplatform command line toolkit to work with PE (Portable Executables) binaries
 */
export const pev = mkPackage(
  nixRaw`pkgs.pev`,
  "A full-featured, open source, multiplatform command line toolkit to work with PE (Portable Executables) binaries",
);

/**
 * Tools to manage multiple virtualenvs written in pure python
 */
export const pew = mkPackage(
  nixRaw`pkgs.pew`,
  "Tools to manage multiple virtualenvs written in pure python",
);

/**
 * Tool for downloading course-related files from ILIAS
 */
export const pferd = mkPackage(
  nixRaw`pkgs.pferd`,
  "Tool for downloading course-related files from ILIAS",
);

/**
 * A pretty system information tool written in POSIX sh
 */
export const pfetch = mkPackage(
  nixRaw`pkgs.pfetch`,
  "A pretty system information tool written in POSIX sh",
);

/**
 * A rewrite of the pfetch system information tool in Rust
 */
export const pfetch_rs = mkPackage(
  nixRaw`pkgs.pfetch-rs`,
  "A rewrite of the pfetch system information tool in Rust",
);

/**
 * Pretty Fast FFT (PFFFT) library
 */
export const pffft = mkPackage(
  nixRaw`pkgs.pffft`,
  "Pretty Fast FFT (PFFFT) library",
);

/**
 * A collection of postfix-related tools
 */
export const pfixtools = mkPackage(
  nixRaw`pkgs.pfixtools`,
  "A collection of postfix-related tools",
);

/**
 * Lightweight process containers for Linux
 */
export const pflask = mkPackage(
  nixRaw`pkgs.pflask`,
  "Lightweight process containers for Linux",
);

/**
 * Postfix activity overview
 */
export const pflogsumm = mkPackage(
  nixRaw`pkgs.pflogsumm`,
  "Postfix activity overview",
);

/**
 * Portable Portable ANS-like Forth written in ANSI 'C'
 */
export const pforth = mkPackage(
  nixRaw`pkgs.pforth`,
  "Portable Portable ANS-like Forth written in ANSI 'C'",
);

/**
 * PFS (PlayStation File System) shell for POSIX-based systems
 */
export const pfsshell = mkPackage(
  nixRaw`pkgs.pfsshell`,
  "PFS (PlayStation File System) shell for POSIX-based systems",
);

/**
 * Toolkit for manipulation of HDR images
 */
export const pfstools = mkPackage(
  nixRaw`pkgs.pfstools`,
  "Toolkit for manipulation of HDR images",
);

/**
 * A top like application for PostgreSQL server activity monitoring
 */
export const pg_activity = mkPackage(
  nixRaw`pkgs.pg_activity`,
  "A top like application for PostgreSQL server activity monitoring",
);

/**
 * Activate/deactivate/verify checksums in offline PostgreSQL clusters
 */
export const pg_checksums = mkPackage(
  nixRaw`pkgs.pg_checksums`,
  "Activate/deactivate/verify checksums in offline PostgreSQL clusters",
);

/**
 * Lightweight RESTful Geospatial Feature Server for PostGIS in Go
 */
export const pg_featureserv = mkPackage(
  nixRaw`pkgs.pg_featureserv`,
  "Lightweight RESTful Geospatial Feature Server for PostGIS in Go",
);

/**
 * Flamegraph generator for Postgres EXPLAIN ANALYZE output
 */
export const pg_flame = mkPackage(
  nixRaw`pkgs.pg_flame`,
  "Flamegraph generator for Postgres EXPLAIN ANALYZE output",
);

/**
 * A very thin PostGIS-only tile server in Go
 */
export const pg_tileserv = mkPackage(
  nixRaw`pkgs.pg_tileserv`,
  "A very thin PostGIS-only tile server in Go",
);

/**
 * A 'top' like tool for PostgreSQL
 */
export const pg_top = mkPackage(
  nixRaw`pkgs.pg_top`,
  "A 'top' like tool for PostgreSQL",
);

/**
 * Administration and development platform for PostgreSQL
 */
export const pgadmin4 = mkPackage(
  nixRaw`pkgs.pgadmin4`,
  "Administration and development platform for PostgreSQL",
);

/**
 * Administration and development platform for PostgreSQL. Desktop Mode
 */
export const pgadmin4_desktopmode = mkPackage(
  nixRaw`pkgs.pgadmin4-desktopmode`,
  "Administration and development platform for PostgreSQL. Desktop Mode",
);

/**
 * High-performance connection pool for PostgreSQL
 */
export const pgagroal = mkPackage(
  nixRaw`pkgs.pgagroal`,
  "High-performance connection pool for PostgreSQL",
);

/**
 * Reliable PostgreSQL backup & restore
 */
export const pgbackrest = mkPackage(
  nixRaw`pkgs.pgbackrest`,
  "Reliable PostgreSQL backup & restore",
);

/**
 * A fast PostgreSQL Log Analyzer
 */
export const pgbadger = mkPackage(
  nixRaw`pkgs.pgbadger`,
  "A fast PostgreSQL Log Analyzer",
);

/**
 * Lightweight connection pooler for PostgreSQL
 */
export const pgbouncer = mkPackage(
  nixRaw`pkgs.pgbouncer`,
  "Lightweight connection pooler for PostgreSQL",
);

/**
 * PostgreSQL pooler with sharding, load balancing and failover support.
 */
export const pgcat = mkPackage(
  nixRaw`pkgs.pgcat`,
  "PostgreSQL pooler with sharding, load balancing and failover support.",
);

/**
 * Command-line admin tool for observing and troubleshooting PostgreSQL
 */
export const pgcenter = mkPackage(
  nixRaw`pkgs.pgcenter`,
  "Command-line admin tool for observing and troubleshooting PostgreSQL",
);

/**
 * Command-line interface for PostgreSQL
 */
export const pgcli = mkPackage(
  nixRaw`pkgs.pgcli`,
  "Command-line interface for PostgreSQL",
);

/**
 * A Portable Graphic Format for TeX - version 23.11pre-git
 */
export const pgf = mkPackage(
  nixRaw`pkgs.pgf`,
  "A Portable Graphic Format for TeX - version 23.11pre-git",
);

/**
 * A Portable Graphic Format for TeX - version 1.18
 */
export const pgf1 = mkPackage(
  nixRaw`pkgs.pgf1`,
  "A Portable Graphic Format for TeX - version 1.18",
);

/**
 * A Portable Graphic Format for TeX - version 23.11pre-git
 */
export const pgf2 = mkPackage(
  nixRaw`pkgs.pgf2`,
  "A Portable Graphic Format for TeX - version 23.11pre-git",
);

/**
 * A Portable Graphic Format for TeX - version 3.1.10
 */
export const pgf3 = mkPackage(
  nixRaw`pkgs.pgf3`,
  "A Portable Graphic Format for TeX - version 3.1.10",
);

/**
 * Progressive Graphics Format command line program
 */
export const pgf_graphics = mkPackage(
  nixRaw`pkgs.pgf_graphics`,
  "Progressive Graphics Format command line program",
);

/**
 * Some LaTeX macros for pie charts using the PGF/TikZ package
 */
export const pgf_pie = mkPackage(
  nixRaw`pkgs.pgf-pie`,
  "Some LaTeX macros for pie charts using the PGF/TikZ package",
);

/**
 * Some LaTeX macros for UML Class Diagrams
 */
export const pgf_umlcd = mkPackage(
  nixRaw`pkgs.pgf-umlcd`,
  "Some LaTeX macros for UML Class Diagrams",
);

/**
 * Some LaTeX macros for UML Sequence Diagrams
 */
export const pgf_umlsd = mkPackage(
  nixRaw`pkgs.pgf-umlsd`,
  "Some LaTeX macros for UML Sequence Diagrams",
);

/**
 * A PostgreSQL SQL syntax beautifier that can work as a console program or as a CGI
 */
export const pgformatter = mkPackage(
  nixRaw`pkgs.pgformatter`,
  "A PostgreSQL SQL syntax beautifier that can work as a console program or as a CGI",
);

/**
 * TeX package to draw plots directly in TeX in two and three dimensions
 */
export const pgfplots = mkPackage(
  nixRaw`pkgs.pgfplots`,
  "TeX package to draw plots directly in TeX in two and three dimensions",
);

/**
 * Loads data into PostgreSQL and allows you to implement Continuous Migration from your current database to PostgreSQL
 */
export const pgloader = mkPackage(
  nixRaw`pkgs.pgloader`,
  "Loads data into PostgreSQL and allows you to implement Continuous Migration from your current database to PostgreSQL",
);

/**
 * A fast replacement for PGAdmin
 */
export const pgmanage = mkPackage(
  nixRaw`pkgs.pgmanage`,
  "A fast replacement for PGAdmin",
);

/**
 * Collect and display information and stats from a running PostgreSQL server
 */
export const pgmetrics = mkPackage(
  nixRaw`pkgs.pgmetrics`,
  "Collect and display information and stats from a running PostgreSQL server",
);

/**
 * A database modeling tool for PostgreSQL
 */
export const pgmodeler = mkPackage(
  nixRaw`pkgs.pgmodeler`,
  "A database modeling tool for PostgreSQL",
);

/**
 * Backup / restore solution for PostgreSQL
 */
export const pgmoneta = mkPackage(
  nixRaw`pkgs.pgmoneta`,
  "Backup / restore solution for PostgreSQL",
);

/**
 * A CLI client for Crunchy PostgreSQL Kubernetes Operator
 */
export const pgo_client = mkPackage(
  nixRaw`pkgs.pgo-client`,
  "A CLI client for Crunchy PostgreSQL Kubernetes Operator",
);

/**
 * A PGP packet visualizer
 */
export const pgpdump = mkPackage(
  nixRaw`pkgs.pgpdump`,
  "A PGP packet visualizer",
);

/**
 * A lightweight static front-end for a sks keyserver
 */
export const pgpkeyserver_lite = mkPackage(
  nixRaw`pkgs.pgpkeyserver-lite`,
  "A lightweight static front-end for a sks keyserver",
);

/**
 * A middleware that works between PostgreSQL servers and PostgreSQL clients
 */
export const pgpool = mkPackage(
  nixRaw`pkgs.pgpool`,
  "A middleware that works between PostgreSQL servers and PostgreSQL clients",
);

/**
 * Selfhosted TCP/HTTP tunnel, ngrok alternative, written in Go
 */
export const pgrok = mkPackage(
  nixRaw`pkgs.pgrok`,
  "Selfhosted TCP/HTTP tunnel, ngrok alternative, written in Go",
);

/**
 * Sync data from one Postgres database to another (like `pg_dump`/`pg_restore`)
 */
export const pgsync = mkPackage(
  nixRaw`pkgs.pgsync`,
  "Sync data from one Postgres database to another (like `pg_dump`/`pg_restore`)",
);

/**
 * a PostgreSQL clone of `mytop', which in turn is a `top' clone for MySQL
 */
export const pgtop = mkPackage(
  nixRaw`pkgs.pgtop`,
  "a PostgreSQL clone of `mytop', which in turn is a `top' clone for MySQL",
);

/**
 * A web-based database browser for PostgreSQL
 */
export const pgweb = mkPackage(
  nixRaw`pkgs.pgweb`,
  "A web-based database browser for PostgreSQL",
);

/**
 * A cross-platform proxy client/server for Linux/Windows/macOS
 */
export const phantomsocks = mkPackage(
  nixRaw`pkgs.phantomsocks`,
  "A cross-platform proxy client/server for Linux/Windows/macOS",
);

/**
 * Clean and innovative Smalltalk-inspired environment
 */
export const pharo = mkPackage(
  nixRaw`pkgs.pharo`,
  "Clean and innovative Smalltalk-inspired environment",
);

/**
 * Compute the perceptual hash of an image
 */
export const phash = mkPackage(
  nixRaw`pkgs.phash`,
  "Compute the perceptual hash of an image",
);

/**
 * Telescope auto-guidance application
 */
export const phd2 = mkPackage(
  nixRaw`pkgs.phd2`,
  "Telescope auto-guidance application",
);

/**
 * A quick lil gopher client for your terminal, written in rust
 */
export const phetch = mkPackage(
  nixRaw`pkgs.phetch`,
  "A quick lil gopher client for your terminal, written in rust",
);

/**
 * The most over-engineered cursor theme
 */
export const phinger_cursors = mkPackage(
  nixRaw`pkgs.phinger-cursors`,
  "The most over-engineered cursor theme",
);

/**
 * Grafana Phlare is an open source database that provides fast, scalable, highly available, and efficient storage and querying of profiling data.
 */
export const phlare = mkPackage(
  nixRaw`pkgs.phlare`,
  "Grafana Phlare is an open source database that provides fast, scalable, highly available, and efficient storage and querying of profiling data.",
);

/**
 * Wayland compositor for mobile phones like the Librem 5
 */
export const phoc = mkPackage(
  nixRaw`pkgs.phoc`,
  "Wayland compositor for mobile phones like the Librem 5",
);

/**
 * Media sorting tool to organize photos and videos from your camera in folders by year, month and day
 */
export const phockup = mkPackage(
  nixRaw`pkgs.phockup`,
  "Media sorting tool to organize photos and videos from your camera in folders by year, month and day",
);

/**
 * WebDav server implementation and library using libsoup
 */
export const phodav = mkPackage(
  nixRaw`pkgs.phodav`,
  "WebDav server implementation and library using libsoup",
);

/**
 * Simple text to phones converter for multiple languages
 */
export const phonemizer = mkPackage(
  nixRaw`pkgs.phonemizer`,
  "Simple text to phones converter for multiple languages",
);

/**
 * Framework for Grapheme-to-phoneme models for speech recognition using the OpenFst framework
 */
export const phonetisaurus = mkPackage(
  nixRaw`pkgs.phonetisaurus`,
  "Framework for Grapheme-to-phoneme models for speech recognition using the OpenFst framework",
);

/**
 * Open-Source, Automated Benchmarking
 */
export const phoronix_test_suite = mkPackage(
  nixRaw`pkgs.phoronix-test-suite`,
  "Open-Source, Automated Benchmarking",
);

/**
 * A pure Wayland shell prototype for GNOME on mobile devices
 */
export const phosh = mkPackage(
  nixRaw`pkgs.phosh`,
  "A pure Wayland shell prototype for GNOME on mobile devices",
);

/**
 * A settings app for mobile specific things
 */
export const phosh_mobile_settings = mkPackage(
  nixRaw`pkgs.phosh-mobile-settings`,
  "A settings app for mobile specific things",
);

/**
 * Experimental fast photo viewer
 */
export const photofield = mkPackage(
  nixRaw`pkgs.photofield`,
  "Experimental fast photo viewer",
);

/**
 * A cross-platform image editor with a powerful features and a very friendly graphical user interface
 */
export const photoflare = mkPackage(
  nixRaw`pkgs.photoflare`,
  "A cross-platform image editor with a powerful features and a very friendly graphical user interface",
);

/**
 * a lightning fast web crawler which extracts URLs, files, intel & endpoints from a target
 */
export const photon = mkPackage(
  nixRaw`pkgs.photon`,
  "a lightning fast web crawler which extracts URLs, files, intel & endpoints from a target",
);

/**
 * RSS/Atom reader with the focus on speed, usability and a bit of unix philosophy
 */
export const photon_rss = mkPackage(
  nixRaw`pkgs.photon-rss`,
  "RSS/Atom reader with the focus on speed, usability and a bit of unix philosophy",
);

/**
 * Personal Photo Management powered by Go and Google TensorFlow
 */
export const photoprism = mkPackage(
  nixRaw`pkgs.photoprism`,
  "Personal Photo Management powered by Go and Google TensorFlow",
);

/**
 * Simple, yet powerful and good looking image viewer
 */
export const photoqt = mkPackage(
  nixRaw`pkgs.photoqt`,
  "Simple, yet powerful and good looking image viewer",
);

/**
 * An image viewer and organizer
 */
export const phototonic = mkPackage(
  nixRaw`pkgs.phototonic`,
  "An image viewer and organizer",
);

/**
 * An HTML-embedded scripting language
 */
export const php = mkPackage(
  nixRaw`pkgs.php`,
  "An HTML-embedded scripting language",
);

/**
 * An HTML-embedded scripting language
 */
export const php81 = mkPackage(
  nixRaw`pkgs.php81`,
  "An HTML-embedded scripting language",
);

/**
 * An HTML-embedded scripting language
 */
export const php82 = mkPackage(
  nixRaw`pkgs.php82`,
  "An HTML-embedded scripting language",
);

/**
 * An HTML-embedded scripting language
 */
export const php83 = mkPackage(
  nixRaw`pkgs.php83`,
  "An HTML-embedded scripting language",
);

export * as phpPackages from "./phpPackages/mod.ts";

/**
 * Mainly a PHP Language Server
 */
export const phpactor = mkPackage(
  nixRaw`pkgs.phpactor`,
  "Mainly a PHP Language Server",
);

/**
 * PHP documentation generator
 */
export const phpdocumentor = mkPackage(
  nixRaw`pkgs.phpdocumentor`,
  "PHP documentation generator",
);

/**
 * PHP Unit Testing framework
 */
export const phpunit = mkPackage(
  nixRaw`pkgs.phpunit`,
  "PHP Unit Testing framework",
);

/**
 * PhraseApp API v2 Command Line Client
 */
export const phrase_cli = mkPackage(
  nixRaw`pkgs.phrase-cli`,
  "PhraseApp API v2 Command Line Client",
);

/**
 * A modular and multi processing pass phrase cracking tool
 */
export const phrasendrescher = mkPackage(
  nixRaw`pkgs.phrasendrescher`,
  "A modular and multi processing pass phrase cracking tool",
);

/**
 * Old school comic web server
 */
export const phylactery = mkPackage(
  nixRaw`pkgs.phylactery`,
  "Old school comic web server",
);

/**
 * Library to provide abstract access to various archives
 */
export const physfs = mkPackage(
  nixRaw`pkgs.physfs`,
  "Library to provide abstract access to various archives",
);

/**
 * Library to provide abstract access to various archives
 */
export const physfs_2 = mkPackage(
  nixRaw`pkgs.physfs_2`,
  "Library to provide abstract access to various archives",
);

/**
 * A secure suspend/hibernate-friendly alternative to `vlock -an`
 */
export const physlock = mkPackage(
  nixRaw`pkgs.physlock`,
  "A secure suspend/hibernate-friendly alternative to `vlock -an`",
);

/**
 * A console front-end for Pandora.com
 */
export const pianobar = mkPackage(
  nixRaw`pkgs.pianobar`,
  "A console front-end for Pandora.com",
);

/**
 * A MIDI file player that teaches you how to play the piano
 */
export const pianobooster = mkPackage(
  nixRaw`pkgs.pianobooster`,
  "A MIDI file player that teaches you how to play the piano",
);

/**
 * Simple GUI for ByteDance's Piano Transcription with Pedals
 */
export const pianotrans = mkPackage(
  nixRaw`pkgs.pianotrans`,
  "Simple GUI for ByteDance's Piano Transcription with Pedals",
);

/**
 * The official MusicBrainz tagger
 */
export const picard = mkPackage(
  nixRaw`pkgs.picard`,
  "The official MusicBrainz tagger",
);

/**
 * Tools for high-throughput sequencing (HTS) data and formats such as SAM/BAM/CRAM and VCF
 */
export const picard_tools = mkPackage(
  nixRaw`pkgs.picard-tools`,
  "Tools for high-throughput sequencing (HTS) data and formats such as SAM/BAM/CRAM and VCF",
);

/**
 * Logic-based programming langage
 */
export const picat = mkPackage(
  nixRaw`pkgs.picat`,
  "Logic-based programming langage",
);

/**
 * Fuzzy text selection utility
 */
export const pick = mkPackage(
  nixRaw`pkgs.pick`,
  "Fuzzy text selection utility",
);

/**
 * A colour picker that remembers where you picked colours from
 */
export const pick_colour_picker = mkPackage(
  nixRaw`pkgs.pick-colour-picker`,
  "A colour picker that remembers where you picked colours from",
);

/**
 * SDK provides the headers, libraries and build system necessary to write programs for the RP2040-based devices
 */
export const pico_sdk = mkPackage(
  nixRaw`pkgs.pico-sdk`,
  "SDK provides the headers, libraries and build system necessary to write programs for the RP2040-based devices",
);

/**
 * Very small C interpreter for scripting
 */
export const picoc = mkPackage(
  nixRaw`pkgs.picoc`,
  "Very small C interpreter for scripting",
);

/**
 * Minimal dumb-terminal emulation program
 */
export const picocom = mkPackage(
  nixRaw`pkgs.picocom`,
  "Minimal dumb-terminal emulation program",
);

/**
 * A simple Lisp with an integrated database
 */
export const picolisp = mkPackage(
  nixRaw`pkgs.picolisp`,
  "A simple Lisp with an integrated database",
);

/**
 * A synth and a stepsequencer (a clone of the famous nanoloop)
 */
export const picoloop = mkPackage(
  nixRaw`pkgs.picoloop`,
  "A synth and a stepsequencer (a clone of the famous nanoloop)",
);

/**
 * A fork of XCompMgr, a sample compositing manager for X servers
 */
export const picom = mkPackage(
  nixRaw`pkgs.picom`,
  "A fork of XCompMgr, a sample compositing manager for X servers",
);

/**
 * A fork of picom featuring improved animations and other features
 */
export const picom_allusive = mkPackage(
  nixRaw`pkgs.picom-allusive`,
  "A fork of picom featuring improved animations and other features",
);

/**
 * A fork of picom featuring animations and improved rounded corners.
 */
export const picom_jonaburg = mkPackage(
  nixRaw`pkgs.picom-jonaburg`,
  "A fork of picom featuring animations and improved rounded corners.",
);

/**
 * A fork of XCompMgr, a sample compositing manager for X servers
 */
export const picom_next = mkPackage(
  nixRaw`pkgs.picom-next`,
  "A fork of XCompMgr, a sample compositing manager for X servers",
);

/**
 * Picoprobe udev rules list
 */
export const picoprobe_udev_rules = mkPackage(
  nixRaw`pkgs.picoprobe-udev-rules`,
  "Picoprobe udev rules list",
);

/**
 * SAT solver with proof and core support
 */
export const picosat = mkPackage(
  nixRaw`pkgs.picosat`,
  "SAT solver with proof and core support",
);

/**
 * Oscilloscope application that works with all PicoScope models
 */
export const picoscope = mkPackage(
  nixRaw`pkgs.picoscope`,
  "Oscilloscope application that works with all PicoScope models",
);

/**
 * Monitor network traffic per executable with hashing
 */
export const picosnitch = mkPackage(
  nixRaw`pkgs.picosnitch`,
  "Monitor network traffic per executable with hashing",
);

/**
 * Tool for interacting with a RP2040 device in BOOTSEL mode, or with a RP2040 binary
 */
export const picotool = mkPackage(
  nixRaw`pkgs.picotool`,
  "Tool for interacting with a RP2040 device in BOOTSEL mode, or with a RP2040 binary",
);

/**
 * Text to speech voice sinthesizer from SVox
 */
export const picotts = mkPackage(
  nixRaw`pkgs.picotts`,
  "Text to speech voice sinthesizer from SVox",
);

/**
 * A simple image hosting service
 */
export const pict_rs = mkPackage(
  nixRaw`pkgs.pict-rs`,
  "A simple image hosting service",
);

/**
 * A simple image hosting service
 */
export const pict_rs_0_3 = mkPackage(
  nixRaw`pkgs.pict-rs_0_3`,
  "A simple image hosting service",
);

/**
 * Signal handling and zombie reaping for PID1 process
 */
export const pid1 = mkPackage(
  nixRaw`pkgs.pid1`,
  "Signal handling and zombie reaping for PID1 process",
);

/**
 * Multi-protocol instant messaging client
 */
export const pidgin = mkPackage(
  nixRaw`pkgs.pidgin`,
  "Multi-protocol instant messaging client",
);

/**
 * A program invocation and execution supervisor
 */
export const pies = mkPackage(
  nixRaw`pkgs.pies`,
  "A program invocation and execution supervisor",
);

/**
 * Suite of tools and fixtures to manage daemons for testing
 */
export const pifpaf = mkPackage(
  nixRaw`pkgs.pifpaf`,
  "Suite of tools and fixtures to manage daemons for testing",
);

/**
 * High-level language for Apache Hadoop
 */
export const pig = mkPackage(
  nixRaw`pkgs.pig`,
  "High-level language for Apache Hadoop",
);

/**
 * A PEG parser generator for Go
 */
export const pigeon = mkPackage(
  nixRaw`pkgs.pigeon`,
  "A PEG parser generator for Go",
);

/**
 * An OpenGL test suite, and test-suite runner
 */
export const piglit = mkPackage(
  nixRaw`pkgs.piglit`,
  "An OpenGL test suite, and test-suite runner",
);

/**
 * A parallel implementation of gzip for multi-core machines
 */
export const pigz = mkPackage(
  nixRaw`pkgs.pigz`,
  "A parallel implementation of gzip for multi-core machines",
);

/**
 * Library and resources for PiJuice HAT for Raspberry Pi
 */
export const pijuice = mkPackage(
  nixRaw`pkgs.pijuice`,
  "Library and resources for PiJuice HAT for Raspberry Pi",
);

/**
 * A distributed version control system
 */
export const pijul = mkPackage(
  nixRaw`pkgs.pijul`,
  "A distributed version control system",
);

/**
 * An open-source colour picker app for macOS
 */
export const pika = mkPackage(
  nixRaw`pkgs.pika`,
  "An open-source colour picker app for macOS",
);

/**
 * Simple backups based on borg
 */
export const pika_backup = mkPackage(
  nixRaw`pkgs.pika-backup`,
  "Simple backups based on borg",
);

/**
 * A PIC-like markup language for diagrams in technical documentation
 */
export const pikchr = mkPackage(
  nixRaw`pkgs.pikchr`,
  "A PIC-like markup language for diagrams in technical documentation",
);

/**
 * Copy/paste anything over the network
 */
export const piknik = mkPackage(
  nixRaw`pkgs.piknik`,
  "Copy/paste anything over the network",
);

/**
 * Application for drawing and editing pixel-art images
 */
export const pikopixel = mkPackage(
  nixRaw`pkgs.pikopixel`,
  "Application for drawing and editing pixel-art images",
);

/**
 * PIM for IPv6 sparse mode daemon
 */
export const pim6sd = mkPackage(
  nixRaw`pkgs.pim6sd`,
  "PIM for IPv6 sparse mode daemon",
);

/**
 * Pin GitHub Actions versions
 */
export const pinact = mkPackage(
  nixRaw`pkgs.pinact`,
  "Pin GitHub Actions versions",
);

/**
 * Emilia Pinball simulator
 */
export const pinball = mkPackage(
  nixRaw`pkgs.pinball`,
  "Emilia Pinball simulator",
);

/**
 * A Python wrapper for Pinboard.in
 */
export const pinboard = mkPackage(
  nixRaw`pkgs.pinboard`,
  "A Python wrapper for Pinboard.in",
);

/**
 * Back up the notes you've saved to Pinboard
 */
export const pinboard_notes_backup = mkPackage(
  nixRaw`pkgs.pinboard-notes-backup`,
  "Back up the notes you've saved to Pinboard",
);

/**
 * Homebrew lightweight image viewer
 */
export const pineapple_pictures = mkPackage(
  nixRaw`pkgs.pineapple-pictures`,
  "Homebrew lightweight image viewer",
);

/**
 * UI Web Editor
 */
export const pinegrow = mkPackage(
  nixRaw`pkgs.pinegrow`,
  "UI Web Editor",
);

/**
 * UI Web Editor
 */
export const pinegrow6 = mkPackage(
  nixRaw`pkgs.pinegrow6`,
  "UI Web Editor",
);

/**
 * GnuPG’s interface to passphrase input
 */
export const pinentry = mkPackage(
  nixRaw`pkgs.pinentry`,
  "GnuPG’s interface to passphrase input",
);

/**
 * Pinentry implementation based on bemenu
 */
export const pinentry_bemenu = mkPackage(
  nixRaw`pkgs.pinentry-bemenu`,
  "Pinentry implementation based on bemenu",
);

/**
 * GnuPG’s interface to passphrase input
 */
export const pinentry_curses = mkPackage(
  nixRaw`pkgs.pinentry-curses`,
  "GnuPG’s interface to passphrase input",
);

/**
 * GnuPG’s interface to passphrase input
 */
export const pinentry_emacs = mkPackage(
  nixRaw`pkgs.pinentry-emacs`,
  "GnuPG’s interface to passphrase input",
);

/**
 * GnuPG’s interface to passphrase input
 */
export const pinentry_gnome = mkPackage(
  nixRaw`pkgs.pinentry-gnome`,
  "GnuPG’s interface to passphrase input",
);

/**
 * GnuPG’s interface to passphrase input
 */
export const pinentry_gtk2 = mkPackage(
  nixRaw`pkgs.pinentry-gtk2`,
  "GnuPG’s interface to passphrase input",
);

/**
 * Pinentry for GPG on Mac
 */
export const pinentry_mac = mkPackage(
  nixRaw`pkgs.pinentry_mac`,
  "Pinentry for GPG on Mac",
);

/**
 * GnuPG’s interface to passphrase input
 */
export const pinentry_qt = mkPackage(
  nixRaw`pkgs.pinentry-qt`,
  "GnuPG’s interface to passphrase input",
);

/**
 * Rofi frontend to pinentry
 */
export const pinentry_rofi = mkPackage(
  nixRaw`pkgs.pinentry-rofi`,
  "Rofi frontend to pinentry",
);

/**
 * A viewer for info files
 */
export const pinfo = mkPackage(
  nixRaw`pkgs.pinfo`,
  "A viewer for info files",
);

/**
 * Measure TCP handshake time
 */
export const pingtcp = mkPackage(
  nixRaw`pkgs.pingtcp`,
  "Measure TCP handshake time",
);

/**
 * Ping command implementation in Go but with colorful output and pingu ascii art
 */
export const pingu = mkPackage(
  nixRaw`pkgs.pingu`,
  "Ping command implementation in Go but with colorful output and pingu ascii art",
);

/**
 * A puzzle game with mechanics similar to Lemmings
 */
export const pingus = mkPackage(
  nixRaw`pkgs.pingus`,
  "A puzzle game with mechanics similar to Lemmings",
);

/**
 * Tool to securely log in to your Kubernetes clusters
 */
export const pinniped = mkPackage(
  nixRaw`pkgs.pinniped`,
  "Tool to securely log in to your Kubernetes clusters",
);

/**
 * A Python pastebin that tries to keep it simple
 */
export const pinnwand = mkPackage(
  nixRaw`pkgs.pinnwand`,
  "A Python pastebin that tries to keep it simple",
);

/**
 * A fast and flexible implementation of Rigid Body Dynamics algorithms and their analytical derivatives
 */
export const pinocchio = mkPackage(
  nixRaw`pkgs.pinocchio`,
  "A fast and flexible implementation of Rigid Body Dynamics algorithms and their analytical derivatives",
);

/**
 * A tool for making hackers do excellent presentations
 */
export const pinpoint = mkPackage(
  nixRaw`pkgs.pinpoint`,
  "A tool for making hackers do excellent presentations",
);

/**
 * Minimal screenshot annotation tool with lua config
 */
export const pinsel = mkPackage(
  nixRaw`pkgs.pinsel`,
  "Minimal screenshot annotation tool with lua config",
);

/**
 * Drawing/editing program modeled after Paint.NET
 */
export const pinta = mkPackage(
  nixRaw`pkgs.pinta`,
  "Drawing/editing program modeled after Paint.NET",
);

/**
 * A simple command line tool for converting Chinese characters to space-separate pinyin words
 */
export const pinyin_tool = mkPackage(
  nixRaw`pkgs.pinyin-tool`,
  "A simple command line tool for converting Chinese characters to space-separate pinyin words",
);

/**
 * A space adventure game set in the Milky Way galaxy at the turn of the 31st century
 */
export const pioneer = mkPackage(
  nixRaw`pkgs.pioneer`,
  "A space adventure game set in the Milky Way galaxy at the turn of the 31st century",
);

/**
 * Addicting game based on The Settlers of Catan
 */
export const pioneers = mkPackage(
  nixRaw`pkgs.pioneers`,
  "Addicting game based on The Settlers of Catan",
);

/**
 * Tool for scanning Python environments for known vulnerabilities
 */
export const pip_audit = mkPackage(
  nixRaw`pkgs.pip-audit`,
  "Tool for scanning Python environments for known vulnerabilities",
);

/**
 * Rename your files using your favorite text editor
 */
export const pipe_rename = mkPackage(
  nixRaw`pkgs.pipe-rename`,
  "Rename your files using your favorite text editor",
);

/**
 * CLI+GUI YouTube Client
 */
export const pipe_viewer = mkPackage(
  nixRaw`pkgs.pipe-viewer`,
  "CLI+GUI YouTube Client",
);

/**
 * Pipewire control GUI program in Qt (Kirigami2)
 */
export const pipecontrol = mkPackage(
  nixRaw`pkgs.pipecontrol`,
  "Pipewire control GUI program in Qt (Kirigami2)",
);

/**
 * a simple named pipe management utility
 */
export const pipectl = mkPackage(
  nixRaw`pkgs.pipectl`,
  "a simple named pipe management utility",
);

/**
 * A wrapper for using Windows plugins in Linux browsers
 */
export const pipelight = mkPackage(
  nixRaw`pkgs.pipelight`,
  "A wrapper for using Windows plugins in Linux browsers",
);

/**
 * Python Development Workflow for Humans
 */
export const pipenv = mkPackage(
  nixRaw`pkgs.pipenv`,
  "Python Development Workflow for Humans",
);

/**
 * GTK frontend for ratbagd mouse config daemon
 */
export const piper = mkPackage(
  nixRaw`pkgs.piper`,
  "GTK frontend for ratbagd mouse config daemon",
);

/**
 * C++ library for converting text to phonemes for Piper
 */
export const piper_phonemize = mkPackage(
  nixRaw`pkgs.piper-phonemize`,
  "C++ library for converting text to phonemes for Piper",
);

/**
 * A fast, local neural text to speech system
 */
export const piper_tts = mkPackage(
  nixRaw`pkgs.piper-tts`,
  "A fast, local neural text to speech system",
);

/**
 * Animated pipes terminal screensaver
 */
export const pipes = mkPackage(
  nixRaw`pkgs.pipes`,
  "Animated pipes terminal screensaver",
);

/**
 * An over-engineered rewrite of pipes.sh in Rust
 */
export const pipes_rs = mkPackage(
  nixRaw`pkgs.pipes-rs`,
  "An over-engineered rewrite of pipes.sh in Rust",
);

/**
 * Server and user space API to deal with multimedia pipelines
 */
export const pipewire = mkPackage(
  nixRaw`pkgs.pipewire`,
  "Server and user space API to deal with multimedia pipelines",
);

/**
 * Server and user space API to deal with multimedia pipelines
 */
export const pipewire_0_2 = mkPackage(
  nixRaw`pkgs.pipewire_0_2`,
  "Server and user space API to deal with multimedia pipelines",
);

/**
 * Software-Defined Networking tools for LXC
 */
export const pipework = mkPackage(
  nixRaw`pkgs.pipework`,
  "Software-Defined Networking tools for LXC",
);

/**
 * Infinitely transfer between every device over pure HTTP with pipes or browsers
 */
export const piping_server_rust = mkPackage(
  nixRaw`pkgs.piping-server-rust`,
  "Infinitely transfer between every device over pure HTTP with pipes or browsers",
);

/**
 * A commandline-tool to interactively write shell pipelines
 */
export const pipr = mkPackage(
  nixRaw`pkgs.pipr`,
  "A commandline-tool to interactively write shell pipelines",
);

/**
 * Generate requirements.txt file for any project based on imports
 */
export const pipreqs = mkPackage(
  nixRaw`pkgs.pipreqs`,
  "Generate requirements.txt file for any project based on imports",
);

/**
 * Install and run Python applications in isolated environments
 */
export const pipx = mkPackage(
  nixRaw`pkgs.pipx`,
  "Install and run Python applications in isolated environments",
);

/**
 * A command line interface for The Pirate Bay
 */
export const pirate_get = mkPackage(
  nixRaw`pkgs.pirate-get`,
  "A command line interface for The Pirate Bay",
);

/**
 * General purpose file previewer designed for Ranger, Lf to make scope.sh redundant
 */
export const pistol = mkPackage(
  nixRaw`pkgs.pistol`,
  "General purpose file previewer designed for Ranger, Lf to make scope.sh redundant",
);

/**
 * Piston api tool
 */
export const piston_cli = mkPackage(
  nixRaw`pkgs.piston-cli`,
  "Piston api tool",
);

/**
 * A dark plasma theme built with usability in mind
 */
export const pitch_black = mkPackage(
  nixRaw`pkgs.pitch-black`,
  "A dark plasma theme built with usability in mind",
);

/**
 * Pandora Internet Radio player for GNOME
 */
export const pithos = mkPackage(
  nixRaw`pkgs.pithos`,
  "Pandora Internet Radio player for GNOME",
);

/**
 * Non-Linear video editor utilizing the power of GStreamer
 */
export const pitivi = mkPackage(
  nixRaw`pkgs.pitivi`,
  "Non-Linear video editor utilizing the power of GStreamer",
);

/**
 * PGP Individual UID Signer (PIUS), quickly and easily sign UIDs on a set of PGP keys
 */
export const pius = mkPackage(
  nixRaw`pkgs.pius`,
  "PGP Individual UID Signer (PIUS), quickly and easily sign UIDs on a set of PGP keys",
);

/**
 * Display images on a kitty terminal with optional resizing
 */
export const pixcat = mkPackage(
  nixRaw`pkgs.pixcat`,
  "Display images on a kitty terminal with optional resizing",
);

/**
 * Colourful visualization tool for binary files
 */
export const pixd = mkPackage(
  nixRaw`pkgs.pixd`,
  "Colourful visualization tool for binary files",
);

/**
 * Converts pixel art to SVG - pixel by pixel
 */
export const pixel2svg = mkPackage(
  nixRaw`pkgs.pixel2svg`,
  "Converts pixel art to SVG - pixel by pixel",
);

/**
 * A federated image sharing platform
 */
export const pixelfed = mkPackage(
  nixRaw`pkgs.pixelfed`,
  "A federated image sharing platform",
);

/**
 * Multiplayer canvas (C implementation)
 */
export const pixelnuke = mkPackage(
  nixRaw`pkgs.pixelnuke`,
  "Multiplayer canvas (C implementation)",
);

/**
 * A free & open-source 2D sprite editor, made with the Godot Engine!
 */
export const pixelorama = mkPackage(
  nixRaw`pkgs.pixelorama`,
  "A free & open-source 2D sprite editor, made with the Godot Engine!",
);

/**
 * A Beautifully Designed Image and Photo Editor for Windows and Linux
 */
export const pixeluvo = mkPackage(
  nixRaw`pkgs.pixeluvo`,
  "A Beautifully Designed Image and Photo Editor for Windows and Linux",
);

/**
 * A tool to manage network booting of machines
 */
export const pixiecore = mkPackage(
  nixRaw`pkgs.pixiecore`,
  "A tool to manage network booting of machines",
);

/**
 * An offline WPS bruteforce utility
 */
export const pixiewps = mkPackage(
  nixRaw`pkgs.pixiewps`,
  "An offline WPS bruteforce utility",
);

/**
 * Scientific image processing program for astrophotography
 */
export const pixinsight = mkPackage(
  nixRaw`pkgs.pixinsight`,
  "Scientific image processing program for astrophotography",
);

/**
 * A low-level library for pixel manipulation
 */
export const pixman = mkPackage(
  nixRaw`pkgs.pixman`,
  "A low-level library for pixel manipulation",
);

/**
 * A parallel compressor/decompressor for xz format
 */
export const pixz = mkPackage(
  nixRaw`pkgs.pixz`,
  "A parallel compressor/decompressor for xz format",
);

/**
 * A simple blackboard written in GTK
 */
export const pizarra = mkPackage(
  nixRaw`pkgs.pizarra`,
  "A simple blackboard written in GTK",
);

/**
 * A multimedia communication library written in C, implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE
 */
export const pjsip = mkPackage(
  nixRaw`pkgs.pjsip`,
  "A multimedia communication library written in C, implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE",
);

/**
 * Microchip PIC programming software for the PICKit2 programmer
 */
export const pk2cmd = mkPackage(
  nixRaw`pkgs.pk2cmd`,
  "Microchip PIC programming software for the PICKit2 programmer",
);

/**
 * Library that simplifies the interaction with PKCS#11 providers
 */
export const pkcs11helper = mkPackage(
  nixRaw`pkgs.pkcs11helper`,
  "Library that simplifies the interaction with PKCS#11 providers",
);

/**
 * Package management tool for FreeBSD
 */
export const pkg = mkPackage(
  nixRaw`pkgs.pkg`,
  "Package management tool for FreeBSD",
);

/**
 * A tool that allows packages to find out information about other packages (wrapper script)
 */
export const pkg_config = mkPackage(
  nixRaw`pkgs.pkg-config`,
  "A tool that allows packages to find out information about other packages (wrapper script)",
);

/**
 * A tool that allows packages to find out information about other packages (wrapper script)
 */
export const pkg_configUpstream = mkPackage(
  nixRaw`pkgs.pkg-configUpstream`,
  "A tool that allows packages to find out information about other packages (wrapper script)",
);

/**
 * A tool that allows packages to find out information about other packages
 */
export const pkg_config_unwrapped = mkPackage(
  nixRaw`pkgs.pkg-config-unwrapped`,
  "A tool that allows packages to find out information about other packages",
);

/**
 * Package compiler and linker metadata toolkit (wrapper script)
 */
export const pkgconf = mkPackage(
  nixRaw`pkgs.pkgconf`,
  "Package compiler and linker metadata toolkit (wrapper script)",
);

/**
 * Package compiler and linker metadata toolkit
 */
export const pkgconf_unwrapped = mkPackage(
  nixRaw`pkgs.pkgconf-unwrapped`,
  "Package compiler and linker metadata toolkit",
);

/**
 * A tool for visualizing changes in Linux software packages
 */
export const pkgdiff = mkPackage(
  nixRaw`pkgs.pkgdiff`,
  "A tool for visualizing changes in Linux software packages",
);

/**
 * Embed static files in Go binaries (replacement for gobuffalo/packr) 
 */
export const pkger = mkPackage(
  nixRaw`pkgs.pkger`,
  "Embed static files in Go binaries (replacement for gobuffalo/packr) ",
);

/**
 * Interactive package manager and resource monitor designed for the GNU/Linux
 */
export const pkgtop = mkPackage(
  nixRaw`pkgs.pkgtop`,
  "Interactive package manager and resource monitor designed for the GNU/Linux",
);

/**
 * Traffic generator powered by DPDK
 */
export const pktgen = mkPackage(
  nixRaw`pkgs.pktgen`,
  "Traffic generator powered by DPDK",
);

/**
 * A utility for X11 that moves the mouse cursor using the keyboard
 */
export const place_cursor_at = mkPackage(
  nixRaw`pkgs.place-cursor-at`,
  "A utility for X11 that moves the mouse cursor using the keyboard",
);

/**
 * Plan 9 from User Space
 */
export const plan9port = mkPackage(
  nixRaw`pkgs.plan9port`,
  "Plan 9 from User Space",
);

/**
 * A library for implementing graph algorithms
 */
export const planarity = mkPackage(
  nixRaw`pkgs.planarity`,
  "A library for implementing graph algorithms",
);

/**
 * Next-generation RTS that takes the genre to a planetary scale
 */
export const planetary_annihilation = mkPackage(
  nixRaw`pkgs.planetary_annihilation`,
  "Next-generation RTS that takes the genre to a planetary scale",
);

/**
 * Task manager with Todoist support designed for GNU/Linux
 */
export const planify = mkPackage(
  nixRaw`pkgs.planify`,
  "Task manager with Todoist support designed for GNU/Linux",
);

/**
 * Elegant, simple, clean dock
 */
export const plank = mkPackage(
  nixRaw`pkgs.plank`,
  "Elegant, simple, clean dock",
);

/**
 * Project management tool for the GNOME desktop
 */
export const planner = mkPackage(
  nixRaw`pkgs.planner`,
  "Project management tool for the GNOME desktop",
);

/**
 * Flat theme for GNOME and Xfce
 */
export const plano_theme = mkPackage(
  nixRaw`pkgs.plano-theme`,
  "Flat theme for GNOME and Xfce",
);

/**
 * Draw UML diagrams using a simple and human readable text description
 */
export const plantuml = mkPackage(
  nixRaw`pkgs.plantuml`,
  "Draw UML diagrams using a simple and human readable text description",
);

/**
 * PlantUML bundled with C4-Plantuml and plantuml sprites library
 */
export const plantuml_c4 = mkPackage(
  nixRaw`pkgs.plantuml-c4`,
  "PlantUML bundled with C4-Plantuml and plantuml sprites library",
);

/**
 * A web application to generate UML diagrams on-the-fly.
 */
export const plantuml_server = mkPackage(
  nixRaw`pkgs.plantuml-server`,
  "A web application to generate UML diagrams on-the-fly.",
);

/**
 * An alternative compiler for flatbuffers
 */
export const planus = mkPackage(
  nixRaw`pkgs.planus`,
  "An alternative compiler for flatbuffers",
);

/**
 * A fork of the default volume plasmoid with a Windows 7 theme (vertical sliders)
 */
export const plasma_applet_volumewin7mixer = mkPackage(
  nixRaw`pkgs.plasma-applet-volumewin7mixer`,
  "A fork of the default volume plasmoid with a Windows 7 theme (vertical sliders)",
);

/**
 * Run menubar commands, much like the Unity 7 Heads-Up Display (HUD)
 */
export const plasma_hud = mkPackage(
  nixRaw`pkgs.plasma-hud`,
  "Run menubar commands, much like the Unity 7 Heads-Up Display (HUD)",
);

/**
 * Cute KDE theme inspired by the game Needy Girl Overdose
 */
export const plasma_overdose_kde_theme = mkPackage(
  nixRaw`pkgs.plasma-overdose-kde-theme`,
  "Cute KDE theme inspired by the game Needy Girl Overdose",
);

/**
 * A Plasma applet to access passwords from pass, the standard UNIX password manager
 */
export const plasma_pass = mkPackage(
  nixRaw`pkgs.plasma-pass`,
  "A Plasma applet to access passwords from pass, the standard UNIX password manager",
);

/**
 * A KDE Plasma theme switcher
 */
export const plasma_theme_switcher = mkPackage(
  nixRaw`pkgs.plasma-theme-switcher`,
  "A KDE Plasma theme switcher",
);

/**
 * A GTK theme based on Material Design Refresh
 */
export const plata_theme = mkPackage(
  nixRaw`pkgs.plata-theme`,
  "A GTK theme based on Material Design Refresh",
);

/**
 * 3D-printer parts placer and plate generator
 */
export const plater = mkPackage(
  nixRaw`pkgs.plater`,
  "3D-printer parts placer and plate generator",
);

/**
 * A C++ library to look for standard platform directories so that you do not need to write platform-specific code
 */
export const platform_folders = mkPackage(
  nixRaw`pkgs.platform-folders`,
  "A C++ library to look for standard platform directories so that you do not need to write platform-specific code",
);

/**
 * An open source ecosystem for IoT development
 */
export const platformio = mkPackage(
  nixRaw`pkgs.platformio`,
  "An open source ecosystem for IoT development",
);

/**
 * An open source ecosystem for IoT development
 */
export const platformio_core = mkPackage(
  nixRaw`pkgs.platformio-core`,
  "An open source ecosystem for IoT development",
);

/**
 * The unified tool for managing your Platform.sh services from the command line.
 */
export const platformsh = mkPackage(
  nixRaw`pkgs.platformsh`,
  "The unified tool for managing your Platform.sh services from the command line.",
);

/**
 * A code search tool similar to ack and the_silver_searcher(ag)
 */
export const platinum_searcher = mkPackage(
  nixRaw`pkgs.platinum-searcher`,
  "A code search tool similar to ack and the_silver_searcher(ag)",
);

/**
 * The Platypus variant caller
 */
export const platypus = mkPackage(
  nixRaw`pkgs.platypus`,
  "The Platypus variant caller",
);

/**
 *  Simple, open-source, lightweight (< 1 KB) and privacy-friendly web analytics alternative to Google Analytics
 */
export const plausible = mkPackage(
  nixRaw`pkgs.plausible`,
  " Simple, open-source, lightweight (< 1 KB) and privacy-friendly web analytics alternative to Google Analytics",
);

/**
 * Chrome extension and python server that allows you to play videos in webpages with MPV instead
 */
export const play_with_mpv = mkPackage(
  nixRaw`pkgs.play-with-mpv`,
  "Chrome extension and python server that allows you to play videos in webpages with MPV instead",
);

/**
 * Mpris2 Client for Plasma5
 */
export const playbar2 = mkPackage(
  nixRaw`pkgs.playbar2`,
  "Mpris2 Client for Plasma5",
);

/**
 * Command-line utility and library for controlling media players that implement MPRIS
 */
export const playerctl = mkPackage(
  nixRaw`pkgs.playerctl`,
  "Command-line utility and library for controlling media players that implement MPRIS",
);

/**
 * GUI for managing Windows programs under linux
 */
export const playonlinux = mkPackage(
  nixRaw`pkgs.playonlinux`,
  "GUI for managing Windows programs under linux",
);

/**
 * Python version of the Playwright testing and automation library
 */
export const playwright = mkPackage(
  nixRaw`pkgs.playwright`,
  "Python version of the Playwright testing and automation library",
);

export const playwright_driver = mkPackage(
  nixRaw`pkgs.playwright-driver`,
  "",
);

/**
 * A high-level API to automate web browsers
 */
export const playwright_test = mkPackage(
  nixRaw`pkgs.playwright-test`,
  "A high-level API to automate web browsers",
);

/**
 * A polite regex-first sudo alternative
 */
export const please = mkPackage(
  nixRaw`pkgs.please`,
  "A polite regex-first sudo alternative",
);

/**
 * An AI helper script to create CLI commands based on GPT prompts
 */
export const please_cli = mkPackage(
  nixRaw`pkgs.please-cli`,
  "An AI helper script to create CLI commands based on GPT prompts",
);

/**
 * Vulnerability fingerprinting and vulnerability finder for Wordpress blog engine
 */
export const plecost = mkPackage(
  nixRaw`pkgs.plecost`,
  "Vulnerability fingerprinting and vulnerability finder for Wordpress blog engine",
);

/**
 * ActivityPub microblogging server
 */
export const pleroma = mkPackage(
  nixRaw`pkgs.pleroma`,
  "ActivityPub microblogging server",
);

/**
 * Bot for mirroring one or multiple Twitter accounts in Pleroma/Mastodon
 */
export const pleroma_bot = mkPackage(
  nixRaw`pkgs.pleroma-bot`,
  "Bot for mirroring one or multiple Twitter accounts in Pleroma/Mastodon",
);

/**
 * Media library streaming server
 */
export const plex = mkPackage(
  nixRaw`pkgs.plex`,
  "Media library streaming server",
);

/**
 * Media library streaming server
 */
export const plexRaw = mkPackage(
  nixRaw`pkgs.plexRaw`,
  "Media library streaming server",
);

/**
 * Streaming media player for Plex
 */
export const plex_media_player = mkPackage(
  nixRaw`pkgs.plex-media-player`,
  "Streaming media player for Plex",
);

/**
 * Allows casting of videos to MPV via the Plex mobile and web app
 */
export const plex_mpv_shim = mkPackage(
  nixRaw`pkgs.plex-mpv-shim`,
  "Allows casting of videos to MPV via the Plex mobile and web app",
);

/**
 * A beautiful Plex music player for audiophiles, curators, and hipsters
 */
export const plexamp = mkPackage(
  nixRaw`pkgs.plexamp`,
  "A beautiful Plex music player for audiophiles, curators, and hipsters",
);

/**
 * Fitting power-law distributions to empirical data
 */
export const plfit = mkPackage(
  nixRaw`pkgs.plfit`,
  "Fitting power-law distributions to empirical data",
);

/**
 * A suite of portable game libraries
 */
export const plib = mkPackage(
  nixRaw`pkgs.plib`,
  "A suite of portable game libraries",
);

/**
 * Scalable & friendly temporary file upload system
 */
export const plik = mkPackage(
  nixRaw`pkgs.plik`,
  "Scalable & friendly temporary file upload system",
);

export const plikd = mkPackage(
  nixRaw`pkgs.plikd`,
  "",
);

/**
 * A comprehensive update to the PLINK association analysis toolset
 */
export const plink_ng = mkPackage(
  nixRaw`pkgs.plink-ng`,
  "A comprehensive update to the PLINK association analysis toolset",
);

/**
 * Monitors and prints changes to MacOS plists in real time
 */
export const plistwatch = mkPackage(
  nixRaw`pkgs.plistwatch`,
  "Monitors and prints changes to MacOS plists in real time",
);

/**
 * Free cross-platform programming exerciser
 */
export const plm = mkPackage(
  nixRaw`pkgs.plm`,
  "Free cross-platform programming exerciser",
);

/**
 * Much faster locate
 */
export const plocate = mkPackage(
  nixRaw`pkgs.plocate`,
  "Much faster locate",
);

/**
 * Portable, simple and extensible C++ logging library
 */
export const plog = mkPackage(
  nixRaw`pkgs.plog`,
  "Portable, simple and extensible C++ logging library",
);

/**
 * A non-interactive software package for producing plots and charts
 */
export const ploticus = mkPackage(
  nixRaw`pkgs.ploticus`,
  "A non-interactive software package for producing plots and charts",
);

/**
 * A searchable command palette in every modern GTK application
 */
export const plotinus = mkPackage(
  nixRaw`pkgs.plotinus`,
  "A searchable command palette in every modern GTK application",
);

/**
 * Graph plotting app for GNOME
 */
export const plots = mkPackage(
  nixRaw`pkgs.plots`,
  "Graph plotting app for GNOME",
);

/**
 * Powerful C/C++ library for exporting 2D vector graphics
 */
export const plotutils = mkPackage(
  nixRaw`pkgs.plotutils`,
  "Powerful C/C++ library for exporting 2D vector graphics",
);

/**
 * A command-line download/upload tool for popular file sharing websites

 */
export const plowshare = mkPackage(
  nixRaw`pkgs.plowshare`,
  "A command-line download/upload tool for popular file sharing websites\n",
);

/**
 * Cross-platform scientific graphics plotting library
 */
export const plplot = mkPackage(
  nixRaw`pkgs.plplot`,
  "Cross-platform scientific graphics plotting library",
);

/**
 * Prettier and powerful ls
 */
export const pls = mkPackage(
  nixRaw`pkgs.pls`,
  "Prettier and powerful ls",
);

/**
 * A tool to test LADSPA and LV2 plugins
 */
export const plugin_torture = mkPackage(
  nixRaw`pkgs.plugin-torture`,
  "A tool to test LADSPA and LV2 plugins",
);

/**
 * A mono rhythmic tremolo LV2 Audio Plugin
 */
export const plujain_ramp = mkPackage(
  nixRaw`pkgs.plujain-ramp`,
  "A mono rhythmic tremolo LV2 Audio Plugin",
);

/**
 * Molecular metadynamics library
 */
export const plumed = mkPackage(
  nixRaw`pkgs.plumed`,
  "Molecular metadynamics library",
);

/**
 * Find deprecated Kubernetes apiVersions
 */
export const pluto = mkPackage(
  nixRaw`pkgs.pluto`,
  "Find deprecated Kubernetes apiVersions",
);

/**
 * Boot splash and boot logger
 */
export const plymouth = mkPackage(
  nixRaw`pkgs.plymouth`,
  "Boot splash and boot logger",
);

/**
 * A massively parallel lossless data compressor based on the lzlib compression library
 */
export const plzip = mkPackage(
  nixRaw`pkgs.plzip`,
  "A massively parallel lossless data compressor based on the lzlib compression library",
);

/**
 * Production process manager for Node.JS applications with a built-in load balancer.
 */
export const pm2 = mkPackage(
  nixRaw`pkgs.pm2`,
  "Production process manager for Node.JS applications with a built-in load balancer.",
);

/**
 * A small set of multi-purpose passive network monitoring tools
 */
export const pmacct = mkPackage(
  nixRaw`pkgs.pmacct`,
  "A small set of multi-purpose passive network monitoring tools",
);

/**
 * Sophisticated chroot/build/flash tool to develop and install postmarketOS
 */
export const pmbootstrap = mkPackage(
  nixRaw`pkgs.pmbootstrap`,
  "Sophisticated chroot/build/flash tool to develop and install postmarketOS",
);

/**
 * McCabe-style function complexity and line counting for C and C++
 */
export const pmccabe = mkPackage(
  nixRaw`pkgs.pmccabe`,
  "McCabe-style function complexity and line counting for C and C++",
);

/**
 * An extensible cross-language static code analyzer
 */
export const pmd = mkPackage(
  nixRaw`pkgs.pmd`,
  "An extensible cross-language static code analyzer",
);

/**
 * A pie-menu tool
 */
export const pmenu = mkPackage(
  nixRaw`pkgs.pmenu`,
  "A pie-menu tool",
);

/**
 * A straightforward command line program to play midi files through the ALSA sequencer
 */
export const pmidi = mkPackage(
  nixRaw`pkgs.pmidi`,
  "A straightforward command line program to play midi files through the ALSA sequencer",
);

/**
 * Process Management Interface for HPC environments
 */
export const pmix = mkPackage(
  nixRaw`pkgs.pmix`,
  "Process Management Interface for HPC environments",
);

/**
 * Mount removable devices as normal user
 */
export const pmount = mkPackage(
  nixRaw`pkgs.pmount`,
  "Mount removable devices as normal user",
);

/**
 * An interactive Vim-like console client for MPD
 */
export const pms = mkPackage(
  nixRaw`pkgs.pms`,
  "An interactive Vim-like console client for MPD",
);

/**
 * A small collection of scripts that handle suspend and resume on behalf of HAL
 */
export const pmutils = mkPackage(
  nixRaw`pkgs.pmutils`,
  "A small collection of scripts that handle suspend and resume on behalf of HAL",
);

/**
 * A libphonenumber command-line wrapper
 */
export const pn = mkPackage(
  nixRaw`pkgs.pn`,
  "A libphonenumber command-line wrapper",
);

/**
 * Verifies the integrity of PNG, JNG and MNG files
 */
export const pngcheck = mkPackage(
  nixRaw`pkgs.pngcheck`,
  "Verifies the integrity of PNG, JNG and MNG files",
);

/**
 * A PNG optimizer
 */
export const pngcrush = mkPackage(
  nixRaw`pkgs.pngcrush`,
  "A PNG optimizer",
);

/**
 * a small program that converts LaTeX snippets to png
 */
export const pnglatex = mkPackage(
  nixRaw`pkgs.pnglatex`,
  "a small program that converts LaTeX snippets to png",
);

/**
 * Lossy compression of PNG images
 */
export const pngloss = mkPackage(
  nixRaw`pkgs.pngloss`,
  "Lossy compression of PNG images",
);

/**
 * A PNG quantizer
 */
export const pngnq = mkPackage(
  nixRaw`pkgs.pngnq`,
  "A PNG quantizer",
);

/**
 * PNG optimizer and converter
 */
export const pngoptimizer = mkPackage(
  nixRaw`pkgs.pngoptimizer`,
  "PNG optimizer and converter",
);

/**
 * A tool that aggressively optimizes the sizes of PNG images
 */
export const pngout = mkPackage(
  nixRaw`pkgs.pngout`,
  "A tool that aggressively optimizes the sizes of PNG images",
);

/**
 * Paste image files from clipboard to file on MacOS
 */
export const pngpaste = mkPackage(
  nixRaw`pkgs.pngpaste`,
  "Paste image files from clipboard to file on MacOS",
);

/**
 * C++ wrapper for libpng library
 */
export const pngpp = mkPackage(
  nixRaw`pkgs.pngpp`,
  "C++ wrapper for libpng library",
);

/**
 * A tool to convert 24/32-bit RGBA PNGs to 8-bit palette with alpha channel preserved
 */
export const pngquant = mkPackage(
  nixRaw`pkgs.pngquant`,
  "A tool to convert 24/32-bit RGBA PNGs to 8-bit palette with alpha channel preserved",
);

/**
 * Small utility to convert a set of PNG images to Microsoft ICO format
 */
export const pngtoico = mkPackage(
  nixRaw`pkgs.pngtoico`,
  "Small utility to convert a set of PNG images to Microsoft ICO format",
);

/**
 * PNG manipulation tools
 */
export const pngtools = mkPackage(
  nixRaw`pkgs.pngtools`,
  "PNG manipulation tools",
);

/**
 * ALSA volume mixer for the system tray
 */
export const pnmixer = mkPackage(
  nixRaw`pkgs.pnmixer`,
  "ALSA volume mixer for the system tray",
);

/**
 * A utility for converting pnpm-lock.yaml to other lockfile formats
 */
export const pnpm_lock_export = mkPackage(
  nixRaw`pkgs.pnpm-lock-export`,
  "A utility for converting pnpm-lock.yaml to other lockfile formats",
);

/**
 * Tools for helping translation of documentation
 */
export const po4a = mkPackage(
  nixRaw`pkgs.po4a`,
  "Tools for helping translation of documentation",
);

/**
 * Package Manager for C++
 */
export const poac = mkPackage(
  nixRaw`pkgs.poac`,
  "Package Manager for C++",
);

/**
 * Pocket Casts webapp, packaged for the Linux Desktop
 */
export const pocket_casts = mkPackage(
  nixRaw`pkgs.pocket-casts`,
  "Pocket Casts webapp, packaged for the Linux Desktop",
);

/**
 * Analogue Pocket Updater Utility
 */
export const pocket_updater_utility = mkPackage(
  nixRaw`pkgs.pocket-updater-utility`,
  "Analogue Pocket Updater Utility",
);

/**
 * Open Source realtime backend in 1 file
 */
export const pocketbase = mkPackage(
  nixRaw`pkgs.pocketbase`,
  "Open Source realtime backend in 1 file",
);

/**
 * Cross-platform C++ libraries with a network/internet focus
 */
export const poco = mkPackage(
  nixRaw`pkgs.poco`,
  "Cross-platform C++ libraries with a network/internet focus",
);

/**
 * converter from POD into mdoc
 */
export const pod2mdoc = mkPackage(
  nixRaw`pkgs.pod2mdoc`,
  "converter from POD into mdoc",
);

/**
 * A self-hosted podcast manager to download episodes as soon as they become live
 */
export const podgrab = mkPackage(
  nixRaw`pkgs.podgrab`,
  "A self-hosted podcast manager to download episodes as soon as they become live",
);

/**
 * Finds differences in translations between two PO files, or revisions
 */
export const podiff = mkPackage(
  nixRaw`pkgs.podiff`,
  "Finds differences in translations between two PO files, or revisions",
);

/**
 * A program for managing pods, containers and container images
 */
export const podman = mkPackage(
  nixRaw`pkgs.podman`,
  "A program for managing pods, containers and container images",
);

/**
 * An implementation of docker-compose with podman backend
 */
export const podman_compose = mkPackage(
  nixRaw`pkgs.podman-compose`,
  "An implementation of docker-compose with podman backend",
);

/**
 * A graphical tool for developing on containers and Kubernetes
 */
export const podman_desktop = mkPackage(
  nixRaw`pkgs.podman-desktop`,
  "A graphical tool for developing on containers and Kubernetes",
);

/**
 * Podman Terminal UI
 */
export const podman_tui = mkPackage(
  nixRaw`pkgs.podman-tui`,
  "Podman Terminal UI",
);

/**
 * A library to work with the PDF file format
 */
export const podofo = mkPackage(
  nixRaw`pkgs.podofo`,
  "A library to work with the PDF file format",
);

/**
 * A library to work with the PDF file format
 */
export const podofo010 = mkPackage(
  nixRaw`pkgs.podofo010`,
  "A library to work with the PDF file format",
);

/**
 * A podman desktop application
 */
export const pods = mkPackage(
  nixRaw`pkgs.pods`,
  "A podman desktop application",
);

/**
 * Cross-platform gettext catalogs (.po files) editor
 */
export const poedit = mkPackage(
  nixRaw`pkgs.poedit`,
  "Cross-platform gettext catalogs (.po files) editor",
);

/**
 * A task runner that works well with poetry
 */
export const poethepoet = mkPackage(
  nixRaw`pkgs.poethepoet`,
  "A task runner that works well with poetry",
);

/**
 * Python dependency management and packaging made easy
 */
export const poetry = mkPackage(
  nixRaw`pkgs.poetry`,
  "Python dependency management and packaging made easy",
);

/**
 * A script to convert a Python project declared on a pyproject.toml to a conda environment
 */
export const poetry2conda = mkPackage(
  nixRaw`pkgs.poetry2conda`,
  "A script to convert a Python project declared on a pyproject.toml to a conda environment",
);

/**
 * Free console XMPP client
 */
export const poezio = mkPackage(
  nixRaw`pkgs.poezio`,
  "Free console XMPP client",
);

/**
 * Interactive, extensible editor for binary data
 */
export const poke = mkPackage(
  nixRaw`pkgs.poke`,
  "Interactive, extensible editor for binary data",
);

/**
 * Cross platform Pokémon RNG tool
 */
export const pokefinder = mkPackage(
  nixRaw`pkgs.pokefinder`,
  "Cross platform Pokémon RNG tool",
);

/**
 * A better rust version of pokeget
 */
export const pokeget_rs = mkPackage(
  nixRaw`pkgs.pokeget-rs`,
  "A better rust version of pokeget",
);

/**
 * Pokémon colorscripts for the terminal, compatible for mac
 */
export const pokemon_colorscripts_mac = mkPackage(
  nixRaw`pkgs.pokemon-colorscripts-mac`,
  "Pokémon colorscripts for the terminal, compatible for mac",
);

/**
 * Print pokemon in the CLI! An adaptation of the classic cowsay
 */
export const pokemonsay = mkPackage(
  nixRaw`pkgs.pokemonsay`,
  "Print pokemon in the CLI! An adaptation of the classic cowsay",
);

/**
 * Poker game client
 */
export const pokerth = mkPackage(
  nixRaw`pkgs.pokerth`,
  "Poker game client",
);

/**
 * Poker game server
 */
export const pokerth_server = mkPackage(
  nixRaw`pkgs.pokerth-server`,
  "Poker game server",
);

/**
 * A terminal based Pokemon like game
 */
export const pokete = mkPackage(
  nixRaw`pkgs.pokete`,
  "A terminal based Pokemon like game",
);

/**
 * Command-line tools to interact with Polar watches
 */
export const polar = mkPackage(
  nixRaw`pkgs.polar`,
  "Command-line tools to interact with Polar watches",
);

/**
 * Personal knowledge repository for PDF and web content supporting incremental reading and document annotation
 */
export const polar_bookshelf = mkPackage(
  nixRaw`pkgs.polar-bookshelf`,
  "Personal knowledge repository for PDF and web content supporting incremental reading and document annotation",
);

/**
 * Personal knowledge repository for PDF and web content supporting incremental reading and document annotation
 */
export const polar_bookshelf1 = mkPackage(
  nixRaw`pkgs.polar-bookshelf1`,
  "Personal knowledge repository for PDF and web content supporting incremental reading and document annotation",
);

/**
 * Self-host your music collection, and access it from any computer and mobile device
 */
export const polaris = mkPackage(
  nixRaw`pkgs.polaris`,
  "Self-host your music collection, and access it from any computer and mobile device",
);

/**
 * Web client for Polaris
 */
export const polaris_web = mkPackage(
  nixRaw`pkgs.polaris-web`,
  "Web client for Polaris",
);

/**
 * SELinux policy core utilities
 */
export const policycoreutils = mkPackage(
  nixRaw`pkgs.policycoreutils`,
  "SELinux policy core utilities",
);

/**
 * A small and fast caching web proxy
 */
export const polipo = mkPackage(
  nixRaw`pkgs.polipo`,
  "A small and fast caching web proxy",
);

/**
 * Polkadot Node Implementation
 */
export const polkadot = mkPackage(
  nixRaw`pkgs.polkadot`,
  "Polkadot Node Implementation",
);

/**
 * A toolkit for defining and handling the policy that allows unprivileged processes to speak to privileged processes
 */
export const polkit = mkPackage(
  nixRaw`pkgs.polkit`,
  "A toolkit for defining and handling the policy that allows unprivileged processes to speak to privileged processes",
);

/**
 * A dbus session bus service that is used to bring up authentication dialogs
 */
export const polkit_gnome = mkPackage(
  nixRaw`pkgs.polkit_gnome`,
  "A dbus session bus service that is used to bring up authentication dialogs",
);

/**
 * Medium contrast serif font
 */
export const poly = mkPackage(
  nixRaw`pkgs.poly`,
  "Medium contrast serif font",
);

/**
 * Library for generating, refining and rendering 2-Dimensional Constrained Delaunay Triangulations
 */
export const poly2tri_c = mkPackage(
  nixRaw`pkgs.poly2tri-c`,
  "Library for generating, refining and rendering 2-Dimensional Constrained Delaunay Triangulations",
);

/**
 * A fast and easy-to-use tool for creating status bars
 */
export const polybar = mkPackage(
  nixRaw`pkgs.polybar`,
  "A fast and easy-to-use tool for creating status bars",
);

/**
 * A fast and easy-to-use tool for creating status bars
 */
export const polybarFull = mkPackage(
  nixRaw`pkgs.polybarFull`,
  "A fast and easy-to-use tool for creating status bars",
);

/**
 * Graphical front-end and tray applet for configuring Razer peripherals on GNU/Linux.
 */
export const polychromatic = mkPackage(
  nixRaw`pkgs.polychromatic`,
  "Graphical front-end and tray applet for configuring Razer peripherals on GNU/Linux.",
);

/**
 * Command-line tool for polygon.codeforces.com
 */
export const polygon_cli = mkPackage(
  nixRaw`pkgs.polygon-cli`,
  "Command-line tool for polygon.codeforces.com",
);

/**
 * Performance testing tool for caching proxies, origin server accelerators, L4/7 switches, content filters, and other Web intermediaries
 */
export const polygraph = mkPackage(
  nixRaw`pkgs.polygraph`,
  "Performance testing tool for caching proxies, origin server accelerators, L4/7 switches, content filters, and other Web intermediaries",
);

/**
 * A tool used to develop Polylith based architectures in Clojure
 */
export const polylith = mkPackage(
  nixRaw`pkgs.polylith`,
  "A tool used to develop Polylith based architectures in Clojure",
);

/**
 * Software for research in polyhedral geometry
 */
export const polymake = mkPackage(
  nixRaw`pkgs.polymake`,
  "Software for research in polyhedral geometry",
);

/**
 * Standard ML compiler and interpreter
 */
export const polyml = mkPackage(
  nixRaw`pkgs.polyml`,
  "Standard ML compiler and interpreter",
);

/**
 * Standard ML compiler and interpreter
 */
export const polyml56 = mkPackage(
  nixRaw`pkgs.polyml56`,
  "Standard ML compiler and interpreter",
);

/**
 * Standard ML compiler and interpreter
 */
export const polyml57 = mkPackage(
  nixRaw`pkgs.polyml57`,
  "Standard ML compiler and interpreter",
);

/**
 * Browser with unified devtools targeting responsability and accessibility
 */
export const polypane = mkPackage(
  nixRaw`pkgs.polypane`,
  "Browser with unified devtools targeting responsability and accessibility",
);

/**
 * A soundfont editor for creating musical instruments
 */
export const polyphone = mkPackage(
  nixRaw`pkgs.polyphone`,
  "A soundfont editor for creating musical instruments",
);

/**
 * Reflexive polytopes database
 */
export const polytopes_db = mkPackage(
  nixRaw`pkgs.polytopes_db`,
  "Reflexive polytopes database",
);

/**
 * Authenticating reverse proxy
 */
export const pomerium = mkPackage(
  nixRaw`pkgs.pomerium`,
  "Authenticating reverse proxy",
);

/**
 * Client-side helper for Pomerium authenticating reverse proxy
 */
export const pomerium_cli = mkPackage(
  nixRaw`pkgs.pomerium-cli`,
  "Client-side helper for Pomerium authenticating reverse proxy",
);

/**
 * A trimmed version of the pommed hotkey handler for MacBooks
 */
export const pommed_light = mkPackage(
  nixRaw`pkgs.pommed_light`,
  "A trimmed version of the pommed hotkey handler for MacBooks",
);

/**
 * A simple CLI pomodoro timer using desktop notifications written in Rust
 */
export const pomodoro = mkPackage(
  nixRaw`pkgs.pomodoro`,
  "A simple CLI pomodoro timer using desktop notifications written in Rust",
);

/**
 * A portable, modern regular expression language
 */
export const pomsky = mkPackage(
  nixRaw`pkgs.pomsky`,
  "A portable, modern regular expression language",
);

/**
 * One or two player 3d sports game based on Pong from Atari
 */
export const pong3d = mkPackage(
  nixRaw`pkgs.pong3d`,
  "One or two player 3d sports game based on Pong from Atari",
);

/**
 * Corral is a dependency management tool for ponylang (ponyc)
 */
export const pony_corral = mkPackage(
  nixRaw`pkgs.pony-corral`,
  "Corral is a dependency management tool for ponylang (ponyc)",
);

/**
 * Pony is an Object-oriented, actor-model, capabilities-secure, high performance programming language
 */
export const ponyc = mkPackage(
  nixRaw`pkgs.ponyc`,
  "Pony is an Object-oriented, actor-model, capabilities-secure, high performance programming language",
);

/**
 * CLI PulseAudio Volume Control
 */
export const ponymix = mkPackage(
  nixRaw`pkgs.ponymix`,
  "CLI PulseAudio Volume Control",
);

/**
 * Cowsay reimplemention for ponies
 */
export const ponysay = mkPackage(
  nixRaw`pkgs.ponysay`,
  "Cowsay reimplemention for ponies",
);

/**
 * Compare the performance of multiple commands with a colorful terminal user interface
 */
export const poop = mkPackage(
  nixRaw`pkgs.poop`,
  "Compare the performance of multiple commands with a colorful terminal user interface",
);

/**
 * Send emails from your terminal
 */
export const pop = mkPackage(
  nixRaw`pkgs.pop`,
  "Send emails from your terminal",
);

/**
 * System76 Pop GTK+ Theme
 */
export const pop_gtk_theme = mkPackage(
  nixRaw`pkgs.pop-gtk-theme`,
  "System76 Pop GTK+ Theme",
);

/**
 * Icon theme for Pop!_OS with a semi-flat design and raised 3D motifs
 */
export const pop_icon_theme = mkPackage(
  nixRaw`pkgs.pop-icon-theme`,
  "Icon theme for Pop!_OS with a semi-flat design and raised 3D motifs",
);

/**
 * Modular IPC-based desktop launcher service
 */
export const pop_launcher = mkPackage(
  nixRaw`pkgs.pop-launcher`,
  "Modular IPC-based desktop launcher service",
);

/**
 * Tiny POP3 daemon with security as the primary goal
 */
export const popa3d = mkPackage(
  nixRaw`pkgs.popa3d`,
  "Tiny POP3 daemon with security as the primary goal",
);

/**
 * An application that streams movies and TV shows from torrents
 */
export const popcorntime = mkPackage(
  nixRaw`pkgs.popcorntime`,
  "An application that streams movies and TV shows from torrents",
);

/**
 * A Kubernetes cluster resource sanitizer
 */
export const popeye = mkPackage(
  nixRaw`pkgs.popeye`,
  "A Kubernetes cluster resource sanitizer",
);

/**
 * An email classification system that automatically sorts messages and fights spam
 */
export const popfile = mkPackage(
  nixRaw`pkgs.popfile`,
  "An email classification system that automatically sorts messages and fights spam",
);

/**
 * Header-only C++ program options parser library
 */
export const popl = mkPackage(
  nixRaw`pkgs.popl`,
  "Header-only C++ program options parser library",
);

/**
 * A PDF rendering library
 */
export const poppler = mkPackage(
  nixRaw`pkgs.poppler`,
  "A PDF rendering library",
);

/**
 * Encoding files for Poppler, a PDF rendering library
 */
export const poppler_data = mkPackage(
  nixRaw`pkgs.poppler_data`,
  "Encoding files for Poppler, a PDF rendering library",
);

/**
 * A PDF rendering library
 */
export const poppler_gi = mkPackage(
  nixRaw`pkgs.poppler_gi`,
  "A PDF rendering library",
);

/**
 * A PDF rendering library
 */
export const poppler_min = mkPackage(
  nixRaw`pkgs.poppler_min`,
  "A PDF rendering library",
);

/**
 * A PDF rendering library
 */
export const poppler_utils = mkPackage(
  nixRaw`pkgs.poppler_utils`,
  "A PDF rendering library",
);

/**
 * Multiple USB File Flasher
 */
export const popsicle = mkPackage(
  nixRaw`pkgs.popsicle`,
  "Multiple USB File Flasher",
);

/**
 * Command line option parsing library
 */
export const popt = mkPackage(
  nixRaw`pkgs.popt`,
  "Command line option parsing library",
);

/**
 * An alternative Yggdrasil network client
 */
export const popura = mkPackage(
  nixRaw`pkgs.popura`,
  "An alternative Yggdrasil network client",
);

/**
 * a toolkit for working with nanopore sequencing data from Oxford Nanopore
 */
export const poretools = mkPackage(
  nixRaw`pkgs.poretools`,
  "a toolkit for working with nanopore sequencing data from Oxford Nanopore",
);

/**
 * Pomodoro cli app in rust with timer and countdown
 */
export const porsmo = mkPackage(
  nixRaw`pkgs.porsmo`,
  "Pomodoro cli app in rust with timer and countdown",
);

/**
 * A quick and easy command-line file transfer utility from any computer to another
 */
export const portal = mkPackage(
  nixRaw`pkgs.portal`,
  "A quick and easy command-line file transfer utility from any computer to another",
);

/**
 * Portable cross-platform Audio API
 */
export const portaudio = mkPackage(
  nixRaw`pkgs.portaudio`,
  "Portable cross-platform Audio API",
);

/**
 * A simple tool to calculate the overall performance of an investment portfolio
 */
export const portfolio = mkPackage(
  nixRaw`pkgs.portfolio`,
  "A simple tool to calculate the overall performance of an investment portfolio",
);

/**
 * A minimalist file manager for those who want to use Linux mobile devices
 */
export const portfolio_filemanager = mkPackage(
  nixRaw`pkgs.portfolio-filemanager`,
  "A minimalist file manager for those who want to use Linux mobile devices",
);

/**
 * Platform independent library for MIDI I/O
 */
export const portmidi = mkPackage(
  nixRaw`pkgs.portmidi`,
  "Platform independent library for MIDI I/O",
);

/**
 * mod manager for openMW based on portage
 */
export const portmod = mkPackage(
  nixRaw`pkgs.portmod`,
  "mod manager for openMW based on portage",
);

/**
 * Self-contained user/group management and authentication service
 */
export const portunus = mkPackage(
  nixRaw`pkgs.portunus`,
  "Self-contained user/group management and authentication service",
);

/**
 * CLI for PostCSS
 */
export const postcss_cli = mkPackage(
  nixRaw`pkgs.postcss-cli`,
  "CLI for PostCSS",
);

/**
 * Extract OTP seed instead of using PosteID app
 */
export const posteid_seed_extractor = mkPackage(
  nixRaw`pkgs.posteid-seed-extractor`,
  "Extract OTP seed instead of using PosteID app",
);

/**
 * Cuts a raster image into pieces which can afterwards be printed out and assembled to a poster
 */
export const posterazor = mkPackage(
  nixRaw`pkgs.posterazor`,
  "Cuts a raster image into pieces which can afterwards be printed out and assembled to a poster",
);

/**
 * A fast, easy to administer, and secure mail server
 */
export const postfix = mkPackage(
  nixRaw`pkgs.postfix`,
  "A fast, easy to administer, and secure mail server",
);

/**
 * Web based virtual user administration interface for Postfix mail servers
 */
export const postfixadmin = mkPackage(
  nixRaw`pkgs.postfixadmin`,
  "Web based virtual user administration interface for Postfix mail servers",
);

/**
 * A Language Server for Postgres
 */
export const postgres_lsp = mkPackage(
  nixRaw`pkgs.postgres-lsp`,
  "A Language Server for Postgres",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql = mkPackage(
  nixRaw`pkgs.postgresql`,
  "A powerful, open source object-relational database system",
);

export const postgresqlTestHook = mkPackage(
  nixRaw`pkgs.postgresqlTestHook`,
  "",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_11 = mkPackage(
  nixRaw`pkgs.postgresql_11`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_11_jit = mkPackage(
  nixRaw`pkgs.postgresql_11_jit`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_12 = mkPackage(
  nixRaw`pkgs.postgresql_12`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_12_jit = mkPackage(
  nixRaw`pkgs.postgresql_12_jit`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_13 = mkPackage(
  nixRaw`pkgs.postgresql_13`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_13_jit = mkPackage(
  nixRaw`pkgs.postgresql_13_jit`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_14 = mkPackage(
  nixRaw`pkgs.postgresql_14`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_14_jit = mkPackage(
  nixRaw`pkgs.postgresql_14_jit`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_15 = mkPackage(
  nixRaw`pkgs.postgresql_15`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_15_jit = mkPackage(
  nixRaw`pkgs.postgresql_15_jit`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_16 = mkPackage(
  nixRaw`pkgs.postgresql_16`,
  "A powerful, open source object-relational database system",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_16_jit = mkPackage(
  nixRaw`pkgs.postgresql_16_jit`,
  "A powerful, open source object-relational database system",
);

/**
 * JDBC driver for PostgreSQL allowing Java programs to connect to a PostgreSQL database
 */
export const postgresql_jdbc = mkPackage(
  nixRaw`pkgs.postgresql_jdbc`,
  "JDBC driver for PostgreSQL allowing Java programs to connect to a PostgreSQL database",
);

/**
 * A powerful, open source object-relational database system
 */
export const postgresql_jit = mkPackage(
  nixRaw`pkgs.postgresql_jit`,
  "A powerful, open source object-relational database system",
);

/**
 * A postfix policy server to provide greylisting
 */
export const postgrey = mkPackage(
  nixRaw`pkgs.postgrey`,
  "A postfix policy server to provide greylisting",
);

export const postiats_utilities = mkPackage(
  nixRaw`pkgs.postiats-utilities`,
  "",
);

/**
 * API Development Environment
 */
export const postman = mkPackage(
  nixRaw`pkgs.postman`,
  "API Development Environment",
);

/**
 * Lexmark Postscript Drivers
 */
export const postscript_lexmark = mkPackage(
  nixRaw`pkgs.postscript-lexmark`,
  "Lexmark Postscript Drivers",
);

/**
 * Postfix Sender Rewriting Scheme daemon
 */
export const postsrsd = mkPackage(
  nixRaw`pkgs.postsrsd`,
  "Postfix Sender Rewriting Scheme daemon",
);

/**
 * A cross-platform translation software
 */
export const pot = mkPackage(
  nixRaw`pkgs.pot`,
  "A cross-platform translation software",
);

/**
 * The Pothos data-flow framework
 */
export const pothos = mkPackage(
  nixRaw`pkgs.pothos`,
  "The Pothos data-flow framework",
);

/**
 * A tool for tracing a bitmap, which means, transforming a bitmap into a smooth, scalable image
 */
export const potrace = mkPackage(
  nixRaw`pkgs.potrace`,
  "A tool for tracing a bitmap, which means, transforming a bitmap into a smooth, scalable image",
);

/**
 * Create multi res point cloud to use with potree
 */
export const potreeconverter = mkPackage(
  nixRaw`pkgs.potreeconverter`,
  "Create multi res point cloud to use with potree",
);

/**
 * A cli program for produce fake datas.
 */
export const pouf = mkPackage(
  nixRaw`pkgs.pouf`,
  "A cli program for produce fake datas.",
);

/**
 * Simple multi-client TLS-only IRC bouncer
 */
export const pounce = mkPackage(
  nixRaw`pkgs.pounce`,
  "Simple multi-client TLS-only IRC bouncer",
);

/**
 * Persistence of Vision Raytracer
 */
export const povray = mkPackage(
  nixRaw`pkgs.povray`,
  "Persistence of Vision Raytracer",
);

/**
 * Tool to calibrate power consumption
 */
export const power_calibrate = mkPackage(
  nixRaw`pkgs.power-calibrate`,
  "Tool to calibrate power consumption",
);

/**
 * Makes user-selected power profiles handling available over D-Bus
 */
export const power_profiles_daemon = mkPackage(
  nixRaw`pkgs.power-profiles-daemon`,
  "Makes user-selected power profiles handling available over D-Bus",
);

/**
 * UPower-powered power alerter
 */
export const poweralertd = mkPackage(
  nixRaw`pkgs.poweralertd`,
  "UPower-powered power alerter",
);

/**
 * Tools and library to read/write to the Linux power capping framework (sysfs interface)
 */
export const powercap = mkPackage(
  nixRaw`pkgs.powercap`,
  "Tools and library to read/write to the Linux power capping framework (sysfs interface)",
);

/**
 * A PowerDNS web interface with advanced features
 */
export const powerdns_admin = mkPackage(
  nixRaw`pkgs.powerdns-admin`,
  "A PowerDNS web interface with advanced features",
);

/**
 * The ultimate statusline/prompt utility
 */
export const powerline = mkPackage(
  nixRaw`pkgs.powerline`,
  "The ultimate statusline/prompt utility",
);

/**
 * Patched fonts for Powerline users
 */
export const powerline_fonts = mkPackage(
  nixRaw`pkgs.powerline-fonts`,
  "Patched fonts for Powerline users",
);

/**
 * A Powerline like prompt for Bash, ZSH and Fish
 */
export const powerline_go = mkPackage(
  nixRaw`pkgs.powerline-go`,
  "A Powerline like prompt for Bash, ZSH and Fish",
);

/**
 * powerline-shell rewritten in Rust, inspired by powerline-go
 */
export const powerline_rs = mkPackage(
  nixRaw`pkgs.powerline-rs`,
  "powerline-shell rewritten in Rust, inspired by powerline-go",
);

export const powerline_symbols = mkPackage(
  nixRaw`pkgs.powerline-symbols`,
  "",
);

/**
 * An arcade 2D shoot-em-up game
 */
export const powermanga = mkPackage(
  nixRaw`pkgs.powermanga`,
  "An arcade 2D shoot-em-up game",
);

/**
 * Powerful cross-platform (Windows, Linux, and macOS) shell and scripting language based on .NET
 */
export const powershell = mkPackage(
  nixRaw`pkgs.powershell`,
  "Powerful cross-platform (Windows, Linux, and macOS) shell and scripting language based on .NET",
);

/**
 * Laptop power measuring tool
 */
export const powerstat = mkPackage(
  nixRaw`pkgs.powerstat`,
  "Laptop power measuring tool",
);

/**
 * Analyze power consumption on Intel-based laptops
 */
export const powertop = mkPackage(
  nixRaw`pkgs.powertop`,
  "Analyze power consumption on Intel-based laptops",
);

/**
 * The Parma Polyhedra Library
 */
export const ppl = mkPackage(
  nixRaw`pkgs.ppl`,
  "The Parma Polyhedra Library",
);

/**
 * A tool to reformat the output of latex and friends into readable messages
 */
export const pplatex = mkPackage(
  nixRaw`pkgs.pplatex`,
  "A tool to reformat the output of latex and friends into readable messages",
);

/**
 * Convex polyhedra library for Abstract Interpretation
 */
export const pplite = mkPackage(
  nixRaw`pkgs.pplite`,
  "Convex polyhedra library for Abstract Interpretation",
);

/**
 * Point-to-point implementation to provide Internet connections over serial lines
 */
export const ppp = mkPackage(
  nixRaw`pkgs.ppp`,
  "Point-to-point implementation to provide Internet connections over serial lines",
);

/**
 * A tool for visualization and analysis of profiling data
 */
export const pprof = mkPackage(
  nixRaw`pkgs.pprof`,
  "A tool for visualization and analysis of profiling data",
);

/**
 * User-space tools for LinuxPPS
 */
export const pps_tools = mkPackage(
  nixRaw`pkgs.pps-tools`,
  "User-space tools for LinuxPPS",
);

/**
 * A HLE Playstation Portable emulator, written in C++ (SDL + headless)
 */
export const ppsspp = mkPackage(
  nixRaw`pkgs.ppsspp`,
  "A HLE Playstation Portable emulator, written in C++ (SDL + headless)",
);

/**
 * A HLE Playstation Portable emulator, written in C++ (Qt)
 */
export const ppsspp_qt = mkPackage(
  nixRaw`pkgs.ppsspp-qt`,
  "A HLE Playstation Portable emulator, written in C++ (Qt)",
);

/**
 * A HLE Playstation Portable emulator, written in C++ (SDL + headless)
 */
export const ppsspp_sdl = mkPackage(
  nixRaw`pkgs.ppsspp-sdl`,
  "A HLE Playstation Portable emulator, written in C++ (SDL + headless)",
);

/**
 * A HLE Playstation Portable emulator, written in C++ (SDL + headless)
 */
export const ppsspp_sdl_wayland = mkPackage(
  nixRaw`pkgs.ppsspp-sdl-wayland`,
  "A HLE Playstation Portable emulator, written in C++ (SDL + headless)",
);

/**
 * PPTP client for Linux
 */
export const pptp = mkPackage(
  nixRaw`pkgs.pptp`,
  "PPTP client for Linux",
);

/**
 * The PPTP Server for Linux
 */
export const pptpd = mkPackage(
  nixRaw`pkgs.pptpd`,
  "The PPTP Server for Linux",
);

/**
 * Powerful image viewer with minimal UI
 */
export const pqiv = mkPackage(
  nixRaw`pkgs.pqiv`,
  "Powerful image viewer with minimal UI",
);

/**
 * CLI tool to inspect Parquet files
 */
export const pqrs = mkPackage(
  nixRaw`pkgs.pqrs`,
  "CLI tool to inspect Parquet files",
);

/**
 * Nixpkgs pull request channel tracker
 */
export const pr_tracker = mkPackage(
  nixRaw`pkgs.pr-tracker`,
  "Nixpkgs pull request channel tracker",
);

/**
 * Doing phonetics by computer
 */
export const praat = mkPackage(
  nixRaw`pkgs.praat`,
  "Doing phonetics by computer",
);

/**
 * A lightweight GTK+ music manager - fork of Consonance Music Manager
 */
export const pragha = mkPackage(
  nixRaw`pkgs.pragha`,
  "A lightweight GTK+ music manager - fork of Consonance Music Manager",
);

/**
 * Yet another Webmail interface for IMAP servers on Unix systems written in C
 */
export const prayer = mkPackage(
  nixRaw`pkgs.prayer`,
  "Yet another Webmail interface for IMAP servers on Unix systems written in C",
);

/**
 * An advanced, Vanilla-compatible Doom engine based on PrBoom
 */
export const prboom_plus = mkPackage(
  nixRaw`pkgs.prboom-plus`,
  "An advanced, Vanilla-compatible Doom engine based on PrBoom",
);

/**
 * A framework for managing and maintaining multi-language pre-commit hooks
 */
export const pre_commit = mkPackage(
  nixRaw`pkgs.pre-commit`,
  "A framework for managing and maintaining multi-language pre-commit hooks",
);

/**
 * pre-commit hook to ensure that files that should be encrypted with sops are
 */
export const pre_commit_hook_ensure_sops = mkPackage(
  nixRaw`pkgs.pre-commit-hook-ensure-sops`,
  "pre-commit hook to ensure that files that should be encrypted with sops are",
);

/**
 * preCICE stands for Precise Code Interaction Coupling Environment
 */
export const precice = mkPackage(
  nixRaw`pkgs.precice`,
  "preCICE stands for Precise Code Interaction Coupling Environment",
);

/**
 * Small python tool for visualizing the preCICE xml configuration 
 */
export const precice_config_visualizer = mkPackage(
  nixRaw`pkgs.precice-config-visualizer`,
  "Small python tool for visualizing the preCICE xml configuration ",
);

/**
 * Prefetch dependencies from npm (for use with `fetchNpmDeps`)
 */
export const prefetch_npm_deps = mkPackage(
  nixRaw`pkgs.prefetch-npm-deps`,
  "Prefetch dependencies from npm (for use with `fetchNpmDeps`)",
);

export const prefetch_yarn_deps = mkPackage(
  nixRaw`pkgs.prefetch-yarn-deps`,
  "",
);

/**
 * ELF prelinking utility to speed up dynamic linking
 */
export const prelink = mkPackage(
  nixRaw`pkgs.prelink`,
  "ELF prelinking utility to speed up dynamic linking",
);

/**
 * A simple build configuration and project generation tool using lua
 */
export const premake = mkPackage(
  nixRaw`pkgs.premake`,
  "A simple build configuration and project generation tool using lua",
);

/**
 * A simple build configuration and project generation tool using lua
 */
export const premake3 = mkPackage(
  nixRaw`pkgs.premake3`,
  "A simple build configuration and project generation tool using lua",
);

/**
 * A simple build configuration and project generation tool using lua
 */
export const premake4 = mkPackage(
  nixRaw`pkgs.premake4`,
  "A simple build configuration and project generation tool using lua",
);

/**
 * A simple build configuration and project generation tool using lua
 */
export const premake5 = mkPackage(
  nixRaw`pkgs.premake5`,
  "A simple build configuration and project generation tool using lua",
);

/**
 * A simple, configurable utility to show your web activity as playing status on Discord
 */
export const premid = mkPackage(
  nixRaw`pkgs.premid`,
  "A simple, configurable utility to show your web activity as playing status on Discord",
);

/**
 * An intelligent predictive text entry system
 */
export const presage = mkPackage(
  nixRaw`pkgs.presage`,
  "An intelligent predictive text entry system",
);

/**
 * A terminal-based presentation tool with colors and effects.
 */
export const present = mkPackage(
  nixRaw`pkgs.present`,
  "A terminal-based presentation tool with colors and effects.",
);

/**
 * A script interpolation engine for markdown documents
 */
export const present_cli = mkPackage(
  nixRaw`pkgs.present-cli`,
  "A script interpolation engine for markdown documents",
);

/**
 * A terminal based slideshow tool
 */
export const presenterm = mkPackage(
  nixRaw`pkgs.presenterm`,
  "A terminal based slideshow tool",
);

/**
 * An alternative font to system-ui for all platforms
 */
export const pretendard = mkPackage(
  nixRaw`pkgs.pretendard`,
  "An alternative font to system-ui for all platforms",
);

/**
 * An alternative font to system-ui for all platforms
 */
export const pretendard_gov = mkPackage(
  nixRaw`pkgs.pretendard-gov`,
  "An alternative font to system-ui for all platforms",
);

/**
 * An alternative font to system-ui for all platforms
 */
export const pretendard_jp = mkPackage(
  nixRaw`pkgs.pretendard-jp`,
  "An alternative font to system-ui for all platforms",
);

/**
 * An alternative font to system-ui for all platforms
 */
export const pretendard_std = mkPackage(
  nixRaw`pkgs.pretendard-std`,
  "An alternative font to system-ui for all platforms",
);

/**
 * Tool for handling machine-in-the-middle tasks
 */
export const pretender = mkPackage(
  nixRaw`pkgs.pretender`,
  "Tool for handling machine-in-the-middle tasks",
);

/**
 * Makes prettier fast
 */
export const prettier_d_slim = mkPackage(
  nixRaw`pkgs.prettier-d-slim`,
  "Makes prettier fast",
);

/**
 * Prettier, as a daemon, for improved formatting speed
 */
export const prettierd = mkPackage(
  nixRaw`pkgs.prettierd`,
  "Prettier, as a daemon, for improved formatting speed",
);

/**
 * pretty printer for data types with a 'Show' instance
 */
export const pretty_simple = mkPackage(
  nixRaw`pkgs.pretty-simple`,
  "pretty printer for data types with a 'Show' instance",
);

/**
 * A wrapper around the standard ping tool with the objective of making the output prettier, more colorful, more compact, and easier to read
 */
export const prettyping = mkPackage(
  nixRaw`pkgs.prettyping`,
  "A wrapper around the standard ping tool with the objective of making the output prettier, more colorful, more compact, and easier to read",
);

/**
 * offline version of the Esperanto dictionary Reta Vortaro
 */
export const prevo = mkPackage(
  nixRaw`pkgs.prevo`,
  "offline version of the Esperanto dictionary Reta Vortaro",
);

/**
 * data for offline version of the Esperanto dictionary Reta Vortaro
 */
export const prevo_data = mkPackage(
  nixRaw`pkgs.prevo-data`,
  "data for offline version of the Esperanto dictionary Reta Vortaro",
);

/**
 * CLI tools for the offline version of the Esperanto dictionary Reta Vortaro
 */
export const prevo_tools = mkPackage(
  nixRaw`pkgs.prevo-tools`,
  "CLI tools for the offline version of the Esperanto dictionary Reta Vortaro",
);

/**
 * A command-line tool for fetching and formatting historical price data, with support for multiple data sources and output formats
 */
export const pricehist = mkPackage(
  nixRaw`pkgs.pricehist`,
  "A command-line tool for fetching and formatting historical price data, with support for multiple data sources and output formats",
);

/**
 * Like cat, but more colorful
 */
export const pridecat = mkPackage(
  nixRaw`pkgs.pridecat`,
  "Like cat, but more colorful",
);

/**
 * Print out system statistics with pride flags
 */
export const pridefetch = mkPackage(
  nixRaw`pkgs.pridefetch`,
  "Print out system statistics with pride flags",
);

/**
 * Non-blocking (web)server API for distributed computing and SOA based on zeromq
 */
export const prime_server = mkPackage(
  nixRaw`pkgs.prime-server`,
  "Non-blocking (web)server API for distributed computing and SOA based on zeromq",
);

/**
 * Fast prime counting function implementations
 */
export const primecount = mkPackage(
  nixRaw`pkgs.primecount`,
  "Fast prime counting function implementations",
);

/**
 * Fast C/C++ prime number generator
 */
export const primesieve = mkPackage(
  nixRaw`pkgs.primesieve`,
  "Fast C/C++ prime number generator",
);

export const primus = mkPackage(
  nixRaw`pkgs.primus`,
  "",
);

/**
 * Low-overhead client-side GPU offloading
 */
export const primusLib = mkPackage(
  nixRaw`pkgs.primusLib`,
  "Low-overhead client-side GPU offloading",
);

/**
 * Physics-based sandbox game
 */
export const principia = mkPackage(
  nixRaw`pkgs.principia`,
  "Physics-based sandbox game",
);

/**
 * Pronterface, Pronsole, and Printcore - Pure Python 3d printing host software
 */
export const printrun = mkPackage(
  nixRaw`pkgs.printrun`,
  "Pronterface, Pronsole, and Printcore - Pure Python 3d printing host software",
);

/**
 * An RTMP stream recaster/splitter
 */
export const prism = mkPackage(
  nixRaw`pkgs.prism`,
  "An RTMP stream recaster/splitter",
);

/**
 * A collection of engines that power the core stack for Prisma
 */
export const prisma_engines = mkPackage(
  nixRaw`pkgs.prisma-engines`,
  "A collection of engines that power the core stack for Prisma",
);

/**
 * A free, open source launcher for Minecraft
 */
export const prismlauncher = mkPackage(
  nixRaw`pkgs.prismlauncher`,
  "A free, open source launcher for Minecraft",
);

/**
 * A free, open source launcher for Minecraft
 */
export const prismlauncher_qt5 = mkPackage(
  nixRaw`pkgs.prismlauncher-qt5`,
  "A free, open source launcher for Minecraft",
);

/**
 * A free, open source launcher for Minecraft
 */
export const prismlauncher_qt5_unwrapped = mkPackage(
  nixRaw`pkgs.prismlauncher-qt5-unwrapped`,
  "A free, open source launcher for Minecraft",
);

/**
 * A free, open source launcher for Minecraft
 */
export const prismlauncher_unwrapped = mkPackage(
  nixRaw`pkgs.prismlauncher-unwrapped`,
  "A free, open source launcher for Minecraft",
);

/**
 * Pritunl OpenVPN client
 */
export const pritunl_client = mkPackage(
  nixRaw`pkgs.pritunl-client`,
  "Pritunl OpenVPN client",
);

/**
 * Pritunl Zero SSH client
 */
export const pritunl_ssh = mkPackage(
  nixRaw`pkgs.pritunl-ssh`,
  "Pritunl Zero SSH client",
);

/**
 * Multi factor authentication system (2FA, MFA, OTP Server)
 */
export const privacyidea = mkPackage(
  nixRaw`pkgs.privacyidea`,
  "Multi factor authentication system (2FA, MFA, OTP Server)",
);

/**
 * Non-caching web proxy with advanced filtering capabilities
 */
export const privoxy = mkPackage(
  nixRaw`pkgs.privoxy`,
  "Non-caching web proxy with advanced filtering capabilities",
);

/**
 * A completely normal office calculator
 */
export const pro_office_calculator = mkPackage(
  nixRaw`pkgs.pro-office-calculator`,
  "A completely normal office calculator",
);

/**
 * CLI tool for on-chip debugging and flashing of ARM chips
 */
export const probe_rs = mkPackage(
  nixRaw`pkgs.probe-rs`,
  "CLI tool for on-chip debugging and flashing of ARM chips",
);

/**
 * Run embedded programs just like native ones
 */
export const probe_run = mkPackage(
  nixRaw`pkgs.probe-run`,
  "Run embedded programs just like native ones",
);

/**
 * A Linux version of the ProcDump Sysinternals tool
 */
export const procdump = mkPackage(
  nixRaw`pkgs.procdump`,
  "A Linux version of the ProcDump Sysinternals tool",
);

/**
 * A simple and flexible scheduler and orchestrator to manage non-containerized applications
 */
export const process_compose = mkPackage(
  nixRaw`pkgs.process-compose`,
  "A simple and flexible scheduler and orchestrator to manage non-containerized applications",
);

/**
 * A simple convenience library for handling processes in C++11
 */
export const process_cpp = mkPackage(
  nixRaw`pkgs.process-cpp`,
  "A simple convenience library for handling processes in C++11",
);

/**
 * A process viewer GUI in rust
 */
export const process_viewer = mkPackage(
  nixRaw`pkgs.process-viewer`,
  "A process viewer GUI in rust",
);

/**
 * A language and IDE for electronic arts
 */
export const processing = mkPackage(
  nixRaw`pkgs.processing`,
  "A language and IDE for electronic arts",
);

/**
 * A roman serif with blackletter elements
 */
export const prociono = mkPackage(
  nixRaw`pkgs.prociono`,
  "A roman serif with blackletter elements",
);

/**
 * Mail processing and filtering utility
 */
export const procmail = mkPackage(
  nixRaw`pkgs.procmail`,
  "Mail processing and filtering utility",
);

/**
 * Run processes in the background (and foreground) on Mac & Linux from a Procfile (for production and/or development environments)
 */
export const procodile = mkPackage(
  nixRaw`pkgs.procodile`,
  "Run processes in the background (and foreground) on Mac & Linux from a Procfile (for production and/or development environments)",
);

/**
 * Utilities that give information about processes using the /proc filesystem
 */
export const procps = mkPackage(
  nixRaw`pkgs.procps`,
  "Utilities that give information about processes using the /proc filesystem",
);

/**
 * A modern replacement for ps written in Rust
 */
export const procs = mkPackage(
  nixRaw`pkgs.procs`,
  "A modern replacement for ps written in Rust",
);

/**
 * Procyon is a suite of Java metaprogramming tools including a Java decompiler
 */
export const procyon = mkPackage(
  nixRaw`pkgs.procyon`,
  "Procyon is a suite of Java metaprogramming tools including a Java decompiler",
);

/**
 * Fast, reliable protein-coding gene prediction for prokaryotic genomes
 */
export const prodigal = mkPackage(
  nixRaw`pkgs.prodigal`,
  "Fast, reliable protein-coding gene prediction for prokaryotic genomes",
);

/**
 * A console based XMPP client
 */
export const profanity = mkPackage(
  nixRaw`pkgs.profanity`,
  "A console based XMPP client",
);

/**
 * A tuning tool for Monte Carlo event generators
 */
export const professor = mkPackage(
  nixRaw`pkgs.professor`,
  "A tuning tool for Monte Carlo event generators",
);

/**
 * System Information Fetcher Written in GNU/Prolog
 */
export const profetch = mkPackage(
  nixRaw`pkgs.profetch`,
  "System Information Fetcher Written in GNU/Prolog",
);

/**
 * Reduces browser profile sizes by cleaning their sqlite databases
 */
export const profile_cleaner = mkPackage(
  nixRaw`pkgs.profile-cleaner`,
  "Reduces browser profile sizes by cleaning their sqlite databases",
);

/**
 * Syncs browser profile dirs to RAM
 */
export const profile_sync_daemon = mkPackage(
  nixRaw`pkgs.profile-sync-daemon`,
  "Syncs browser profile dirs to RAM",
);

/**
 * A monospaced font created to be a most readable font for programming
 */
export const profont = mkPackage(
  nixRaw`pkgs.profont`,
  "A monospaced font created to be a most readable font for programming",
);

/**
 * A set of fixed-width screen fonts that are designed for code listings
 */
export const proggyfonts = mkPackage(
  nixRaw`pkgs.proggyfonts`,
  "A set of fixed-width screen fonts that are designed for code listings",
);

/**
 * A terminal calculator for programmers
 */
export const programmer_calculator = mkPackage(
  nixRaw`pkgs.programmer-calculator`,
  "A terminal calculator for programmers",
);

/**
 * Tool that shows the progress of coreutils programs
 */
export const progress = mkPackage(
  nixRaw`pkgs.progress`,
  "Tool that shows the progress of coreutils programs",
);

/**
 * Cartographic Projections Library
 */
export const proj = mkPackage(
  nixRaw`pkgs.proj`,
  "Cartographic Projections Library",
);

/**
 * Cartographic Projections Library
 */
export const proj_7 = mkPackage(
  nixRaw`pkgs.proj_7`,
  "Cartographic Projections Library",
);

/**
 * Repository for proj datum grids
 */
export const proj_datumgrid = mkPackage(
  nixRaw`pkgs.proj-datumgrid`,
  "Repository for proj datum grids",
);

/**
 * A TUI file manager built for projects
 */
export const projectable = mkPackage(
  nixRaw`pkgs.projectable`,
  "A TUI file manager built for projects",
);

/**
 * Linux/X11 application for the Logitech Spotlight device (and similar devices).
 */
export const projecteur = mkPackage(
  nixRaw`pkgs.projecteur`,
  "Linux/X11 application for the Logitech Spotlight device (and similar devices).",
);

/**
 * Project-Management Software similar to MS-Project
 */
export const projectlibre = mkPackage(
  nixRaw`pkgs.projectlibre`,
  "Project-Management Software similar to MS-Project",
);

/**
 * Cross-platform Milkdrop-compatible music visualizer
 */
export const projectm = mkPackage(
  nixRaw`pkgs.projectm`,
  "Cross-platform Milkdrop-compatible music visualizer",
);

/**
 * Tool to scrape a Prometheus client and dump the result as JSON
 */
export const prom2json = mkPackage(
  nixRaw`pkgs.prom2json`,
  "Tool to scrape a Prometheus client and dump the result as JSON",
);

/**
 * Service monitoring system and time series database
 */
export const prometheus = mkPackage(
  nixRaw`pkgs.prometheus`,
  "Service monitoring system and time series database",
);

/**
 * Alert dispatcher for the Prometheus monitoring system
 */
export const prometheus_alertmanager = mkPackage(
  nixRaw`pkgs.prometheus-alertmanager`,
  "Alert dispatcher for the Prometheus monitoring system",
);

/**
 * Provides a Prometheus exporter for the apcupsd Network Information Server (NIS)
 */
export const prometheus_apcupsd_exporter = mkPackage(
  nixRaw`pkgs.prometheus-apcupsd-exporter`,
  "Provides a Prometheus exporter for the apcupsd Network Information Server (NIS)",
);

/**
 * JFrog Artifactory Prometheus Exporter
 */
export const prometheus_artifactory_exporter = mkPackage(
  nixRaw`pkgs.prometheus-artifactory-exporter`,
  "JFrog Artifactory Prometheus Exporter",
);

/**
 * Exports Prometheus metrics about S3 buckets and objects
 */
export const prometheus_aws_s3_exporter = mkPackage(
  nixRaw`pkgs.prometheus-aws-s3-exporter`,
  "Exports Prometheus metrics about S3 buckets and objects",
);

/**
 * Prometheus exporter for bind9 server
 */
export const prometheus_bind_exporter = mkPackage(
  nixRaw`pkgs.prometheus-bind-exporter`,
  "Prometheus exporter for bind9 server",
);

/**
 * Prometheus exporter for the bird routing daemon
 */
export const prometheus_bird_exporter = mkPackage(
  nixRaw`pkgs.prometheus-bird-exporter`,
  "Prometheus exporter for the bird routing daemon",
);

/**
 * Prometheus exporter for Bitcoin Core nodes
 */
export const prometheus_bitcoin_exporter = mkPackage(
  nixRaw`pkgs.prometheus-bitcoin-exporter`,
  "Prometheus exporter for Bitcoin Core nodes",
);

/**
 * Blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP
 */
export const prometheus_blackbox_exporter = mkPackage(
  nixRaw`pkgs.prometheus-blackbox-exporter`,
  "Blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP",
);

/**
 * Prometheus Cloudflare Exporter
 */
export const prometheus_cloudflare_exporter = mkPackage(
  nixRaw`pkgs.prometheus-cloudflare-exporter`,
  "Prometheus Cloudflare Exporter",
);

/**
 * Relay server for exporting metrics from collectd to Prometheus
 */
export const prometheus_collectd_exporter = mkPackage(
  nixRaw`pkgs.prometheus-collectd-exporter`,
  "Relay server for exporting metrics from collectd to Prometheus",
);

/**
 * Prometheus exporter for Consul metrics
 */
export const prometheus_consul_exporter = mkPackage(
  nixRaw`pkgs.prometheus-consul-exporter`,
  "Prometheus exporter for Consul metrics",
);

/**
 * Prometheus Client Library for Modern C++
 */
export const prometheus_cpp = mkPackage(
  nixRaw`pkgs.prometheus-cpp`,
  "Prometheus Client Library for Modern C++",
);

/**
 * NVIDIA GPU metrics exporter for Prometheus leveraging DCGM
 */
export const prometheus_dcgm_exporter = mkPackage(
  nixRaw`pkgs.prometheus-dcgm-exporter`,
  "NVIDIA GPU metrics exporter for Prometheus leveraging DCGM",
);

/**
 * A dnsmasq exporter for Prometheus
 */
export const prometheus_dnsmasq_exporter = mkPackage(
  nixRaw`pkgs.prometheus-dnsmasq-exporter`,
  "A dnsmasq exporter for Prometheus",
);

/**
 * Exports the expiration time of your domains as prometheus metrics
 */
export const prometheus_domain_exporter = mkPackage(
  nixRaw`pkgs.prometheus-domain-exporter`,
  "Exports the expiration time of your domains as prometheus metrics",
);

/**
 * Prometheus metrics exporter for Dovecot
 */
export const prometheus_dovecot_exporter = mkPackage(
  nixRaw`pkgs.prometheus-dovecot-exporter`,
  "Prometheus metrics exporter for Dovecot",
);

/**
 * Prometheus exporter for the Fastly Real-time Analytics API
 */
export const prometheus_fastly_exporter = mkPackage(
  nixRaw`pkgs.prometheus-fastly-exporter`,
  "Prometheus exporter for the Fastly Real-time Analytics API",
);

/**
 * Export network flows from kafka to Prometheus
 */
export const prometheus_flow_exporter = mkPackage(
  nixRaw`pkgs.prometheus-flow-exporter`,
  "Export network flows from kafka to Prometheus",
);

/**
 * Prometheus Exporter for FRITZ!Box (TR64 and UPnP)
 */
export const prometheus_fritzbox_exporter = mkPackage(
  nixRaw`pkgs.prometheus-fritzbox-exporter`,
  "Prometheus Exporter for FRITZ!Box (TR64 and UPnP)",
);

/**
 * Prometheus / OpenMetrics exporter for GitLab CI pipelines insights
 */
export const prometheus_gitlab_ci_pipelines_exporter = mkPackage(
  nixRaw`pkgs.prometheus-gitlab-ci-pipelines-exporter`,
  "Prometheus / OpenMetrics exporter for GitLab CI pipelines insights",
);

/**
 * An exporter for metrics exported in the Graphite plaintext protocol
 */
export const prometheus_graphite_exporter = mkPackage(
  nixRaw`pkgs.prometheus-graphite-exporter`,
  "An exporter for metrics exported in the Graphite plaintext protocol",
);

/**
 * HAProxy Exporter for the Prometheus monitoring system
 */
export const prometheus_haproxy_exporter = mkPackage(
  nixRaw`pkgs.prometheus-haproxy-exporter`,
  "HAProxy Exporter for the Prometheus monitoring system",
);

/**
 * Simple iDRAC exporter for Prometheus
 */
export const prometheus_idrac_exporter = mkPackage(
  nixRaw`pkgs.prometheus-idrac-exporter`,
  "Simple iDRAC exporter for Prometheus",
);

/**
 * Export Prometheus-style metrics about how many emails you have in your INBOX and in additional configured folders
 */
export const prometheus_imap_mailstat_exporter = mkPackage(
  nixRaw`pkgs.prometheus-imap-mailstat-exporter`,
  "Export Prometheus-style metrics about how many emails you have in your INBOX and in additional configured folders",
);

/**
 * Prometheus exporter that accepts InfluxDB metrics
 */
export const prometheus_influxdb_exporter = mkPackage(
  nixRaw`pkgs.prometheus-influxdb-exporter`,
  "Prometheus exporter that accepts InfluxDB metrics",
);

/**
 * An IPMI exporter for Prometheus
 */
export const prometheus_ipmi_exporter = mkPackage(
  nixRaw`pkgs.prometheus-ipmi-exporter`,
  "An IPMI exporter for Prometheus",
);

/**
 * Export Jitsi Videobridge metrics to Prometheus
 */
export const prometheus_jitsi_exporter = mkPackage(
  nixRaw`pkgs.prometheus-jitsi-exporter`,
  "Export Jitsi Videobridge metrics to Prometheus",
);

/**
 * A process for exposing JMX Beans via HTTP for Prometheus consumption
 */
export const prometheus_jmx_httpserver = mkPackage(
  nixRaw`pkgs.prometheus-jmx-httpserver`,
  "A process for exposing JMX Beans via HTTP for Prometheus consumption",
);

/**
 * A prometheus exporter which scrapes remote JSON by JSONPath
 */
export const prometheus_json_exporter = mkPackage(
  nixRaw`pkgs.prometheus-json-exporter`,
  "A prometheus exporter which scrapes remote JSON by JSONPath",
);

/**
 * Exporter for metrics from devices running JunOS
 */
export const prometheus_junos_czerwonk_exporter = mkPackage(
  nixRaw`pkgs.prometheus-junos-czerwonk-exporter`,
  "Exporter for metrics from devices running JunOS",
);

/**
 * Export Kea Metrics in the Prometheus Exposition Format
 */
export const prometheus_kea_exporter = mkPackage(
  nixRaw`pkgs.prometheus-kea-exporter`,
  "Export Kea Metrics in the Prometheus Exposition Format",
);

/**
 * Prometheus exporter for Elgato Key Light devices
 */
export const prometheus_keylight_exporter = mkPackage(
  nixRaw`pkgs.prometheus-keylight-exporter`,
  "Prometheus exporter for Elgato Key Light devices",
);

/**
 * Prometheus exporter for Knot DNS
 */
export const prometheus_knot_exporter = mkPackage(
  nixRaw`pkgs.prometheus-knot-exporter`,
  "Prometheus exporter for Knot DNS",
);

/**
 * Prometheus exporter for lnd (Lightning Network Daemon)
 */
export const prometheus_lnd_exporter = mkPackage(
  nixRaw`pkgs.prometheus-lnd-exporter`,
  "Prometheus exporter for lnd (Lightning Network Daemon)",
);

/**
 * Export Prometheus-style metrics about mail server functionality
 */
export const prometheus_mail_exporter = mkPackage(
  nixRaw`pkgs.prometheus-mail-exporter`,
  "Export Prometheus-style metrics about mail server functionality",
);

/**
 * Prometheus MikroTik device(s) exporter
 */
export const prometheus_mikrotik_exporter = mkPackage(
  nixRaw`pkgs.prometheus-mikrotik-exporter`,
  "Prometheus MikroTik device(s) exporter",
);

/**
 * A Prometheus exporter for Minio cloud storage server
 */
export const prometheus_minio_exporter = mkPackage(
  nixRaw`pkgs.prometheus-minio-exporter`,
  "A Prometheus exporter for Minio cloud storage server",
);

/**
 * Prometheus exporter for ModemManager and its devices
 */
export const prometheus_modemmanager_exporter = mkPackage(
  nixRaw`pkgs.prometheus-modemmanager-exporter`,
  "Prometheus exporter for ModemManager and its devices",
);

/**
 * Prometheus exporter for MySQL server metrics
 */
export const prometheus_mysqld_exporter = mkPackage(
  nixRaw`pkgs.prometheus-mysqld-exporter`,
  "Prometheus exporter for MySQL server metrics",
);

/**
 * Exporter for NATS metrics
 */
export const prometheus_nats_exporter = mkPackage(
  nixRaw`pkgs.prometheus-nats-exporter`,
  "Exporter for NATS metrics",
);

/**
 * Prometheus exporter for Nextcloud servers
 */
export const prometheus_nextcloud_exporter = mkPackage(
  nixRaw`pkgs.prometheus-nextcloud-exporter`,
  "Prometheus exporter for Nextcloud servers",
);

/**
 * NGINX Prometheus Exporter for NGINX and NGINX Plus
 */
export const prometheus_nginx_exporter = mkPackage(
  nixRaw`pkgs.prometheus-nginx-exporter`,
  "NGINX Prometheus Exporter for NGINX and NGINX Plus",
);

/**
 * Export metrics from Nginx access log files to Prometheus
 */
export const prometheus_nginxlog_exporter = mkPackage(
  nixRaw`pkgs.prometheus-nginxlog-exporter`,
  "Export metrics from Nginx access log files to Prometheus",
);

/**
 * Prometheus exporter for machine metrics
 */
export const prometheus_node_exporter = mkPackage(
  nixRaw`pkgs.prometheus-node-exporter`,
  "Prometheus exporter for machine metrics",
);

/**
 * Prometheus exporter for Network UPS Tools
 */
export const prometheus_nut_exporter = mkPackage(
  nixRaw`pkgs.prometheus-nut-exporter`,
  "Prometheus exporter for Network UPS Tools",
);

/**
 * Simple service that scrapes metrics from OpenLDAP and exports them via HTTP for Prometheus consumption
 */
export const prometheus_openldap_exporter = mkPackage(
  nixRaw`pkgs.prometheus-openldap-exporter`,
  "Simple service that scrapes metrics from OpenLDAP and exports them via HTTP for Prometheus consumption",
);

/**
 * Prometheus exporter for PgBouncer
 */
export const prometheus_pgbouncer_exporter = mkPackage(
  nixRaw`pkgs.prometheus-pgbouncer-exporter`,
  "Prometheus exporter for PgBouncer",
);

/**
 * A prometheus exporter for PHP-FPM.
 */
export const prometheus_php_fpm_exporter = mkPackage(
  nixRaw`pkgs.prometheus-php-fpm-exporter`,
  "A prometheus exporter for PHP-FPM.",
);

/**
 * Prometheus exporter for PI-Hole's Raspberry PI ad blocker
 */
export const prometheus_pihole_exporter = mkPackage(
  nixRaw`pkgs.prometheus-pihole-exporter`,
  "Prometheus exporter for PI-Hole's Raspberry PI ad blocker",
);

/**
 * A Prometheus exporter for Postfix
 */
export const prometheus_postfix_exporter = mkPackage(
  nixRaw`pkgs.prometheus-postfix-exporter`,
  "A Prometheus exporter for Postfix",
);

/**
 * A Prometheus exporter for PostgreSQL
 */
export const prometheus_postgres_exporter = mkPackage(
  nixRaw`pkgs.prometheus-postgres-exporter`,
  "A Prometheus exporter for PostgreSQL",
);

/**
 * Prometheus exporter that mines /proc to report on selected processes
 */
export const prometheus_process_exporter = mkPackage(
  nixRaw`pkgs.prometheus-process-exporter`,
  "Prometheus exporter that mines /proc to report on selected processes",
);

/**
 * Allows ephemeral and batch jobs to expose metrics to Prometheus
 */
export const prometheus_pushgateway = mkPackage(
  nixRaw`pkgs.prometheus-pushgateway`,
  "Allows ephemeral and batch jobs to expose metrics to Prometheus",
);

/**
 * Exposes information gathered from Proxmox VE cluster for use by the Prometheus monitoring system
 */
export const prometheus_pve_exporter = mkPackage(
  nixRaw`pkgs.prometheus-pve-exporter`,
  "Exposes information gathered from Proxmox VE cluster for use by the Prometheus monitoring system",
);

/**
 * Prometheus exporter for RabbitMQ
 */
export const prometheus_rabbitmq_exporter = mkPackage(
  nixRaw`pkgs.prometheus-rabbitmq-exporter`,
  "Prometheus exporter for RabbitMQ",
);

/**
 * Prometheus exporter for Redis metrics
 */
export const prometheus_redis_exporter = mkPackage(
  nixRaw`pkgs.prometheus-redis-exporter`,
  "Prometheus exporter for Redis metrics",
);

/**
 * Prometheus time-series DB exporter for rtl_433 433MHz radio packet decoder
 */
export const prometheus_rtl_433_exporter = mkPackage(
  nixRaw`pkgs.prometheus-rtl_433-exporter`,
  "Prometheus time-series DB exporter for rtl_433 433MHz radio packet decoder",
);

/**
 * Prometheus exporter for sabnzbd
 */
export const prometheus_sabnzbd_exporter = mkPackage(
  nixRaw`pkgs.prometheus-sabnzbd-exporter`,
  "Prometheus exporter for sabnzbd",
);

/**
 * An SMS alerting tool for Prometheus's Alertmanager
 */
export const prometheus_sachet = mkPackage(
  nixRaw`pkgs.prometheus-sachet`,
  "An SMS alerting tool for Prometheus's Alertmanager",
);

/**
 * Shell script prometheus exporter
 */
export const prometheus_script_exporter = mkPackage(
  nixRaw`pkgs.prometheus-script-exporter`,
  "Shell script prometheus exporter",
);

/**
 * Shelly humidity sensor exporter for prometheus
 */
export const prometheus_shelly_exporter = mkPackage(
  nixRaw`pkgs.prometheus-shelly-exporter`,
  "Shelly humidity sensor exporter for prometheus",
);

/**
 * Export smartctl statistics for Prometheus
 */
export const prometheus_smartctl_exporter = mkPackage(
  nixRaw`pkgs.prometheus-smartctl-exporter`,
  "Export smartctl statistics for Prometheus",
);

/**
 * Prometheus exporter for sending continual ICMP/UDP pings
 */
export const prometheus_smokeping_prober = mkPackage(
  nixRaw`pkgs.prometheus-smokeping-prober`,
  "Prometheus exporter for sending continual ICMP/UDP pings",
);

/**
 * SNMP Exporter for Prometheus
 */
export const prometheus_snmp_exporter = mkPackage(
  nixRaw`pkgs.prometheus-snmp-exporter`,
  "SNMP Exporter for Prometheus",
);

/**
 * Flexible SQL exporter for Prometheus
 */
export const prometheus_sql_exporter = mkPackage(
  nixRaw`pkgs.prometheus-sql-exporter`,
  "Flexible SQL exporter for Prometheus",
);

/**
 * Receives StatsD-style metrics and exports them to Prometheus
 */
export const prometheus_statsd_exporter = mkPackage(
  nixRaw`pkgs.prometheus-statsd-exporter`,
  "Receives StatsD-style metrics and exports them to Prometheus",
);

/**
 * Arris Surfboard signal metrics exporter
 */
export const prometheus_surfboard_exporter = mkPackage(
  nixRaw`pkgs.prometheus-surfboard-exporter`,
  "Arris Surfboard signal metrics exporter",
);

/**
 * Exporter for systemd unit metrics
 */
export const prometheus_systemd_exporter = mkPackage(
  nixRaw`pkgs.prometheus-systemd-exporter`,
  "Exporter for systemd unit metrics",
);

/**
 * Prometheus exporter that exposes metrics from a Tor daemon
 */
export const prometheus_tor_exporter = mkPackage(
  nixRaw`pkgs.prometheus-tor-exporter`,
  "Prometheus exporter that exposes metrics from a Tor daemon",
);

/**
 * Prometheus exporter for Unbound DNS resolver
 */
export const prometheus_unbound_exporter = mkPackage(
  nixRaw`pkgs.prometheus-unbound-exporter`,
  "Prometheus exporter for Unbound DNS resolver",
);

/**
 * Prometheus exporter for V2Ray daemon
 */
export const prometheus_v2ray_exporter = mkPackage(
  nixRaw`pkgs.prometheus-v2ray-exporter`,
  "Prometheus exporter for V2Ray daemon",
);

/**
 * Varnish exporter for Prometheus
 */
export const prometheus_varnish_exporter = mkPackage(
  nixRaw`pkgs.prometheus-varnish-exporter`,
  "Varnish exporter for Prometheus",
);

/**
 * A Prometheus exporter for WireGuard, written in Rust
 */
export const prometheus_wireguard_exporter = mkPackage(
  nixRaw`pkgs.prometheus-wireguard-exporter`,
  "A Prometheus exporter for WireGuard, written in Rust",
);

/**
 * XMPP Web hook for Prometheus
 */
export const prometheus_xmpp_alerts = mkPackage(
  nixRaw`pkgs.prometheus-xmpp-alerts`,
  "XMPP Web hook for Prometheus",
);

/**
 * ZFS Exporter for the Prometheus monitoring system
 */
export const prometheus_zfs_exporter = mkPackage(
  nixRaw`pkgs.prometheus-zfs-exporter`,
  "ZFS Exporter for the Prometheus monitoring system",
);

/**
 * A simple tool to explore prometheus exporter metrics
 */
export const promexplorer = mkPackage(
  nixRaw`pkgs.promexplorer`,
  "A simple tool to explore prometheus exporter metrics",
);

/**
 * Command-line tool to query a Prometheus server with PromQL and visualize the output
 */
export const promql_cli = mkPackage(
  nixRaw`pkgs.promql-cli`,
  "Command-line tool to query a Prometheus server with PromQL and visualize the output",
);

/**
 * An open-source analytical platform for Prometheus metrics
 */
export const promscale = mkPackage(
  nixRaw`pkgs.promscale`,
  "An open-source analytical platform for Prometheus metrics",
);

/**
 * Like Prometheus, but for logs
 */
export const promtail = mkPackage(
  nixRaw`pkgs.promtail`,
  "Like Prometheus, but for logs",
);

/**
 * A program for proof-tree visualization
 */
export const prooftree = mkPackage(
  nixRaw`pkgs.prooftree`,
  "A program for proof-tree visualization",
);

/**
 * User-space implementation of chroot, mount --bind and binfmt_misc
 */
export const proot = mkPackage(
  nixRaw`pkgs.proot`,
  "User-space implementation of chroot, mount --bind and binfmt_misc",
);

/**
 * A very simple convenience library for handling properties and signals in C++11
 */
export const properties_cpp = mkPackage(
  nixRaw`pkgs.properties-cpp`,
  "A very simple convenience library for handling properties and signals in C++11",
);

/**
 * A linter for prose
 */
export const proselint = mkPackage(
  nixRaw`pkgs.proselint`,
  "A linter for prose",
);

/**
 * Open-source XMPP application server written in Lua
 */
export const prosody = mkPackage(
  nixRaw`pkgs.prosody`,
  "Open-source XMPP application server written in Lua",
);

/**
 * A simple file server for handling XMPP http_upload requests
 */
export const prosody_filer = mkPackage(
  nixRaw`pkgs.prosody-filer`,
  "A simple file server for handling XMPP http_upload requests",
);

/**
 * Tool to analyse Python code and output information about errors, potential problems, convention violations and complexity
 */
export const prospector = mkPackage(
  nixRaw`pkgs.prospector`,
  "Tool to analyse Python code and output information about errors, potential problems, convention violations and complexity",
);

/**
 * The OWL2 ontology editor from Stanford, with third-party plugins included
 */
export const protege_distribution = mkPackage(
  nixRaw`pkgs.protege-distribution`,
  "The OWL2 ontology editor from Stanford, with third-party plugins included",
);

/**
 * Guitar amp and pedal capture plugin using neural networks
 */
export const proteus = mkPackage(
  nixRaw`pkgs.proteus`,
  "Guitar amp and pedal capture plugin using neural networks",
);

/**
 * Contributed tools and other packages on top of the Go proto package
 */
export const proto_contrib = mkPackage(
  nixRaw`pkgs.proto-contrib`,
  "Contributed tools and other packages on top of the Go proto package",
);

/**
 * Google's data interchange format
 */
export const protobuf = mkPackage(
  nixRaw`pkgs.protobuf`,
  "Google's data interchange format",
);

/**
 * Google's data interchange format
 */
export const protobuf3_20 = mkPackage(
  nixRaw`pkgs.protobuf3_20`,
  "Google's data interchange format",
);

/**
 * Google's data interchange format
 */
export const protobuf3_21 = mkPackage(
  nixRaw`pkgs.protobuf3_21`,
  "Google's data interchange format",
);

/**
 * Google's data interchange format
 */
export const protobuf3_23 = mkPackage(
  nixRaw`pkgs.protobuf3_23`,
  "Google's data interchange format",
);

/**
 * Google's data interchange format
 */
export const protobuf3_24 = mkPackage(
  nixRaw`pkgs.protobuf3_24`,
  "Google's data interchange format",
);

/**
 * C bindings for Google's Protocol Buffers
 */
export const protobufc = mkPackage(
  nixRaw`pkgs.protobufc`,
  "C bindings for Google's Protocol Buffers",
);

/**
 * Simple, reliable, interoperable, better gRPC
 */
export const protoc_gen_connect_go = mkPackage(
  nixRaw`pkgs.protoc-gen-connect-go`,
  "Simple, reliable, interoperable, better gRPC",
);

/**
 * Protobuf plugin for generating Dart code
 */
export const protoc_gen_dart = mkPackage(
  nixRaw`pkgs.protoc-gen-dart`,
  "Protobuf plugin for generating Dart code",
);

/**
 * Documentation generator plugin for Google Protocol Buffers
 */
export const protoc_gen_doc = mkPackage(
  nixRaw`pkgs.protoc-gen-doc`,
  "Documentation generator plugin for Google Protocol Buffers",
);

/**
 * Generator of an implementation of the service interface for ent protobuff
 */
export const protoc_gen_entgrpc = mkPackage(
  nixRaw`pkgs.protoc-gen-entgrpc`,
  "Generator of an implementation of the service interface for ent protobuff",
);

/**
 * Go support for Google's protocol buffers
 */
export const protoc_gen_go = mkPackage(
  nixRaw`pkgs.protoc-gen-go`,
  "Go support for Google's protocol buffers",
);

/**
 * The Go language implementation of gRPC. HTTP/2 based RPC
 */
export const protoc_gen_go_grpc = mkPackage(
  nixRaw`pkgs.protoc-gen-go-grpc`,
  "The Go language implementation of gRPC. HTTP/2 based RPC",
);

/**
 * A Protocol Buffers compiler that generates optimized marshaling & unmarshaling Go code for ProtoBuf APIv2
 */
export const protoc_gen_go_vtproto = mkPackage(
  nixRaw`pkgs.protoc-gen-go-vtproto`,
  "A Protocol Buffers compiler that generates optimized marshaling & unmarshaling Go code for ProtoBuf APIv2",
);

/**
 * gRPC web support for Google's protocol buffers
 */
export const protoc_gen_grpc_web = mkPackage(
  nixRaw`pkgs.protoc-gen-grpc-web`,
  "gRPC web support for Google's protocol buffers",
);

/**
 * Protocol Buffers compiler plugin powered by Prost
 */
export const protoc_gen_prost = mkPackage(
  nixRaw`pkgs.protoc-gen-prost`,
  "Protocol Buffers compiler plugin powered by Prost",
);

/**
 * A protoc plugin that generates Cargo crates and include files for `protoc-gen-prost`
 */
export const protoc_gen_prost_crate = mkPackage(
  nixRaw`pkgs.protoc-gen-prost-crate`,
  "A protoc plugin that generates Cargo crates and include files for `protoc-gen-prost`",
);

/**
 * A protoc plugin that generates serde serialization implementations for `protoc-gen-prost`
 */
export const protoc_gen_prost_serde = mkPackage(
  nixRaw`pkgs.protoc-gen-prost-serde`,
  "A protoc plugin that generates serde serialization implementations for `protoc-gen-prost`",
);

/**
 * Protobuf plugin for generating Rust code
 */
export const protoc_gen_rust = mkPackage(
  nixRaw`pkgs.protoc-gen-rust`,
  "Protobuf plugin for generating Rust code",
);

/**
 * A protoc plugin that generates Tonic gRPC server and client code using the Prost code generation engine
 */
export const protoc_gen_tonic = mkPackage(
  nixRaw`pkgs.protoc-gen-tonic`,
  "A protoc plugin that generates Tonic gRPC server and client code using the Prost code generation engine",
);

/**
 * A simple RPC framework with protobuf service definitions
 */
export const protoc_gen_twirp = mkPackage(
  nixRaw`pkgs.protoc-gen-twirp`,
  "A simple RPC framework with protobuf service definitions",
);

/**
 * PHP port of Twitch's Twirp RPC framework
 */
export const protoc_gen_twirp_php = mkPackage(
  nixRaw`pkgs.protoc-gen-twirp_php`,
  "PHP port of Twitch's Twirp RPC framework",
);

/**
 * Swagger generator for twirp
 */
export const protoc_gen_twirp_swagger = mkPackage(
  nixRaw`pkgs.protoc-gen-twirp_swagger`,
  "Swagger generator for twirp",
);

/**
 * Protobuf Plugin for Generating a Twirp Typescript Client
 */
export const protoc_gen_twirp_typescript = mkPackage(
  nixRaw`pkgs.protoc-gen-twirp_typescript`,
  "Protobuf Plugin for Generating a Twirp Typescript Client",
);

/**
 * Protobuf plugin for generating polyglot message validators
 */
export const protoc_gen_validate = mkPackage(
  nixRaw`pkgs.protoc-gen-validate`,
  "Protobuf plugin for generating polyglot message validators",
);

/**
 * ASCII Header Generator for Network Protocols
 */
export const protocol = mkPackage(
  nixRaw`pkgs.protocol`,
  "ASCII Header Generator for Network Protocols",
);

/**
 * A pluggable linter and fixer to enforce Protocol Buffer style and conventions
 */
export const protolint = mkPackage(
  nixRaw`pkgs.protolint`,
  "A pluggable linter and fixer to enforce Protocol Buffer style and conventions",
);

/**
 * Protocol Buffer companion tool. Track your .proto files and prevent changes to messages and services which impact API compatibility. https://protolock.dev
 */
export const protolock = mkPackage(
  nixRaw`pkgs.protolock`,
  "Protocol Buffer companion tool. Track your .proto files and prevent changes to messages and services which impact API compatibility. https://protolock.dev",
);

/**
 * Run Windows programs with Proton
 */
export const proton_caller = mkPackage(
  nixRaw`pkgs.proton-caller`,
  "Run Windows programs with Proton",
);

/**
 * Use your ProtonMail account with your local e-mail client
 */
export const protonmail_bridge = mkPackage(
  nixRaw`pkgs.protonmail-bridge`,
  "Use your ProtonMail account with your local e-mail client",
);

/**
 * A simple wrapper for running Winetricks commands for Proton-enabled games
 */
export const protontricks = mkPackage(
  nixRaw`pkgs.protontricks`,
  "A simple wrapper for running Winetricks commands for Proton-enabled games",
);

/**
 * CLI program and API to automate the installation and update of GloriousEggroll's Proton-GE
 */
export const protonup_ng = mkPackage(
  nixRaw`pkgs.protonup-ng`,
  "CLI program and API to automate the installation and update of GloriousEggroll's Proton-GE",
);

/**
 * Install and manage Proton-GE and Luxtorpeda for Steam and Wine-GE for Lutris with this graphical user interface.
 */
export const protonup_qt = mkPackage(
  nixRaw`pkgs.protonup-qt`,
  "Install and manage Proton-GE and Luxtorpeda for Steam and Wine-GE for Lutris with this graphical user interface.",
);

/**
 * Linux command-line client for ProtonVPN
 */
export const protonvpn_cli = mkPackage(
  nixRaw`pkgs.protonvpn-cli`,
  "Linux command-line client for ProtonVPN",
);

/**
 * Linux command-line client for ProtonVPN using Openvpn
 */
export const protonvpn_cli_2 = mkPackage(
  nixRaw`pkgs.protonvpn-cli_2`,
  "Linux command-line client for ProtonVPN using Openvpn",
);

/**
 * Official ProtonVPN Linux app
 */
export const protonvpn_gui = mkPackage(
  nixRaw`pkgs.protonvpn-gui`,
  "Official ProtonVPN Linux app",
);

/**
 * Simple, human-editable language for representing and emitting the Protobuf wire format
 */
export const protoscope = mkPackage(
  nixRaw`pkgs.protoscope`,
  "Simple, human-editable language for representing and emitting the Protobuf wire format",
);

/**
 * Your Swiss Army Knife for Protocol Buffers
 */
export const prototool = mkPackage(
  nixRaw`pkgs.prototool`,
  "Your Swiss Army Knife for Protocol Buffers",
);

/**
 * A foundation for ambitious web user interfaces
 */
export const prototypejs = mkPackage(
  nixRaw`pkgs.prototypejs`,
  "A foundation for ambitious web user interfaces",
);

/**
 * A rust implementation of the protobuf compiler
 */
export const protox = mkPackage(
  nixRaw`pkgs.protox`,
  "A rust implementation of the protobuf compiler",
);

/**
 * Minimalistic protocol buffer decoder and encoder in C++
 */
export const protozero = mkPackage(
  nixRaw`pkgs.protozero`,
  "Minimalistic protocol buffer decoder and encoder in C++",
);

/**
 * Automated theorem prover for first-order and equational logic
 */
export const prover9 = mkPackage(
  nixRaw`pkgs.prover9`,
  "Automated theorem prover for first-order and equational logic",
);

/**
 * Cryptographic protocol verifier in the formal model
 */
export const proverif = mkPackage(
  nixRaw`pkgs.proverif`,
  "Cryptographic protocol verifier in the formal model",
);

/**
 * A Kubernetes based CI/CD system
 */
export const prow = mkPackage(
  nixRaw`pkgs.prow`,
  "A Kubernetes based CI/CD system",
);

/**
 * An indexer manager/proxy built on the popular arr .net/reactjs base stack
 */
export const prowlarr = mkPackage(
  nixRaw`pkgs.prowlarr`,
  "An indexer manager/proxy built on the popular arr .net/reactjs base stack",
);

/**
 * A process runner for Procfile-based applications 
 */
export const prox = mkPackage(
  nixRaw`pkgs.prox`,
  "A process runner for Procfile-based applications ",
);

/**
 * Proxy tool for HTTP/HTTPS traffic capture
 */
export const proxify = mkPackage(
  nixRaw`pkgs.proxify`,
  "Proxy tool for HTTP/HTTPS traffic capture",
);

/**
 * Simple command-line utility for sorting inputs by proximity to a path argument
 */
export const proximity_sort = mkPackage(
  nixRaw`pkgs.proximity-sort`,
  "Simple command-line utility for sorting inputs by proximity to a path argument",
);

/**
 * Client for proxmark3, powerful general purpose RFID tool
 */
export const proxmark3 = mkPackage(
  nixRaw`pkgs.proxmark3`,
  "Client for proxmark3, powerful general purpose RFID tool",
);

/**
 * The Proxmox VM migrator: migrates VMs between different Proxmox VE clusters
 */
export const proxmove = mkPackage(
  nixRaw`pkgs.proxmove`,
  "The Proxmox VM migrator: migrates VMs between different Proxmox VE clusters",
);

/**
 * The command line client for Proxmox Backup Server
 */
export const proxmox_backup_client = mkPackage(
  nixRaw`pkgs.proxmox-backup-client`,
  "The command line client for Proxmox Backup Server",
);

/**
 * Proxifier for SOCKS proxies
 */
export const proxychains = mkPackage(
  nixRaw`pkgs.proxychains`,
  "Proxifier for SOCKS proxies",
);

/**
 * A preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies
 */
export const proxychains_ng = mkPackage(
  nixRaw`pkgs.proxychains-ng`,
  "A preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies",
);

/**
 * High-performance MySQL proxy
 */
export const proxysql = mkPackage(
  nixRaw`pkgs.proxysql`,
  "High-performance MySQL proxy",
);

/**
 * Takes text from standard input and outputs it to a desktop-widget on Wayland desktops.
 */
export const proycon_wayout = mkPackage(
  nixRaw`pkgs.proycon-wayout`,
  "Takes text from standard input and outputs it to a desktop-widget on Wayland desktops.",
);

/**
 * A CLI for the PRQL compiler - a simple, powerful, pipelined SQL replacement
 */
export const prqlc = mkPackage(
  nixRaw`pkgs.prqlc`,
  "A CLI for the PRQL compiler - a simple, powerful, pipelined SQL replacement",
);

/**
 * Secure, fast & convenient password manager CLI using GPG and git to sync
 */
export const prs = mkPackage(
  nixRaw`pkgs.prs`,
  "Secure, fast & convenient password manager CLI using GPG and git to sync",
);

/**
 * Pipeable Ruby
 */
export const pru = mkPackage(
  nixRaw`pkgs.pru`,
  "Pipeable Ruby",
);

export const pruneLibtoolFiles = mkPackage(
  nixRaw`pkgs.pruneLibtoolFiles`,
  "",
);

/**
 * G-code generator for 3D printer
 */
export const prusa_slicer = mkPackage(
  nixRaw`pkgs.prusa-slicer`,
  "G-code generator for 3D printer",
);

/**
 * A Ruby runtime developer console and IRB alternative
 */
export const pry = mkPackage(
  nixRaw`pkgs.pry`,
  "A Ruby runtime developer console and IRB alternative",
);

export const ps = mkPackage(
  nixRaw`pkgs.ps`,
  "",
);

/**
 * Desktop clients to interact with ps2link and ps2netfs
 */
export const ps2client = mkPackage(
  nixRaw`pkgs.ps2client`,
  "Desktop clients to interact with ps2link and ps2netfs",
);

/**
 * Calculate correct bounding boxes for PostScript and PDF files
 */
export const ps2eps = mkPackage(
  nixRaw`pkgs.ps2eps`,
  "Calculate correct bounding boxes for PostScript and PDF files",
);

/**
 * A handy utility to make decrypted PS3 disc dumps
 */
export const ps3_disc_dumper = mkPackage(
  nixRaw`pkgs.ps3-disc-dumper`,
  "A handy utility to make decrypted PS3 disc dumps",
);

/**
 * Estwald's PS3ISO utilities
 */
export const ps3iso_utils = mkPackage(
  nixRaw`pkgs.ps3iso-utils`,
  "Estwald's PS3ISO utilities",
);

/**
 * PS3 Net Server (mod by aldostools)
 */
export const ps3netsrv = mkPackage(
  nixRaw`pkgs.ps3netsrv`,
  "PS3 Net Server (mod by aldostools)",
);

/**
 * A utility to accurately report the in core memory usage for a program
 */
export const ps_mem = mkPackage(
  nixRaw`pkgs.ps_mem`,
  "A utility to accurately report the in core memory usage for a program",
);

/**
 * A package manager for PureScript based on package sets
 */
export const psc_package = mkPackage(
  nixRaw`pkgs.psc-package`,
  "A package manager for PureScript based on package sets",
);

/**
 * The CLI for PlanetScale Database
 */
export const pscale = mkPackage(
  nixRaw`pkgs.pscale`,
  "The CLI for PlanetScale Database",
);

/**
 * A lightweight editor experience for PureScript development
 */
export const pscid = mkPackage(
  nixRaw`pkgs.pscid`,
  "A lightweight editor experience for PureScript development",
);

/**
 * Visualize Linux processes in a form of a radial tree
 */
export const pscircle = mkPackage(
  nixRaw`pkgs.pscircle`,
  "Visualize Linux processes in a form of a radial tree",
);

/**
 * Graphical hardware monitoring application for Linux
 */
export const psensor = mkPackage(
  nixRaw`pkgs.psensor`,
  "Graphical hardware monitoring application for Linux",
);

/**
 * Conversion tools for .PSF fonts
 */
export const psftools = mkPackage(
  nixRaw`pkgs.psftools`,
  "Conversion tools for .PSF fonts",
);

/**
 * Pretty small HTTP server - a command-line tool to share files
 */
export const pshs = mkPackage(
  nixRaw`pkgs.pshs`,
  "Pretty small HTTP server - a command-line tool to share files",
);

/**
 * An XMPP (Jabber) client
 */
export const psi = mkPackage(
  nixRaw`pkgs.psi`,
  "An XMPP (Jabber) client",
);

/**
 * Alert on system resource saturation
 */
export const psi_notify = mkPackage(
  nixRaw`pkgs.psi-notify`,
  "Alert on system resource saturation",
);

/**
 * XMPP (Jabber) client based on Qt5
 */
export const psi_plus = mkPackage(
  nixRaw`pkgs.psi-plus`,
  "XMPP (Jabber) client based on Qt5",
);

/**
 * Top for /proc/pressure
 */
export const psitop = mkPackage(
  nixRaw`pkgs.psitop`,
  "Top for /proc/pressure",
);

/**
 * Simple open source self-hosted file sharing solution
 */
export const psitransfer = mkPackage(
  nixRaw`pkgs.psitransfer`,
  "Simple open source self-hosted file sharing solution",
);

/**
 * A C-library for generating multi page PostScript documents
 */
export const pslib = mkPackage(
  nixRaw`pkgs.pslib`,
  "A C-library for generating multi page PostScript documents",
);

/**
 * A set of small useful utilities that use the proc filesystem (such as fuser, killall and pstree)
 */
export const psmisc = mkPackage(
  nixRaw`pkgs.psmisc`,
  "A set of small useful utilities that use the proc filesystem (such as fuser, killall and pstree)",
);

/**
 * PageSpeed Optimization Libraries
 */
export const psol = mkPackage(
  nixRaw`pkgs.psol`,
  "PageSpeed Optimization Libraries",
);

/**
 * Postgres Pager
 */
export const pspg = mkPackage(
  nixRaw`pkgs.pspg`,
  "Postgres Pager",
);

/**
 * A free replacement for SPSS, a program for statistical analysis of sampled data
 */
export const pspp = mkPackage(
  nixRaw`pkgs.pspp`,
  "A free replacement for SPSS, a program for statistical analysis of sampled data",
);

/**
 * Tool to run a PostreSQL query and output the result as CSV
 */
export const psql2csv = mkPackage(
  nixRaw`pkgs.psql2csv`,
  "Tool to run a PostreSQL query and output the result as CSV",
);

/**
 * ODBC driver for PostgreSQL
 */
export const psqlodbc = mkPackage(
  nixRaw`pkgs.psqlodbc`,
  "ODBC driver for PostgreSQL",
);

/**
 * Record the CPU and memory activity of a process
 */
export const psrecord = mkPackage(
  nixRaw`pkgs.psrecord`,
  "Record the CPU and memory activity of a process",
);

/**
 * Parallel SSH Tools
 */
export const pssh = mkPackage(
  nixRaw`pkgs.pssh`,
  "Parallel SSH Tools",
);

/**
 * Fast and multi-platform Spotify client with native GUI
 */
export const psst = mkPackage(
  nixRaw`pkgs.psst`,
  "Fast and multi-platform Spotify client with native GUI",
);

/**
 * Show processes' memory usage by looking into pss
 */
export const psstop = mkPackage(
  nixRaw`pkgs.psstop`,
  "Show processes' memory usage by looking into pss",
);

/**
 * Translates PostScript and PDF graphics into other vector formats
 */
export const pstoedit = mkPackage(
  nixRaw`pkgs.pstoedit`,
  "Translates PostScript and PDF graphics into other vector formats",
);

/**
 * POSIX Process Control in C++
 */
export const pstreams = mkPackage(
  nixRaw`pkgs.pstreams`,
  "POSIX Process Control in C++",
);

/**
 * Show the set of running processes as a tree
 */
export const pstree = mkPackage(
  nixRaw`pkgs.pstree`,
  "Show the set of running processes as a tree",
);

/**
 * Password list generator for orchestrating brute force attacks and cracking hashes
 */
export const psudohash = mkPackage(
  nixRaw`pkgs.psudohash`,
  "Password list generator for orchestrating brute force attacks and cracking hashes",
);

/**
 * Collection of useful utilities for manipulating PS documents
 */
export const psutils = mkPackage(
  nixRaw`pkgs.psutils`,
  "Collection of useful utilities for manipulating PS documents",
);

/**
 * A command line tool to write random bytes to stdout
 */
export const psw = mkPackage(
  nixRaw`pkgs.psw`,
  "A command line tool to write random bytes to stdout",
);

/**
 * Minimalist command-line Pivotal Tracker client
 */
export const pt = mkPackage(
  nixRaw`pkgs.pt`,
  "Minimalist command-line Pivotal Tracker client",
);

/**
 * A highly accurate clone of the classic ProTracker 2.3D software for Amiga
 */
export const pt2_clone = mkPackage(
  nixRaw`pkgs.pt2-clone`,
  "A highly accurate clone of the classic ProTracker 2.3D software for Amiga",
);

/**
 * A parallel universal-ctags wrapper for git repository
 */
export const ptags = mkPackage(
  nixRaw`pkgs.ptags`,
  "A parallel universal-ctags wrapper for git repository",
);

/**
 * GTK-based GUI for taskwarrior
 */
export const ptask = mkPackage(
  nixRaw`pkgs.ptask`,
  "GTK-based GUI for taskwarrior",
);

/**
 * Experimental pxtone editor where you can collaborate with friends
 */
export const ptcollab = mkPackage(
  nixRaw`pkgs.ptcollab`,
  "Experimental pxtone editor where you can collaborate with friends",
);

/**
 * Per-Face Texture Mapping for Production Rendering
 */
export const ptex = mkPackage(
  nixRaw`pkgs.ptex`,
  "Per-Face Texture Mapping for Production Rendering",
);

/**
 * The GNU Portable Threads library
 */
export const pth = mkPackage(
  nixRaw`pkgs.pth`,
  "The GNU Portable Threads library",
);

/**
 * Command line tool to print labels on Brother P-Touch printers on Linux
 */
export const ptouch_print = mkPackage(
  nixRaw`pkgs.ptouch-print`,
  "Command line tool to print labels on Brother P-Touch printers on Linux",
);

export const public_inbox = mkPackage(
  nixRaw`pkgs.public-inbox`,
  "",
);

/**
 * A strong, neutral, principles-driven, open source typeface for text or display
 */
export const public_sans = mkPackage(
  nixRaw`pkgs.public-sans`,
  "A strong, neutral, principles-driven, open source typeface for text or display",
);

/**
 * Cross-vendor public domain suffix database
 */
export const publicsuffix_list = mkPackage(
  nixRaw`pkgs.publicsuffix-list`,
  "Cross-vendor public domain suffix database",
);

/**
 * Static Site CMS with GUI to build privacy-focused SEO-friendly website.
 */
export const publii = mkPackage(
  nixRaw`pkgs.publii`,
  "Static Site CMS with GUI to build privacy-focused SEO-friendly website.",
);

/**
 * Command-line bibliography manager
 */
export const pubs = mkPackage(
  nixRaw`pkgs.pubs`,
  "Command-line bibliography manager",
);

/**
 * An audio tag editor similar to the Windows program, Mp3tag
 */
export const puddletag = mkPackage(
  nixRaw`pkgs.puddletag`,
  "An audio tag editor similar to the Windows program, Mp3tag",
);

/**
 * A daemon for managing long running shell commands
 */
export const pueue = mkPackage(
  nixRaw`pkgs.pueue`,
  "A daemon for managing long running shell commands",
);

/**
 * A free, open source game management panel
 */
export const pufferpanel = mkPackage(
  nixRaw`pkgs.pufferpanel`,
  "A free, open source game management panel",
);

/**
 * Light-weight, simple and fast XML parser for C++ with XPath support
 */
export const pugixml = mkPackage(
  nixRaw`pkgs.pugixml`,
  "Light-weight, simple and fast XML parser for C++ with XPath support",
);

/**
 * A pull parser for CommonMark written in Rust
 */
export const pulldown_cmark = mkPackage(
  nixRaw`pkgs.pulldown-cmark`,
  "A pull parser for CommonMark written in Rust",
);

/**
 * A build system for PureScript projects
 */
export const pulp = mkPackage(
  nixRaw`pkgs.pulp`,
  "A build system for PureScript projects",
);

/**
 * A Community-led Hyper-Hackable Text Editor
 */
export const pulsar = mkPackage(
  nixRaw`pkgs.pulsar`,
  "A Community-led Hyper-Hackable Text Editor",
);

/**
 *  a CLI for Apache Pulsar written in Go
 */
export const pulsarctl = mkPackage(
  nixRaw`pkgs.pulsarctl`,
  " a CLI for Apache Pulsar written in Go",
);

/**
 * Sound server for POSIX and Win32 systems
 */
export const pulseaudio = mkPackage(
  nixRaw`pkgs.pulseaudio`,
  "Sound server for POSIX and Win32 systems",
);

/**
 * Sound server for POSIX and Win32 systems
 */
export const pulseaudioFull = mkPackage(
  nixRaw`pkgs.pulseaudioFull`,
  "Sound server for POSIX and Win32 systems",
);

/**
 * Control pulseaudio volume from the shell or mapped to keyboard shortcuts. No need for alsa-utils
 */
export const pulseaudio_ctl = mkPackage(
  nixRaw`pkgs.pulseaudio-ctl`,
  "Control pulseaudio volume from the shell or mapped to keyboard shortcuts. No need for alsa-utils",
);

/**
 * A lightweight streaming server which brings DLNA / UPNP and Chromecast support to PulseAudio and Linux
 */
export const pulseaudio_dlna = mkPackage(
  nixRaw`pkgs.pulseaudio-dlna`,
  "A lightweight streaming server which brings DLNA / UPNP and Chromecast support to PulseAudio and Linux",
);

/**
 * Limiter, compressor, reverberation, equalizer and auto volume effects for Pulseaudio applications
 */
export const pulseeffects_legacy = mkPackage(
  nixRaw`pkgs.pulseeffects-legacy`,
  "Limiter, compressor, reverberation, equalizer and auto volume effects for Pulseaudio applications",
);

/**
 * Cli and curses mixer for pulseaudio
 */
export const pulsemixer = mkPackage(
  nixRaw`pkgs.pulsemixer`,
  "Cli and curses mixer for pulseaudio",
);

/**
 * Qt-based LA/scope/MSO GUI for sigrok (a signal analysis software suite)
 */
export const pulseview = mkPackage(
  nixRaw`pkgs.pulseview`,
  "Qt-based LA/scope/MSO GUI for sigrok (a signal analysis software suite)",
);

/**
 * Pulumi is a cloud development platform that makes creating cloud programs easy and productive
 */
export const pulumi = mkPackage(
  nixRaw`pkgs.pulumi`,
  "Pulumi is a cloud development platform that makes creating cloud programs easy and productive",
);

/**
 * Pulumi is a cloud development platform that makes creating cloud programs easy and productive
 */
export const pulumi_bin = mkPackage(
  nixRaw`pkgs.pulumi-bin`,
  "Pulumi is a cloud development platform that makes creating cloud programs easy and productive",
);

/**
 * Swiss Army Knife for Pulumi Development
 */
export const pulumictl = mkPackage(
  nixRaw`pkgs.pulumictl`,
  "Swiss Army Knife for Pulumi Development",
);

/**
 * Qt-based Nintendo Entertainment System emulator and NSF/NSFe Music Player
 */
export const punes = mkPackage(
  nixRaw`pkgs.punes`,
  "Qt-based Nintendo Entertainment System emulator and NSF/NSFe Music Player",
);

/**
 * Qt-based Nintendo Entertainment System emulator and NSF/NSFe Music Player
 */
export const punes_qt6 = mkPackage(
  nixRaw`pkgs.punes-qt6`,
  "Qt-based Nintendo Entertainment System emulator and NSF/NSFe Music Player",
);

/**
 * Parsing HTML at the command line
 */
export const pup = mkPackage(
  nixRaw`pkgs.pup`,
  "Parsing HTML at the command line",
);

/**
 * Execute commands remotely over SSH and WinRM
 */
export const puppet_bolt = mkPackage(
  nixRaw`pkgs.puppet-bolt`,
  "Execute commands remotely over SSH and WinRM",
);

export const puppet_lint = mkPackage(
  nixRaw`pkgs.puppet-lint`,
  "",
);

/**
 * Command-line wrapper for generating PDF prints and PNG screenshots with Puppeteer
 */
export const puppeteer_cli = mkPackage(
  nixRaw`pkgs.puppeteer-cli`,
  "Command-line wrapper for generating PDF prints and PNG screenshots with Puppeteer",
);

/**
 * Python library for update and track the requirements
 */
export const pur = mkPackage(
  nixRaw`pkgs.pur`,
  "Python library for update and track the requirements",
);

/**
 * A free, secure, production-quality and standard-conformant FTP server
 */
export const pure_ftpd = mkPackage(
  nixRaw`pkgs.pure-ftpd`,
  "A free, secure, production-quality and standard-conformant FTP server",
);

/**
 * Display vector and raster maps, places, routes, and provide navigation instructions with a flexible selection of data and service providers
 */
export const pure_maps = mkPackage(
  nixRaw`pkgs.pure-maps`,
  "Display vector and raster maps, places, routes, and provide navigation instructions with a flexible selection of data and service providers",
);

/**
 * Pretty, minimal and fast ZSH prompt
 */
export const pure_prompt = mkPackage(
  nixRaw`pkgs.pure-prompt`,
  "Pretty, minimal and fast ZSH prompt",
);

/**
 * A real-time graphical programming environment for
            audio, video, and graphical processing
 */
export const puredata = mkPackage(
  nixRaw`pkgs.puredata`,
  "A real-time graphical programming environment for\n                    audio, video, and graphical processing",
);

/**
 * Set of externals to facilitate the use of sensors within Pure Data and to create complex relations between input and output of a dynamic system
 */
export const puremapping = mkPackage(
  nixRaw`pkgs.puremapping`,
  "Set of externals to facilitate the use of sensors within Pure Data and to create complex relations between input and output of a dynamic system",
);

/**
 * Nix backend for PureScript. Transpile PureScript code to Nix.
 */
export const purenix = mkPackage(
  nixRaw`pkgs.purenix`,
  "Nix backend for PureScript. Transpile PureScript code to Nix.",
);

/**
 * Reference Image Viewer
 */
export const pureref = mkPackage(
  nixRaw`pkgs.pureref`,
  "Reference Image Viewer",
);

/**
 * A strongly-typed functional programming language that compiles to JavaScript
 */
export const purescript = mkPackage(
  nixRaw`pkgs.purescript`,
  "A strongly-typed functional programming language that compiles to JavaScript",
);

/**
 * Error/Warning reporting frontend for psc
 */
export const purescript_psa = mkPackage(
  nixRaw`pkgs.purescript-psa`,
  "Error/Warning reporting frontend for psc",
);

/**
 * A drop-in replacement for Minecraft Paper servers
 */
export const purpur = mkPackage(
  nixRaw`pkgs.purpur`,
  "A drop-in replacement for Minecraft Paper servers",
);

/**
 * A Free Telnet/SSH Client
 */
export const putty = mkPackage(
  nixRaw`pkgs.putty`,
  "A Free Telnet/SSH Client",
);

/**
 * Tool for monitoring the progress of data through a pipeline
 */
export const pv = mkPackage(
  nixRaw`pkgs.pv`,
  "Tool for monitoring the progress of data through a pipeline",
);

/**
 * CLI tool to easily migrate Kubernetes persistent volumes 
 */
export const pv_migrate = mkPackage(
  nixRaw`pkgs.pv-migrate`,
  "CLI tool to easily migrate Kubernetes persistent volumes ",
);

/**
 * A simple and elegant pipewire graph editor 
 */
export const pw_viz = mkPackage(
  nixRaw`pkgs.pw-viz`,
  "A simple and elegant pipewire graph editor ",
);

/**
 * Basic interface to PipeWire volume controls
 */
export const pw_volume = mkPackage(
  nixRaw`pkgs.pw-volume`,
  "Basic interface to PipeWire volume controls",
);

/**
 * Command line tool checking password safety
 */
export const pwdsafety = mkPackage(
  nixRaw`pkgs.pwdsafety`,
  "Command line tool checking password safety",
);

/**
 * Password generator which creates passwords which can be easily memorized by a human
 */
export const pwgen = mkPackage(
  nixRaw`pkgs.pwgen`,
  "Password generator which creates passwords which can be easily memorized by a human",
);

/**
 * Secure password generation library to replace pwgen
 */
export const pwgen_secure = mkPackage(
  nixRaw`pkgs.pwgen-secure`,
  "Secure password generation library to replace pwgen",
);

/**
 * ICMP NAT to NAT client-server communication
 */
export const pwnat = mkPackage(
  nixRaw`pkgs.pwnat`,
  "ICMP NAT to NAT client-server communication",
);

/**
 * TCP/UDP communication suite
 */
export const pwncat = mkPackage(
  nixRaw`pkgs.pwncat`,
  "TCP/UDP communication suite",
);

/**
 * Exploit Development and Reverse Engineering with GDB Made Easy
 */
export const pwndbg = mkPackage(
  nixRaw`pkgs.pwndbg`,
  "Exploit Development and Reverse Engineering with GDB Made Easy",
);

/**
 * Automate starting binary exploit challenges
 */
export const pwninit = mkPackage(
  nixRaw`pkgs.pwninit`,
  "Automate starting binary exploit challenges",
);

/**
 * CTF framework and exploit development library
 */
export const pwntools = mkPackage(
  nixRaw`pkgs.pwntools`,
  "CTF framework and exploit development library",
);

/**
 * Command-line password safe
 */
export const pws = mkPackage(
  nixRaw`pkgs.pws`,
  "Command-line password safe",
);

/**
 * A password database utility
 */
export const pwsafe = mkPackage(
  nixRaw`pkgs.pwsafe`,
  "A password database utility",
);

/**
 * Pipewire Volume Control
 */
export const pwvucontrol = mkPackage(
  nixRaw`pkgs.pwvucontrol`,
  "Pipewire Volume Control",
);

/**
 * Provides a single interface to extended file attributes
 */
export const pxattr = mkPackage(
  nixRaw`pkgs.pxattr`,
  "Provides a single interface to extended file attributes",
);

/**
 * Download illusts from pixiv.net
 */
export const pxder = mkPackage(
  nixRaw`pkgs.pxder`,
  "Download illusts from pixiv.net",
);

/**
 * Library to read and write Paradox files
 */
export const pxlib = mkPackage(
  nixRaw`pkgs.pxlib`,
  "Library to read and write Paradox files",
);

/**
 * Program to convert Paradox databases
 */
export const pxview = mkPackage(
  nixRaw`pkgs.pxview`,
  "Program to convert Paradox databases",
);

/**
 * compression utility that runs LZMA compression of different parts on multiple cores simultaneously
 */
export const pxz = mkPackage(
  nixRaw`pkgs.pxz`,
  "compression utility that runs LZMA compression of different parts on multiple cores simultaneously",
);

/**
 * Python 2/3 compatibility layer for C extensions
 */
export const py3c = mkPackage(
  nixRaw`pkgs.py3c`,
  "Python 2/3 compatibility layer for C extensions",
);

/**
 * Emulate 6502-based microcomputer systems in Python
 */
export const py65 = mkPackage(
  nixRaw`pkgs.py65`,
  "Emulate 6502-based microcomputer systems in Python",
);

/**
 * A fully functional Opencast capture agent written in Python
 */
export const pyCA = mkPackage(
  nixRaw`pkgs.pyCA`,
  "A fully functional Opencast capture agent written in Python",
);

/**
 * Sampling profiler for Python programs
 */
export const py_spy = mkPackage(
  nixRaw`pkgs.py-spy`,
  "Sampling profiler for Python programs",
);

/**
 * Layout C call graphs from cflow using GraphViz dot
 */
export const pycflow2dot = mkPackage(
  nixRaw`pkgs.pycflow2dot`,
  "Layout C call graphs from cflow using GraphViz dot",
);

/**
 * Utilities for Bitcoin and altcoin addresses and transaction manipulation
 */
export const pycoin = mkPackage(
  nixRaw`pkgs.pycoin`,
  "Utilities for Bitcoin and altcoin addresses and transaction manipulation",
);

/**
 * A CLI tool for changing your alacritty configuration on the fly
 */
export const pycritty = mkPackage(
  nixRaw`pkgs.pycritty`,
  "A CLI tool for changing your alacritty configuration on the fly",
);

/**
 * Python module dependency visualization
 */
export const pydeps = mkPackage(
  nixRaw`pkgs.pydeps`,
  "Python module dependency visualization",
);

/**
 * colourised df(1)-clone
 */
export const pydf = mkPackage(
  nixRaw`pkgs.pydf`,
  "colourised df(1)-clone",
);

/**
 * Drop-in replacement for the Ditz distributed issue tracker
 */
export const pyditz = mkPackage(
  nixRaw`pkgs.pyditz`,
  "Drop-in replacement for the Ditz distributed issue tracker",
);

/**
 * Simple Python version management
 */
export const pyenv = mkPackage(
  nixRaw`pkgs.pyenv`,
  "Simple Python version management",
);

/**
 * Python-based infrastructure automation
 */
export const pyinfra = mkPackage(
  nixRaw`pkgs.pyinfra`,
  "Python-based infrastructure automation",
);

/**
 * Windows KMS (Key Management Service) server written in Python
 */
export const pykms = mkPackage(
  nixRaw`pkgs.pykms`,
  "Windows KMS (Key Management Service) server written in Python",
);

/**
 * A bug and style checker for Python
 */
export const pylint = mkPackage(
  nixRaw`pkgs.pylint`,
  "A bug and style checker for Python",
);

/**
 * Utility to handle pylint exit codes in an OS-friendly way
 */
export const pylint_exit = mkPackage(
  nixRaw`pkgs.pylint-exit`,
  "Utility to handle pylint exit codes in an OS-friendly way",
);

/**
 * Free and open-source download manager with support for 1-click-hosting sites
 */
export const pyload_ng = mkPackage(
  nixRaw`pkgs.pyload-ng`,
  "Free and open-source download manager with support for 1-click-hosting sites",
);

/**
 * OWL ontology documentation tool using Python and templating, based on LODE
 */
export const pylode = mkPackage(
  nixRaw`pkgs.pylode`,
  "OWL ontology documentation tool using Python and templating, based on LODE",
);

/**
 * A fast static code analyzer & language server for Python
 */
export const pylyzer = mkPackage(
  nixRaw`pkgs.pylyzer`,
  "A fast static code analyzer & language server for Python",
);

/**
 * A Python-enhanced molecular graphics tool
 */
export const pymol = mkPackage(
  nixRaw`pkgs.pymol`,
  "A Python-enhanced molecular graphics tool",
);

/**
 * Simple yet powerful PDF reader designed for dual-screen presentations
 */
export const pympress = mkPackage(
  nixRaw`pkgs.pympress`,
  "Simple yet powerful PDF reader designed for dual-screen presentations",
);

/**
 * Python is Not a CAS -- modified version of Ginac
 */
export const pynac = mkPackage(
  nixRaw`pkgs.pynac`,
  "Python is Not a CAS -- modified version of Ginac",
);

/**
 * Python client for Nitrokey devices
 */
export const pynitrokey = mkPackage(
  nixRaw`pkgs.pynitrokey`,
  "Python client for Nitrokey devices",
);

/**
 * Python library for programming and debugging Arm Cortex-M microcontrollers
 */
export const pyocd = mkPackage(
  nixRaw`pkgs.pyocd`,
  "Python library for programming and debugging Arm Cortex-M microcontrollers",
);

/**
 * Asynchronous Python 3 Bindings for Qt 5
 */
export const pyotherside = mkPackage(
  nixRaw`pkgs.pyotherside`,
  "Asynchronous Python 3 Bindings for Qt 5",
);

/**
 * Easily run Python at the shell
 */
export const pyp = mkPackage(
  nixRaw`pkgs.pyp`,
  "Easily run Python at the shell",
);

/**
 * Password manager pass in Python
 */
export const pypass = mkPackage(
  nixRaw`pkgs.pypass`,
  "Password manager pass in Python",
);

/**
 * A script to create a partial PyPI mirror
 */
export const pypi_mirror = mkPackage(
  nixRaw`pkgs.pypi-mirror`,
  "A script to create a partial PyPI mirror",
);

/**
 * Minimal PyPI server for use with pip/easy_install
 */
export const pypiserver = mkPackage(
  nixRaw`pkgs.pypiserver`,
  "Minimal PyPI server for use with pip/easy_install",
);

/**
 * Help visualize profiling data from cProfile with kcachegrind and qcachegrind
 */
export const pyprof2calltree = mkPackage(
  nixRaw`pkgs.pyprof2calltree`,
  "Help visualize profiling data from cProfile with kcachegrind and qcachegrind",
);

/**
 * Fast, compliant alternative implementation of the Python language (2.7)
 */
export const pypy = mkPackage(
  nixRaw`pkgs.pypy`,
  "Fast, compliant alternative implementation of the Python language (2.7)",
);

/**
 * Fast, compliant alternative implementation of the Python language (2.7)
 */
export const pypy2 = mkPackage(
  nixRaw`pkgs.pypy2`,
  "Fast, compliant alternative implementation of the Python language (2.7)",
);

/**
 * Fast, compliant alternative implementation of the Python language (2.7)
 */
export const pypy27 = mkPackage(
  nixRaw`pkgs.pypy27`,
  "Fast, compliant alternative implementation of the Python language (2.7)",
);

/**
 * Fast, compliant alternative implementation of the Python language (3.9)
 */
export const pypy3 = mkPackage(
  nixRaw`pkgs.pypy3`,
  "Fast, compliant alternative implementation of the Python language (3.9)",
);

/**
 * Fast, compliant alternative implementation of the Python language (3.10)
 */
export const pypy310 = mkPackage(
  nixRaw`pkgs.pypy310`,
  "Fast, compliant alternative implementation of the Python language (3.10)",
);

/**
 * Fast, compliant alternative implementation of the Python language (3.9)
 */
export const pypy39 = mkPackage(
  nixRaw`pkgs.pypy39`,
  "Fast, compliant alternative implementation of the Python language (3.9)",
);

/**
 * Curses based internet radio player
 */
export const pyradio = mkPackage(
  nixRaw`pkgs.pyradio`,
  "Curses based internet radio player",
);

/**
 * Type checker for the Python language
 */
export const pyright = mkPackage(
  nixRaw`pkgs.pyright`,
  "Type checker for the Python language",
);

/**
 * A rTorrent client
 */
export const pyrosimple = mkPackage(
  nixRaw`pkgs.pyrosimple`,
  "A rTorrent client",
);

/**
 * A declarative language to describe PostgreSQL databases
 */
export const pyrseas = mkPackage(
  nixRaw`pkgs.pyrseas`,
  "A declarative language to describe PostgreSQL databases",
);

/**
 * A CLI for displaying Python presentations
 */
export const pysentation = mkPackage(
  nixRaw`pkgs.pysentation`,
  "A CLI for displaying Python presentations",
);

/**
 * A collection of more than 1000 solitaire card games
 */
export const pysolfc = mkPackage(
  nixRaw`pkgs.pysolfc`,
  "A collection of more than 1000 solitaire card games",
);

/**
 * A Python-oriented spreadsheet application
 */
export const pyspread = mkPackage(
  nixRaw`pkgs.pyspread`,
  "A Python-oriented spreadsheet application",
);

/**
 * A collection of C++ functions which match the interface and behavior of python's string class methods using std::string
 */
export const pystring = mkPackage(
  nixRaw`pkgs.pystring`,
  "A collection of C++ functions which match the interface and behavior of python's string class methods using std::string",
);

/**
 * A program for the generation of high-energy physics events
 */
export const pythia = mkPackage(
  nixRaw`pkgs.pythia`,
  "A program for the generation of high-energy physics events",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python2 = mkPackage(
  nixRaw`pkgs.python2`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python27 = mkPackage(
  nixRaw`pkgs.python27`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python27Full = mkPackage(
  nixRaw`pkgs.python27Full`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python2Full = mkPackage(
  nixRaw`pkgs.python2Full`,
  "A high-level dynamically-typed programming language",
);

export * as python2Packages from "./python2Packages/mod.ts";

/**
 * A high-level dynamically-typed programming language
 */
export const python3 = mkPackage(
  nixRaw`pkgs.python3`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python310 = mkPackage(
  nixRaw`pkgs.python310`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python310Full = mkPackage(
  nixRaw`pkgs.python310Full`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python311 = mkPackage(
  nixRaw`pkgs.python311`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python311Full = mkPackage(
  nixRaw`pkgs.python311Full`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python312 = mkPackage(
  nixRaw`pkgs.python312`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python312Full = mkPackage(
  nixRaw`pkgs.python312Full`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python313 = mkPackage(
  nixRaw`pkgs.python313`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python313Full = mkPackage(
  nixRaw`pkgs.python313Full`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python38 = mkPackage(
  nixRaw`pkgs.python38`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python38Full = mkPackage(
  nixRaw`pkgs.python38Full`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python39 = mkPackage(
  nixRaw`pkgs.python39`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python39Full = mkPackage(
  nixRaw`pkgs.python39Full`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python3Full = mkPackage(
  nixRaw`pkgs.python3Full`,
  "A high-level dynamically-typed programming language",
);

/**
 * A high-level dynamically-typed programming language
 */
export const python3Minimal = mkPackage(
  nixRaw`pkgs.python3Minimal`,
  "A high-level dynamically-typed programming language",
);

export * as python3Packages from "./python3Packages/mod.ts";

/**
 * Actually Portable Python using Cosmopolitan
 */
export const python_cosmopolitan = mkPackage(
  nixRaw`pkgs.python-cosmopolitan`,
  "Actually Portable Python using Cosmopolitan",
);

/**
 * An implementation of the `py` command for Unix-based platforms
 */
export const python_launcher = mkPackage(
  nixRaw`pkgs.python-launcher`,
  "An implementation of the `py` command for Unix-based platforms",
);

/**
 * Python server to interact with Matter
 */
export const python_matter_server = mkPackage(
  nixRaw`pkgs.python-matter-server`,
  "Python server to interact with Matter",
);

/**
 * PythonQt is a dynamic Python binding for the Qt framework. It offers an easy way to embed the Python scripting language into your C++ Qt applications
 */
export const python_qt = mkPackage(
  nixRaw`pkgs.python-qt`,
  "PythonQt is a dynamic Python binding for the Qt framework. It offers an easy way to embed the Python scripting language into your C++ Qt applications",
);

/**
 * Application for logging and graphing sporting excursions
 */
export const pytrainer = mkPackage(
  nixRaw`pkgs.pytrainer`,
  "Application for logging and graphing sporting excursions",
);

/**
 * Tool to automatically upgrade syntax for newer versions of the language
 */
export const pyupgrade = mkPackage(
  nixRaw`pkgs.pyupgrade`,
  "Tool to automatically upgrade syntax for newer versions of the language",
);

/**
 * Generate and change colorschemes on the fly. A 'wal' rewrite in Python 3
 */
export const pywal = mkPackage(
  nixRaw`pkgs.pywal`,
  "Generate and change colorschemes on the fly. A 'wal' rewrite in Python 3",
);

/**
 * ZFS snapshot tool written in python
 */
export const pyznap = mkPackage(
  nixRaw`pkgs.pyznap`,
  "ZFS snapshot tool written in python",
);

/**
 * A fast concurrent zip archiver and extractor
 */
export const pzip = mkPackage(
  nixRaw`pkgs.pzip`,
  "A fast concurrent zip archiver and extractor",
);

/**
 * A tiny and feature-rich command line DNS client with support for UDP, TCP, DoT, DoH, DoQ, and ODoH
 */
export const q = mkPackage(
  nixRaw`pkgs.q`,
  "A tiny and feature-rich command line DNS client with support for UDP, TCP, DoT, DoH, DoQ, and ODoH",
);

/**
 * A Qt GUI for Wine to manage prefixes and applications
 */
export const q4wine = mkPackage(
  nixRaw`pkgs.q4wine`,
  "A Qt GUI for Wine to manage prefixes and applications",
);

/**
 * Cross-platform desktop tool to manage your flipper device
 */
export const qFlipper = mkPackage(
  nixRaw`pkgs.qFlipper`,
  "Cross-platform desktop tool to manage your flipper device",
);

/**
 * Stateless Master Password Manager
 */
export const qMasterPassword = mkPackage(
  nixRaw`pkgs.qMasterPassword`,
  "Stateless Master Password Manager",
);

/**
 * Run SQL directly on CSV or TSV files
 */
export const q_text_as_data = mkPackage(
  nixRaw`pkgs.q-text-as-data`,
  "Run SQL directly on CSV or TSV files",
);

/**
 * The ultimate desktop calculator
 */
export const qalculate_gtk = mkPackage(
  nixRaw`pkgs.qalculate-gtk`,
  "The ultimate desktop calculator",
);

/**
 * The ultimate desktop calculator
 */
export const qalculate_qt = mkPackage(
  nixRaw`pkgs.qalculate-qt`,
  "The ultimate desktop calculator",
);

/**
 * A recorder for Arte TV Guide and Arte Concert
 */
export const qarte = mkPackage(
  nixRaw`pkgs.qarte`,
  "A recorder for Arte TV Guide and Arte Concert",
);

/**
 * Collection of desktop applications for ALSA configuration
 */
export const qastools = mkPackage(
  nixRaw`pkgs.qastools`,
  "Collection of desktop applications for ALSA configuration",
);

/**
 * A small compiler backend written in C
 */
export const qbe = mkPackage(
  nixRaw`pkgs.qbe`,
  "A small compiler backend written in C",
);

/**
 * Configure kubernetes objects on multiple clusters using jsonnet https://qbec.io
 */
export const qbec = mkPackage(
  nixRaw`pkgs.qbec`,
  "Configure kubernetes objects on multiple clusters using jsonnet https://qbec.io",
);

/**
 * Featureful free software BitTorrent client
 */
export const qbittorrent = mkPackage(
  nixRaw`pkgs.qbittorrent`,
  "Featureful free software BitTorrent client",
);

/**
 * Featureful free software BitTorrent client
 */
export const qbittorrent_nox = mkPackage(
  nixRaw`pkgs.qbittorrent-nox`,
  "Featureful free software BitTorrent client",
);

/**
 * A simple x86 firmware for booting Linux
 */
export const qboot = mkPackage(
  nixRaw`pkgs.qboot`,
  "A simple x86 firmware for booting Linux",
);

/**
 * A tool that helps simplify the build process for developing projects across multiple platforms
 */
export const qbs = mkPackage(
  nixRaw`pkgs.qbs`,
  "A tool that helps simplify the build process for developing projects across multiple platforms",
);

/**
 * QOwnNotes command-line snippet manager
 */
export const qc = mkPackage(
  nixRaw`pkgs.qc`,
  "QOwnNotes command-line snippet manager",
);

/**
 * A Qt GUI to visualize profiling data
 */
export const qcachegrind = mkPackage(
  nixRaw`pkgs.qcachegrind`,
  "A Qt GUI to visualize profiling data",
);

/**
 * 2D CAD package based on Qt
 */
export const qcad = mkPackage(
  nixRaw`pkgs.qcad`,
  "2D CAD package based on Qt",
);

/**
 * CLI calendar application for CalDAV servers written in Go
 */
export const qcal = mkPackage(
  nixRaw`pkgs.qcal`,
  "CLI calendar application for CalDAV servers written in Go",
);

/**
 * CLI addressbook application for CardDAV servers written in Go
 */
export const qcard = mkPackage(
  nixRaw`pkgs.qcard`,
  "CLI addressbook application for CardDAV servers written in Go",
);

/**
 * A very fast QCD evolution program written in FORTRAN77
 */
export const qcdnum = mkPackage(
  nixRaw`pkgs.qcdnum`,
  "A very fast QCD evolution program written in FORTRAN77",
);

/**
 * Comic book reader in Qt5
 */
export const qcomicbook = mkPackage(
  nixRaw`pkgs.qcomicbook`,
  "Comic book reader in Qt5",
);

/**
 * Qt-based UI for signing and verifying DigiDoc documents
 */
export const qdigidoc = mkPackage(
  nixRaw`pkgs.qdigidoc`,
  "Qt-based UI for signing and verifying DigiDoc documents",
);

/**
 * Graphical disk usage analyzer
 */
export const qdirstat = mkPackage(
  nixRaw`pkgs.qdirstat`,
  "Graphical disk usage analyzer",
);

/**
 * Qt-based C++ web framework
 */
export const qdjango = mkPackage(
  nixRaw`pkgs.qdjango`,
  "Qt-based C++ web framework",
);

/**
 * Tool for flashing images to Qualcomm devices
 */
export const qdl = mkPackage(
  nixRaw`pkgs.qdl`,
  "Tool for flashing images to Qualcomm devices",
);

/**
 * GUI application and command line tool for programming DMR radios
 */
export const qdmr = mkPackage(
  nixRaw`pkgs.qdmr`,
  "GUI application and command line tool for programming DMR radios",
);

/**
 * Vector Search Engine for the next generation of AI applications
 */
export const qdrant = mkPackage(
  nixRaw`pkgs.qdrant`,
  "Vector Search Engine for the next generation of AI applications",
);

/**
 * Free software to create electric diagrams
 */
export const qelectrotech = mkPackage(
  nixRaw`pkgs.qelectrotech`,
  "Free software to create electric diagrams",
);

/**
 * Very small but powerful UNIX editor
 */
export const qemacs = mkPackage(
  nixRaw`pkgs.qemacs`,
  "Very small but powerful UNIX editor",
);

/**
 * A generic and open source machine emulator and virtualizer
 */
export const qemu = mkPackage(
  nixRaw`pkgs.qemu`,
  "A generic and open source machine emulator and virtualizer",
);

/**
 * A generic and open source machine emulator and virtualizer
 */
export const qemu_full = mkPackage(
  nixRaw`pkgs.qemu_full`,
  "A generic and open source machine emulator and virtualizer",
);

/**
 * A generic and open source machine emulator and virtualizer
 */
export const qemu_kvm = mkPackage(
  nixRaw`pkgs.qemu_kvm`,
  "A generic and open source machine emulator and virtualizer",
);

/**
 * A generic and open source machine emulator and virtualizer
 */
export const qemu_test = mkPackage(
  nixRaw`pkgs.qemu_test`,
  "A generic and open source machine emulator and virtualizer",
);

/**
 * A generic and open source machine emulator and virtualizer
 */
export const qemu_utils = mkPackage(
  nixRaw`pkgs.qemu-utils`,
  "A generic and open source machine emulator and virtualizer",
);

/**
 * A generic and open source machine emulator and virtualizer
 */
export const qemu_xen = mkPackage(
  nixRaw`pkgs.qemu_xen`,
  "A generic and open source machine emulator and virtualizer",
);

/**
 * A generic and open source machine emulator and virtualizer
 */
export const qemu_xen_4_15 = mkPackage(
  nixRaw`pkgs.qemu_xen_4_15`,
  "A generic and open source machine emulator and virtualizer",
);

/**
 * A generic and open source machine emulator and virtualizer
 */
export const qemu_xen_4_15_light = mkPackage(
  nixRaw`pkgs.qemu_xen_4_15-light`,
  "A generic and open source machine emulator and virtualizer",
);

/**
 * A generic and open source machine emulator and virtualizer
 */
export const qemu_xen_light = mkPackage(
  nixRaw`pkgs.qemu_xen-light`,
  "A generic and open source machine emulator and virtualizer",
);

/**
 * Quartz Event Synthesizer
 */
export const qes = mkPackage(
  nixRaw`pkgs.qes`,
  "Quartz Event Synthesizer",
);

/**
 * A Free and Open Source Geographic Information System
 */
export const qgis = mkPackage(
  nixRaw`pkgs.qgis`,
  "A Free and Open Source Geographic Information System",
);

/**
 * A Free and Open Source Geographic Information System
 */
export const qgis_ltr = mkPackage(
  nixRaw`pkgs.qgis-ltr`,
  "A Free and Open Source Geographic Information System",
);

/**
 * Graphical front-end to Git
 */
export const qgit = mkPackage(
  nixRaw`pkgs.qgit`,
  "Graphical front-end to Git",
);

/**
 * QPlatformTheme for a better Qt application inclusion in GNOME
 */
export const qgnomeplatform = mkPackage(
  nixRaw`pkgs.qgnomeplatform`,
  "QPlatformTheme for a better Qt application inclusion in GNOME",
);

/**
 * QPlatformTheme for a better Qt application inclusion in GNOME
 */
export const qgnomeplatform_qt6 = mkPackage(
  nixRaw`pkgs.qgnomeplatform-qt6`,
  "QPlatformTheme for a better Qt application inclusion in GNOME",
);

/**
 * A Go client based on Qt5
 */
export const qgo = mkPackage(
  nixRaw`pkgs.qgo`,
  "A Go client based on Qt5",
);

/**
 * Fast regular expression grep for source code with incremental index updates
 */
export const qgrep = mkPackage(
  nixRaw`pkgs.qgrep`,
  "Fast regular expression grep for source code with incremental index updates",
);

/**
 * Provides full ground station support and configuration for the PX4 and APM Flight Stacks
 */
export const qgroundcontrol = mkPackage(
  nixRaw`pkgs.qgroundcontrol`,
  "Provides full ground station support and configuration for the PX4 and APM Flight Stacks",
);

/**
 * Compute the convex hull, Delaunay triangulation, Voronoi diagram and more
 */
export const qhull = mkPackage(
  nixRaw`pkgs.qhull`,
  "Compute the convex hull, Delaunay triangulation, Voronoi diagram and more",
);

/**
 * A Qt5 image viewer with optional video support
 */
export const qimgv = mkPackage(
  nixRaw`pkgs.qimgv`,
  "A Qt5 image viewer with optional video support",
);

/**
 * Quick image viewer
 */
export const qiv = mkPackage(
  nixRaw`pkgs.qiv`,
  "Quick image viewer",
);

/**
 * A Qt application to control the JACK sound server daemon
 */
export const qjackctl = mkPackage(
  nixRaw`pkgs.qjackctl`,
  "A Qt application to control the JACK sound server daemon",
);

/**
 * Qt-based graphical user interface for systemd's journalctl command
 */
export const qjournalctl = mkPackage(
  nixRaw`pkgs.qjournalctl`,
  "Qt-based graphical user interface for systemd's journalctl command",
);

/**
 * A program that lets you use gaming devices anywhere
 */
export const qjoypad = mkPackage(
  nixRaw`pkgs.qjoypad`,
  "A program that lets you use gaming devices anywhere",
);

/**
 * A free and cross-platform software to control DMX or analog lighting systems like moving heads, dimmers, scanners etc
 */
export const qlcplus = mkPackage(
  nixRaw`pkgs.qlcplus`,
  "A free and cross-platform software to control DMX or analog lighting systems like moving heads, dimmers, scanners etc",
);

/**
 * A C++ library of functions for DSP and Music Informatics purposes
 */
export const qm_dsp = mkPackage(
  nixRaw`pkgs.qm-dsp`,
  "A C++ library of functions for DSP and Music Informatics purposes",
);

/**
 * Tool to convert qmake .pro files to CMakeLists.txt
 */
export const qmake2cmake = mkPackage(
  nixRaw`pkgs.qmake2cmake`,
  "Tool to convert qmake .pro files to CMakeLists.txt",
);

/**
 * Consumer grade GIS software
 */
export const qmapshack = mkPackage(
  nixRaw`pkgs.qmapshack`,
  "Consumer grade GIS software",
);

/**
 * C++ Qt QPlainTextEdit widget with markdown highlighting and some other goodies
 */
export const qmarkdowntextedit = mkPackage(
  nixRaw`pkgs.qmarkdowntextedit`,
  "C++ Qt QPlainTextEdit widget with markdown highlighting and some other goodies",
);

/**
 * An alternative Qt-based front-end for the database maintained by the MediathekView project
 */
export const qmediathekview = mkPackage(
  nixRaw`pkgs.qmediathekview`,
  "An alternative Qt-based front-end for the database maintained by the MediathekView project",
);

/**
 * An advanced MIDI arpeggiator
 */
export const qmidiarp = mkPackage(
  nixRaw`pkgs.qmidiarp`,
  "An advanced MIDI arpeggiator",
);

/**
 * A MIDI network gateway application that sends and receives MIDI data (ALSA Sequencer and/or JACK MIDI) over the network
 */
export const qmidinet = mkPackage(
  nixRaw`pkgs.qmidinet`,
  "A MIDI network gateway application that sends and receives MIDI data (ALSA Sequencer and/or JACK MIDI) over the network",
);

/**
 * A program to help users work with QMK Firmware
 */
export const qmk = mkPackage(
  nixRaw`pkgs.qmk`,
  "A program to help users work with QMK Firmware",
);

/**
 * Commandline tool for interactng with QMK devices over HID
 */
export const qmk_hid = mkPackage(
  nixRaw`pkgs.qmk_hid`,
  "Commandline tool for interactng with QMK devices over HID",
);

/**
 * Official QMK udev rules list
 */
export const qmk_udev_rules = mkPackage(
  nixRaw`pkgs.qmk-udev-rules`,
  "Official QMK udev rules list",
);

/**
 * Qt-based audio player that looks like Winamp
 */
export const qmmp = mkPackage(
  nixRaw`pkgs.qmmp`,
  "Qt-based audio player that looks like Winamp",
);

/**
 * Qt-based Multimedia player
 */
export const qmplay2 = mkPackage(
  nixRaw`pkgs.qmplay2`,
  "Qt-based Multimedia player",
);

/**
 * An array language from Nial Systems
 */
export const qnial = mkPackage(
  nixRaw`pkgs.qnial`,
  "An array language from Nial Systems",
);

/**
 * Quick access to Zotero references
 */
export const qnotero = mkPackage(
  nixRaw`pkgs.qnotero`,
  "Quick access to Zotero references",
);

/**
 * Re-implementation of the DOS-era Qmodem serial communications package
 */
export const qodem = mkPackage(
  nixRaw`pkgs.qodem`,
  "Re-implementation of the DOS-era Qmodem serial communications package",
);

/**
 * Flat colorful design icon theme
 */
export const qogir_icon_theme = mkPackage(
  nixRaw`pkgs.qogir-icon-theme`,
  "Flat colorful design icon theme",
);

/**
 * A flat Design theme for KDE Plasma desktop
 */
export const qogir_kde = mkPackage(
  nixRaw`pkgs.qogir-kde`,
  "A flat Design theme for KDE Plasma desktop",
);

/**
 * Flat Design theme for GTK based desktop environments
 */
export const qogir_theme = mkPackage(
  nixRaw`pkgs.qogir-theme`,
  "Flat Design theme for GTK based desktop environments",
);

/**
 * 'Quite OK Image Format' for fast, lossless image compression
 */
export const qoi = mkPackage(
  nixRaw`pkgs.qoi`,
  "'Quite OK Image Format' for fast, lossless image compression",
);

/**
 * EPWING reader for viewing Japanese dictionaries
 */
export const qolibri = mkPackage(
  nixRaw`pkgs.qolibri`,
  "EPWING reader for viewing Japanese dictionaries",
);

/**
 * A cosmic recursive flame fractal editor
 */
export const qosmic = mkPackage(
  nixRaw`pkgs.qosmic`,
  "A cosmic recursive flame fractal editor",
);

/**
 * Qovery Command Line Interface
 */
export const qovery_cli = mkPackage(
  nixRaw`pkgs.qovery-cli`,
  "Qovery Command Line Interface",
);

/**
 * Plain-text file notepad and todo-list manager with markdown support and Nextcloud/ownCloud integration
 */
export const qownnotes = mkPackage(
  nixRaw`pkgs.qownnotes`,
  "Plain-text file notepad and todo-list manager with markdown support and Nextcloud/ownCloud integration",
);

/**
 * An equalizer interface for pulseaudio's equalizer sinks
 */
export const qpaeq = mkPackage(
  nixRaw`pkgs.qpaeq`,
  "An equalizer interface for pulseaudio's equalizer sinks",
);

/**
 * A C++ library and set of programs that inspect and manipulate the structure of PDF files
 */
export const qpdf = mkPackage(
  nixRaw`pkgs.qpdf`,
  "A C++ library and set of programs that inspect and manipulate the structure of PDF files",
);

/**
 * A tabbed document viewer
 */
export const qpdfview = mkPackage(
  nixRaw`pkgs.qpdfview`,
  "A tabbed document viewer",
);

/**
 * Measure RDMA and IP performance
 */
export const qperf = mkPackage(
  nixRaw`pkgs.qperf`,
  "Measure RDMA and IP performance",
);

/**
 * An AMQP message broker and a C++ messaging API
 */
export const qpid_cpp = mkPackage(
  nixRaw`pkgs.qpid-cpp`,
  "An AMQP message broker and a C++ messaging API",
);

/**
 * Encode and decode Quoted-Printable files
 */
export const qprint = mkPackage(
  nixRaw`pkgs.qprint`,
  "Encode and decode Quoted-Printable files",
);

/**
 * Qt graph manager for PipeWire, similar to QjackCtl.
 */
export const qpwgraph = mkPackage(
  nixRaw`pkgs.qpwgraph`,
  "Qt graph manager for PipeWire, similar to QjackCtl.",
);

/**
 * Messaging app
 */
export const qq = mkPackage(
  nixRaw`pkgs.qq`,
  "Messaging app",
);

/**
 * Sudoku generating and solving software
 */
export const qqwing = mkPackage(
  nixRaw`pkgs.qqwing`,
  "Sudoku generating and solving software",
);

/**
 * SDR transceiver application for analog and digital modes
 */
export const qradiolink = mkPackage(
  nixRaw`pkgs.qradiolink`,
  "SDR transceiver application for analog and digital modes",
);

/**
 * A small QR-code tool
 */
export const qrcode = mkPackage(
  nixRaw`pkgs.qrcode`,
  "A small QR-code tool",
);

/**
 * High-quality QR Code generator library in many languages
 */
export const qrcodegen = mkPackage(
  nixRaw`pkgs.qrcodegen`,
  "High-quality QR Code generator library in many languages",
);

/**
 * Transfer files over wifi by scanning a QR code from your terminal
 */
export const qrcp = mkPackage(
  nixRaw`pkgs.qrcp`,
  "Transfer files over wifi by scanning a QR code from your terminal",
);

/**
 * Remote control your desktop from your mobile
 */
export const qremotecontrol_server = mkPackage(
  nixRaw`pkgs.qremotecontrol-server`,
  "Remote control your desktop from your mobile",
);

/**
 * C library for encoding data in a QR Code symbol
 */
export const qrencode = mkPackage(
  nixRaw`pkgs.qrencode`,
  "C library for encoding data in a QR Code symbol",
);

/**
 * Scan a QR code in the terminal using the system camera or a given image
 */
export const qrscan = mkPackage(
  nixRaw`pkgs.qrscan`,
  "Scan a QR code in the terminal using the system camera or a given image",
);

/**
 * Library for fast updating of qr and cholesky decompositions
 */
export const qrupdate = mkPackage(
  nixRaw`pkgs.qrupdate`,
  "Library for fast updating of qr and cholesky decompositions",
);

/**
 * Graphical frontend to LinuxSampler
 */
export const qsampler = mkPackage(
  nixRaw`pkgs.qsampler`,
  "Graphical frontend to LinuxSampler",
);

/**
 * Simple creation and editing of screenshots
 */
export const qscreenshot = mkPackage(
  nixRaw`pkgs.qscreenshot`,
  "Simple creation and editing of screenshots",
);

/**
 * Qt-based slow-scan TV and fax
 */
export const qsstv = mkPackage(
  nixRaw`pkgs.qsstv`,
  "Qt-based slow-scan TV and fax",
);

/**
 * Create stopmotion animation with a (web)camera
 */
export const qstopmotion = mkPackage(
  nixRaw`pkgs.qstopmotion`,
  "Create stopmotion animation with a (web)camera",
);

/**
 * Graphical sudo utility from Project Trident
 */
export const qsudo = mkPackage(
  nixRaw`pkgs.qsudo`,
  "Graphical sudo utility from Project Trident",
);

/**
 * A Traybar Application for Syncthing written in C++
 */
export const qsyncthingtray = mkPackage(
  nixRaw`pkgs.qsyncthingtray`,
  "A Traybar Application for Syncthing written in C++",
);

/**
 * Fluidsynth GUI
 */
export const qsynth = mkPackage(
  nixRaw`pkgs.qsynth`,
  "Fluidsynth GUI",
);

export const qt5Full = mkPackage(
  nixRaw`pkgs.qt5Full`,
  "",
);

/**
 * Editor of tesseract-ocr box files
 */
export const qt_box_editor = mkPackage(
  nixRaw`pkgs.qt-box-editor`,
  "Editor of tesseract-ocr box files",
);

/**
 * Qt pip-mode-like video player for wlroots-based wayland compositors
 */
export const qt_video_wlr = mkPackage(
  nixRaw`pkgs.qt-video-wlr`,
  "Qt pip-mode-like video player for wlroots-based wayland compositors",
);

/**
 * Multimedia interpreter for TADS games
 */
export const qtads = mkPackage(
  nixRaw`pkgs.qtads`,
  "Multimedia interpreter for TADS games",
);

/**
 * Bitcoin trading client
 */
export const qtbitcointrader = mkPackage(
  nixRaw`pkgs.qtbitcointrader`,
  "Bitcoin trading client",
);

/**
 * 4chan browser in qt5
 */
export const qtchan = mkPackage(
  nixRaw`pkgs.qtchan`,
  "4chan browser in qt5",
);

/**
 * Cross-platform IDE tailored to the needs of Qt developers
 */
export const qtcreator = mkPackage(
  nixRaw`pkgs.qtcreator`,
  "Cross-platform IDE tailored to the needs of Qt developers",
);

/**
 * Qt-based front-end for QEMU emulator
 */
export const qtemu = mkPackage(
  nixRaw`pkgs.qtemu`,
  "Qt-based front-end for QEMU emulator",
);

/**
 * Editor for the TikZ language
 */
export const qtikz = mkPackage(
  nixRaw`pkgs.qtikz`,
  "Editor for the TikZ language",
);

/**
 * A small, flexible, scriptable tiling window manager written in Python
 */
export const qtile = mkPackage(
  nixRaw`pkgs.qtile`,
  "A small, flexible, scriptable tiling window manager written in Python",
);

/**
 * Qt Tox client
 */
export const qtox = mkPackage(
  nixRaw`pkgs.qtox`,
  "Qt Tox client",
);

/**
 * A multi-platform GUI for pass, the standard unix password manager
 */
export const qtpass = mkPackage(
  nixRaw`pkgs.qtpass`,
  "A multi-platform GUI for pass, the standard unix password manager",
);

/**
 * Audio/MIDI multi-track sequencer
 */
export const qtractor = mkPackage(
  nixRaw`pkgs.qtractor`,
  "Audio/MIDI multi-track sequencer",
);

/**
 * RISC-V CPU simulator for education purposes
 */
export const qtrvsim = mkPackage(
  nixRaw`pkgs.qtrvsim`,
  "RISC-V CPU simulator for education purposes",
);

/**
 * New user interface for spim, a MIPS simulator
 */
export const qtspim = mkPackage(
  nixRaw`pkgs.qtspim`,
  "New user interface for spim, a MIPS simulator",
);

/**
 * Debugging tool to diff network traffic leveraging Wireshark
 */
export const qtwirediff = mkPackage(
  nixRaw`pkgs.qtwirediff`,
  "Debugging tool to diff network traffic leveraging Wireshark",
);

/**
 * Multi-band fuzz distortion plugin
 */
export const quadrafuzz = mkPackage(
  nixRaw`pkgs.quadrafuzz`,
  "Multi-band fuzz distortion plugin",
);

/**
 * Demo of Quake 3 Arena, a classic first-person shooter
 */
export const quake3demo = mkPackage(
  nixRaw`pkgs.quake3demo`,
  "Demo of Quake 3 Arena, a classic first-person shooter",
);

/**
 * Quake 3 Arena demo content
 */
export const quake3demodata = mkPackage(
  nixRaw`pkgs.quake3demodata`,
  "Quake 3 Arena demo content",
);

/**
 * Improved Quake III Arena engine
 */
export const quake3e = mkPackage(
  nixRaw`pkgs.quake3e`,
  "Improved Quake III Arena engine",
);

/**
 * Quake 3 high-resolution textures
 */
export const quake3hires = mkPackage(
  nixRaw`pkgs.quake3hires`,
  "Quake 3 high-resolution textures",
);

/**
 * Quake 3 Arena point release
 */
export const quake3pointrelease = mkPackage(
  nixRaw`pkgs.quake3pointrelease`,
  "Quake 3 Arena point release",
);

/**
 * An engine for iD software's Quake
 */
export const quakespasm = mkPackage(
  nixRaw`pkgs.quakespasm`,
  "An engine for iD software's Quake",
);

/**
 * A free/open-source library for quantitative finance
 */
export const quantlib = mkPackage(
  nixRaw`pkgs.quantlib`,
  "A free/open-source library for quantitative finance",
);

/**
 * A piece of software for reasoning about monoidal theories; in particular, quantum information processing
 */
export const quantomatic = mkPackage(
  nixRaw`pkgs.quantomatic`,
  "A piece of software for reasoning about monoidal theories; in particular, quantum information processing",
);

/**
 * Electronic-structure calculations and materials modeling at the nanoscale
 */
export const quantum_espresso = mkPackage(
  nixRaw`pkgs.quantum-espresso`,
  "Electronic-structure calculations and materials modeling at the nanoscale",
);

/**
 * Electronic-structure calculations and materials modeling at the nanoscale
 */
export const quantum_espresso_mpi = mkPackage(
  nixRaw`pkgs.quantum-espresso-mpi`,
  "Electronic-structure calculations and materials modeling at the nanoscale",
);

/**
 * Quantum mechanics-based minigolf-like game
 */
export const quantumminigolf = mkPackage(
  nixRaw`pkgs.quantumminigolf`,
  "Quantum mechanics-based minigolf-like game",
);

/**
 * Extremely small and simple HTTP GET/HEAD-only web server for static content
 */
export const quark = mkPackage(
  nixRaw`pkgs.quark`,
  "Extremely small and simple HTTP GET/HEAD-only web server for static content",
);

/**
 * Android malware (analysis and scoring) system
 */
export const quark_engine = mkPackage(
  nixRaw`pkgs.quark-engine`,
  "Android malware (analysis and scoring) system",
);

/**
 * Open-source scientific and technical publishing system built on Pandoc
 */
export const quarto = mkPackage(
  nixRaw`pkgs.quarto`,
  "Open-source scientific and technical publishing system built on Pandoc",
);

/**
 * Open-source scientific and technical publishing system built on Pandoc
 */
export const quartoMinimal = mkPackage(
  nixRaw`pkgs.quartoMinimal`,
  "Open-source scientific and technical publishing system built on Pandoc",
);

export const quartus_prime_lite = mkPackage(
  nixRaw`pkgs.quartus-prime-lite`,
  "",
);

export const quartz_wm = mkPackage(
  nixRaw`pkgs.quartz-wm`,
  "",
);

/**
 * Qt/KDE distributed IRC client supporting a remote daemon
 */
export const quassel = mkPackage(
  nixRaw`pkgs.quassel`,
  "Qt/KDE distributed IRC client supporting a remote daemon",
);

/**
 * Qt/KDE distributed IRC client supporting a remote daemon
 */
export const quasselClient = mkPackage(
  nixRaw`pkgs.quasselClient`,
  "Qt/KDE distributed IRC client supporting a remote daemon",
);

/**
 * Qt/KDE distributed IRC client supporting a remote daemon
 */
export const quasselDaemon = mkPackage(
  nixRaw`pkgs.quasselDaemon`,
  "Qt/KDE distributed IRC client supporting a remote daemon",
);

/**
 * Evaluates genome assemblies by computing various metrics
 */
export const quast = mkPackage(
  nixRaw`pkgs.quast`,
  "Evaluates genome assemblies by computing various metrics",
);

/**
 * Cross-platform desktop IM client for the Matrix protocol
 */
export const quaternion = mkPackage(
  nixRaw`pkgs.quaternion`,
  "Cross-platform desktop IM client for the Matrix protocol",
);

/**
 * A classic, elegant, sober and strong serif typeface
 */
export const quattrocento = mkPackage(
  nixRaw`pkgs.quattrocento`,
  "A classic, elegant, sober and strong serif typeface",
);

/**
 * A classic, elegant and sober sans-serif typeface
 */
export const quattrocento_sans = mkPackage(
  nixRaw`pkgs.quattrocento-sans`,
  "A classic, elegant and sober sans-serif typeface",
);

/**
 * Libraries required for the higher-level Qubes daemons and tools
 */
export const qubes_core_vchan_xen = mkPackage(
  nixRaw`pkgs.qubes-core-vchan-xen`,
  "Libraries required for the higher-level Qubes daemons and tools",
);

/**
 * Spin-off of Qucs that allows custom simulation kernels
 */
export const qucs_s = mkPackage(
  nixRaw`pkgs.qucs-s`,
  "Spin-off of Qucs that allows custom simulation kernels",
);

/**
 * A free implementation of the OpenGL Character Renderer
 */
export const quesoglc = mkPackage(
  nixRaw`pkgs.quesoglc`,
  "A free implementation of the OpenGL Character Renderer",
);

/**
 * high-performance, open-source SQL database for applications in financial services, IoT, machine learning, DevOps and observability
 */
export const questdb = mkPackage(
  nixRaw`pkgs.questdb`,
  "high-performance, open-source SQL database for applications in financial services, IoT, machine learning, DevOps and observability",
);

/**
 * The advanced terminal calculator
 */
export const quich = mkPackage(
  nixRaw`pkgs.quich`,
  "The advanced terminal calculator",
);

/**
 * Find bugs in Javascript programs
 */
export const quick_lint_js = mkPackage(
  nixRaw`pkgs.quick-lint-js`,
  "Find bugs in Javascript programs",
);

/**
 * Universal script based file extractor and reimporter
 */
export const quickbms = mkPackage(
  nixRaw`pkgs.quickbms`,
  "Universal script based file extractor and reimporter",
);

/**
 * Quick (and Easy) DER, a Library for parsing ASN.1
 */
export const quickder = mkPackage(
  nixRaw`pkgs.quickder`,
  "Quick (and Easy) DER, a Library for parsing ASN.1",
);

/**
 * Quickly create and run optimised Windows, macOS and Linux desktop virtual machines
 */
export const quickemu = mkPackage(
  nixRaw`pkgs.quickemu`,
  "Quickly create and run optimised Windows, macOS and Linux desktop virtual machines",
);

/**
 * QuickFIX C++ Fix Engine Library
 */
export const quickfix = mkPackage(
  nixRaw`pkgs.quickfix`,
  "QuickFIX C++ Fix Engine Library",
);

/**
 * A Flutter frontend for quickemu
 */
export const quickgui = mkPackage(
  nixRaw`pkgs.quickgui`,
  "A Flutter frontend for quickemu",
);

/**
 * A small and embeddable Javascript engine
 */
export const quickjs = mkPackage(
  nixRaw`pkgs.quickjs`,
  "A small and embeddable Javascript engine",
);

/**
 * Memory pooling for ARPA2 projects
 */
export const quickmem = mkPackage(
  nixRaw`pkgs.quickmem`,
  "Memory pooling for ARPA2 projects",
);

/**
 * A sans serif font designed using geometric shapes
 */
export const quicksand = mkPackage(
  nixRaw`pkgs.quicksand`,
  "A sans serif font designed using geometric shapes",
);

/**
 * A simple HTTP server for quickly sharing files
 */
export const quickserve = mkPackage(
  nixRaw`pkgs.quickserve`,
  "A simple HTTP server for quickly sharing files",
);

/**
 * GUI application to share mouse and keyboard between computers
 */
export const quicksynergy = mkPackage(
  nixRaw`pkgs.quicksynergy`,
  "GUI application to share mouse and keyboard between computers",
);

/**
 * Fast, powerful, yet easy to use template engine for Go
 */
export const quicktemplate = mkPackage(
  nixRaw`pkgs.quicktemplate`,
  "Fast, powerful, yet easy to use template engine for Go",
);

/**
 * Very simple, yet secure VPN software
 */
export const quicktun = mkPackage(
  nixRaw`pkgs.quicktun`,
  "Very simple, yet secure VPN software",
);

/**
 * Generate types and converters from JSON, Schema, and GraphQL
 */
export const quicktype = mkPackage(
  nixRaw`pkgs.quicktype`,
  "Generate types and converters from JSON, Schema, and GraphQL",
);

/**
 * Sub-second search & analytics engine on cloud storage
 */
export const quickwit = mkPackage(
  nixRaw`pkgs.quickwit`,
  "Sub-second search & analytics engine on cloud storage",
);

/**
 * TLS/SSL and crypto library with QUIC APIs
 */
export const quictls = mkPackage(
  nixRaw`pkgs.quictls`,
  "TLS/SSL and crypto library with QUIC APIs",
);

/**
 * Minimalistic ledger and governance toolkit for cold wallets on the Internet Computer.
 */
export const quill = mkPackage(
  nixRaw`pkgs.quill`,
  "Minimalistic ledger and governance toolkit for cold wallets on the Internet Computer.",
);

/**
 * Print QR codes for use with https://p5deo-6aaaa-aaaab-aaaxq-cai.raw.ic0.app/
 */
export const quill_qr = mkPackage(
  nixRaw`pkgs.quill-qr`,
  "Print QR codes for use with https://p5deo-6aaaa-aaaab-aaaxq-cai.raw.ic0.app/",
);

/**
 * Easily manage large numbers of patches
 */
export const quilt = mkPackage(
  nixRaw`pkgs.quilt`,
  "Easily manage large numbers of patches",
);

/**
 * A cursor theme designed to look decent
 */
export const quintom_cursor_theme = mkPackage(
  nixRaw`pkgs.quintom-cursor-theme`,
  "A cursor theme designed to look decent",
);

/**
 * A small QR code decoding library
 */
export const quirc = mkPackage(
  nixRaw`pkgs.quirc`,
  "A small QR code decoding library",
);

/**
 * A SDR transceiver for radios that use the Hermes protocol
 */
export const quisk = mkPackage(
  nixRaw`pkgs.quisk`,
  "A SDR transceiver for radios that use the Hermes protocol",
);

/**
 * A Qt-based RSS/Atom news feed reader
 */
export const quiterss = mkPackage(
  nixRaw`pkgs.quiterss`,
  "A Qt-based RSS/Atom news feed reader",
);

/**
 * GTK-based audio player written in Python, using the Mutagen tagging library
 */
export const quodlibet = mkPackage(
  nixRaw`pkgs.quodlibet`,
  "GTK-based audio player written in Python, using the Mutagen tagging library",
);

/**
 * GTK-based audio player written in Python, using the Mutagen tagging library
 */
export const quodlibet_full = mkPackage(
  nixRaw`pkgs.quodlibet-full`,
  "GTK-based audio player written in Python, using the Mutagen tagging library",
);

/**
 * GTK-based audio player written in Python, using the Mutagen tagging library
 */
export const quodlibet_without_gst_plugins = mkPackage(
  nixRaw`pkgs.quodlibet-without-gst-plugins`,
  "GTK-based audio player written in Python, using the Mutagen tagging library",
);

/**
 * GTK-based audio player written in Python, using the Mutagen tagging library
 */
export const quodlibet_xine = mkPackage(
  nixRaw`pkgs.quodlibet-xine`,
  "GTK-based audio player written in Python, using the Mutagen tagging library",
);

/**
 * GTK-based audio player written in Python, using the Mutagen tagging library
 */
export const quodlibet_xine_full = mkPackage(
  nixRaw`pkgs.quodlibet-xine-full`,
  "GTK-based audio player written in Python, using the Mutagen tagging library",
);

/**
 * A permissioned implementation of Ethereum supporting data privacy
 */
export const quorum = mkPackage(
  nixRaw`pkgs.quorum`,
  "A permissioned implementation of Ethereum supporting data privacy",
);

/**
 * Tools to manage kernel-level quotas in Linux
 */
export const quota = mkPackage(
  nixRaw`pkgs.quota`,
  "Tools to manage kernel-level quotas in Linux",
);

/**
 * Keyboard-focused browser with a minimal GUI
 */
export const qutebrowser = mkPackage(
  nixRaw`pkgs.qutebrowser`,
  "Keyboard-focused browser with a minimal GUI",
);

/**
 * An GUI frontend to v2ray
 */
export const qv2ray = mkPackage(
  nixRaw`pkgs.qv2ray`,
  "An GUI frontend to v2ray",
);

/**
 * Qt Visual Graph Editor
 */
export const qvge = mkPackage(
  nixRaw`pkgs.qvge`,
  "Qt Visual Graph Editor",
);

/**
 * Practical and minimal image viewer
 */
export const qview = mkPackage(
  nixRaw`pkgs.qview`,
  "Practical and minimal image viewer",
);

/**
 * Simple XML editor based on qt libraries
 */
export const qxmledit = mkPackage(
  nixRaw`pkgs.qxmledit`,
  "Simple XML editor based on qt libraries",
);

/**
 * Cross-platform C++ XMPP client and server library
 */
export const qxmpp = mkPackage(
  nixRaw`pkgs.qxmpp`,
  "Cross-platform C++ XMPP client and server library",
);

/**
 * A program to help create and publish crosswords
 */
export const qxw = mkPackage(
  nixRaw`pkgs.qxw`,
  "A program to help create and publish crosswords",
);

/**
 * A ZDoom WAD Launcher
 */
export const qzdl = mkPackage(
  nixRaw`pkgs.qzdl`,
  "A ZDoom WAD Launcher",
);

/**
 * Puppet environment and module deployment
 */
export const r10k = mkPackage(
  nixRaw`pkgs.r10k`,
  "Puppet environment and module deployment",
);

/**
 * Fast audio loudness scanner & tagger (ReplayGain v2 / R128)
 */
export const r128gain = mkPackage(
  nixRaw`pkgs.r128gain`,
  "Fast audio loudness scanner & tagger (ReplayGain v2 / R128)",
);

/**
 * A Risk of Rain 2 Mod Manager in Bash
 */
export const r2mod_cli = mkPackage(
  nixRaw`pkgs.r2mod_cli`,
  "A Risk of Rain 2 Mod Manager in Bash",
);

/**
 * Unofficial Thunderstore mod manager
 */
export const r2modman = mkPackage(
  nixRaw`pkgs.r2modman`,
  "Unofficial Thunderstore mod manager",
);

/**
 * A cmdline tool to control the r3 hackerspace lights
 */
export const r3ctl = mkPackage(
  nixRaw`pkgs.r3ctl`,
  "A cmdline tool to control the r3 hackerspace lights",
);

/**
 * A DIY DynDNS tool based on Route53
 */
export const r53_ddns = mkPackage(
  nixRaw`pkgs.r53-ddns`,
  "A DIY DynDNS tool based on Route53",
);

/**
 * Free software environment for statistical computing and graphics
 */
export const rWrapper = mkPackage(
  nixRaw`pkgs.rWrapper`,
  "Free software environment for statistical computing and graphics",
);

/**
 * A multiplexer for rust-analyzer
 */
export const ra_multiplex = mkPackage(
  nixRaw`pkgs.ra-multiplex`,
  "A multiplexer for rust-analyzer",
);

/**
 * RabbitMQ C AMQP client library
 */
export const rabbitmq_c = mkPackage(
  nixRaw`pkgs.rabbitmq-c`,
  "RabbitMQ C AMQP client library",
);

/**
 * RabbitMQ Java client library which allows Java code to interface to AMQP servers
 */
export const rabbitmq_java_client = mkPackage(
  nixRaw`pkgs.rabbitmq-java-client`,
  "RabbitMQ Java client library which allows Java code to interface to AMQP servers",
);

/**
 * An implementation of the AMQP messaging protocol
 */
export const rabbitmq_server = mkPackage(
  nixRaw`pkgs.rabbitmq-server`,
  "An implementation of the AMQP messaging protocol",
);

/**
 * Graphical tools for working with version control systems
 */
export const rabbitvcs = mkPackage(
  nixRaw`pkgs.rabbitvcs`,
  "Graphical tools for working with version control systems",
);

/**
 * RabbitMQ wire tap and swiss army knife
 */
export const rabtap = mkPackage(
  nixRaw`pkgs.rabtap`,
  "RabbitMQ wire tap and swiss army knife",
);

/**
 * Car racing game
 */
export const racer = mkPackage(
  nixRaw`pkgs.racer`,
  "Car racing game",
);

/**
 * A programmable programming language
 */
export const racket = mkPackage(
  nixRaw`pkgs.racket`,
  "A programmable programming language",
);

/**
 * A programmable programming language
 */
export const racket_7_9 = mkPackage(
  nixRaw`pkgs.racket_7_9`,
  "A programmable programming language",
);

/**
 * Racket without bundled packages, such as Dr. Racket
 */
export const racket_minimal = mkPackage(
  nixRaw`pkgs.racket-minimal`,
  "Racket without bundled packages, such as Dr. Racket",
);

/**
 * A general purpose fuzzer
 */
export const radamsa = mkPackage(
  nixRaw`pkgs.radamsa`,
  "A general purpose fuzzer",
);

/**
 * UNIX-like reverse engineering framework and command-line tools
 */
export const radare2 = mkPackage(
  nixRaw`pkgs.radare2`,
  "UNIX-like reverse engineering framework and command-line tools",
);

/**
 * A Usenet/BitTorrent movie downloader
 */
export const radarr = mkPackage(
  nixRaw`pkgs.radarr`,
  "A Usenet/BitTorrent movie downloader",
);

/**
 * Application to read current clocks of AMD Radeon cards
 */
export const radeon_profile = mkPackage(
  nixRaw`pkgs.radeon-profile`,
  "Application to read current clocks of AMD Radeon cards",
);

/**
 * Lowlevel tools to tweak register and dump state on radeon GPUs
 */
export const radeontools = mkPackage(
  nixRaw`pkgs.radeontools`,
  "Lowlevel tools to tweak register and dump state on radeon GPUs",
);

/**
 * Top-like tool for viewing AMD Radeon GPU utilization
 */
export const radeontop = mkPackage(
  nixRaw`pkgs.radeontop`,
  "Top-like tool for viewing AMD Radeon GPU utilization",
);

/**
 * A 21 century R console
 */
export const radianWrapper = mkPackage(
  nixRaw`pkgs.radianWrapper`,
  "A 21 century R console",
);

/**
 * CalDAV and CardDAV server
 */
export const radicale = mkPackage(
  nixRaw`pkgs.radicale`,
  "CalDAV and CardDAV server",
);

/**
 * CalDAV CardDAV server
 */
export const radicale2 = mkPackage(
  nixRaw`pkgs.radicale2`,
  "CalDAV CardDAV server",
);

/**
 * CalDAV and CardDAV server
 */
export const radicale3 = mkPackage(
  nixRaw`pkgs.radicale3`,
  "CalDAV and CardDAV server",
);

/**
 * Command-line tooling for Radicle, a decentralized code collaboration network
 */
export const radicle_cli = mkPackage(
  nixRaw`pkgs.radicle-cli`,
  "Command-line tooling for Radicle, a decentralized code collaboration network",
);

/**
 * A decentralized app for code collaboration
 */
export const radicle_upstream = mkPackage(
  nixRaw`pkgs.radicle-upstream`,
  "A decentralized app for code collaboration",
);

/**
 * A terminal web radio client
 */
export const radioboat = mkPackage(
  nixRaw`pkgs.radioboat`,
  "A terminal web radio client",
);

/**
 * An internet radio player for linux
 */
export const radiotray_ng = mkPackage(
  nixRaw`pkgs.radiotray-ng`,
  "An internet radio player for linux",
);

/**
 * A generic RADIUS proxy that supports both UDP and TLS (RadSec) RADIUS transports
 */
export const radsecproxy = mkPackage(
  nixRaw`pkgs.radsecproxy`,
  "A generic RADIUS proxy that supports both UDP and TLS (RadSec) RADIUS transports",
);

/**
 * IPv6 Router Advertisement Daemon
 */
export const radvd = mkPackage(
  nixRaw`pkgs.radvd`,
  "IPv6 Router Advertisement Daemon",
);

/**
 * Fully asynchronous C implementation of the Raft consensus protocol

 */
export const raft_canonical = mkPackage(
  nixRaw`pkgs.raft-canonical`,
  "Fully asynchronous C implementation of the Raft consensus protocol\n",
);

/**
 * Asynchronous C implementation of the Raft consensus protocol
 */
export const raft_cowsql = mkPackage(
  nixRaw`pkgs.raft-cowsql`,
  "Asynchronous C implementation of the Raft consensus protocol",
);

/**
 * A simple, secure and modern encryption tool with small explicit keys, no config options, and UNIX-style composability
 */
export const rage = mkPackage(
  nixRaw`pkgs.rage`,
  "A simple, secure and modern encryption tool with small explicit keys, no config options, and UNIX-style composability",
);

/**
 * State machine compiler
 */
export const ragel = mkPackage(
  nixRaw`pkgs.ragel`,
  "State machine compiler",
);

/**
 * State machine compiler
 */
export const ragelDev = mkPackage(
  nixRaw`pkgs.ragelDev`,
  "State machine compiler",
);

/**
 * State machine compiler
 */
export const ragelStable = mkPackage(
  nixRaw`pkgs.ragelStable`,
  "State machine compiler",
);

/**
 * Minimal, flexible & user-friendly X tiling window manager
 */
export const ragnarwm = mkPackage(
  nixRaw`pkgs.ragnarwm`,
  "Minimal, flexible & user-friendly X tiling window manager",
);

/**
 * Securely delete your files
 */
export const raider = mkPackage(
  nixRaw`pkgs.raider`,
  "Securely delete your files",
);

/**
 * Railway.app CLI
 */
export const railway = mkPackage(
  nixRaw`pkgs.railway`,
  "Railway.app CLI",
);

/**
 * A development workflow tool for working with AWS CloudFormation
 */
export const rain = mkPackage(
  nixRaw`pkgs.rain`,
  "A development workflow tool for working with AWS CloudFormation",
);

/**
 * Streaming command-line twitter client
 */
export const rainbowstream = mkPackage(
  nixRaw`pkgs.rainbowstream`,
  "Streaming command-line twitter client",
);

/**
 * Simple, modern & fast web-based email client
 */
export const rainloop_community = mkPackage(
  nixRaw`pkgs.rainloop-community`,
  "Simple, modern & fast web-based email client",
);

/**
 * Simple, modern & fast web-based email client
 */
export const rainloop_standard = mkPackage(
  nixRaw`pkgs.rainloop-standard`,
  "Simple, modern & fast web-based email client",
);

/**
 * A run-or-raise-application-launcher for i3 window manager
 */
export const raiseorlaunch = mkPackage(
  nixRaw`pkgs.raiseorlaunch`,
  "A run-or-raise-application-launcher for i3 window manager",
);

/**
 * Multi-effects processor emulating a guitar effects pedalboard
 */
export const rakarrack = mkPackage(
  nixRaw`pkgs.rakarrack`,
  "Multi-effects processor emulating a guitar effects pedalboard",
);

/**
 * A software task management and build automation tool
 */
export const rake = mkPackage(
  nixRaw`pkgs.rake`,
  "A software task management and build automation tool",
);

/**
 * Review Access - kubectl plugin to show an access matrix for k8s server resources
 */
export const rakkess = mkPackage(
  nixRaw`pkgs.rakkess`,
  "Review Access - kubectl plugin to show an access matrix for k8s server resources",
);

/**
 * Raku implementation on top of Moar virtual machine
 */
export const rakudo = mkPackage(
  nixRaw`pkgs.rakudo`,
  "Raku implementation on top of Moar virtual machine",
);

/**
 * Raleway is an elegant sans-serif typeface family
 */
export const raleway = mkPackage(
  nixRaw`pkgs.raleway`,
  "Raleway is an elegant sans-serif typeface family",
);

/**
 * Workspace Simplifier - a cross-platform application organizing web services into Workspaces similar to browser profiles
 */
export const rambox = mkPackage(
  nixRaw`pkgs.rambox`,
  "Workspace Simplifier - a cross-platform application organizing web services into Workspaces similar to browser profiles",
);

/**
 * A tool which displays memory information
 */
export const ramfetch = mkPackage(
  nixRaw`pkgs.ramfetch`,
  "A tool which displays memory information",
);

/**
 * Ran is a simple web server for serving static files
 */
export const ran = mkPackage(
  nixRaw`pkgs.ran`,
  "Ran is a simple web server for serving static files",
);

/**
 * The Rancher Command Line Interface (CLI) is a unified tool for interacting with your Rancher Server
 */
export const rancher = mkPackage(
  nixRaw`pkgs.rancher`,
  "The Rancher Command Line Interface (CLI) is a unified tool for interacting with your Rancher Server",
);

/**
 * Proof of work algorithm based on random code execution
 */
export const randomx = mkPackage(
  nixRaw`pkgs.randomx`,
  "Proof of work algorithm based on random code execution",
);

/**
 * Automatic test generation for Java
 */
export const randoop = mkPackage(
  nixRaw`pkgs.randoop`,
  "Automatic test generation for Java",
);

/**
 * semi-random text typer
 */
export const randtype = mkPackage(
  nixRaw`pkgs.randtype`,
  "semi-random text typer",
);

/**
 * A Minimal, Header only Modern c++ library for terminal goodies
 */
export const rang = mkPackage(
  nixRaw`pkgs.rang`,
  "A Minimal, Header only Modern c++ library for terminal goodies",
);

/**
 * Experimental range library for C++11/14/17
 */
export const range_v3 = mkPackage(
  nixRaw`pkgs.range-v3`,
  "Experimental range library for C++11/14/17",
);

/**
 * File manager with minimalistic curses interface
 */
export const ranger = mkPackage(
  nixRaw`pkgs.ranger`,
  "File manager with minimalistic curses interface",
);

/**
 * Calculates rank-width and rank-decompositions
 */
export const rankwidth = mkPackage(
  nixRaw`pkgs.rankwidth`,
  "Calculates rank-width and rank-decompositions",
);

/**
 * Photo and video importer for cameras, phones, and memory cards
 */
export const rapid_photo_downloader = mkPackage(
  nixRaw`pkgs.rapid-photo-downloader`,
  "Photo and video importer for cameras, phones, and memory cards",
);

/**
 * A C++ framework for property based testing inspired by QuickCheck
 */
export const rapidcheck = mkPackage(
  nixRaw`pkgs.rapidcheck`,
  "A C++ framework for property based testing inspired by QuickCheck",
);

/**
 * Rapid fuzzy string matching in C++ using the Levenshtein Distance
 */
export const rapidfuzz_cpp = mkPackage(
  nixRaw`pkgs.rapidfuzz-cpp`,
  "Rapid fuzzy string matching in C++ using the Levenshtein Distance",
);

/**
 * Python library for parallel decompression and seeking within compressed gzip files
 */
export const rapidgzip = mkPackage(
  nixRaw`pkgs.rapidgzip`,
  "Python library for parallel decompression and seeking within compressed gzip files",
);

/**
 * Fast JSON parser/generator for C++ with both SAX/DOM style API
 */
export const rapidjson = mkPackage(
  nixRaw`pkgs.rapidjson`,
  "Fast JSON parser/generator for C++ with both SAX/DOM style API",
);

/**
 * Fast JSON parser/generator for C++ with both SAX/DOM style API
 */
export const rapidjson_unstable = mkPackage(
  nixRaw`pkgs.rapidjson-unstable`,
  "Fast JSON parser/generator for C++ with both SAX/DOM style API",
);

/**
 * Multi-platform GUI front-end for the Subversion revision system
 */
export const rapidsvn = mkPackage(
  nixRaw`pkgs.rapidsvn`,
  "Multi-platform GUI front-end for the Subversion revision system",
);

/**
 * Fast XML DOM-style parser in C++
 */
export const rapidxml = mkPackage(
  nixRaw`pkgs.rapidxml`,
  "Fast XML DOM-style parser in C++",
);

/**
 * A library to parse and emit YAML, and do it fast.
 */
export const rapidyaml = mkPackage(
  nixRaw`pkgs.rapidyaml`,
  "A library to parse and emit YAML, and do it fast.",
);

/**
 * A pretty janky assembly REPL
 */
export const rappel = mkPackage(
  nixRaw`pkgs.rappel`,
  "A pretty janky assembly REPL",
);

/**
 * Utility for RAR archives
 */
export const rar = mkPackage(
  nixRaw`pkgs.rar`,
  "Utility for RAR archives",
);

/**
 * FUSE file system for reading RAR archives
 */
export const rar2fs = mkPackage(
  nixRaw`pkgs.rar2fs`,
  "FUSE file system for reading RAR archives",
);

/**
 * This program can crack zip,7z and rar file passwords
 */
export const rarcrack = mkPackage(
  nixRaw`pkgs.rarcrack`,
  "This program can crack zip,7z and rar file passwords",
);

/**
 * GUI for Legendary, an Epic Games Launcher open source alternative
 */
export const rare = mkPackage(
  nixRaw`pkgs.rare`,
  "GUI for Legendary, an Epic Games Launcher open source alternative",
);

/**
 * A fast text scanner/regex extractor and realtime summarizer
 */
export const rare_regex = mkPackage(
  nixRaw`pkgs.rare-regex`,
  "A fast text scanner/regex extractor and realtime summarizer",
);

/**
 * xargs + awk with pattern matching support
 */
export const rargs = mkPackage(
  nixRaw`pkgs.rargs`,
  "xargs + awk with pattern matching support",
);

/**
 * RISC-V Assembler and Runtime Simulator
 */
export const rars = mkPackage(
  nixRaw`pkgs.rars`,
  "RISC-V Assembler and Runtime Simulator",
);

/**
 * Command-line REPL for the Rascal metaprogramming language
 */
export const rascal = mkPackage(
  nixRaw`pkgs.rascal`,
  "Command-line REPL for the Rascal metaprogramming language",
);

/**
 * A Reliability, Availability and Serviceability (RAS) logging tool using EDAC kernel tracing events

 */
export const rasdaemon = mkPackage(
  nixRaw`pkgs.rasdaemon`,
  "A Reliability, Availability and Serviceability (RAS) logging tool using EDAC kernel tracing events\n",
);

/**
 * Z80 assembler
 */
export const rasm = mkPackage(
  nixRaw`pkgs.rasm`,
  "Z80 assembler",
);

/**
 * A general purpose classical molecular simulation package
 */
export const raspa = mkPackage(
  nixRaw`pkgs.raspa`,
  "A general purpose classical molecular simulation package",
);

/**
 * Example packs and documentation of RASPA
 */
export const raspa_data = mkPackage(
  nixRaw`pkgs.raspa-data`,
  "Example packs and documentation of RASPA",
);

/**
 * Firmware for builtin Wifi/Bluetooth devices in the Raspberry Pi 3+ and Zero W
 */
export const raspberrypiWirelessFirmware = mkPackage(
  nixRaw`pkgs.raspberrypiWirelessFirmware`,
  "Firmware for builtin Wifi/Bluetooth devices in the Raspberry Pi 3+ and Zero W",
);

/**
 * Firmware related ARM stubs for the Raspberry Pi
 */
export const raspberrypi_armstubs = mkPackage(
  nixRaw`pkgs.raspberrypi-armstubs`,
  "Firmware related ARM stubs for the Raspberry Pi",
);

/**
 * Installation scripts and binaries for the closed sourced Raspberry Pi 4 EEPROMs
 */
export const raspberrypi_eeprom = mkPackage(
  nixRaw`pkgs.raspberrypi-eeprom`,
  "Installation scripts and binaries for the closed sourced Raspberry Pi 4 EEPROMs",
);

/**
 * Firmware for the Raspberry Pi board
 */
export const raspberrypifw = mkPackage(
  nixRaw`pkgs.raspberrypifw`,
  "Firmware for the Raspberry Pi board",
);

/**
 * Mounts archives as read-only file systems by way of indexing
 */
export const ratarmount = mkPackage(
  nixRaw`pkgs.ratarmount`,
  "Mounts archives as read-only file systems by way of indexing",
);

/**
 * CLI tool that brings currency exchange rates right into your terminal
 */
export const rates = mkPackage(
  nixRaw`pkgs.rates`,
  "CLI tool that brings currency exchange rates right into your terminal",
);

/**
 * Reverse proxy for NAT traversal
 */
export const rathole = mkPackage(
  nixRaw`pkgs.rathole`,
  "Reverse proxy for NAT traversal",
);

/**
 * A modular decentralised peer-to-peer packet router and associated tools
 */
export const ratman = mkPackage(
  nixRaw`pkgs.ratman`,
  "A modular decentralised peer-to-peer packet router and associated tools",
);

/**
 * A minimalistic X11 menu creator
 */
export const ratmen = mkPackage(
  nixRaw`pkgs.ratmen`,
  "A minimalistic X11 menu creator",
);

/**
 * A fast, dynamic, multi-threading framework for IPv6 Router Advertisements
 */
export const ratools = mkPackage(
  nixRaw`pkgs.ratools`,
  "A fast, dynamic, multi-threading framework for IPv6 Router Advertisements",
);

/**
 * FIFO based tox client
 */
export const ratox = mkPackage(
  nixRaw`pkgs.ratox`,
  "FIFO based tox client",
);

/**
 * A program to find rational points on hyperelliptic curves
 */
export const ratpoints = mkPackage(
  nixRaw`pkgs.ratpoints`,
  "A program to find rational points on hyperelliptic curves",
);

/**
 * Simple mouse-free tiling window manager
 */
export const ratpoison = mkPackage(
  nixRaw`pkgs.ratpoison`,
  "Simple mouse-free tiling window manager",
);

/**
 * A tool for converting websites to rss/atom feeds
 */
export const ratt = mkPackage(
  nixRaw`pkgs.ratt`,
  "A tool for converting websites to rss/atom feeds",
);

/**
 * Safe and secure software updates for embedded Linux
 */
export const rauc = mkPackage(
  nixRaw`pkgs.rauc`,
  "Safe and secure software updates for embedded Linux",
);

/**
 * A C++ utility library primarily aimed at audio/musical applications
 */
export const raul = mkPackage(
  nixRaw`pkgs.raul`,
  "A C++ utility library primarily aimed at audio/musical applications",
);

/**
 * The fastest and safest AV1 encoder
 */
export const rav1e = mkPackage(
  nixRaw`pkgs.rav1e`,
  "The fastest and safest AV1 encoder",
);

/**
 * Tool to easily flash code onto an AVR microcontroller with avrdude
 */
export const ravedude = mkPackage(
  nixRaw`pkgs.ravedude`,
  "Tool to easily flash code onto an AVR microcontroller with avrdude",
);

/**
 * Open source desktop news reader with flexible settings to optimize your experience
 */
export const raven_reader = mkPackage(
  nixRaw`pkgs.raven-reader`,
  "Open source desktop news reader with flexible settings to optimize your experience",
);

/**
 * RAW converter and digital photo processing software
 */
export const rawtherapee = mkPackage(
  nixRaw`pkgs.rawtherapee`,
  "RAW converter and digital photo processing software",
);

/**
 * A tool for Phylogenetic Analysis and Post-Analysis of Large Phylogenies
 */
export const raxml = mkPackage(
  nixRaw`pkgs.raxml`,
  "A tool for Phylogenetic Analysis and Post-Analysis of Large Phylogenies",
);

/**
 * A tool for Phylogenetic Analysis and Post-Analysis of Large Phylogenies
 */
export const raxml_mpi = mkPackage(
  nixRaw`pkgs.raxml-mpi`,
  "A tool for Phylogenetic Analysis and Post-Analysis of Large Phylogenies",
);

/**
 * Control your tools with a few keystrokes
 */
export const raycast = mkPackage(
  nixRaw`pkgs.raycast`,
  "Control your tools with a few keystrokes",
);

/**
 * A simple and easy-to-use library to enjoy videogames programming
 */
export const raylib = mkPackage(
  nixRaw`pkgs.raylib`,
  "A simple and easy-to-use library to enjoy videogames programming",
);

/**
 * A collection of games made with raylib 
 */
export const raylib_games = mkPackage(
  nixRaw`pkgs.raylib-games`,
  "A collection of games made with raylib ",
);

/**
 * Session manager for Linux musical programs
 */
export const raysession = mkPackage(
  nixRaw`pkgs.raysession`,
  "Session manager for Linux musical programs",
);

/**
 * Qt application for configuring your Razer devices under GNU/Linux
 */
export const razergenie = mkPackage(
  nixRaw`pkgs.razergenie`,
  "Qt application for configuring your Razer devices under GNU/Linux",
);

/**
 * Doom 3 BFG Edition with modern engine features
 */
export const rbdoom_3_bfg = mkPackage(
  nixRaw`pkgs.rbdoom-3-bfg`,
  "Doom 3 BFG Edition with modern engine features",
);

/**
 * Groom your app’s Ruby environment
 */
export const rbenv = mkPackage(
  nixRaw`pkgs.rbenv`,
  "Groom your app’s Ruby environment",
);

/**
 * A recursive blake2 digest (hash) of a file-system path
 */
export const rblake2sum = mkPackage(
  nixRaw`pkgs.rblake2sum`,
  "A recursive blake2 digest (hash) of a file-system path",
);

/**
 * A Sampling CPU Profiler for Ruby.

 */
export const rbspy = mkPackage(
  nixRaw`pkgs.rbspy`,
  "A Sampling CPU Profiler for Ruby.\n",
);

/**
 * Unofficial command line client for Bitwarden
 */
export const rbw = mkPackage(
  nixRaw`pkgs.rbw`,
  "Unofficial command line client for Bitwarden",
);

/**
 * The Plan 9 shell
 */
export const rc = mkPackage(
  nixRaw`pkgs.rc`,
  "The Plan 9 shell",
);

/**
 * The 9front shell
 */
export const rc_9front = mkPackage(
  nixRaw`pkgs.rc-9front`,
  "The 9front shell",
);

/**
 * Command line program to sync files and directories to and from major cloud storage
 */
export const rclone = mkPackage(
  nixRaw`pkgs.rclone`,
  "Command line program to sync files and directories to and from major cloud storage",
);

/**
 * Graphical Frontend to Rclone written in Qt
 */
export const rclone_browser = mkPackage(
  nixRaw`pkgs.rclone-browser`,
  "Graphical Frontend to Rclone written in Qt",
);

/**
 * Management Suite for Dotfiles
 */
export const rcm = mkPackage(
  nixRaw`pkgs.rcm`,
  "Management Suite for Dotfiles",
);

/**
 * A cross-platform CLI interface to interact with Apple code signing.
 */
export const rcodesign = mkPackage(
  nixRaw`pkgs.rcodesign`,
  "A cross-platform CLI interface to interact with Apple code signing.",
);

/**
 * Source RCON client for command line
 */
export const rcon = mkPackage(
  nixRaw`pkgs.rcon`,
  "Source RCON client for command line",
);

/**
 * Simple cross-platform RCON client written in rust
 */
export const rconc = mkPackage(
  nixRaw`pkgs.rconc`,
  "Simple cross-platform RCON client written in rust",
);

/**
 * Revision control system
 */
export const rcs = mkPackage(
  nixRaw`pkgs.rcs`,
  "Revision control system",
);

/**
 * Utitity to display complete revision history of a set of RCS files
 */
export const rcshist = mkPackage(
  nixRaw`pkgs.rcshist`,
  "Utitity to display complete revision history of a set of RCS files",
);

/**
 * Command line client for the Registration Data Access Protocol (RDAP)
 */
export const rdap = mkPackage(
  nixRaw`pkgs.rdap`,
  "Command line client for the Registration Data Access Protocol (RDAP)",
);

/**
 * Parse Redis dump.rdb files, Analyze Memory, and Export Data to JSON
 */
export const rdbtools = mkPackage(
  nixRaw`pkgs.rdbtools`,
  "Parse Redis dump.rdb files, Analyze Memory, and Export Data to JSON",
);

/**
 * Data deduplication with compression and public key encryption
 */
export const rdedup = mkPackage(
  nixRaw`pkgs.rdedup`,
  "Data deduplication with compression and public key encryption",
);

/**
 * Open source client for Windows Terminal Services
 */
export const rdesktop = mkPackage(
  nixRaw`pkgs.rdesktop`,
  "Open source client for Windows Terminal Services",
);

/**
 * Removes or hardlinks duplicate files very swiftly
 */
export const rdfind = mkPackage(
  nixRaw`pkgs.rdfind`,
  "Removes or hardlinks duplicate files very swiftly",
);

/**
 * Backup system trying to combine best a mirror and an incremental backup system
 */
export const rdiff_backup = mkPackage(
  nixRaw`pkgs.rdiff-backup`,
  "Backup system trying to combine best a mirror and an incremental backup system",
);

/**
 * librdkafka - Apache Kafka C/C++ client library
 */
export const rdkafka = mkPackage(
  nixRaw`pkgs.rdkafka`,
  "librdkafka - Apache Kafka C/C++ client library",
);

/**
 * RDMA Core Userspace Libraries and Daemons
 */
export const rdma_core = mkPackage(
  nixRaw`pkgs.rdma-core`,
  "RDMA Core Userspace Libraries and Daemons",
);

/**
 * Securely control a remote docker daemon CLI using ssh forwarding, no SSL setup needed
 */
export const rdocker = mkPackage(
  nixRaw`pkgs.rdocker`,
  "Securely control a remote docker daemon CLI using ssh forwarding, no SSL setup needed",
);

/**
 * Command line tool to extract main content from a webpage
 */
export const rdrview = mkPackage(
  nixRaw`pkgs.rdrview`,
  "Command line tool to extract main content from a webpage",
);

/**
 * The only backup program that doesn't make backups
 */
export const rdup = mkPackage(
  nixRaw`pkgs.rdup`,
  "The only backup program that doesn't make backups",
);

/**
 * A regular expression library
 */
export const re2 = mkPackage(
  nixRaw`pkgs.re2`,
  "A regular expression library",
);

/**
 * Tool for writing very fast and very flexible scanners
 */
export const re2c = mkPackage(
  nixRaw`pkgs.re2c`,
  "Tool for writing very fast and very flexible scanners",
);

/**
 * The regex-centric, fast lexical analyzer generator for C++ with full Unicode support
 */
export const re_flex = mkPackage(
  nixRaw`pkgs.re-flex`,
  "The regex-centric, fast lexical analyzer generator for C++ with full Unicode support",
);

/**
 * Novel multimodal search and retrieval engine
 */
export const re_isearch = mkPackage(
  nixRaw`pkgs.re-isearch`,
  "Novel multimodal search and retrieval engine",
);

/**
 * The standalone app based on official debugger of React Native, and includes React Inspector / Redux DevTools
 */
export const react_native_debugger = mkPackage(
  nixRaw`pkgs.react-native-debugger`,
  "The standalone app based on official debugger of React Native, and includes React Inspector / Redux DevTools",
);

/**
 * A progressive static site generator for React
 */
export const react_static = mkPackage(
  nixRaw`pkgs.react-static`,
  "A progressive static site generator for React",
);

/**
 * An open source C++ physics engine library
 */
export const reactphysics3d = mkPackage(
  nixRaw`pkgs.reactphysics3d`,
  "An open source C++ physics engine library",
);

/**
 * Tool for reading and parsing EDID data from monitors
 */
export const read_edid = mkPackage(
  nixRaw`pkgs.read-edid`,
  "Tool for reading and parsing EDID data from monitors",
);

/**
 * Firefox Reader Mode in your terminal - get useful text from a web page using Mozilla's Readability library
 */
export const readability_cli = mkPackage(
  nixRaw`pkgs.readability-cli`,
  "Firefox Reader Mode in your terminal - get useful text from a web page using Mozilla's Readability library",
);

/**
 * A Usenet/BitTorrent ebook downloader
 */
export const readarr = mkPackage(
  nixRaw`pkgs.readarr`,
  "A Usenet/BitTorrent ebook downloader",
);

/**
 * Library for interactive line editing
 */
export const readline = mkPackage(
  nixRaw`pkgs.readline`,
  "Library for interactive line editing",
);

/**
 * Library for interactive line editing
 */
export const readline63 = mkPackage(
  nixRaw`pkgs.readline63`,
  "Library for interactive line editing",
);

/**
 * Library for interactive line editing
 */
export const readline70 = mkPackage(
  nixRaw`pkgs.readline70`,
  "Library for interactive line editing",
);

/**
 * Library for interactive line editing
 */
export const readline82 = mkPackage(
  nixRaw`pkgs.readline82`,
  "Library for interactive line editing",
);

/**
 * Read mdx/mdd files (repacking of readmdict from mdict-analysis)
 */
export const readmdict = mkPackage(
  nixRaw`pkgs.readmdict`,
  "Read mdx/mdd files (repacking of readmdict from mdict-analysis)",
);

/**
 * An open source library to extract valid data from within an Open Street Map input file
 */
export const readosm = mkPackage(
  nixRaw`pkgs.readosm`,
  "An open source library to extract valid data from within an Open Street Map input file",
);

/**
 * Command-line tool (+ C library) for converting SAS, Stata, and SPSS files
 */
export const readstat = mkPackage(
  nixRaw`pkgs.readstat`,
  "Command-line tool (+ C library) for converting SAS, Stata, and SPSS files",
);

/**
 * Linux configuration checker for systems to be used for real-time audio
 */
export const real_time_config_quick_scan = mkPackage(
  nixRaw`pkgs.real_time_config_quick_scan`,
  "Linux configuration checker for systems to be used for real-time audio",
);

/**
 * NCNN implementation of Real-ESRGAN. Real-ESRGAN aims at developing Practical Algorithms for General Image Restoration.
 */
export const realesrgan_ncnn_vulkan = mkPackage(
  nixRaw`pkgs.realesrgan-ncnn-vulkan`,
  "NCNN implementation of Real-ESRGAN. Real-ESRGAN aims at developing Practical Algorithms for General Image Restoration.",
);

/**
 * VNC remote desktop client software by RealVNC
 */
export const realvnc_vnc_viewer = mkPackage(
  nixRaw`pkgs.realvnc-vnc-viewer`,
  "VNC remote desktop client software by RealVNC",
);

/**
 * run process until all its spawned processes are dead 
 */
export const reap = mkPackage(
  nixRaw`pkgs.reap`,
  "run process until all its spawned processes are dead ",
);

/**
 * Digital audio workstation
 */
export const reaper = mkPackage(
  nixRaw`pkgs.reaper`,
  "Digital audio workstation",
);

/**
 * Facebook's friendly syntax to OCaml
 */
export const reason = mkPackage(
  nixRaw`pkgs.reason`,
  "Facebook's friendly syntax to OCaml",
);

/**
 * A shell for research papers
 */
export const reason_shell = mkPackage(
  nixRaw`pkgs.reason-shell`,
  "A shell for research papers",
);

/**
 * A wrapper that provides access to the Mac OS X pasteboard service
 */
export const reattach_to_user_namespace = mkPackage(
  nixRaw`pkgs.reattach-to-user-namespace`,
  "A wrapper that provides access to the Mac OS X pasteboard service",
);

/**
 * Brute force attack against Wifi Protected Setup
 */
export const reaverwps = mkPackage(
  nixRaw`pkgs.reaverwps`,
  "Brute force attack against Wifi Protected Setup",
);

/**
 * Online and offline brute force attack against WPS
 */
export const reaverwps_t6x = mkPackage(
  nixRaw`pkgs.reaverwps-t6x`,
  "Online and offline brute force attack against WPS",
);

/**
 * Erlang build tool that makes it easy to compile and test Erlang applications, port drivers and releases
 */
export const rebar = mkPackage(
  nixRaw`pkgs.rebar`,
  "Erlang build tool that makes it easy to compile and test Erlang applications, port drivers and releases",
);

/**
 * Erlang build tool that makes it easy to compile and test Erlang applications, port drivers and releases
 */
export const rebar3 = mkPackage(
  nixRaw`pkgs.rebar3`,
  "Erlang build tool that makes it easy to compile and test Erlang applications, port drivers and releases",
);

/**
 * tool for expediting bazel build workflows
 */
export const rebazel = mkPackage(
  nixRaw`pkgs.rebazel`,
  "tool for expediting bazel build workflows",
);

/**
 * User friendly Open Source screencaster for Linux written in GTK
 */
export const recapp = mkPackage(
  nixRaw`pkgs.recapp`,
  "User friendly Open Source screencaster for Linux written in GTK",
);

/**
 * Navigation-mesh Toolset for Games
 */
export const recastnavigation = mkPackage(
  nixRaw`pkgs.recastnavigation`,
  "Navigation-mesh Toolset for Games",
);

/**
 * Flexibly import bank account CSV files into Ledger for command line accounting
 */
export const reckon = mkPackage(
  nixRaw`pkgs.reckon`,
  "Flexibly import bank account CSV files into Ledger for command line accounting",
);

/**
 * Converts files between various character sets and usages
 */
export const recode = mkPackage(
  nixRaw`pkgs.recode`,
  "Converts files between various character sets and usages",
);

/**
 * A full-text search tool
 */
export const recoll = mkPackage(
  nixRaw`pkgs.recoll`,
  "A full-text search tool",
);

/**
 * Recover lost JPEGs and MOV files on a bogus memory card or disk
 */
export const recoverjpeg = mkPackage(
  nixRaw`pkgs.recoverjpeg`,
  "Recover lost JPEGs and MOV files on a bogus memory card or disk",
);

/**
 * Move and resize windows in macOS using keyboard shortcuts or snap areas
 */
export const rectangle = mkPackage(
  nixRaw`pkgs.rectangle`,
  "Move and resize windows in macOS using keyboard shortcuts or snap areas",
);

/**
 * Move and resize windows in macOS using keyboard shortcuts or snap areas
 */
export const rectangle_pro = mkPackage(
  nixRaw`pkgs.rectangle-pro`,
  "Move and resize windows in macOS using keyboard shortcuts or snap areas",
);

/**
 * A variable font family for code & UI
 */
export const recursive = mkPackage(
  nixRaw`pkgs.recursive`,
  "A variable font family for code & UI",
);

/**
 * Tools and libraries to access human-editable, text-based databases
 */
export const recutils = mkPackage(
  nixRaw`pkgs.recutils`,
  "Tools and libraries to access human-editable, text-based databases",
);

/**
 * Automatically sync TRaSH guides to your Sonarr and Radarr instances
 */
export const recyclarr = mkPackage(
  nixRaw`pkgs.recyclarr`,
  "Automatically sync TRaSH guides to your Sonarr and Radarr instances",
);

        /**
         * New programming language strongly inspired by Rebol, but with a
broader field of usage thanks to its native-code compiler, from system
programming to high-level scripting, while providing modern support for
concurrency and multi-core CPUs

         */
export const red = mkPackage(
  nixRaw`pkgs.red`,
  "New programming language strongly inspired by Rebol, but with a\nbroader field of usage thanks to its native-code compiler, from system\nprogramming to high-level scripting, while providing modern support for\nconcurrency and multi-core CPUs\n",
);

/**
 * CLI tool to download saved media from Reddit
 */
export const reddsaver = mkPackage(
  nixRaw`pkgs.reddsaver`,
  "CLI tool to download saved media from Reddit",
);

/**
 * A first person arena shooter, featuring parkour, impulse boosts, and more
 */
export const redeclipse = mkPackage(
  nixRaw`pkgs.redeclipse`,
  "A first person arena shooter, featuring parkour, impulse boosts, and more",
);

/**
 * A small proof-of-concept application to find non discoverable bluetooth devices
 */
export const redfang = mkPackage(
  nixRaw`pkgs.redfang`,
  "A small proof-of-concept application to find non discoverable bluetooth devices",
);

/**
 * Red Hat's Open Source Fonts - Red Hat Display and Red Hat Text
 */
export const redhat_official_fonts = mkPackage(
  nixRaw`pkgs.redhat-official-fonts`,
  "Red Hat's Open Source Fonts - Red Hat Display and Red Hat Text",
);

/**
 * A TCP port redirector for UNIX
 */
export const redir = mkPackage(
  nixRaw`pkgs.redir`,
  "A TCP port redirector for UNIX",
);

/**
 * An open source, advanced key-value store
 */
export const redis = mkPackage(
  nixRaw`pkgs.redis`,
  "An open source, advanced key-value store",
);

/**
 * Backup and restore your Redis data to and from JSON
 */
export const redis_dump = mkPackage(
  nixRaw`pkgs.redis-dump`,
  "Backup and restore your Redis data to and from JSON",
);

/**
 * Redis client written in C++
 */
export const redis_plus_plus = mkPackage(
  nixRaw`pkgs.redis-plus-plus`,
  "Redis client written in C++",
);

/**
 * RedisInsight Redis client powered by Electron
 */
export const redisinsight = mkPackage(
  nixRaw`pkgs.redisinsight`,
  "RedisInsight Redis client powered by Electron",
);

/**
 * C libraries that provide support for the Resource Description Framework (RDF)
 */
export const redland = mkPackage(
  nixRaw`pkgs.redland`,
  "C libraries that provide support for the Resource Description Framework (RDF)",
);

/**
 * A humane alternative to the Redis-cli and TLS
 */
export const redli = mkPackage(
  nixRaw`pkgs.redli`,
  "A humane alternative to the Redis-cli and TLS",
);

export const redmine = mkPackage(
  nixRaw`pkgs.redmine`,
  "",
);

/**
 * A modern journal that includes a calendar navigation, customizable templates, export functionality and word clouds
 */
export const rednotebook = mkPackage(
  nixRaw`pkgs.rednotebook`,
  "A modern journal that includes a calendar navigation, customizable templates, export functionality and word clouds",
);

/**
 * A system for building target files from source files
 */
export const redo = mkPackage(
  nixRaw`pkgs.redo`,
  "A system for building target files from source files",
);

/**
 * Smaller, easier, more powerful, and more reliable than make. An implementation of djb's redo
 */
export const redo_apenwarr = mkPackage(
  nixRaw`pkgs.redo-apenwarr`,
  "Smaller, easier, more powerful, and more reliable than make. An implementation of djb's redo",
);

/**
 * An implementation of the redo build system in portable C with zero dependencies
 */
export const redo_c = mkPackage(
  nixRaw`pkgs.redo-c`,
  "An implementation of the redo build system in portable C with zero dependencies",
);

/**
 * Redo implementation in Bourne Shell
 */
export const redo_sh = mkPackage(
  nixRaw`pkgs.redo-sh`,
  "Redo implementation in Bourne Shell",
);

/**
 * OpenAPI/Swagger-generated API Reference Documentation
 */
export const redoc_cli = mkPackage(
  nixRaw`pkgs.redoc-cli`,
  "OpenAPI/Swagger-generated API Reference Documentation",
);

/**
 * Parallel BASH commandline FLAC compressor, verifier, organizer, analyzer, and retagger
 */
export const redoflacs = mkPackage(
  nixRaw`pkgs.redoflacs`,
  "Parallel BASH commandline FLAC compressor, verifier, organizer, analyzer, and retagger",
);

/**
 * Redpanda client
 */
export const redpanda_client = mkPackage(
  nixRaw`pkgs.redpanda-client`,
  "Redpanda client",
);

/**
 * A proof assistant for Nominal Computational Type Theory
 */
export const redprl = mkPackage(
  nixRaw`pkgs.redprl`,
  "A proof assistant for Nominal Computational Type Theory",
);

/**
 * Screen color temperature manager
 */
export const redshift = mkPackage(
  nixRaw`pkgs.redshift`,
  "Screen color temperature manager",
);

/**
 * JDBC 4.2 driver for Amazon Redshift allowing Java programs to connect to a Redshift database
 */
export const redshift_jdbc = mkPackage(
  nixRaw`pkgs.redshift_jdbc`,
  "JDBC 4.2 driver for Amazon Redshift allowing Java programs to connect to a Redshift database",
);

/**
 * KDE Plasma 5 widget for controlling Redshift
 */
export const redshift_plasma_applet = mkPackage(
  nixRaw`pkgs.redshift-plasma-applet`,
  "KDE Plasma 5 widget for controlling Redshift",
);

/**
 * Transparent redirector of any TCP connection to proxy
 */
export const redsocks = mkPackage(
  nixRaw`pkgs.redsocks`,
  "Transparent redirector of any TCP connection to proxy",
);

/**
 * An HTTP interface to Redland RDF store
 */
export const redstore = mkPackage(
  nixRaw`pkgs.redstore`,
  "An HTTP interface to Redland RDF store",
);

/**
 * Sample-based instrument, with a powerful phrase sequencer
 */
export const redux = mkPackage(
  nixRaw`pkgs.redux`,
  "Sample-based instrument, with a powerful phrase sequencer",
);

/**
 * Universal certificate conversion tool
 */
export const redwax_tool = mkPackage(
  nixRaw`pkgs.redwax-tool`,
  "Universal certificate conversion tool",
);

/**
 * A graphical {,U}EFI boot manager
 */
export const refind = mkPackage(
  nixRaw`pkgs.refind`,
  "A graphical {,U}EFI boot manager",
);

/**
 * Run migrations for the Refinery ORM for Rust via the CLI
 */
export const refinery_cli = mkPackage(
  nixRaw`pkgs.refinery-cli`,
  "Run migrations for the Refinery ORM for Rust via the CLI",
);

/**
 * A small tool to watch a directory and rerun a command when certain files change
 */
export const reflex = mkPackage(
  nixRaw`pkgs.reflex`,
  "A small tool to watch a directory and rerun a command when certain files change",
);

/**
 * Reformat HCL <-> JSON <-> YAML
 */
export const refmt = mkPackage(
  nixRaw`pkgs.refmt`,
  "Reformat HCL <-> JSON <-> YAML",
);

/**
 * Refactoring tools for Go
 */
export const reftools = mkPackage(
  nixRaw`pkgs.reftools`,
  "Refactoring tools for Go",
);

/**
 * A tool for refurbishing and modernizing Python codebases
 */
export const refurb = mkPackage(
  nixRaw`pkgs.refurb`,
  "A tool for refurbishing and modernizing Python codebases",
);

/**
 * Docker registry v2 command line client and repo listing generator with security checks
 */
export const reg = mkPackage(
  nixRaw`pkgs.reg`,
  "Docker registry v2 command line client and repo listing generator with security checks",
);

/**
 * Docker and OCI Registry Client in Go and tooling using those libraries
 */
export const regbot = mkPackage(
  nixRaw`pkgs.regbot`,
  "Docker and OCI Registry Client in Go and tooling using those libraries",
);

/**
 * Docker and OCI Registry Client in Go and tooling using those libraries
 */
export const regclient = mkPackage(
  nixRaw`pkgs.regclient`,
  "Docker and OCI Registry Client in Go and tooling using those libraries",
);

/**
 * Docker and OCI Registry Client in Go and tooling using those libraries
 */
export const regctl = mkPackage(
  nixRaw`pkgs.regctl`,
  "Docker and OCI Registry Client in Go and tooling using those libraries",
);

/**
 * Reimplementation of genkfs in Rust
 */
export const regenkfs = mkPackage(
  nixRaw`pkgs.regenkfs`,
  "Reimplementation of genkfs in Rust",
);

/**
 * A command line tool for debugging, ad hoc benchmarking and generating regular expressions
 */
export const regex_cli = mkPackage(
  nixRaw`pkgs.regex-cli`,
  "A command line tool for debugging, ad hoc benchmarking and generating regular expressions",
);

/**
 * Tool to find regular expressions which are vulnerable to ReDoS
 */
export const regexploit = mkPackage(
  nixRaw`pkgs.regexploit`,
  "Tool to find regular expressions which are vulnerable to ReDoS",
);

/**
 * A desktop application to test regular expressions interactively
 */
export const regextester = mkPackage(
  nixRaw`pkgs.regextester`,
  "A desktop application to test regular expressions interactively",
);

/**
 * REXX interpreter
 */
export const regina = mkPackage(
  nixRaw`pkgs.regina`,
  "REXX interpreter",
);

/**
 * Tool for changing the region code setting of DVD players
 */
export const regionset = mkPackage(
  nixRaw`pkgs.regionset`,
  "Tool for changing the region code setting of DVD players",
);

/**
 * OPA Rego language server
 */
export const regols = mkPackage(
  nixRaw`pkgs.regols`,
  "OPA Rego language server",
);

/**
 * GPG wrapper utility for storing secrets in VCS
 */
export const regpg = mkPackage(
  nixRaw`pkgs.regpg`,
  "GPG wrapper utility for storing secrets in VCS",
);

/**
 * Docker and OCI Registry Client in Go and tooling using those libraries
 */
export const regsync = mkPackage(
  nixRaw`pkgs.regsync`,
  "Docker and OCI Registry Client in Go and tooling using those libraries",
);

/**
 * Reverse Engineers' Hex Editor
 */
export const rehex = mkPackage(
  nixRaw`pkgs.rehex`,
  "Reverse Engineers' Hex Editor",
);

/**
 * Reindeer is a tool which takes Rust Cargo dependencies and generates Buck build rules
 */
export const reindeer = mkPackage(
  nixRaw`pkgs.reindeer`,
  "Reindeer is a tool which takes Rust Cargo dependencies and generates Buck build rules",
);

/**
 * Reiser4 utilities
 */
export const reiser4progs = mkPackage(
  nixRaw`pkgs.reiser4progs`,
  "Reiser4 utilities",
);

/**
 * ReiserFS utilities
 */
export const reiserfsprogs = mkPackage(
  nixRaw`pkgs.reiserfsprogs`,
  "ReiserFS utilities",
);

/**
 * CLI client for Sigstore, the Signature Transparency Log
 */
export const rekor_cli = mkPackage(
  nixRaw`pkgs.rekor-cli`,
  "CLI client for Sigstore, the Signature Transparency Log",
);

/**
 * Sigstore server, the Signature Transparency Log
 */
export const rekor_server = mkPackage(
  nixRaw`pkgs.rekor-server`,
  "Sigstore server, the Signature Transparency Log",
);

/**
 * C Library in Rust for Redox and Linux
 */
export const relibc = mkPackage(
  nixRaw`pkgs.relibc`,
  "C Library in Rust for Redox and Linux",
);

/**
 * A service and a tool for adding digital signatures to operating system packages for Linux and Windows
 */
export const relic = mkPackage(
  nixRaw`pkgs.relic`,
  "A service and a tool for adding digital signatures to operating system packages for Linux and Windows",
);

/**
 * GNU Make with comprehensible tracing and a debugger
 */
export const remake = mkPackage(
  nixRaw`pkgs.remake`,
  "GNU Make with comprehensible tracing and a debugger",
);

/**
 * A toolchain for cross-compiling to reMarkable 2 tablets
 */
export const remarkable2_toolchain = mkPackage(
  nixRaw`pkgs.remarkable2-toolchain`,
  "A toolchain for cross-compiling to reMarkable 2 tablets",
);

/**
 * A program to use a reMarkable as a graphics tablet
 */
export const remarkable_mouse = mkPackage(
  nixRaw`pkgs.remarkable-mouse`,
  "A program to use a reMarkable as a graphics tablet",
);

/**
 * A toolchain for cross-compiling to reMarkable tablets
 */
export const remarkable_toolchain = mkPackage(
  nixRaw`pkgs.remarkable-toolchain`,
  "A toolchain for cross-compiling to reMarkable tablets",
);

/**
 * Convert between TOML, YAML and JSON
 */
export const remarshal = mkPackage(
  nixRaw`pkgs.remarshal`,
  "Convert between TOML, YAML and JSON",
);

/**
 * Sophisticated calendar and alarm program for the console
 */
export const remind = mkPackage(
  nixRaw`pkgs.remind`,
  "Sophisticated calendar and alarm program for the console",
);

/**
 * Reimplementation of mkrom in Rust
 */
export const remkrom = mkPackage(
  nixRaw`pkgs.remkrom`,
  "Reimplementation of mkrom in Rust",
);

/**
 * Remote desktop client written in GTK
 */
export const remmina = mkPackage(
  nixRaw`pkgs.remmina`,
  "Remote desktop client written in GTK",
);

/**
 * A note-taking application focused on learning and productivity
 */
export const remnote = mkPackage(
  nixRaw`pkgs.remnote`,
  "A note-taking application focused on learning and productivity",
);

/**
 * Roblox file manipulation tool
 */
export const remodel = mkPackage(
  nixRaw`pkgs.remodel`,
  "Roblox file manipulation tool",
);

/**
 * A small GTK app for presenting keybinding hints
 */
export const remontoire = mkPackage(
  nixRaw`pkgs.remontoire`,
  "A small GTK app for presenting keybinding hints",
);

/**
 * Work with remote hosts seamlessly via rsync and ssh
 */
export const remote_exec = mkPackage(
  nixRaw`pkgs.remote-exec`,
  "Work with remote hosts seamlessly via rsync and ssh",
);

/**
 * Control mouse and keyboard from the webbrowser of a smartphone.
 */
export const remote_touchpad = mkPackage(
  nixRaw`pkgs.remote-touchpad`,
  "Control mouse and keyboard from the webbrowser of a smartphone.",
);

/**
 * VirtualBox client with remote management
 */
export const remotebox = mkPackage(
  nixRaw`pkgs.remotebox`,
  "VirtualBox client with remote management",
);

export const removeReferencesTo = mkPackage(
  nixRaw`pkgs.removeReferencesTo`,
  "",
);

/**
 * Rename files according to a Perl rewrite expression
 */
export const rename = mkPackage(
  nixRaw`pkgs.rename`,
  "Rename files according to a Perl rewrite expression",
);

/**
 * A set of programs to make renaming of files faster
 */
export const renameutils = mkPackage(
  nixRaw`pkgs.renameutils`,
  "A set of programs to make renaming of files faster",
);

/**
 * A single-frame graphics debugger
 */
export const renderdoc = mkPackage(
  nixRaw`pkgs.renderdoc`,
  "A single-frame graphics debugger",
);

/**
 * CLI to render Go template text files
 */
export const renderizer = mkPackage(
  nixRaw`pkgs.renderizer`,
  "CLI to render Go template text files",
);

/**
 * Release Notes Manager
 */
export const reno = mkPackage(
  nixRaw`pkgs.reno`,
  "Release Notes Manager",
);

/**
 * Modern tracker-based DAW
 */
export const renoise = mkPackage(
  nixRaw`pkgs.renoise`,
  "Modern tracker-based DAW",
);

/**
 * Visual Novel Engine
 */
export const renpy = mkPackage(
  nixRaw`pkgs.renpy`,
  "Visual Novel Engine",
);

/**
 * Single-shot nREPL client
 */
export const rep = mkPackage(
  nixRaw`pkgs.rep`,
  "Single-shot nREPL client",
);

/**
 * GTK bindings for librep
 */
export const rep_gtk = mkPackage(
  nixRaw`pkgs.rep-gtk`,
  "GTK bindings for librep",
);

/**
 * An interactive replacer for ripgrep that makes it easy to find and replace across files on the command line
 */
export const repgrep = mkPackage(
  nixRaw`pkgs.repgrep`,
  "An interactive replacer for ripgrep that makes it easy to find and replace across files on the command line",
);

/**
 * A tool to replace verbatim strings
 */
export const replace = mkPackage(
  nixRaw`pkgs.replace`,
  "A tool to replace verbatim strings",
);

/**
 * Replace a string in one file with a secret from a second file
 */
export const replace_secret = mkPackage(
  nixRaw`pkgs.replace-secret`,
  "Replace a string in one file with a secret from a second file",
);

/**
 * A tool to execute yaml templates and output text
 */
export const replacement = mkPackage(
  nixRaw`pkgs.replacement`,
  "A tool to execute yaml templates and output text",
);

/**
 * The Time Travel Debugger for Web Development
 */
export const replay_io = mkPackage(
  nixRaw`pkgs.replay-io`,
  "The Time Travel Debugger for Web Development",
);

/**
 * The Time Travel Debugger for Web Development - Node Command Line
 */
export const replay_node_cli = mkPackage(
  nixRaw`pkgs.replay-node-cli`,
  "The Time Travel Debugger for Web Development - Node Command Line",
);

/**
 * An open-source, instant-replay solution for Linux
 */
export const replay_sorcery = mkPackage(
  nixRaw`pkgs.replay-sorcery`,
  "An open-source, instant-replay solution for Linux",
);

/**
 * Seed your development database with real data
 */
export const replibyte = mkPackage(
  nixRaw`pkgs.replibyte`,
  "Seed your development database with real data",
);

/**
 * A readline and libedit replacement that supports UTF-8, syntax highlighting, hints and Windows and is BSD licensed
 */
export const replxx = mkPackage(
  nixRaw`pkgs.replxx`,
  "A readline and libedit replacement that supports UTF-8, syntax highlighting, hints and Windows and is BSD licensed",
);

/**
 * A tool for editing version-control repository history
 */
export const reposurgeon = mkPackage(
  nixRaw`pkgs.reposurgeon`,
  "A tool for editing version-control repository history",
);

/**
 * Reproducible apt/dnf/apk/pacman, with content-addressing
 */
export const repro_get = mkPackage(
  nixRaw`pkgs.repro-get`,
  "Reproducible apt/dnf/apk/pacman, with content-addressing",
);

/**
 * A cross-platform (C99/C++11) process library
 */
export const reproc = mkPackage(
  nixRaw`pkgs.reproc`,
  "A cross-platform (C99/C++11) process library",
);

/**
 * Simple edge server / reverse proxy
 */
export const reproxy = mkPackage(
  nixRaw`pkgs.reproxy`,
  "Simple edge server / reverse proxy",
);

/**
 * Tool to retrieve approximate repeats from large DNA sequences
 */
export const repseek = mkPackage(
  nixRaw`pkgs.repseek`,
  "Tool to retrieve approximate repeats from large DNA sequences",
);

/**
 * Module to do automated pentest reporting with SysReptor
 */
export const reptor = mkPackage(
  nixRaw`pkgs.reptor`,
  "Module to do automated pentest reporting with SysReptor",
);

/**
 * Reparent a running program to a new terminal
 */
export const reptyr = mkPackage(
  nixRaw`pkgs.reptyr`,
  "Reparent a running program to a new terminal",
);

/**
 * Intercept & Modify HTTP Requests
 */
export const requestly = mkPackage(
  nixRaw`pkgs.requestly`,
  "Intercept & Modify HTTP Requests",
);

/**
 * Tool to dynamicly redirect outputs of a running process
 */
export const reredirect = mkPackage(
  nixRaw`pkgs.reredirect`,
  "Tool to dynamicly redirect outputs of a running process",
);

/**
 * Helps you understand your daily habits so you can focus and be more productive
 */
export const rescuetime = mkPackage(
  nixRaw`pkgs.rescuetime`,
  "Helps you understand your daily habits so you can focus and be more productive",
);

/**
 * A Realtime API Gateway used with NATS to build REST, real time, and RPC APIs
 */
export const resgate = mkPackage(
  nixRaw`pkgs.resgate`,
  "A Realtime API Gateway used with NATS to build REST, real time, and RPC APIs",
);

/**
 * An easy-to-use, zero-downtime schema migration tool for Postgres
 */
export const reshape = mkPackage(
  nixRaw`pkgs.reshape`,
  "An easy-to-use, zero-downtime schema migration tool for Postgres",
);

/**
 * Resolve external shell-script dependencies
 */
export const resholve = mkPackage(
  nixRaw`pkgs.resholve`,
  "Resolve external shell-script dependencies",
);

/**
 * Automatically sync files via secure, distributed technology
 */
export const resilio_sync = mkPackage(
  nixRaw`pkgs.resilio-sync`,
  "Automatically sync files via secure, distributed technology",
);

/**
 * A wrapper for the user, group and hosts NSS API
 */
export const resolv_wrapper = mkPackage(
  nixRaw`pkgs.resolv_wrapper`,
  "A wrapper for the user, group and hosts NSS API",
);

/**
 * Tool to determine what GCC flags -march=native would resolve into
 */
export const resolve_march_native = mkPackage(
  nixRaw`pkgs.resolve-march-native`,
  "Tool to determine what GCC flags -march=native would resolve into",
);

/**
 * Cross-platform Developer GUI for Redis
 */
export const resp_app = mkPackage(
  nixRaw`pkgs.resp-app`,
  "Cross-platform Developer GUI for Redis",
);

/**
 * LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server
 */
export const responder = mkPackage(
  nixRaw`pkgs.responder`,
  "LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server",
);

/**
 * A backup program that is fast, efficient and secure
 */
export const restic = mkPackage(
  nixRaw`pkgs.restic`,
  "A backup program that is fast, efficient and secure",
);

/**
 * A CLI tool to check the integrity of a restic repository without unlocking it
 */
export const restic_integrity = mkPackage(
  nixRaw`pkgs.restic-integrity`,
  "A CLI tool to check the integrity of a restic repository without unlocking it",
);

/**
 * A high performance HTTP server that implements restic's REST backend API
 */
export const restic_rest_server = mkPackage(
  nixRaw`pkgs.restic-rest-server`,
  "A high performance HTTP server that implements restic's REST backend API",
);

/**
 * Cross-platform, efficient, customizable, and robust asynchronous HTTP/WebSocket server C++14 library
 */
export const restinio = mkPackage(
  nixRaw`pkgs.restinio`,
  "Cross-platform, efficient, customizable, and robust asynchronous HTTP/WebSocket server C++14 library",
);

/**
 * Restic GUI for Desktop/Laptop Backups
 */
export const restique = mkPackage(
  nixRaw`pkgs.restique`,
  "Restic GUI for Desktop/Laptop Backups",
);

/**
 * CLI tool for interacting with REST-ish HTTP APIs
 */
export const restish = mkPackage(
  nixRaw`pkgs.restish`,
  "CLI tool for interacting with REST-ish HTTP APIs",
);

/**
 * DPAA2 Resource Management Tool
 */
export const restool = mkPackage(
  nixRaw`pkgs.restool`,
  "DPAA2 Resource Management Tool",
);

/**
 * reMarkable screen sharing over SSH
 */
export const restream = mkPackage(
  nixRaw`pkgs.restream`,
  "reMarkable screen sharing over SSH",
);

/**
 * Web-based kanban board
 */
export const restya_board = mkPackage(
  nixRaw`pkgs.restya-board`,
  "Web-based kanban board",
);

/**
 * Lightweight JSON Resume builder, no-frills alternative to resume-cli
 */
export const resumed = mkPackage(
  nixRaw`pkgs.resumed`,
  "Lightweight JSON Resume builder, no-frills alternative to resume-cli",
);

/**
 * An SVG rendering library
 */
export const resvg = mkPackage(
  nixRaw`pkgs.resvg`,
  "An SVG rendering library",
);

/**
 * A retargetable machine-code decompiler based on LLVM
 */
export const retdec = mkPackage(
  nixRaw`pkgs.retdec`,
  "A retargetable machine-code decompiler based on LLVM",
);

/**
 * A retargetable machine-code decompiler based on LLVM
 */
export const retdec_full = mkPackage(
  nixRaw`pkgs.retdec-full`,
  "A retargetable machine-code decompiler based on LLVM",
);

/**
 * Editor for Markdown and reStructuredText
 */
export const retext = mkPackage(
  nixRaw`pkgs.retext`,
  "Editor for Markdown and reStructuredText",
);

/**
 * An open-source distributed database built with love
 */
export const rethinkdb = mkPackage(
  nixRaw`pkgs.rethinkdb`,
  "An open-source distributed database built with love",
);

/**
 * A better filter tool for Redump and No-Intro dats
 */
export const retool = mkPackage(
  nixRaw`pkgs.retool`,
  "A better filter tool for Redump and No-Intro dats",
);

/**
 * The GTK Libretro frontend framework
 */
export const retro_gtk = mkPackage(
  nixRaw`pkgs.retro-gtk`,
  "The GTK Libretro frontend framework",
);

/**
 * Multi-platform emulator frontend for libretro cores
 */
export const retroarch = mkPackage(
  nixRaw`pkgs.retroarch`,
  "Multi-platform emulator frontend for libretro cores",
);

/**
 * Multi-platform emulator frontend for libretro cores
 */
export const retroarchBare = mkPackage(
  nixRaw`pkgs.retroarchBare`,
  "Multi-platform emulator frontend for libretro cores",
);

/**
 * Multi-platform emulator frontend for libretro cores
 */
export const retroarchFull = mkPackage(
  nixRaw`pkgs.retroarchFull`,
  "Multi-platform emulator frontend for libretro cores",
);

/**
 * Assets needed for RetroArch
 */
export const retroarch_assets = mkPackage(
  nixRaw`pkgs.retroarch-assets`,
  "Assets needed for RetroArch",
);

/**
 * Joypad autoconfig files
 */
export const retroarch_joypad_autoconfig = mkPackage(
  nixRaw`pkgs.retroarch-joypad-autoconfig`,
  "Joypad autoconfig files",
);

/**
 * A frontend for arcade cabinets and media PCs
 */
export const retrofe = mkPackage(
  nixRaw`pkgs.retrofe`,
  "A frontend for arcade cabinets and media PCs",
);

/**
 * Decentralized peer to peer chat application.
 */
export const retroshare = mkPackage(
  nixRaw`pkgs.retroshare`,
  "Decentralized peer to peer chat application.",
);

/**
 * Retry a command until the command succeeds
 */
export const retry = mkPackage(
  nixRaw`pkgs.retry`,
  "Retry a command until the command succeeds",
);

/**
 * A tool for compliance with the REUSE Initiative recommendations
 */
export const reuse = mkPackage(
  nixRaw`pkgs.reuse`,
  "A tool for compliance with the REUSE Initiative recommendations",
);

/**
 * Get beautiful reveal.js presentations from your Markdown files
 */
export const reveal_md = mkPackage(
  nixRaw`pkgs.reveal-md`,
  "Get beautiful reveal.js presentations from your Markdown files",
);

/**
 * Automated code review tool integrated with any code analysis tools regardless of programming language
 */
export const reviewdog = mkPackage(
  nixRaw`pkgs.reviewdog`,
  "Automated code review tool integrated with any code analysis tools regardless of programming language",
);

/**
 * Fast, configurable, extensible, flexible, and beautiful linter for Go
 */
export const revive = mkPackage(
  nixRaw`pkgs.revive`,
  "Fast, configurable, extensible, flexible, and beautiful linter for Go",
);

/**
 * An open source user-first chat platform
 */
export const revolt_desktop = mkPackage(
  nixRaw`pkgs.revolt-desktop`,
  "An open source user-first chat platform",
);

  /**
   * A FUSE filesystem intended to be used
like Apache mod_rewrite
   */
export const rewritefs = mkPackage(
  nixRaw`pkgs.rewritefs`,
  "A FUSE filesystem intended to be used\n      like Apache mod_rewrite",
);

/**
 * A more modern http framework benchmarker supporting HTTP/1 and HTTP/2 benchmarks
 */
export const rewrk = mkPackage(
  nixRaw`pkgs.rewrk`,
  "A more modern http framework benchmarker supporting HTTP/1 and HTTP/2 benchmarks",
);

/**
 * The friendly automation framework
 */
export const rex = mkPackage(
  nixRaw`pkgs.rex`,
  "The friendly automation framework",
);

/**
 * A tool to read RFCs from the command line
 */
export const rfc = mkPackage(
  nixRaw`pkgs.rfc`,
  "A tool to read RFCs from the command line",
);

/**
 * Generate Bibtex entries for IETF RFCs and Internet-Drafts
 */
export const rfc_bibtex = mkPackage(
  nixRaw`pkgs.rfc-bibtex`,
  "Generate Bibtex entries for IETF RFCs and Internet-Drafts",
);

/**
 * Rules+hook for udev to catch rfkill state changes
 */
export const rfkill_udev = mkPackage(
  nixRaw`pkgs.rfkill_udev`,
  "Rules+hook for udev to catch rfkill state changes",
);

/**
 * Implementation of the card game Race for the Galaxy, including an AI
 */
export const rftg = mkPackage(
  nixRaw`pkgs.rftg`,
  "Implementation of the card game Race for the Galaxy, including an AI",
);

/**
 * A free assembler/linker package for the Game Boy and Game Boy Color
 */
export const rgbds = mkPackage(
  nixRaw`pkgs.rgbds`,
  "A free assembler/linker package for the Game Boy and Game Boy Color",
);

/**
 * A tool from AMD that allows for deep inspection of GPU workloads
 */
export const rgp = mkPackage(
  nixRaw`pkgs.rgp`,
  "A tool from AMD that allows for deep inspection of GPU workloads",
);

/**
 * A C library and a command-line tool to generate (extended) regular expressions
 */
export const rgxg = mkPackage(
  nixRaw`pkgs.rgxg`,
  "A C library and a command-line tool to generate (extended) regular expressions",
);

/**
 * Temporary edit external crates that your project depends on
 */
export const rhack = mkPackage(
  nixRaw`pkgs.rhack`,
  "Temporary edit external crates that your project depends on",
);

/**
 * Tool to auto-generate documentation for Rhai source code
 */
export const rhai_doc = mkPackage(
  nixRaw`pkgs.rhai-doc`,
  "Tool to auto-generate documentation for Rhai source code",
);

/**
 * Console utility and library for computing and verifying hash sums of files
 */
export const rhash = mkPackage(
  nixRaw`pkgs.rhash`,
  "Console utility and library for computing and verifying hash sums of files",
);

/**
 * An implementation of JavaScript written in Java
 */
export const rhino = mkPackage(
  nixRaw`pkgs.rhino`,
  "An implementation of JavaScript written in Java",
);

/**
 * Command Line Interface for Red Hat OpenShift Application Services
 */
export const rhoas = mkPackage(
  nixRaw`pkgs.rhoas`,
  "Command Line Interface for Red Hat OpenShift Application Services",
);

/**
 * F/OSS/Libre font for Latin and Devanagari
 */
export const rhodium_libre = mkPackage(
  nixRaw`pkgs.rhodium-libre`,
  "F/OSS/Libre font for Latin and Devanagari",
);

/**
 * A free and open source speech synthesizer for Russian language and others
 */
export const rhvoice = mkPackage(
  nixRaw`pkgs.rhvoice`,
  "A free and open source speech synthesizer for Russian language and others",
);

/**
 * A music playing application for GNOME
 */
export const rhythmbox = mkPackage(
  nixRaw`pkgs.rhythmbox`,
  "A music playing application for GNOME",
);

/**
 * Command Line Interface to Rich
 */
export const rich_cli = mkPackage(
  nixRaw`pkgs.rich-cli`,
  "Command Line Interface to Rich",
);

/**
 * Enrich `go test` outputs with text decorations
 */
export const richgo = mkPackage(
  nixRaw`pkgs.richgo`,
  "Enrich `go test` outputs with text decorations",
);

/**
 * Anonymous peer-to-peer instant messaging
 */
export const ricochet = mkPackage(
  nixRaw`pkgs.ricochet`,
  "Anonymous peer-to-peer instant messaging",
);

/**
 * A high-quality Japanese font based on Inconsolata and Migu 1M
 */
export const ricty = mkPackage(
  nixRaw`pkgs.ricty`,
  "A high-quality Japanese font based on Inconsolata and Migu 1M",
);

/**
 * The best Japanese programming font meets the awesome ligatures of Firacode
 */
export const rictydiminished_with_firacode = mkPackage(
  nixRaw`pkgs.rictydiminished-with-firacode`,
  "The best Japanese programming font meets the awesome ligatures of Firacode",
);

/**
 * A network monitoring system
 */
export const riemann = mkPackage(
  nixRaw`pkgs.riemann`,
  "A network monitoring system",
);

/**
 * A C client library for the Riemann monitoring system
 */
export const riemann_c_client = mkPackage(
  nixRaw`pkgs.riemann_c_client`,
  "A C client library for the Riemann monitoring system",
);

/**
 * A javascript, websockets-powered dashboard for Riemann
 */
export const riemann_dash = mkPackage(
  nixRaw`pkgs.riemann-dash`,
  "A javascript, websockets-powered dashboard for Riemann",
);

/**
 * Tools to submit data to Riemann
 */
export const riemann_tools = mkPackage(
  nixRaw`pkgs.riemann-tools`,
  "Tools to submit data to Riemann",
);

/**
 * Tool to produce a list of equations that approximately solve to a given number
 */
export const ries = mkPackage(
  nixRaw`pkgs.ries`,
  "Tool to produce a list of equations that approximately solve to a given number",
);

/**
 * A tool that automatically provides external dependencies for software projects
 */
export const riff = mkPackage(
  nixRaw`pkgs.riff`,
  "A tool that automatically provides external dependencies for software projects",
);

/**
 * A diff filter highlighting which line parts have changed
 */
export const riffdiff = mkPackage(
  nixRaw`pkgs.riffdiff`,
  "A diff filter highlighting which line parts have changed",
);

/**
 * Random identity generator
 */
export const rig = mkPackage(
  nixRaw`pkgs.rig`,
  "Random identity generator",
);

/**
 * A free/libre soft-body physics simulator mainly targeted at simulating vehicle physics
 */
export const rigsofrods_bin = mkPackage(
  nixRaw`pkgs.rigsofrods-bin`,
  "A free/libre soft-body physics simulator mainly targeted at simulating vehicle physics",
);

/**
 * Fantasy console for pixel art game development
 */
export const riko4 = mkPackage(
  nixRaw`pkgs.riko4`,
  "Fantasy console for pixel art game development",
);

/**
 * A children's train game
 */
export const rili = mkPackage(
  nixRaw`pkgs.rili`,
  "A children's train game",
);

/**
 * A command line tool to add customized vocabulary for Rime IME
 */
export const rime_cli = mkPackage(
  nixRaw`pkgs.rime-cli`,
  "A command line tool to add customized vocabulary for Rime IME",
);

/**
 * Schema data of Rime Input Method Engine
 */
export const rime_data = mkPackage(
  nixRaw`pkgs.rime-data`,
  "Schema data of Rime Input Method Engine",
);

/**
 * An alternative frontend for Imgur
 */
export const rimgo = mkPackage(
  nixRaw`pkgs.rimgo`,
  "An alternative frontend for Imgur",
);

/**
 * TCP/UDP port redirector
 */
export const rinetd = mkPackage(
  nixRaw`pkgs.rinetd`,
  "TCP/UDP port redirector",
);

/**
 * Unit-aware calculator
 */
export const rink = mkPackage(
  nixRaw`pkgs.rink`,
  "Unit-aware calculator",
);

/**
 * C11 / gnu11 utilities C library by Shlomi Fish / Rindolf
 */
export const rinutils = mkPackage(
  nixRaw`pkgs.rinutils`,
  "C11 / gnu11 utilities C library by Shlomi Fish / Rindolf",
);

/**
 * A hardware-accelerated GPU terminal emulator powered by WebGPU
 */
export const rio = mkPackage(
  nixRaw`pkgs.rio`,
  "A hardware-accelerated GPU terminal emulator powered by WebGPU",
);

/**
 * Get data in and out of Redis
 */
export const riot_redis = mkPackage(
  nixRaw`pkgs.riot-redis`,
  "Get data in and out of Redis",
);

/**
 * A simple password manager written in Rust
 */
export const ripasso_cursive = mkPackage(
  nixRaw`pkgs.ripasso-cursive`,
  "A simple password manager written in Rust",
);

/**
 * Desktop chat client for Slack and Discord
 */
export const ripcord = mkPackage(
  nixRaw`pkgs.ripcord`,
  "Desktop chat client for Slack and Discord",
);

/**
 * An application that lets you drag and drop files from and to the terminal
 */
export const ripdrag = mkPackage(
  nixRaw`pkgs.ripdrag`,
  "An application that lets you drag and drop files from and to the terminal",
);

/**
 * RIPE ATLAS project tools
 */
export const ripe_atlas_tools = mkPackage(
  nixRaw`pkgs.ripe-atlas-tools`,
  "RIPE ATLAS project tools",
);

/**
 * A graphical processor simulator and assembly editor for the RISC-V ISA
 */
export const ripes = mkPackage(
  nixRaw`pkgs.ripes`,
  "A graphical processor simulator and assembly editor for the RISC-V ISA",
);

/**
 * A utility that combines the usability of The Silver Searcher with the raw speed of grep
 */
export const ripgrep = mkPackage(
  nixRaw`pkgs.ripgrep`,
  "A utility that combines the usability of The Silver Searcher with the raw speed of grep",
);

/**
 * Ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, and more
 */
export const ripgrep_all = mkPackage(
  nixRaw`pkgs.ripgrep-all`,
  "Ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, and more",
);

/**
 * Attachment extractor for MIME messages
 */
export const ripmime = mkPackage(
  nixRaw`pkgs.ripmime`,
  "Attachment extractor for MIME messages",
);

/**
 * Ripple P2P payment network reference server
 */
export const rippled = mkPackage(
  nixRaw`pkgs.rippled`,
  "Ripple P2P payment network reference server",
);

/**
 * Generate master and ephemeral rippled validator keys
 */
export const rippled_validator_keys_tool = mkPackage(
  nixRaw`pkgs.rippled-validator-keys-tool`,
  "Generate master and ephemeral rippled validator keys",
);

/**
 * A command-line tool to prevent committing secret keys into your source code
 */
export const ripsecrets = mkPackage(
  nixRaw`pkgs.ripsecrets`,
  "A command-line tool to prevent committing secret keys into your source code",
);

/**
 * A lean C++ code for the computation of Vietoris–Rips persistence barcodes
 */
export const ripser = mkPackage(
  nixRaw`pkgs.ripser`,
  "A lean C++ code for the computation of Vietoris–Rips persistence barcodes",
);

/**
 * RISC-V Proxy Kernel and Bootloader
 */
export const riscv_pk = mkPackage(
  nixRaw`pkgs.riscv-pk`,
  "RISC-V Proxy Kernel and Bootloader",
);

/**
 * Generic VPN client by LEAP
 */
export const riseup_vpn = mkPackage(
  nixRaw`pkgs.riseup-vpn`,
  "Generic VPN client by LEAP",
);

/**
 * Fast and flexible scripting for Go developers and DevOps
 */
export const risor = mkPackage(
  nixRaw`pkgs.risor`,
  "Fast and flexible scripting for Go developers and DevOps",
);

/**
 * A river-status client written in Rust
 */
export const ristate = mkPackage(
  nixRaw`pkgs.ristate`,
  "A river-status client written in Rust",
);

/**
 * Utility program that allows you to configure SteelSeries Rival gaming mice
 */
export const rivalcfg = mkPackage(
  nixRaw`pkgs.rivalcfg`,
  "Utility program that allows you to configure SteelSeries Rival gaming mice",
);

/**
 * A dynamic tiling wayland compositor
 */
export const river = mkPackage(
  nixRaw`pkgs.river`,
  "A dynamic tiling wayland compositor",
);

/**
 * Switch back'n'forth between river tags
 */
export const river_bnf = mkPackage(
  nixRaw`pkgs.river-bnf`,
  "Switch back'n'forth between river tags",
);

/**
 * Write your own river layout generator in lua
 */
export const river_luatile = mkPackage(
  nixRaw`pkgs.river-luatile`,
  "Write your own river layout generator in lua",
);

/**
 * A pop-up showing tag status
 */
export const river_tag_overlay = mkPackage(
  nixRaw`pkgs.river-tag-overlay`,
  "A pop-up showing tag status",
);

/**
 * A layout generator for river Wayland compositor, fork of rivertile
 */
export const rivercarro = mkPackage(
  nixRaw`pkgs.rivercarro`,
  "A layout generator for river Wayland compositor, fork of rivertile",
);

/**
 * A framework for comparison of experimental measurements from high-energy particle colliders to theory predictions
 */
export const rivet = mkPackage(
  nixRaw`pkgs.rivet`,
  "A framework for comparison of experimental measurements from high-energy particle colliders to theory predictions",
);

/**
 * UNIX-like reverse engineering framework and command-line toolset.
 */
export const rizin = mkPackage(
  nixRaw`pkgs.rizin`,
  "UNIX-like reverse engineering framework and command-line toolset.",
);

/**
 * A tool from Rockchip to communicate with Rockusb devices
 */
export const rkdeveloptool = mkPackage(
  nixRaw`pkgs.rkdeveloptool`,
  "A tool from Rockchip to communicate with Rockusb devices",
);

/**
 * A tool from Rockchip to communicate with Rockusb devices (pine64 fork)
 */
export const rkdeveloptool_pine64 = mkPackage(
  nixRaw`pkgs.rkdeveloptool-pine64`,
  "A tool from Rockchip to communicate with Rockusb devices (pine64 fork)",
);

/**
 * An extremely simple, lightning fast Kubernetes distribution that runs entirely within containers
 */
export const rke = mkPackage(
  nixRaw`pkgs.rke`,
  "An extremely simple, lightning fast Kubernetes distribution that runs entirely within containers",
);

/**
 * RKE2, also known as RKE Government, is Rancher's next-generation Kubernetes distribution.
 */
export const rke2 = mkPackage(
  nixRaw`pkgs.rke2`,
  "RKE2, also known as RKE Government, is Rancher's next-generation Kubernetes distribution.",
);

/**
 * Tools for flashing Rockchip devices
 */
export const rkflashtool = mkPackage(
  nixRaw`pkgs.rkflashtool`,
  "Tools for flashing Rockchip devices",
);

/**
 * Rakarrak effects ported to LV2
 */
export const rkrlv2 = mkPackage(
  nixRaw`pkgs.rkrlv2`,
  "Rakarrak effects ported to LV2",
);

/**
 * Virtual KVM switch for Linux machines
 */
export const rkvm = mkPackage(
  nixRaw`pkgs.rkvm`,
  "Virtual KVM switch for Linux machines",
);

/**
 * A lightweight application launcher for X11
 */
export const rlaunch = mkPackage(
  nixRaw`pkgs.rlaunch`,
  "A lightweight application launcher for X11",
);

/**
 * A lambda calculus interpreter
 */
export const rlci = mkPackage(
  nixRaw`pkgs.rlci`,
  "A lambda calculus interpreter",
);

/**
 * A C++ logging library used in encfs
 */
export const rlog = mkPackage(
  nixRaw`pkgs.rlog`,
  "A C++ logging library used in encfs",
);

/**
 * A platform independent standalone c++ library for rendering vector based animations and art in realtime
 */
export const rlottie = mkPackage(
  nixRaw`pkgs.rlottie`,
  "A platform independent standalone c++ library for rendering vector based animations and art in realtime",
);

/**
 * Readline wrapper for console programs
 */
export const rlwrap = mkPackage(
  nixRaw`pkgs.rlwrap`,
  "Readline wrapper for console programs",
);

/**
 * Replacement for rm with focus on safety, ergonomics and performance
 */
export const rm_improved = mkPackage(
  nixRaw`pkgs.rm-improved`,
  "Replacement for rm with focus on safety, ergonomics and performance",
);

/**
 * Parse formatted man pages and man page source from most flavors of UNIX and converts them to HTML, ASCII, TkMan, DocBook, and other formats
 */
export const rman = mkPackage(
  nixRaw`pkgs.rman`,
  "Parse formatted man pages and man page source from most flavors of UNIX and converts them to HTML, ASCII, TkMan, DocBook, and other formats",
);

/**
 * A Go app that allows access to the ReMarkable Cloud API programmatically
 */
export const rmapi = mkPackage(
  nixRaw`pkgs.rmapi`,
  "A Go app that allows access to the ReMarkable Cloud API programmatically",
);

/**
 * Remote TextMate 2 implemented as shell script
 */
export const rmate_sh = mkPackage(
  nixRaw`pkgs.rmate-sh`,
  "Remote TextMate 2 implemented as shell script",
);

/**
 * Host your own cloud for the Remarkable
 */
export const rmfakecloud = mkPackage(
  nixRaw`pkgs.rmfakecloud`,
  "Host your own cloud for the Remarkable",
);

/**
 * FUSE access to the reMarkable Cloud
 */
export const rmfuse = mkPackage(
  nixRaw`pkgs.rmfuse`,
  "FUSE access to the reMarkable Cloud",
);

/**
 * ReactiveML: a programming language for implementing interactive systems
 */
export const rml = mkPackage(
  nixRaw`pkgs.rml`,
  "ReactiveML: a programming language for implementing interactive systems",
);

/**
 * Extremely fast tool to remove duplicates and other lint from your filesystem
 */
export const rmlint = mkPackage(
  nixRaw`pkgs.rmlint`,
  "Extremely fast tool to remove duplicates and other lint from your filesystem",
);

/**
 * Remote mount utility which parses a json file
 */
export const rmount = mkPackage(
  nixRaw`pkgs.rmount`,
  "Remote mount utility which parses a json file",
);

/**
 * trash-put made compatible with GNUs rm and rmdir
 */
export const rmtrash = mkPackage(
  nixRaw`pkgs.rmtrash`,
  "trash-put made compatible with GNUs rm and rmdir",
);

/**
 * Fast live viewer for reMarkable 1 and 2
 */
export const rmview = mkPackage(
  nixRaw`pkgs.rmview`,
  "Fast live viewer for reMarkable 1 and 2",
);

/**
 * Trashcan/ recycle bin utility for the command line
 */
export const rmw = mkPackage(
  nixRaw`pkgs.rmw`,
  "Trashcan/ recycle bin utility for the command line",
);

/**
 * A random number generator daemon
 */
export const rng_tools = mkPackage(
  nixRaw`pkgs.rng-tools`,
  "A random number generator daemon",
);

/**
 * A Python library and command-line tool for loading multi-file RELAX NG schemas from arbitary URLs, and flattening them into a single RELAX NG schema
 */
export const rnginline = mkPackage(
  nixRaw`pkgs.rnginline`,
  "A Python library and command-line tool for loading multi-file RELAX NG schemas from arbitary URLs, and flattening them into a single RELAX NG schema",
);

/**
 * Nix Hash Converter
 */
export const rnix_hashes = mkPackage(
  nixRaw`pkgs.rnix-hashes`,
  "Nix Hash Converter",
);

/**
 * A work-in-progress language server for Nix, with syntax checking and basic completion
 */
export const rnix_lsp = mkPackage(
  nixRaw`pkgs.rnix-lsp`,
  "A work-in-progress language server for Nix, with syntax checking and basic completion",
);

/**
 * Bulk rename utility
 */
export const rnm = mkPackage(
  nixRaw`pkgs.rnm`,
  "Bulk rename utility",
);

/**
 * Recurrent neural network for audio noise reduction
 */
export const rnnoise = mkPackage(
  nixRaw`pkgs.rnnoise`,
  "Recurrent neural network for audio noise reduction",
);

/**
 * A real-time noise suppression plugin for voice based on Xiph's RNNoise
 */
export const rnnoise_plugin = mkPackage(
  nixRaw`pkgs.rnnoise-plugin`,
  "A real-time noise suppression plugin for voice based on Xiph's RNNoise",
);

/**
 * Simple drawing application to create handwritten notes
 */
export const rnote = mkPackage(
  nixRaw`pkgs.rnote`,
  "Simple drawing application to create handwritten notes",
);

/**
 * High performance C++ OpenPGP library, fully compliant to RFC 4880
 */
export const rnp = mkPackage(
  nixRaw`pkgs.rnp`,
  "High performance C++ OpenPGP library, fully compliant to RFC 4880",
);

/**
 * A command-line tool to batch rename files and directories
 */
export const rnr = mkPackage(
  nixRaw`pkgs.rnr`,
  "A command-line tool to batch rename files and directories",
);

/**
 * Relax NG Compact Syntax validator
 */
export const rnv = mkPackage(
  nixRaw`pkgs.rnv`,
  "Relax NG Compact Syntax validator",
);

/**
 * High-performance PHP application server, process manager written in Go and powered with plugins
 */
export const roadrunner = mkPackage(
  nixRaw`pkgs.roadrunner`,
  "High-performance PHP application server, process manager written in Go and powered with plugins",
);

/**
 * A note-taking tool for networked thought
 */
export const roam_research = mkPackage(
  nixRaw`pkgs.roam-research`,
  "A note-taking tool for networked thought",
);

/**
 * Create full-fledged APIs for static datasets without writing a single line of code. 
 */
export const roapi_http = mkPackage(
  nixRaw`pkgs.roapi-http`,
  "Create full-fledged APIs for static datasets without writing a single line of code. ",
);

/**
 * C++ implementation of a fast hash map and hash set using robin hood hashing
 */
export const robin_map = mkPackage(
  nixRaw`pkgs.robin-map`,
  "C++ implementation of a fast hash map and hash set using robin hood hashing",
);

/**
 * Modern task runner for PHP
 */
export const robo = mkPackage(
  nixRaw`pkgs.robo`,
  "Modern task runner for PHP",
);

/**
 * Query GUI for mongodb. Formerly called Robomongo
 */
export const robo3t = mkPackage(
  nixRaw`pkgs.robo3t`,
  "Query GUI for mongodb. Formerly called Robomongo",
);

/**
 * Documentation Extraction Tool
 */
export const robodoc = mkPackage(
  nixRaw`pkgs.robodoc`,
  "Documentation Extraction Tool",
);

/**
 * Yet another zen simulation; A simple find-the-kitten game
 */
export const robotfindskitten = mkPackage(
  nixRaw`pkgs.robotfindskitten`,
  "Yet another zen simulation; A simple find-the-kitten game",
);

/**
 * The Roboto family of fonts
 */
export const roboto = mkPackage(
  nixRaw`pkgs.roboto`,
  "The Roboto family of fonts",
);

/**
 * Google Roboto Mono fonts
 */
export const roboto_mono = mkPackage(
  nixRaw`pkgs.roboto-mono`,
  "Google Roboto Mono fonts",
);

/**
 * The Roboto family of fonts
 */
export const roboto_serif = mkPackage(
  nixRaw`pkgs.roboto-serif`,
  "The Roboto family of fonts",
);

/**
 * Roboto Slab Typeface by Google
 */
export const roboto_slab = mkPackage(
  nixRaw`pkgs.roboto-slab`,
  "Roboto Slab Typeface by Google",
);

/**
 * Bridge to robustirc.net-IRC-Network
 */
export const robustirc_bridge = mkPackage(
  nixRaw`pkgs.robustirc-bridge`,
  "Bridge to robustirc.net-IRC-Network",
);

/**
 * Roc is a toolkit for real-time audio streaming over the network
 */
export const roc_toolkit = mkPackage(
  nixRaw`pkgs.roc-toolkit`,
  "Roc is a toolkit for real-time audio streaming over the network",
);

/**
 * Tools to configure ROCCAT devices
 */
export const roccat_tools = mkPackage(
  nixRaw`pkgs.roccat-tools`,
  "Tools to configure ROCCAT devices",
);

/**
 * Open source firmware for digital music players
 */
export const rockbox_utility = mkPackage(
  nixRaw`pkgs.rockbox-utility`,
  "Open source firmware for digital music players",
);

/**
 * A tool for synchronizing music and visuals in demoscene productions
 */
export const rocket = mkPackage(
  nixRaw`pkgs.rocket`,
  "A tool for synchronizing music and visuals in demoscene productions",
);

/**
 * Official Desktop client for Rocket.Chat
 */
export const rocketchat_desktop = mkPackage(
  nixRaw`pkgs.rocketchat-desktop`,
  "Official Desktop client for Rocket.Chat",
);

/**
 * A library that provides an embeddable, persistent key-value store for fast storage
 */
export const rocksdb = mkPackage(
  nixRaw`pkgs.rocksdb`,
  "A library that provides an embeddable, persistent key-value store for fast storage",
);

/**
 * A library that provides an embeddable, persistent key-value store for fast storage
 */
export const rocksdb_6_23 = mkPackage(
  nixRaw`pkgs.rocksdb_6_23`,
  "A library that provides an embeddable, persistent key-value store for fast storage",
);

/**
 * A library that provides an embeddable, persistent key-value store for fast storage
 */
export const rocksdb_7_10 = mkPackage(
  nixRaw`pkgs.rocksdb_7_10`,
  "A library that provides an embeddable, persistent key-value store for fast storage",
);

/**
 * Scrolling tile-based arcade style puzzle game
 */
export const rocksndiamonds = mkPackage(
  nixRaw`pkgs.rocksndiamonds`,
  "Scrolling tile-based arcade style puzzle game",
);

/**
 * Window switcher, run dialog and dmenu replacement
 */
export const rofi = mkPackage(
  nixRaw`pkgs.rofi`,
  "Window switcher, run dialog and dmenu replacement",
);

/**
 * Rofi-based interface to connect to bluetooth devices and display status info
 */
export const rofi_bluetooth = mkPackage(
  nixRaw`pkgs.rofi-bluetooth`,
  "Rofi-based interface to connect to bluetooth devices and display status info",
);

/**
 * Do live calculations in rofi!
 */
export const rofi_calc = mkPackage(
  nixRaw`pkgs.rofi-calc`,
  "Do live calculations in rofi!",
);

/**
 * An emoji selector plugin for Rofi
 */
export const rofi_emoji = mkPackage(
  nixRaw`pkgs.rofi-emoji`,
  "An emoji selector plugin for Rofi",
);

/**
 * Use rofi to quickly open files
 */
export const rofi_file_browser = mkPackage(
  nixRaw`pkgs.rofi-file-browser`,
  "Use rofi to quickly open files",
);

/**
 * Generates menu based applications using rofi
 */
export const rofi_menugen = mkPackage(
  nixRaw`pkgs.rofi-menugen`,
  "Generates menu based applications using rofi",
);

/**
 * A rofi menu for interacting with MPD written in Python
 */
export const rofi_mpd = mkPackage(
  nixRaw`pkgs.rofi-mpd`,
  "A rofi menu for interacting with MPD written in Python",
);

/**
 * A script to make rofi work with password-store
 */
export const rofi_pass = mkPackage(
  nixRaw`pkgs.rofi-pass`,
  "A script to make rofi work with password-store",
);

/**
 * A script to make rofi work with password-store
 */
export const rofi_pass_wayland = mkPackage(
  nixRaw`pkgs.rofi-pass-wayland`,
  "A script to make rofi work with password-store",
);

/**
 * Shows a Power/Lock menu with Rofi
 */
export const rofi_power_menu = mkPackage(
  nixRaw`pkgs.rofi-power-menu`,
  "Shows a Power/Lock menu with Rofi",
);

/**
 * Rofi-based interface to select source/sink (aka input/output) with PulseAudio
 */
export const rofi_pulse_select = mkPackage(
  nixRaw`pkgs.rofi-pulse-select`,
  "Rofi-based interface to select source/sink (aka input/output) with PulseAudio",
);

/**
 * Rofi frontend for Bitwarden
 */
export const rofi_rbw = mkPackage(
  nixRaw`pkgs.rofi-rbw`,
  "Rofi frontend for Bitwarden",
);

/**
 * Rofi frontend for Bitwarden
 */
export const rofi_rbw_wayland = mkPackage(
  nixRaw`pkgs.rofi-rbw-wayland`,
  "Rofi frontend for Bitwarden",
);

/**
 * Rofi frontend for Bitwarden
 */
export const rofi_rbw_x11 = mkPackage(
  nixRaw`pkgs.rofi-rbw-x11`,
  "Rofi frontend for Bitwarden",
);

/**
 * Use rofi to perform various types of screenshots and screen captures
 */
export const rofi_screenshot = mkPackage(
  nixRaw`pkgs.rofi-screenshot`,
  "Use rofi to perform various types of screenshots and screen captures",
);

/**
 * Control your systemd units using rofi
 */
export const rofi_systemd = mkPackage(
  nixRaw`pkgs.rofi-systemd`,
  "Control your systemd units using rofi",
);

/**
 * A plugin for rofi that emulates top behaviour
 */
export const rofi_top = mkPackage(
  nixRaw`pkgs.rofi-top`,
  "A plugin for rofi that emulates top behaviour",
);

/**
 * Window switcher, run dialog and dmenu replacement
 */
export const rofi_unwrapped = mkPackage(
  nixRaw`pkgs.rofi-unwrapped`,
  "Window switcher, run dialog and dmenu replacement",
);

/**
 * Rofi-based interface to enable VPN connections with NetworkManager
 */
export const rofi_vpn = mkPackage(
  nixRaw`pkgs.rofi-vpn`,
  "Rofi-based interface to enable VPN connections with NetworkManager",
);

/**
 * Window switcher, run dialog and dmenu replacement for Wayland
 */
export const rofi_wayland = mkPackage(
  nixRaw`pkgs.rofi-wayland`,
  "Window switcher, run dialog and dmenu replacement for Wayland",
);

/**
 * Window switcher, run dialog and dmenu replacement for Wayland
 */
export const rofi_wayland_unwrapped = mkPackage(
  nixRaw`pkgs.rofi-wayland-unwrapped`,
  "Window switcher, run dialog and dmenu replacement for Wayland",
);

/**
 * A simple emoji and character picker for rofi
 */
export const rofimoji = mkPackage(
  nixRaw`pkgs.rofimoji`,
  "A simple emoji and character picker for rofi",
);

/**
 * The final version of the original Rogue game developed for the UNIX operating system
 */
export const rogue = mkPackage(
  nixRaw`pkgs.rogue`,
  "The final version of the original Rogue game developed for the UNIX operating system",
);

/**
 * Project management tool for Roblox
 */
export const rojo = mkPackage(
  nixRaw`pkgs.rojo`,
  "Project management tool for Roblox",
);

/**
 * A test library for testing Ansible roles
 */
export const rolespec = mkPackage(
  nixRaw`pkgs.rolespec`,
  "A test library for testing Ansible roles",
);

/**
 * FUSE for access Playstation 2 IOP IOPRP images and BIOS dumps
 */
export const romdirfs = mkPackage(
  nixRaw`pkgs.romdirfs`,
  "FUSE for access Playstation 2 IOP IOPRP images and BIOS dumps",
);

/**
 * A free and Open Source Ruby toolkit for security research and development
 */
export const ronin = mkPackage(
  nixRaw`pkgs.ronin`,
  "A free and Open Source Ruby toolkit for security research and development",
);

/**
 * markdown-based tool for building manpages
 */
export const ronn = mkPackage(
  nixRaw`pkgs.ronn`,
  "markdown-based tool for building manpages",
);

/**
 * A Rust API search engine which allows you to search functions by names and type signatures
 */
export const roogle = mkPackage(
  nixRaw`pkgs.roogle`,
  "A Rust API search engine which allows you to search functions by names and type signatures",
);

/**
 * Room Acoustics Software
 */
export const roomeqwizard = mkPackage(
  nixRaw`pkgs.roomeqwizard`,
  "Room Acoustics Software",
);

/**
 * The music player for music lovers
 */
export const roon_bridge = mkPackage(
  nixRaw`pkgs.roon-bridge`,
  "The music player for music lovers",
);

/**
 * The music player for music lovers
 */
export const roon_server = mkPackage(
  nixRaw`pkgs.roon-server`,
  "The music player for music lovers",
);

/**
 * A data analysis framework
 */
export const root = mkPackage(
  nixRaw`pkgs.root`,
  "A data analysis framework",
);

/**
 * A data analysis framework
 */
export const root5 = mkPackage(
  nixRaw`pkgs.root5`,
  "A data analysis framework",
);

/**
 * A bar for Wayland WMs
 */
export const rootbar = mkPackage(
  nixRaw`pkgs.rootbar`,
  "A bar for Wayland WMs",
);

/**
 * Kind of Linux-native "fake root" utility, made for mainly running Docker and Kubernetes as an unprivileged user
 */
export const rootlesskit = mkPackage(
  nixRaw`pkgs.rootlesskit`,
  "Kind of Linux-native \"fake root\" utility, made for mainly running Docker and Kubernetes as an unprivileged user",
);

/**
 * Tool to search for gadgets in binaries to facilitate ROP exploitation
 */
export const ropgadget = mkPackage(
  nixRaw`pkgs.ropgadget`,
  "Tool to search for gadgets in binaries to facilitate ROP exploitation",
);

/**
 * Rosé Pine theme for GTK
 */
export const rose_pine_gtk_theme = mkPackage(
  nixRaw`pkgs.rose-pine-gtk-theme`,
  "Rosé Pine theme for GTK",
);

/**
 * Rosé Pine icon theme for GTK
 */
export const rose_pine_icon_theme = mkPackage(
  nixRaw`pkgs.rose-pine-icon-theme`,
  "Rosé Pine icon theme for GTK",
);

/**
 * Music composition and editing environment
 */
export const rosegarden = mkPackage(
  nixRaw`pkgs.rosegarden`,
  "Music composition and editing environment",
);

/**
 * Build post-quantum-secure VPNs with WireGuard!
 */
export const rosenpass = mkPackage(
  nixRaw`pkgs.rosenpass`,
  "Build post-quantum-secure VPNs with WireGuard!",
);

/**
 * This package contains the Rosenpass tool `rp`, which is a script that wraps the `rosenpass` binary.
 */
export const rosenpass_tools = mkPackage(
  nixRaw`pkgs.rosenpass-tools`,
  "This package contains the Rosenpass tool `rp`, which is a script that wraps the `rosenpass` binary.",
);

/**
 * Tools for searching using parsing expression grammars
 */
export const rosie = mkPackage(
  nixRaw`pkgs.rosie`,
  "Tools for searching using parsing expression grammars",
);

/**
 * .NET C# and Visual Basic compiler
 */
export const roslyn = mkPackage(
  nixRaw`pkgs.roslyn`,
  ".NET C# and Visual Basic compiler",
);

/**
 * Lisp implementation installer/manager and launcher
 */
export const roswell = mkPackage(
  nixRaw`pkgs.roswell`,
  "Lisp implementation installer/manager and launcher",
);

/**
 * screen rotation daemon for X11 and wlroots
 */
export const rot8 = mkPackage(
  nixRaw`pkgs.rot8`,
  "screen rotation daemon for X11 and wlroots",
);

/**
 * Simple command line interface for backup rotation
 */
export const rotate_backups = mkPackage(
  nixRaw`pkgs.rotate-backups`,
  "Simple command line interface for backup rotation",
);

/**
 * Our Own Terminal Emulation Library
 */
export const rote = mkPackage(
  nixRaw`pkgs.rote`,
  "Our Own Terminal Emulation Library",
);

/**
 * SDL port of Rise of the Triad
 */
export const rott = mkPackage(
  nixRaw`pkgs.rott`,
  "SDL port of Rise of the Triad",
);

/**
 * SDL port of Rise of the Triad
 */
export const rott_shareware = mkPackage(
  nixRaw`pkgs.rott-shareware`,
  "SDL port of Rise of the Triad",
);

/**
 * Round image corners from CLI
 */
export const round = mkPackage(
  nixRaw`pkgs.round`,
  "Round image corners from CLI",
);

/**
 * Open Source Webmail Software
 */
export const roundcube = mkPackage(
  nixRaw`pkgs.roundcube`,
  "Open Source Webmail Software",
);

/**
 * A Japanese font based on Rounded M+ and Noto Sans Japanese
 */
export const rounded_mgenplus = mkPackage(
  nixRaw`pkgs.rounded-mgenplus`,
  "A Japanese font based on Rounded M+ and Noto Sans Japanese",
);

/**
 * A unit testing tool for running test plans which are written in any POSIX shell
 */
export const roundup = mkPackage(
  nixRaw`pkgs.roundup`,
  "A unit testing tool for running test plans which are written in any POSIX shell",
);

/**
 * A weighted sans serif font
 */
export const route159 = mkPackage(
  nixRaw`pkgs.route159`,
  "A weighted sans serif font",
);

/**
 * DNS stub resolver, proxy and router
 */
export const routedns = mkPackage(
  nixRaw`pkgs.routedns`,
  "DNS stub resolver, proxy and router",
);

/**
 * A configurable, high-performance routing runtime for Apollo Federation
 */
export const router = mkPackage(
  nixRaw`pkgs.router`,
  "A configurable, high-performance routing runtime for Apollo Federation",
);

/**
 * Exploitation Framework for Embedded Devices
 */
export const routersploit = mkPackage(
  nixRaw`pkgs.routersploit`,
  "Exploitation Framework for Embedded Devices",
);

/**
 * An RPKI Validator written in Rust
 */
export const routinator = mkPackage(
  nixRaw`pkgs.routinator`,
  "An RPKI Validator written in Rust",
);

/**
 * OpenStreetMap Routing Software
 */
export const routino = mkPackage(
  nixRaw`pkgs.routino`,
  "OpenStreetMap Routing Software",
);

/**
 * A CLI for interacting with ApolloGraphQL's developer tooling, including managing self-hosted and GraphOS graphs.
 */
export const rover = mkPackage(
  nixRaw`pkgs.rover`,
  "A CLI for interacting with ApolloGraphQL's developer tooling, including managing self-hosted and GraphOS graphs.",
);

/**
 * Test DRAM for bit flips caused by the rowhammer problem
 */
export const rowhammer_test = mkPackage(
  nixRaw`pkgs.rowhammer-test`,
  "Test DRAM for bit flips caused by the rowhammer problem",
);

/**
 * Fast, lightweight, gtk2 file manager
 */
export const rox_filer = mkPackage(
  nixRaw`pkgs.rox-filer`,
  "Fast, lightweight, gtk2 file manager",
);

/**
 * Command-line client of the StackRox Kubernetes Security Platform
 */
export const roxctl = mkPackage(
  nixRaw`pkgs.roxctl`,
  "Command-line client of the StackRox Kubernetes Security Platform",
);

/**
 * Tabbed, VTE-based terminal emulator
 */
export const roxterm = mkPackage(
  nixRaw`pkgs.roxterm`,
  "Tabbed, VTE-based terminal emulator",
);

/**
 * Roaring Penguin Point-to-Point over Ethernet tool
 */
export const rpPPPoE = mkPackage(
  nixRaw`pkgs.rpPPPoE`,
  "Roaring Penguin Point-to-Point over Ethernet tool",
);

/**
 * ONC RPC portmapper
 */
export const rpcbind = mkPackage(
  nixRaw`pkgs.rpcbind`,
  "ONC RPC portmapper",
);

/**
 * Risc PC Emulator
 */
export const rpcemu = mkPackage(
  nixRaw`pkgs.rpcemu`,
  "Risc PC Emulator",
);

/**
 * PS3 emulator/debugger
 */
export const rpcs3 = mkPackage(
  nixRaw`pkgs.rpcs3`,
  "PS3 emulator/debugger",
);

/**
 * This package contains rpcsvc proto.x files from glibc, which are missing in libtirpc
 */
export const rpcsvc_proto = mkPackage(
  nixRaw`pkgs.rpcsvc-proto`,
  "This package contains rpcsvc proto.x files from glibc, which are missing in libtirpc",
);

/**
 * Your filesystem as a dungeon
 */
export const rpg_cli = mkPackage(
  nixRaw`pkgs.rpg-cli`,
  "Your filesystem as a dungeon",
);

/**
 * Raspberry Pi Imaging Utility
 */
export const rpi_imager = mkPackage(
  nixRaw`pkgs.rpi-imager`,
  "Raspberry Pi Imaging Utility",
);

/**
 * Utility to boot a Raspberry Pi CM/CM3/CM4/Zero over USB
 */
export const rpiboot = mkPackage(
  nixRaw`pkgs.rpiboot`,
  "Utility to boot a Raspberry Pi CM/CM3/CM4/Zero over USB",
);

/**
 * An open-source implementation of an AirPlay mirroring server.
 */
export const rpiplay = mkPackage(
  nixRaw`pkgs.rpiplay`,
  "An open-source implementation of an AirPlay mirroring server.",
);

/**
 * Replace strings in files
 */
export const rpl = mkPackage(
  nixRaw`pkgs.rpl`,
  "Replace strings in files",
);

/**
 * The RPM Package Manager
 */
export const rpm = mkPackage(
  nixRaw`pkgs.rpm`,
  "The RPM Package Manager",
);

/**
 * Convert a .rpm file to a .tar.gz archive
 */
export const rpm2targz = mkPackage(
  nixRaw`pkgs.rpm2targz`,
  "Convert a .rpm file to a .tar.gz archive",
);

/**
 * A hybrid image/package system. It uses OSTree as an image format, and uses RPM as a component model
 */
export const rpm_ostree = mkPackage(
  nixRaw`pkgs.rpm-ostree`,
  "A hybrid image/package system. It uses OSTree as an image format, and uses RPM as a component model",
);

/**
 * Script to extract RPM archives
 */
export const rpmextract = mkPackage(
  nixRaw`pkgs.rpmextract`,
  "Script to extract RPM archives",
);

/**
 * A tool for doing record analysis and transformation
 */
export const rq = mkPackage(
  nixRaw`pkgs.rq`,
  "A tool for doing record analysis and transformation",
);

/**
 * A bittorrent client in Rust
 */
export const rqbit = mkPackage(
  nixRaw`pkgs.rqbit`,
  "A bittorrent client in Rust",
);

/**
 * The lightweight, distributed relational database built on SQLite
 */
export const rqlite = mkPackage(
  nixRaw`pkgs.rqlite`,
  "The lightweight, distributed relational database built on SQLite",
);

/**
 * Records nondeterministic executions and debugs them deterministically
 */
export const rr = mkPackage(
  nixRaw`pkgs.rr`,
  "Records nondeterministic executions and debugs them deterministically",
);

/**
 * High performance logging in Round Robin Databases
 */
export const rrdtool = mkPackage(
  nixRaw`pkgs.rrdtool`,
  "High performance logging in Round Robin Databases",
);

/**
 * Abstract shooter created by Kenta Cho
 */
export const rrootage = mkPackage(
  nixRaw`pkgs.rrootage`,
  "Abstract shooter created by Kenta Cho",
);

/**
 * A helper to run rsync-only environments from ssh-logins
 */
export const rrsync = mkPackage(
  nixRaw`pkgs.rrsync`,
  "A helper to run rsync-only environments from ssh-logins",
);

/**
 * Reshape a data array from standard input
 */
export const rs = mkPackage(
  nixRaw`pkgs.rs`,
  "Reshape a data array from standard input",
);

/**
 * A fast git core.fsmonitor hook written in Rust
 */
export const rs_git_fsmonitor = mkPackage(
  nixRaw`pkgs.rs-git-fsmonitor`,
  "A fast git core.fsmonitor hook written in Rust",
);

/**
 * Sass reimplemented in rust with nom
 */
export const rsass = mkPackage(
  nixRaw`pkgs.rsass`,
  "Sass reimplemented in rust with nom",
);

/**
 * Create resilient backups with Reed-Solomon error correction and byte-spreading
 */
export const rsbep = mkPackage(
  nixRaw`pkgs.rsbep`,
  "Create resilient backups with Reed-Solomon error correction and byte-spreading",
);

/**
 * Command line tools to encode/decode things
 */
export const rsbkb = mkPackage(
  nixRaw`pkgs.rsbkb`,
  "Command line tools to encode/decode things",
);

/**
 * A simple terminal clock written in Rust
 */
export const rsclock = mkPackage(
  nixRaw`pkgs.rsclock`,
  "A simple terminal clock written in Rust",
);

/**
 * Receive CW through the soundcard
 */
export const rscw = mkPackage(
  nixRaw`pkgs.rscw`,
  "Receive CW through the soundcard",
);

/**
 * Remote Shell for MicroPython
 */
export const rshell = mkPackage(
  nixRaw`pkgs.rshell`,
  "Remote Shell for MicroPython",
);

/**
 * TCP connection hijacker
 */
export const rshijack = mkPackage(
  nixRaw`pkgs.rshijack`,
  "TCP connection hijacker",
);

/**
 * user-space rshim driver for the BlueField SoC
 */
export const rshim_user_space = mkPackage(
  nixRaw`pkgs.rshim-user-space`,
  "user-space rshim driver for the BlueField SoC",
);

/**
 * Takes care of your health and regularly breaks your work to avoid repetitive strain injury (RSI)
 */
export const rsibreak = mkPackage(
  nixRaw`pkgs.rsibreak`,
  "Takes care of your health and regularly breaks your work to avoid repetitive strain injury (RSI)",
);

/**
 * A command-line tool to sign files and verify signatures
 */
export const rsign2 = mkPackage(
  nixRaw`pkgs.rsign2`,
  "A command-line tool to sign files and verify signatures",
);

/**
 * A fast, customizable, and easy to use JavaScript and TypeScript linter
 */
export const rslint = mkPackage(
  nixRaw`pkgs.rslint`,
  "A fast, customizable, and easy to use JavaScript and TypeScript linter",
);

/**
 * A filesystem snapshot utility for making backups of local and remote systems
 */
export const rsnapshot = mkPackage(
  nixRaw`pkgs.rsnapshot`,
  "A filesystem snapshot utility for making backups of local and remote systems",
);

/**
 * Experimental JSONPath engine for querying massive streamed datasets
 */
export const rsonpath = mkPackage(
  nixRaw`pkgs.rsonpath`,
  "Experimental JSONPath engine for querying massive streamed datasets",
);

/**
 * Advanced spam filtering system
 */
export const rspamd = mkPackage(
  nixRaw`pkgs.rspamd`,
  "Advanced spam filtering system",
);

/**
 * A tool that converts RSS/Atom newsfeeds to email
 */
export const rss2email = mkPackage(
  nixRaw`pkgs.rss2email`,
  "A tool that converts RSS/Atom newsfeeds to email",
);

/**
 * The RSS feed for websites missing it
 */
export const rss_bridge = mkPackage(
  nixRaw`pkgs.rss-bridge`,
  "The RSS feed for websites missing it",
);

/**
 * Command-line interface for RSS-Bridge
 */
export const rss_bridge_cli = mkPackage(
  nixRaw`pkgs.rss-bridge-cli`,
  "Command-line interface for RSS-Bridge",
);

/**
 * Really Slick Screensavers Port to GLX
 */
export const rss_glx = mkPackage(
  nixRaw`pkgs.rss-glx`,
  "Really Slick Screensavers Port to GLX",
);

/**
 * Simple RSS/Atom feed reader with online synchronization
 */
export const rssguard = mkPackage(
  nixRaw`pkgs.rssguard`,
  "Simple RSS/Atom feed reader with online synchronization",
);

/**
 * Monitor RSS feeds for new entries
 */
export const rsstail = mkPackage(
  nixRaw`pkgs.rsstail`,
  "Monitor RSS feeds for new entries",
);

/**
 * Converts ReSTructuredText to (X)HTML5
 */
export const rst2html5 = mkPackage(
  nixRaw`pkgs.rst2html5`,
  "Converts ReSTructuredText to (X)HTML5",
);

/**
 * Convert reStructured Text to PDF via ReportLab
 */
export const rst2pdf = mkPackage(
  nixRaw`pkgs.rst2pdf`,
  "Convert reStructured Text to PDF via ReportLab",
);

/**
 * Checks syntax of reStructuredText and code blocks nested within it
 */
export const rstcheck = mkPackage(
  nixRaw`pkgs.rstcheck`,
  "Checks syntax of reStructuredText and code blocks nested within it",
);

/**
 * A formatter for reStructuredText
 */
export const rstfmt = mkPackage(
  nixRaw`pkgs.rstfmt`,
  "A formatter for reStructuredText",
);

/**
 * Set of integrated tools for the R language
 */
export const rstudio = mkPackage(
  nixRaw`pkgs.rstudio`,
  "Set of integrated tools for the R language",
);

export const rstudioServerWrapper = mkPackage(
  nixRaw`pkgs.rstudioServerWrapper`,
  "",
);

export const rstudioWrapper = mkPackage(
  nixRaw`pkgs.rstudioWrapper`,
  "",
);

/**
 * Set of integrated tools for the R language
 */
export const rstudio_server = mkPackage(
  nixRaw`pkgs.rstudio-server`,
  "Set of integrated tools for the R language",
);

/**
 * Fast incremental file transfer utility
 */
export const rsync = mkPackage(
  nixRaw`pkgs.rsync`,
  "Fast incremental file transfer utility",
);

/**
 * Enhanced syslog implementation
 */
export const rsyslog = mkPackage(
  nixRaw`pkgs.rsyslog`,
  "Enhanced syslog implementation",
);

/**
 * Enhanced syslog implementation
 */
export const rsyslog_light = mkPackage(
  nixRaw`pkgs.rsyslog-light`,
  "Enhanced syslog implementation",
);

export const rt = mkPackage(
  nixRaw`pkgs.rt`,
  "",
);

/**
 * Firmware for Realtek rt5677 device
 */
export const rt5677_firmware = mkPackage(
  nixRaw`pkgs.rt5677-firmware`,
  "Firmware for Realtek rt5677 device",
);

/**
 * Suite of real-time tests - cyclictest, hwlatdetect, pip_stress, pi_stress, pmqtest, ptsematest, rt-migrate-test, sendme, signaltest, sigwaittest, svsematest
 */
export const rt_tests = mkPackage(
  nixRaw`pkgs.rt-tests`,
  "Suite of real-time tests - cyclictest, hwlatdetect, pip_stress, pi_stress, pmqtest, ptsematest, rt-migrate-test, sendme, signaltest, sigwaittest, svsematest",
);

/**
 * Real-Time Appearance-Based 3D Mapping
 */
export const rtabmap = mkPackage(
  nixRaw`pkgs.rtabmap`,
  "Real-Time Appearance-Based 3D Mapping",
);

/**
 * C/C++ client-server indexer based on clang
 */
export const rtags = mkPackage(
  nixRaw`pkgs.rtags`,
  "C/C++ client-server indexer based on clang",
);

/**
 * A set of C++ classes that provide a cross platform API for realtime audio input/output
 */
export const rtaudio = mkPackage(
  nixRaw`pkgs.rtaudio`,
  "A set of C++ classes that provide a cross platform API for realtime audio input/output",
);

/**
 * Dash/docset reader with built in documentation for Crystal and GTK APIs
 */
export const rtfm = mkPackage(
  nixRaw`pkgs.rtfm`,
  "Dash/docset reader with built in documentation for Crystal and GTK APIs",
);

/**
 * A daemon that hands out real-time priority to processes
 */
export const rtkit = mkPackage(
  nixRaw`pkgs.rtkit`,
  "A daemon that hands out real-time priority to processes",
);

/**
 * Firmware for Realtek RTL8188SU/RTL8191SU/RTL8192SU
 */
export const rtl8192su_firmware = mkPackage(
  nixRaw`pkgs.rtl8192su-firmware`,
  "Firmware for Realtek RTL8188SU/RTL8191SU/RTL8192SU",
);

/**
 * Firmware for Realtek RTL8761b
 */
export const rtl8761b_firmware = mkPackage(
  nixRaw`pkgs.rtl8761b-firmware`,
  "Firmware for Realtek RTL8761b",
);

/**
 * Decode traffic from devices that broadcast on 433.9 MHz, 868 MHz, 315 MHz, 345 MHz and 915 MHz
 */
export const rtl_433 = mkPackage(
  nixRaw`pkgs.rtl_433`,
  "Decode traffic from devices that broadcast on 433.9 MHz, 868 MHz, 315 MHz, 345 MHz and 915 MHz",
);

/**
 * A simple AIS tuner and generic dual-frequency FM demodulator
 */
export const rtl_ais = mkPackage(
  nixRaw`pkgs.rtl-ais`,
  "A simple AIS tuner and generic dual-frequency FM demodulator",
);

/**
 * Turns your Realtek RTL2832 based DVB dongle into a SDR receiver
 */
export const rtl_sdr = mkPackage(
  nixRaw`pkgs.rtl-sdr`,
  "Turns your Realtek RTL2832 based DVB dongle into a SDR receiver",
);

/**
 * Framework for converting Left-To-Right (LTR) Cascading Style Sheets(CSS) to Right-To-Left (RTL)
 */
export const rtlcss = mkPackage(
  nixRaw`pkgs.rtlcss`,
  "Framework for converting Left-To-Right (LTR) Cascading Style Sheets(CSS) to Right-To-Left (RTL)",
);

/**
 * A set of C++ classes that provide a cross platform API for realtime MIDI input/output
 */
export const rtmidi = mkPackage(
  nixRaw`pkgs.rtmidi`,
  "A set of C++ classes that provide a cross platform API for realtime MIDI input/output",
);

/**
 * Toolkit for RTMP streams
 */
export const rtmpdump = mkPackage(
  nixRaw`pkgs.rtmpdump`,
  "Toolkit for RTMP streams",
);

/**
 * Toolkit for RTMP streams
 */
export const rtmpdump_gnutls = mkPackage(
  nixRaw`pkgs.rtmpdump_gnutls`,
  "Toolkit for RTMP streams",
);

/**
 * An ncurses client for libtorrent, ideal for use with screen, tmux, or dtach
 */
export const rtorrent = mkPackage(
  nixRaw`pkgs.rtorrent`,
  "An ncurses client for libtorrent, ideal for use with screen, tmux, or dtach",
);

/**
 * A number of small applications that can be used for processing RTP data
 */
export const rtptools = mkPackage(
  nixRaw`pkgs.rtptools`,
  "A number of small applications that can be used for processing RTP data",
);

/**
 * An open-source C implementation of the RPKI/Router Protocol client
 */
export const rtrlib = mkPackage(
  nixRaw`pkgs.rtrlib`,
  "An open-source C implementation of the RPKI/Router Protocol client",
);

/**
 * RPKI data proxy
 */
export const rtrtr = mkPackage(
  nixRaw`pkgs.rtrtr`,
  "RPKI data proxy",
);

/**
 * Annotate output with relative durations between lines
 */
export const rtss = mkPackage(
  nixRaw`pkgs.rtss`,
  "Annotate output with relative durations between lines",
);

/**
 * RTT (Real-Time Transfer) client
 */
export const rtthost = mkPackage(
  nixRaw`pkgs.rtthost`,
  "RTT (Real-Time Transfer) client",
);

/**
 * C++ Reflection Library
 */
export const rttr = mkPackage(
  nixRaw`pkgs.rttr`,
  "C++ Reflection Library",
);

/**
 * Firmware for the newest Realtek rtlwifi codes
 */
export const rtw88_firmware = mkPackage(
  nixRaw`pkgs.rtw88-firmware`,
  "Firmware for the newest Realtek rtlwifi codes",
);

/**
 * Polyglot runtime manager (asdf rust clone)
 */
export const rtx = mkPackage(
  nixRaw`pkgs.rtx`,
  "Polyglot runtime manager (asdf rust clone)",
);

/**
 * A tool to easily work with timezone lookups via a binary, a library, or a server
 */
export const rtz = mkPackage(
  nixRaw`pkgs.rtz`,
  "A tool to easily work with timezone lookups via a binary, a library, or a server",
);

/**
 * Wrapper for LaTeX and friends
 */
export const rubber = mkPackage(
  nixRaw`pkgs.rubber`,
  "Wrapper for LaTeX and friends",
);

/**
 * High quality software library for audio time-stretching and pitch-shifting
 */
export const rubberband = mkPackage(
  nixRaw`pkgs.rubberband`,
  "High quality software library for audio time-stretching and pitch-shifting",
);

/**
 * Rubik Font - is a 5 weight Roman + Italic family.
 */
export const rubik = mkPackage(
  nixRaw`pkgs.rubik`,
  "Rubik Font - is a 5 weight Roman + Italic family.",
);

/**
 * Several programs for working with Rubik's cubes
 */
export const rubiks = mkPackage(
  nixRaw`pkgs.rubiks`,
  "Several programs for working with Rubik's cubes",
);

export const rubocop = mkPackage(
  nixRaw`pkgs.rubocop`,
  "",
);

/**
 * An object-oriented language for quick and easy programming
 */
export const ruby = mkPackage(
  nixRaw`pkgs.ruby`,
  "An object-oriented language for quick and easy programming",
);

export * as rubyPackages from "./rubyPackages/mod.ts";

/**
 * An object-oriented language for quick and easy programming
 */
export const ruby_2_7 = mkPackage(
  nixRaw`pkgs.ruby_2_7`,
  "An object-oriented language for quick and easy programming",
);

/**
 * An object-oriented language for quick and easy programming
 */
export const ruby_3_0 = mkPackage(
  nixRaw`pkgs.ruby_3_0`,
  "An object-oriented language for quick and easy programming",
);

/**
 * An object-oriented language for quick and easy programming
 */
export const ruby_3_1 = mkPackage(
  nixRaw`pkgs.ruby_3_1`,
  "An object-oriented language for quick and easy programming",
);

/**
 * An object-oriented language for quick and easy programming
 */
export const ruby_3_2 = mkPackage(
  nixRaw`pkgs.ruby_3_2`,
  "An object-oriented language for quick and easy programming",
);

/**
 * An object-oriented language for quick and easy programming
 */
export const ruby_3_3 = mkPackage(
  nixRaw`pkgs.ruby_3_3`,
  "An object-oriented language for quick and easy programming",
);

export const ruby_lsp = mkPackage(
  nixRaw`pkgs.ruby-lsp`,
  "",
);

/**
 * Quickly open CLI search results in your favorite editor!
 */
export const ruby_zoom = mkPackage(
  nixRaw`pkgs.ruby-zoom`,
  "Quickly open CLI search results in your favorite editor!",
);

/**
 * A Ruby autoformatter
 */
export const rubyfmt = mkPackage(
  nixRaw`pkgs.rubyfmt`,
  "A Ruby autoformatter",
);

/**
 * High quality CD audio ripper
 */
export const rubyripper = mkPackage(
  nixRaw`pkgs.rubyripper`,
  "High quality CD audio ripper",
);

/**
 * Texture packer and resource bundler
 */
export const rucksack = mkPackage(
  nixRaw`pkgs.rucksack`,
  "Texture packer and resource bundler",
);

/**
 * Utility for managing credentials securely in AWS cloud
 */
export const rucredstash = mkPackage(
  nixRaw`pkgs.rucredstash`,
  "Utility for managing credentials securely in AWS cloud",
);

/**
 * An extremely fast Python linter
 */
export const ruff = mkPackage(
  nixRaw`pkgs.ruff`,
  "An extremely fast Python linter",
);

/**
 * A Language Server Protocol implementation for Ruff
 */
export const ruff_lsp = mkPackage(
  nixRaw`pkgs.ruff-lsp`,
  "A Language Server Protocol implementation for Ruff",
);

/**
 * An Adobe Flash Player emulator written in the Rust programming language.
 */
export const ruffle = mkPackage(
  nixRaw`pkgs.ruffle`,
  "An Adobe Flash Player emulator written in the Rust programming language.",
);

/**
 * Ruby formatter
 */
export const rufo = mkPackage(
  nixRaw`pkgs.rufo`,
  "Ruby formatter",
);

/**
 * Tool to abuse Exchange services
 */
export const ruler = mkPackage(
  nixRaw`pkgs.ruler`,
  "Tool to abuse Exchange services",
);

/**
 * Easily manage and invoke small scripts and wrappers
 */
export const run = mkPackage(
  nixRaw`pkgs.run`,
  "Easily manage and invoke small scripts and wrappers",
);

export const run_npush = mkPackage(
  nixRaw`pkgs.run-npush`,
  "",
);

/**
 * Run an X application scaled via xpra
 */
export const run_scaled = mkPackage(
  nixRaw`pkgs.run-scaled`,
  "Run an X application scaled via xpra",
);

/**
 * A CLI tool for spawning and running containers according to the OCI specification
 */
export const runc = mkPackage(
  nixRaw`pkgs.runc`,
  "A CLI tool for spawning and running containers according to the OCI specification",
);

/**
 * A compiler-wrapper that runs and caches D programs
 */
export const rund = mkPackage(
  nixRaw`pkgs.rund`,
  "A compiler-wrapper that runs and caches D programs",
);

/**
 * An interpreter for the Rune Language, an embeddable dynamic programming language for Rust
 */
export const rune = mkPackage(
  nixRaw`pkgs.rune`,
  "An interpreter for the Rune Language, an embeddable dynamic programming language for Rust",
);

/**
 * A language server for the Rune Language, an embeddable dynamic programming language for Rust
 */
export const rune_languageserver = mkPackage(
  nixRaw`pkgs.rune-languageserver`,
  "A language server for the Rune Language, an embeddable dynamic programming language for Rust",
);

/**
 * Open source Old School RuneScape client
 */
export const runelite = mkPackage(
  nixRaw`pkgs.runelite`,
  "Open source Old School RuneScape client",
);

/**
 * RuneScape Game Client (NXT) - Launcher for RuneScape 3
 */
export const runescape = mkPackage(
  nixRaw`pkgs.runescape`,
  "RuneScape Game Client (NXT) - Launcher for RuneScape 3",
);

/**
 * An efficient way to filter duplicate lines from input, à la uniq
 */
export const runiq = mkPackage(
  nixRaw`pkgs.runiq`,
  "An efficient way to filter duplicate lines from input, à la uniq",
);

/**
 * UNIX init scheme with service supervision
 */
export const runit = mkPackage(
  nixRaw`pkgs.runit`,
  "UNIX init scheme with service supervision",
);

/**
 * A command runner with healthchecks.io integration
 */
export const runitor = mkPackage(
  nixRaw`pkgs.runitor`,
  "A command runner with healthchecks.io integration",
);

/**
 * Execute commands inside your runbooks, docs, and READMEs
 */
export const runme = mkPackage(
  nixRaw`pkgs.runme`,
  "Execute commands inside your runbooks, docs, and READMEs",
);

/**
 * A program for testing if X is running
 */
export const runningx = mkPackage(
  nixRaw`pkgs.runningx`,
  "A program for testing if X is running",
);

/**
 * GNU Bourne-Again Shell, the de facto standard shell on Linux
 */
export const runtimeShellPackage = mkPackage(
  nixRaw`pkgs.runtimeShellPackage`,
  "GNU Bourne-Again Shell, the de facto standard shell on Linux",
);

/**
 * A tool to convert filename encoding inside a ZIP archive
 */
export const runzip = mkPackage(
  nixRaw`pkgs.runzip`,
  "A tool to convert filename encoding inside a ZIP archive",
);

/**
 * Find and replace text in source files
 */
export const ruplacer = mkPackage(
  nixRaw`pkgs.ruplacer`,
  "Find and replace text in source files",
);

/**
 * A C API for Rust's regular expression library
 */
export const rure = mkPackage(
  nixRaw`pkgs.rure`,
  "A C API for Rust's regular expression library",
);

/**
 * Restricted User Shell
 */
export const rush = mkPackage(
  nixRaw`pkgs.rush`,
  "Restricted User Shell",
);

/**
 * A TUI RSS reader with vim-like controls and a local-first, offline-first focus
 */
export const russ = mkPackage(
  nixRaw`pkgs.russ`,
  "A TUI RSS reader with vim-like controls and a local-first, offline-first focus",
);

export * as rustPackages from "./rustPackages/mod.ts";

/**
 * A modular compiler frontend for the Rust language
 */
export const rust_analyzer = mkPackage(
  nixRaw`pkgs.rust-analyzer`,
  "A modular compiler frontend for the Rust language",
);

/**
 * A modular compiler frontend for the Rust language
 */
export const rust_analyzer_unwrapped = mkPackage(
  nixRaw`pkgs.rust-analyzer-unwrapped`,
  "A modular compiler frontend for the Rust language",
);

/**
 * A command-line tool to extract the dependency trees embedded in binaries by cargo-auditable
 */
export const rust_audit_info = mkPackage(
  nixRaw`pkgs.rust-audit-info`,
  "A command-line tool to extract the dependency trees embedded in binaries by cargo-auditable",
);

/**
 * Automatically generates Rust FFI bindings to C (and some C++) libraries
 */
export const rust_bindgen = mkPackage(
  nixRaw`pkgs.rust-bindgen`,
  "Automatically generates Rust FFI bindings to C (and some C++) libraries",
);

/**
 * Automatically generates Rust FFI bindings to C (and some C++) libraries
 */
export const rust_bindgen_unwrapped = mkPackage(
  nixRaw`pkgs.rust-bindgen-unwrapped`,
  "Automatically generates Rust FFI bindings to C (and some C++) libraries",
);

/**
 * A project for generating C bindings from Rust code
 */
export const rust_cbindgen = mkPackage(
  nixRaw`pkgs.rust-cbindgen`,
  "A project for generating C bindings from Rust code",
);

/**
 * Analyze and collect metrics on source code
 */
export const rust_code_analysis = mkPackage(
  nixRaw`pkgs.rust-code-analysis`,
  "Analyze and collect metrics on source code",
);

/**
 * A simple firmware that is designed to be launched from anything that supports loading ELF binaries and running them with the PVH booting standard
 */
export const rust_hypervisor_firmware = mkPackage(
  nixRaw`pkgs.rust-hypervisor-firmware`,
  "A simple firmware that is designed to be launched from anything that supports loading ELF binaries and running them with the PVH booting standard",
);

/**
 * General purpose malloc(3) implementation
 */
export const rust_jemalloc_sys = mkPackage(
  nixRaw`pkgs.rust-jemalloc-sys`,
  "General purpose malloc(3) implementation",
);

/**
 * General purpose malloc(3) implementation
 */
export const rust_jemalloc_sys_unprefixed = mkPackage(
  nixRaw`pkgs.rust-jemalloc-sys-unprefixed`,
  "General purpose malloc(3) implementation",
);

/**
 * Beautiful, useful MOTD generation with zero runtime dependencies
 */
export const rust_motd = mkPackage(
  nixRaw`pkgs.rust-motd`,
  "Beautiful, useful MOTD generation with zero runtime dependencies",
);

/**
 * Generate human readable random names
 */
export const rust_petname = mkPackage(
  nixRaw`pkgs.rust-petname`,
  "Generate human readable random names",
);

/**
 * Run Rust files and expressions as scripts without any setup or compilation step
 */
export const rust_script = mkPackage(
  nixRaw`pkgs.rust-script`,
  "Run Rust files and expressions as scripts without any setup or compilation step",
);

/**
 * Terminal based file explorer
 */
export const rust_traverse = mkPackage(
  nixRaw`pkgs.rust-traverse`,
  "Terminal based file explorer",
);

/**
 * A safe, concurrent, practical language
 */
export const rustc = mkPackage(
  nixRaw`pkgs.rustc`,
  "A safe, concurrent, practical language",
);

/**
 * Rust symbol demangling
 */
export const rustc_demangle = mkPackage(
  nixRaw`pkgs.rustc-demangle`,
  "Rust symbol demangling",
);

/**
 * A safe, concurrent, practical language
 */
export const rustc_wasm32 = mkPackage(
  nixRaw`pkgs.rustc-wasm32`,
  "A safe, concurrent, practical language",
);

/**
 * Port listener and reverse shell
 */
export const rustcat = mkPackage(
  nixRaw`pkgs.rustcat`,
  "Port listener and reverse shell",
);

/**
 * Virtual / remote desktop infrastructure for everyone! Open source TeamViewer / Citrix alternative
 */
export const rustdesk = mkPackage(
  nixRaw`pkgs.rustdesk`,
  "Virtual / remote desktop infrastructure for everyone! Open source TeamViewer / Citrix alternative",
);

/**
 * RustDesk Server Program
 */
export const rustdesk_server = mkPackage(
  nixRaw`pkgs.rustdesk-server`,
  "RustDesk Server Program",
);

/**
 * Demangle Rust symbol names using rustc-demangle
 */
export const rustfilt = mkPackage(
  nixRaw`pkgs.rustfilt`,
  "Demangle Rust symbol names using rustc-demangle",
);

/**
 * A tool for formatting Rust code according to style guidelines
 */
export const rustfmt = mkPackage(
  nixRaw`pkgs.rustfmt`,
  "A tool for formatting Rust code according to style guidelines",
);

/**
 * Minimal command line calendar, similar to cal
 */
export const rusti_cal = mkPackage(
  nixRaw`pkgs.rusti-cal`,
  "Minimal command line calendar, similar to cal",
);

/**
 * fast, encrypted, deduplicated backups powered by pure Rust
 */
export const rustic_rs = mkPackage(
  nixRaw`pkgs.rustic-rs`,
  "fast, encrypted, deduplicated backups powered by pure Rust",
);

/**
 * C-to-rustls bindings
 */
export const rustls_ffi = mkPackage(
  nixRaw`pkgs.rustls-ffi`,
  "C-to-rustls bindings",
);

/**
 * A local audio player and network m3u8 radio player using a terminal interface
 */
export const rustplayer = mkPackage(
  nixRaw`pkgs.rustplayer`,
  "A local audio player and network m3u8 radio player using a terminal interface",
);

/**
 * Python 3 interpreter in written Rust
 */
export const rustpython = mkPackage(
  nixRaw`pkgs.rustpython`,
  "Python 3 interpreter in written Rust",
);

/**
 * Faster Nmap Scanning with Rust
 */
export const rustscan = mkPackage(
  nixRaw`pkgs.rustscan`,
  "Faster Nmap Scanning with Rust",
);

/**
 * The Rust toolchain installer
 */
export const rustup = mkPackage(
  nixRaw`pkgs.rustup`,
  "The Rust toolchain installer",
);

/**
 * Install a rustc master toolchain usable from rustup
 */
export const rustup_toolchain_install_master = mkPackage(
  nixRaw`pkgs.rustup-toolchain-install-master`,
  "Install a rustc master toolchain usable from rustup",
);

/**
 * TUS protocol implementation in Rust.
 */
export const rustus = mkPackage(
  nixRaw`pkgs.rustus`,
  "TUS protocol implementation in Rust.",
);

/**
 * A command-line viewer for documentation generated by rustdoc
 */
export const rusty_man = mkPackage(
  nixRaw`pkgs.rusty-man`,
  "A command-line viewer for documentation generated by rustdoc",
);

/**
 * Simple tool to grab updates for PS3 games, directly from Sony's servers using their updates API
 */
export const rusty_psn = mkPackage(
  nixRaw`pkgs.rusty-psn`,
  "Simple tool to grab updates for PS3 games, directly from Sony's servers using their updates API",
);

/**
 * Simple tool to grab updates for PS3 games, directly from Sony's servers using their updates API
 */
export const rusty_psn_gui = mkPackage(
  nixRaw`pkgs.rusty-psn-gui`,
  "Simple tool to grab updates for PS3 games, directly from Sony's servers using their updates API",
);

/**
 * Access the rust playground right in terminal
 */
export const rustycli = mkPackage(
  nixRaw`pkgs.rustycli`,
  "Access the rust playground right in terminal",
);

/**
 * A minimal file upload/pastebin service
 */
export const rustypaste = mkPackage(
  nixRaw`pkgs.rustypaste`,
  "A minimal file upload/pastebin service",
);

/**
 * A CLI tool for rustypaste
 */
export const rustypaste_cli = mkPackage(
  nixRaw`pkgs.rustypaste-cli`,
  "A CLI tool for rustypaste",
);

/**
 * CLI for organizing Tailwind CSS classes
 */
export const rustywind = mkPackage(
  nixRaw`pkgs.rustywind`,
  "CLI for organizing Tailwind CSS classes",
);

/**
 * Arabic script font for a style of writing used in Niger, West Africa
 */
export const ruwudu = mkPackage(
  nixRaw`pkgs.ruwudu`,
  "Arabic script font for a style of writing used in Niger, West Africa",
);

/**
 * The RISC-V Virtual Machine
 */
export const rvvm = mkPackage(
  nixRaw`pkgs.rvvm`,
  "The RISC-V Virtual Machine",
);

/**
 * Block device and byte copying program similar to dd
 */
export const rw = mkPackage(
  nixRaw`pkgs.rw`,
  "Block device and byte copying program similar to dd",
);

/**
 * Report when files are changed
 */
export const rwc = mkPackage(
  nixRaw`pkgs.rwc`,
  "Report when files are changed",
);

/**
 * Read and write EDID data over an I2C bus
 */
export const rwedid = mkPackage(
  nixRaw`pkgs.rwedid`,
  "Read and write EDID data over an I2C bus",
);

/**
 * Modern and extensible pixel editor implemented in Rust
 */
export const rx = mkPackage(
  nixRaw`pkgs.rx`,
  "Modern and extensible pixel editor implemented in Rust",
);

/**
 * A validating XML parser written in C
 */
export const rxp = mkPackage(
  nixRaw`pkgs.rxp`,
  "A validating XML parser written in C",
);

/**
 * Colour vt102 terminal emulator with less features and lower memory consumption
 */
export const rxvt = mkPackage(
  nixRaw`pkgs.rxvt`,
  "Colour vt102 terminal emulator with less features and lower memory consumption",
);

/**
 * A clone of the well-known terminal emulator rxvt
 */
export const rxvt_unicode = mkPackage(
  nixRaw`pkgs.rxvt-unicode`,
  "A clone of the well-known terminal emulator rxvt",
);

/**
 * A clone of the well-known terminal emulator rxvt
 */
export const rxvt_unicode_emoji = mkPackage(
  nixRaw`pkgs.rxvt-unicode-emoji`,
  "A clone of the well-known terminal emulator rxvt",
);

/**
 * A clone of the well-known terminal emulator rxvt
 */
export const rxvt_unicode_unwrapped = mkPackage(
  nixRaw`pkgs.rxvt-unicode-unwrapped`,
  "A clone of the well-known terminal emulator rxvt",
);

/**
 * A clone of the well-known terminal emulator rxvt
 */
export const rxvt_unicode_unwrapped_emoji = mkPackage(
  nixRaw`pkgs.rxvt-unicode-unwrapped-emoji`,
  "A clone of the well-known terminal emulator rxvt",
);

/**
 * A tool to easily manage python dependencies and environments
 */
export const rye = mkPackage(
  nixRaw`pkgs.rye`,
  "A tool to easily manage python dependencies and environments",
);

/**
 * Player for Mega Drive/Genesis VGM files
 */
export const rymcast = mkPackage(
  nixRaw`pkgs.rymcast`,
  "Player for Mega Drive/Genesis VGM files",
);

/**
 * Easy encrypted file, folder, and text sharing between devices
 */
export const rymdport = mkPackage(
  nixRaw`pkgs.rymdport`,
  "Easy encrypted file, folder, and text sharing between devices",
);

/**
 * Experimental Nintendo Switch Emulator written in C#
 */
export const ryujinx = mkPackage(
  nixRaw`pkgs.ryujinx`,
  "Experimental Nintendo Switch Emulator written in C#",
);

/**
 * Adjust power management settings for Ryzen Mobile Processors.
 */
export const ryzenadj = mkPackage(
  nixRaw`pkgs.ryzenadj`,
  "Adjust power management settings for Ryzen Mobile Processors.",
);

/**
 * Compression program
 */
export const rzip = mkPackage(
  nixRaw`pkgs.rzip`,
  "Compression program",
);

/**
 * A tool for testing the S2idle path CPU Package C-state and S0ix failures
 */
export const s0ix_selftest_tool = mkPackage(
  nixRaw`pkgs.s0ix-selftest-tool`,
  "A tool for testing the S2idle path CPU Package C-state and S0ix failures",
);

/**
 * Computational geometry and spatial indexing on the sphere
 */
export const s2geometry = mkPackage(
  nixRaw`pkgs.s2geometry`,
  "Computational geometry and spatial indexing on the sphere",
);

/**
 * C99 implementation of the TLS/SSL protocols
 */
export const s2n_tls = mkPackage(
  nixRaw`pkgs.s2n-tls`,
  "C99 implementation of the TLS/SSL protocols",
);

/**
 * Store any data in PNG images
 */
export const s2png = mkPackage(
  nixRaw`pkgs.s2png`,
  "Store any data in PNG images",
);

/**
 * Python CLI utility for creating credentials for accessing S3 buckets
 */
export const s3_credentials = mkPackage(
  nixRaw`pkgs.s3-credentials`,
  "Python CLI utility for creating credentials for accessing S3 buckets",
);

/**
 * FUSE-based single file backing store via Amazon S3
 */
export const s3backer = mkPackage(
  nixRaw`pkgs.s3backer`,
  "FUSE-based single file backing store via Amazon S3",
);

/**
 * s3 CLI tool
 */
export const s3bro = mkPackage(
  nixRaw`pkgs.s3bro`,
  "s3 CLI tool",
);

/**
 * Command line tool for managing Amazon S3 and CloudFront services
 */
export const s3cmd = mkPackage(
  nixRaw`pkgs.s3cmd`,
  "Command line tool for managing Amazon S3 and CloudFront services",
);

/**
 * Mount an S3 bucket as filesystem through FUSE
 */
export const s3fs = mkPackage(
  nixRaw`pkgs.s3fs`,
  "Mount an S3 bucket as filesystem through FUSE",
);

/**
 * A full-featured file system for online data storage
 */
export const s3ql = mkPackage(
  nixRaw`pkgs.s3ql`,
  "A full-featured file system for online data storage",
);

/**
 * A s3 cli client with multi configs with diffent provider
 */
export const s3rs = mkPackage(
  nixRaw`pkgs.s3rs`,
  "A s3 cli client with multi configs with diffent provider",
);

/**
 * Super S3 command line tool
 */
export const s4cmd = mkPackage(
  nixRaw`pkgs.s4cmd`,
  "Super S3 command line tool",
);

/**
 * cipher/decipher text within a file
 */
export const s5 = mkPackage(
  nixRaw`pkgs.s5`,
  "cipher/decipher text within a file",
);

/**
 * Parallel S3 and local filesystem execution tool
 */
export const s5cmd = mkPackage(
  nixRaw`pkgs.s5cmd`,
  "Parallel S3 and local filesystem execution tool",
);

/**
 * skarnet.org's small & secure supervision software suite
 */
export const s6 = mkPackage(
  nixRaw`pkgs.s6`,
  "skarnet.org's small & secure supervision software suite",
);

/**
 * A suite of DNS client programs and libraries for Unix systems
 */
export const s6_dns = mkPackage(
  nixRaw`pkgs.s6-dns`,
  "A suite of DNS client programs and libraries for Unix systems",
);

/**
 * A set of minimalistic tools used to create a s6-based init system, including a /sbin/init binary, on a Linux kernel
 */
export const s6_linux_init = mkPackage(
  nixRaw`pkgs.s6-linux-init`,
  "A set of minimalistic tools used to create a s6-based init system, including a /sbin/init binary, on a Linux kernel",
);

/**
 * A set of minimalistic Linux-specific system utilities
 */
export const s6_linux_utils = mkPackage(
  nixRaw`pkgs.s6-linux-utils`,
  "A set of minimalistic Linux-specific system utilities",
);

/**
 * Port of the documentation for the s6 supervision suite to mdoc
 */
export const s6_man_pages = mkPackage(
  nixRaw`pkgs.s6-man-pages`,
  "Port of the documentation for the s6 supervision suite to mdoc",
);

/**
 * A suite of small networking utilities for Unix systems
 */
export const s6_networking = mkPackage(
  nixRaw`pkgs.s6-networking`,
  "A suite of small networking utilities for Unix systems",
);

/**
 * Port of the documentation for the s6-networking suite to mdoc
 */
export const s6_networking_man_pages = mkPackage(
  nixRaw`pkgs.s6-networking-man-pages`,
  "Port of the documentation for the s6-networking suite to mdoc",
);

/**
 * A set of tiny general Unix utilities optimized for simplicity and small size
 */
export const s6_portable_utils = mkPackage(
  nixRaw`pkgs.s6-portable-utils`,
  "A set of tiny general Unix utilities optimized for simplicity and small size",
);

/**
 * Port of the documentation for the s6-portable-utils suite to mdoc
 */
export const s6_portable_utils_man_pages = mkPackage(
  nixRaw`pkgs.s6-portable-utils-man-pages`,
  "Port of the documentation for the s6-portable-utils suite to mdoc",
);

/**
 * A service manager for s6-based systems
 */
export const s6_rc = mkPackage(
  nixRaw`pkgs.s6-rc`,
  "A service manager for s6-based systems",
);

/**
 * mdoc(7) versions of the documentation for the s6-rc service manager
 */
export const s6_rc_man_pages = mkPackage(
  nixRaw`pkgs.s6-rc-man-pages`,
  "mdoc(7) versions of the documentation for the s6-rc service manager",
);

/**
 * Scheme 9 From Empty Space, an interpreter for R4RS Scheme
 */
export const s9fes = mkPackage(
  nixRaw`pkgs.s9fes`,
  "Scheme 9 From Empty Space, an interpreter for R4RS Scheme",
);

/**
 * A very fast tar like tape archiver with improved functionality
 */
export const s_tar = mkPackage(
  nixRaw`pkgs.s-tar`,
  "A very fast tar like tape archiver with improved functionality",
);

/**
 * Stress-Terminal UI monitoring tool
 */
export const s_tui = mkPackage(
  nixRaw`pkgs.s-tui`,
  "Stress-Terminal UI monitoring tool",
);

/**
 * Usenet NZB downloader, par2 repairer and auto extracting server
 */
export const sabnzbd = mkPackage(
  nixRaw`pkgs.sabnzbd`,
  "Usenet NZB downloader, par2 repairer and auto extracting server",
);

/**
 * Smart Automatic Cover Art Downloader
 */
export const sacad = mkPackage(
  nixRaw`pkgs.sacad`,
  "Smart Automatic Cover Art Downloader",
);

/**
 * A terminal gopher client
 */
export const sacc = mkPackage(
  nixRaw`pkgs.sacc`,
  "A terminal gopher client",
);

/**
 * Converts SACD image files, Philips DSDIFF and Sony DSF files to 24-bit high resolution wave files. Handles both DST and DSD streams. 
 */
export const sacd = mkPackage(
  nixRaw`pkgs.sacd`,
  "Converts SACD image files, Philips DSDIFF and Sony DSF files to 24-bit high resolution wave files. Handles both DST and DSD streams. ",
);

/**
 * A standalone contribution to AGILe for steering Pythia 8
 */
export const sacrifice = mkPackage(
  nixRaw`pkgs.sacrifice`,
  "A standalone contribution to AGILe for steering Pythia 8",
);

/**
 * CLI tool to search and replace
 */
export const sad = mkPackage(
  nixRaw`pkgs.sad`,
  "CLI tool to search and replace",
);

/**
 * A Vault CLI
 */
export const safe = mkPackage(
  nixRaw`pkgs.safe`,
  "A Vault CLI",
);

/**
 * Tool intended to prevent the accidental deletion of important files
 */
export const safe_rm = mkPackage(
  nixRaw`pkgs.safe-rm`,
  "Tool intended to prevent the accidental deletion of important files",
);

/**
 * Cross-platform secure TUI secret locker
 */
export const safecloset = mkPackage(
  nixRaw`pkgs.safecloset`,
  "Cross-platform secure TUI secret locker",
);

/**
 * Data recovery tool for damaged hardware
 */
export const safecopy = mkPackage(
  nixRaw`pkgs.safecopy`,
  "Data recovery tool for damaged hardware",
);

/**
 * Protect your eyes from eye strain using this simple and beautiful, yet extensible break reminder. A Free and Open Source Linux alternative to EyeLeo
 */
export const safeeyes = mkPackage(
  nixRaw`pkgs.safeeyes`,
  "Protect your eyes from eye strain using this simple and beautiful, yet extensible break reminder. A Free and Open Source Linux alternative to EyeLeo",
);

/**
 * File open routines to safely open a file when in the presence of an attack
 */
export const safefile = mkPackage(
  nixRaw`pkgs.safefile`,
  "File open routines to safely open a file when in the presence of an attack",
);

/**
 * Checks installed dependencies for known vulnerabilities
 */
export const safety_cli = mkPackage(
  nixRaw`pkgs.safety-cli`,
  "Checks installed dependencies for known vulnerabilities",
);

/**
 * System for Automated Geoscientific Analyses
 */
export const saga = mkPackage(
  nixRaw`pkgs.saga`,
  "System for Automated Geoscientific Analyses",
);

/**
 * Open Source Mathematics Software, free alternative to Magma, Maple, Mathematica, and Matlab
 */
export const sage = mkPackage(
  nixRaw`pkgs.sage`,
  "Open Source Mathematics Software, free alternative to Magma, Maple, Mathematica, and Matlab",
);

/**
 * Open Source Mathematics Software, free alternative to Magma, Maple, Mathematica, and Matlab
 */
export const sageWithDoc = mkPackage(
  nixRaw`pkgs.sageWithDoc`,
  "Open Source Mathematics Software, free alternative to Magma, Maple, Mathematica, and Matlab",
);

/**
 * Embed code, results of computations, and plots from Sage into LaTeX documents
 */
export const sagetex = mkPackage(
  nixRaw`pkgs.sagetex`,
  "Embed code, results of computations, and plots from Sage into LaTeX documents",
);

/**
 * An R6RS/R7RS Scheme system
 */
export const sagittarius_scheme = mkPackage(
  nixRaw`pkgs.sagittarius-scheme`,
  "An R6RS/R7RS Scheme system",
);

/**
 * A command-line submission tool for the UMD CS Submit Server
 */
export const sagoin = mkPackage(
  nixRaw`pkgs.sagoin`,
  "A command-line submission tool for the UMD CS Submit Server",
);

/**
 * A Persian (farsi) Font - فونت (قلم) فارسی ساحل
 */
export const sahel_fonts = mkPackage(
  nixRaw`pkgs.sahel-fonts`,
  "A Persian (farsi) Font - فونت (قلم) فارسی ساحل",
);

/**
 * A formal specification of the RISC-V architecture, written in Sail
 */
export const sail_riscv_rv32 = mkPackage(
  nixRaw`pkgs.sail-riscv-rv32`,
  "A formal specification of the RISC-V architecture, written in Sail",
);

/**
 * A formal specification of the RISC-V architecture, written in Sail
 */
export const sail_riscv_rv64 = mkPackage(
  nixRaw`pkgs.sail-riscv-rv64`,
  "A formal specification of the RISC-V architecture, written in Sail",
);

/**
 * Simulator daemon for autonomous sailing boats
 */
export const sailsd = mkPackage(
  nixRaw`pkgs.sailsd`,
  "Simulator daemon for autonomous sailing boats",
);

/**
 * A terminal emulator based on GTK and VTE
 */
export const sakura = mkPackage(
  nixRaw`pkgs.sakura`,
  "A terminal emulator based on GTK and VTE",
);

/**
 * CLI downloader optimized for speed and early preview
 */
export const saldl = mkPackage(
  nixRaw`pkgs.saldl`,
  "CLI downloader optimized for speed and early preview",
);

/**
 * Software for Saleae logic analyzers
 */
export const saleae_logic = mkPackage(
  nixRaw`pkgs.saleae-logic`,
  "Software for Saleae logic analyzers",
);

/**
 * Software for Saleae logic analyzers
 */
export const saleae_logic_2 = mkPackage(
  nixRaw`pkgs.saleae-logic-2`,
  "Software for Saleae logic analyzers",
);

/**
 * Portable, distributed, remote execution and configuration management system
 */
export const salt = mkPackage(
  nixRaw`pkgs.salt`,
  "Portable, distributed, remote execution and configuration management system",
);

/**
 * Programming tools for Atmel SAM3/7/9 ARM-based microcontrollers
 */
export const sam_ba = mkPackage(
  nixRaw`pkgs.sam-ba`,
  "Programming tools for Atmel SAM3/7/9 ARM-based microcontrollers",
);

/**
 * The standard Windows interoperability suite of programs for Linux and Unix
 */
export const samba = mkPackage(
  nixRaw`pkgs.samba`,
  "The standard Windows interoperability suite of programs for Linux and Unix",
);

/**
 * The standard Windows interoperability suite of programs for Linux and Unix
 */
export const samba4 = mkPackage(
  nixRaw`pkgs.samba4`,
  "The standard Windows interoperability suite of programs for Linux and Unix",
);

/**
 * The standard Windows interoperability suite of programs for Linux and Unix
 */
export const samba4Full = mkPackage(
  nixRaw`pkgs.samba4Full`,
  "The standard Windows interoperability suite of programs for Linux and Unix",
);

/**
 * The standard Windows interoperability suite of programs for Linux and Unix
 */
export const sambaFull = mkPackage(
  nixRaw`pkgs.sambaFull`,
  "The standard Windows interoperability suite of programs for Linux and Unix",
);

/**
 * SAM/BAM processing tool
 */
export const sambamba = mkPackage(
  nixRaw`pkgs.sambamba`,
  "SAM/BAM processing tool",
);

/**
 * Tool for marking duplicates and extracting discordant/split reads from SAM/BAM files
 */
export const samblaster = mkPackage(
  nixRaw`pkgs.samblaster`,
  "Tool for marking duplicates and extracting discordant/split reads from SAM/BAM files",
);

/**
 * Game Boy, Game Boy Color, and Super Game Boy emulator
 */
export const sameboy = mkPackage(
  nixRaw`pkgs.sameboy`,
  "Game Boy, Game Boy Color, and Super Game Boy emulator",
);

/**
 * A Persian (Farsi) Font - فونت (قلم) فارسی صمیم
 */
export const samim_fonts = mkPackage(
  nixRaw`pkgs.samim-fonts`,
  "A Persian (Farsi) Font - فونت (قلم) فارسی صمیم",
);

/**
 * CLI tool which enables you to login and retrieve AWS temporary credentials using a SAML IDP
 */
export const saml2aws = mkPackage(
  nixRaw`pkgs.saml2aws`,
  "CLI tool which enables you to login and retrieve AWS temporary credentials using a SAML IDP",
);

/**
 * Tool to extract useful data from documents
 */
export const sammler = mkPackage(
  nixRaw`pkgs.sammler`,
  "Tool to extract useful data from documents",
);

/**
 * A custom sample mashing app
 */
export const samplebrain = mkPackage(
  nixRaw`pkgs.samplebrain`,
  "A custom sample mashing app",
);

/**
 * Tool for shell commands execution, visualization and alerting
 */
export const sampler = mkPackage(
  nixRaw`pkgs.sampler`,
  "Tool for shell commands execution, visualization and alerting",
);

/**
 * Send copies of (UDP) datagrams to multiple receivers
 */
export const samplicator = mkPackage(
  nixRaw`pkgs.samplicator`,
  "Send copies of (UDP) datagrams to multiple receivers",
);

/**
 * An old-school all-digital polyphonic sampler synthesizer with stereo fx
 */
export const samplv1 = mkPackage(
  nixRaw`pkgs.samplv1`,
  "An old-school all-digital polyphonic sampler synthesizer with stereo fx",
);

/**
 * A command line profiler for macOS and Linux
 */
export const samply = mkPackage(
  nixRaw`pkgs.samply`,
  "A command line profiler for macOS and Linux",
);

/**
 * Unicode-compliant Grantha font
 */
export const sampradaya = mkPackage(
  nixRaw`pkgs.sampradaya`,
  "Unicode-compliant Grantha font",
);

/**
 * Steam Achievement Manager For Linux. Rewritten in C++
 */
export const samrewritten = mkPackage(
  nixRaw`pkgs.samrewritten`,
  "Steam Achievement Manager For Linux. Rewritten in C++",
);

/**
 * Samsung's Linux printing drivers; includes binaries without source code
 */
export const samsung_unified_linux_driver = mkPackage(
  nixRaw`pkgs.samsung-unified-linux-driver`,
  "Samsung's Linux printing drivers; includes binaries without source code",
);

/**
 * Unified Linux Driver for Samsung printers and scanners
 */
export const samsung_unified_linux_driver_1_00_36 = mkPackage(
  nixRaw`pkgs.samsung-unified-linux-driver_1_00_36`,
  "Unified Linux Driver for Samsung printers and scanners",
);

/**
 * Unified Linux Driver for Samsung printers and scanners
 */
export const samsung_unified_linux_driver_1_00_37 = mkPackage(
  nixRaw`pkgs.samsung-unified-linux-driver_1_00_37`,
  "Unified Linux Driver for Samsung printers and scanners",
);

/**
 * Samsung's Linux printing drivers; includes binaries without source code
 */
export const samsung_unified_linux_driver_4_01_17 = mkPackage(
  nixRaw`pkgs.samsung-unified-linux-driver_4_01_17`,
  "Samsung's Linux printing drivers; includes binaries without source code",
);

/**
 * Tools for manipulating SAM/BAM/CRAM format
 */
export const samtools = mkPackage(
  nixRaw`pkgs.samtools`,
  "Tools for manipulating SAM/BAM/CRAM format",
);

/**
 * Tools for manipulating SAM/BAM/CRAM format
 */
export const samtools_0_1_19 = mkPackage(
  nixRaw`pkgs.samtools_0_1_19`,
  "Tools for manipulating SAM/BAM/CRAM format",
);

/**
 * ninja-compatible build tool written in C
 */
export const samurai = mkPackage(
  nixRaw`pkgs.samurai`,
  "ninja-compatible build tool written in C",
);

/**
 * Test the 16 terminal colors in all combinations
 */
export const sanctity = mkPackage(
  nixRaw`pkgs.sanctity`,
  "Test the 16 terminal colors in all combinations",
);

/**
 * A virtual file system for sandboxing
 */
export const sandboxfs = mkPackage(
  nixRaw`pkgs.sandboxfs`,
  "A virtual file system for sandboxing",
);

/**
 * Scanner Access Now Easy - Apple AirScan (eSCL) driver
 */
export const sane_airscan = mkPackage(
  nixRaw`pkgs.sane-airscan`,
  "Scanner Access Now Easy - Apple AirScan (eSCL) driver",
);

/**
 * SANE (Scanner Access Now Easy) backends
 */
export const sane_backends = mkPackage(
  nixRaw`pkgs.sane-backends`,
  "SANE (Scanner Access Now Easy) backends",
);

/**
 * Scanner Access Now Easy
 */
export const sane_frontends = mkPackage(
  nixRaw`pkgs.sane-frontends`,
  "Scanner Access Now Easy",
);

/**
 * A command-line tool that converts images and videos into a format that can be displayed in ComputerCraft
 */
export const sanjuuni = mkPackage(
  nixRaw`pkgs.sanjuuni`,
  "A command-line tool that converts images and videos into a format that can be displayed in ComputerCraft",
);

/**
 * A policy-driven snapshot management tool for ZFS filesystems
 */
export const sanoid = mkPackage(
  nixRaw`pkgs.sanoid`,
  "A policy-driven snapshot management tool for ZFS filesystems",
);

/**
 * A Scalable, User-Friendly Source Control System
 */
export const sapling = mkPackage(
  nixRaw`pkgs.sapling`,
  "A Scalable, User-Friendly Source Control System",
);

/**
 * A slightly-condensed looped Thai and sans serif Latin typeface for communications
 */
export const sarabun_font = mkPackage(
  nixRaw`pkgs.sarabun-font`,
  "A slightly-condensed looped Thai and sans serif Latin typeface for communications",
);

/**
 * A CJK programming font based on Iosevka and Source Han Sans
 */
export const sarasa_gothic = mkPackage(
  nixRaw`pkgs.sarasa-gothic`,
  "A CJK programming font based on Iosevka and Source Han Sans",
);

/**
 * Set of patches to the standard unsquashfs utility (part of squashfs-tools) that attempts to add support for as many hacked-up vendor-specific SquashFS implementations as possible
 */
export const sasquatch = mkPackage(
  nixRaw`pkgs.sasquatch`,
  "Set of patches to the standard unsquashfs utility (part of squashfs-tools) that attempts to add support for as many hacked-up vendor-specific SquashFS implementations as possible",
);

/**
 * Tools and Ruby libraries for the CSS3 extension languages: Sass and SCSS
 */
export const sass = mkPackage(
  nixRaw`pkgs.sass`,
  "Tools and Ruby libraries for the CSS3 extension languages: Sass and SCSS",
);

/**
 * A front-end for libsass
 */
export const sassc = mkPackage(
  nixRaw`pkgs.sassc`,
  "A front-end for libsass",
);

/**
 * A set of command-line tools to ease the administration of Serial Attached SCSI (SAS) fabrics
 */
export const sasutils = mkPackage(
  nixRaw`pkgs.sasutils`,
  "A set of command-line tools to ease the administration of Serial Attached SCSI (SAS) fabrics",
);

/**
 * Fitting and data analysis for small angle scattering data
 */
export const sasview = mkPackage(
  nixRaw`pkgs.sasview`,
  "Fitting and data analysis for small angle scattering data",
);

/**
 * Automated theorem prover for higher-order logic
 */
export const satallax = mkPackage(
  nixRaw`pkgs.satallax`,
  "Automated theorem prover for higher-order logic",
);

/**
 * A statically-typed, functional typesetting system
 */
export const satysfi = mkPackage(
  nixRaw`pkgs.satysfi`,
  "A statically-typed, functional typesetting system",
);

/**
 * A secure tunneling app for executing tests securely when testing behind firewalls
 */
export const sauce_connect = mkPackage(
  nixRaw`pkgs.sauce-connect`,
  "A secure tunneling app for executing tests securely when testing behind firewalls",
);

/**
 * A free multiplayer & singleplayer first person shooter, the successor of the Cube FPS
 */
export const sauerbraten = mkPackage(
  nixRaw`pkgs.sauerbraten`,
  "A free multiplayer & singleplayer first person shooter, the successor of the Cube FPS",
);

/**
 * A simple Python wrapper for archive.org's "Save Page Now" capturing service
 */
export const savepagenow = mkPackage(
  nixRaw`pkgs.savepagenow`,
  "A simple Python wrapper for archive.org's \"Save Page Now\" capturing service",
);

/**
 * QT based cross platform canbus tool
 */
export const savvycan = mkPackage(
  nixRaw`pkgs.savvycan`,
  "QT based cross platform canbus tool",
);

/**
 * Tools for software verification and analysis
 */
export const saw_tools = mkPackage(
  nixRaw`pkgs.saw-tools`,
  "Tools for software verification and analysis",
);

/**
 * An extensible, Lisp-based window manager
 */
export const sawfish = mkPackage(
  nixRaw`pkgs.sawfish`,
  "An extensible, Lisp-based window manager",
);

/**
 * Pretty-print .class files
 */
export const sawjap = mkPackage(
  nixRaw`pkgs.sawjap`,
  "Pretty-print .class files",
);

/**
 * XSLT 1.0 processor
 */
export const saxon = mkPackage(
  nixRaw`pkgs.saxon`,
  "XSLT 1.0 processor",
);

/**
 * Processor for XSLT 3.0, XPath 2.0 and 3.1, and XQuery 3.1
 */
export const saxon_he = mkPackage(
  nixRaw`pkgs.saxon-he`,
  "Processor for XSLT 3.0, XPath 2.0 and 3.1, and XQuery 3.1",
);

/**
 * Complete and conformant processor of XSLT 2.0, XQuery 1.0, and XPath 2.0
 */
export const saxonb = mkPackage(
  nixRaw`pkgs.saxonb`,
  "Complete and conformant processor of XSLT 2.0, XQuery 1.0, and XPath 2.0",
);

/**
 * Complete and conformant processor of XSLT 2.0, XQuery 1.0, and XPath 2.0
 */
export const saxonb_8_8 = mkPackage(
  nixRaw`pkgs.saxonb_8_8`,
  "Complete and conformant processor of XSLT 2.0, XQuery 1.0, and XPath 2.0",
);

/**
 * Complete and conformant processor of XSLT 2.0, XQuery 1.0, and XPath 2.0
 */
export const saxonb_9_1 = mkPackage(
  nixRaw`pkgs.saxonb_9_1`,
  "Complete and conformant processor of XSLT 2.0, XQuery 1.0, and XPath 2.0",
);

/**
 * Sayonara music player
 */
export const sayonara = mkPackage(
  nixRaw`pkgs.sayonara`,
  "Sayonara music player",
);

/**
 * Binaural sound generator
 */
export const sbagen = mkPackage(
  nixRaw`pkgs.sbagen`,
  "Binaural sound generator",
);

/**
 * SubBand Codec Library
 */
export const sbc = mkPackage(
  nixRaw`pkgs.sbc`,
  "SubBand Codec Library",
);

/**
 * Lisp compiler
 */
export const sbcl = mkPackage(
  nixRaw`pkgs.sbcl`,
  "Lisp compiler",
);

/**
 * Lisp compiler
 */
export const sbclBootstrap = mkPackage(
  nixRaw`pkgs.sbclBootstrap`,
  "Lisp compiler",
);

/**
 * Lisp compiler
 */
export const sbcl_2_3_8 = mkPackage(
  nixRaw`pkgs.sbcl_2_3_8`,
  "Lisp compiler",
);

/**
 * Lisp compiler
 */
export const sbcl_2_3_9 = mkPackage(
  nixRaw`pkgs.sbcl_2_3_9`,
  "Lisp compiler",
);

/**
 * Secure Boot key manager
 */
export const sbctl = mkPackage(
  nixRaw`pkgs.sbctl`,
  "Secure Boot key manager",
);

/**
 * Small Footprint CIM Client Library
 */
export const sblim_sfcc = mkPackage(
  nixRaw`pkgs.sblim-sfcc`,
  "Small Footprint CIM Client Library",
);

/**
 * Generate SBOMs for nix targets
 */
export const sbomnix = mkPackage(
  nixRaw`pkgs.sbomnix`,
  "Generate SBOMs for nix targets",
);

/**
 * Simple background setter with 200 lines of code
 */
export const sbs = mkPackage(
  nixRaw`pkgs.sbs`,
  "Simple background setter with 200 lines of code",
);

/**
 * Tools for maintaining UEFI signature databases
 */
export const sbsigntool = mkPackage(
  nixRaw`pkgs.sbsigntool`,
  "Tools for maintaining UEFI signature databases",
);

/**
 * A build tool for Scala, Java and more
 */
export const sbt = mkPackage(
  nixRaw`pkgs.sbt`,
  "A build tool for Scala, Java and more",
);

/**
 * A more featureful runner for sbt, the simple/scala/standard build tool
 */
export const sbt_extras = mkPackage(
  nixRaw`pkgs.sbt-extras`,
  "A more featureful runner for sbt, the simple/scala/standard build tool",
);

/**
 * A build tool for Scala, Java and more
 */
export const sbt_with_scala_native = mkPackage(
  nixRaw`pkgs.sbt-with-scala-native`,
  "A build tool for Scala, Java and more",
);

/**
 * Atari ST and Amiga music player
 */
export const sc68 = mkPackage(
  nixRaw`pkgs.sc68`,
  "Atari ST and Amiga music player",
);

/**
 * User-mode driver and GUI for Steam Controller and other controllers
 */
export const sc_controller = mkPackage(
  nixRaw`pkgs.sc-controller`,
  "User-mode driver and GUI for Steam Controller and other controllers",
);

/**
 * An ncurses spreadsheet program for terminal
 */
export const sc_im = mkPackage(
  nixRaw`pkgs.sc-im`,
  "An ncurses spreadsheet program for terminal",
);

/**
 * An experimental static code analyser for OpenSCAD
 */
export const sca2d = mkPackage(
  nixRaw`pkgs.sca2d`,
  "An experimental static code analyser for OpenSCAD",
);

/**
 * A general purpose programming language
 */
export const scala = mkPackage(
  nixRaw`pkgs.scala`,
  "A general purpose programming language",
);

/**
 * A general purpose programming language
 */
export const scala_2_10 = mkPackage(
  nixRaw`pkgs.scala_2_10`,
  "A general purpose programming language",
);

/**
 * A general purpose programming language
 */
export const scala_2_11 = mkPackage(
  nixRaw`pkgs.scala_2_11`,
  "A general purpose programming language",
);

/**
 * A general purpose programming language
 */
export const scala_2_12 = mkPackage(
  nixRaw`pkgs.scala_2_12`,
  "A general purpose programming language",
);

/**
 * A general purpose programming language
 */
export const scala_2_13 = mkPackage(
  nixRaw`pkgs.scala_2_13`,
  "A general purpose programming language",
);

/**
 * Research platform for new language concepts and compiler technologies for Scala
 */
export const scala_3 = mkPackage(
  nixRaw`pkgs.scala_3`,
  "Research platform for new language concepts and compiler technologies for Scala",
);

/**
 * Command-line tool to interact with the Scala language
 */
export const scala_cli = mkPackage(
  nixRaw`pkgs.scala-cli`,
  "Command-line tool to interact with the Scala language",
);

/**
 * An alternative implementation of the Scala distribution's runners
 */
export const scala_runners = mkPackage(
  nixRaw`pkgs.scala-runners`,
  "An alternative implementation of the Scala distribution's runners",
);

/**
 * Update your Scala dependencies interactively
 */
export const scala_update = mkPackage(
  nixRaw`pkgs.scala-update`,
  "Update your Scala dependencies interactively",
);

/**
 * Refactoring and linting tool for Scala
 */
export const scalafix = mkPackage(
  nixRaw`pkgs.scalafix`,
  "Refactoring and linting tool for Scala",
);

/**
 * Opinionated code formatter for Scala
 */
export const scalafmt = mkPackage(
  nixRaw`pkgs.scalafmt`,
  "Opinionated code formatter for Scala",
);

/**
 * Library of high-performance linear algebra routines for parallel distributed memory machines
 */
export const scalapack = mkPackage(
  nixRaw`pkgs.scalapack`,
  "Library of high-performance linear algebra routines for parallel distributed memory machines",
);

/**
 * ScaleFT provides Zero Trust software which you can use to secure your internal servers and services
 */
export const scaleft = mkPackage(
  nixRaw`pkgs.scaleft`,
  "ScaleFT provides Zero Trust software which you can use to secure your internal servers and services",
);

/**
 * Interact with Scaleway API from the command line
 */
export const scaleway_cli = mkPackage(
  nixRaw`pkgs.scaleway-cli`,
  "Interact with Scaleway API from the command line",
);

/**
 * Command line client for the Scalingo PaaS
 */
export const scalingo = mkPackage(
  nixRaw`pkgs.scalingo`,
  "Command line client for the Scalingo PaaS",
);

/**
 * Scalable Linear Programming Library
 */
export const scalp = mkPackage(
  nixRaw`pkgs.scalp`,
  "Scalable Linear Programming Library",
);

/**
 * A command-line tool that communicates directly with the Scalr API.
 */
export const scalr_cli = mkPackage(
  nixRaw`pkgs.scalr-cli`,
  "A command-line tool that communicates directly with the Scalr API.",
);

/**
 * Scanner button daemon
 */
export const scanbd = mkPackage(
  nixRaw`pkgs.scanbd`,
  "Scanner button daemon",
);

/**
 * Memory scanner for finding and poking addresses in executing processes
 */
export const scanmem = mkPackage(
  nixRaw`pkgs.scanmem`,
  "Memory scanner for finding and poking addresses in executing processes",
);

/**
 * Interactive post-processing tool for scanned pages (vigri's fork)
 */
export const scantailor_advanced = mkPackage(
  nixRaw`pkgs.scantailor-advanced`,
  "Interactive post-processing tool for scanned pages (vigri's fork)",
);

/**
 * Interactive post-processing tool for scanned pages
 */
export const scantailor_universal = mkPackage(
  nixRaw`pkgs.scantailor-universal`,
  "Interactive post-processing tool for scanned pages",
);

/**
 * Electrical power consumption metrology agent
 */
export const scaphandre = mkPackage(
  nixRaw`pkgs.scaphandre`,
  "Electrical power consumption metrology agent",
);

/**
 * Hollow Knight mod installer and manager
 */
export const scarab = mkPackage(
  nixRaw`pkgs.scarab`,
  "Hollow Knight mod installer and manager",
);

/**
 * A very fast accurate code counter with complexity calculations and COCOMO estimates written in pure Go
 */
export const scc = mkPackage(
  nixRaw`pkgs.scc`,
  "A very fast accurate code counter with complexity calculations and COCOMO estimates written in pure Go",
);

/**
 * Ccache with Cloud Storage
 */
export const sccache = mkPackage(
  nixRaw`pkgs.sccache`,
  "Ccache with Cloud Storage",
);

/**
 * scd2html generates HTML from scdoc source files
 */
export const scd2html = mkPackage(
  nixRaw`pkgs.scd2html`,
  "scd2html generates HTML from scdoc source files",
);

/**
 * Download Music from Souncloud
 */
export const scdl = mkPackage(
  nixRaw`pkgs.scdl`,
  "Download Music from Souncloud",
);

/**
 * A simple man page generator written in C99 for POSIX systems
 */
export const scdoc = mkPackage(
  nixRaw`pkgs.scdoc`,
  "A simple man page generator written in C99 for POSIX systems",
);

/**
 * A visual, drag'n'drop, layout tool for designing JavaFX application user interfaces.
 */
export const scenebuilder = mkPackage(
  nixRaw`pkgs.scenebuilder`,
  "A visual, drag'n'drop, layout tool for designing JavaFX application user interfaces.",
);

/**
 * JavaFx application to visualize and modify the scenegraph of running JavaFx applications.
 */
export const scenic_view = mkPackage(
  nixRaw`pkgs.scenic-view`,
  "JavaFx application to visualize and modify the scenegraph of running JavaFx applications.",
);

/**
 * SVGinOT color font builder
 */
export const scfbuild = mkPackage(
  nixRaw`pkgs.scfbuild`,
  "SVGinOT color font builder",
);

/**
 * Query or alter a process' scheduling policy under Linux
 */
export const schedtool = mkPackage(
  nixRaw`pkgs.schedtool`,
  "Query or alter a process' scheduling policy under Linux",
);

/**
 * A font designed in a similar style to traditional Naskh typefaces
 */
export const scheherazade = mkPackage(
  nixRaw`pkgs.scheherazade`,
  "A font designed in a similar style to traditional Naskh typefaces",
);

/**
 * A font designed in a similar style to traditional Naskh typefaces
 */
export const scheherazade_new = mkPackage(
  nixRaw`pkgs.scheherazade-new`,
  "A font designed in a similar style to traditional Naskh typefaces",
);

/**
 * Utilities to manage schema in .schema and .ldif format
 */
export const schema2ldif = mkPackage(
  nixRaw`pkgs.schema2ldif`,
  "Utilities to manage schema in .schema and .ldif format",
);

/**
 * Database schema discovery and comprehension tool
 */
export const schemacrawler = mkPackage(
  nixRaw`pkgs.schemacrawler`,
  "Database schema discovery and comprehension tool",
);

/**
 * Document your database simply and easily
 */
export const schemaspy = mkPackage(
  nixRaw`pkgs.schemaspy`,
  "Document your database simply and easily",
);

/**
 * Scheme 48 interpreter for R5RS
 */
export const scheme48 = mkPackage(
  nixRaw`pkgs.scheme48`,
  "Scheme 48 interpreter for R5RS",
);

/**
 * Structured access to bytevector contents
 */
export const scheme_bytestructures = mkPackage(
  nixRaw`pkgs.scheme-bytestructures`,
  "Structured access to bytevector contents",
);

/**
 * Unix manual pages for R6RS and R7RS
 */
export const scheme_manpages = mkPackage(
  nixRaw`pkgs.scheme-manpages`,
  "Unix manual pages for R6RS and R7RS",
);

/**
 * Edit GtkSourceView style-schemes for an application or platform
 */
export const schemes = mkPackage(
  nixRaw`pkgs.schemes`,
  "Edit GtkSourceView style-schemes for an application or platform",
);

/**
 * Matrix client / Element Desktop fork
 */
export const schildichat_desktop = mkPackage(
  nixRaw`pkgs.schildichat-desktop`,
  "Matrix client / Element Desktop fork",
);

export const schildichat_desktop_wayland = mkPackage(
  nixRaw`pkgs.schildichat-desktop-wayland`,
  "",
);

/**
 * Matrix client / Element Web fork
 */
export const schildichat_web = mkPackage(
  nixRaw`pkgs.schildichat-web`,
  "Matrix client / Element Web fork",
);

/**
 * Music tracker application, free reimplementation of Impulse Tracker
 */
export const schismtracker = mkPackage(
  nixRaw`pkgs.schismtracker`,
  "Music tracker application, free reimplementation of Impulse Tracker",
);

/**
 * Schleuder is an encrypting mailing list manager with remailing-capabilities
 */
export const schleuder = mkPackage(
  nixRaw`pkgs.schleuder`,
  "Schleuder is an encrypting mailing list manager with remailing-capabilities",
);

/**
 * A command line tool to create and manage schleuder-lists
 */
export const schleuder_cli = mkPackage(
  nixRaw`pkgs.schleuder-cli`,
  "A command line tool to create and manage schleuder-lists",
);

/**
 * An implementation of the Dirac video codec in ANSI C
 */
export const schroedinger = mkPackage(
  nixRaw`pkgs.schroedinger`,
  "An implementation of the Dirac video codec in ANSI C",
);

/**
 * Chess database with play and training functionality
 */
export const scid = mkPackage(
  nixRaw`pkgs.scid`,
  "Chess database with play and training functionality",
);

/**
 * Chess database with play and training functionality
 */
export const scid_vs_pc = mkPackage(
  nixRaw`pkgs.scid-vs-pc`,
  "Chess database with play and training functionality",
);

/**
 * Tall and condensed bitmap font for geeks
 */
export const scientifica = mkPackage(
  nixRaw`pkgs.scientifica`,
  "Tall and condensed bitmap font for geeks",
);

/**
 * Scientific software package for numerical computations (Matlab lookalike)
 */
export const scilab_bin = mkPackage(
  nixRaw`pkgs.scilab-bin`,
  "Scientific software package for numerical computations (Matlab lookalike)",
);

/**
 * Information gathering tool for DNS, ports and more
 */
export const scilla = mkPackage(
  nixRaw`pkgs.scilla`,
  "Information gathering tool for DNS, ports and more",
);

/**
 * Scientific and numerical computing benchmark (ANSI C version)
 */
export const scimark = mkPackage(
  nixRaw`pkgs.scimark`,
  "Scientific and numerical computing benchmark (ANSI C version)",
);

/**
 * SCIP Code Intelligence Protocol CLI
 */
export const scip = mkPackage(
  nixRaw`pkgs.scip`,
  "SCIP Code Intelligence Protocol CLI",
);

/**
 * SCIntilla based Text Editor
 */
export const scite = mkPackage(
  nixRaw`pkgs.scite`,
  "SCIntilla based Text Editor",
);

/**
 * Simple terminal user interface for Signal
 */
export const scli = mkPackage(
  nixRaw`pkgs.scli`,
  "Simple terminal user interface for Signal",
);

/**
 * PCSC drivers for linux, for the SCM SCR3310 v2.0 card and others
 */
export const scmccid = mkPackage(
  nixRaw`pkgs.scmccid`,
  "PCSC drivers for linux, for the SCM SCR3310 v2.0 card and others",
);

/**
 * Add numbered shortcuts to common git commands
 */
export const scmpuff = mkPackage(
  nixRaw`pkgs.scmpuff`,
  "Add numbered shortcuts to common git commands",
);

/**
 * An improved, cross-platform substitute for Make
 */
export const scons = mkPackage(
  nixRaw`pkgs.scons`,
  "An improved, cross-platform substitute for Make",
);

/**
 * A migration path to C++ library extensions scope_exit, scope_fail, scope_success, unique_resource
 */
export const scope_lite = mkPackage(
  nixRaw`pkgs.scope-lite`,
  "A migration path to C++ library extensions scope_exit, scope_fail, scope_success, unique_resource",
);

/**
 * 3D Clone of the classic Scorched Earth
 */
export const scorched3d = mkPackage(
  nixRaw`pkgs.scorched3d`,
  "3D Clone of the classic Scorched Earth",
);

/**
 * Security health metrics for Open Source
 */
export const scorecard = mkPackage(
  nixRaw`pkgs.scorecard`,
  "Security health metrics for Open Source",
);

/**
 * Graph and mesh/hypergraph partitioning, graph clustering, and sparse matrix ordering
 */
export const scotch = mkPackage(
  nixRaw`pkgs.scotch`,
  "Graph and mesh/hypergraph partitioning, graph clustering, and sparse matrix ordering",
);

/**
 * An SVG Optimizer / Cleaner 
 */
export const scour = mkPackage(
  nixRaw`pkgs.scour`,
  "An SVG Optimizer / Cleaner ",
);

/**
 * Spell checker oriented word lists
 */
export const scowl = mkPackage(
  nixRaw`pkgs.scowl`,
  "Spell checker oriented word lists",
);

/**
 * A shell that only permits scp and sftp-server
 */
export const scponly = mkPackage(
  nixRaw`pkgs.scponly`,
  "A shell that only permits scp and sftp-server",
);

/**
 * A tool to query HTML files with CSS selectors
 */
export const scraper = mkPackage(
  nixRaw`pkgs.scraper`,
  "A tool to query HTML files with CSS selectors",
);

/**
 * Display and control Android devices over USB or TCP/IP
 */
export const scrcpy = mkPackage(
  nixRaw`pkgs.scrcpy`,
  "Display and control Android devices over USB or TCP/IP",
);

/**
 * Audio receiver for the Scream virtual network sound card
 */
export const scream = mkPackage(
  nixRaw`pkgs.scream`,
  "Audio receiver for the Scream virtual network sound card",
);

/**
 * A window manager that multiplexes a physical terminal
 */
export const screen = mkPackage(
  nixRaw`pkgs.screen`,
  "A window manager that multiplexes a physical terminal",
);

/**
 * Displays a short text fullscreen in an X11 window
 */
export const screen_message = mkPackage(
  nixRaw`pkgs.screen-message`,
  "Displays a short text fullscreen in an X11 window",
);

/**
 * Fetches system/theme information in terminal for Linux desktop screenshots
 */
export const screenfetch = mkPackage(
  nixRaw`pkgs.screenfetch`,
  "Fetches system/theme information in terminal for Linux desktop screenshots",
);

/**
 * A screencast tool to display your keys inspired by Screenflick
 */
export const screenkey = mkPackage(
  nixRaw`pkgs.screenkey`,
  "A screencast tool to display your keys inspired by Screenflick",
);

/**
 * A simple screen testing tool
 */
export const screentest = mkPackage(
  nixRaw`pkgs.screentest`,
  "A simple screen testing tool",
);

/**
 * Desktop Publishing (DTP) and Layout program for Linux
 */
export const scribus = mkPackage(
  nixRaw`pkgs.scribus`,
  "Desktop Publishing (DTP) and Layout program for Linux",
);

/**
 * Desktop Publishing (DTP) and Layout program for Linux
 */
export const scribus_1_5 = mkPackage(
  nixRaw`pkgs.scribus_1_5`,
  "Desktop Publishing (DTP) and Layout program for Linux",
);

/**
 * A cozy nest for your scripts
 */
export const script_directory = mkPackage(
  nixRaw`pkgs.script-directory`,
  "A cozy nest for your scripts",
);

/**
 * A set of JavaScript libraries to enhance the user interface of web sites
 */
export const scriptaculous = mkPackage(
  nixRaw`pkgs.scriptaculous`,
  "A set of JavaScript libraries to enhance the user interface of web sites",
);

/**
 * A language-agnostic "shebang interpreter" that enables you to write scripts in compiled languages
 */
export const scriptisto = mkPackage(
  nixRaw`pkgs.scriptisto`,
  "A language-agnostic \"shebang interpreter\" that enables you to write scripts in compiled languages",
);

/**
 * Command-line tool for helping developers maintain useful changelogs.
 */
export const scriv = mkPackage(
  nixRaw`pkgs.scriv`,
  "Command-line tool for helping developers maintain useful changelogs.",
);

/**
 * A strategy collectible card game
 */
export const scrolls = mkPackage(
  nixRaw`pkgs.scrolls`,
  "A strategy collectible card game",
);

/**
 * A command-line screen capture utility
 */
export const scrot = mkPackage(
  nixRaw`pkgs.scrot`,
  "A command-line screen capture utility",
);

/**
 * Disk overwrite utility
 */
export const scrub = mkPackage(
  nixRaw`pkgs.scrub`,
  "Disk overwrite utility",
);

/**
 * Code analysis server for the Crystal programming language
 */
export const scry = mkPackage(
  nixRaw`pkgs.scry`,
  "Code analysis server for the Crystal programming language",
);

/**
 * A modern Prolog implementation written mostly in Rust
 */
export const scryer_prolog = mkPackage(
  nixRaw`pkgs.scryer-prolog`,
  "A modern Prolog implementation written mostly in Rust",
);

/**
 * Encryption utility
 */
export const scrypt = mkPackage(
  nixRaw`pkgs.scrypt`,
  "Encryption utility",
);

/**
 * Splitting Conic Solver
 */
export const scs = mkPackage(
  nixRaw`pkgs.scs`,
  "Splitting Conic Solver",
);

/**
 * A Scheme shell
 */
export const scsh = mkPackage(
  nixRaw`pkgs.scsh`,
  "A Scheme shell",
);

/**
 * A tool to help keep your SCSS files clean and readable
 */
export const scss_lint = mkPackage(
  nixRaw`pkgs.scss-lint`,
  "A tool to help keep your SCSS files clean and readable",
);

/**
 * A minimal utility to set display colour temperature
 */
export const sct = mkPackage(
  nixRaw`pkgs.sct`,
  "A minimal utility to set display colour temperature",
);

/**
 * Non-official desktop client for Slack
 */
export const scudcloud = mkPackage(
  nixRaw`pkgs.scudcloud`,
  "Non-official desktop client for Slack",
);

/**
 * Program to run certain classic graphical point-and-click adventure games (such as Monkey Island)
 */
export const scummvm = mkPackage(
  nixRaw`pkgs.scummvm`,
  "Program to run certain classic graphical point-and-click adventure games (such as Monkey Island)",
);

/**
 * Intuitive find & replace CLI (sed alternative)
 */
export const sd = mkPackage(
  nixRaw`pkgs.sd`,
  "Intuitive find & replace CLI (sed alternative)",
);

/**
 * screwdriver.cd local mode
 */
export const sd_local = mkPackage(
  nixRaw`pkgs.sd-local`,
  "screwdriver.cd local mode",
);

/**
 * Tool for controlling multiple sd-mux devices
 */
export const sd_mux_ctrl = mkPackage(
  nixRaw`pkgs.sd-mux-ctrl`,
  "Tool for controlling multiple sd-mux devices",
);

/**
 * A systemd unit switcher for Home Manager
 */
export const sd_switch = mkPackage(
  nixRaw`pkgs.sd-switch`,
  "A systemd unit switcher for Home Manager",
);

/**
 * Convert sparse Android data image (.dat) into filesystem ext4 image (.img)
 */
export const sdat2img = mkPackage(
  nixRaw`pkgs.sdat2img`,
  "Convert sparse Android data image (.dat) into filesystem ext4 image (.img)",
);

/**
 * Eternal september version of the date program
 */
export const sdate = mkPackage(
  nixRaw`pkgs.sdate`,
  "Eternal september version of the date program",
);

/**
 * High-level C++ D-Bus library designed to provide easy-to-use yet powerful API
 */
export const sdbus_cpp = mkPackage(
  nixRaw`pkgs.sdbus-cpp`,
  "High-level C++ D-Bus library designed to provide easy-to-use yet powerful API",
);

/**
 * Small Device C Compiler
 */
export const sdcc = mkPackage(
  nixRaw`pkgs.sdcc`,
  "Small Device C Compiler",
);

/**
 * Console version of StarDict
 */
export const sdcv = mkPackage(
  nixRaw`pkgs.sdcv`,
  "Console version of StarDict",
);

/**
 * The chili login theme for SDDM
 */
export const sddm_chili_theme = mkPackage(
  nixRaw`pkgs.sddm-chili-theme`,
  "The chili login theme for SDDM",
);

/**
 * A drop-in replacement for sdkmanager from the Android SDK written in Python
 */
export const sdkmanager = mkPackage(
  nixRaw`pkgs.sdkmanager`,
  "A drop-in replacement for sdkmanager from the Android SDK written in Python",
);

/**
 * Simple SDL joystick test application for the console
 */
export const sdl_jstest = mkPackage(
  nixRaw`pkgs.sdl-jstest`,
  "Simple SDL joystick test application for the console",
);

/**
 * IP lookups for open ports and vulnerabilities from internetdb.shodan.io
 */
export const sdlookup = mkPackage(
  nixRaw`pkgs.sdlookup`,
  "IP lookups for open ports and vulnerabilities from internetdb.shodan.io",
);

/**
 * Open-source port of Prince of Persia
 */
export const sdlpop = mkPackage(
  nixRaw`pkgs.sdlpop`,
  "Open-source port of Prince of Persia",
);

/**
 * Use systemd sd_notify without having to link against libsystemd
 */
export const sdnotify_wrapper = mkPackage(
  nixRaw`pkgs.sdnotify-wrapper`,
  "Use systemd sd_notify without having to link against libsystemd",
);

/**
 * A utility to access SCSI device parameters
 */
export const sdparm = mkPackage(
  nixRaw`pkgs.sdparm`,
  "A utility to access SCSI device parameters",
);

/**
 * Software defined radio (SDR) software
 */
export const sdrangel = mkPackage(
  nixRaw`pkgs.sdrangel`,
  "Software defined radio (SDR) software",
);

/**
 * SDRplay API
 */
export const sdrplay = mkPackage(
  nixRaw`pkgs.sdrplay`,
  "SDRplay API",
);

/**
 * Cross-Platform SDR Software
 */
export const sdrpp = mkPackage(
  nixRaw`pkgs.sdrpp`,
  "Cross-Platform SDR Software",
);

/**
 *  Command line utility for SeaORM
 */
export const sea_orm_cli = mkPackage(
  nixRaw`pkgs.sea-orm-cli`,
  " Command line utility for SeaORM",
);

/**
 * Open source implementation of a 16bit X86 BIOS
 */
export const seabios = mkPackage(
  nixRaw`pkgs.seabios`,
  "Open source implementation of a 16bit X86 BIOS",
);

/**
 * Desktop client for Seafile, the Next-generation Open Source Cloud Storage
 */
export const seafile_client = mkPackage(
  nixRaw`pkgs.seafile-client`,
  "Desktop client for Seafile, the Next-generation Open Source Cloud Storage",
);

/**
 * File syncing and sharing software with file encryption and group sharing, emphasis on reliability and high performance
 */
export const seafile_server = mkPackage(
  nixRaw`pkgs.seafile-server`,
  "File syncing and sharing software with file encryption and group sharing, emphasis on reliability and high performance",
);

/**
 * Shared components of Seafile: seafile-daemon, libseafile, libseafile python bindings, manuals, and icons
 */
export const seafile_shared = mkPackage(
  nixRaw`pkgs.seafile-shared`,
  "Shared components of Seafile: seafile-daemon, libseafile, libseafile python bindings, manuals, and icons",
);

/**
 * The web end of seafile server
 */
export const seahub = mkPackage(
  nixRaw`pkgs.seahub`,
  "The web end of seafile server",
);

/**
 * SDL Emulation and Adaptation Layer for Curses (ncursesw)
 */
export const sealcurses = mkPackage(
  nixRaw`pkgs.sealcurses`,
  "SDL Emulation and Adaptation Layer for Curses (ncursesw)",
);

/**
 * Open source patternmaking software
 */
export const seamly2d = mkPackage(
  nixRaw`pkgs.seamly2d`,
  "Open source patternmaking software",
);

/**
 * A fork of Searx, a privacy-respecting, hackable metasearch engine
 */
export const searxng = mkPackage(
  nixRaw`pkgs.searxng`,
  "A fork of Searx, a privacy-respecting, hackable metasearch engine",
);

/**
 * Pipe command-line programs to seashells.io
 */
export const seashells = mkPackage(
  nixRaw`pkgs.seashells`,
  "Pipe command-line programs to seashells.io",
);

/**
 * Tiny embeddable C++ HTTP and WebSocket server
 */
export const seasocks = mkPackage(
  nixRaw`pkgs.seasocks`,
  "Tiny embeddable C++ HTTP and WebSocket server",
);

/**
 * A universal seat management library
 */
export const seatd = mkPackage(
  nixRaw`pkgs.seatd`,
  "A universal seat management library",
);

/**
 * GUI for molecular phylogeny
 */
export const seaview = mkPackage(
  nixRaw`pkgs.seaview`,
  "GUI for molecular phylogeny",
);

/**
 * Simple and highly scalable distributed file system
 */
export const seaweedfs = mkPackage(
  nixRaw`pkgs.seaweedfs`,
  "Simple and highly scalable distributed file system",
);

/**
 * Simple Event Correlator
 */
export const sec = mkPackage(
  nixRaw`pkgs.sec`,
  "Simple Event Correlator",
);

/**
 * Zero-configuration elliptic curve cryptography utility
 */
export const seccure = mkPackage(
  nixRaw`pkgs.seccure`,
  "Zero-configuration elliptic curve cryptography utility",
);

/**
 * Optimized C library for EC operations on curve secp256k1
 */
export const secp256k1 = mkPackage(
  nixRaw`pkgs.secp256k1`,
  "Optimized C library for EC operations on curve secp256k1",
);

/**
 * Tool to check packets for secrets
 */
export const secrets_extractor = mkPackage(
  nixRaw`pkgs.secrets-extractor`,
  "Tool to check packets for secrets",
);

/**
 * Tool to find secrets and passwords in container images and file systems
 */
export const secretscanner = mkPackage(
  nixRaw`pkgs.secretscanner`,
  "Tool to find secrets and passwords in container images and file systems",
);

/**
 * Transparent encryption filesystem
 */
export const securefs = mkPackage(
  nixRaw`pkgs.securefs`,
  "Transparent encryption filesystem",
);

/**
 * DTA sedutil Self encrypting drive software
 */
export const sedutil = mkPackage(
  nixRaw`pkgs.sedutil`,
  "DTA sedutil Self encrypting drive software",
);

/**
 * Textualize See is a command line tool to open files in the terminal.
 */
export const see = mkPackage(
  nixRaw`pkgs.see`,
  "Textualize See is a command line tool to open files in the terminal.",
);

/**
 * A tool to quickly open a markdown document with already filled out frontmatter
 */
export const seehecht = mkPackage(
  nixRaw`pkgs.seehecht`,
  "A tool to quickly open a markdown document with already filled out frontmatter",
);

/**
 * A Qt gui frontend for GDB
 */
export const seer = mkPackage(
  nixRaw`pkgs.seer`,
  "A Qt gui frontend for GDB",
);

/**
 * J-Link Debugger and Performance Analyzer
 */
export const segger_ozone = mkPackage(
  nixRaw`pkgs.segger-ozone`,
  "J-Link Debugger and Performance Analyzer",
);

/**
 * A very simple application that lets you define default applications on Linux in a sane way
 */
export const selectdefaultapplication = mkPackage(
  nixRaw`pkgs.selectdefaultapplication`,
  "A very simple application that lets you define default applications on Linux in a sane way",
);

/**
 * Test automation for native or hybrid Android apps and the mobile web
 */
export const selendroid = mkPackage(
  nixRaw`pkgs.selendroid`,
  "Test automation for native or hybrid Android apps and the mobile web",
);

/**
 * A blazing-fast modern Lua linter written in Rust
 */
export const selene = mkPackage(
  nixRaw`pkgs.selene`,
  "A blazing-fast modern Lua linter written in Rust",
);

/**
 * Selenium Server for remote WebDriver
 */
export const selenium_server_standalone = mkPackage(
  nixRaw`pkgs.selenium-server-standalone`,
  "Selenium Server for remote WebDriver",
);

/**
 * Web-based news feed (RSS/Atom) aggregator
 */
export const selfoss = mkPackage(
  nixRaw`pkgs.selfoss`,
  "Web-based news feed (RSS/Atom) aggregator",
);

/**
 * SELinux policy core utilities written in Python
 */
export const selinux_python = mkPackage(
  nixRaw`pkgs.selinux-python`,
  "SELinux policy core utilities written in Python",
);

/**
 * SELinux sandbox utility
 */
export const selinux_sandbox = mkPackage(
  nixRaw`pkgs.selinux-sandbox`,
  "SELinux sandbox utility",
);

/**
 * A cli to operate on semaphore ci (2.0)
 */
export const sem = mkPackage(
  nixRaw`pkgs.sem`,
  "A cli to operate on semaphore ci (2.0)",
);

/**
 * Fully automated version management and package publishing
 */
export const semantic_release = mkPackage(
  nixRaw`pkgs.semantic-release`,
  "Fully automated version management and package publishing",
);

/**
 * A mind-mapping application for KDE
 */
export const semantik = mkPackage(
  nixRaw`pkgs.semantik`,
  "A mind-mapping application for KDE",
);

/**
 * IBM Semeru Runtime, prebuilt OpenJDK binary
 */
export const semeru_bin = mkPackage(
  nixRaw`pkgs.semeru-bin`,
  "IBM Semeru Runtime, prebuilt OpenJDK binary",
);

/**
 * IBM Semeru Runtime, prebuilt OpenJDK binary
 */
export const semeru_bin_11 = mkPackage(
  nixRaw`pkgs.semeru-bin-11`,
  "IBM Semeru Runtime, prebuilt OpenJDK binary",
);

/**
 * IBM Semeru Runtime, prebuilt OpenJDK binary
 */
export const semeru_bin_16 = mkPackage(
  nixRaw`pkgs.semeru-bin-16`,
  "IBM Semeru Runtime, prebuilt OpenJDK binary",
);

/**
 * IBM Semeru Runtime, prebuilt OpenJDK binary
 */
export const semeru_bin_17 = mkPackage(
  nixRaw`pkgs.semeru-bin-17`,
  "IBM Semeru Runtime, prebuilt OpenJDK binary",
);

/**
 * IBM Semeru Runtime, prebuilt OpenJDK binary
 */
export const semeru_bin_8 = mkPackage(
  nixRaw`pkgs.semeru-bin-8`,
  "IBM Semeru Runtime, prebuilt OpenJDK binary",
);

/**
 * IBM Semeru Runtime, prebuilt OpenJDK binary
 */
export const semeru_jre_bin = mkPackage(
  nixRaw`pkgs.semeru-jre-bin`,
  "IBM Semeru Runtime, prebuilt OpenJDK binary",
);

/**
 * IBM Semeru Runtime, prebuilt OpenJDK binary
 */
export const semeru_jre_bin_11 = mkPackage(
  nixRaw`pkgs.semeru-jre-bin-11`,
  "IBM Semeru Runtime, prebuilt OpenJDK binary",
);

/**
 * IBM Semeru Runtime, prebuilt OpenJDK binary
 */
export const semeru_jre_bin_16 = mkPackage(
  nixRaw`pkgs.semeru-jre-bin-16`,
  "IBM Semeru Runtime, prebuilt OpenJDK binary",
);

/**
 * IBM Semeru Runtime, prebuilt OpenJDK binary
 */
export const semeru_jre_bin_17 = mkPackage(
  nixRaw`pkgs.semeru-jre-bin-17`,
  "IBM Semeru Runtime, prebuilt OpenJDK binary",
);

/**
 * IBM Semeru Runtime, prebuilt OpenJDK binary
 */
export const semeru_jre_bin_8 = mkPackage(
  nixRaw`pkgs.semeru-jre-bin-8`,
  "IBM Semeru Runtime, prebuilt OpenJDK binary",
);

/**
 * Lightweight static analysis for many languages - cli
 */
export const semgrep = mkPackage(
  nixRaw`pkgs.semgrep`,
  "Lightweight static analysis for many languages - cli",
);

/**
 * Lightweight static analysis for many languages - core binary
 */
export const semgrep_core = mkPackage(
  nixRaw`pkgs.semgrep-core`,
  "Lightweight static analysis for many languages - core binary",
);

/**
 * Automatically delete your old tweets, except for the ones you want to keep
 */
export const semiphemeral = mkPackage(
  nixRaw`pkgs.semiphemeral`,
  "Automatically delete your old tweets, except for the ones you want to keep",
);

/**
 * SELinux policy core utilities (packaging additions)
 */
export const semodule_utils = mkPackage(
  nixRaw`pkgs.semodule-utils`,
  "SELinux policy core utilities (packaging additions)",
);

/**
 * A small CLI to fish out the current or next semver version from a git repository
 */
export const semver = mkPackage(
  nixRaw`pkgs.semver`,
  "A small CLI to fish out the current or next semver version from a git repository",
);

/**
 * Semantic Versioning for modern C++
 */
export const semver_cpp = mkPackage(
  nixRaw`pkgs.semver-cpp`,
  "Semantic Versioning for modern C++",
);

/**
 * semver bash implementation
 */
export const semver_tool = mkPackage(
  nixRaw`pkgs.semver-tool`,
  "semver bash implementation",
);

/**
 * Your everyday IRC student
 */
export const senpai = mkPackage(
  nixRaw`pkgs.senpai`,
  "Your everyday IRC student",
);

/**
 * The package provides utilities used by programs to sensibly select and spawn an appropriate browser, editor, or pager.
 */
export const sensible_utils = mkPackage(
  nixRaw`pkgs.sensible-utils`,
  "The package provides utilities used by programs to sensibly select and spawn an appropriate browser, editor, or pager.",
);

/**
 * A monitoring framework that aims to be simple, malleable, and scalable
 */
export const sensu = mkPackage(
  nixRaw`pkgs.sensu`,
  "A monitoring framework that aims to be simple, malleable, and scalable",
);

/**
 * Open source monitoring tool for ephemeral infrastructure & distributed applications
 */
export const sensu_go_agent = mkPackage(
  nixRaw`pkgs.sensu-go-agent`,
  "Open source monitoring tool for ephemeral infrastructure & distributed applications",
);

/**
 * Open source monitoring tool for ephemeral infrastructure & distributed applications
 */
export const sensu_go_backend = mkPackage(
  nixRaw`pkgs.sensu-go-backend`,
  "Open source monitoring tool for ephemeral infrastructure & distributed applications",
);

/**
 * Open source monitoring tool for ephemeral infrastructure & distributed applications
 */
export const sensu_go_cli = mkPackage(
  nixRaw`pkgs.sensu-go-cli`,
  "Open source monitoring tool for ephemeral infrastructure & distributed applications",
);

/**
 * A simple plaintext presentation tool
 */
export const sent = mkPackage(
  nixRaw`pkgs.sent`,
  "A simple plaintext presentation tool",
);

/**
 * Unsupervised text tokenizer for Neural Network-based text generation
 */
export const sentencepiece = mkPackage(
  nixRaw`pkgs.sentencepiece`,
  "Unsupervised text tokenizer for Neural Network-based text generation",
);

/**
 * A command line utility to work with Sentry
 */
export const sentry_cli = mkPackage(
  nixRaw`pkgs.sentry-cli`,
  "A command line utility to work with Sentry",
);

/**
 * Sentry SDK for C, C++ and native applications
 */
export const sentry_native = mkPackage(
  nixRaw`pkgs.sentry-native`,
  "Sentry SDK for C, C++ and native applications",
);

/**
 * Friends don't let friends leak secrets on their terminal window
 */
export const senv = mkPackage(
  nixRaw`pkgs.senv`,
  "Friends don't let friends leak secrets on their terminal window",
);

export const separateDebugInfo = mkPackage(
  nixRaw`pkgs.separateDebugInfo`,
  "",
);

/**
 * Minimal loop based midi sequencer
 */
export const seq24 = mkPackage(
  nixRaw`pkgs.seq24`,
  "Minimal loop based midi sequencer",
);

/**
 * Loop based midi sequencer with Qt GUI derived from seq24 and sequencer64
 */
export const seq66 = mkPackage(
  nixRaw`pkgs.seq66`,
  "Loop based midi sequencer with Qt GUI derived from seq24 and sequencer64",
);

/**
 * Generate sequence-diagram image from spec-text file (similar to Graphviz)
 */
export const seqdiag = mkPackage(
  nixRaw`pkgs.seqdiag`,
  "Generate sequence-diagram image from spec-text file (similar to Graphviz)",
);

/**
 * cross-platform and ultrafast toolkit for FASTA/Q file manipulation
 */
export const seqkit = mkPackage(
  nixRaw`pkgs.seqkit`,
  "cross-platform and ultrafast toolkit for FASTA/Q file manipulation",
);

/**
 * Toolkit for processing sequences in FASTA/Q formats
 */
export const seqtk = mkPackage(
  nixRaw`pkgs.seqtk`,
  "Toolkit for processing sequences in FASTA/Q formats",
);

/**
 * Friendly SQL Client
 */
export const sequeler = mkPackage(
  nixRaw`pkgs.sequeler`,
  "Friendly SQL Client",
);

/**
 * MySQL database management for macOS
 */
export const sequelpro = mkPackage(
  nixRaw`pkgs.sequelpro`,
  "MySQL database management for macOS",
);

/**
 * Sequoia's reimplementation of the GnuPG interface
 */
export const sequoia_chameleon_gnupg = mkPackage(
  nixRaw`pkgs.sequoia-chameleon-gnupg`,
  "Sequoia's reimplementation of the GnuPG interface",
);

/**
 * A cool new OpenPGP implementation
 */
export const sequoia_sq = mkPackage(
  nixRaw`pkgs.sequoia-sq`,
  "A cool new OpenPGP implementation",
);

/**
 * An implementation of the Stateless OpenPGP Command Line Interface using Sequoia
 */
export const sequoia_sqop = mkPackage(
  nixRaw`pkgs.sequoia-sqop`,
  "An implementation of the Stateless OpenPGP Command Line Interface using Sequoia",
);

/**
 * A command-line OpenPGP signature verification tool
 */
export const sequoia_sqv = mkPackage(
  nixRaw`pkgs.sequoia-sqv`,
  "A command-line OpenPGP signature verification tool",
);

/**
 * Serial to network connection server
 */
export const ser2net = mkPackage(
  nixRaw`pkgs.ser2net`,
  "Serial to network connection server",
);

/**
 * A lightweight C library for RDF syntax which supports reading and writing Turtle and NTriples
 */
export const serd = mkPackage(
  nixRaw`pkgs.serd`,
  "A lightweight C library for RDF syntax which supports reading and writing Turtle and NTriples",
);

/**
 * A simple ncurses VoIP program based on the Opus codec
 */
export const seren = mkPackage(
  nixRaw`pkgs.seren`,
  "A simple ncurses VoIP program based on the Opus codec",
);

/**
 * HTTP client library based on APR
 */
export const serf = mkPackage(
  nixRaw`pkgs.serf`,
  "HTTP client library based on APR",
);

/**
 * Service orchestration and management tool
 */
export const serfdom = mkPackage(
  nixRaw`pkgs.serfdom`,
  "Service orchestration and management tool",
);

/**
 * Multi-purpose serial data visualization & processing program
 */
export const serial_studio = mkPackage(
  nixRaw`pkgs.serial-studio`,
  "Multi-purpose serial data visualization & processing program",
);

/**
 * Automate testing of serial communication with any serial port device
 */
export const serial_unit_testing = mkPackage(
  nixRaw`pkgs.serial-unit-testing`,
  "Automate testing of serial communication with any serial port device",
);

/**
 * C++ Minimal interface to encode and decode audio with AMBE3000 based devices in packet mode over a serial link
 */
export const serialdv = mkPackage(
  nixRaw`pkgs.serialdv`,
  "C++ Minimal interface to encode and decode audio with AMBE3000 based devices in packet mode over a serial link",
);

/**
 * Compiler for the Serpent language for Ethereum
 */
export const serpent = mkPackage(
  nixRaw`pkgs.serpent`,
  "Compiler for the Serpent language for Ethereum",
);

/**
 * RSpec tests for your servers configured by CFEngine, Puppet, Ansible, Itamae or anything else
 */
export const serverspec = mkPackage(
  nixRaw`pkgs.serverspec`,
  "RSpec tests for your servers configured by CFEngine, Puppet, Ansible, Itamae or anything else",
);

/**
 * A convenient wrapper for the systemctl commands, borrow from Ubuntu
 */
export const service_wrapper = mkPackage(
  nixRaw`pkgs.service-wrapper`,
  "A convenient wrapper for the systemctl commands, borrow from Ubuntu",
);

/**
 * UPnP Media Streaming Server
 */
export const serviio = mkPackage(
  nixRaw`pkgs.serviio`,
  "UPnP Media Streaming Server",
);

/**
 * Roman body font designed for main text by Sora Sagano
 */
export const seshat = mkPackage(
  nixRaw`pkgs.seshat`,
  "Roman body font designed for main text by Sora Sagano",
);

/**
 * Onion routing based messenger
 */
export const session_desktop = mkPackage(
  nixRaw`pkgs.session-desktop`,
  "Onion routing based messenger",
);

export const setJavaClassPath = mkPackage(
  nixRaw`pkgs.setJavaClassPath`,
  "",
);

/**
 * A DSP tonewheel organ emulator
 */
export const setbfree = mkPackage(
  nixRaw`pkgs.setbfree`,
  "A DSP tonewheel organ emulator",
);

/**
 * A small utility for changing settings in configuration textfiles
 */
export const setconf = mkPackage(
  nixRaw`pkgs.setconf`,
  "A small utility for changing settings in configuration textfiles",
);

/**
 * SELinux Policy Analysis Tools
 */
export const setools = mkPackage(
  nixRaw`pkgs.setools`,
  "SELinux Policy Analysis Tools",
);

/**
 * Simple X background setter inspired by imlibsetroot and feh
 */
export const setroot = mkPackage(
  nixRaw`pkgs.setroot`,
  "Simple X background setter inspired by imlibsetroot and feh",
);

/**
 * Serial port configuration utility
 */
export const setserial = mkPackage(
  nixRaw`pkgs.setserial`,
  "Serial port configuration utility",
);

export const setupDebugInfoDirs = mkPackage(
  nixRaw`pkgs.setupDebugInfoDirs`,
  "",
);

/**
 * Generate nix expressions from setup.cfg for a python package
 */
export const setupcfg2nix = mkPackage(
  nixRaw`pkgs.setupcfg2nix`,
  "Generate nix expressions from setup.cfg for a python package",
);

/**
 * Set an application's urgency hint (or not)
 */
export const seturgent = mkPackage(
  nixRaw`pkgs.seturgent`,
  "Set an application's urgency hint (or not)",
);

/**
 * LaTeX editor written in Python with Gtk
 */
export const setzer = mkPackage(
  nixRaw`pkgs.setzer`,
  "LaTeX editor written in Python with Gtk",
);

/**
 * ACME client
 */
export const sewer = mkPackage(
  nixRaw`pkgs.sewer`,
  "ACME client",
);

/**
 * S-expressions parser and generator C++ library, fully compliant to [https://people.csail.mit.edu/rivest/Sexp.txt]
 */
export const sexpp = mkPackage(
  nixRaw`pkgs.sexpp`,
  "S-expressions parser and generator C++ library, fully compliant to [https://people.csail.mit.edu/rivest/Sexp.txt]",
);

/**
 * An alerting dashboard for Graphite
 */
export const seyren = mkPackage(
  nixRaw`pkgs.seyren`,
  "An alerting dashboard for Graphite",
);

/**
 * A RSS and Atom parser (and some format programs)
 */
export const sfeed = mkPackage(
  nixRaw`pkgs.sfeed`,
  "A RSS and Atom parser (and some format programs)",
);

/**
 * SFZ jack client and LV2 plugin
 */
export const sfizz = mkPackage(
  nixRaw`pkgs.sfizz`,
  "SFZ jack client and LV2 plugin",
);

/**
 * Simple file manager
 */
export const sfm = mkPackage(
  nixRaw`pkgs.sfm`,
  "Simple file manager",
);

/**
 * Simple and fast multimedia library
 */
export const sfml = mkPackage(
  nixRaw`pkgs.sfml`,
  "Simple and fast multimedia library",
);

/**
 * Interpreter for Infocom and other Z-Machine games (SDL interface)
 */
export const sfrotz = mkPackage(
  nixRaw`pkgs.sfrotz`,
  "Interpreter for Infocom and other Z-Machine games (SDL interface)",
);

/**
 * Small Fast S-Expression Library
 */
export const sfsexp = mkPackage(
  nixRaw`pkgs.sfsexp`,
  "Small Fast S-Expression Library",
);

/**
 * Fully featured and highly configurable SFTP server
 */
export const sftpgo = mkPackage(
  nixRaw`pkgs.sftpgo`,
  "Fully featured and highly configurable SFTP server",
);

/**
 * Application that handles sshfs/sftp file systems mounting
 */
export const sftpman = mkPackage(
  nixRaw`pkgs.sftpman`,
  "Application that handles sshfs/sftp file systems mounting",
);

/**
 * A flexible taskbar application for wayland compositors, designed with a stacking layout in mind
 */
export const sfwbar = mkPackage(
  nixRaw`pkgs.sfwbar`,
  "A flexible taskbar application for wayland compositors, designed with a stacking layout in mind",
);

/**
 * A videogame sound effect generator
 */
export const sfxr = mkPackage(
  nixRaw`pkgs.sfxr`,
  "A videogame sound effect generator",
);

/**
 * A sound effect generator, QtQuick port of sfxr
 */
export const sfxr_qt = mkPackage(
  nixRaw`pkgs.sfxr-qt`,
  "A sound effect generator, QtQuick port of sfxr",
);

/**
 * Simple static file serving command-line tool written in Rust
 */
export const sfz = mkPackage(
  nixRaw`pkgs.sfz`,
  "Simple static file serving command-line tool written in Rust",
);

/**
 * Utilities that send SCSI commands to devices
 */
export const sg3_utils = mkPackage(
  nixRaw`pkgs.sg3_utils`,
  "Utilities that send SCSI commands to devices",
);

/**
 * Simplified perturbations models library
 */
export const sgp4 = mkPackage(
  nixRaw`pkgs.sgp4`,
  "Simplified perturbations models library",
);

/**
 * A grep for structured text formats such as XML
 */
export const sgrep = mkPackage(
  nixRaw`pkgs.sgrep`,
  "A grep for structured text formats such as XML",
);

/**
 * Simon Tatham's portable puzzle collection
 */
export const sgt_puzzles = mkPackage(
  nixRaw`pkgs.sgt-puzzles`,
  "Simon Tatham's portable puzzle collection",
);

/**
 * Simon Tatham's portable puzzle collection
 */
export const sgt_puzzles_mobile = mkPackage(
  nixRaw`pkgs.sgt-puzzles-mobile`,
  "Simon Tatham's portable puzzle collection",
);

/**
 * Interfaces between SGX SDKs and the Azure Attestation SGX Certification Cache
 */
export const sgx_azure_dcap_client = mkPackage(
  nixRaw`pkgs.sgx-azure-dcap-client`,
  "Interfaces between SGX SDKs and the Azure Attestation SGX Certification Cache",
);

/**
 * Intel SGX Architectural Enclave Service Manager
 */
export const sgx_psw = mkPackage(
  nixRaw`pkgs.sgx-psw`,
  "Intel SGX Architectural Enclave Service Manager",
);

/**
 * Intel SGX SDK for Linux built with IPP Crypto Library
 */
export const sgx_sdk = mkPackage(
  nixRaw`pkgs.sgx-sdk`,
  "Intel SGX SDK for Linux built with IPP Crypto Library",
);

/**
 * Cryptographic library for Intel SGX enclave applications based on OpenSSL
 */
export const sgx_ssl = mkPackage(
  nixRaw`pkgs.sgx-ssl`,
  "Cryptographic library for Intel SGX enclave applications based on OpenSSL",
);

/**
 * Library and command line tool to detect SHA-1 collision
 */
export const sha1collisiondetection = mkPackage(
  nixRaw`pkgs.sha1collisiondetection`,
  "Library and command line tool to detect SHA-1 collision",
);

/**
 * The personal, minimalist, super-fast, database free, bookmarking service
 */
export const shaarli = mkPackage(
  nixRaw`pkgs.shaarli`,
  "The personal, minimalist, super-fast, database free, bookmarking service",
);

/**
 * The bash templating language
 */
export const shab = mkPackage(
  nixRaw`pkgs.shab`,
  "The bash templating language",
);

/**
 * A Persian (Farsi) Font - فونت (قلم) فارسی شبنم
 */
export const shabnam_fonts = mkPackage(
  nixRaw`pkgs.shabnam-fonts`,
  "A Persian (Farsi) Font - فونت (قلم) فارسی شبنم",
);

/**
 * A collection of tools, libraries and tests for shader compilation
 */
export const shaderc = mkPackage(
  nixRaw`pkgs.shaderc`,
  "A collection of tools, libraries and tests for shader compilation",
);

/**
 * Flat dark GTK theme with ergonomic contrasts
 */
export const shades_of_gray_theme = mkPackage(
  nixRaw`pkgs.shades-of-gray-theme`,
  "Flat dark GTK theme with ergonomic contrasts",
);

/**
 * Suite containing authentication-related tools such as passwd and su
 */
export const shadow = mkPackage(
  nixRaw`pkgs.shadow`,
  "Suite containing authentication-related tools such as passwd and su",
);

/**
 * reversible directory-local environment variable manipulations
 */
export const shadowenv = mkPackage(
  nixRaw`pkgs.shadowenv`,
  "reversible directory-local environment variable manipulations",
);

/**
 * Universal dark theme for Firefox while adhering to the modern design principles set by Mozilla
 */
export const shadowfox = mkPackage(
  nixRaw`pkgs.shadowfox`,
  "Universal dark theme for Firefox while adhering to the modern design principles set by Mozilla",
);

/**
 * A lightweight secured SOCKS5 proxy
 */
export const shadowsocks_libev = mkPackage(
  nixRaw`pkgs.shadowsocks-libev`,
  "A lightweight secured SOCKS5 proxy",
);

/**
 * A Rust port of Shadowsocks
 */
export const shadowsocks_rust = mkPackage(
  nixRaw`pkgs.shadowsocks-rust`,
  "A Rust port of Shadowsocks",
);

/**
 * Yet another SIP003 plugin for shadowsocks, based on v2ray
 */
export const shadowsocks_v2ray_plugin = mkPackage(
  nixRaw`pkgs.shadowsocks-v2ray-plugin`,
  "Yet another SIP003 plugin for shadowsocks, based on v2ray",
);

/**
 * Apple AirPlay and RAOP protocol server
 */
export const shairplay = mkPackage(
  nixRaw`pkgs.shairplay`,
  "Apple AirPlay and RAOP protocol server",
);

/**
 * Airtunes server and emulator with multi-room capabilities
 */
export const shairport_sync = mkPackage(
  nixRaw`pkgs.shairport-sync`,
  "Airtunes server and emulator with multi-room capabilities",
);

/**
 * Media packaging framework for VOD and Live DASH and HLS applications
 */
export const shaka_packager = mkPackage(
  nixRaw`pkgs.shaka-packager`,
  "Media packaging framework for VOD and Live DASH and HLS applications",
);

/**
 * Build system library, like Make, but more accurate dependencies
 */
export const shake = mkPackage(
  nixRaw`pkgs.shake`,
  "Build system library, like Make, but more accurate dependencies",
);

/**
 * Allows you to create customized .onion addresses for your hidden service
 */
export const shallot = mkPackage(
  nixRaw`pkgs.shallot`,
  "Allows you to create customized .onion addresses for your hidden service",
);

/**
 * C Library for reading, writing and updating ESRI Shapefiles
 */
export const shapelib = mkPackage(
  nixRaw`pkgs.shapelib`,
  "C Library for reading, writing and updating ESRI Shapefiles",
);

/**
 * A CLI client for Shazam
 */
export const shaq = mkPackage(
  nixRaw`pkgs.shaq`,
  "A CLI client for Shazam",
);

/**
 * Dependency manager for the Crystal language
 */
export const shards = mkPackage(
  nixRaw`pkgs.shards`,
  "Dependency manager for the Crystal language",
);

/**
 * Dependency manager for the Crystal language
 */
export const shards_0_17 = mkPackage(
  nixRaw`pkgs.shards_0_17`,
  "Dependency manager for the Crystal language",
);

/**
 * Ontologies necessary for the Nepomuk semantic desktop
 */
export const shared_desktop_ontologies = mkPackage(
  nixRaw`pkgs.shared_desktop_ontologies`,
  "Ontologies necessary for the Nepomuk semantic desktop",
);

/**
 * A database of common MIME types
 */
export const shared_mime_info = mkPackage(
  nixRaw`pkgs.shared-mime-info`,
  "A database of common MIME types",
);

/**
 * Application to save your Sharepoint videos for offline usage
 */
export const sharedown = mkPackage(
  nixRaw`pkgs.sharedown`,
  "Application to save your Sharepoint videos for offline usage",
);

/**
 * Command-line tool to share directories and files to mobile devices
 */
export const sharing = mkPackage(
  nixRaw`pkgs.sharing`,
  "Command-line tool to share directories and files to mobile devices",
);

/**
 * Portable shell library to write, run and analyze automated tests adhering to Test Anything Protocol (TAP)
 */
export const sharness = mkPackage(
  nixRaw`pkgs.sharness`,
  "Portable shell library to write, run and analyze automated tests adhering to Test Anything Protocol (TAP)",
);

/**
 * A fast solver for the #SAT model counting problem
 */
export const sharpsat_td = mkPackage(
  nixRaw`pkgs.sharpsat-td`,
  "A fast solver for the #SAT model counting problem",
);

/**
 * Tools for remote synchronization and `shell archives'
 */
export const sharutils = mkPackage(
  nixRaw`pkgs.sharutils`,
  "Tools for remote synchronization and `shell archives'",
);

/**
 * Traditional roguelike game with pixel-art graphics and simple interface
 */
export const shattered_pixel_dungeon = mkPackage(
  nixRaw`pkgs.shattered-pixel-dungeon`,
  "Traditional roguelike game with pixel-art graphics and simple interface",
);

/**
 * A program to automatically decrypt and mount ZFS datasets using Yubikey HMAC as 2FA or any File on USB/SFTP/HTTPS
 */
export const shavee = mkPackage(
  nixRaw`pkgs.shavee`,
  "A program to automatically decrypt and mount ZFS datasets using Yubikey HMAC as 2FA or any File on USB/SFTP/HTTPS",
);

/**
 * Shell Script Compiler
 */
export const shc = mkPackage(
  nixRaw`pkgs.shc`,
  "Shell Script Compiler",
);

/**
 * The 'share-secrets-safely' CLI to interact with GPG/pass-like vaults
 */
export const sheesy_cli = mkPackage(
  nixRaw`pkgs.sheesy-cli`,
  "The 'share-secrets-safely' CLI to interact with GPG/pass-like vaults",
);

/**
 * A fast and configurable shell plugin manager
 */
export const sheldon = mkPackage(
  nixRaw`pkgs.sheldon`,
  "A fast and configurable shell plugin manager",
);

/**
 * Executing shell commands via HTTP server
 */
export const shell2http = mkPackage(
  nixRaw`pkgs.shell2http`,
  "Executing shell commands via HTTP server",
);

/**
 * Describe your shell commands in natural language
 */
export const shell_genie = mkPackage(
  nixRaw`pkgs.shell-genie`,
  "Describe your shell commands in natural language",
);

/**
 * Access ChatGPT from your terminal
 */
export const shell_gpt = mkPackage(
  nixRaw`pkgs.shell_gpt`,
  "Access ChatGPT from your terminal",
);

/**
 * Inspect your shell history
 */
export const shell_hist = mkPackage(
  nixRaw`pkgs.shell-hist`,
  "Inspect your shell history",
);

/**
 * Shell script analysis tool
 */
export const shellcheck = mkPackage(
  nixRaw`pkgs.shellcheck`,
  "Shell script analysis tool",
);

/**
 * Secure shell history commands by finding sensitive data
 */
export const shellclear = mkPackage(
  nixRaw`pkgs.shellclear`,
  "Secure shell history commands by finding sensitive data",
);

/**
 * A handy shell-like interface for browsing LDAP servers and editing their content
 */
export const shelldap = mkPackage(
  nixRaw`pkgs.shelldap`,
  "A handy shell-like interface for browsing LDAP servers and editing their content",
);

/**
 * The corrective bash syntax highlighter
 */
export const shellharden = mkPackage(
  nixRaw`pkgs.shellharden`,
  "The corrective bash syntax highlighter",
);

/**
 * Enables easy access any Linux device behind firewall and NAT
 */
export const shellhub_agent = mkPackage(
  nixRaw`pkgs.shellhub-agent`,
  "Enables easy access any Linux device behind firewall and NAT",
);

/**
 * A tool for generating shell.nix files
 */
export const shellify = mkPackage(
  nixRaw`pkgs.shellify`,
  "A tool for generating shell.nix files",
);

/**
 * A shellcode writing toolkit
 */
export const shellnoob = mkPackage(
  nixRaw`pkgs.shellnoob`,
  "A shellcode writing toolkit",
);

/**
 * A full-featured BDD unit testing framework for bash, ksh, zsh, dash and all POSIX shells
 */
export const shellspec = mkPackage(
  nixRaw`pkgs.shellspec`,
  "A full-featured BDD unit testing framework for bash, ksh, zsh, dash and all POSIX shells",
);

/**
 * Utility to manage your SSH, telnet, kubernetes, winrm, web or any custom shell
 */
export const shellz = mkPackage(
  nixRaw`pkgs.shellz`,
  "Utility to manage your SSH, telnet, kubernetes, winrm, web or any custom shell",
);

/**
 * Port of Shen running on Steel Bank Common Lisp
 */
export const shen_sbcl = mkPackage(
  nixRaw`pkgs.shen-sbcl`,
  "Port of Shen running on Steel Bank Common Lisp",
);

/**
 * Source code for the Shen Language
 */
export const shen_sources = mkPackage(
  nixRaw`pkgs.shen-sources`,
  "Source code for the Shen Language",
);

/**
 * A utility for applying code changes across many repositories
 */
export const shepherd = mkPackage(
  nixRaw`pkgs.shepherd`,
  "A utility for applying code changes across many repositories",
);

/**
 * Hunt down social media accounts by username across social networks
 */
export const sherlock = mkPackage(
  nixRaw`pkgs.sherlock`,
  "Hunt down social media accounts by username across social networks",
);

/**
 * Simulation of High-Energy Reactions of PArticles in lepton-lepton, lepton-photon, photon-photon, lepton-hadron and hadron-hadron collisions
 */
export const sherpa = mkPackage(
  nixRaw`pkgs.sherpa`,
  "Simulation of High-Energy Reactions of PArticles in lepton-lepton, lepton-photon, photon-photon, lepton-hadron and hadron-hadron collisions",
);

/**
 * POSIX-shell based file manager
 */
export const shfm = mkPackage(
  nixRaw`pkgs.shfm`,
  "POSIX-shell based file manager",
);

/**
 * A shell parser and formatter
 */
export const shfmt = mkPackage(
  nixRaw`pkgs.shfmt`,
  "A shell parser and formatter",
);

/**
 * A library for displaying messages
 */
export const shhmsg = mkPackage(
  nixRaw`pkgs.shhmsg`,
  "A library for displaying messages",
);

/**
 * A library for parsing command line options
 */
export const shhopt = mkPackage(
  nixRaw`pkgs.shhopt`,
  "A library for parsing command line options",
);

/**
 * Enables SSO and Federation web applications written with any programming language or framework
 */
export const shibboleth_sp = mkPackage(
  nixRaw`pkgs.shibboleth-sp`,
  "Enables SSO and Federation web applications written with any programming language or framework",
);

/**
 * A dynamic output configuration tool that automatically detects and configures connected outputs based on a set of profiles
 */
export const shikane = mkPackage(
  nixRaw`pkgs.shikane`,
  "A dynamic output configuration tool that automatically detects and configures connected outputs based on a set of profiles",
);

/**
 * UEFI shim loader
 */
export const shim_unsigned = mkPackage(
  nixRaw`pkgs.shim-unsigned`,
  "UEFI shim loader",
);

/**
 * Fast fixed-point mp3 encoding library
 */
export const shine = mkPackage(
  nixRaw`pkgs.shine`,
  "Fast fixed-point mp3 encoding library",
);

/**
 * Simple bookmark manager built with Go
 */
export const shiori = mkPackage(
  nixRaw`pkgs.shiori`,
  "Simple bookmark manager built with Go",
);

/**
 * Postal package tracking application
 */
export const shipments = mkPackage(
  nixRaw`pkgs.shipments`,
  "Postal package tracking application",
);

/**
 * A PC port of Ocarina of Time with modern controls, widescreen, high-resolution, and more
 */
export const shipwright = mkPackage(
  nixRaw`pkgs.shipwright`,
  "A PC port of Ocarina of Time with modern controls, widescreen, high-resolution, and more",
);

/**
 * An implementation of the Kerberos 5 network security system
 */
export const shishi = mkPackage(
  nixRaw`pkgs.shishi`,
  "An implementation of the Kerberos 5 network security system",
);

/**
 * Lightweight static analyzer for several programming languages
 */
export const shisho = mkPackage(
  nixRaw`pkgs.shisho`,
  "Lightweight static analyzer for several programming languages",
);

/**
 * Command line utility for building fully self contained Python zipapps
 */
export const shiv = mkPackage(
  nixRaw`pkgs.shiv`,
  "Command line utility for building fully self contained Python zipapps",
);

/**
 * Minimalistic database migration tool with MySQL, PostgreSQL and SQLite support
 */
export const shmig = mkPackage(
  nixRaw`pkgs.shmig`,
  "Minimalistic database migration tool with MySQL, PostgreSQL and SQLite support",
);

/**
 * Simple, stupid and slow HNCP daemon
 */
export const shncpd = mkPackage(
  nixRaw`pkgs.shncpd`,
  "Simple, stupid and slow HNCP daemon",
);

/**
 * Multi-purpose WAVE data processing and reporting utility
 */
export const shntool = mkPackage(
  nixRaw`pkgs.shntool`,
  "Multi-purpose WAVE data processing and reporting utility",
);

/**
 * A quick-and-dirty, literate-programming-style documentation generator for / in POSIX shell
 */
export const shocco = mkPackage(
  nixRaw`pkgs.shocco`,
  "A quick-and-dirty, literate-programming-style documentation generator for / in POSIX shell",
);

/**
 * A mouse-based window manager that can tile windows inside floating containers
 */
export const shod = mkPackage(
  nixRaw`pkgs.shod`,
  "A mouse-based window manager that can tile windows inside floating containers",
);

/**
 * A toolbox which offers a wide range of efficient and unified machine learning methods
 */
export const shogun = mkPackage(
  nixRaw`pkgs.shogun`,
  "A toolbox which offers a wide range of efficient and unified machine learning methods",
);

/**
 * CLI which helps you build against the Shopify platform faster
 */
export const shopify_cli = mkPackage(
  nixRaw`pkgs.shopify-cli`,
  "CLI which helps you build against the Shopify platform faster",
);

/**
 * A command line tool for shopify themes
 */
export const shopify_themekit = mkPackage(
  nixRaw`pkgs.shopify-themekit`,
  "A command line tool for shopify themes",
);

/**
 * Command line tool for Shopware 6
 */
export const shopware_cli = mkPackage(
  nixRaw`pkgs.shopware-cli`,
  "Command line tool for Shopware 6",
);

/**
 * An IP gateway/firewall configuration tool for GNU/Linux
 */
export const shorewall = mkPackage(
  nixRaw`pkgs.shorewall`,
  "An IP gateway/firewall configuration tool for GNU/Linux",
);

/**
 * Manipulate macOS masterfully, minus the mouse
 */
export const shortcat = mkPackage(
  nixRaw`pkgs.shortcat`,
  "Manipulate macOS masterfully, minus the mouse",
);

export const shortenPerlShebang = mkPackage(
  nixRaw`pkgs.shortenPerlShebang`,
  "",
);

/**
 * Find and listen to internet radio stations
 */
export const shortwave = mkPackage(
  nixRaw`pkgs.shortwave`,
  "Find and listen to internet radio stations",
);

/**
 * A command-line utility for taking automated screenshots of websites
 */
export const shot_scraper = mkPackage(
  nixRaw`pkgs.shot-scraper`,
  "A command-line utility for taking automated screenshots of websites",
);

/**
 * A free, open source, cross-platform video editor
 */
export const shotcut = mkPackage(
  nixRaw`pkgs.shotcut`,
  "A free, open source, cross-platform video editor",
);

/**
 * Minimal X screenshot utility
 */
export const shotgun = mkPackage(
  nixRaw`pkgs.shotgun`,
  "Minimal X screenshot utility",
);

/**
 * The uncompromising screenshot GUI for Wayland compositors
 */
export const shotman = mkPackage(
  nixRaw`pkgs.shotman`,
  "The uncompromising screenshot GUI for Wayland compositors",
);

/**
 * Popular photo organizer for the GNOME desktop
 */
export const shotwell = mkPackage(
  nixRaw`pkgs.shotwell`,
  "Popular photo organizer for the GNOME desktop",
);

/**
 * The self-hosted Web IRC client
 */
export const shout = mkPackage(
  nixRaw`pkgs.shout`,
  "The self-hosted Web IRC client",
);

/**
 * Show keys you typed on screen
 */
export const showmethekey = mkPackage(
  nixRaw`pkgs.showmethekey`,
  "Show keys you typed on screen",
);

/**
 * A slideshow presentation tool with a twist
 */
export const showoff = mkPackage(
  nixRaw`pkgs.showoff`,
  "A slideshow presentation tool with a twist",
);

/**
 * A vibrant and playful typeface for both Latin and Gujarati writing systems
 */
export const shrikhand = mkPackage(
  nixRaw`pkgs.shrikhand`,
  "A vibrant and playful typeface for both Latin and Gujarati writing systems",
);

/**
 * Minimal CLI launcher for the Toontown Rewritten MMORPG
 */
export const shticker_book_unwritten = mkPackage(
  nixRaw`pkgs.shticker-book-unwritten`,
  "Minimal CLI launcher for the Toontown Rewritten MMORPG",
);

/**
 * High performance library for Spherical Harmonic Transform
 */
export const shtns = mkPackage(
  nixRaw`pkgs.shtns`,
  "High performance library for Spherical Harmonic Transform",
);

/**
 * An xUnit based unit test framework for Bourne based shell scripts
 */
export const shunit2 = mkPackage(
  nixRaw`pkgs.shunit2`,
  "An xUnit based unit test framework for Bourne based shell scripts",
);

/**
 * Screenshot and annotation tool
 */
export const shutter = mkPackage(
  nixRaw`pkgs.shutter`,
  "Screenshot and annotation tool",
);

/**
 * Simple IRC client
 */
export const sic = mkPackage(
  nixRaw`pkgs.sic`,
  "Simple IRC client",
);

/**
 * Accessible image processing and conversion from the terminal
 */
export const sic_image_cli = mkPackage(
  nixRaw`pkgs.sic-image-cli`,
  "Accessible image processing and conversion from the terminal",
);

/**
 * The most reliable stable TV fork of the great Sick-Beard to fully automate TV enjoyment with innovation
 */
export const sickgear = mkPackage(
  nixRaw`pkgs.sickgear`,
  "The most reliable stable TV fork of the great Sick-Beard to fully automate TV enjoyment with innovation",
);

/**
 * An open app store and side-loading tool for Android-based VR devices such as the Oculus Go, Oculus Quest or Moverio BT 300
 */
export const sidequest = mkPackage(
  nixRaw`pkgs.sidequest`,
  "An open app store and side-loading tool for Android-based VR devices such as the Oculus Go, Oculus Quest or Moverio BT 300",
);

/**
 * A SID player using libsidplayfp
 */
export const sidplayfp = mkPackage(
  nixRaw`pkgs.sidplayfp`,
  "A SID player using libsidplayfp",
);

/**
 * A fork of st with many add-ons
 */
export const siduck76_st = mkPackage(
  nixRaw`pkgs.siduck76-st`,
  "A fork of st with many add-ons",
);

/**
 * HTTP load tester
 */
export const siege = mkPackage(
  nixRaw`pkgs.siege`,
  "HTTP load tester",
);

/**
 * Fast-paced one button platformer
 */
export const sienna = mkPackage(
  nixRaw`pkgs.sienna`,
  "Fast-paced one button platformer",
);

/**
 * OSX-like window decoration for KDE Plasma written in C++
 */
export const sierra_breeze_enhanced = mkPackage(
  nixRaw`pkgs.sierra-breeze-enhanced`,
  "OSX-like window decoration for KDE Plasma written in C++",
);

/**
 * A Mac OSX like theme for GTK based desktop environments
 */
export const sierra_gtk_theme = mkPackage(
  nixRaw`pkgs.sierra-gtk-theme`,
  "A Mac OSX like theme for GTK based desktop environments",
);

/**
 * A first-principles materials simulation code using DFT
 */
export const siesta = mkPackage(
  nixRaw`pkgs.siesta`,
  "A first-principles materials simulation code using DFT",
);

/**
 * A first-principles materials simulation code using DFT
 */
export const siesta_mpi = mkPackage(
  nixRaw`pkgs.siesta-mpi`,
  "A first-principles materials simulation code using DFT",
);

/**
 * A client for the MANAGESIEVE Protocol
 */
export const sieve_connect = mkPackage(
  nixRaw`pkgs.sieve-connect`,
  "A client for the MANAGESIEVE Protocol",
);

/**
 * ManageSieve client library for remotely managing Sieve scripts
 */
export const sieveshell = mkPackage(
  nixRaw`pkgs.sieveshell`,
  "ManageSieve client library for remotely managing Sieve scripts",
);

/**
 * A fast and powerful alternative to grep
 */
export const sift = mkPackage(
  nixRaw`pkgs.sift`,
  "A fast and powerful alternative to grep",
);

/**
 * Yet another simple static gallery generator
 */
export const sigal = mkPackage(
  nixRaw`pkgs.sigal`,
  "Yet another simple static gallery generator",
);

/**
 * Qt-based digital signal analyzer, using Suscan core and Sigutils DSP library
 */
export const sigdigger = mkPackage(
  nixRaw`pkgs.sigdigger`,
  "Qt-based digital signal analyzer, using Suscan core and Sigutils DSP library",
);

/**
 * Organizing CLI for people who don't love organizing.
 */
export const sigi = mkPackage(
  nixRaw`pkgs.sigi`,
  "Organizing CLI for people who don't love organizing.",
);

/**
 * Free, open source, multi-platform ebook (ePub) editor
 */
export const sigil = mkPackage(
  nixRaw`pkgs.sigil`,
  "Free, open source, multi-platform ebook (ePub) editor",
);

/**
 * GTK app to sync InfiniTime watch with PinePhone
 */
export const siglo = mkPackage(
  nixRaw`pkgs.siglo`,
  "GTK app to sync InfiniTime watch with PinePhone",
);

/**
 * Sigma command line interface
 */
export const sigma_cli = mkPackage(
  nixRaw`pkgs.sigma-cli`,
  "Sigma command line interface",
);

/**
 * Command-line and dbus interface for communicating with the Signal messaging service
 */
export const signal_cli = mkPackage(
  nixRaw`pkgs.signal-cli`,
  "Command-line and dbus interface for communicating with the Signal messaging service",
);

/**
 * Private, simple, and secure messenger
 */
export const signal_desktop = mkPackage(
  nixRaw`pkgs.signal-desktop`,
  "Private, simple, and secure messenger",
);

/**
 * Private, simple, and secure messenger
 */
export const signal_desktop_beta = mkPackage(
  nixRaw`pkgs.signal-desktop-beta`,
  "Private, simple, and secure messenger",
);

/**
 * Tool to work with Signal Backup files
 */
export const signalbackup_tools = mkPackage(
  nixRaw`pkgs.signalbackup-tools`,
  "Tool to work with Signal Backup files",
);

/**
 * Unofficial daemon for interacting with Signal
 */
export const signald = mkPackage(
  nixRaw`pkgs.signald`,
  "Unofficial daemon for interacting with Signal",
);

/**
 * A golang library for communicating with signald
 */
export const signaldctl = mkPackage(
  nixRaw`pkgs.signaldctl`,
  "A golang library for communicating with signald",
);

/**
 * OpenBSD signing tool
 */
export const signify = mkPackage(
  nixRaw`pkgs.signify`,
  "OpenBSD signing tool",
);

/**
 * A collection of several projects relating to OpenPGP
 */
export const signing_party = mkPackage(
  nixRaw`pkgs.signing-party`,
  "A collection of several projects relating to OpenPGP",
);

/**
 * Typeface for written sign languages
 */
export const signwriting = mkPackage(
  nixRaw`pkgs.signwriting`,
  "Typeface for written sign languages",
);

/**
 * Command-line frontend for the sigrok signal analysis software suite
 */
export const sigrok_cli = mkPackage(
  nixRaw`pkgs.sigrok-cli`,
  "Command-line frontend for the sigrok signal analysis software suite",
);

/**
 * Firmware for FX2 logic analyzers
 */
export const sigrok_firmware_fx2lafw = mkPackage(
  nixRaw`pkgs.sigrok-firmware-fx2lafw`,
  "Firmware for FX2 logic analyzers",
);

/**
 * A header-only, thread safe implementation of signal-slots for C++
 */
export const sigslot = mkPackage(
  nixRaw`pkgs.sigslot`,
  "A header-only, thread safe implementation of signal-slots for C++",
);

/**
 * Utility to export messages, attachments and other data from Signal Desktop
 */
export const sigtop = mkPackage(
  nixRaw`pkgs.sigtop`,
  "Utility to export messages, attachments and other data from Signal Desktop",
);

/**
 * Small signal processing utility library
 */
export const sigutils = mkPackage(
  nixRaw`pkgs.sigutils`,
  "Small signal processing utility library",
);

/**
 * An iconic bitmap font based on Stlarch with additional glyphs
 */
export const siji = mkPackage(
  nixRaw`pkgs.siji`,
  "An iconic bitmap font based on Stlarch with additional glyphs",
);

/**
 * A rogue-like game set in the First Age of Middle-earth
 */
export const sil = mkPackage(
  nixRaw`pkgs.sil`,
  "A rogue-like game set in the First Age of Middle-earth",
);

/**
 * Unicode font for Ethiopian and Erythrean scripts (Amharic et al.)
 */
export const sil_abyssinica = mkPackage(
  nixRaw`pkgs.sil-abyssinica`,
  "Unicode font for Ethiopian and Erythrean scripts (Amharic et al.)",
);

/**
 * A Unicode-based font family with broad support for writing systems that use the Myanmar script
 */
export const sil_padauk = mkPackage(
  nixRaw`pkgs.sil-padauk`,
  "A Unicode-based font family with broad support for writing systems that use the Myanmar script",
);

/**
 * A roguelike game set in the First Age of Middle-earth
 */
export const sil_q = mkPackage(
  nixRaw`pkgs.sil-q`,
  "A roguelike game set in the First Age of Middle-earth",
);

/**
 * Secure Internet Live Conferencing server
 */
export const silc_client = mkPackage(
  nixRaw`pkgs.silc_client`,
  "Secure Internet Live Conferencing server",
);

/**
 * Secure Internet Live Conferencing server
 */
export const silc_server = mkPackage(
  nixRaw`pkgs.silc_server`,
  "Secure Internet Live Conferencing server",
);

/**
 * A typesetting system
 */
export const sile = mkPackage(
  nixRaw`pkgs.sile`,
  "A typesetting system",
);

/**
 * Tool to enumerate an Active Directory Domain
 */
export const silenthound = mkPackage(
  nixRaw`pkgs.silenthound`,
  "Tool to enumerate an Active Directory Domain",
);

/**
 * Open source language that simplifies prototyping and writing algorithms on FPGA architectures
 */
export const silice = mkPackage(
  nixRaw`pkgs.silice`,
  "Open source language that simplifies prototyping and writing algorithms on FPGA architectures",
);

/**
 * Create beautiful image of your source code
 */
export const silicon = mkPackage(
  nixRaw`pkgs.silicon`,
  "Create beautiful image of your source code",
);

/**
 * Automate the creation of merge proposals for scriptable changes
 */
export const silver_platter = mkPackage(
  nixRaw`pkgs.silver-platter`,
  "Automate the creation of merge proposals for scriptable changes",
);

/**
 * A code-searching tool similar to ack, but faster
 */
export const silver_searcher = mkPackage(
  nixRaw`pkgs.silver-searcher`,
  "A code-searching tool similar to ack, but faster",
);

/**
 * A lean and mean Atmel AVR simulator
 */
export const simavr = mkPackage(
  nixRaw`pkgs.simavr`,
  "A lean and mean Atmel AVR simulator",
);

/**
 * Parsing gigabytes of JSON per second
 */
export const simdjson = mkPackage(
  nixRaw`pkgs.simdjson`,
  "Parsing gigabytes of JSON per second",
);

/**
 * Tool to convert Android sparse images to raw images
 */
export const simg2img = mkPackage(
  nixRaw`pkgs.simg2img`,
  "Tool to convert Android sparse images to raw images",
);

/**
 * Simulation construction toolkit
 */
export const simgear = mkPackage(
  nixRaw`pkgs.simgear`,
  "Simulation construction toolkit",
);

/**
 * Framework for the simulation of distributed applications
 */
export const simgrid = mkPackage(
  nixRaw`pkgs.simgrid`,
  "Framework for the simulation of distributed applications",
);

/**
 * A collection of simulators of historic hardware
 */
export const simh = mkPackage(
  nixRaw`pkgs.simh`,
  "A collection of simulators of historic hardware",
);

/**
 * An aesthetic cursor theme for Linux desktops
 */
export const simp1e_cursors = mkPackage(
  nixRaw`pkgs.simp1e-cursors`,
  "An aesthetic cursor theme for Linux desktops",
);

/**
 * Simple Let's Encrypt client
 */
export const simp_le = mkPackage(
  nixRaw`pkgs.simp_le`,
  "Simple Let's Encrypt client",
);

/**
 * A build tool for Scala, Java and more
 */
export const simpleBuildTool = mkPackage(
  nixRaw`pkgs.simpleBuildTool`,
  "A build tool for Scala, Java and more",
);

/**
 * Simple PKCS11 provider for TPM chips
 */
export const simpleTpmPk11 = mkPackage(
  nixRaw`pkgs.simpleTpmPk11`,
  "Simple PKCS11 provider for TPM chips",
);

/**
 * Reimplementation of the DFT-D3 program
 */
export const simple_dftd3 = mkPackage(
  nixRaw`pkgs.simple-dftd3`,
  "Reimplementation of the DFT-D3 program",
);

/**
 * Query dlna media servers
 */
export const simple_dlna_browser = mkPackage(
  nixRaw`pkgs.simple-dlna-browser`,
  "Query dlna media servers",
);

/**
 * Simple HTTP server in Rust
 */
export const simple_http_server = mkPackage(
  nixRaw`pkgs.simple-http-server`,
  "Simple HTTP server in Rust",
);

/**
 * Simple MTP fuse filesystem driver
 */
export const simple_mtpfs = mkPackage(
  nixRaw`pkgs.simple-mtpfs`,
  "Simple MTP fuse filesystem driver",
);

/**
 * Simple scanning utility
 */
export const simple_scan = mkPackage(
  nixRaw`pkgs.simple-scan`,
  "Simple scanning utility",
);

/**
 * HTTP/2 server for development purposes
 */
export const simplehttp2server = mkPackage(
  nixRaw`pkgs.simplehttp2server`,
  "HTTP/2 server for development purposes",
);

/**
 * Simplified interface to ITK
 */
export const simpleitk = mkPackage(
  nixRaw`pkgs.simpleitk`,
  "Simplified interface to ITK",
);

/**
 * An NES emulator written in C++
 */
export const simplenes = mkPackage(
  nixRaw`pkgs.simplenes`,
  "An NES emulator written in C++",
);

/**
 * A simple TCP proxy
 */
export const simpleproxy = mkPackage(
  nixRaw`pkgs.simpleproxy`,
  "A simple TCP proxy",
);

/**
 * A screen recorder for Linux
 */
export const simplescreenrecorder = mkPackage(
  nixRaw`pkgs.simplescreenrecorder`,
  "A screen recorder for Linux",
);

/**
 * Desktop application for SimpleX Chat
 */
export const simplex_chat_desktop = mkPackage(
  nixRaw`pkgs.simplex-chat-desktop`,
  "Desktop application for SimpleX Chat",
);

/**
 * A tool for effortless deployment and configuration management
 */
export const simplotask = mkPackage(
  nixRaw`pkgs.simplotask`,
  "A tool for effortless deployment and configuration management",
);

/**
 * A simulation game in which the player strives to run a successful transport system
 */
export const simutrans = mkPackage(
  nixRaw`pkgs.simutrans`,
  "A simulation game in which the player strives to run a successful transport system",
);

/**
 * A simulation game in which the player strives to run a successful transport system
 */
export const simutrans_binaries = mkPackage(
  nixRaw`pkgs.simutrans_binaries`,
  "A simulation game in which the player strives to run a successful transport system",
);

/**
 * The universal proxy platform
 */
export const sing_box = mkPackage(
  nixRaw`pkgs.sing-box`,
  "The universal proxy platform",
);

/**
 * GeoIP data for sing-box
 */
export const sing_geoip = mkPackage(
  nixRaw`pkgs.sing-geoip`,
  "GeoIP data for sing-box",
);

/**
 * community managed domain list
 */
export const sing_geosite = mkPackage(
  nixRaw`pkgs.sing-geosite`,
  "community managed domain list",
);

/**
 * A CAS for polynomial computations
 */
export const singular = mkPackage(
  nixRaw`pkgs.singular`,
  "A CAS for polynomial computations",
);

/**
 * Application containers for linux (Sylabs Inc's fork of Singularity, a.k.a. SingularityCE)
 */
export const singularity = mkPackage(
  nixRaw`pkgs.singularity`,
  "Application containers for linux (Sylabs Inc's fork of Singularity, a.k.a. SingularityCE)",
);

/**
 * 
 */
export const singularity_overriden_nixos = mkPackage(
  nixRaw`pkgs.singularity-overriden-nixos`,
  "",
);

/**
 * A very minimal Linux init implementation from suckless.org
 */
export const sinit = mkPackage(
  nixRaw`pkgs.sinit`,
  "A very minimal Linux init implementation from suckless.org",
);

/**
 * C++11 implementation of Socket.IO client
 */
export const sioclient = mkPackage(
  nixRaw`pkgs.sioclient`,
  "C++11 implementation of Socket.IO client",
);

/**
 * A PDF viewer designed for research papers and technical books
 */
export const sioyek = mkPackage(
  nixRaw`pkgs.sioyek`,
  "A PDF viewer designed for research papers and technical books",
);

/**
 * Advanced console ip subnet calculator
 */
export const sipcalc = mkPackage(
  nixRaw`pkgs.sipcalc`,
  "Advanced console ip subnet calculator",
);

/**
 * Modern and flexible SIP CLI tool
 */
export const sipexer = mkPackage(
  nixRaw`pkgs.sipexer`,
  "Modern and flexible SIP CLI tool",
);

/**
 * The SIPp testing tool
 */
export const sipp = mkPackage(
  nixRaw`pkgs.sipp`,
  "The SIPp testing tool",
);

/**
 * A masquerading SIP Proxy Server
 */
export const siproxd = mkPackage(
  nixRaw`pkgs.siproxd`,
  "A masquerading SIP Proxy Server",
);

/**
 * SIP Swiss army knife
 */
export const sipsak = mkPackage(
  nixRaw`pkgs.sipsak`,
  "SIP Swiss army knife",
);

/**
 *  Set of tools to audit SIP based VoIP systems
 */
export const sipvicious = mkPackage(
  nixRaw`pkgs.sipvicious`,
  " Set of tools to audit SIP based VoIP systems",
);

/**
 * A Qt/C++ GUI front end to sshfs, ecryptfs-simple, cryfs, gocryptfs, securefs, fscrypt and encfs
 */
export const sirikali = mkPackage(
  nixRaw`pkgs.sirikali`,
  "A Qt/C++ GUI front end to sshfs, ecryptfs-simple, cryfs, gocryptfs, securefs, fscrypt and encfs",
);

/**
 * Astrophotographic image processing tool
 */
export const siril = mkPackage(
  nixRaw`pkgs.siril`,
  "Astrophotographic image processing tool",
);

/**
 * Domain specific library for electronic structure calculations
 */
export const sirius = mkPackage(
  nixRaw`pkgs.sirius`,
  "Domain specific library for electronic structure calculations",
);

/**
 * Simple app launcher for wayland written in rust
 */
export const sirula = mkPackage(
  nixRaw`pkgs.sirula`,
  "Simple app launcher for wayland written in rust",
);

/**
 * HTTP(S)/WS(S)/TCP Tunnels to localhost
 */
export const sish = mkPackage(
  nixRaw`pkgs.sish`,
  "HTTP(S)/WS(S)/TCP Tunnels to localhost",
);

/**
 * A handwritten sitelen pona font supporting UCSUR
 */
export const sitelen_seli_kiwen = mkPackage(
  nixRaw`pkgs.sitelen-seli-kiwen`,
  "A handwritten sitelen pona font supporting UCSUR",
);

/**
 * An open source tool that helps you monitor, analyze and optimize your website speed and performance
 */
export const sitespeed_io = mkPackage(
  nixRaw`pkgs.sitespeed-io`,
  "An open source tool that helps you monitor, analyze and optimize your website speed and performance",
);

/**
 * Pair with SIXAXIS controllers over USB
 */
export const sixpair = mkPackage(
  nixRaw`pkgs.sixpair`,
  "Pair with SIXAXIS controllers over USB",
);

/**
 * A Z80 assembly language cross compiler. It is based on the SjASM source code by Sjoerd Mastijn
 */
export const sjasmplus = mkPackage(
  nixRaw`pkgs.sjasmplus`,
  "A Z80 assembly language cross compiler. It is based on the SjASM source code by Sjoerd Mastijn",
);

/**
 * Easy and Repeatable Kubernetes Development
 */
export const skaffold = mkPackage(
  nixRaw`pkgs.skaffold`,
  "Easy and Repeatable Kubernetes Development",
);

/**
 * A set of general-purpose C programming libraries
 */
export const skalibs = mkPackage(
  nixRaw`pkgs.skalibs`,
  "A set of general-purpose C programming libraries",
);

/**
 * A set of general-purpose C programming libraries
 */
export const skalibs_2_10 = mkPackage(
  nixRaw`pkgs.skalibs_2_10`,
  "A set of general-purpose C programming libraries",
);

/**
 * A personal multi-machine syncable key value store
 */
export const skate = mkPackage(
  nixRaw`pkgs.skate`,
  "A personal multi-machine syncable key value store",
);

/**
 * Declarative pure-SQL schema management for MySQL and MariaDB
 */
export const skeema = mkPackage(
  nixRaw`pkgs.skeema`,
  "Declarative pure-SQL schema management for MySQL and MariaDB",
);

/**
 * A highly customizable macOS status bar replacement
 */
export const sketchybar = mkPackage(
  nixRaw`pkgs.sketchybar`,
  "A highly customizable macOS status bar replacement",
);

/**
 * A ligature-based symbol font and a mapping function for sketchybar
 */
export const sketchybar_app_font = mkPackage(
  nixRaw`pkgs.sketchybar-app-font`,
  "A ligature-based symbol font and a mapping function for sketchybar",
);

/**
 * GTK theme with skeuomorphism design
 */
export const skeu = mkPackage(
  nixRaw`pkgs.skeu`,
  "GTK theme with skeuomorphism design",
);

/**
 * Simple hotkey daemon for macOS
 */
export const skhd = mkPackage(
  nixRaw`pkgs.skhd`,
  "Simple hotkey daemon for macOS",
);

/**
 * Command-line fuzzy finder written in Rust
 */
export const skim = mkPackage(
  nixRaw`pkgs.skim`,
  "Command-line fuzzy finder written in Rust",
);

/**
 * Expose-style compositing-based standalone window switcher
 */
export const skippy_xd = mkPackage(
  nixRaw`pkgs.skippy-xd`,
  "Expose-style compositing-based standalone window switcher",
);

/**
 * Tool to Python dependencies against security advisory databases
 */
export const skjold = mkPackage(
  nixRaw`pkgs.skjold`,
  "Tool to Python dependencies against security advisory databases",
);

/**
 * A collection of standard SKK dictionaries
 */
export const skk_dicts = mkPackage(
  nixRaw`pkgs.skk-dicts`,
  "A collection of standard SKK dictionaries",
);

/**
 * A collection of tools to edit SKK dictionaries
 */
export const skktools = mkPackage(
  nixRaw`pkgs.skktools`,
  "A collection of tools to edit SKK dictionaries",
);

/**
 * A command line utility for various operations on container images and image repositories
 */
export const skopeo = mkPackage(
  nixRaw`pkgs.skopeo`,
  "A command line utility for various operations on container images and image repositories",
);

/**
 * The Ultimate Document Programming Framework
 */
export const skribilo = mkPackage(
  nixRaw`pkgs.skribilo`,
  "The Ultimate Document Programming Framework",
);

/**
 * A personal finances manager, powered by KDE
 */
export const skrooge = mkPackage(
  nixRaw`pkgs.skrooge`,
  "A personal finances manager, powered by KDE",
);

/**
 * An easily deployable & decentralized OpenPGP keyserver
 */
export const sks = mkPackage(
  nixRaw`pkgs.sks`,
  "An easily deployable & decentralized OpenPGP keyserver",
);

/**
 * Lync & Skype for Business on Linux
 */
export const sky = mkPackage(
  nixRaw`pkgs.sky`,
  "Lync & Skype for Business on Linux",
);

/**
 * A distributed service for announcement and discovery of services
 */
export const skydns = mkPackage(
  nixRaw`pkgs.skydns`,
  "A distributed service for announcement and discovery of services",
);

/**
 * Linux client for skype
 */
export const skypeforlinux = mkPackage(
  nixRaw`pkgs.skypeforlinux`,
  "Linux client for skype",
);

/**
 * ROM hacking tool for Pokémon Mystery Dungeon Explorers of Sky
 */
export const skytemple = mkPackage(
  nixRaw`pkgs.skytemple`,
  "ROM hacking tool for Pokémon Mystery Dungeon Explorers of Sky",
);

/**
 * Steam Locomotive runs across your terminal when you type 'sl'
 */
export const sl = mkPackage(
  nixRaw`pkgs.sl`,
  "Steam Locomotive runs across your terminal when you type 'sl'",
);

/**
 * Tool for converting Slic3r PE's SL1 files to Photon files for the Anycubic Photon 3D-Printer
 */
export const sl1_to_photon = mkPackage(
  nixRaw`pkgs.sl1-to-photon`,
  "Tool for converting Slic3r PE's SL1 files to Photon files for the Anycubic Photon 3D-Printer",
);

/**
 * Desktop client for Slack
 */
export const slack = mkPackage(
  nixRaw`pkgs.slack`,
  "Desktop client for Slack",
);

export const slack_cli = mkPackage(
  nixRaw`pkgs.slack-cli`,
  "",
);

/**
 * Slack client for your terminal
 */
export const slack_term = mkPackage(
  nixRaw`pkgs.slack-term`,
  "Slack client for your terminal",
);

/**
 * Doom editor
 */
export const slade = mkPackage(
  nixRaw`pkgs.slade`,
  "Doom editor",
);

/**
 * Doom editor
 */
export const sladeUnstable = mkPackage(
  nixRaw`pkgs.sladeUnstable`,
  "Doom editor",
);

/**
 * A small, embeddable multi-platform programming library
 */
export const slang = mkPackage(
  nixRaw`pkgs.slang`,
  "A small, embeddable multi-platform programming library",
);

/**
 * A CLI tool for formatting SQL
 */
export const sleek = mkPackage(
  nixRaw`pkgs.sleek`,
  "A CLI tool for formatting SQL",
);

/**
 * Grub bootloader themes, contains light/dark/orange/bigSur styles
 */
export const sleek_grub_theme = mkPackage(
  nixRaw`pkgs.sleek-grub-theme`,
  "Grub bootloader themes, contains light/dark/orange/bigSur styles",
);

/**
 * Multi-platform process allowing to sleep on LAN a linux or windows computer, through wake-on-lan (reversed) magic packets or through HTTP REST requests.
 */
export const sleep_on_lan = mkPackage(
  nixRaw`pkgs.sleep-on-lan`,
  "Multi-platform process allowing to sleep on LAN a linux or windows computer, through wake-on-lan (reversed) magic packets or through HTTP REST requests.",
);

/**
 * A forensic/data recovery tool
 */
export const sleuthkit = mkPackage(
  nixRaw`pkgs.sleuthkit`,
  "A forensic/data recovery tool",
);

/**
 * The SLIB Portable Scheme Library
 */
export const slibGuile = mkPackage(
  nixRaw`pkgs.slibGuile`,
  "The SLIB Portable Scheme Library",
);

/**
 * G-code generator for 3D printers
 */
export const slic3r = mkPackage(
  nixRaw`pkgs.slic3r`,
  "G-code generator for 3D printers",
);

/**
 * Terminal based presentation tool
 */
export const slides = mkPackage(
  nixRaw`pkgs.slides`,
  "Terminal based presentation tool",
);

/**
 * Gecko-based programmatically-driven browser
 */
export const slimerjs = mkPackage(
  nixRaw`pkgs.slimerjs`,
  "Gecko-based programmatically-driven browser",
);

/**
 * Server for Logitech Squeezebox players. This server is also called Logitech Media Server
 */
export const slimserver = mkPackage(
  nixRaw`pkgs.slimserver`,
  "Server for Logitech Squeezebox players. This server is also called Logitech Media Server",
);

/**
 * Lightweight command line tool to quickly navigate across folders
 */
export const slingshot = mkPackage(
  nixRaw`pkgs.slingshot`,
  "Lightweight command line tool to quickly navigate across folders",
);

/**
 * Language Server Protocol (LSP) for Slint UI language
 */
export const slint_lsp = mkPackage(
  nixRaw`pkgs.slint-lsp`,
  "Language Server Protocol (LSP) for Slint UI language",
);

/**
 * Markdown slideshows in Rust
 */
export const slippy = mkPackage(
  nixRaw`pkgs.slippy`,
  "Markdown slideshows in Rust",
);

/**
 * A mod manager for FTL: Faster Than Light
 */
export const slipstream = mkPackage(
  nixRaw`pkgs.slipstream`,
  "A mod manager for FTL: Faster Than Light",
);

/**
 * User-mode networking for unprivileged network namespaces
 */
export const slirp4netns = mkPackage(
  nixRaw`pkgs.slirp4netns`,
  "User-mode networking for unprivileged network namespaces",
);

/**
 * Static Analyzer for Solidity
 */
export const slither_analyzer = mkPackage(
  nixRaw`pkgs.slither-analyzer`,
  "Static Analyzer for Solidity",
);

/**
 * sloc is a simple tool to count SLOC (source lines of code)
 */
export const sloc = mkPackage(
  nixRaw`pkgs.sloc`,
  "sloc is a simple tool to count SLOC (source lines of code)",
);

/**
 * Set of tools for counting physical Source Lines of Code (SLOC)
 */
export const sloccount = mkPackage(
  nixRaw`pkgs.sloccount`,
  "Set of tools for counting physical Source Lines of Code (SLOC)",
);

/**
 * Simple X display locker
 */
export const slock = mkPackage(
  nixRaw`pkgs.slock`,
  "Simple X display locker",
);

/**
 * Queries a selection from the user and prints to stdout
 */
export const slop = mkPackage(
  nixRaw`pkgs.slop`,
  "Queries a selection from the user and prints to stdout",
);

/**
 * Easy and simple Prometheus SLO (service level objectives) generator
 */
export const sloth = mkPackage(
  nixRaw`pkgs.sloth`,
  "Easy and simple Prometheus SLO (service level objectives) generator",
);

/**
 * Application Layer DoS attack simulator
 */
export const slowhttptest = mkPackage(
  nixRaw`pkgs.slowhttptest`,
  "Application Layer DoS attack simulator",
);

/**
 * Lightweight slowloris (HTTP DoS) tool
 */
export const slowlorust = mkPackage(
  nixRaw`pkgs.slowlorust`,
  "Lightweight slowloris (HTTP DoS) tool",
);

/**
 * The slrn (S-Lang read news) newsreader
 */
export const slrn = mkPackage(
  nixRaw`pkgs.slrn`,
  "The slrn (S-Lang read news) newsreader",
);

/**
 * Verify provenance from SLSA compliant builders
 */
export const slsa_verifier = mkPackage(
  nixRaw`pkgs.slsa-verifier`,
  "Verify provenance from SLSA compliant builders",
);

/**
 * A modern client-server application for the Soulseek file sharing network
 */
export const slskd = mkPackage(
  nixRaw`pkgs.slskd`,
  "A modern client-server application for the Soulseek file sharing network",
);

/**
 * Serial line sniffer
 */
export const slsnif = mkPackage(
  nixRaw`pkgs.slsnif`,
  "Serial line sniffer",
);

/**
 * status monitor for window managers that use WM_NAME like dwm
 */
export const slstatus = mkPackage(
  nixRaw`pkgs.slstatus`,
  "status monitor for window managers that use WM_NAME like dwm",
);

/**
 * Simple Linux Utility for Resource Management
 */
export const slurm = mkPackage(
  nixRaw`pkgs.slurm`,
  "Simple Linux Utility for Resource Management",
);

/**
 * A generic network load monitor
 */
export const slurm_nm = mkPackage(
  nixRaw`pkgs.slurm-nm`,
  "A generic network load monitor",
);

/**
 * Plugin for SLURM for SSH tunneling and port forwarding support
 */
export const slurm_spank_stunnel = mkPackage(
  nixRaw`pkgs.slurm-spank-stunnel`,
  "Plugin for SLURM for SSH tunneling and port forwarding support",
);

/**
 * Plugin for SLURM to allow for interactive X11 sessions
 */
export const slurm_spank_x11 = mkPackage(
  nixRaw`pkgs.slurm-spank-x11`,
  "Plugin for SLURM to allow for interactive X11 sessions",
);

/**
 * Select a region in a Wayland compositor
 */
export const slurp = mkPackage(
  nixRaw`pkgs.slurp`,
  "Select a region in a Wayland compositor",
);

/**
 * A static website generator which aims at being simplistic
 */
export const slweb = mkPackage(
  nixRaw`pkgs.slweb`,
  "A static website generator which aims at being simplistic",
);

/**
 * Super Mario 64 port based off of decompilation
 */
export const sm64ex = mkPackage(
  nixRaw`pkgs.sm64ex`,
  "Super Mario 64 port based off of decompilation",
);

/**
 * Super Mario 64 online co-op mod, forked from sm64ex
 */
export const sm64ex_coop = mkPackage(
  nixRaw`pkgs.sm64ex-coop`,
  "Super Mario 64 online co-op mod, forked from sm64ex",
);

/**
 * A XMPP (Jabber) client library for instant messaging and presence
 */
export const smack = mkPackage(
  nixRaw`pkgs.smack`,
  "A XMPP (Jabber) client library for instant messaging and presence",
);

/**
 * A small X window manager, extended from tinywm
 */
export const smallwm = mkPackage(
  nixRaw`pkgs.smallwm`,
  "A small X window manager, extended from tinywm",
);

/**
 * A simple bash script that automatically changes your wallpaper depending on if its daytime or nighttime
 */
export const smart_wallpaper = mkPackage(
  nixRaw`pkgs.smart-wallpaper`,
  "A simple bash script that automatically changes your wallpaper depending on if its daytime or nighttime",
);

/**
 * Find good image crops for arbitrary crop sizes
 */
export const smartcrop = mkPackage(
  nixRaw`pkgs.smartcrop`,
  "Find good image crops for arbitrary crop sizes",
);

/**
 * Tool for restoring blurry and defocused images
 */
export const smartdeblur = mkPackage(
  nixRaw`pkgs.smartdeblur`,
  "Tool for restoring blurry and defocused images",
);

/**
 * A local DNS server to obtain the fastest website IP for the best Internet experience
 */
export const smartdns = mkPackage(
  nixRaw`pkgs.smartdns`,
  "A local DNS server to obtain the fastest website IP for the best Internet experience",
);

/**
 * GUI for Git, Mercurial, Subversion
 */
export const smartgithg = mkPackage(
  nixRaw`pkgs.smartgithg`,
  "GUI for Git, Mercurial, Subversion",
);

/**
 * Tools for monitoring the health of hard drives
 */
export const smartmontools = mkPackage(
  nixRaw`pkgs.smartmontools`,
  "Tools for monitoring the health of hard drives",
);

/**
 * Smarty 3 template engine
 */
export const smarty3 = mkPackage(
  nixRaw`pkgs.smarty3`,
  "Smarty 3 template engine",
);

/**
 * gettext for the smarty3 framework
 */
export const smarty3_i18n = mkPackage(
  nixRaw`pkgs.smarty3-i18n`,
  "gettext for the smarty3 framework",
);

/**
 * A semantic analysis tool for C
 */
export const smatch = mkPackage(
  nixRaw`pkgs.smatch`,
  "A semantic analysis tool for C",
);

/**
 * A modern Super Mario Bros. 3 Level Editor
 */
export const smb3_foundry = mkPackage(
  nixRaw`pkgs.smb3-foundry`,
  "A modern Super Mario Bros. 3 Level Editor",
);

/**
 * SMB enumeration tool
 */
export const smbmap = mkPackage(
  nixRaw`pkgs.smbmap`,
  "SMB enumeration tool",
);

/**
 * A FUSE FS for mounting Samba shares
 */
export const smbnetfs = mkPackage(
  nixRaw`pkgs.smbnetfs`,
  "A FUSE FS for mounting Samba shares",
);

/**
 * Tool to enumerate file shares
 */
export const smbscan = mkPackage(
  nixRaw`pkgs.smbscan`,
  "Tool to enumerate file shares",
);

/**
 * Generate state machine code from text input (state diagram)
 */
export const smc = mkPackage(
  nixRaw`pkgs.smc`,
  "Generate state machine code from text input (state diagram)",
);

/**
 * Static multicast routing daemon
 */
export const smcroute = mkPackage(
  nixRaw`pkgs.smcroute`,
  "Static multicast routing daemon",
);

/**
 * A memory usage reporting tool that takes shared memory into account
 */
export const smem = mkPackage(
  nixRaw`pkgs.smem`,
  "A memory usage reporting tool that takes shared memory into account",
);

/**
 * Memory usage monitoring tool
 */
export const smemstat = mkPackage(
  nixRaw`pkgs.smemstat`,
  "Memory usage monitoring tool",
);

/**
 * Terminal selection utility
 */
export const smenu = mkPackage(
  nixRaw`pkgs.smenu`,
  "Terminal selection utility",
);

/**
 * A condensed and oblique Chinese typeface seeking a visual balance between the humanist and the geometric
 */
export const smiley_sans = mkPackage(
  nixRaw`pkgs.smiley-sans`,
  "A condensed and oblique Chinese typeface seeking a visual balance between the humanist and the geometric",
);

/**
 * An S/MIME signing utility for macOS and Windows that is compatible with Git
 */
export const smimesign = mkPackage(
  nixRaw`pkgs.smimesign`,
  "An S/MIME signing utility for macOS and Windows that is compatible with Git",
);

/**
 * A custom parser/auto-formatter for Standard ML
 */
export const smlfmt = mkPackage(
  nixRaw`pkgs.smlfmt`,
  "A custom parser/auto-formatter for Standard ML",
);

/**
 * Standard ML of New Jersey, a compiler
 */
export const smlnj = mkPackage(
  nixRaw`pkgs.smlnj`,
  "Standard ML of New Jersey, a compiler",
);

/**
 * Compiler for the Standard ML '97 programming language
 */
export const smlnjBootstrap = mkPackage(
  nixRaw`pkgs.smlnjBootstrap`,
  "Compiler for the Standard ML '97 programming language",
);

/**
 * Generic package manager for Standard ML libraries and programs
 */
export const smlpkg = mkPackage(
  nixRaw`pkgs.smlpkg`,
  "Generic package manager for Standard ML libraries and programs",
);

/**
 * Network latency collector
 */
export const smokeping = mkPackage(
  nixRaw`pkgs.smokeping`,
  "Network latency collector",
);

/**
 * The smooth Class Library
 */
export const smooth = mkPackage(
  nixRaw`pkgs.smooth`,
  "The smooth Class Library",
);

/**
 * MPEG decoding library
 */
export const smpeg = mkPackage(
  nixRaw`pkgs.smpeg`,
  "MPEG decoding library",
);

/**
 * SDL2 MPEG Player Library
 */
export const smpeg2 = mkPackage(
  nixRaw`pkgs.smpeg2`,
  "SDL2 MPEG Player Library",
);

/**
 * A complete front-end for MPlayer
 */
export const smplayer = mkPackage(
  nixRaw`pkgs.smplayer`,
  "A complete front-end for MPlayer",
);

/**
 * StormLib MPQ archiving utility
 */
export const smpq = mkPackage(
  nixRaw`pkgs.smpq`,
  "StormLib MPQ archiving utility",
);

/**
 * Simple Golang SMTP relay/proxy server
 */
export const smtprelay = mkPackage(
  nixRaw`pkgs.smtprelay`,
  "Simple Golang SMTP relay/proxy server",
);

/**
 * Play and download Youtube videos
 */
export const smtube = mkPackage(
  nixRaw`pkgs.smtube`,
  "Play and download Youtube videos",
);

/**
 * simple markup - markdown like syntax
 */
export const smu = mkPackage(
  nixRaw`pkgs.smu`,
  "simple markup - markdown like syntax",
);

/**
 * Smug - tmux session manager
 */
export const smug = mkPackage(
  nixRaw`pkgs.smug`,
  "Smug - tmux session manager",
);

/**
 * Semi-automatic OSINT framework and package manager
 */
export const sn0int = mkPackage(
  nixRaw`pkgs.sn0int`,
  "Semi-automatic OSINT framework and package manager",
);

/**
 * Simple and fast packet networking toolkit
 */
export const snabb = mkPackage(
  nixRaw`pkgs.snabb`,
  "Simple and fast packet networking toolkit",
);

/**
 * A simple, minimalistic ActivityPub instance (2.x, C)
 */
export const snac2 = mkPackage(
  nixRaw`pkgs.snac2`,
  "A simple, minimalistic ActivityPub instance (2.x, C)",
);

/**
 * Generic recovery and reflashing tool for embedded platforms
 */
export const snagboot = mkPackage(
  nixRaw`pkgs.snagboot`,
  "Generic recovery and reflashing tool for embedded platforms",
);

/**
 * A game starring a fruit-eating snake
 */
export const snake4 = mkPackage(
  nixRaw`pkgs.snake4`,
  "A game starring a fruit-eating snake",
);

/**
 * Python-based execution environment for make-like workflows
 */
export const snakemake = mkPackage(
  nixRaw`pkgs.snakemake`,
  "Python-based execution environment for make-like workflows",
);

/**
 * Tool to scan for secret files on HTTP servers
 */
export const snallygaster = mkPackage(
  nixRaw`pkgs.snallygaster`,
  "Tool to scan for secret files on HTTP servers",
);

/**
 * Step7 Open Source Ethernet Communication Suite
 */
export const snap7 = mkPackage(
  nixRaw`pkgs.snap7`,
  "Step7 Open Source Ethernet Communication Suite",
);

/**
 * Synchronous multi-room audio player
 */
export const snapcast = mkPackage(
  nixRaw`pkgs.snapcast`,
  "Synchronous multi-room audio player",
);

/**
 * An profiler for Android devices running Snapdragon chips
 */
export const snapdragon_profiler = mkPackage(
  nixRaw`pkgs.snapdragon-profiler`,
  "An profiler for Android devices running Snapdragon chips",
);

/**
 * Snapmaker Luban is an easy-to-use 3-in-1 software tailor-made for Snapmaker machines
 */
export const snapmaker_luban = mkPackage(
  nixRaw`pkgs.snapmaker-luban`,
  "Snapmaker Luban is an easy-to-use 3-in-1 software tailor-made for Snapmaker machines",
);

/**
 * Tool for Linux filesystem snapshot management
 */
export const snapper = mkPackage(
  nixRaw`pkgs.snapper`,
  "Tool for Linux filesystem snapshot management",
);

/**
 * Graphical interface for snapper
 */
export const snapper_gui = mkPackage(
  nixRaw`pkgs.snapper-gui`,
  "Graphical interface for snapper",
);

/**
 * Compression/decompression library for very high speeds
 */
export const snappy = mkPackage(
  nixRaw`pkgs.snappy`,
  "Compression/decompression library for very high speeds",
);

/**
 * Simple, modern & fast web-based email client
 */
export const snappymail = mkPackage(
  nixRaw`pkgs.snappymail`,
  "Simple, modern & fast web-based email client",
);

/**
 * A backup program for disk arrays
 */
export const snapraid = mkPackage(
  nixRaw`pkgs.snapraid`,
  "A backup program for disk arrays",
);

/**
 * A Decentralized Operating System for Zero-Knowledge Applications
 */
export const snarkos = mkPackage(
  nixRaw`pkgs.snarkos`,
  "A Decentralized Operating System for Zero-Knowledge Applications",
);

/**
 * A snazzy json log viewer
 */
export const snazy = mkPackage(
  nixRaw`pkgs.snazy`,
  "A snazzy json log viewer",
);

/**
 * Sound editor
 */
export const snd = mkPackage(
  nixRaw`pkgs.snd`,
  "Sound editor",
);

/**
 * Small audio and MIDI framework part of the OpenBSD project
 */
export const sndio = mkPackage(
  nixRaw`pkgs.sndio`,
  "Small audio and MIDI framework part of the OpenBSD project",
);

/**
 * Real-time 3D animated audio display/playback
 */
export const sndpeek = mkPackage(
  nixRaw`pkgs.sndpeek`,
  "Real-time 3D animated audio display/playback",
);

/**
 * A simple implementation of the classic snake game
 */
export const snekim = mkPackage(
  nixRaw`pkgs.snekim`,
  "A simple implementation of the classic snake game",
);

/**
 * Super Nintendo Entertainment System (SNES) emulator, X11 version
 */
export const snes9x = mkPackage(
  nixRaw`pkgs.snes9x`,
  "Super Nintendo Entertainment System (SNES) emulator, X11 version",
);

/**
 * Super Nintendo Entertainment System (SNES) emulator, GTK version
 */
export const snes9x_gtk = mkPackage(
  nixRaw`pkgs.snes9x-gtk`,
  "Super Nintendo Entertainment System (SNES) emulator, GTK version",
);

/**
 * Transparent proxy works on linux desktop, MacOS, router
 */
export const snet = mkPackage(
  nixRaw`pkgs.snet`,
  "Transparent proxy works on linux desktop, MacOS, router",
);

/**
 * Minilanguage designed to represent the entire contents of a PNG file in an editable form
 */
export const sng = mkPackage(
  nixRaw`pkgs.sng`,
  "Minilanguage designed to represent the entire contents of a PNG file in an editable form",
);

/**
 * A tool for displaying SIP calls message flows from terminal
 */
export const sngrep = mkPackage(
  nixRaw`pkgs.sngrep`,
  "A tool for displaying SIP calls message flows from terminal",
);

/**
 * Secure multithreaded packet sniffer
 */
export const sniffglue = mkPackage(
  nixRaw`pkgs.sniffglue`,
  "Secure multithreaded packet sniffer",
);

/**
 * Cross-platform application to monitor your network traffic with ease
 */
export const sniffnet = mkPackage(
  nixRaw`pkgs.sniffnet`,
  "Cross-platform application to monitor your network traffic with ease",
);

/**
 * A fun rounded display face that’s great for headlines
 */
export const sniglet = mkPackage(
  nixRaw`pkgs.sniglet`,
  "A fun rounded display face that’s great for headlines",
);

/**
 * A free open source IT asset/license management system
 */
export const snipe_it = mkPackage(
  nixRaw`pkgs.snipe-it`,
  "A free open source IT asset/license management system",
);

/**
 * Modern port of the classic 1982 text-mode game Snipes
 */
export const snipes = mkPackage(
  nixRaw`pkgs.snipes`,
  "Modern port of the classic 1982 text-mode game Snipes",
);

/**
 * Your little expandable text snippet helper
 */
export const snippetpixie = mkPackage(
  nixRaw`pkgs.snippetpixie`,
  "Your little expandable text snippet helper",
);

/**
 * Transparent TLS and HTTP layer 4 proxy with SNI support
 */
export const sniproxy = mkPackage(
  nixRaw`pkgs.sniproxy`,
  "Transparent TLS and HTTP layer 4 proxy with SNI support",
);

/**
 * Space Nerds In Space, a multi-player spaceship bridge simulator
 */
export const snis = mkPackage(
  nixRaw`pkgs.snis`,
  "Space Nerds In Space, a multi-player spaceship bridge simulator",
);

/**
 * Proxy StatusNotifierItems as XEmbedded systemtray-spec icons
 */
export const snixembed = mkPackage(
  nixRaw`pkgs.snixembed`,
  "Proxy StatusNotifierItems as XEmbedded systemtray-spec icons",
);

/**
 * SNMP enumerator
 */
export const snmpcheck = mkPackage(
  nixRaw`pkgs.snmpcheck`,
  "SNMP enumerator",
);

/**
 * The Macro Implementation of SNOBOL4 in C
 */
export const snobol4 = mkPackage(
  nixRaw`pkgs.snobol4`,
  "The Macro Implementation of SNOBOL4 in C",
);

/**
 * Tool for waiting until a particular time and then running a command
 */
export const snooze = mkPackage(
  nixRaw`pkgs.snooze`,
  "Tool for waiting until a particular time and then running a command",
);

/**
 * sleep with feedback
 */
export const snore = mkPackage(
  nixRaw`pkgs.snore`,
  "sleep with feedback",
);

/**
 * Network intrusion prevention and detection system (IDS/IPS)
 */
export const snort = mkPackage(
  nixRaw`pkgs.snort`,
  "Network intrusion prevention and detection system (IDS/IPS)",
);

/**
 * Conceal messages in ASCII text by appending whitespace to the end of lines
 */
export const snow = mkPackage(
  nixRaw`pkgs.snow`,
  "Conceal messages in ASCII text by appending whitespace to the end of lines",
);

/**
 * Smooth blue theme based on Materia Design
 */
export const snowblind = mkPackage(
  nixRaw`pkgs.snowblind`,
  "Smooth blue theme based on Materia Design",
);

/**
 * A tool to audit the istio service mesh
 */
export const snowcat = mkPackage(
  nixRaw`pkgs.snowcat`,
  "A tool to audit the istio service mesh",
);

/**
 * Polyglot payload generator
 */
export const snowcrash = mkPackage(
  nixRaw`pkgs.snowcrash`,
  "Polyglot payload generator",
);

/**
 * System to defeat internet censorship
 */
export const snowflake = mkPackage(
  nixRaw`pkgs.snowflake`,
  "System to defeat internet censorship",
);

/**
 * A python script that will make your terminal snow
 */
export const snowmachine = mkPackage(
  nixRaw`pkgs.snowmachine`,
  "A python script that will make your terminal snow",
);

/**
 * Native code to C/C++ decompiler
 */
export const snowman = mkPackage(
  nixRaw`pkgs.snowman`,
  "Native code to C/C++ decompiler",
);

/**
 * Command line client for the Snowflake database
 */
export const snowsql = mkPackage(
  nixRaw`pkgs.snowsql`,
  "Command line client for the Snowflake database",
);

/**
 * Genetic variant annotation and effect prediction toolbox
 */
export const snpeff = mkPackage(
  nixRaw`pkgs.snpeff`,
  "Genetic variant annotation and effect prediction toolbox",
);

/**
 * A social networking service scraper
 */
export const snscrape = mkPackage(
  nixRaw`pkgs.snscrape`,
  "A social networking service scraper",
);

/**
 * Scans and monitors projects for security vulnerabilities
 */
export const snyk = mkPackage(
  nixRaw`pkgs.snyk`,
  "Scans and monitors projects for security vulnerabilities",
);

/**
 * A compression/decompression tool based on snappy
 */
export const snzip = mkPackage(
  nixRaw`pkgs.snzip`,
  "A compression/decompression tool based on snappy",
);

/**
 * A TUI interface to the StackExchange network
 */
export const so = mkPackage(
  nixRaw`pkgs.so`,
  "A TUI interface to the StackExchange network",
);

/**
 * The Most Advanced REST & SOAP Testing Tool in the World
 */
export const soapui = mkPackage(
  nixRaw`pkgs.soapui`,
  "The Most Advanced REST & SOAP Testing Tool in the World",
);

/**
 * SoapySDR plugin for Airspy devices
 */
export const soapyairspy = mkPackage(
  nixRaw`pkgs.soapyairspy`,
  "SoapySDR plugin for Airspy devices",
);

/**
 * SoapySDR plugin for amateur radio and audio devices
 */
export const soapyaudio = mkPackage(
  nixRaw`pkgs.soapyaudio`,
  "SoapySDR plugin for amateur radio and audio devices",
);

/**
 * SoapySDR plugin for BladeRF devices
 */
export const soapybladerf = mkPackage(
  nixRaw`pkgs.soapybladerf`,
  "SoapySDR plugin for BladeRF devices",
);

/**
 * SoapySDR plugin for HackRF devices
 */
export const soapyhackrf = mkPackage(
  nixRaw`pkgs.soapyhackrf`,
  "SoapySDR plugin for HackRF devices",
);

/**
 * SoapySDR plugin for remote access to SDRs
 */
export const soapyremote = mkPackage(
  nixRaw`pkgs.soapyremote`,
  "SoapySDR plugin for remote access to SDRs",
);

/**
 * SoapySDR plugin for RTL-SDR devices
 */
export const soapyrtlsdr = mkPackage(
  nixRaw`pkgs.soapyrtlsdr`,
  "SoapySDR plugin for RTL-SDR devices",
);

/**
 * Vendor and platform neutral SDR support library
 */
export const soapysdr = mkPackage(
  nixRaw`pkgs.soapysdr`,
  "Vendor and platform neutral SDR support library",
);

/**
 * Vendor and platform neutral SDR support library
 */
export const soapysdr_with_plugins = mkPackage(
  nixRaw`pkgs.soapysdr-with-plugins`,
  "Vendor and platform neutral SDR support library",
);

/**
 * Soapy SDR module for SDRplay
 */
export const soapysdrplay = mkPackage(
  nixRaw`pkgs.soapysdrplay`,
  "Soapy SDR module for SDRplay",
);

/**
 * SoapySDR plugin for UHD devices
 */
export const soapyuhd = mkPackage(
  nixRaw`pkgs.soapyuhd`,
  "SoapySDR plugin for UHD devices",
);

/**
 * Utility for bidirectional data transfer between two independent data channels
 */
export const socat = mkPackage(
  nixRaw`pkgs.socat`,
  "Utility for bidirectional data transfer between two independent data channels",
);

/**
 * Database access library for C++
 */
export const soci = mkPackage(
  nixRaw`pkgs.soci`,
  "Database access library for C++",
);

/**
 * Open-source penetration testing framework designed for social engineering
 */
export const social_engineer_toolkit = mkPackage(
  nixRaw`pkgs.social-engineer-toolkit`,
  "Open-source penetration testing framework designed for social engineering",
);

/**
 * Python library and CLI for accurately querying username and email usage on online platforms
 */
export const socialscan = mkPackage(
  nixRaw`pkgs.socialscan`,
  "Python library and CLI for accurately querying username and email usage on online platforms",
);

/**
 * Dump unix domain socket traffic with bpf
 */
export const sockdump = mkPackage(
  nixRaw`pkgs.sockdump`,
  "Dump unix domain socket traffic with bpf",
);

/**
 * A library passing all socket communications through unix sockets
 */
export const socket_wrapper = mkPackage(
  nixRaw`pkgs.socket_wrapper`,
  "A library passing all socket communications through unix sockets",
);

/**
 * System and kernel logging services
 */
export const socklog = mkPackage(
  nixRaw`pkgs.socklog`,
  "System and kernel logging services",
);

/**
 * Network Benchmarking Utility
 */
export const sockperf = mkPackage(
  nixRaw`pkgs.sockperf`,
  "Network Benchmarking Utility",
);

/**
 * Command-line interface to control Sonos sound systems
 */
export const soco_cli = mkPackage(
  nixRaw`pkgs.soco-cli`,
  "Command-line interface to control Sonos sound systems",
);

/**
 * Sound Open Firmware
 */
export const sof_firmware = mkPackage(
  nixRaw`pkgs.sof-firmware`,
  "Sound Open Firmware",
);

/**
 * Open-source SIP User-Agent library, compliant with the IETF RFC3261 specification
 */
export const sofia_sip = mkPackage(
  nixRaw`pkgs.sofia_sip`,
  "Open-source SIP User-Agent library, compliant with the IETF RFC3261 specification",
);

/**
 * A tasty, self-hosted Git server for the command line
 */
export const soft_serve = mkPackage(
  nixRaw`pkgs.soft-serve`,
  "A tasty, self-hosted Git server for the command line",
);

/**
 * An Open-Source Free Cross-platform Multi-protocol VPN Program
 */
export const softether = mkPackage(
  nixRaw`pkgs.softether`,
  "An Open-Source Free Cross-platform Multi-protocol VPN Program",
);

/**
 * Cryptographic store accessible through a PKCS #11 interface
 */
export const softhsm = mkPackage(
  nixRaw`pkgs.softhsm`,
  "Cryptographic store accessible through a PKCS #11 interface",
);

/**
 * An office suite with a word processor, spreadsheet and presentation program
 */
export const softmaker_office = mkPackage(
  nixRaw`pkgs.softmaker-office`,
  "An office suite with a word processor, spreadsheet and presentation program",
);

/**
 * Software networking with isolation for Tart
 */
export const softnet = mkPackage(
  nixRaw`pkgs.softnet`,
  "Software networking with isolation for Tart",
);

/**
 * A very fast and scalable modern collaboration suite (groupware)
 */
export const sogo = mkPackage(
  nixRaw`pkgs.sogo`,
  "A very fast and scalable modern collaboration suite (groupware)",
);

/**
 * A physics-based puzzle game
 */
export const soi = mkPackage(
  nixRaw`pkgs.soi`,
  "A physics-based puzzle game",
);

/**
 * Simple OpenGL Image Library
 */
export const soil = mkPackage(
  nixRaw`pkgs.soil`,
  "Simple OpenGL Image Library",
);

/**
 * A user-friendly IRC bouncer
 */
export const soju = mkPackage(
  nixRaw`pkgs.soju`,
  "A user-friendly IRC bouncer",
);

/**
 * Minimal cross-platform standalone C headers
 */
export const sokol = mkPackage(
  nixRaw`pkgs.sokol`,
  "Minimal cross-platform standalone C headers",
);

/**
 * Lua API wrapper with advanced features and top notch performance
 */
export const sol2 = mkPackage(
  nixRaw`pkgs.sol2`,
  "Lua API wrapper with advanced features and top notch performance",
);

/**
 * Linux devices manager for the Logitech Unifying Receiver
 */
export const solaar = mkPackage(
  nixRaw`pkgs.solaar`,
  "Linux devices manager for the Logitech Unifying Receiver",
);

/**
 * Web-Scale Blockchain for fast, secure, scalable, decentralized apps and marketplaces. 
 */
export const solana_cli = mkPackage(
  nixRaw`pkgs.solana-cli`,
  "Web-Scale Blockchain for fast, secure, scalable, decentralized apps and marketplaces. ",
);

/**
 * Web-Scale Blockchain for fast, secure, scalable, decentralized apps and marketplaces. 
 */
export const solana_validator = mkPackage(
  nixRaw`pkgs.solana-validator`,
  "Web-Scale Blockchain for fast, secure, scalable, decentralized apps and marketplaces. ",
);

/**
 * An IRCd for unified networks
 */
export const solanum = mkPackage(
  nixRaw`pkgs.solanum`,
  "An IRCd for unified networks",
);

/**
 * Solarized version of the Arc theme
 */
export const solarc_gtk_theme = mkPackage(
  nixRaw`pkgs.solarc-gtk-theme`,
  "Solarized version of the Arc theme",
);

export const solargraph = mkPackage(
  nixRaw`pkgs.solargraph`,
  "",
);

/**
 * A Zelda-like ARPG game engine
 */
export const solarus = mkPackage(
  nixRaw`pkgs.solarus`,
  "A Zelda-like ARPG game engine",
);

/**
 * The editor for the Zelda-like ARPG game engine, Solarus
 */
export const solarus_quest_editor = mkPackage(
  nixRaw`pkgs.solarus-quest-editor`,
  "The editor for the Zelda-like ARPG game engine, Solarus",
);

/**
 * Compiler for Ethereum smart contract language Solidity
 */
export const solc = mkPackage(
  nixRaw`pkgs.solc`,
  "Compiler for Ethereum smart contract language Solidity",
);

/**
 * Manage and switch between Solidity compiler versions
 */
export const solc_select = mkPackage(
  nixRaw`pkgs.solc-select`,
  "Manage and switch between Solidity compiler versions",
);

/**
 * Ear training program
 */
export const solfege = mkPackage(
  nixRaw`pkgs.solfege`,
  "Ear training program",
);

/**
 * A version of Solitaire written in C++ using the ncurses library
 */
export const solicurses = mkPackage(
  nixRaw`pkgs.solicurses`,
  "A version of Solitaire written in C++ using the ncurses library",
);

/**
 * A tool environment for safe floating-point code development
 */
export const sollya = mkPackage(
  nixRaw`pkgs.sollya`,
  "A tool environment for safe floating-point code development",
);

/**
 * A CLI tool for managing SoloKeys' Solo2 USB security keys.
 */
export const solo2_cli = mkPackage(
  nixRaw`pkgs.solo2-cli`,
  "A CLI tool for managing SoloKeys' Solo2 USB security keys.",
);

/**
 * Sandboxed execution environment
 */
export const solo5 = mkPackage(
  nixRaw`pkgs.solo5`,
  "Sandboxed execution environment",
);

/**
 * A parametric 3d CAD program
 */
export const solvespace = mkPackage(
  nixRaw`pkgs.solvespace`,
  "A parametric 3d CAD program",
);

/**
 * Listen to SomaFM in your terminal via pure bash
 */
export const somafm_cli = mkPackage(
  nixRaw`pkgs.somafm-cli`,
  "Listen to SomaFM in your terminal via pure bash",
);

/**
 * Identify single nucleotide positions that are different between tumor and normal
 */
export const somatic_sniper = mkPackage(
  nixRaw`pkgs.somatic-sniper`,
  "Identify single nucleotide positions that are different between tumor and normal",
);

/**
 * dwm-like bar for dwl
 */
export const somebar = mkPackage(
  nixRaw`pkgs.somebar`,
  "dwm-like bar for dwl",
);

/**
 * Nested Wayland compositor with support for X11 forwarding
 */
export const sommelier = mkPackage(
  nixRaw`pkgs.sommelier`,
  "Nested Wayland compositor with support for X11 forwarding",
);

/**
 * SonarQube Scanner used to start code analysis
 */
export const sonar_scanner_cli = mkPackage(
  nixRaw`pkgs.sonar-scanner-cli`,
  "SonarQube Scanner used to start code analysis",
);

/**
 * Smart PVR for newsgroup and bittorrent users
 */
export const sonarr = mkPackage(
  nixRaw`pkgs.sonarr`,
  "Smart PVR for newsgroup and bittorrent users",
);

/**
 * An elegant client for the Music Player Daemon
 */
export const sonata = mkPackage(
  nixRaw`pkgs.sonata`,
  "An elegant client for the Music Player Daemon",
);

/**
 * An open-source Shazam client for Linux, written in Rust
 */
export const songrec = mkPackage(
  nixRaw`pkgs.songrec`,
  "An open-source Shazam client for Linux, written in Rust",
);

/**
 * Simple library to speed up or slow down speech
 */
export const sonic = mkPackage(
  nixRaw`pkgs.sonic`,
  "Simple library to speed up or slow down speech",
);

/**
 * Comparative visualisation of related audio recordings
 */
export const sonic_lineup = mkPackage(
  nixRaw`pkgs.sonic-lineup`,
  "Comparative visualisation of related audio recordings",
);

/**
 * Free live coding synth for everyone originally designed to support computing and music lessons within schools
 */
export const sonic_pi = mkPackage(
  nixRaw`pkgs.sonic-pi`,
  "Free live coding synth for everyone originally designed to support computing and music lessons within schools",
);

/**
 * Fast, lightweight and schema-less search backend
 */
export const sonic_server = mkPackage(
  nixRaw`pkgs.sonic-server`,
  "Fast, lightweight and schema-less search backend",
);

/**
 * View and analyse contents of music audio files
 */
export const sonic_visualiser = mkPackage(
  nixRaw`pkgs.sonic-visualiser`,
  "View and analyse contents of music audio files",
);

/**
 * MIDI synthesizer library
 */
export const sonivox = mkPackage(
  nixRaw`pkgs.sonivox`,
  "MIDI synthesizer library",
);

/**
 * Full-featured Subsonic/Jellyfin compatible desktop music player
 */
export const sonixd = mkPackage(
  nixRaw`pkgs.sonixd`,
  "Full-featured Subsonic/Jellyfin compatible desktop music player",
);

        /**
         * Diagnostic tool that makes it easier to understand the
state of a Kubernetes cluster.

         */
export const sonobuoy = mkPackage(
  nixRaw`pkgs.sonobuoy`,
  "Diagnostic tool that makes it easier to understand the\nstate of a Kubernetes cluster.\n",
);

/**
 * High-quality network audio streaming
 */
export const sonobus = mkPackage(
  nixRaw`pkgs.sonobus`,
  "High-quality network audio streaming",
);

/**
 * Flash Itead Sonoff devices with custom firmware via original OTA mechanism
 */
export const sonota = mkPackage(
  nixRaw`pkgs.sonota`,
  "Flash Itead Sonoff devices with custom firmware via original OTA mechanism",
);

/**
 * A client recreating the functionality of the Sony Headphones app
 */
export const sony_headphones_client = mkPackage(
  nixRaw`pkgs.sony-headphones-client`,
  "A client recreating the functionality of the Sony Headphones app",
);

/**
 * A live looping sampler capable of immediate loop recording, overdubbing, multiplying, reversing and more
 */
export const sooperlooper = mkPackage(
  nixRaw`pkgs.sooperlooper`,
  "A live looping sampler capable of immediate loop recording, overdubbing, multiplying, reversing and more",
);

/**
 * An extensive set of frameworks which form a complete Web application server environment
 */
export const sope = mkPackage(
  nixRaw`pkgs.sope`,
  "An extensive set of frameworks which form a complete Web application server environment",
);

/**
 * Simple and flexible tool for managing secrets
 */
export const sops = mkPackage(
  nixRaw`pkgs.sops`,
  "Simple and flexible tool for managing secrets",
);

/**
 * A wavetable LV2 plugin synth, targeted at the electronic / dubstep genre
 */
export const sorcer = mkPackage(
  nixRaw`pkgs.sorcer`,
  "A wavetable LV2 plugin synth, targeted at the electronic / dubstep genre",
);

/**
 * A lightweight C library for storing RDF data in memory
 */
export const sord = mkPackage(
  nixRaw`pkgs.sord`,
  "A lightweight C library for storing RDF data in memory",
);

/**
 * Sgrep (sorted grep) searches sorted input files for lines that match a search key
 */
export const sorted_grep = mkPackage(
  nixRaw`pkgs.sorted-grep`,
  "Sgrep (sorted grep) searches sorted input files for lines that match a search key",
);

/**
 * Tools for filtering, mapping, and OTU-picking from shotgun genomics data
 */
export const sortmerna = mkPackage(
  nixRaw`pkgs.sortmerna`,
  "Tools for filtering, mapping, and OTU-picking from shotgun genomics data",
);

/**
 * A ‘revival’ of Goudy Oldstyle and Italic
 */
export const sorts_mill_goudy = mkPackage(
  nixRaw`pkgs.sorts-mill-goudy`,
  "A ‘revival’ of Goudy Oldstyle and Italic",
);

/**
 * Unified tool for collecting system logs and other debug information
 */
export const sosreport = mkPackage(
  nixRaw`pkgs.sosreport`,
  "Unified tool for collecting system logs and other debug information",
);

/**
 * A translator of declarative Datalog programs into the C++ language
 */
export const souffle = mkPackage(
  nixRaw`pkgs.souffle`,
  "A translator of declarative Datalog programs into the C++ language",
);

/**
 * Official Qt SoulSeek client
 */
export const soulseekqt = mkPackage(
  nixRaw`pkgs.soulseekqt`,
  "Official Qt SoulSeek client",
);

/**
 * A Gnome CD Ripper
 */
export const sound_juicer = mkPackage(
  nixRaw`pkgs.sound-juicer`,
  "A Gnome CD Ripper",
);

/**
 * Audibilization and Visualization of Sorting Algorithms
 */
export const sound_of_sorting = mkPackage(
  nixRaw`pkgs.sound-of-sorting`,
  "Audibilization and Visualization of Sorting Algorithms",
);

/**
 * Freedesktop reference sound theme
 */
export const sound_theme_freedesktop = mkPackage(
  nixRaw`pkgs.sound-theme-freedesktop`,
  "Freedesktop reference sound theme",
);

/**
 * Leading audio file converter for the GNOME Desktop
 */
export const soundconverter = mkPackage(
  nixRaw`pkgs.soundconverter`,
  "Leading audio file converter for the GNOME Desktop",
);

/**
 * Frank Wen's pro-quality GM/GS soundfont
 */
export const soundfont_fluid = mkPackage(
  nixRaw`pkgs.soundfont-fluid`,
  "Frank Wen's pro-quality GM/GS soundfont",
);

/**
 * a SoundFont bank featuring 259 instrument presets and 11 drum kits
 */
export const soundfont_generaluser = mkPackage(
  nixRaw`pkgs.soundfont-generaluser`,
  "a SoundFont bank featuring 259 instrument presets and 11 drum kits",
);

/**
 * Acoustic grand piano soundfont
 */
export const soundfont_ydp_grand = mkPackage(
  nixRaw`pkgs.soundfont-ydp-grand`,
  "Acoustic grand piano soundfont",
);

/**
 * Audio file converter, CD ripper and Replay Gain tool
 */
export const soundkonverter = mkPackage(
  nixRaw`pkgs.soundkonverter`,
  "Audio file converter, CD ripper and Replay Gain tool",
);

/**
 * Audio based modem for ham radio supporting ax.25
 */
export const soundmodem = mkPackage(
  nixRaw`pkgs.soundmodem`,
  "Audio based modem for ham radio supporting ax.25",
);

/**
 * Sound controller for macOS
 */
export const soundsource = mkPackage(
  nixRaw`pkgs.soundsource`,
  "Sound controller for macOS",
);

/**
 * A program and library for changing the tempo, pitch and playback rate of audio
 */
export const soundtouch = mkPackage(
  nixRaw`pkgs.soundtouch`,
  "A program and library for changing the tempo, pitch and playback rate of audio",
);

/**
 * A music tracking tool similar in design to the DOS program FastTracker and the Amiga legend ProTracker
 */
export const soundtracker = mkPackage(
  nixRaw`pkgs.soundtracker`,
  "A music tracking tool similar in design to the DOS program FastTracker and the Amiga legend ProTracker",
);

/**
 * A cross-platform soundboard.
 */
export const soundux = mkPackage(
  nixRaw`pkgs.soundux`,
  "A cross-platform soundboard.",
);

/**
 * Turn your Android device into wireless headphones / wireless speaker
 */
export const soundwireserver = mkPackage(
  nixRaw`pkgs.soundwireserver`,
  "Turn your Android device into wireless headphones / wireless speaker",
);

/**
 * A tool that helps you create and manage static websites
 */
export const soupault = mkPackage(
  nixRaw`pkgs.soupault`,
  "A tool that helps you create and manage static websites",
);

/**
 * Source code renderer with syntax highlighting
 */
export const sourceHighlight = mkPackage(
  nixRaw`pkgs.sourceHighlight`,
  "Source code renderer with syntax highlighting",
);

/**
 * Monospaced font family for user interface and coding environments
 */
export const source_code_pro = mkPackage(
  nixRaw`pkgs.source-code-pro`,
  "Monospaced font family for user interface and coding environments",
);

/**
 * A monospaced Latin font suitable for coding
 */
export const source_han_code_jp = mkPackage(
  nixRaw`pkgs.source-han-code-jp`,
  "A monospaced Latin font suitable for coding",
);

/**
 * An open source Pan-CJK monospaced typeface
 */
export const source_han_mono = mkPackage(
  nixRaw`pkgs.source-han-mono`,
  "An open source Pan-CJK monospaced typeface",
);

/**
 * An open source Pan-CJK sans-serif typeface
 */
export const source_han_sans = mkPackage(
  nixRaw`pkgs.source-han-sans`,
  "An open source Pan-CJK sans-serif typeface",
);

/**
 * An open source Pan-CJK Sans typeface
 */
export const source_han_sans_vf_otf = mkPackage(
  nixRaw`pkgs.source-han-sans-vf-otf`,
  "An open source Pan-CJK Sans typeface",
);

/**
 * An open source Pan-CJK Sans typeface
 */
export const source_han_sans_vf_ttf = mkPackage(
  nixRaw`pkgs.source-han-sans-vf-ttf`,
  "An open source Pan-CJK Sans typeface",
);

/**
 * An open source Pan-CJK serif typeface
 */
export const source_han_serif = mkPackage(
  nixRaw`pkgs.source-han-serif`,
  "An open source Pan-CJK serif typeface",
);

/**
 * An open source Pan-CJK Serif typeface
 */
export const source_han_serif_vf_otf = mkPackage(
  nixRaw`pkgs.source-han-serif-vf-otf`,
  "An open source Pan-CJK Serif typeface",
);

/**
 * An open source Pan-CJK Serif typeface
 */
export const source_han_serif_vf_ttf = mkPackage(
  nixRaw`pkgs.source-han-serif-vf-ttf`,
  "An open source Pan-CJK Serif typeface",
);

/**
 * Sans serif font family for user interface environments
 */
export const source_sans = mkPackage(
  nixRaw`pkgs.source-sans`,
  "Sans serif font family for user interface environments",
);

/**
 * Sans serif font family for user interface environments
 */
export const source_sans_pro = mkPackage(
  nixRaw`pkgs.source-sans-pro`,
  "Sans serif font family for user interface environments",
);

/**
 * Typeface for setting text in many sizes, weights, and languages. Designed to complement Source Sans
 */
export const source_serif = mkPackage(
  nixRaw`pkgs.source-serif`,
  "Typeface for setting text in many sizes, weights, and languages. Designed to complement Source Sans",
);

/**
 * Typeface for setting text in many sizes, weights, and languages. Designed to complement Source Sans
 */
export const source_serif_pro = mkPackage(
  nixRaw`pkgs.source-serif-pro`,
  "Typeface for setting text in many sizes, weights, and languages. Designed to complement Source Sans",
);

/**
 * Language Server Protocol implementation for Swift and C-based languages
 */
export const sourcekit_lsp = mkPackage(
  nixRaw`pkgs.sourcekit-lsp`,
  "Language Server Protocol implementation for Swift and C-based languages",
);

/**
 * Workspace overview app for sway
 */
export const sov = mkPackage(
  nixRaw`pkgs.sov`,
  "Workspace overview app for sway",
);

/**
 * Sample Rate Converter for audio
 */
export const sox = mkPackage(
  nixRaw`pkgs.sox`,
  "Sample Rate Converter for audio",
);

/**
 * An audio resampling library
 */
export const soxr = mkPackage(
  nixRaw`pkgs.soxr`,
  "An audio resampling library",
);

/**
 * A GUI binding for using Open Inventor with Xt/Motif
 */
export const soxt = mkPackage(
  nixRaw`pkgs.soxt`,
  "A GUI binding for using Open Inventor with Xt/Motif",
);

/**
 * Open Source HTTP Reverse Proxy built in Rust for Immutable Infrastructures
 */
export const sozu = mkPackage(
  nixRaw`pkgs.sozu`,
  "Open Source HTTP Reverse Proxy built in Rust for Immutable Infrastructures",
);

/**
 * A multi-panel tabbed file manager
 */
export const spaceFM = mkPackage(
  nixRaw`pkgs.spaceFM`,
  "A multi-panel tabbed file manager",
);

/**
 * Reverse engineering of 3D Pinball for Windows – Space Cadet, a game bundled with Windows
 */
export const space_cadet_pinball = mkPackage(
  nixRaw`pkgs.space-cadet-pinball`,
  "Reverse engineering of 3D Pinball for Windows – Space Cadet, a game bundled with Windows",
);

/**
 * A space combat simulator
 */
export const space_orbit = mkPackage(
  nixRaw`pkgs.space-orbit`,
  "A space combat simulator",
);

/**
 * Launcher for Space Station 14, a multiplayer game about paranoia and disaster
 */
export const space_station_14_launcher = mkPackage(
  nixRaw`pkgs.space-station-14-launcher`,
  "Launcher for Space Station 14, a multiplayer game about paranoia and disaster",
);

/**
 * A minimal status bar for macOS
 */
export const spacebar = mkPackage(
  nixRaw`pkgs.spacebar`,
  "A minimal status bar for macOS",
);

/**
 * Gopher server library and daemon
 */
export const spacecookie = mkPackage(
  nixRaw`pkgs.spacecookie`,
  "Gopher server library and daemon",
);

/**
 * An example application to test the spacenavd driver
 */
export const spacenav_cube_example = mkPackage(
  nixRaw`pkgs.spacenav-cube-example`,
  "An example application to test the spacenavd driver",
);

/**
 * Device driver and SDK for 3Dconnexion 3D input devices
 */
export const spacenavd = mkPackage(
  nixRaw`pkgs.spacenavd`,
  "Device driver and SDK for 3Dconnexion 3D input devices",
);

/**
 * CLI tool to insert spacers when command output stops
 */
export const spacer = mkPackage(
  nixRaw`pkgs.spacer`,
  "CLI tool to insert spacers when command output stops",
);

/**
 * Zsh prompt for Astronauts
 */
export const spaceship_prompt = mkPackage(
  nixRaw`pkgs.spaceship-prompt`,
  "Zsh prompt for Astronauts",
);

/**
 * Modern Vim distribution
 */
export const spacevim = mkPackage(
  nixRaw`pkgs.spacevim`,
  "Modern Vim distribution",
);

export const spacx_gtk_theme = mkPackage(
  nixRaw`pkgs.spacx-gtk-theme`,
  "",
);

/**
 * Open-Source Spam Filter
 */
export const spamassassin = mkPackage(
  nixRaw`pkgs.spamassassin`,
  "Open-Source Spam Filter",
);

/**
 * A C++20-like span for C++98, C++11 and later in a single-file header-only library
 */
export const span_lite = mkPackage(
  nixRaw`pkgs.span-lite`,
  "A C++20-like span for C++98, C++11 and later in a single-file header-only library",
);

/**
 * A portable and modular SIP User-Agent with audio and video support
 */
export const spandsp = mkPackage(
  nixRaw`pkgs.spandsp`,
  "A portable and modular SIP User-Agent with audio and video support",
);

/**
 * A portable and modular SIP User-Agent with audio and video support
 */
export const spandsp3 = mkPackage(
  nixRaw`pkgs.spandsp3`,
  "A portable and modular SIP User-Agent with audio and video support",
);

/**
 * Apache Spark is a fast and general engine for large-scale data processing
 */
export const spark = mkPackage(
  nixRaw`pkgs.spark`,
  "Apache Spark is a fast and general engine for large-scale data processing",
);

/**
 * a software development technology specifically designed for engineering high-reliability applications
 */
export const spark2014 = mkPackage(
  nixRaw`pkgs.spark2014`,
  "a software development technology specifically designed for engineering high-reliability applications",
);

/**
 * Apache Spark is a fast and general engine for large-scale data processing
 */
export const spark3 = mkPackage(
  nixRaw`pkgs.spark3`,
  "Apache Spark is a fast and general engine for large-scale data processing",
);

/**
 * Apache Spark is a fast and general engine for large-scale data processing
 */
export const spark_3_2 = mkPackage(
  nixRaw`pkgs.spark_3_2`,
  "Apache Spark is a fast and general engine for large-scale data processing",
);

/**
 * Apache Spark is a fast and general engine for large-scale data processing
 */
export const spark_3_3 = mkPackage(
  nixRaw`pkgs.spark_3_3`,
  "Apache Spark is a fast and general engine for large-scale data processing",
);

/**
 * Apache Spark is a fast and general engine for large-scale data processing
 */
export const spark_3_4 = mkPackage(
  nixRaw`pkgs.spark_3_4`,
  "Apache Spark is a fast and general engine for large-scale data processing",
);

/**
 * Share and collaborate by syncing with any Git repository instantly. Linux, macOS, and Windows
 */
export const sparkleshare = mkPackage(
  nixRaw`pkgs.sparkleshare`,
  "Share and collaborate by syncing with any Git repository instantly. Linux, macOS, and Windows",
);

/**
 * A modern desktop Bitcoin wallet application supporting most hardware wallets and built on common standards such as PSBT, with an emphasis on transparency and usability.
 */
export const sparrow = mkPackage(
  nixRaw`pkgs.sparrow`,
  "A modern desktop Bitcoin wallet application supporting most hardware wallets and built on common standards such as PSBT, with an emphasis on transparency and usability.",
);

/**
 * A software renderer for different open handhelds like the gp2x, wiz, caanoo and pandora
 */
export const sparrow3d = mkPackage(
  nixRaw`pkgs.sparrow3d`,
  "A software renderer for different open handhelds like the gp2x, wiz, caanoo and pandora",
);

/**
 * A modern desktop Bitcoin wallet application supporting most hardware wallets and built on common standards such as PSBT, with an emphasis on transparency and usability.
 */
export const sparrow_unwrapped = mkPackage(
  nixRaw`pkgs.sparrow-unwrapped`,
  "A modern desktop Bitcoin wallet application supporting most hardware wallets and built on common standards such as PSBT, with an emphasis on transparency and usability.",
);

/**
 * Semantic parser for C
 */
export const sparse = mkPackage(
  nixRaw`pkgs.sparse`,
  "Semantic parser for C",
);

/**
 * An extremely memory-efficient hash_map implementation
 */
export const sparsehash = mkPackage(
  nixRaw`pkgs.sparsehash`,
  "An extremely memory-efficient hash_map implementation",
);

/**
 * Z80 assembler with extra features to support development for TI calculators
 */
export const spasm_ng = mkPackage(
  nixRaw`pkgs.spasm-ng`,
  "Z80 assembler with extra features to support development for TI calculators",
);

/**
 * Automated theorem prover for first-order logic
 */
export const spass = mkPackage(
  nixRaw`pkgs.spass`,
  "Automated theorem prover for first-order logic",
);

/**
 * Graphical user interface for SpatiaLite
 */
export const spatialite_gui = mkPackage(
  nixRaw`pkgs.spatialite_gui`,
  "Graphical user interface for SpatiaLite",
);

/**
 * A complete sqlite3-compatible CLI front-end for libspatialite
 */
export const spatialite_tools = mkPackage(
  nixRaw`pkgs.spatialite_tools`,
  "A complete sqlite3-compatible CLI front-end for libspatialite",
);

/**
 * Provides an interface to external programs that support the FastCGI interface
 */
export const spawn_fcgi = mkPackage(
  nixRaw`pkgs.spawn_fcgi`,
  "Provides an interface to external programs that support the FastCGI interface",
);

/**
 * Set of libraries for fast user-mode storage
 */
export const spdk = mkPackage(
  nixRaw`pkgs.spdk`,
  "Set of libraries for fast user-mode storage",
);

/**
 * Very fast, header only, C++ logging library
 */
export const spdlog = mkPackage(
  nixRaw`pkgs.spdlog`,
  "Very fast, header only, C++ logging library",
);

/**
 * Various data formats for the SPDX License List
 */
export const spdx_license_list_data = mkPackage(
  nixRaw`pkgs.spdx-license-list-data`,
  "Various data formats for the SPDX License List",
);

/**
 * Converts Specr lang code to Rust
 */
export const specr_transpile = mkPackage(
  nixRaw`pkgs.specr-transpile`,
  "Converts Specr lang code to Rust",
);

/**
 * Allows to analyze samples of musical instruments, and to combine them (morphing) to construct hybrid sounds
 */
export const spectmorph = mkPackage(
  nixRaw`pkgs.spectmorph`,
  "Allows to analyze samples of musical instruments, and to combine them (morphing) to construct hybrid sounds",
);

/**
 * A C++ library for large scale eigenvalue problems, built on top of Eigen
 */
export const spectra = mkPackage(
  nixRaw`pkgs.spectra`,
  "A C++ library for large scale eigenvalue problems, built on top of Eigen",
);

/**
 * A stateless cryptographic identity algorithm
 */
export const spectre_cli = mkPackage(
  nixRaw`pkgs.spectre-cli`,
  "A stateless cryptographic identity algorithm",
);

/**
 * Spectre & Meltdown vulnerability/mitigation checker for Linux
 */
export const spectre_meltdown_checker = mkPackage(
  nixRaw`pkgs.spectre-meltdown-checker`,
  "Spectre & Meltdown vulnerability/mitigation checker for Linux",
);

/**
 * A little spectrogram/audiogram/sonogram/whatever for JACK
 */
export const spectrojack = mkPackage(
  nixRaw`pkgs.spectrojack`,
  "A little spectrogram/audiogram/sonogram/whatever for JACK",
);

/**
 * A tiling window manager
 */
export const spectrwm = mkPackage(
  nixRaw`pkgs.spectrwm`,
  "A tiling window manager",
);

/**
 * Speech denoise lv2 plugin based on RNNoise library
 */
export const speech_denoiser = mkPackage(
  nixRaw`pkgs.speech-denoiser`,
  "Speech denoise lv2 plugin based on RNNoise library",
);

/**
 * Text-to-speech engine
 */
export const speech_tools = mkPackage(
  nixRaw`pkgs.speech-tools`,
  "Text-to-speech engine",
);

/**
 * Common interface to speech synthesis
 */
export const speechd = mkPackage(
  nixRaw`pkgs.speechd`,
  "Common interface to speech synthesis",
);

/**
 * Car racing game - TORCS fork with more experimental approach
 */
export const speed_dreams = mkPackage(
  nixRaw`pkgs.speed_dreams`,
  "Car racing game - TORCS fork with more experimental approach",
);

/**
 * A fast power user calculator
 */
export const speedcrunch = mkPackage(
  nixRaw`pkgs.speedcrunch`,
  "A fast power user calculator",
);

/**
 * A simple terminal-based open source Spritz-alike
 */
export const speedread = mkPackage(
  nixRaw`pkgs.speedread`,
  "A simple terminal-based open source Spritz-alike",
);

/**
 * Command line interface for testing internet bandwidth using speedtest.net
 */
export const speedtest_cli = mkPackage(
  nixRaw`pkgs.speedtest-cli`,
  "Command line interface for testing internet bandwidth using speedtest.net",
);

/**
 * CLI and Go API to Test Internet Speed using speedtest.net
 */
export const speedtest_go = mkPackage(
  nixRaw`pkgs.speedtest-go`,
  "CLI and Go API to Test Internet Speed using speedtest.net",
);

/**
 * Command line internet speedtest tool written in rust
 */
export const speedtest_rs = mkPackage(
  nixRaw`pkgs.speedtest-rs`,
  "Command line internet speedtest tool written in rust",
);

/**
 * An Open Source/Free Software patent-free audio compression format designed for speech
 */
export const speex = mkPackage(
  nixRaw`pkgs.speex`,
  "An Open Source/Free Software patent-free audio compression format designed for speech",
);

/**
 * An Open Source/Free Software patent-free audio compression format designed for speech
 */
export const speexdsp = mkPackage(
  nixRaw`pkgs.speexdsp`,
  "An Open Source/Free Software patent-free audio compression format designed for speech",
);

/**
 * Analyse your audio files by showing their spectrogram
 */
export const spek = mkPackage(
  nixRaw`pkgs.spek`,
  "Analyse your audio files by showing their spectrogram",
);

/**
 * Postfix policy engine for Sender Policy Framework (SPF) checking
 */
export const spf_engine = mkPackage(
  nixRaw`pkgs.spf-engine`,
  "Postfix policy engine for Sender Policy Framework (SPF) checking",
);

/**
 * Sparse 3D FFT library with MPI, OpenMP, CUDA and ROCm support
 */
export const spfft = mkPackage(
  nixRaw`pkgs.spfft`,
  "Sparse 3D FFT library with MPI, OpenMP, CUDA and ROCm support",
);

/**
 * C library for finding and handling crystal symmetries
 */
export const spglib = mkPackage(
  nixRaw`pkgs.spglib`,
  "C library for finding and handling crystal symmetries",
);

/**
 * Python documentation generator
 */
export const sphinx = mkPackage(
  nixRaw`pkgs.sphinx`,
  "Python documentation generator",
);

export const sphinxHook = mkPackage(
  nixRaw`pkgs.sphinxHook`,
  "",
);

/**
 * Rebuild Sphinx documentation on changes, with live-reload in the browser
 */
export const sphinx_autobuild = mkPackage(
  nixRaw`pkgs.sphinx-autobuild`,
  "Rebuild Sphinx documentation on changes, with live-reload in the browser",
);

/**
 * Spawns a simple HTTP server to preview your sphinx documents
 */
export const sphinx_serve = mkPackage(
  nixRaw`pkgs.sphinx-serve`,
  "Spawns a simple HTTP server to preview your sphinx documents",
);

/**
 * An open source full text search server
 */
export const sphinxsearch = mkPackage(
  nixRaw`pkgs.sphinxsearch`,
  "An open source full text search server",
);

/**
 * Complete open source solution for interaction with virtualized desktop devices
 */
export const spice = mkPackage(
  nixRaw`pkgs.spice`,
  "Complete open source solution for interaction with virtualized desktop devices",
);

/**
 * Automatically adjust the client window resolution in Linux KVM guests using the SPICE driver.
 */
export const spice_autorandr = mkPackage(
  nixRaw`pkgs.spice-autorandr`,
  "Automatically adjust the client window resolution in Linux KVM guests using the SPICE driver.",
);

/**
 * GTK 3 SPICE widget
 */
export const spice_gtk = mkPackage(
  nixRaw`pkgs.spice-gtk`,
  "GTK 3 SPICE widget",
);

/**
 * Protocol headers for the SPICE protocol
 */
export const spice_protocol = mkPackage(
  nixRaw`pkgs.spice-protocol`,
  "Protocol headers for the SPICE protocol",
);

/**
 * Create simple and beautiful presentations
 */
export const spice_up = mkPackage(
  nixRaw`pkgs.spice-up`,
  "Create simple and beautiful presentations",
);

/**
 * Enhanced SPICE integration for linux QEMU guest
 */
export const spice_vdagent = mkPackage(
  nixRaw`pkgs.spice-vdagent`,
  "Enhanced SPICE integration for linux QEMU guest",
);

/**
 * Open source permission database
 */
export const spicedb = mkPackage(
  nixRaw`pkgs.spicedb`,
  "Open source permission database",
);

/**
 * Command line for managing SpiceDB
 */
export const spicedb_zed = mkPackage(
  nixRaw`pkgs.spicedb-zed`,
  "Command line for managing SpiceDB",
);

/**
 * Command-line tool to customize Spotify client
 */
export const spicetify_cli = mkPackage(
  nixRaw`pkgs.spicetify-cli`,
  "Command-line tool to customize Spotify client",
);

/**
 * A Nintendo 64 segment assembler
 */
export const spicy = mkPackage(
  nixRaw`pkgs.spicy`,
  "A Nintendo 64 segment assembler",
);

/**
 * A C++ parser generator for dissecting protocols & files
 */
export const spicy_parser_generator = mkPackage(
  nixRaw`pkgs.spicy-parser-generator`,
  "A C++ parser generator for dissecting protocols & files",
);

/**
 * Mozilla's JavaScript engine written in C/C++
 */
export const spidermonkey_102 = mkPackage(
  nixRaw`pkgs.spidermonkey_102`,
  "Mozilla's JavaScript engine written in C/C++",
);

/**
 * Mozilla's JavaScript engine written in C/C++
 */
export const spidermonkey_115 = mkPackage(
  nixRaw`pkgs.spidermonkey_115`,
  "Mozilla's JavaScript engine written in C/C++",
);

/**
 * Mozilla's JavaScript engine written in C/C++
 */
export const spidermonkey_78 = mkPackage(
  nixRaw`pkgs.spidermonkey_78`,
  "Mozilla's JavaScript engine written in C/C++",
);

/**
 * Mozilla's JavaScript engine written in C/C++
 */
export const spidermonkey_91 = mkPackage(
  nixRaw`pkgs.spidermonkey_91`,
  "Mozilla's JavaScript engine written in C/C++",
);

/**
 * Secure online backup and sychronization
 */
export const spideroak = mkPackage(
  nixRaw`pkgs.spideroak`,
  "Secure online backup and sychronization",
);

/**
 * A command-line exact real calculator
 */
export const spigot = mkPackage(
  nixRaw`pkgs.spigot`,
  "A command-line exact real calculator",
);

/**
 * A RISC-V ISA Simulator
 */
export const spike = mkPackage(
  nixRaw`pkgs.spike`,
  "A RISC-V ISA Simulator",
);

/**
 * Formal verification tool for distributed software systems
 */
export const spin = mkPackage(
  nixRaw`pkgs.spin`,
  "Formal verification tool for distributed software systems",
);

/**
 * Utility for secure encrypted channels between sockets
 */
export const spiped = mkPackage(
  nixRaw`pkgs.spiped`,
  "Utility for secure encrypted channels between sockets",
);

/**
 * The SPIFFE Runtime Environment
 */
export const spire = mkPackage(
  nixRaw`pkgs.spire`,
  "The SPIFFE Runtime Environment",
);

/**
 * The SPIFFE Runtime Environment
 */
export const spire_agent = mkPackage(
  nixRaw`pkgs.spire-agent`,
  "The SPIFFE Runtime Environment",
);

/**
 * The SPIFFE Runtime Environment
 */
export const spire_server = mkPackage(
  nixRaw`pkgs.spire-server`,
  "The SPIFFE Runtime Environment",
);

/**
 * A tool designed for parsing and converting SPIR-V to other shader languages
 */
export const spirv_cross = mkPackage(
  nixRaw`pkgs.spirv-cross`,
  "A tool designed for parsing and converting SPIR-V to other shader languages",
);

/**
 * Machine-readable components of the Khronos SPIR-V Registry
 */
export const spirv_headers = mkPackage(
  nixRaw`pkgs.spirv-headers`,
  "Machine-readable components of the Khronos SPIR-V Registry",
);

/**
 * A tool and a library for bi-directional translation between SPIR-V and LLVM IR
 */
export const spirv_llvm_translator = mkPackage(
  nixRaw`pkgs.spirv-llvm-translator`,
  "A tool and a library for bi-directional translation between SPIR-V and LLVM IR",
);

/**
 * The SPIR-V Tools project provides an API and commands for processing SPIR-V modules
 */
export const spirv_tools = mkPackage(
  nixRaw`pkgs.spirv-tools`,
  "The SPIR-V Tools project provides an API and commands for processing SPIR-V modules",
);

/**
 * Specialized Parallel Linear Algebra, providing distributed GEMM functionality for specific matrix distributions with optional GPU acceleration
 */
export const spla = mkPackage(
  nixRaw`pkgs.spla`,
  "Specialized Parallel Linear Algebra, providing distributed GEMM functionality for specific matrix distributions with optional GPU acceleration",
);

/**
 * SPLAT! is an RF Signal Propagation, Loss, And Terrain analysis tool for the electromagnetic spectrum between 20 MHz and 20 GHz
 */
export const splat = mkPackage(
  nixRaw`pkgs.splat`,
  "SPLAT! is an RF Signal Propagation, Loss, And Terrain analysis tool for the electromagnetic spectrum between 20 MHz and 20 GHz",
);

/**
 * Monospaced bitmap fonts
 */
export const spleen = mkPackage(
  nixRaw`pkgs.spleen`,
  "Monospaced bitmap fonts",
);

/**
 * Annotation-assisted lightweight static analyzer for C
 */
export const splint = mkPackage(
  nixRaw`pkgs.splint`,
  "Annotation-assisted lightweight static analyzer for C",
);

/**
 * CUPS drivers for SPL (Samsung Printer Language) printers
 */
export const splix = mkPackage(
  nixRaw`pkgs.splix`,
  "CUPS drivers for SPL (Samsung Printer Language) printers",
);

/**
 * A tool for visualizing the lifecycle of many concurrent multi-staged processes
 */
export const splot = mkPackage(
  nixRaw`pkgs.splot`,
  "A tool for visualizing the lifecycle of many concurrent multi-staged processes",
);

/**
 * Interactive configuration GUI for space navigator input devices
 */
export const spnavcfg = mkPackage(
  nixRaw`pkgs.spnavcfg`,
  "Interactive configuration GUI for space navigator input devices",
);

/**
 * Change your MAC address for debugging purposes
 */
export const spoof_mac = mkPackage(
  nixRaw`pkgs.spoof-mac`,
  "Change your MAC address for debugging purposes",
);

/**
 * Assess and report on deployment of source address validation
 */
export const spoofer = mkPackage(
  nixRaw`pkgs.spoofer`,
  "Assess and report on deployment of source address validation",
);

/**
 * Assess and report on deployment of source address validation
 */
export const spoofer_gui = mkPackage(
  nixRaw`pkgs.spoofer-gui`,
  "Assess and report on deployment of source address validation",
);

/**
 * Library for solving sparse real and complex linear systems of equations
 */
export const spooles = mkPackage(
  nixRaw`pkgs.spooles`,
  "Library for solving sparse real and complex linear systems of equations",
);

/**
 * Native Spotify client for the GNOME desktop
 */
export const spot = mkPackage(
  nixRaw`pkgs.spot`,
  "Native Spotify client for the GNOME desktop",
);

/**
 * Download your Spotify playlists and songs along with album art and metadata
 */
export const spotdl = mkPackage(
  nixRaw`pkgs.spotdl`,
  "Download your Spotify playlists and songs along with album art and metadata",
);

/**
 * Play music from the Spotify music service
 */
export const spotify = mkPackage(
  nixRaw`pkgs.spotify`,
  "Play music from the Spotify music service",
);

/**
 * A command line interface to Spotify on Linux.
 */
export const spotify_cli_linux = mkPackage(
  nixRaw`pkgs.spotify-cli-linux`,
  "A command line interface to Spotify on Linux.",
);

/**
 * A terminal spotify player that has feature parity with the official client
 */
export const spotify_player = mkPackage(
  nixRaw`pkgs.spotify-player`,
  "A terminal spotify player that has feature parity with the official client",
);

/**
 * Lightweight unofficial Spotify client using Qt
 */
export const spotify_qt = mkPackage(
  nixRaw`pkgs.spotify-qt`,
  "Lightweight unofficial Spotify client using Qt",
);

/**
 * Adds a tray icon to the Spotify Linux client application.
 */
export const spotify_tray = mkPackage(
  nixRaw`pkgs.spotify-tray`,
  "Adds a tray icon to the Spotify Linux client application.",
);

/**
 * Spotify for the terminal written in Rust
 */
export const spotify_tui = mkPackage(
  nixRaw`pkgs.spotify-tui`,
  "Spotify for the terminal written in Rust",
);

/**
 * An open source Spotify client running as a UNIX daemon
 */
export const spotifyd = mkPackage(
  nixRaw`pkgs.spotifyd`,
  "An open source Spotify client running as a UNIX daemon",
);

/**
 * Wrapper around Spotify that correctly sets class name before opening the window
 */
export const spotifywm = mkPackage(
  nixRaw`pkgs.spotifywm`,
  "Wrapper around Spotify that correctly sets class name before opening the window",
);

/**
 * Submit pull requests for individual, amendable, rebaseable commits to GitHub
 */
export const spr = mkPackage(
  nixRaw`pkgs.spr`,
  "Submit pull requests for individual, amendable, rebaseable commits to GitHub",
);

/**
 * Cross-platform lobby client for the Spring RTS project
 */
export const springLobby = mkPackage(
  nixRaw`pkgs.springLobby`,
  "Cross-platform lobby client for the Spring RTS project",
);

/**
 * CLI which makes it easy to create spring-based applications

 */
export const spring_boot_cli = mkPackage(
  nixRaw`pkgs.spring-boot-cli`,
  "CLI which makes it easy to create spring-based applications\n",
);

/**
 * A BOSH template merge tool
 */
export const spruce = mkPackage(
  nixRaw`pkgs.spruce`,
  "A BOSH template merge tool",
);

/**
 * Suite of speech signal processing tools
 */
export const sptk = mkPackage(
  nixRaw`pkgs.sptk`,
  "Suite of speech signal processing tools",
);

/**
 * Spotify lyrics in your terminal
 */
export const sptlrx = mkPackage(
  nixRaw`pkgs.sptlrx`,
  "Spotify lyrics in your terminal",
);

/**
 * Scientific python development environment
 */
export const spyder = mkPackage(
  nixRaw`pkgs.spyder`,
  "Scientific python development environment",
);

/**
 * YARA-based IOC scanner
 */
export const spyre = mkPackage(
  nixRaw`pkgs.spyre`,
  "YARA-based IOC scanner",
);

/**
 * Swiss army knife for data
 */
export const sq = mkPackage(
  nixRaw`pkgs.sq`,
  "Swiss army knife for data",
);

/**
 * Sensible database change management
 */
export const sqitchMysql = mkPackage(
  nixRaw`pkgs.sqitchMysql`,
  "Sensible database change management",
);

/**
 * Sensible database change management
 */
export const sqitchPg = mkPackage(
  nixRaw`pkgs.sqitchPg`,
  "Sensible database change management",
);

/**
 * SQLite Archive utilities
 */
export const sqlar = mkPackage(
  nixRaw`pkgs.sqlar`,
  "SQLite Archive utilities",
);

/**
 * CockroachDB generator for usage with SQLBoiler
 */
export const sqlboiler_crdb = mkPackage(
  nixRaw`pkgs.sqlboiler-crdb`,
  "CockroachDB generator for usage with SQLBoiler",
);

/**
 * Generate type-safe code from SQL
 */
export const sqlc = mkPackage(
  nixRaw`pkgs.sqlc`,
  "Generate type-safe code from SQL",
);

/**
 * Automatically identify anti-patterns in SQL queries
 */
export const sqlcheck = mkPackage(
  nixRaw`pkgs.sqlcheck`,
  "Automatically identify anti-patterns in SQL queries",
);

/**
 * SQLite extension that provides 256 bit AES encryption of database files
 */
export const sqlcipher = mkPackage(
  nixRaw`pkgs.sqlcipher`,
  "SQLite extension that provides 256 bit AES encryption of database files",
);

/**
 * Oracle's Oracle DB CLI client
 */
export const sqlcl = mkPackage(
  nixRaw`pkgs.sqlcl`,
  "Oracle's Oracle DB CLI client",
);

/**
 * A command line tool for working with Microsoft SQL Server, Azure SQL Database, and Azure Synapse
 */
export const sqlcmd = mkPackage(
  nixRaw`pkgs.sqlcmd`,
  "A command line tool for working with Microsoft SQL Server, Azure SQL Database, and Azure Synapse",
);

/**
 * LibSQL with extended capabilities like HTTP protocol, replication, and more
 */
export const sqld = mkPackage(
  nixRaw`pkgs.sqld`,
  "LibSQL with extended capabilities like HTTP protocol, replication, and more",
);

/**
 * Idempotent SQL schema management tool
 */
export const sqldef = mkPackage(
  nixRaw`pkgs.sqldef`,
  "Idempotent SQL schema management tool",
);

/**
 * Oracle's Oracle DB GUI client
 */
export const sqldeveloper = mkPackage(
  nixRaw`pkgs.sqldeveloper`,
  "Oracle's Oracle DB GUI client",
);

/**
 * A tool that displays the differences between SQLite databases
 */
export const sqldiff = mkPackage(
  nixRaw`pkgs.sqldiff`,
  "A tool that displays the differences between SQLite databases",
);

/**
 * SQL linter and auto-formatter
 */
export const sqlfluff = mkPackage(
  nixRaw`pkgs.sqlfluff`,
  "SQL linter and auto-formatter",
);

/**
 * Simple SQL linter
 */
export const sqlint = mkPackage(
  nixRaw`pkgs.sqlint`,
  "Simple SQL linter",
);

/**
 * A self-contained, serverless, zero-configuration, transactional SQL database engine
 */
export const sqlite = mkPackage(
  nixRaw`pkgs.sqlite`,
  "A self-contained, serverless, zero-configuration, transactional SQL database engine",
);

/**
 * A simple Python tool to transfer data from SQLite 3 to MySQL
 */
export const sqlite3_to_mysql = mkPackage(
  nixRaw`pkgs.sqlite3-to-mysql`,
  "A simple Python tool to transfer data from SQLite 3 to MySQL",
);

/**
 * A tool that shows statistics about SQLite databases
 */
export const sqlite_analyzer = mkPackage(
  nixRaw`pkgs.sqlite-analyzer`,
  "A tool that shows statistics about SQLite databases",
);

/**
 * A self-contained, serverless, zero-configuration, transactional SQL database engine
 */
export const sqlite_interactive = mkPackage(
  nixRaw`pkgs.sqlite-interactive`,
  "A self-contained, serverless, zero-configuration, transactional SQL database engine",
);

/**
 * Library for accessing and creating SQLite database files in Java
 */
export const sqlite_jdbc = mkPackage(
  nixRaw`pkgs.sqlite-jdbc`,
  "Library for accessing and creating SQLite database files in Java",
);

/**
 * Python CLI utility and library for manipulating SQLite databases
 */
export const sqlite_utils = mkPackage(
  nixRaw`pkgs.sqlite-utils`,
  "Python CLI utility and library for manipulating SQLite databases",
);

/**
 * Web-based SQLite database browser
 */
export const sqlite_web = mkPackage(
  nixRaw`pkgs.sqlite-web`,
  "Web-based SQLite database browser",
);

/**
 * DB Browser for SQLite
 */
export const sqlitebrowser = mkPackage(
  nixRaw`pkgs.sqlitebrowser`,
  "DB Browser for SQLite",
);

/**
 * C++ SQLite3 wrapper
 */
export const sqlitecpp = mkPackage(
  nixRaw`pkgs.sqlitecpp`,
  "C++ SQLite3 wrapper",
);

/**
 * Automatic SQL injection and database takeover tool
 */
export const sqlmap = mkPackage(
  nixRaw`pkgs.sqlmap`,
  "Automatic SQL injection and database takeover tool",
);

/**
 * SQL-only webapp builder, empowering data analysts to build websites and applications quickly
 */
export const sqlpage = mkPackage(
  nixRaw`pkgs.sqlpage`,
  "SQL-only webapp builder, empowering data analysts to build websites and applications quickly",
);

/**
 * SQL language server written in Go
 */
export const sqls = mkPackage(
  nixRaw`pkgs.sqls`,
  "SQL language server written in Go",
);

/**
 * SQLx's associated command-line utility for managing databases, migrations, and enabling offline mode with sqlx::query!() and friends.
 */
export const sqlx_cli = mkPackage(
  nixRaw`pkgs.sqlx-cli`,
  "SQLx's associated command-line utility for managing databases, migrations, and enabling offline mode with sqlx::query!() and friends.",
);

/**
 * Command line tool for querying Sybase/MSSQL databases
 */
export const sqsh = mkPackage(
  nixRaw`pkgs.sqsh`,
  "Command line tool for querying Sybase/MSSQL databases",
);

/**
 * Tool for creating and unpacking squashfs filesystems
 */
export const squashfsTools = mkPackage(
  nixRaw`pkgs.squashfsTools`,
  "Tool for creating and unpacking squashfs filesystems",
);

export const squashfs_tools_ng = mkPackage(
  nixRaw`pkgs.squashfs-tools-ng`,
  "",
);

/**
 * FUSE filesystem to mount squashfs archives
 */
export const squashfuse = mkPackage(
  nixRaw`pkgs.squashfuse`,
  "FUSE filesystem to mount squashfs archives",
);

/**
 * Linter for PostgreSQL, focused on migrations
 */
export const squawk = mkPackage(
  nixRaw`pkgs.squawk`,
  "Linter for PostgreSQL, focused on migrations",
);

/**
 * Squeak virtual machine
 */
export const squeak = mkPackage(
  nixRaw`pkgs.squeak`,
  "Squeak virtual machine",
);

/**
 * A virtual keyboard supporting Wayland
 */
export const squeekboard = mkPackage(
  nixRaw`pkgs.squeekboard`,
  "A virtual keyboard supporting Wayland",
);

/**
 * Lightweight headless squeezebox client emulator
 */
export const squeezelite = mkPackage(
  nixRaw`pkgs.squeezelite`,
  "Lightweight headless squeezebox client emulator",
);

/**
 * Lightweight headless squeezebox client emulator
 */
export const squeezelite_pulse = mkPackage(
  nixRaw`pkgs.squeezelite-pulse`,
  "Lightweight headless squeezebox client emulator",
);

/**
 * A caching proxy for the Web supporting HTTP, HTTPS, FTP, and more
 */
export const squid = mkPackage(
  nixRaw`pkgs.squid`,
  "A caching proxy for the Web supporting HTTP, HTTPS, FTP, and more",
);

/**
 * Universal SQL Client
 */
export const squirrel_sql = mkPackage(
  nixRaw`pkgs.squirrel-sql`,
  "Universal SQL Client",
);

/**
 * A tool to perform sample comparison testing on the command line
 */
export const squishyball = mkPackage(
  nixRaw`pkgs.squishyball`,
  "A tool to perform sample comparison testing on the command line",
);

/**
 * Modern IRC client written in GTK
 */
export const srain = mkPackage(
  nixRaw`pkgs.srain`,
  "Modern IRC client written in GTK",
);

/**
 * Simple randr daemon
 */
export const srandrd = mkPackage(
  nixRaw`pkgs.srandrd`,
  "Simple randr daemon",
);

/**
 * A library for serialising LV2 atoms to/from RDF
 */
export const sratom = mkPackage(
  nixRaw`pkgs.sratom`,
  "A library for serialising LV2 atoms to/from RDF",
);

/**
 * The SRA Toolkit and SDK from NCBI is a collection of tools and libraries for using data in the INSDC Sequence Read Archives.
 */
export const sratoolkit = mkPackage(
  nixRaw`pkgs.sratoolkit`,
  "The SRA Toolkit and SDK from NCBI is a collection of tools and libraries for using data in the INSDC Sequence Read Archives.",
);

/**
 * Sonic Robo Blast 2 is a 3D Sonic the Hedgehog fangame based on a modified version of Doom Legacy
 */
export const srb2 = mkPackage(
  nixRaw`pkgs.srb2`,
  "Sonic Robo Blast 2 is a 3D Sonic the Hedgehog fangame based on a modified version of Doom Legacy",
);

/**
 * SRB2Kart is a classic styled kart racer
 */
export const srb2kart = mkPackage(
  nixRaw`pkgs.srb2kart`,
  "SRB2Kart is a classic styled kart racer",
);

/**
 * Simple single-file revision control
 */
export const src = mkPackage(
  nixRaw`pkgs.src`,
  "Simple single-file revision control",
);

/**
 * Sourcegraph CLI
 */
export const src_cli = mkPackage(
  nixRaw`pkgs.src-cli`,
  "Sourcegraph CLI",
);

/**
 * Collection of powerful tools for manipulating EPROM load files
 */
export const srecord = mkPackage(
  nixRaw`pkgs.srecord`,
  "Collection of powerful tools for manipulating EPROM load files",
);

/**
 * A non-backtracking NFA/DFA-based Perl-compatible regex engine matching on large data streams
 */
export const sregex = mkPackage(
  nixRaw`pkgs.sregex`,
  "A non-backtracking NFA/DFA-based Perl-compatible regex engine matching on large data streams",
);

/**
 * A SOCKS proxy and relay
 */
export const srelay = mkPackage(
  nixRaw`pkgs.srelay`,
  "A SOCKS proxy and relay",
);

/**
 * A command-line utility to compute and check subresource integrity hashes
 */
export const srisum = mkPackage(
  nixRaw`pkgs.srisum`,
  "A command-line utility to compute and check subresource integrity hashes",
);

/**
 * Delete files securely
 */
export const srm = mkPackage(
  nixRaw`pkgs.srm`,
  "Delete files securely",
);

/**
 * Open-source 4G and 5G software radio suite.
 */
export const srsran = mkPackage(
  nixRaw`pkgs.srsran`,
  "Open-source 4G and 5G software radio suite.",
);

/**
 * Secure, Reliable, Transport
 */
export const srt = mkPackage(
  nixRaw`pkgs.srt`,
  "Secure, Reliable, Transport",
);

/**
 * srt live server for low latency
 */
export const srt_live_server = mkPackage(
  nixRaw`pkgs.srt-live-server`,
  "srt live server for low latency",
);

/**
 * Convert SRT files to VTT
 */
export const srt_to_vtt_cl = mkPackage(
  nixRaw`pkgs.srt-to-vtt-cl`,
  "Convert SRT files to VTT",
);

/**
 * Secure RTP (SRTP) Reference Implementation
 */
export const srtp = mkPackage(
  nixRaw`pkgs.srtp`,
  "Secure RTP (SRTP) Reference Implementation",
);

/**
 * Streaming-Relay for the SRT-protocol
 */
export const srtrelay = mkPackage(
  nixRaw`pkgs.srtrelay`,
  "Streaming-Relay for the SRT-protocol",
);

/**
 * Sysrev version control
 */
export const srvc = mkPackage(
  nixRaw`pkgs.srvc`,
  "Sysrev version control",
);

/**
 * A decentralized messaging and sharing app built on top of Secure Scuttlebutt (SSB)
 */
export const ssb_patchwork = mkPackage(
  nixRaw`pkgs.ssb-patchwork`,
  "A decentralized messaging and sharing app built on top of Secure Scuttlebutt (SSB)",
);

/**
 * A program for calculating fuzzy hashes
 */
export const ssdeep = mkPackage(
  nixRaw`pkgs.ssdeep`,
  "A program for calculating fuzzy hashes",
);

/**
 * SSDFS file system utilities
 */
export const ssdfs_utils = mkPackage(
  nixRaw`pkgs.ssdfs-utils`,
  "SSDFS file system utilities",
);

/**
 * Prints the X selection to stdout, useful in scripts
 */
export const sselp = mkPackage(
  nixRaw`pkgs.sselp`,
  "Prints the X selection to stdout, useful in scripts",
);

/**
 * ssh-agents capable of spawning and maintaining multiple ssh-agents across terminals
 */
export const ssh_agents = mkPackage(
  nixRaw`pkgs.ssh-agents`,
  "ssh-agents capable of spawning and maintaining multiple ssh-agents across terminals",
);

/**
 * A small SSH askpass GUI using GTK+2
 */
export const ssh_askpass_fullscreen = mkPackage(
  nixRaw`pkgs.ssh-askpass-fullscreen`,
  "A small SSH askpass GUI using GTK+2",
);

/**
 * Tool for ssh server auditing
 */
export const ssh_audit = mkPackage(
  nixRaw`pkgs.ssh-audit`,
  "Tool for ssh server auditing",
);

/**
 * Chat over SSH
 */
export const ssh_chat = mkPackage(
  nixRaw`pkgs.ssh-chat`,
  "Chat over SSH",
);

/**
 * A tool to copy SSH public keys to a remote machine
 */
export const ssh_copy_id = mkPackage(
  nixRaw`pkgs.ssh-copy-id`,
  "A tool to copy SSH public keys to a remote machine",
);

/**
 * Start and use ssh-agent and load identities as necessary
 */
export const ssh_ident = mkPackage(
  nixRaw`pkgs.ssh-ident`,
  "Start and use ssh-agent and load identities as necessary",
);

/**
 * Retrieves an SSH public key and installs it locally
 */
export const ssh_import_id = mkPackage(
  nixRaw`pkgs.ssh-import-id`,
  "Retrieves an SSH public key and installs it locally",
);

/**
 * Test ssh login key acceptance without having the private key
 */
export const ssh_key_confirmer = mkPackage(
  nixRaw`pkgs.ssh-key-confirmer`,
  "Test ssh login key acceptance without having the private key",
);

/**
 * Tool for SSH security audits
 */
export const ssh_mitm = mkPackage(
  nixRaw`pkgs.ssh-mitm`,
  "Tool for SSH security audits",
);

/**
 * Convert ssh private keys in ed25519 format to age keys
 */
export const ssh_to_age = mkPackage(
  nixRaw`pkgs.ssh-to-age`,
  "Convert ssh private keys in ed25519 format to age keys",
);

/**
 * Convert ssh private keys to PGP
 */
export const ssh_to_pgp = mkPackage(
  nixRaw`pkgs.ssh-to-pgp`,
  "Convert ssh private keys to PGP",
);

/**
 * Collection of various tools using ssh
 */
export const ssh_tools = mkPackage(
  nixRaw`pkgs.ssh-tools`,
  "Collection of various tools using ssh",
);

/**
 * Dedicated SSH brute-forcing tool
 */
export const sshchecker = mkPackage(
  nixRaw`pkgs.sshchecker`,
  "Dedicated SSH brute-forcing tool",
);

/**
 * ssh config editor and bookmarks manager
 */
export const sshed = mkPackage(
  nixRaw`pkgs.sshed`,
  "ssh config editor and bookmarks manager",
);

/**
 * FUSE-based filesystem that allows remote filesystems to be mounted over SSH
 */
export const sshfs = mkPackage(
  nixRaw`pkgs.sshfs`,
  "FUSE-based filesystem that allows remote filesystems to be mounted over SSH",
);

/**
 * FUSE-based filesystem that allows remote filesystems to be mounted over SSH
 */
export const sshfs_fuse = mkPackage(
  nixRaw`pkgs.sshfs-fuse`,
  "FUSE-based filesystem that allows remote filesystems to be mounted over SSH",
);

/**
 * Protects hosts from brute-force attacks
 */
export const sshguard = mkPackage(
  nixRaw`pkgs.sshguard`,
  "Protects hosts from brute-force attacks",
);

/**
 * A collection of hacks to efficiently run LaTeX via ssh
 */
export const sshlatex = mkPackage(
  nixRaw`pkgs.sshlatex`,
  "A collection of hacks to efficiently run LaTeX via ssh",
);

/**
 * Tool for SSH, reverse sshfs and port forwarder
 */
export const sshocker = mkPackage(
  nixRaw`pkgs.sshocker`,
  "Tool for SSH, reverse sshfs and port forwarder",
);

/**
 * A Groovy-based DSL for working with remote SSH servers

 */
export const sshoogr = mkPackage(
  nixRaw`pkgs.sshoogr`,
  "A Groovy-based DSL for working with remote SSH servers\n",
);

/**
 * Non-interactive ssh password auth
 */
export const sshpass = mkPackage(
  nixRaw`pkgs.sshpass`,
  "Non-interactive ssh password auth",
);

/**
 * Measure character-echo latency and bandwidth for an interactive ssh session
 */
export const sshping = mkPackage(
  nixRaw`pkgs.sshping`,
  "Measure character-echo latency and bandwidth for an interactive ssh session",
);

/**
 * Simple, fun and transparent SSH (and telnet) bastion server
 */
export const sshportal = mkPackage(
  nixRaw`pkgs.sshportal`,
  "Simple, fun and transparent SSH (and telnet) bastion server",
);

/**
 * Terminal user interface for SSH
 */
export const sshs = mkPackage(
  nixRaw`pkgs.sshs`,
  "Terminal user interface for SSH",
);

/**
 * Transparent proxy server that works as a poor man's VPN
 */
export const sshuttle = mkPackage(
  nixRaw`pkgs.sshuttle`,
  "Transparent proxy server that works as a poor man's VPN",
);

/**
 * Bourne shell script that can be used to report on expiring SSL certificates
 */
export const ssl_cert_check = mkPackage(
  nixRaw`pkgs.ssl-cert-check`,
  "Bourne shell script that can be used to report on expiring SSL certificates",
);

/**
 * Simple single-command SSL reverse proxy with autogenerated certificates (LetsEncrypt, self-signed)
 */
export const ssl_proxy = mkPackage(
  nixRaw`pkgs.ssl-proxy`,
  "Simple single-command SSL reverse proxy with autogenerated certificates (LetsEncrypt, self-signed)",
);

/**
 * An SSLv3/TLS network protocol analyzer
 */
export const ssldump = mkPackage(
  nixRaw`pkgs.ssldump`,
  "An SSLv3/TLS network protocol analyzer",
);

/**
 * Applicative Protocol Multiplexer (e.g. share SSH and HTTPS on the same port)
 */
export const sslh = mkPackage(
  nixRaw`pkgs.sslh`,
  "Applicative Protocol Multiplexer (e.g. share SSH and HTTPS on the same port)",
);

/**
 * Easy to buy, deploy, and manage your SSL certs
 */
export const sslmate = mkPackage(
  nixRaw`pkgs.sslmate`,
  "Easy to buy, deploy, and manage your SSL certs",
);

/**
 * Daemon for managing SSL/TLS certificates on a server
 */
export const sslmate_agent = mkPackage(
  nixRaw`pkgs.sslmate-agent`,
  "Daemon for managing SSL/TLS certificates on a server",
);

/**
 * Tests SSL/TLS services and discover supported cipher suites
 */
export const sslscan = mkPackage(
  nixRaw`pkgs.sslscan`,
  "Tests SSL/TLS services and discover supported cipher suites",
);

/**
 * Transparent SSL/TLS interception
 */
export const sslsplit = mkPackage(
  nixRaw`pkgs.sslsplit`,
  "Transparent SSL/TLS interception",
);

/**
 * Amazon SSM Session Manager Plugin
 */
export const ssm_session_manager_plugin = mkPackage(
  nixRaw`pkgs.ssm-session-manager-plugin`,
  "Amazon SSM Session Manager Plugin",
);

/**
 * An interactive shell for AWS Parameter Store
 */
export const ssmsh = mkPackage(
  nixRaw`pkgs.ssmsh`,
  "An interactive shell for AWS Parameter Store",
);

/**
 * Seven Segment Optical Character Recognition
 */
export const ssocr = mkPackage(
  nixRaw`pkgs.ssocr`,
  "Seven Segment Optical Character Recognition",
);

/**
 * A high quality audio sampling rate converter
 */
export const ssrc = mkPackage(
  nixRaw`pkgs.ssrc`,
  "A high quality audio sampling rate converter",
);

/**
 * System Security Services Daemon
 */
export const sssd = mkPackage(
  nixRaw`pkgs.sssd`,
  "System Security Services Daemon",
);

/**
 * Cli snake game that plays itself
 */
export const sssnake = mkPackage(
  nixRaw`pkgs.sssnake`,
  "Cli snake game that plays itself",
);

/**
 * Shamir Secret Sharing Scheme
 */
export const ssss = mkPackage(
  nixRaw`pkgs.ssss`,
  "Shamir Secret Sharing Scheme",
);

/**
 * SSTP client for Linux
 */
export const sstp = mkPackage(
  nixRaw`pkgs.sstp`,
  "SSTP client for Linux",
);

/**
 * GNU Spread Sheet Widget
 */
export const ssw = mkPackage(
  nixRaw`pkgs.ssw`,
  "GNU Spread Sheet Widget",
);

/**
 * Simple Terminal for X from Suckless.org Community
 */
export const st = mkPackage(
  nixRaw`pkgs.st`,
  "Simple Terminal for X from Suckless.org Community",
);

/**
 * Simple statistics from the command line interface (CLI), fast
 */
export const sta = mkPackage(
  nixRaw`pkgs.sta`,
  "Simple statistics from the command line interface (CLI), fast",
);

/**
 * Stubbed XMPP Server
 */
export const stabber = mkPackage(
  nixRaw`pkgs.stabber`,
  "Stubbed XMPP Server",
);

/**
 * Linux System Optimizer and Monitoring
 */
export const stacer = mkPackage(
  nixRaw`pkgs.stacer`,
  "Linux System Optimizer and Monitoring",
);

/**
 * The Haskell Tool Stack
 */
export const stack = mkPackage(
  nixRaw`pkgs.stack`,
  "The Haskell Tool Stack",
);

/**
 * Software pipeline for building loci from short-read sequences
 */
export const stacks = mkPackage(
  nixRaw`pkgs.stacks`,
  "Software pipeline for building loci from short-read sequences",
);

/**
 * Layout generator for the river Wayland compositor
 */
export const stacktile = mkPackage(
  nixRaw`pkgs.stacktile`,
  "Layout generator for the river Wayland compositor",
);

/**
 * Static token and credential scanner
 */
export const stacs = mkPackage(
  nixRaw`pkgs.stacs`,
  "Static token and credential scanner",
);

/**
 * Terminal streaming bar graph passed through stdin
 */
export const stag = mkPackage(
  nixRaw`pkgs.stag`,
  "Terminal streaming bar graph passed through stdin",
);

/**
 * git static site generator
 */
export const stagit = mkPackage(
  nixRaw`pkgs.stagit`,
  "git static site generator",
);

/**
 * An optimizing Scheme compiler
 */
export const stalin = mkPackage(
  nixRaw`pkgs.stalin`,
  "An optimizing Scheme compiler",
);

/**
 * Stand alone tray
 */
export const stalonetray = mkPackage(
  nixRaw`pkgs.stalonetray`,
  "Stand alone tray",
);

/**
 * Secure & Modern All-in-One Mail Server (IMAP, JMAP, SMTP)
 */
export const stalwart_mail = mkPackage(
  nixRaw`pkgs.stalwart-mail`,
  "Secure & Modern All-in-One Mail Server (IMAP, JMAP, SMTP)",
);

/**
 * The Stan compiler and utilities
 */
export const stanc = mkPackage(
  nixRaw`pkgs.stanc`,
  "The Stan compiler and utilities",
);

/**
 * A simple and private notes app
 */
export const standardnotes = mkPackage(
  nixRaw`pkgs.standardnotes`,
  "A simple and private notes app",
);

/**
 * Spliced Transcripts Alignment to a Reference
 */
export const star = mkPackage(
  nixRaw`pkgs.star`,
  "Spliced Transcripts Alignment to a Reference",
);

/**
 * Command line program to generate a graph showing number of GitHub stars of a user, org or repo over time
 */
export const star_history = mkPackage(
  nixRaw`pkgs.star-history`,
  "Command line program to generate a graph showing number of GitHub stars of a user, org or repo over time",
);

/**
 * Kubernetes-native security tool kit
 */
export const starboard = mkPackage(
  nixRaw`pkgs.starboard`,
  "Kubernetes-native security tool kit",
);

/**
 * Plot your repository stars over time
 */
export const starcharts = mkPackage(
  nixRaw`pkgs.starcharts`,
  "Plot your repository stars over time",
);

/**
 * Space flight simulator
 */
export const stardust = mkPackage(
  nixRaw`pkgs.stardust`,
  "Space flight simulator",
);

/**
 * CLI star constellations displayer
 */
export const starfetch = mkPackage(
  nixRaw`pkgs.starfetch`,
  "CLI star constellations displayer",
);

/**
 * C data structure library
 */
export const stargate_libcds = mkPackage(
  nixRaw`pkgs.stargate-libcds`,
  "C data structure library",
);

/**
 * A fast and easy to use Gemini server
 */
export const stargazer = mkPackage(
  nixRaw`pkgs.stargazer`,
  "A fast and easy to use Gemini server",
);

/**
 * An interpreter for Starlark, implemented in Go
 */
export const starlark = mkPackage(
  nixRaw`pkgs.starlark`,
  "An interpreter for Starlark, implemented in Go",
);

/**
 * A Rust implementation of the Starlark language
 */
export const starlark_rust = mkPackage(
  nixRaw`pkgs.starlark-rust`,
  "A Rust implementation of the Starlark language",
);

/**
 * Current stars history tells only half the story
 */
export const starry = mkPackage(
  nixRaw`pkgs.starry`,
  "Current stars history tells only half the story",
);

/**
 * Open-world single-player space-combat, roleplaying, exploration, and economic game
 */
export const starsector = mkPackage(
  nixRaw`pkgs.starsector`,
  "Open-world single-player space-combat, roleplaying, exploration, and economic game",
);

/**
 * A minimal, blazing fast, and extremely customizable prompt for any shell
 */
export const starship = mkPackage(
  nixRaw`pkgs.starship`,
  "A minimal, blazing fast, and extremely customizable prompt for any shell",
);

/**
 * General-purpose neural model for efficient learning of entity embeddings
 */
export const starspace = mkPackage(
  nixRaw`pkgs.starspace`,
  "General-purpose neural model for efficient learning of entity embeddings",
);

/**
 * A sophisticated software modeler
 */
export const staruml = mkPackage(
  nixRaw`pkgs.staruml`,
  "A sophisticated software modeler",
);

/**
 * A simple, zero-configuration HTTP server CLI for serving static files
 */
export const static_server = mkPackage(
  nixRaw`pkgs.static-server`,
  "A simple, zero-configuration HTTP server CLI for serving static files",
);

/**
 * An asynchronous web server for static files-serving
 */
export const static_web_server = mkPackage(
  nixRaw`pkgs.static-web-server`,
  "An asynchronous web server for static files-serving",
);

/**
 * A library and cli tool that makes it easy to build static sites using Jinja2
 */
export const staticjinja = mkPackage(
  nixRaw`pkgs.staticjinja`,
  "A library and cli tool that makes it easy to build static sites using Jinja2",
);

/**
 * Tool for creating static Linux binaries
 */
export const statifier = mkPackage(
  nixRaw`pkgs.statifier`,
  "Tool for creating static Linux binaries",
);

/**
 * Embed files into a Go executable 
 */
export const statik = mkPackage(
  nixRaw`pkgs.statik`,
  "Embed files into a Go executable ",
);

/**
 * A single place for all of your web applications
 */
export const station = mkPackage(
  nixRaw`pkgs.station`,
  "A single place for all of your web applications",
);

/**
 * Lints and suggestions for the nix programming language
 */
export const statix = mkPackage(
  nixRaw`pkgs.statix`,
  "Lints and suggestions for the nix programming language",
);

/**
 * Display serial port modem status lines
 */
export const statserial = mkPackage(
  nixRaw`pkgs.statserial`,
  "Display serial port modem status lines",
);

/**
 * Verification of stateful processes (via Proverif)
 */
export const statverif = mkPackage(
  nixRaw`pkgs.statverif`,
  "Verification of stateful processes (via Proverif)",
);

/**
 * Simple RPKI-To-Router server. (Hard fork of GoRTR)
 */
export const stayrtr = mkPackage(
  nixRaw`pkgs.stayrtr`,
  "Simple RPKI-To-Router server. (Hard fork of GoRTR)",
);

/**
 * Single-file public domain libraries for C/C++
 */
export const stb = mkPackage(
  nixRaw`pkgs.stb`,
  "Single-file public domain libraries for C/C++",
);

/**
 * Syncthing CLI Tool
 */
export const stc_cli = mkPackage(
  nixRaw`pkgs.stc-cli`,
  "Syncthing CLI Tool",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const stdenv = mkPackage(
  nixRaw`pkgs.stdenv`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const stdenvNoCC = mkPackage(
  nixRaw`pkgs.stdenvNoCC`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const stdenvNoLibs = mkPackage(
  nixRaw`pkgs.stdenvNoLibs`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * The default build environment for Unix packages in Nixpkgs
 */
export const stdenv_32bit = mkPackage(
  nixRaw`pkgs.stdenv_32bit`,
  "The default build environment for Unix packages in Nixpkgs",
);

/**
 * stderr in red
 */
export const stderred = mkPackage(
  nixRaw`pkgs.stderred`,
  "stderr in red",
);

/**
 * Formatted C++17 stdlib man pages (cppreference)
 */
export const stdman = mkPackage(
  nixRaw`pkgs.stdman`,
  "Formatted C++17 stdlib man pages (cppreference)",
);

/**
 * GCC C++ STD manual pages
 */
export const stdmanpages = mkPackage(
  nixRaw`pkgs.stdmanpages`,
  "GCC C++ STD manual pages",
);

/**
 * A C++17 cross-platform implementation for UUIDs
 */
export const stduuid = mkPackage(
  nixRaw`pkgs.stduuid`,
  "A C++17 cross-platform implementation for UUIDs",
);

/**
 * A digital distribution platform
 */
export const steam = mkPackage(
  nixRaw`pkgs.steam`,
  "A digital distribution platform",
);

/**
 * Tool to convert Steam .acf files to JSON
 */
export const steam_acf = mkPackage(
  nixRaw`pkgs.steam-acf`,
  "Tool to convert Steam .acf files to JSON",
);

/**
 * An app for managing ROMs in Steam
 */
export const steam_rom_manager = mkPackage(
  nixRaw`pkgs.steam-rom-manager`,
  "An app for managing ROMs in Steam",
);

/**
 * Run commands in the same FHS environment that is used for Steam
 */
export const steam_run = mkPackage(
  nixRaw`pkgs.steam-run`,
  "Run commands in the same FHS environment that is used for Steam",
);

/**
 * A digital distribution platform (without game specific libraries)
 */
export const steam_small = mkPackage(
  nixRaw`pkgs.steam-small`,
  "A digital distribution platform (without game specific libraries)",
);

/**
 * Rust TUI client for steamcmd
 */
export const steam_tui = mkPackage(
  nixRaw`pkgs.steam-tui`,
  "Rust TUI client for steamcmd",
);

/**
 * A Decky plugin to add versioned save-game snapshots to Steam-cloud enabled games
 */
export const steamback = mkPackage(
  nixRaw`pkgs.steamback`,
  "A Decky plugin to add versioned save-game snapshots to Steam-cloud enabled games",
);

/**
 * Steam command-line tools
 */
export const steamcmd = mkPackage(
  nixRaw`pkgs.steamcmd`,
  "Steam command-line tools",
);

/**
 * A standalone Steam controller driver
 */
export const steamcontroller = mkPackage(
  nixRaw`pkgs.steamcontroller`,
  "A standalone Steam controller driver",
);

/**
 * A linux utility for generating 2FA codes for Steam and managing Steam trade confirmations.
 */
export const steamguard_cli = mkPackage(
  nixRaw`pkgs.steamguard-cli`,
  "A linux utility for generating 2FA codes for Steam and managing Steam trade confirmations.",
);

/**
 * SteamOS Devkit Client
 */
export const steamos_devkit = mkPackage(
  nixRaw`pkgs.steamos-devkit`,
  "SteamOS Devkit Client",
);

/**
 * select * from cloud;
 */
export const steampipe = mkPackage(
  nixRaw`pkgs.steampipe`,
  "select * from cloud;",
);

/**
 * Linux wrapper tool for use with the Steam client for custom launch options and 3rd party programs
 */
export const steamtinkerlaunch = mkPackage(
  nixRaw`pkgs.steamtinkerlaunch`,
  "Linux wrapper tool for use with the Steam client for custom launch options and 3rd party programs",
);

/**
 * Client for pinnwand pastebin
 */
export const steck = mkPackage(
  nixRaw`pkgs.steck`,
  "Client for pinnwand pastebin",
);

/**
 * Open source steganography program
 */
export const steghide = mkPackage(
  nixRaw`pkgs.steghide`,
  "Open source steganography program",
);

/**
 * Tool to crack steganography
 */
export const stegseek = mkPackage(
  nixRaw`pkgs.stegseek`,
  "Tool to crack steganography",
);

/**
 * A steganographic image analyzer, solver and data extractor for challanges
 */
export const stegsolve = mkPackage(
  nixRaw`pkgs.stegsolve`,
  "A steganographic image analyzer, solver and data extractor for challanges",
);

/**
 * An open-source Atari 2600 VCS emulator
 */
export const stella = mkPackage(
  nixRaw`pkgs.stella`,
  "An open-source Atari 2600 VCS emulator",
);

/**
 * Implements the Stellar Consensus Protocol, a federated consensus protocol
 */
export const stellar_core = mkPackage(
  nixRaw`pkgs.stellar-core`,
  "Implements the Stellar Consensus Protocol, a federated consensus protocol",
);

/**
 * Free open-source planetarium
 */
export const stellarium = mkPackage(
  nixRaw`pkgs.stellarium`,
  "Free open-source planetarium",
);

/**
 * Astrometric plate solving library
 */
export const stellarsolver = mkPackage(
  nixRaw`pkgs.stellarsolver`,
  "Astrometric plate solving library",
);

/**
 * SCSI Tape Encryption Manager
 */
export const stenc = mkPackage(
  nixRaw`pkgs.stenc`,
  "SCSI Tape Encryption Manager",
);

/**
 * A private certificate authority (X.509 & SSH) & ACME server for secure automated certificate management, so you can use TLS everywhere & SSO for SSH
 */
export const step_ca = mkPackage(
  nixRaw`pkgs.step-ca`,
  "A private certificate authority (X.509 & SSH) & ACME server for secure automated certificate management, so you can use TLS everywhere & SSO for SSH",
);

/**
 * A zero trust swiss army knife for working with X509, OAuth, JWT, OATH OTP, etc
 */
export const step_cli = mkPackage(
  nixRaw`pkgs.step-cli`,
  "A zero trust swiss army knife for working with X509, OAuth, JWT, OATH OTP, etc",
);

/**
 * step plugin to manage keys and certificates on cloud KMSs and HSMs
 */
export const step_kms_plugin = mkPackage(
  nixRaw`pkgs.step-kms-plugin`,
  "step plugin to manage keys and certificates on cloud KMSs and HSMs",
);

/**
 * Free dance and rhythm game for Windows, Mac, and Linux
 */
export const stepmania = mkPackage(
  nixRaw`pkgs.stepmania`,
  "Free dance and rhythm game for Windows, Mac, and Linux",
);

/**
 * Reduces STEP file size by removing redundancy
 */
export const stepreduce = mkPackage(
  nixRaw`pkgs.stepreduce`,
  "Reduces STEP file size by removing redundancy",
);

/**
 * Multi pod and container log tailing for Kubernetes
 */
export const stern = mkPackage(
  nixRaw`pkgs.stern`,
  "Multi pod and container log tailing for Kubernetes",
);

/**
 * Unified hosts file with base extensions
 */
export const stevenblack_blocklist = mkPackage(
  nixRaw`pkgs.stevenblack-blocklist`,
  "Unified hosts file with base extensions",
);

/**
 * A library which implements a curses-based widget set for text terminals
 */
export const stfl = mkPackage(
  nixRaw`pkgs.stfl`,
  "A library which implements a curses-based widget set for text terminals",
);

/**
 * A patch manager implemented on top of Git
 */
export const stgit = mkPackage(
  nixRaw`pkgs.stgit`,
  "A patch manager implemented on top of Git",
);

/**
 * A sticky notes app for the linux desktop
 */
export const sticky = mkPackage(
  nixRaw`pkgs.sticky`,
  "A sticky notes app for the linux desktop",
);

/**
 * TUI and CLI for the BitTorrent client Transmission
 */
export const stig = mkPackage(
  nixRaw`pkgs.stig`,
  "TUI and CLI for the BitTorrent client Transmission",
);

/**
 * Minimalistic GTK, gnome shell and Xfce themes
 */
export const stilo_themes = mkPackage(
  nixRaw`pkgs.stilo-themes`,
  "Minimalistic GTK, gnome shell and Xfce themes",
);

/**
 * Fonts for Scientific and Technical Information eXchange
 */
export const stix_otf = mkPackage(
  nixRaw`pkgs.stix-otf`,
  "Fonts for Scientific and Technical Information eXchange",
);

/**
 * Fonts for Scientific and Technical Information eXchange
 */
export const stix_two = mkPackage(
  nixRaw`pkgs.stix-two`,
  "Fonts for Scientific and Technical Information eXchange",
);

/**
 * In-circuit debug and programming for ST-Link devices
 */
export const stlink = mkPackage(
  nixRaw`pkgs.stlink`,
  "In-circuit debug and programming for ST-Link devices",
);

/**
 * In-circuit debug and programming for ST-Link devices
 */
export const stlink_gui = mkPackage(
  nixRaw`pkgs.stlink-gui`,
  "In-circuit debug and programming for ST-Link devices",
);

/**
 * A graphical tool for configuring STM32 microcontrollers and microprocessors
 */
export const stm32cubemx = mkPackage(
  nixRaw`pkgs.stm32cubemx`,
  "A graphical tool for configuring STM32 microcontrollers and microprocessors",
);

/**
 * Open source flash program for the STM32 ARM processors using the ST bootloader
 */
export const stm32flash = mkPackage(
  nixRaw`pkgs.stm32flash`,
  "Open source flash program for the STM32 ARM processors using the ST bootloader",
);

/**
 * Flash firmware to STM32 microcontrollers in Python
 */
export const stm32loader = mkPackage(
  nixRaw`pkgs.stm32loader`,
  "Flash firmware to STM32 microcontrollers in Python",
);

/**
 * A tool for flashing STM8 MCUs via ST-LINK (V1 and V2)
 */
export const stm8flash = mkPackage(
  nixRaw`pkgs.stm8flash`,
  "A tool for flashing STM8 MCUs via ST-LINK (V1 and V2)",
);

/**
 * Probabilistic polyrhythmic sequencer plugin
 */
export const stochas = mkPackage(
  nixRaw`pkgs.stochas`,
  "Probabilistic polyrhythmic sequencer plugin",
);

/**
 * Strong open source chess engine
 */
export const stockfish = mkPackage(
  nixRaw`pkgs.stockfish`,
  "Strong open source chess engine",
);

/**
 * XML documents and web site compiler
 */
export const stog = mkPackage(
  nixRaw`pkgs.stog`,
  "XML documents and web site compiler",
);

/**
 * Software Token for Linux/UNIX
 */
export const stoken = mkPackage(
  nixRaw`pkgs.stoken`,
  "Software Token for Linux/UNIX",
);

/**
 * A TCP/IP repeater in the application layer
 */
export const stone = mkPackage(
  nixRaw`pkgs.stone`,
  "A TCP/IP repeater in the application layer",
);

/**
 * A real-time strategy game made with LÖVE based on the original Stronghold by Firefly studios
 */
export const stone_kingdoms = mkPackage(
  nixRaw`pkgs.stone-kingdoms`,
  "A real-time strategy game made with LÖVE based on the original Stronghold by Firefly studios",
);

/**
 * A classic analog phaser effect, made with DPF and Faust
 */
export const stone_phaser = mkPackage(
  nixRaw`pkgs.stone-phaser`,
  "A classic analog phaser effect, made with DPF and Faust",
);

/**
 * Storage Command Line Tool
 */
export const storcli = mkPackage(
  nixRaw`pkgs.storcli`,
  "Storage Command Line Tool",
);

/**
 * A backup suite that stores files on other disks
 */
export const storeBackup = mkPackage(
  nixRaw`pkgs.storeBackup`,
  "A backup suite that stores files on other disks",
);

/**
 * Command-line tool for Storj
 */
export const storj_uplink = mkPackage(
  nixRaw`pkgs.storj-uplink`,
  "Command-line tool for Storj",
);

/**
 * Impossibly fast web search, made for static sites
 */
export const stork = mkPackage(
  nixRaw`pkgs.stork`,
  "Impossibly fast web search, made for static sites",
);

/**
 * Distributed realtime computation system
 */
export const storm = mkPackage(
  nixRaw`pkgs.storm`,
  "Distributed realtime computation system",
);

/**
 * An implementation of the BitTorrent protocol that is optimised for streaming media
 */
export const storrent = mkPackage(
  nixRaw`pkgs.storrent`,
  "An implementation of the BitTorrent protocol that is optimised for streaming media",
);

/**
 * A tool for managing the installation of multiple software packages in the same run-time directory tree
 */
export const stow = mkPackage(
  nixRaw`pkgs.stow`,
  "A tool for managing the installation of multiple software packages in the same run-time directory tree",
);

/**
 * Simple Theorem Prover
 */
export const stp = mkPackage(
  nixRaw`pkgs.stp`,
  "Simple Theorem Prover",
);

/**
 * A system call tracer for Linux
 */
export const strace = mkPackage(
  nixRaw`pkgs.strace`,
  "A system call tracer for Linux",
);

/**
 * Analyzes strace output
 */
export const strace_analyzer = mkPackage(
  nixRaw`pkgs.strace-analyzer`,
  "Analyzes strace output",
);

/**
 * CLI for the Stratis project
 */
export const stratis_cli = mkPackage(
  nixRaw`pkgs.stratis-cli`,
  "CLI for the Stratis project",
);

/**
 * Easy to use local storage management for Linux
 */
export const stratisd = mkPackage(
  nixRaw`pkgs.stratisd`,
  "Easy to use local storage management for Linux",
);

/**
 * Virtual Machine Manager from Huawei
 */
export const stratovirt = mkPackage(
  nixRaw`pkgs.stratovirt`,
  "Virtual Machine Manager from Huawei",
);

/**
 * Music player and music collection organizer
 */
export const strawberry = mkPackage(
  nixRaw`pkgs.strawberry`,
  "Music player and music collection organizer",
);

/**
 * Linux compatible UI for the Elgato Stream Deck
 */
export const streamdeck_ui = mkPackage(
  nixRaw`pkgs.streamdeck-ui`,
  "Linux compatible UI for the Elgato Stream Deck",
);

/**
 * CLI for extracting streams from various websites to video player of your choosing
 */
export const streamlink = mkPackage(
  nixRaw`pkgs.streamlink`,
  "CLI for extracting streams from various websites to video player of your choosing",
);

/**
 * Twitch.tv browser for Streamlink
 */
export const streamlink_twitch_gui_bin = mkPackage(
  nixRaw`pkgs.streamlink-twitch-gui-bin`,
  "Twitch.tv browser for Streamlink",
);

/**
 * The fastest way to build custom ML tools
 */
export const streamlit = mkPackage(
  nixRaw`pkgs.streamlit`,
  "The fastest way to build custom ML tools",
);

/**
 * Application that lets you record streaming mp3 to your hard drive
 */
export const streamripper = mkPackage(
  nixRaw`pkgs.streamripper`,
  "Application that lets you record streaming mp3 to your hard drive",
);

/**
 * Germline and small variant caller
 */
export const strelka = mkPackage(
  nixRaw`pkgs.strelka`,
  "Germline and small variant caller",
);

/**
 * A modern media center that gives you the freedom to watch everything you want.
 */
export const stremio = mkPackage(
  nixRaw`pkgs.stremio`,
  "A modern media center that gives you the freedom to watch everything you want.",
);

/**
 * Simple workload generator for POSIX systems. It imposes a configurable amount of CPU, memory, I/O, and disk stress on the system
 */
export const stress = mkPackage(
  nixRaw`pkgs.stress`,
  "Simple workload generator for POSIX systems. It imposes a configurable amount of CPU, memory, I/O, and disk stress on the system",
);

/**
 * Stress test a computer system
 */
export const stress_ng = mkPackage(
  nixRaw`pkgs.stress-ng`,
  "Stress test a computer system",
);

/**
 * Userspace memory and IO stress test tool
 */
export const stressapptest = mkPackage(
  nixRaw`pkgs.stressapptest`,
  "Userspace memory and IO stress test tool",
);

/**
 * A break time reminder app
 */
export const stretchly = mkPackage(
  nixRaw`pkgs.stretchly`,
  "A break time reminder app",
);

/**
 * Multi-use cryptographic tool based on the STRIBOB algorithm
 */
export const stricat = mkPackage(
  nixRaw`pkgs.stricat`,
  "Multi-use cryptographic tool based on the STRIBOB algorithm",
);

/**
 * Software requirements specification tool
 */
export const strictdoc = mkPackage(
  nixRaw`pkgs.strictdoc`,
  "Software requirements specification tool",
);

/**
 * Digital model of electronic string ensemble instrument
 */
export const string_machine = mkPackage(
  nixRaw`pkgs.string-machine`,
  "Digital model of electronic string ensemble instrument",
);

/**
 * A Perl module for stripping bits of non-deterministic information
 */
export const strip_nondeterminism = mkPackage(
  nixRaw`pkgs.strip-nondeterminism`,
  "A Perl module for stripping bits of non-deterministic information",
);

/**
 * A command-line tool for Stripe
 */
export const stripe_cli = mkPackage(
  nixRaw`pkgs.stripe-cli`,
  "A command-line tool for Stripe",
);

/**
 * OpenSource IPsec-based VPN Solution
 */
export const strongswan = mkPackage(
  nixRaw`pkgs.strongswan`,
  "OpenSource IPsec-based VPN Solution",
);

/**
 * OpenSource IPsec-based VPN Solution
 */
export const strongswanNM = mkPackage(
  nixRaw`pkgs.strongswanNM`,
  "OpenSource IPsec-based VPN Solution",
);

/**
 * OpenSource IPsec-based VPN Solution
 */
export const strongswanTNC = mkPackage(
  nixRaw`pkgs.strongswanTNC`,
  "OpenSource IPsec-based VPN Solution",
);

/**
 * Create Nassi-Shneiderman diagrams (NSD)
 */
export const structorizer = mkPackage(
  nixRaw`pkgs.structorizer`,
  "Create Nassi-Shneiderman diagrams (NSD)",
);

/**
 * Deep learning toolkit for Speech-to-Text, battle-tested in research and production
 */
export const stt = mkPackage(
  nixRaw`pkgs.stt`,
  "Deep learning toolkit for Speech-to-Text, battle-tested in research and production",
);

/**
 * A local DNS Privacy stub resolver (using DNS-over-TLS)
 */
export const stubby = mkPackage(
  nixRaw`pkgs.stubby`,
  "A local DNS Privacy stub resolver (using DNS-over-TLS)",
);

/**
 * Compress and embed static files and assets into Go binaries and access them with a virtual file system in production
 */
export const stuffbin = mkPackage(
  nixRaw`pkgs.stuffbin`,
  "Compress and embed static files and assets into Go binaries and access them with a virtual file system in production",
);

/**
 * STUMPwm Interactive SHell
 */
export const stumpish = mkPackage(
  nixRaw`pkgs.stumpish`,
  "STUMPwm Interactive SHell",
);

export const stumpwm = mkPackage(
  nixRaw`pkgs.stumpwm`,
  "",
);

export const stumpwm_unwrapped = mkPackage(
  nixRaw`pkgs.stumpwm-unwrapped`,
  "",
);

/**
 * Stun server and test client
 */
export const stun = mkPackage(
  nixRaw`pkgs.stun`,
  "Stun server and test client",
);

/**
 * Universal tls/ssl wrapper
 */
export const stunnel = mkPackage(
  nixRaw`pkgs.stunnel`,
  "Universal tls/ssl wrapper",
);

/**
 * STUNTMAN - an open source STUN server and client
 */
export const stuntman = mkPackage(
  nixRaw`pkgs.stuntman`,
  "STUNTMAN - an open source STUN server and client",
);

/**
 * Stunt Rally game with Track Editor, based on VDrift and OGRE
 */
export const stuntrally = mkPackage(
  nixRaw`pkgs.stuntrally`,
  "Stunt Rally game with Track Editor, based on VDrift and OGRE",
);

/**
 * Simple wrapper around the VTE terminal emulator widget for GTK
 */
export const stupidterm = mkPackage(
  nixRaw`pkgs.stupidterm`,
  "Simple wrapper around the VTE terminal emulator widget for GTK",
);

/**
 * (Stutter Text|String)-Utterer
 */
export const stutter = mkPackage(
  nixRaw`pkgs.stutter`,
  "(Stutter Text|String)-Utterer",
);

/**
 * A simple text widget for X resembling the watch(1) command
 */
export const stw = mkPackage(
  nixRaw`pkgs.stw`,
  "A simple text widget for X resembling the watch(1) command",
);

/**
 * An implementation of the C++ standard template library STL for external memory (out-of-core) computations
 */
export const stxxl = mkPackage(
  nixRaw`pkgs.stxxl`,
  "An implementation of the C++ standard template library STL for external memory (out-of-core) computations",
);

/**
 * Mighty CSS linter that helps you avoid errors and enforce conventions
 */
export const stylelint = mkPackage(
  nixRaw`pkgs.stylelint`,
  "Mighty CSS linter that helps you avoid errors and enforce conventions",
);

/**
 * A shell script to manage wallpapers
 */
export const stylish = mkPackage(
  nixRaw`pkgs.stylish`,
  "A shell script to manage wallpapers",
);

/**
 * Haskell code prettifier
 */
export const stylish_haskell = mkPackage(
  nixRaw`pkgs.stylish-haskell`,
  "Haskell code prettifier",
);

/**
 * An opinionated Lua code formatter
 */
export const stylua = mkPackage(
  nixRaw`pkgs.stylua`,
  "An opinionated Lua code formatter",
);

/**
 * Nix based static site generator
 */
export const styx = mkPackage(
  nixRaw`pkgs.styx`,
  "Nix based static site generator",
);

/**
 * Suite containing authentication-related tools such as passwd and su
 */
export const su = mkPackage(
  nixRaw`pkgs.su`,
  "Suite containing authentication-related tools such as passwd and su",
);

/**
 * switch user and group id and exec
 */
export const su_exec = mkPackage(
  nixRaw`pkgs.su-exec`,
  "switch user and group id and exec",
);

/**
 * Match and rename subtitle files to video files and perform other batch operations on subtitle files
 */
export const sub_batch = mkPackage(
  nixRaw`pkgs.sub-batch`,
  "Match and rename subtitle files to video files and perform other batch operations on subtitle files",
);

/**
 * An OpenSubtitles.org downloader
 */
export const subberthehut = mkPackage(
  nixRaw`pkgs.subberthehut`,
  "An OpenSubtitles.org downloader",
);

/**
 * A command-line tool to download subtitles from opensubtitles.org
 */
export const subdl = mkPackage(
  nixRaw`pkgs.subdl`,
  "A command-line tool to download subtitles from opensubtitles.org",
);

/**
 * Command-line subtitle editor written in BASH
 */
export const subedit = mkPackage(
  nixRaw`pkgs.subedit`,
  "Command-line subtitle editor written in BASH",
);

/**
 * Subdomain discovery tool
 */
export const subfinder = mkPackage(
  nixRaw`pkgs.subfinder`,
  "Subdomain discovery tool",
);

/**
 * A tool for a smooth, stress-free SVN to Git migration
 */
export const subgit = mkPackage(
  nixRaw`pkgs.subgit`,
  "A tool for a smooth, stress-free SVN to Git migration",
);

/**
 * Fetcher for Javascript files
 */
export const subjs = mkPackage(
  nixRaw`pkgs.subjs`,
  "Fetcher for Javascript files",
);

/**
 * Sophisticated text editor for code, markup and prose
 */
export const sublime = mkPackage(
  nixRaw`pkgs.sublime`,
  "Sophisticated text editor for code, markup and prose",
);

/**
 * Sophisticated text editor for code, markup and prose
 */
export const sublime3 = mkPackage(
  nixRaw`pkgs.sublime3`,
  "Sophisticated text editor for code, markup and prose",
);

/**
 * Sophisticated text editor for code, markup and prose
 */
export const sublime3_dev = mkPackage(
  nixRaw`pkgs.sublime3-dev`,
  "Sophisticated text editor for code, markup and prose",
);

/**
 * Sophisticated text editor for code, markup and prose
 */
export const sublime4 = mkPackage(
  nixRaw`pkgs.sublime4`,
  "Sophisticated text editor for code, markup and prose",
);

/**
 * Sophisticated text editor for code, markup and prose
 */
export const sublime4_dev = mkPackage(
  nixRaw`pkgs.sublime4-dev`,
  "Sophisticated text editor for code, markup and prose",
);

/**
 * Git client from the makers of Sublime Text
 */
export const sublime_merge = mkPackage(
  nixRaw`pkgs.sublime-merge`,
  "Git client from the makers of Sublime Text",
);

/**
 * Git client from the makers of Sublime Text
 */
export const sublime_merge_dev = mkPackage(
  nixRaw`pkgs.sublime-merge-dev`,
  "Git client from the makers of Sublime Text",
);

/**
 * GTK3 Subsonic/Airsonic client
 */
export const sublime_music = mkPackage(
  nixRaw`pkgs.sublime-music`,
  "GTK3 Subsonic/Airsonic client",
);

/**
 * SubNetCalc is an IPv4/IPv6 subnet address calculator
 */
export const subnetcalc = mkPackage(
  nixRaw`pkgs.subnetcalc`,
  "SubNetCalc is an IPv4/IPv6 subnet address calculator",
);

/**
 * High-performance read alignment, quantification and mutation discovery
 */
export const subread = mkPackage(
  nixRaw`pkgs.subread`,
  "High-performance read alignment, quantification and mutation discovery",
);

/**
 * Personal media streamer
 */
export const subsonic = mkPackage(
  nixRaw`pkgs.subsonic`,
  "Personal media streamer",
);

/**
 * A divelog program
 */
export const subsurface = mkPackage(
  nixRaw`pkgs.subsurface`,
  "A divelog program",
);

/**
 * A subtitle editor
 */
export const subtitleedit = mkPackage(
  nixRaw`pkgs.subtitleedit`,
  "A subtitle editor",
);

/**
 * GTK 3 application to edit video subtitles
 */
export const subtitleeditor = mkPackage(
  nixRaw`pkgs.subtitleeditor`,
  "GTK 3 application to edit video subtitles",
);

/**
 * This application, a subtitle generator for YouTube, utilizes OpenAI's Whisper API.
 */
export const subtitlr = mkPackage(
  nixRaw`pkgs.subtitlr`,
  "This application, a subtitle generator for YouTube, utilizes OpenAI's Whisper API.",
);

/**
 * A streaming protocol for test results
 */
export const subunit = mkPackage(
  nixRaw`pkgs.subunit`,
  "A streaming protocol for test results",
);

/**
 * A version control system intended to be a compelling replacement for CVS in the open source community
 */
export const subversion = mkPackage(
  nixRaw`pkgs.subversion`,
  "A version control system intended to be a compelling replacement for CVS in the open source community",
);

/**
 * A version control system intended to be a compelling replacement for CVS in the open source community
 */
export const subversionClient = mkPackage(
  nixRaw`pkgs.subversionClient`,
  "A version control system intended to be a compelling replacement for CVS in the open source community",
);

/**
 * Python module to help with the enumeration of subdomains
 */
export const subzerod = mkPackage(
  nixRaw`pkgs.subzerod`,
  "Python module to help with the enumeration of subdomains",
);

/**
 * Recursively visit and download a website's content to your disk
 */
export const suckit = mkPackage(
  nixRaw`pkgs.suckit`,
  "Recursively visit and download a website's content to your disk",
);

/**
 * A command to run commands as root
 */
export const sudo = mkPackage(
  nixRaw`pkgs.sudo`,
  "A command to run commands as root",
);

/**
 * Font for programmers and command line users
 */
export const sudo_font = mkPackage(
  nixRaw`pkgs.sudo-font`,
  "Font for programmers and command line users",
);

/**
 * A memory safe implementation of sudo and su.
 */
export const sudo_rs = mkPackage(
  nixRaw`pkgs.sudo-rs`,
  "A memory safe implementation of sudo and su.",
);

/**
 * Setuid-safe wrapper for chroot
 */
export const suidChroot = mkPackage(
  nixRaw`pkgs.suidChroot`,
  "Setuid-safe wrapper for chroot",
);

/**
 * A lightweight C library for loading and wrapping LV2 plugin UIs
 */
export const suil = mkPackage(
  nixRaw`pkgs.suil`,
  "A lightweight C library for loading and wrapping LV2 plugin UIs",
);

/**
 * A suite of sparse matrix algorithms
 */
export const suitesparse = mkPackage(
  nixRaw`pkgs.suitesparse`,
  "A suite of sparse matrix algorithms",
);

/**
 * A suite of sparse matrix algorithms
 */
export const suitesparse_4_2 = mkPackage(
  nixRaw`pkgs.suitesparse_4_2`,
  "A suite of sparse matrix algorithms",
);

/**
 * A suite of sparse matrix algorithms
 */
export const suitesparse_4_4 = mkPackage(
  nixRaw`pkgs.suitesparse_4_4`,
  "A suite of sparse matrix algorithms",
);

/**
 * A suite of sparse matrix algorithms
 */
export const suitesparse_5_3 = mkPackage(
  nixRaw`pkgs.suitesparse_5_3`,
  "A suite of sparse matrix algorithms",
);

/**
 * Graph algorithms in the language of linear algebra
 */
export const suitesparse_graphblas = mkPackage(
  nixRaw`pkgs.suitesparse-graphblas`,
  "Graph algorithms in the language of linear algebra",
);

/**
 * Fast and exact comparison and clustering of sequences
 */
export const sumaclust = mkPackage(
  nixRaw`pkgs.sumaclust`,
  "Fast and exact comparison and clustering of sequences",
);

/**
 * Fast and exact comparison and clustering of sequences
 */
export const sumalibs = mkPackage(
  nixRaw`pkgs.sumalibs`,
  "Fast and exact comparison and clustering of sequences",
);

/**
 * Fast and exact comparison and clustering of sequences
 */
export const sumatra = mkPackage(
  nixRaw`pkgs.sumatra`,
  "Fast and exact comparison and clustering of sequences",
);

/**
 * CLI that provides on-demand secrets access for common DevOps tools
 */
export const summon = mkPackage(
  nixRaw`pkgs.summon`,
  "CLI that provides on-demand secrets access for common DevOps tools",
);

/**
 * The SUMO traffic simulator
 */
export const sumo = mkPackage(
  nixRaw`pkgs.sumo`,
  "The SUMO traffic simulator",
);

/**
 * A fork of Monero and a truely fungible cryptocurrency
 */
export const sumokoin = mkPackage(
  nixRaw`pkgs.sumokoin`,
  "A fork of Monero and a truely fungible cryptocurrency",
);

/**
 * Desktop App for managing SumoRobots
 */
export const sumorobot_manager = mkPackage(
  nixRaw`pkgs.sumorobot-manager`,
  "Desktop App for managing SumoRobots",
);

/**
 * Suite of nonlinear differential/algebraic equation solvers
 */
export const sundials = mkPackage(
  nixRaw`pkgs.sundials`,
  "Suite of nonlinear differential/algebraic equation solvers",
);

/**
 * Sundtek MediaTV driver
 */
export const sundtek = mkPackage(
  nixRaw`pkgs.sundtek`,
  "Sundtek MediaTV driver",
);

/**
 * A utility to change wallpaper based on local weather, sunrise and sunset times
 */
export const sunpaper = mkPackage(
  nixRaw`pkgs.sunpaper`,
  "A utility to change wallpaper based on local weather, sunrise and sunset times",
);

/**
 * Sunshine is a Game stream host for Moonlight
 */
export const sunshine = mkPackage(
  nixRaw`pkgs.sunshine`,
  "Sunshine is a Game stream host for Moonlight",
);

/**
 * Small, fast and powerful modular synthesizer with pattern-based sequencer
 */
export const sunvox = mkPackage(
  nixRaw`pkgs.sunvox`,
  "Small, fast and powerful modular synthesizer with pattern-based sequencer",
);

/**
 * Calculates sunrise or sunset times with civil, nautical, astronomical and custom twilights
 */
export const sunwait = mkPackage(
  nixRaw`pkgs.sunwait`,
  "Calculates sunrise or sunset times with civil, nautical, astronomical and custom twilights",
);

/**
 * Tools for Allwinner SoC devices
 */
export const sunxi_tools = mkPackage(
  nixRaw`pkgs.sunxi-tools`,
  "Tools for Allwinner SoC devices",
);

/**
 * A CLI for interacting with supabase
 */
export const supabase_cli = mkPackage(
  nixRaw`pkgs.supabase-cli`,
  "A CLI for interacting with supabase",
);

/**
 * Classic 2D jump'n run sidescroller game
 */
export const superTux = mkPackage(
  nixRaw`pkgs.superTux`,
  "Classic 2D jump'n run sidescroller game",
);

/**
 * A Free 3D kart racing game
 */
export const superTuxKart = mkPackage(
  nixRaw`pkgs.superTuxKart`,
  "A Free 3D kart racing game",
);

/**
 * To Do List / Time Tracker with Jira Integration
 */
export const super_productivity = mkPackage(
  nixRaw`pkgs.super-productivity`,
  "To Do List / Time Tracker with Jira Integration",
);

/**
 * PrusaSlicer fork with more features and faster development cycle
 */
export const super_slicer = mkPackage(
  nixRaw`pkgs.super-slicer`,
  "PrusaSlicer fork with more features and faster development cycle",
);

/**
 * PrusaSlicer fork with more features and faster development cycle
 */
export const super_slicer_latest = mkPackage(
  nixRaw`pkgs.super-slicer-latest`,
  "PrusaSlicer fork with more features and faster development cycle",
);

/**
 * Miniscule SVG versions of common logos
 */
export const super_tiny_icons = mkPackage(
  nixRaw`pkgs.super-tiny-icons`,
  "Miniscule SVG versions of common logos",
);

/**
 * Programming language for real time audio synthesis
 */
export const supercollider = mkPackage(
  nixRaw`pkgs.supercollider`,
  "Programming language for real time audio synthesis",
);

/**
 * Programming language for real time audio synthesis
 */
export const supercollider_scel = mkPackage(
  nixRaw`pkgs.supercollider_scel`,
  "Programming language for real time audio synthesis",
);

/**
 * Programming language for real time audio synthesis
 */
export const supercollider_with_plugins = mkPackage(
  nixRaw`pkgs.supercollider-with-plugins`,
  "Programming language for real time audio synthesis",
);

/**
 * Programming language for real time audio synthesis
 */
export const supercollider_with_sc3_plugins = mkPackage(
  nixRaw`pkgs.supercollider-with-sc3-plugins`,
  "Programming language for real time audio synthesis",
);

/**
 * Unprivileged user service supervisor
 */
export const superd = mkPackage(
  nixRaw`pkgs.superd`,
  "Unprivileged user service supervisor",
);

/**
 * A GPU switching utility, mostly for ASUS laptops
 */
export const supergfxctl = mkPackage(
  nixRaw`pkgs.supergfxctl`,
  "A GPU switching utility, mostly for ASUS laptops",
);

/**
 * User-space utility to detect Super I/O of a mainboard and provide detailed information about the register contents of the Super I/O
 */
export const superiotool = mkPackage(
  nixRaw`pkgs.superiotool`,
  "User-space utility to detect Super I/O of a mainboard and provide detailed information about the register contents of the Super I/O",
);

/**
 * A library for the solution of large, sparse, nonsymmetric systems of linear equations
 */
export const superlu = mkPackage(
  nixRaw`pkgs.superlu`,
  "A library for the solution of large, sparse, nonsymmetric systems of linear equations",
);

/**
 * Tool for creating and building supermin appliances
 */
export const supermin = mkPackage(
  nixRaw`pkgs.supermin`,
  "Tool for creating and building supermin appliances",
);

/**
 * A lightweight cross-platform desktop client for Subsonic music servers
 */
export const supersonic = mkPackage(
  nixRaw`pkgs.supersonic`,
  "A lightweight cross-platform desktop client for Subsonic music servers",
);

/**
 * A lightweight cross-platform desktop client for Subsonic music servers
 */
export const supersonic_wayland = mkPackage(
  nixRaw`pkgs.supersonic-wayland`,
  "A lightweight cross-platform desktop client for Subsonic music servers",
);

/**
 * A tag-based filesystem
 */
export const supertag = mkPackage(
  nixRaw`pkgs.supertag`,
  "A tag-based filesystem",
);

/**
 * A minimal unprivileged process supervisor making use of modern Linux features
 */
export const supervise = mkPackage(
  nixRaw`pkgs.supervise`,
  "A minimal unprivileged process supervisor making use of modern Linux features",
);

/**
 * SystemVerilog 2017 Pre-processor, Parser, Elaborator, UHDM Compiler
 */
export const surelog = mkPackage(
  nixRaw`pkgs.surelog`,
  "SystemVerilog 2017 Pre-processor, Parser, Elaborator, UHDM Compiler",
);

/**
 * A simple web browser based on WebKitGTK
 */
export const surf = mkPackage(
  nixRaw`pkgs.surf`,
  "A simple web browser based on WebKitGTK",
);

/**
 * Kiosk browser session manager based on the surf browser
 */
export const surf_display = mkPackage(
  nixRaw`pkgs.surf-display`,
  "Kiosk browser session manager based on the surf browser",
);

/**
 * Control various aspects of Microsoft Surface devices on Linux from the Command-Line
 */
export const surface_control = mkPackage(
  nixRaw`pkgs.surface-control`,
  "Control various aspects of Microsoft Surface devices on Linux from the Command-Line",
);

/**
 * Provides a fast unix command line interface to a variety of popular WWW search engines and other artifacts of power
 */
export const surfraw = mkPackage(
  nixRaw`pkgs.surfraw`,
  "Provides a fast unix command line interface to a variety of popular WWW search engines and other artifacts of power",
);

        /**
         * LV2 & VST3 synthesizer plug-in (previously released as Vember Audio
Surge)

         */
export const surge = mkPackage(
  nixRaw`pkgs.surge`,
  "LV2 & VST3 synthesizer plug-in (previously released as Vember Audio\nSurge)\n",
);

/**
 * LV2 & VST3 synthesizer plug-in (previously released as Vember Audio Surge)
 */
export const surge_XT = mkPackage(
  nixRaw`pkgs.surge-XT`,
  "LV2 & VST3 synthesizer plug-in (previously released as Vember Audio Surge)",
);

/**
 * CLI for the surge.sh CDN
 */
export const surge_cli = mkPackage(
  nixRaw`pkgs.surge-cli`,
  "CLI for the surge.sh CDN",
);

/**
 * A free and open source, mature, fast and robust network threat detection engine
 */
export const suricata = mkPackage(
  nixRaw`pkgs.suricata`,
  "A free and open source, mature, fast and robust network threat detection engine",
);

/**
 * A scalable, distributed, collaborative, document-graph database, for the realtime web
 */
export const surrealdb = mkPackage(
  nixRaw`pkgs.surrealdb`,
  "A scalable, distributed, collaborative, document-graph database, for the realtime web",
);

/**
 * An awesome SurrealDB migration tool, with a user-friendly CLI and a versatile Rust library that enables seamless integration into any project.
 */
export const surrealdb_migrations = mkPackage(
  nixRaw`pkgs.surrealdb-migrations`,
  "An awesome SurrealDB migration tool, with a user-friendly CLI and a versatile Rust library that enables seamless integration into any project.",
);

/**
 * Free Software/Open Source software package for mapping caves
 */
export const survex = mkPackage(
  nixRaw`pkgs.survex`,
  "Free Software/Open Source software package for mapping caves",
);

/**
 * Channel scanner based on sigutils library
 */
export const suscan = mkPackage(
  nixRaw`pkgs.suscan`,
  "Channel scanner based on sigutils library",
);

/**
 * Small command-line utilities
 */
export const sutils = mkPackage(
  nixRaw`pkgs.sutils`,
  "Small command-line utilities",
);

/**
 * Sigutils-related widgets
 */
export const suwidgets = mkPackage(
  nixRaw`pkgs.suwidgets`,
  "Sigutils-related widgets",
);

/**
 * SystemVerilog compiler and language services
 */
export const sv_lang = mkPackage(
  nixRaw`pkgs.sv-lang`,
  "SystemVerilog compiler and language services",
);

/**
 * Structural variant and INDEL caller for DNA sequencing data, using genome-wide local assembly
 */
export const svaba = mkPackage(
  nixRaw`pkgs.svaba`,
  "Structural variant and INDEL caller for DNA sequencing data, using genome-wide local assembly",
);

/**
 * Generate Rust register maps (`struct`s) from SVD files
 */
export const svd2rust = mkPackage(
  nixRaw`pkgs.svd2rust`,
  "Generate Rust register maps (`struct`s) from SVD files",
);

/**
 * Tools to handle vendor-supplied, often buggy SVD files
 */
export const svdtools = mkPackage(
  nixRaw`pkgs.svdtools`,
  "Tools to handle vendor-supplied, often buggy SVD files",
);

/**
 * Convert SVG files to PDFs
 */
export const svg2pdf = mkPackage(
  nixRaw`pkgs.svg2pdf`,
  "Convert SVG files to PDFs",
);

/**
 * Set of tools for converting SVG graphics to TikZ/PGF code
 */
export const svg2tikz = mkPackage(
  nixRaw`pkgs.svg2tikz`,
  "Set of tools for converting SVG graphics to TikZ/PGF code",
);

/**
 * Convert your ascii diagram scribbles into happy little SVG
 */
export const svgbob = mkPackage(
  nixRaw`pkgs.svgbob`,
  "Convert your ascii diagram scribbles into happy little SVG",
);

/**
 * Clean and optimize SVG files from unnecessary data
 */
export const svgcleaner = mkPackage(
  nixRaw`pkgs.svgcleaner`,
  "Clean and optimize SVG files from unnecessary data",
);

/**
 * Simple virtual keyboard
 */
export const svkbd = mkPackage(
  nixRaw`pkgs.svkbd`,
  "Simple virtual keyboard",
);

/**
 * SystemVerilog linter
 */
export const svlint = mkPackage(
  nixRaw`pkgs.svlint`,
  "SystemVerilog linter",
);

/**
 * SystemVerilog language server
 */
export const svls = mkPackage(
  nixRaw`pkgs.svls`,
  "SystemVerilog language server",
);

/**
 * Tool for importing Subversion repositories into git
 */
export const svn2git = mkPackage(
  nixRaw`pkgs.svn2git`,
  "Tool for importing Subversion repositories into git",
);

/**
 * A fast-import based converter for an svn repo to git repos
 */
export const svn_all_fast_export = mkPackage(
  nixRaw`pkgs.svn-all-fast-export`,
  "A fast-import based converter for an svn repo to git repos",
);

/**
 * FUSE filesystem for accessing Subversion repositories
 */
export const svnfs = mkPackage(
  nixRaw`pkgs.svnfs`,
  "FUSE filesystem for accessing Subversion repositories",
);

/**
 * Text-to-speech engine
 */
export const svox = mkPackage(
  nixRaw`pkgs.svox`,
  "Text-to-speech engine",
);

/**
 * Secure PIN handling using NSS crypto
 */
export const svrcore = mkPackage(
  nixRaw`pkgs.svrcore`,
  "Secure PIN handling using NSS crypto",
);

/**
 * AV1-compliant encoder/decoder library core
 */
export const svt_av1 = mkPackage(
  nixRaw`pkgs.svt-av1`,
  "AV1-compliant encoder/decoder library core",
);

/**
 * Command-line tool to download videos from svtplay.se and other sites
 */
export const svtplay_dl = mkPackage(
  nixRaw`pkgs.svtplay-dl`,
  "Command-line tool to download videos from svtplay.se and other sites",
);

/**
 * Semantic Version Util
 */
export const svu = mkPackage(
  nixRaw`pkgs.svu`,
  "Semantic Version Util",
);

/**
 * Advanced repeater controller and EchoLink software
 */
export const svxlink = mkPackage(
  nixRaw`pkgs.svxlink`,
  "Advanced repeater controller and EchoLink software",
);

/**
 * Swagger 2.0 and OpenAPI 3.0 command-line tool
 */
export const swagger_cli = mkPackage(
  nixRaw`pkgs.swagger-cli`,
  "Swagger 2.0 and OpenAPI 3.0 command-line tool",
);

/**
 * Allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an OpenAPI Spec
 */
export const swagger_codegen = mkPackage(
  nixRaw`pkgs.swagger-codegen`,
  "Allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an OpenAPI Spec",
);

/**
 * Allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an OpenAPI Spec
 */
export const swagger_codegen3 = mkPackage(
  nixRaw`pkgs.swagger-codegen3`,
  "Allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an OpenAPI Spec",
);

/**
 * Tool to searching for secret on swaggerhub
 */
export const swaggerhole = mkPackage(
  nixRaw`pkgs.swaggerhole`,
  "Tool to searching for secret on swaggerhub",
);

/**
 * Lyrics fetcher for currently playing Spotify song
 */
export const swaglyrics = mkPackage(
  nixRaw`pkgs.swaglyrics`,
  "Lyrics fetcher for currently playing Spotify song",
);

/**
 * A featureful, flexible, scriptable, transaction-oriented SMTP test tool
 */
export const swaks = mkPackage(
  nixRaw`pkgs.swaks`,
  "A featureful, flexible, scriptable, transaction-oriented SMTP test tool",
);

/**
 * A Wayland native snapshot editing tool, inspired by Snappy on macOS
 */
export const swappy = mkPackage(
  nixRaw`pkgs.swappy`,
  "A Wayland native snapshot editing tool, inspired by Snappy on macOS",
);

/**
 * Dynamic swap manager for Linux
 */
export const swapspace = mkPackage(
  nixRaw`pkgs.swapspace`,
  "Dynamic swap manager for Linux",
);

/**
 * A simple program to view processes' swap usage on Linux
 */
export const swapview = mkPackage(
  nixRaw`pkgs.swapview`,
  "A simple program to view processes' swap usage on Linux",
);

/**
 * Verification script generator for Spin
 */
export const swarm = mkPackage(
  nixRaw`pkgs.swarm`,
  "Verification script generator for Spin",
);

/**
 * An i3-compatible tiling Wayland compositor
 */
export const sway = mkPackage(
  nixRaw`pkgs.sway`,
  "An i3-compatible tiling Wayland compositor",
);

/**
 * TUI Application launcher with Desktop Entry support.
 */
export const sway_launcher_desktop = mkPackage(
  nixRaw`pkgs.sway-launcher-desktop`,
  "TUI Application launcher with Desktop Entry support.",
);

/**
 * An i3-compatible tiling Wayland compositor
 */
export const sway_unwrapped = mkPackage(
  nixRaw`pkgs.sway-unwrapped`,
  "An i3-compatible tiling Wayland compositor",
);

/**
 * Wallpaper tool for Wayland compositors
 */
export const swaybg = mkPackage(
  nixRaw`pkgs.swaybg`,
  "Wallpaper tool for Wayland compositors",
);

/**
 * Window Icons in Sway with Nerd Fonts!
 */
export const swaycons = mkPackage(
  nixRaw`pkgs.swaycons`,
  "Window Icons in Sway with Nerd Fonts!",
);

/**
 * Returns cwd for shell in currently focused sway window, or home directory if cannot find shell
 */
export const swaycwd = mkPackage(
  nixRaw`pkgs.swaycwd`,
  "Returns cwd for shell in currently focused sway window, or home directory if cannot find shell",
);

/**
 * Map sway workspace names to icons defined depending on the windows inside of the workspace
 */
export const swayest_workstyle = mkPackage(
  nixRaw`pkgs.swayest-workstyle`,
  "Map sway workspace names to icons defined depending on the windows inside of the workspace",
);

/**
 * Sway, but with eye candy!
 */
export const swayfx = mkPackage(
  nixRaw`pkgs.swayfx`,
  "Sway, but with eye candy!",
);

/**
 * Idle management daemon for Wayland
 */
export const swayidle = mkPackage(
  nixRaw`pkgs.swayidle`,
  "Idle management daemon for Wayland",
);

/**
 * Image viewer for Sway/Wayland
 */
export const swayimg = mkPackage(
  nixRaw`pkgs.swayimg`,
  "Image viewer for Sway/Wayland",
);

/**
 * Per-window keyboard layout for Sway
 */
export const swaykbdd = mkPackage(
  nixRaw`pkgs.swaykbdd`,
  "Per-window keyboard layout for Sway",
);

/**
 * Screen locker for Wayland
 */
export const swaylock = mkPackage(
  nixRaw`pkgs.swaylock`,
  "Screen locker for Wayland",
);

/**
 * Screen locker for Wayland
 */
export const swaylock_effects = mkPackage(
  nixRaw`pkgs.swaylock-effects`,
  "Screen locker for Wayland",
);

/**
 * This is an swaylock bash script that takes a screenshot of the desktop, blurs the background and adds a lock icon and text
 */
export const swaylock_fancy = mkPackage(
  nixRaw`pkgs.swaylock-fancy`,
  "This is an swaylock bash script that takes a screenshot of the desktop, blurs the background and adds a lock icon and text",
);

/**
 * Shows a message when your battery is discharging 
 */
export const swaynag_battery = mkPackage(
  nixRaw`pkgs.swaynag-battery`,
  "Shows a message when your battery is discharging ",
);

/**
 * Simple notification daemon with a GUI built for Sway
 */
export const swaynotificationcenter = mkPackage(
  nixRaw`pkgs.swaynotificationcenter`,
  "Simple notification daemon with a GUI built for Sway",
);

/**
 * A GTK based on screen display for keyboard shortcuts
 */
export const swayosd = mkPackage(
  nixRaw`pkgs.swayosd`,
  "A GTK based on screen display for keyboard shortcuts",
);

/**
 * A window switcher (and more) for sway
 */
export const swayr = mkPackage(
  nixRaw`pkgs.swayr`,
  "A window switcher (and more) for sway",
);

/**
 * Status command for sway's swaybar implementing the swaybar-protocol
 */
export const swayrbar = mkPackage(
  nixRaw`pkgs.swayrbar`,
  "Status command for sway's swaybar implementing the swaybar-protocol",
);

/**
 * A GUI for configuring your sway desktop
 */
export const swaysettings = mkPackage(
  nixRaw`pkgs.swaysettings`,
  "A GUI for configuring your sway desktop",
);

/**
 * Helper to make sway behave more like awesomewm
 */
export const swaysome = mkPackage(
  nixRaw`pkgs.swaysome`,
  "Helper to make sway behave more like awesomewm",
);

/**
 * Collection of simple tools for sway (and i3)
 */
export const swaytools = mkPackage(
  nixRaw`pkgs.swaytools`,
  "Collection of simple tools for sway (and i3)",
);

/**
 * A sway workspace tool which allows easy moving of workspaces to and from outputs
 */
export const swayws = mkPackage(
  nixRaw`pkgs.swayws`,
  "A sway workspace tool which allows easy moving of workspaces to and from outputs",
);

/**
 * Automatically change sway workspace names based on their contents
 */
export const swaywsr = mkPackage(
  nixRaw`pkgs.swaywsr`,
  "Automatically change sway workspace names based on their contents",
);

/**
 * Rust-based platform for the Web
 */
export const swc = mkPackage(
  nixRaw`pkgs.swc`,
  "Rust-based platform for the Web",
);

/**
 * Light and dark colorful Gtk3.20+ theme
 */
export const sweet = mkPackage(
  nixRaw`pkgs.sweet`,
  "Light and dark colorful Gtk3.20+ theme",
);

/**
 * A dark and colorful, blurry theme for the KDE Plasma desktop
 */
export const sweet_nova = mkPackage(
  nixRaw`pkgs.sweet-nova`,
  "A dark and colorful, blurry theme for the KDE Plasma desktop",
);

/**
 * Simple Webserver in Golang
 */
export const swego = mkPackage(
  nixRaw`pkgs.swego`,
  "Simple Webserver in Golang",
);

/**
 * An xml2swf and swf2xml processor with import functionalities
 */
export const swfmill = mkPackage(
  nixRaw`pkgs.swfmill`,
  "An xml2swf and swf2xml processor with import functionalities",
);

/**
 * Collection of SWF manipulation and creation utilities
 */
export const swftools = mkPackage(
  nixRaw`pkgs.swftools`,
  "Collection of SWF manipulation and creation utilities",
);

/**
 * LV2 version of Steve Harris' SWH plugins
 */
export const swh_lv2 = mkPackage(
  nixRaw`pkgs.swh_lv2`,
  "LV2 version of Steve Harris' SWH plugins",
);

/**
 * A Prolog compiler and interpreter
 */
export const swiProlog = mkPackage(
  nixRaw`pkgs.swiProlog`,
  "A Prolog compiler and interpreter",
);

/**
 * A Prolog compiler and interpreter
 */
export const swiPrologWithGui = mkPackage(
  nixRaw`pkgs.swiPrologWithGui`,
  "A Prolog compiler and interpreter",
);

/**
 * The Swift Programming Language
 */
export const swift = mkPackage(
  nixRaw`pkgs.swift`,
  "The Swift Programming Language",
);

/**
 * Grand Central Dispatch
 */
export const swift_corelibs_libdispatch = mkPackage(
  nixRaw`pkgs.swift-corelibs-libdispatch`,
  "Grand Central Dispatch",
);

/**
 * Formatting technology for Swift source code
 */
export const swift_format = mkPackage(
  nixRaw`pkgs.swift-format`,
  "Formatting technology for Swift source code",
);

/**
 * Powerful macOS menu bar customization tool
 */
export const swiftbar = mkPackage(
  nixRaw`pkgs.swiftbar`,
  "Powerful macOS menu bar customization tool",
);

/**
 * Python bindings to the OpenStack Object Storage API
 */
export const swiftclient = mkPackage(
  nixRaw`pkgs.swiftclient`,
  "Python bindings to the OpenStack Object Storage API",
);

/**
 * View and change the default application for url schemes and UTIs
 */
export const swiftdefaultapps = mkPackage(
  nixRaw`pkgs.swiftdefaultapps`,
  "View and change the default application for url schemes and UTIs",
);

/**
 * An XMPP library for C++, used by the Swift client
 */
export const swiften = mkPackage(
  nixRaw`pkgs.swiften`,
  "An XMPP library for C++, used by the Swift client",
);

/**
 * A code formatting and linting tool for Swift
 */
export const swiftformat = mkPackage(
  nixRaw`pkgs.swiftformat`,
  "A code formatting and linting tool for Swift",
);

/**
 * The Package Manager for the Swift Programming Language
 */
export const swiftpm = mkPackage(
  nixRaw`pkgs.swiftpm`,
  "The Package Manager for the Swift Programming Language",
);

/**
 * Generate a Nix expression to fetch swiftpm dependencies
 */
export const swiftpm2nix = mkPackage(
  nixRaw`pkgs.swiftpm2nix`,
  "Generate a Nix expression to fetch swiftpm dependencies",
);

/**
 * A high-performance CPU-based implementation of the Vulkan 1.3 graphics API
 */
export const swiftshader = mkPackage(
  nixRaw`pkgs.swiftshader`,
  "A high-performance CPU-based implementation of the Vulkan 1.3 graphics API",
);

/**
 * An interface compiler that connects C/C++ code to higher-level languages
 */
export const swig = mkPackage(
  nixRaw`pkgs.swig`,
  "An interface compiler that connects C/C++ code to higher-level languages",
);

/**
 * SWIG, an interface compiler that connects C/C++ code to higher-level languages
 */
export const swig1 = mkPackage(
  nixRaw`pkgs.swig1`,
  "SWIG, an interface compiler that connects C/C++ code to higher-level languages",
);

/**
 * SWIG, an interface compiler that connects C/C++ code to higher-level languages
 */
export const swig2 = mkPackage(
  nixRaw`pkgs.swig2`,
  "SWIG, an interface compiler that connects C/C++ code to higher-level languages",
);

/**
 * An interface compiler that connects C/C++ code to higher-level languages
 */
export const swig3 = mkPackage(
  nixRaw`pkgs.swig3`,
  "An interface compiler that connects C/C++ code to higher-level languages",
);

/**
 * SWIG, an interface compiler that connects C/C++ code to higher-level languages
 */
export const swig4 = mkPackage(
  nixRaw`pkgs.swig4`,
  "SWIG, an interface compiler that connects C/C++ code to higher-level languages",
);

/**
 * An interface compiler that connects C/C++ code to higher-level languages
 */
export const swigWithJava = mkPackage(
  nixRaw`pkgs.swigWithJava`,
  "An interface compiler that connects C/C++ code to higher-level languages",
);

/**
 * Java GUI for SANE scanner servers (saned)
 */
export const swingsane = mkPackage(
  nixRaw`pkgs.swingsane`,
  "Java GUI for SANE scanner servers (saned)",
);

/**
 * Completion plugin for touchscreen-keyboards on mobile devices
 */
export const swipe_guess = mkPackage(
  nixRaw`pkgs.swipe-guess`,
  "Completion plugin for touchscreen-keyboards on mobile devices",
);

/**
 * D-Bus service to check the availability of dual-GPU
 */
export const switcheroo_control = mkPackage(
  nixRaw`pkgs.switcheroo-control`,
  "D-Bus service to check the availability of dual-GPU",
);

/**
 * A software framework that allows research manipulation of Biblical texts
 */
export const sword = mkPackage(
  nixRaw`pkgs.sword`,
  "A software framework that allows research manipulation of Biblical texts",
);

        /**
         * A widget toolkit for Java to access the user-interface facilities of
the operating systems on which it is implemented.

         */
export const swt = mkPackage(
  nixRaw`pkgs.swt`,
  "A widget toolkit for Java to access the user-interface facilities of\nthe operating systems on which it is implemented.\n",
);

        /**
         * A widget toolkit for Java to access the user-interface facilities of
the operating systems on which it is implemented.

         */
export const swt_jdk8 = mkPackage(
  nixRaw`pkgs.swt_jdk8`,
  "A widget toolkit for Java to access the user-interface facilities of\nthe operating systems on which it is implemented.\n",
);

/**
 * Libtpms-based TPM emulator
 */
export const swtpm = mkPackage(
  nixRaw`pkgs.swtpm`,
  "Libtpms-based TPM emulator",
);

/**
 * Efficient animated wallpaper daemon for wayland, controlled at runtime
 */
export const swww = mkPackage(
  nixRaw`pkgs.swww`,
  "Efficient animated wallpaper daemon for wayland, controlled at runtime",
);

/**
 * Simple alternative to both xinit and startx for starting a Xorg server
 */
export const sx = mkPackage(
  nixRaw`pkgs.sx`,
  "Simple alternative to both xinit and startx for starting a Xorg server",
);

/**
 * Command-line network scanner
 */
export const sx_go = mkPackage(
  nixRaw`pkgs.sx-go`,
  "Command-line network scanner",
);

/**
 * Simple X hotkey daemon
 */
export const sxhkd = mkPackage(
  nixRaw`pkgs.sxhkd`,
  "Simple X hotkey daemon",
);

/**
 * Simple X Image Viewer
 */
export const sxiv = mkPackage(
  nixRaw`pkgs.sxiv`,
  "Simple X Image Viewer",
);

/**
 * Tool to show information about available SYCL implementations
 */
export const sycl_info = mkPackage(
  nixRaw`pkgs.sycl-info`,
  "Tool to show information about available SYCL implementations",
);

/**
 * seccomp-based application sandbox
 */
export const sydbox = mkPackage(
  nixRaw`pkgs.sydbox`,
  "seccomp-based application sandbox",
);

/**
 * CLI tool and library for generating a Software Bill of Materials from container images and filesystems
 */
export const syft = mkPackage(
  nixRaw`pkgs.syft`,
  "CLI tool and library for generating a Software Bill of Materials from container images and filesystems",
);

/**
 * Lightweight and user-friendly e-mail client
 */
export const sylpheed = mkPackage(
  nixRaw`pkgs.sylpheed`,
  "Lightweight and user-friendly e-mail client",
);

/**
 * Tooling for Yosys-based verification flows
 */
export const symbiyosys = mkPackage(
  nixRaw`pkgs.symbiyosys`,
  "Tooling for Yosys-based verification flows",
);

/**
 * Basic Latin, Greek, Cyrillic and many Symbol blocks of Unicode
 */
export const symbola = mkPackage(
  nixRaw`pkgs.symbola`,
  "Basic Latin, Greek, Cyrillic and many Symbol blocks of Unicode",
);

/**
 * Symbolics made easy
 */
export const symbolic_preview = mkPackage(
  nixRaw`pkgs.symbolic-preview`,
  "Symbolics made easy",
);

/**
 * Native Symbolication as a Service
 */
export const symbolicator = mkPackage(
  nixRaw`pkgs.symbolicator`,
  "Native Symbolication as a Service",
);

/**
 * A fast symbolic manipulation library
 */
export const symengine = mkPackage(
  nixRaw`pkgs.symengine`,
  "A fast symbolic manipulation library",
);

/**
 * Symfony CLI
 */
export const symfony_cli = mkPackage(
  nixRaw`pkgs.symfony-cli`,
  "Symfony CLI",
);

/**
 * A (concrete or symbolic) implementation of IEEE-754 / SMT-LIB floating-point
 */
export const symfpu = mkPackage(
  nixRaw`pkgs.symfpu`,
  "A (concrete or symbolic) implementation of IEEE-754 / SMT-LIB floating-point",
);

/**
 * Find and remedy problematic symbolic links on a system
 */
export const symlinks = mkPackage(
  nixRaw`pkgs.symlinks`,
  "Find and remedy problematic symbolic links on a system",
);

/**
 * A collection of routines for representation theory and combinatorics
 */
export const symmetrica = mkPackage(
  nixRaw`pkgs.symmetrica`,
  "A collection of routines for representation theory and combinatorics",
);

/**
 * Open source mailing list manager
 */
export const sympa = mkPackage(
  nixRaw`pkgs.sympa`,
  "Open source mailing list manager",
);

/**
 * Compute special values of symmetric power elliptic curve L-functions
 */
export const sympow = mkPackage(
  nixRaw`pkgs.sympow`,
  "Compute special values of symmetric power elliptic curve L-functions",
);

/**
 * Program for representing sounds visually
 */
export const synaesthesia = mkPackage(
  nixRaw`pkgs.synaesthesia`,
  "Program for representing sounds visually",
);

/**
 * Semantic launcher to start applications and find relevant files
 */
export const synapse = mkPackage(
  nixRaw`pkgs.synapse`,
  "Semantic launcher to start applications and find relevant files",
);

/**
 * Admin UI for Synapse Homeservers
 */
export const synapse_admin = mkPackage(
  nixRaw`pkgs.synapse-admin`,
  "Admin UI for Synapse Homeservers",
);

/**
 * Flexible and fast BitTorrent daemon
 */
export const synapse_bt = mkPackage(
  nixRaw`pkgs.synapse-bt`,
  "Flexible and fast BitTorrent daemon",
);

/**
 * Free software that synchronises media players
 */
export const syncplay = mkPackage(
  nixRaw`pkgs.syncplay`,
  "Free software that synchronises media players",
);

/**
 * Free software that synchronises media players
 */
export const syncplay_nogui = mkPackage(
  nixRaw`pkgs.syncplay-nogui`,
  "Free software that synchronises media players",
);

/**
 * Bidirectional sync tool for rclone
 */
export const syncrclone = mkPackage(
  nixRaw`pkgs.syncrclone`,
  "Bidirectional sync tool for rclone",
);

/**
 * Mozilla Sync Storage built with Rust
 */
export const syncstorage_rs = mkPackage(
  nixRaw`pkgs.syncstorage-rs`,
  "Mozilla Sync Storage built with Rust",
);

/**
 * Open Source Continuous File Synchronization
 */
export const syncthing = mkPackage(
  nixRaw`pkgs.syncthing`,
  "Open Source Continuous File Synchronization",
);

/**
 * Open Source Continuous File Synchronization
 */
export const syncthing_discovery = mkPackage(
  nixRaw`pkgs.syncthing-discovery`,
  "Open Source Continuous File Synchronization",
);

/**
 * Open Source Continuous File Synchronization
 */
export const syncthing_relay = mkPackage(
  nixRaw`pkgs.syncthing-relay`,
  "Open Source Continuous File Synchronization",
);

/**
 * Simple application tray for syncthing
 */
export const syncthing_tray = mkPackage(
  nixRaw`pkgs.syncthing-tray`,
  "Simple application tray for syncthing",
);

/**
 * Tray application and Dolphin/Plasma integration for Syncthing
 */
export const syncthingtray = mkPackage(
  nixRaw`pkgs.syncthingtray`,
  "Tray application and Dolphin/Plasma integration for Syncthing",
);

/**
 * Tray application and Dolphin/Plasma integration for Syncthing
 */
export const syncthingtray_minimal = mkPackage(
  nixRaw`pkgs.syncthingtray-minimal`,
  "Tray application and Dolphin/Plasma integration for Syncthing",
);

/**
 * Share one mouse and keyboard between multiple computers
 */
export const synergy = mkPackage(
  nixRaw`pkgs.synergy`,
  "Share one mouse and keyboard between multiple computers",
);

/**
 * Share one mouse and keyboard between multiple computers
 */
export const synergyWithoutGUI = mkPackage(
  nixRaw`pkgs.synergyWithoutGUI`,
  "Share one mouse and keyboard between multiple computers",
);

/**
 * A 2D animation program
 */
export const synfigstudio = mkPackage(
  nixRaw`pkgs.synfigstudio`,
  "A 2D animation program",
);

/**
 * A desktop tool to decrypt data encrypted by Cloud Sync.
 */
export const synology_cloud_sync_decryption_tool = mkPackage(
  nixRaw`pkgs.synology-cloud-sync-decryption-tool`,
  "A desktop tool to decrypt data encrypted by Cloud Sync.",
);

/**
 * Desktop application to synchronize files and folders between the computer and the Synology Drive server.
 */
export const synology_drive_client = mkPackage(
  nixRaw`pkgs.synology-drive-client`,
  "Desktop application to synchronize files and folders between the computer and the Synology Drive server.",
);

/**
 * Texture synthesis from examples
 */
export const syntex = mkPackage(
  nixRaw`pkgs.syntex`,
  "Texture synthesis from examples",
);

/**
 * A tool for generating realistic data using a declarative data model
 */
export const synth = mkPackage(
  nixRaw`pkgs.synth`,
  "A tool for generating realistic data using a declarative data model",
);

/**
 * A fun way to learn how to play the piano
 */
export const synthesia = mkPackage(
  nixRaw`pkgs.synthesia`,
  "A fun way to learn how to play the piano",
);

/**
 * An old-school 4-oscillator subtractive polyphonic synthesizer with stereo fx
 */
export const synthv1 = mkPackage(
  nixRaw`pkgs.synthv1`,
  "An old-school 4-oscillator subtractive polyphonic synthesizer with stereo fx",
);

/**
 * Modular, cross-platform and multi-threaded benchmark tool
 */
export const sysbench = mkPackage(
  nixRaw`pkgs.sysbench`,
  "Modular, cross-platform and multi-threaded benchmark tool",
);

/**
 * Start Linux programs with only selected syscalls enabled
 */
export const syscall_limiter = mkPackage(
  nixRaw`pkgs.syscall_limiter`,
  "Start Linux programs with only selected syscalls enabled",
);

export const sysctl = mkPackage(
  nixRaw`pkgs.sysctl`,
  "",
);

/**
 * A tracepoint-based system tracing tool for Linux (with clients for other OSes)
 */
export const sysdig = mkPackage(
  nixRaw`pkgs.sysdig`,
  "A tracepoint-based system tracing tool for Linux (with clients for other OSes)",
);

export const sysfsutils = mkPackage(
  nixRaw`pkgs.sysfsutils`,
  "",
);

/**
 * A system logging daemon
 */
export const sysklogd = mkPackage(
  nixRaw`pkgs.sysklogd`,
  "A system logging daemon",
);

/**
 * A lightweight bootloader
 */
export const syslinux = mkPackage(
  nixRaw`pkgs.syslinux`,
  "A lightweight bootloader",
);

/**
 * Next-generation syslogd with advanced networking and filtering capabilities
 */
export const syslogng = mkPackage(
  nixRaw`pkgs.syslogng`,
  "Next-generation syslogd with advanced networking and filtering capabilities",
);

/**
 * System-wide profiler for Linux
 */
export const sysprof = mkPackage(
  nixRaw`pkgs.sysprof`,
  "System-wide profiler for Linux",
);

/**
 * A collection of performance monitoring tools for Linux (such as sar, iostat and pidstat)
 */
export const sysstat = mkPackage(
  nixRaw`pkgs.sysstat`,
  "A collection of performance monitoring tools for Linux (such as sar, iostat and pidstat)",
);

/**
 * Tools for managing firmware updates for system76 devices
 */
export const system76_firmware = mkPackage(
  nixRaw`pkgs.system76-firmware`,
  "Tools for managing firmware updates for system76 devices",
);

/**
 * Keyboard configuration application for System76 keyboards and laptops
 */
export const system76_keyboard_configurator = mkPackage(
  nixRaw`pkgs.system76-keyboard-configurator`,
  "Keyboard configuration application for System76 keyboards and laptops",
);

export const system_config_printer = mkPackage(
  nixRaw`pkgs.system-config-printer`,
  "",
);

/**
 * A sendmail wrapper that calls the system sendmail. Do not install as system-wide sendmail!

 */
export const system_sendmail = mkPackage(
  nixRaw`pkgs.system-sendmail`,
  "A sendmail wrapper that calls the system sendmail. Do not install as system-wide sendmail!\n",
);

/**
 * A story and a puzzle game, where you solve a variety of puzzle
 */
export const system_syzygy = mkPackage(
  nixRaw`pkgs.system-syzygy`,
  "A story and a puzzle game, where you solve a variety of puzzle",
);

/**
 * System bus notification daemon
 */
export const systembus_notify = mkPackage(
  nixRaw`pkgs.systembus-notify`,
  "System bus notification daemon",
);

/**
 * The language for System-level design, modeling and verification
 */
export const systemc = mkPackage(
  nixRaw`pkgs.systemc`,
  "The language for System-level design, modeling and verification",
);

/**
 * A simple TUI for interacting with systemd services and their logs
 */
export const systemctl_tui = mkPackage(
  nixRaw`pkgs.systemctl-tui`,
  "A simple TUI for interacting with systemd services and their logs",
);

/**
 * A system and service manager for Linux
 */
export const systemd = mkPackage(
  nixRaw`pkgs.systemd`,
  "A system and service manager for Linux",
);

/**
 * A system and service manager for Linux
 */
export const systemdMinimal = mkPackage(
  nixRaw`pkgs.systemdMinimal`,
  "A system and service manager for Linux",
);

/**
 * Export entries from systemd's journal and send them to a graylog server using gelf
 */
export const systemd_journal2gelf = mkPackage(
  nixRaw`pkgs.systemd-journal2gelf`,
  "Export entries from systemd's journal and send them to a graylog server using gelf",
);

/**
 * Wait for a systemd unit to enter a specific state
 */
export const systemd_wait = mkPackage(
  nixRaw`pkgs.systemd-wait`,
  "Wait for a systemd unit to enter a specific state",
);

/**
 * Systemd management utility
 */
export const systemdgenie = mkPackage(
  nixRaw`pkgs.systemdgenie`,
  "Systemd management utility",
);

/**
 * A convenient helper for passing sockets into another process
 */
export const systemfd = mkPackage(
  nixRaw`pkgs.systemfd`,
  "A convenient helper for passing sockets into another process",
);

/**
 * More powerful alternative to sysctl(8) with a terminal user interface
 */
export const systeroid = mkPackage(
  nixRaw`pkgs.systeroid`,
  "More powerful alternative to sysctl(8) with a terminal user interface",
);

/**
 * A systray utility written in go, using json over stdio for control and events
 */
export const systrayhelper = mkPackage(
  nixRaw`pkgs.systrayhelper`,
  "A systray utility written in go, using json over stdio for control and events",
);

/**
 * Utilities related to booting and shutdown
 */
export const sysvinit = mkPackage(
  nixRaw`pkgs.sysvinit`,
  "Utilities related to booting and shutdown",
);

/**
 * Utilities related to booting and shutdown
 */
export const sysvtools = mkPackage(
  nixRaw`pkgs.sysvtools`,
  "Utilities related to booting and shutdown",
);

/**
 * A fzf terminal UI for systemctl
 */
export const sysz = mkPackage(
  nixRaw`pkgs.sysz`,
  "A fzf terminal UI for systemctl",
);

/**
 * Compression library that can be used with the hdf5 library
 */
export const szip = mkPackage(
  nixRaw`pkgs.szip`,
  "Compression library that can be used with the hdf5 library",
);

/**
 * A simple but powerful and fast bulk file renamer
 */
export const szyszka = mkPackage(
  nixRaw`pkgs.szyszka`,
  "A simple but powerful and fast bulk file renamer",
);

/**
 * A command-line power tool for Twitter
 */
export const t = mkPackage(
  nixRaw`pkgs.t`,
  "A command-line power tool for Twitter",
);

/**
 * A type 1 font rasterizer library for UNIX/X11
 */
export const t1lib = mkPackage(
  nixRaw`pkgs.t1lib`,
  "A type 1 font rasterizer library for UNIX/X11",
);

/**
 * Collection of simple Type 1 font manipulation programs
 */
export const t1utils = mkPackage(
  nixRaw`pkgs.t1utils`,
  "Collection of simple Type 1 font manipulation programs",
);

/**
 * A library of code shared between tuxmath and tuxtype
 */
export const t4kcommon = mkPackage(
  nixRaw`pkgs.t4kcommon`,
  "A library of code shared between tuxmath and tuxtype",
);

/**
 * Blazingly fast terminal recorder that generates animated gif images for the web written in rust
 */
export const t_rec = mkPackage(
  nixRaw`pkgs.t-rec`,
  "Blazingly fast terminal recorder that generates animated gif images for the web written in rust",
);

/**
 * TA-Lib is a library that provides common functions for the technical analysis of financial market data.
 */
export const ta_lib = mkPackage(
  nixRaw`pkgs.ta-lib`,
  "TA-Lib is a library that provides common functions for the technical analysis of financial market data.",
);

/**
 * Programming language/shell calculator
 */
export const tab = mkPackage(
  nixRaw`pkgs.tab`,
  "Programming language/shell calculator",
);

/**
 * Intuitive, config-driven terminal multiplexer designed for software & systems engineers
 */
export const tab_rs = mkPackage(
  nixRaw`pkgs.tab-rs`,
  "Intuitive, config-driven terminal multiplexer designed for software & systems engineers",
);

/**
 * Simple generic tabbed fronted to xembed aware applications
 */
export const tabbed = mkPackage(
  nixRaw`pkgs.tabbed`,
  "Simple generic tabbed fronted to xembed aware applications",
);

/**
 * Smart Compose for code that uses deep learning to help you write code faster
 */
export const tabnine = mkPackage(
  nixRaw`pkgs.tabnine`,
  "Smart Compose for code that uses deep learning to help you write code faster",
);

/**
 * A library for extracting tables from PDF files.
 */
export const tabula_java = mkPackage(
  nixRaw`pkgs.tabula-java`,
  "A library for extracting tables from PDF files.",
);

/**
 * Python curses command line CSV and tabular data viewer
 */
export const tabview = mkPackage(
  nixRaw`pkgs.tabview`,
  "Python curses command line CSV and tabular data viewer",
);

/**
 * A protocol for authentication, authorization and accounting (AAA) services for routers and network devices
 */
export const tacacsplus = mkPackage(
  nixRaw`pkgs.tacacsplus`,
  "A protocol for authentication, authorization and accounting (AAA) services for routers and network devices",
);

/**
 * A Parallel / Multiprocessor Ray Tracing System
 */
export const tachyon = mkPackage(
  nixRaw`pkgs.tachyon`,
  "A Parallel / Multiprocessor Ray Tracing System",
);

/**
 * Computes sparse tensor expressions on CPUs and GPUs
 */
export const taco = mkPackage(
  nixRaw`pkgs.taco`,
  "Computes sparse tensor expressions on CPUs and GPUs",
);

/**
 * A desktop bar similar to xmobar, but with more GUI
 */
export const taffybar = mkPackage(
  nixRaw`pkgs.taffybar`,
  "A desktop bar similar to xmobar, but with more GUI",
);

/**
 * A free, open-source Japanese dictionary and kanji lookup tool
 */
export const tagainijisho = mkPackage(
  nixRaw`pkgs.tagainijisho`,
  "A free, open-source Japanese dictionary and kanji lookup tool",
);

/**
 * A tag editor with Qt GUI and command-line interface supporting MP4/M4A/AAC (iTunes), ID3, Vorbis, Opus, FLAC and Matroska
 */
export const tageditor = mkPackage(
  nixRaw`pkgs.tageditor`,
  "A tag editor with Qt GUI and command-line interface supporting MP4/M4A/AAC (iTunes), ID3, Vorbis, Opus, FLAC and Matroska",
);

/**
 * An easy-to-use music tag (metadata) editor
 */
export const tagger = mkPackage(
  nixRaw`pkgs.tagger`,
  "An easy-to-use music tag (metadata) editor",
);

/**
 * A library for reading and editing audio file metadata
 */
export const taglib = mkPackage(
  nixRaw`pkgs.taglib`,
  "A library for reading and editing audio file metadata",
);

/**
 * Additional taglib plugins
 */
export const taglib_extras = mkPackage(
  nixRaw`pkgs.taglib_extras`,
  "Additional taglib plugins",
);

/**
 * Library for reading and writing metadata in media files
 */
export const taglib_sharp = mkPackage(
  nixRaw`pkgs.taglib-sharp`,
  "Library for reading and writing metadata in media files",
);

/**
 * C++ library for reading and writing MP4/M4A/AAC (iTunes), ID3, Vorbis, Opus, FLAC and Matroska tags
 */
export const tagparser = mkPackage(
  nixRaw`pkgs.tagparser`,
  "C++ library for reading and writing MP4/M4A/AAC (iTunes), ID3, Vorbis, Opus, FLAC and Matroska tags",
);

/**
 * Tagref helps you refer to other locations in your codebase.
 */
export const tagref = mkPackage(
  nixRaw`pkgs.tagref`,
  "Tagref helps you refer to other locations in your codebase.",
);

/**
 * Stochastic Time Tracking for Space Cadets
 */
export const tagtime = mkPackage(
  nixRaw`pkgs.tagtime`,
  "Stochastic Time Tracking for Space Cadets",
);

/**
 * Scriptable music files tags tool and editor
 */
export const tagutil = mkPackage(
  nixRaw`pkgs.tagutil`,
  "Scriptable music files tags tool and editor",
);

/**
 * Tahoe-LAFS, a decentralized, fault-tolerant, distributed storage system
 */
export const tahoe_lafs = mkPackage(
  nixRaw`pkgs.tahoe-lafs`,
  "Tahoe-LAFS, a decentralized, fault-tolerant, distributed storage system",
);

/**
 * Unicode-compliant Tai Ahom font
 */
export const tai_ahom = mkPackage(
  nixRaw`pkgs.tai-ahom`,
  "Unicode-compliant Tai Ahom font",
);

/**
 * A CLI tool to insert lines when command output stops
 */
export const tailer = mkPackage(
  nixRaw`pkgs.tailer`,
  "A CLI tool to insert lines when command output stops",
);

/**
 * A tool to migrate changesets between various kinds of version control system.
 */
export const tailor = mkPackage(
  nixRaw`pkgs.tailor`,
  "A tool to migrate changesets between various kinds of version control system.",
);

/**
 * Rust GUI for interacting with hardware from TUXEDO Computers
 */
export const tailor_gui = mkPackage(
  nixRaw`pkgs.tailor-gui`,
  "Rust GUI for interacting with hardware from TUXEDO Computers",
);

/**
 * The node agent for Tailscale, a mesh VPN built on WireGuard
 */
export const tailscale = mkPackage(
  nixRaw`pkgs.tailscale`,
  "The node agent for Tailscale, a mesh VPN built on WireGuard",
);

/**
 * Tailscale systray
 */
export const tailscale_systray = mkPackage(
  nixRaw`pkgs.tailscale-systray`,
  "Tailscale systray",
);

/**
 * A log file highlighter
 */
export const tailspin = mkPackage(
  nixRaw`pkgs.tailspin`,
  "A log file highlighter",
);

/**
 * Command-line tool for the CSS framework with composable CSS classes, standalone CLI
 */
export const tailwindcss = mkPackage(
  nixRaw`pkgs.tailwindcss`,
  "Command-line tool for the CSS framework with composable CSS classes, standalone CLI",
);

/**
 * A free and open-source Touhou Project clone and fangame
 */
export const taisei = mkPackage(
  nixRaw`pkgs.taisei`,
  "A free and open-source Touhou Project clone and fangame",
);

/**
 * curses based mediawiki browser
 */
export const taizen = mkPackage(
  nixRaw`pkgs.taizen`,
  "curses based mediawiki browser",
);

/**
 * Japanese TrueType Gothic, P Gothic, Mincho, P Mincho fonts
 */
export const takao = mkPackage(
  nixRaw`pkgs.takao`,
  "Japanese TrueType Gothic, P Gothic, Mincho, P Mincho fonts",
);

/**
 * Efficient, large scale, parallel remote execution of commands
 */
export const taktuk = mkPackage(
  nixRaw`pkgs.taktuk`,
  "Efficient, large scale, parallel remote execution of commands",
);

/**
 * LV2 port of Autotalent pitch correction plugin
 */
export const talentedhack = mkPackage(
  nixRaw`pkgs.talentedhack`,
  "LV2 port of Autotalent pitch correction plugin",
);

        /**
         * Taler is an electronic payment system providing the ability to pay
anonymously using digital cash.  Taler consists of a network protocol
definition (using a RESTful API over HTTP), a Exchange (which creates
digital coins), a Wallet (which allows customers to manage, store and
spend digital coins), and a Merchant website which allows customers to
spend their digital coins.  Naturally, each Merchant is different, but
Taler includes code examples to help Merchants integrate Taler as a
payment system.

         */
export const taler_exchange = mkPackage(
  nixRaw`pkgs.taler-exchange`,
  "Taler is an electronic payment system providing the ability to pay\nanonymously using digital cash.  Taler consists of a network protocol\ndefinition (using a RESTful API over HTTP), a Exchange (which creates\ndigital coins), a Wallet (which allows customers to manage, store and\nspend digital coins), and a Merchant website which allows customers to\nspend their digital coins.  Naturally, each Merchant is different, but\nTaler includes code examples to help Merchants integrate Taler as a\npayment system.\n",
);

        /**
         * This is the GNU Taler merchant backend. It provides the logic that should run
at every GNU Taler merchant.  The GNU Taler merchant is a RESTful backend that
can be used to setup orders and process payments.  This component allows
merchants to receive payments without invading the customers' privacy. Of
course, this applies mostly for digital goods, as the merchant does not need
to know the customer's physical address.

         */
export const taler_merchant = mkPackage(
  nixRaw`pkgs.taler-merchant`,
  "This is the GNU Taler merchant backend. It provides the logic that should run\nat every GNU Taler merchant.  The GNU Taler merchant is a RESTful backend that\ncan be used to setup orders and process payments.  This component allows\nmerchants to receive payments without invading the customers' privacy. Of\ncourse, this applies mostly for digital goods, as the merchant does not need\nto know the customer's physical address.\n",
);

/**
 * Converts English text into text that mimics a stereotyped or humorous dialect
 */
export const talkfilters = mkPackage(
  nixRaw`pkgs.talkfilters`,
  "Converts English text into text that mimics a stereotyped or humorous dialect",
);

/**
 * Hierarchical pool based memory allocator with destructors
 */
export const talloc = mkPackage(
  nixRaw`pkgs.talloc`,
  "Hierarchical pool based memory allocator with destructors",
);

/**
 * A CLI for out-of-band management of Kubernetes nodes created by Talos
 */
export const talosctl = mkPackage(
  nixRaw`pkgs.talosctl`,
  "A CLI for out-of-band management of Kubernetes nodes created by Talos",
);

/**
 * Security protocol verification in the symbolic model
 */
export const tamarin_prover = mkPackage(
  nixRaw`pkgs.tamarin-prover`,
  "Security protocol verification in the symbolic model",
);

/**
 * A cross-platform Tamagotchi P1 explorer
 */
export const tamatool = mkPackage(
  nixRaw`pkgs.tamatool`,
  "A cross-platform Tamagotchi P1 explorer",
);

/**
 * A FAUST patch inspired by the Indian Tambura/Tanpura - a four string drone instrument, known for its unique rich harmonic timbre
 */
export const tambura = mkPackage(
  nixRaw`pkgs.tambura`,
  "A FAUST patch inspired by the Indian Tambura/Tanpura - a four string drone instrument, known for its unique rich harmonic timbre",
);

/**
 * A monospace bitmap font aimed at programmers
 */
export const tamsyn = mkPackage(
  nixRaw`pkgs.tamsyn`,
  "A monospace bitmap font aimed at programmers",
);

/**
 * Bitmapped programming font based on Tamsyn
 */
export const tamzen = mkPackage(
  nixRaw`pkgs.tamzen`,
  "Bitmapped programming font based on Tamsyn",
);

/**
 * A parameter-free algorithm for sequence alignment
 */
export const tandem_aligner = mkPackage(
  nixRaw`pkgs.tandem-aligner`,
  "A parameter-free algorithm for sequence alignment",
);

        /**
         * Application for managing recipes, planning meals, building shopping lists
and much much more!

         */
export const tandoor_recipes = mkPackage(
  nixRaw`pkgs.tandoor-recipes`,
  "Application for managing recipes, planning meals, building shopping lists\nand much much more!\n",
);

/**
 * Server for binding data to network presence
 */
export const tang = mkPackage(
  nixRaw`pkgs.tang`,
  "Server for binding data to network presence",
);

/**
 * A local command-line Japanese dictionary tool using yomichan's dictionary files
 */
export const tango = mkPackage(
  nixRaw`pkgs.tango`,
  "A local command-line Japanese dictionary tool using yomichan's dictionary files",
);

/**
 * A basic set of icons
 */
export const tango_icon_theme = mkPackage(
  nixRaw`pkgs.tango-icon-theme`,
  "A basic set of icons",
);

/**
 * Run web apps on your desktop
 */
export const tangram = mkPackage(
  nixRaw`pkgs.tangram`,
  "Run web apps on your desktop",
);

/**
 * CLI tool for managing and capturing video from DVRs which use the DVR-IP protocol
 */
export const tanidvr = mkPackage(
  nixRaw`pkgs.tanidvr`,
  "CLI tool for managing and capturing video from DVRs which use the DVR-IP protocol",
);

/**
 * Flexible, reusable and concise configuration for Kubernetes
 */
export const tanka = mkPackage(
  nixRaw`pkgs.tanka`,
  "Flexible, reusable and concise configuration for Kubernetes",
);

/**
 * The Tao of Unix Programming (Ruby-powered ANSI colored fortunes)
 */
export const taoup = mkPackage(
  nixRaw`pkgs.taoup`,
  "The Tao of Unix Programming (Ruby-powered ANSI colored fortunes)",
);

/**
 * Tom's Audio Processing plugins
 */
export const tap_plugins = mkPackage(
  nixRaw`pkgs.tap-plugins`,
  "Tom's Audio Processing plugins",
);

/**
 * A TOML toolkit written in Rust
 */
export const taplo = mkPackage(
  nixRaw`pkgs.taplo`,
  "A TOML toolkit written in Rust",
);

/**
 * Daemon for the Taro protocol specification
 */
export const taproot_assets = mkPackage(
  nixRaw`pkgs.taproot-assets`,
  "Daemon for the Taro protocol specification",
);

/**
 * A minimalist pure consumer for TAP (Test Anything Protocol)
 */
export const tapview = mkPackage(
  nixRaw`pkgs.tapview`,
  "A minimalist pure consumer for TAP (Test Anything Protocol)",
);

/**
 * Convert a tar archive to an ext4 image
 */
export const tar2ext4 = mkPackage(
  nixRaw`pkgs.tar2ext4`,
  "Convert a tar archive to an ext4 image",
);

/**
 * An in-memory computing platform consisting of a database and an application server
 */
export const tarantool = mkPackage(
  nixRaw`pkgs.tarantool`,
  "An in-memory computing platform consisting of a database and an application server",
);

/**
 * iSNS client for the Linux LIO iSCSI target
 */
export const target_isns = mkPackage(
  nixRaw`pkgs.target-isns`,
  "iSNS client for the Linux LIO iSCSI target",
);

/**
 * A command shell for managing the Linux LIO kernel target
 */
export const targetcli = mkPackage(
  nixRaw`pkgs.targetcli`,
  "A command shell for managing the Linux LIO kernel target",
);

/**
 * Massively parallel combined implementation of the tar archiver and the lzip compressor
 */
export const tarlz = mkPackage(
  nixRaw`pkgs.tarlz`,
  "Massively parallel combined implementation of the tar archiver and the lzip compressor",
);

/**
 * Resource compiler and asset manager for Roblox
 */
export const tarmac = mkPackage(
  nixRaw`pkgs.tarmac`,
  "Resource compiler and asset manager for Roblox",
);

/**
 * Online backups for the truly paranoid
 */
export const tarsnap = mkPackage(
  nixRaw`pkgs.tarsnap`,
  "Online backups for the truly paranoid",
);

/**
 * Wrapper which expires backups using a gfs-scheme
 */
export const tarsnapper = mkPackage(
  nixRaw`pkgs.tarsnapper`,
  "Wrapper which expires backups using a gfs-scheme",
);

/**
 * A simple SSH tarpit inspired by endlessh
 */
export const tarssh = mkPackage(
  nixRaw`pkgs.tarssh`,
  "A simple SSH tarpit inspired by endlessh",
);

export const tarsum = mkPackage(
  nixRaw`pkgs.tarsum`,
  "",
);

/**
 * macOS VMs on Apple Silicon to use in CI and other automations
 */
export const tart = mkPackage(
  nixRaw`pkgs.tart`,
  "macOS VMs on Apple Silicon to use in CI and other automations",
);

/**
 * Tools and Clang plugins for developing code with GLib
 */
export const tartan = mkPackage(
  nixRaw`pkgs.tartan`,
  "Tools and Clang plugins for developing code with GLib",
);

/**
 * A GUI front-end for youtube-dl
 */
export const tartube = mkPackage(
  nixRaw`pkgs.tartube`,
  "A GUI front-end for youtube-dl",
);

/**
 * A GUI front-end for youtube-dl
 */
export const tartube_yt_dlp = mkPackage(
  nixRaw`pkgs.tartube-yt-dlp`,
  "A GUI front-end for youtube-dl",
);

/**
 * A cli-calculator written in Rust
 */
export const taschenrechner = mkPackage(
  nixRaw`pkgs.taschenrechner`,
  "A cli-calculator written in Rust",
);

/**
 * A command-line kanban board/task manager
 */
export const taskell = mkPackage(
  nixRaw`pkgs.taskell`,
  "A command-line kanban board/task manager",
);

/**
 * General-purpose Parallel and Heterogeneous Task Programming System
 */
export const taskflow = mkPackage(
  nixRaw`pkgs.taskflow`,
  "General-purpose Parallel and Heterogeneous Task Programming System",
);

/**
 * A modern and powerful project management tool
 */
export const taskjuggler = mkPackage(
  nixRaw`pkgs.taskjuggler`,
  "A modern and powerful project management tool",
);

/**
 * A ncurses wrapper around taskwarrior
 */
export const tasknc = mkPackage(
  nixRaw`pkgs.tasknc`,
  "A ncurses wrapper around taskwarrior",
);

/**
 * Script for taking notes and open urls with taskwarrior
 */
export const taskopen = mkPackage(
  nixRaw`pkgs.taskopen`,
  "Script for taking notes and open urls with taskwarrior",
);

/**
 * Server for synchronising Taskwarrior clients
 */
export const taskserver = mkPackage(
  nixRaw`pkgs.taskserver`,
  "Server for synchronising Taskwarrior clients",
);

/**
 * REPL for taskwarrior
 */
export const tasksh = mkPackage(
  nixRaw`pkgs.tasksh`,
  "REPL for taskwarrior",
);

/**
 * Simple single node task scheduler
 */
export const taskspooler = mkPackage(
  nixRaw`pkgs.taskspooler`,
  "Simple single node task scheduler",
);

/**
 * Task Timer (tt) is a dead simple TUI task timer
 */
export const tasktimer = mkPackage(
  nixRaw`pkgs.tasktimer`,
  "Task Timer (tt) is a dead simple TUI task timer",
);

/**
 * Highly flexible command-line tool to manage TODO lists
 */
export const taskwarrior = mkPackage(
  nixRaw`pkgs.taskwarrior`,
  "Highly flexible command-line tool to manage TODO lists",
);

/**
 * A terminal user interface for taskwarrior 
 */
export const taskwarrior_tui = mkPackage(
  nixRaw`pkgs.taskwarrior-tui`,
  "A terminal user interface for taskwarrior ",
);

/**
 * The GTK icon theme for tauOS
 */
export const tau_hydrogen = mkPackage(
  nixRaw`pkgs.tau-hydrogen`,
  "The GTK icon theme for tauOS",
);

/**
 * The Linux desktop music player from the future
 */
export const tauon = mkPackage(
  nixRaw`pkgs.tauon`,
  "The Linux desktop music player from the future",
);

/**
 * A Python based monitoring and tracking tool for Plex Media Server
 */
export const tautulli = mkPackage(
  nixRaw`pkgs.tautulli`,
  "A Python based monitoring and tracking tool for Plex Media Server",
);

/**
 * The FTP Client that drives you anywhere
 */
export const taxi = mkPackage(
  nixRaw`pkgs.taxi`,
  "The FTP Client that drives you anywhere",
);

/**
 * Timesheeting made easy
 */
export const taxi_cli = mkPackage(
  nixRaw`pkgs.taxi-cli`,
  "Timesheeting made easy",
);

/**
 * Userland stateless NAT64 daemon
 */
export const tayga = mkPackage(
  nixRaw`pkgs.tayga`,
  "Userland stateless NAT64 daemon",
);

/**
 * Intel Thread Building Blocks C++ Library
 */
export const tbb = mkPackage(
  nixRaw`pkgs.tbb`,
  "Intel Thread Building Blocks C++ Library",
);

/**
 * Intel Thread Building Blocks C++ Library
 */
export const tbb_2020_3 = mkPackage(
  nixRaw`pkgs.tbb_2020_3`,
  "Intel Thread Building Blocks C++ Library",
);

/**
 * Intel Thread Building Blocks C++ Library
 */
export const tbb_2021_8 = mkPackage(
  nixRaw`pkgs.tbb_2021_8`,
  "Intel Thread Building Blocks C++ Library",
);

/**
 * A physics-based game vaguely similar to Incredible Machine
 */
export const tbe = mkPackage(
  nixRaw`pkgs.tbe`,
  "A physics-based game vaguely similar to Incredible Machine",
);

/**
 * Light-weight tight-binding framework
 */
export const tblite = mkPackage(
  nixRaw`pkgs.tblite`,
  "Light-weight tight-binding framework",
);

/**
 * A tool to generate documentation based on a database structure
 */
export const tbls = mkPackage(
  nixRaw`pkgs.tbls`,
  "A tool to generate documentation based on a database structure",
);

/**
 * A pre-kernel/VMM module that uses Intel(R) TXT to perform a measured and verified launch of an OS kernel/VMM
 */
export const tboot = mkPackage(
  nixRaw`pkgs.tboot`,
  "A pre-kernel/VMM module that uses Intel(R) TXT to perform a measured and verified launch of an OS kernel/VMM",
);

/**
 * A glib-like multi-platform c library
 */
export const tbox = mkPackage(
  nixRaw`pkgs.tbox`,
  "A glib-like multi-platform c library",
);

/**
 * Table cat
 */
export const tcat = mkPackage(
  nixRaw`pkgs.tcat`,
  "Table cat",
);

/**
 * Alternative password shadowing scheme
 */
export const tcb = mkPackage(
  nixRaw`pkgs.tcb`,
  "Alternative password shadowing scheme",
);

/**
 * The Tcl scripting language
 */
export const tcl = mkPackage(
  nixRaw`pkgs.tcl`,
  "The Tcl scripting language",
);

/**
 * The game of 2048 implemented in Tcl
 */
export const tcl2048 = mkPackage(
  nixRaw`pkgs.tcl2048`,
  "The game of 2048 implemented in Tcl",
);

/**
 * The Tcl scripting language
 */
export const tcl_8_5 = mkPackage(
  nixRaw`pkgs.tcl-8_5`,
  "The Tcl scripting language",
);

/**
 * The Tcl scripting language
 */
export const tcl_8_6 = mkPackage(
  nixRaw`pkgs.tcl-8_6`,
  "The Tcl scripting language",
);

/**
 * Tcl interface for the FastCGI protocol
 */
export const tcl_fcgi = mkPackage(
  nixRaw`pkgs.tcl-fcgi`,
  "Tcl interface for the FastCGI protocol",
);

/**
 * Templatized C++ Command Line Parser Library
 */
export const tclap = mkPackage(
  nixRaw`pkgs.tclap`,
  "Templatized C++ Command Line Parser Library",
);

/**
 * Templatized C++ Command Line Parser Library
 */
export const tclap_1_2 = mkPackage(
  nixRaw`pkgs.tclap_1_2`,
  "Templatized C++ Command Line Parser Library",
);

/**
 * Templatized C++ Command Line Parser Library (v1.4)
 */
export const tclap_1_4 = mkPackage(
  nixRaw`pkgs.tclap_1_4`,
  "Templatized C++ Command Line Parser Library (v1.4)",
);

/**
 * Tcl-only library of standard routines for Tcl
 */
export const tcllib = mkPackage(
  nixRaw`pkgs.tcllib`,
  "Tcl-only library of standard routines for Tcl",
);

/**
 * GNU readline for interactive tcl shells
 */
export const tclreadline = mkPackage(
  nixRaw`pkgs.tclreadline`,
  "GNU readline for interactive tcl shells",
);

/**
 * An OpenSSL / RSA-bsafe Tcl extension
 */
export const tcltls = mkPackage(
  nixRaw`pkgs.tcltls`,
  "An OpenSSL / RSA-bsafe Tcl extension",
);

/**
 * Tcl extensions
 */
export const tclx = mkPackage(
  nixRaw`pkgs.tclx`,
  "Tcl extensions",
);

/**
 * TCP/IP Connection cutting on Linux Firewalls and Routers
 */
export const tcp_cutter = mkPackage(
  nixRaw`pkgs.tcp-cutter`,
  "TCP/IP Connection cutting on Linux Firewalls and Routers",
);

/**
 * TCP Wrappers, a network logger, also known as TCPD or LOG_TCP
 */
export const tcp_wrappers = mkPackage(
  nixRaw`pkgs.tcp_wrappers`,
  "TCP Wrappers, a network logger, also known as TCPD or LOG_TCP",
);

/**
 * Fast TCP encryption
 */
export const tcpcrypt = mkPackage(
  nixRaw`pkgs.tcpcrypt`,
  "Fast TCP encryption",
);

/**
 * Network sniffer
 */
export const tcpdump = mkPackage(
  nixRaw`pkgs.tcpdump`,
  "Network sniffer",
);

/**
 * TCP stream extractor
 */
export const tcpflow = mkPackage(
  nixRaw`pkgs.tcpflow`,
  "TCP stream extractor",
);

/**
 * Ping over TCP instead of ICMP, written in Go
 */
export const tcping_go = mkPackage(
  nixRaw`pkgs.tcping-go`,
  "Ping over TCP instead of ICMP, written in Go",
);

/**
 * High performance TCP and WebSocket load generator and sink
 */
export const tcpkali = mkPackage(
  nixRaw`pkgs.tcpkali`,
  "High performance TCP and WebSocket load generator and sink",
);

/**
 * A suite of utilities for editing and replaying network traffic
 */
export const tcpreplay = mkPackage(
  nixRaw`pkgs.tcpreplay`,
  "A suite of utilities for editing and replaying network traffic",
);

/**
 * A traceroute implementation using TCP packets
 */
export const tcptraceroute = mkPackage(
  nixRaw`pkgs.tcptraceroute`,
  "A traceroute implementation using TCP packets",
);

/**
 * libpcap based program for live TCP connection monitoring
 */
export const tcptrack = mkPackage(
  nixRaw`pkgs.tcptrack`,
  "libpcap based program for live TCP connection monitoring",
);

/**
 * An enhanced version of the Berkeley UNIX C shell (csh)
 */
export const tcsh = mkPackage(
  nixRaw`pkgs.tcsh`,
  "An enhanced version of the Berkeley UNIX C shell (csh)",
);

/**
 * CLI to manage data on Treasure Data, the Hadoop-based cloud data warehousing
 */
export const td = mkPackage(
  nixRaw`pkgs.td`,
  "CLI to manage data on Treasure Data, the Hadoop-based cloud data warehousing",
);

/**
 * The trivial database
 */
export const tdb = mkPackage(
  nixRaw`pkgs.tdb`,
  "The trivial database",
);

/**
 * TheDraw font parser and console text renderer.
 */
export const tdfgo = mkPackage(
  nixRaw`pkgs.tdfgo`,
  "TheDraw font parser and console text renderer.",
);

/**
 * Cross-platform library for building Telegram clients
 */
export const tdlib = mkPackage(
  nixRaw`pkgs.tdlib`,
  "Cross-platform library for building Telegram clients",
);

/**
 * DNS tool that aims to replace dig and nsupdate
 */
export const tdns_cli = mkPackage(
  nixRaw`pkgs.tdns-cli`,
  "DNS tool that aims to replace dig and nsupdate",
);

/**
 * A Glorified WM-Independent Dropdown Creator
 */
export const tdrop = mkPackage(
  nixRaw`pkgs.tdrop`,
  "A Glorified WM-Independent Dropdown Creator",
);

/**
 * Gitea official CLI client
 */
export const tea = mkPackage(
  nixRaw`pkgs.tea`,
  "Gitea official CLI client",
);

/**
 * A very fast implementation of tldr in Rust
 */
export const tealdeer = mkPackage(
  nixRaw`pkgs.tealdeer`,
  "A very fast implementation of tldr in Rust",
);

/**
 * A simple tool used to automatically create windows and panes in tmux with YAML files
 */
export const teamocil = mkPackage(
  nixRaw`pkgs.teamocil`,
  "A simple tool used to automatically create windows and panes in tmux with YAML files",
);

/**
 * Unofficial Microsoft Teams client for Linux
 */
export const teams_for_linux = mkPackage(
  nixRaw`pkgs.teams-for-linux`,
  "Unofficial Microsoft Teams client for Linux",
);

/**
 * The TeamSpeak voice communication tool (beta version)
 */
export const teamspeak5_client = mkPackage(
  nixRaw`pkgs.teamspeak5_client`,
  "The TeamSpeak voice communication tool (beta version)",
);

/**
 * The TeamSpeak voice communication tool
 */
export const teamspeak_client = mkPackage(
  nixRaw`pkgs.teamspeak_client`,
  "The TeamSpeak voice communication tool",
);

/**
 * TeamSpeak voice communication server
 */
export const teamspeak_server = mkPackage(
  nixRaw`pkgs.teamspeak_server`,
  "TeamSpeak voice communication server",
);

/**
 * Desktop sharing application, providing remote support and online meetings
 */
export const teamviewer = mkPackage(
  nixRaw`pkgs.teamviewer`,
  "Desktop sharing application, providing remote support and online meetings",
);

/**
 * Table Editor And Planner, Or: Teapot
 */
export const teapot = mkPackage(
  nixRaw`pkgs.teapot`,
  "Table Editor And Planner, Or: Teapot",
);

/**
 * An open source VPN Software
 */
export const teavpn2 = mkPackage(
  nixRaw`pkgs.teavpn2`,
  "An open source VPN Software",
);

/**
 * Find and characterise transposable element insertions
 */
export const tebreak = mkPackage(
  nixRaw`pkgs.tebreak`,
  "Find and characterise transposable element insertions",
);

/**
 * Programmer for TECK keyboards.
 */
export const teck_programmer = mkPackage(
  nixRaw`pkgs.teck-programmer`,
  "Programmer for TECK keyboards.",
);

/**
 * udev rules for TECK keyboards
 */
export const teck_udev_rules = mkPackage(
  nixRaw`pkgs.teck-udev-rules`,
  "udev rules for TECK keyboards",
);

/**
 * Command-line editing library
 */
export const tecla = mkPackage(
  nixRaw`pkgs.tecla`,
  "Command-line editing library",
);

/**
 * A brick breaker game with a sophisticated system of weapons and bonuses
 */
export const tecnoballz = mkPackage(
  nixRaw`pkgs.tecnoballz`,
  "A brick breaker game with a sophisticated system of weapons and bonuses",
);

/**
 * A clone of the good old TECO editor
 */
export const tecoc = mkPackage(
  nixRaw`pkgs.tecoc`,
  "A clone of the good old TECO editor",
);

/**
 * Modernized, complete, self-contained TeX/LaTeX engine, powered by XeTeX and TeXLive
 */
export const tectonic = mkPackage(
  nixRaw`pkgs.tectonic`,
  "Modernized, complete, self-contained TeX/LaTeX engine, powered by XeTeX and TeXLive",
);

/**
 * An easy rich text processor
 */
export const ted = mkPackage(
  nixRaw`pkgs.ted`,
  "An easy rich text processor",
);

/**
 * A modal terminal hex editor
 */
export const teehee = mkPackage(
  nixRaw`pkgs.teehee`,
  "A modal terminal hex editor",
);

/**
 * CMake macros for building teensy projects
 */
export const teensy_cmake_macros = mkPackage(
  nixRaw`pkgs.teensy-cmake-macros`,
  "CMake macros for building teensy projects",
);

/**
 * Firmware uploader for the Teensy microcontroller boards
 */
export const teensy_loader_cli = mkPackage(
  nixRaw`pkgs.teensy-loader-cli`,
  "Firmware uploader for the Teensy microcontroller boards",
);

        /**
         * udev rules that give non-root users permission to communicate with the
Teensy family of microcontrolers.

ModemManager (part of NetworkManager) can interfere with USB Serial
devices, which includes the Teensy.  See comments in the .rules file (or
this package's homepage) for possible workarounds.

         */
export const teensy_udev_rules = mkPackage(
  nixRaw`pkgs.teensy-udev-rules`,
  "udev rules that give non-root users permission to communicate with the\nTeensy family of microcontrolers.\n\nModemManager (part of NetworkManager) can interfere with USB Serial\ndevices, which includes the Teensy.  See comments in the .rules file (or\nthis package's homepage) for possible workarounds.\n",
);

/**
 * Open-source electronics prototyping platform
 */
export const teensyduino = mkPackage(
  nixRaw`pkgs.teensyduino`,
  "Open-source electronics prototyping platform",
);

/**
 * Simple shooting game with your cannon is sitting atop a teeter totter
 */
export const teetertorture = mkPackage(
  nixRaw`pkgs.teetertorture`,
  "Simple shooting game with your cannon is sitting atop a teeter totter",
);

/**
 * Retro multiplayer shooter game
 */
export const teeworlds = mkPackage(
  nixRaw`pkgs.teeworlds`,
  "Retro multiplayer shooter game",
);

/**
 * Japanese handwriting model for the Zinnia engine
 */
export const tegaki_zinnia_japanese = mkPackage(
  nixRaw`pkgs.tegaki-zinnia-japanese`,
  "Japanese handwriting model for the Zinnia engine",
);

/**
 * Mapbox Vector Tile server
 */
export const tegola = mkPackage(
  nixRaw`pkgs.tegola`,
  "Mapbox Vector Tile server",
);

/**
 * A tool to bypass a partial range of standard input to any command
 */
export const teip = mkPackage(
  nixRaw`pkgs.teip`,
  "A tool to bypass a partial range of standard input to any command",
);

/**
 * Provides a CLI for interacting with Tekton - tkn
 */
export const tektoncd_cli = mkPackage(
  nixRaw`pkgs.tektoncd-cli`,
  "Provides a CLI for interacting with Tekton - tkn",
);

/**
 * Flat and colorful personality icon theme
 */
export const tela_circle_icon_theme = mkPackage(
  nixRaw`pkgs.tela-circle-icon-theme`,
  "Flat and colorful personality icon theme",
);

/**
 * A flat colorful Design icon theme
 */
export const tela_icon_theme = mkPackage(
  nixRaw`pkgs.tela-icon-theme`,
  "A flat colorful Design icon theme",
);

/**
 * The plugin-driven server agent for collecting & reporting metrics
 */
export const telegraf = mkPackage(
  nixRaw`pkgs.telegraf`,
  "The plugin-driven server agent for collecting & reporting metrics",
);

/**
 * Telegram Bot API server
 */
export const telegram_bot_api = mkPackage(
  nixRaw`pkgs.telegram-bot-api`,
  "Telegram Bot API server",
);

/**
 * Telegram Desktop messaging app
 */
export const telegram_desktop = mkPackage(
  nixRaw`pkgs.telegram-desktop`,
  "Telegram Desktop messaging app",
);

/**
 * GObject-based C library that uses Telepathy GLib, Farstream and GStreamer to handle the media streaming part of channels of type Call
 */
export const telepathy_farstream = mkPackage(
  nixRaw`pkgs.telepathy-farstream`,
  "GObject-based C library that uses Telepathy GLib, Farstream and GStreamer to handle the media streaming part of channels of type Call",
);

/**
 * Jabber/XMPP connection manager for the Telepathy framework
 */
export const telepathy_gabble = mkPackage(
  nixRaw`pkgs.telepathy-gabble`,
  "Jabber/XMPP connection manager for the Telepathy framework",
);

export const telepathy_glib = mkPackage(
  nixRaw`pkgs.telepathy-glib`,
  "",
);

/**
 * A Telepathy connection manager based on libpurple
 */
export const telepathy_haze = mkPackage(
  nixRaw`pkgs.telepathy-haze`,
  "A Telepathy connection manager based on libpurple",
);

/**
 * IRC connection manager for the Telepathy framework
 */
export const telepathy_idle = mkPackage(
  nixRaw`pkgs.telepathy-idle`,
  "IRC connection manager for the Telepathy framework",
);

/**
 * Logger service for Telepathy framework
 */
export const telepathy_logger = mkPackage(
  nixRaw`pkgs.telepathy-logger`,
  "Logger service for Telepathy framework",
);

/**
 * An account manager and channel dispatcher for the Telepathy framework
 */
export const telepathy_mission_control = mkPackage(
  nixRaw`pkgs.telepathy-mission-control`,
  "An account manager and channel dispatcher for the Telepathy framework",
);

/**
 * Certificate authority and access plane for SSH, Kubernetes, web applications, and databases
 */
export const teleport = mkPackage(
  nixRaw`pkgs.teleport`,
  "Certificate authority and access plane for SSH, Kubernetes, web applications, and databases",
);

/**
 * Certificate authority and access plane for SSH, Kubernetes, web applications, and databases
 */
export const teleport_11 = mkPackage(
  nixRaw`pkgs.teleport_11`,
  "Certificate authority and access plane for SSH, Kubernetes, web applications, and databases",
);

/**
 * Certificate authority and access plane for SSH, Kubernetes, web applications, and databases
 */
export const teleport_12 = mkPackage(
  nixRaw`pkgs.teleport_12`,
  "Certificate authority and access plane for SSH, Kubernetes, web applications, and databases",
);

/**
 * Certificate authority and access plane for SSH, Kubernetes, web applications, and databases
 */
export const teleport_13 = mkPackage(
  nixRaw`pkgs.teleport_13`,
  "Certificate authority and access plane for SSH, Kubernetes, web applications, and databases",
);

/**
 * Certificate authority and access plane for SSH, Kubernetes, web applications, and databases
 */
export const teleport_14 = mkPackage(
  nixRaw`pkgs.teleport_14`,
  "Certificate authority and access plane for SSH, Kubernetes, web applications, and databases",
);

/**
 * Local development against a remote Kubernetes or OpenShift cluster
 */
export const telepresence = mkPackage(
  nixRaw`pkgs.telepresence`,
  "Local development against a remote Kubernetes or OpenShift cluster",
);

/**
 * Local development against a remote Kubernetes or OpenShift cluster
 */
export const telepresence2 = mkPackage(
  nixRaw`pkgs.telepresence2`,
  "Local development against a remote Kubernetes or OpenShift cluster",
);

/**
 * The most complete, free, teleprompter app on the web
 */
export const teleprompter = mkPackage(
  nixRaw`pkgs.teleprompter`,
  "The most complete, free, teleprompter app on the web",
);

/**
 * Real-time HTTP Intrusion Detection
 */
export const teler = mkPackage(
  nixRaw`pkgs.teler`,
  "Real-time HTTP Intrusion Detection",
);

/**
 * Telescope is a w3m-like browser for Gemini
 */
export const telescope = mkPackage(
  nixRaw`pkgs.telescope`,
  "Telescope is a w3m-like browser for Gemini",
);

/**
 * Tools to find secrets from various signatures
 */
export const tell_me_your_secrets = mkPackage(
  nixRaw`pkgs.tell-me-your-secrets`,
  "Tools to find secrets from various signatures",
);

/**
 * Cloud native secrets management for developers
 */
export const teller = mkPackage(
  nixRaw`pkgs.teller`,
  "Cloud native secrets management for developers",
);

/**
 * Collection management software, free and simple
 */
export const tellico = mkPackage(
  nixRaw`pkgs.tellico`,
  "Collection management software, free and simple",
);

/**
 * A library for template expansion which supports calling into GObject Introspection from templates
 */
export const template_glib = mkPackage(
  nixRaw`pkgs.template-glib`,
  "A library for template expansion which supports calling into GObject Introspection from templates",
);

/**
 * A high volume, minimal dependency trace storage
 */
export const tempo = mkPackage(
  nixRaw`pkgs.tempo`,
  "A high volume, minimal dependency trace storage",
);

/**
 * Tempora font
 */
export const tempora_lgc = mkPackage(
  nixRaw`pkgs.tempora_lgc`,
  "Tempora font",
);

/**
 * A microservice orchestration platform which enables developers to build scalable applications without sacrificing productivity or reliability
 */
export const temporal = mkPackage(
  nixRaw`pkgs.temporal`,
  "A microservice orchestration platform which enables developers to build scalable applications without sacrificing productivity or reliability",
);

/**
 * Command-line interface for running Temporal Server and interacting with Workflows, Activities, Namespaces, and other parts of Temporal
 */
export const temporal_cli = mkPackage(
  nixRaw`pkgs.temporal-cli`,
  "Command-line interface for running Temporal Server and interacting with Workflows, Activities, Namespaces, and other parts of Temporal",
);

/**
 * An experimental distribution of Temporal that runs as a single process
 */
export const temporalite = mkPackage(
  nixRaw`pkgs.temporalite`,
  "An experimental distribution of Temporal that runs as a single process",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_bin = mkPackage(
  nixRaw`pkgs.temurin-bin`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_bin_11 = mkPackage(
  nixRaw`pkgs.temurin-bin-11`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_bin_16 = mkPackage(
  nixRaw`pkgs.temurin-bin-16`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_bin_17 = mkPackage(
  nixRaw`pkgs.temurin-bin-17`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_bin_18 = mkPackage(
  nixRaw`pkgs.temurin-bin-18`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_bin_19 = mkPackage(
  nixRaw`pkgs.temurin-bin-19`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_bin_20 = mkPackage(
  nixRaw`pkgs.temurin-bin-20`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_bin_8 = mkPackage(
  nixRaw`pkgs.temurin-bin-8`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_jre_bin = mkPackage(
  nixRaw`pkgs.temurin-jre-bin`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_jre_bin_11 = mkPackage(
  nixRaw`pkgs.temurin-jre-bin-11`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_jre_bin_17 = mkPackage(
  nixRaw`pkgs.temurin-jre-bin-17`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_jre_bin_18 = mkPackage(
  nixRaw`pkgs.temurin-jre-bin-18`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_jre_bin_19 = mkPackage(
  nixRaw`pkgs.temurin-jre-bin-19`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_jre_bin_20 = mkPackage(
  nixRaw`pkgs.temurin-jre-bin-20`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Eclipse Temurin, prebuilt OpenJDK binary
 */
export const temurin_jre_bin_8 = mkPackage(
  nixRaw`pkgs.temurin-jre-bin-8`,
  "Eclipse Temurin, prebuilt OpenJDK binary",
);

/**
 * Sound editor with graphical UI
 */
export const tenacity = mkPackage(
  nixRaw`pkgs.tenacity`,
  "Sound editor with graphical UI",
);

/**
 * Byzantine-Fault Tolerant State Machines. Or Blockchain, for short
 */
export const tendermint = mkPackage(
  nixRaw`pkgs.tendermint`,
  "Byzantine-Fault Tolerant State Machines. Or Blockchain, for short",
);

/**
 * Serif font designed by Sora Sagano with old-style figures
 */
export const tenderness = mkPackage(
  nixRaw`pkgs.tenderness`,
  "Serif font designed by Sora Sagano with old-style figures",
);

/**
 * A web server based on Nginx and has many advanced features, originated by Taobao
 */
export const tengine = mkPackage(
  nixRaw`pkgs.tengine`,
  "A web server based on Nginx and has many advanced features, originated by Taobao",
);

/**
 * Classic Championship Tour 2011
 */
export const tennix = mkPackage(
  nixRaw`pkgs.tennix`,
  "Classic Championship Tour 2011",
);

/**
 * Cross-platform Qt5/QML-based Matrix client
 */
export const tensor = mkPackage(
  nixRaw`pkgs.tensor`,
  "Cross-platform Qt5/QML-based Matrix client",
);

/**
 * An open source deep learning framework for on-device inference.
 */
export const tensorflow_lite = mkPackage(
  nixRaw`pkgs.tensorflow-lite`,
  "An open source deep learning framework for on-device inference.",
);

/**
 * Utility for easy management of Tensorflow containers
 */
export const tensorman = mkPackage(
  nixRaw`pkgs.tensorman`,
  "Utility for easy management of Tensorflow containers",
);

/**
 * A Lightning watchtower compliant with BOLT13, written in Rust
 */
export const teos = mkPackage(
  nixRaw`pkgs.teos`,
  "A Lightning watchtower compliant with BOLT13, written in Rust",
);

/**
 * A Lightning watchtower plugin for clightning
 */
export const teos_watchtower_plugin = mkPackage(
  nixRaw`pkgs.teos-watchtower-plugin`,
  "A Lightning watchtower plugin for clightning",
);

/**
 * Text editor product line
 */
export const tepl = mkPackage(
  nixRaw`pkgs.tepl`,
  "Text editor product line",
);

/**
 * A faster alternative to cd + ls
 */
export const tere = mkPackage(
  nixRaw`pkgs.tere`,
  "A faster alternative to cd + ls",
);

/**
 * A runner for `mdbooks` to keep your documentation tested
 */
export const termbook = mkPackage(
  nixRaw`pkgs.termbook`,
  "A runner for `mdbooks` to keep your documentation tested",
);

/**
 * Library for writing text-based user interfaces
 */
export const termbox = mkPackage(
  nixRaw`pkgs.termbox`,
  "Library for writing text-based user interfaces",
);

/**
 * Header-only C++ library for printing colored messages
 */
export const termcolor = mkPackage(
  nixRaw`pkgs.termcolor`,
  "Header-only C++ library for printing colored messages",
);

/**
 * A TUI for viewing and editing database files
 */
export const termdbms = mkPackage(
  nixRaw`pkgs.termdbms`,
  "A TUI for viewing and editing database files",
);

/**
 * Starts a countdown to or from TIMESPEC
 */
export const termdown = mkPackage(
  nixRaw`pkgs.termdown`,
  "Starts a countdown to or from TIMESPEC",
);

/**
 * Display images in your terminal
 */
export const termimage = mkPackage(
  nixRaw`pkgs.termimage`,
  "Display images in your terminal",
);

/**
 * Script displaying terminal colors in various formats
 */
export const terminal_colors = mkPackage(
  nixRaw`pkgs.terminal-colors`,
  "Script displaying terminal colors in various formats",
);

export const terminal_notifier = mkPackage(
  nixRaw`pkgs.terminal-notifier`,
  "",
);

/**
 * Shows colorful, animated party parrot in your terminial
 */
export const terminal_parrot = mkPackage(
  nixRaw`pkgs.terminal-parrot`,
  "Shows colorful, animated party parrot in your terminial",
);

/**
 * Terminal based application that provides stock price information
 */
export const terminal_stocks = mkPackage(
  nixRaw`pkgs.terminal-stocks`,
  "Terminal based application that provides stock price information",
);

/**
 * An open source terminal based version of Typeracer written in rust
 */
export const terminal_typeracer = mkPackage(
  nixRaw`pkgs.terminal-typeracer`,
  "An open source terminal based version of Typeracer written in rust",
);

/**
 * Terminal emulator with support for tiling and tabs
 */
export const terminator = mkPackage(
  nixRaw`pkgs.terminator`,
  "Terminal emulator with support for tiling and tabs",
);

/**
 * A clean fixed width font
 */
export const terminus_font = mkPackage(
  nixRaw`pkgs.terminus_font`,
  "A clean fixed width font",
);

/**
 * A clean fixed width TTF font
 */
export const terminus_font_ttf = mkPackage(
  nixRaw`pkgs.terminus_font_ttf`,
  "A clean fixed width TTF font",
);

/**
 * Iconic font aggregator, collection, & patcher. 3,600+ icons, 50+ patched fonts
 */
export const terminus_nerdfont = mkPackage(
  nixRaw`pkgs.terminus-nerdfont`,
  "Iconic font aggregator, collection, & patcher. 3,600+ icons, 50+ patched fonts",
);

/**
 * A simple VTE-based terminal
 */
export const termite = mkPackage(
  nixRaw`pkgs.termite`,
  "A simple VTE-based terminal",
);

/**
 * A simple VTE-based terminal
 */
export const termite_unwrapped = mkPackage(
  nixRaw`pkgs.termite-unwrapped`,
  "A simple VTE-based terminal",
);

/**
 * A cross-platform SSH client with cloud data sync and more
 */
export const termius = mkPackage(
  nixRaw`pkgs.termius`,
  "A cross-platform SSH client with cloud data sync and more",
);

/**
 * Terminal emulator configurable in Haskell
 */
export const termonad = mkPackage(
  nixRaw`pkgs.termonad`,
  "Terminal emulator configurable in Haskell",
);

        /**
         * A graphical pdf (and epub, cbz, ...) reader that works
inside the kitty terminal.

         */
export const termpdfpy = mkPackage(
  nixRaw`pkgs.termpdfpy`,
  "A graphical pdf (and epub, cbz, ...) reader that works\ninside the kitty terminal.\n",
);

/**
 * Play an image/video in your terminal
 */
export const termplay = mkPackage(
  nixRaw`pkgs.termplay`,
  "Play an image/video in your terminal",
);

/**
 * A feature rich terminal UI file transfer and explorer with support for SCP/SFTP/FTP/S3/SMB
 */
export const termscp = mkPackage(
  nixRaw`pkgs.termscp`,
  "A feature rich terminal UI file transfer and explorer with support for SCP/SFTP/FTP/S3/SMB",
);

/**
 * A terminal UI for wireshark-cli, inspired by Wireshark
 */
export const termshark = mkPackage(
  nixRaw`pkgs.termshark`,
  "A terminal UI for wireshark-cli, inspired by Wireshark",
);

/**
 * Monospaced font based on terminus and tamsyn
 */
export const termsyn = mkPackage(
  nixRaw`pkgs.termsyn`,
  "Monospaced font based on terminus and tamsyn",
);

/**
 * Console NOS Teletekst viewer in Python
 */
export const termtekst = mkPackage(
  nixRaw`pkgs.termtekst`,
  "Console NOS Teletekst viewer in Python",
);

/**
 * Record terminal sessions as SVG animations
 */
export const termtosvg = mkPackage(
  nixRaw`pkgs.termtosvg`,
  "Record terminal sessions as SVG animations",
);

/**
 * Terminal Music Player TUI written in Rust
 */
export const termusic = mkPackage(
  nixRaw`pkgs.termusic`,
  "Terminal Music Player TUI written in Rust",
);

/**
 * A low-level counterpart to Lua
 */
export const terra = mkPackage(
  nixRaw`pkgs.terra`,
  "A low-level counterpart to Lua",
);

/**
 * Terra station is the official wallet of the Terra blockchain.
 */
export const terra_station = mkPackage(
  nixRaw`pkgs.terra-station`,
  "Terra station is the official wallet of the Terra blockchain.",
);

/**
 * Reads from existing Cloud Providers (reverse Terraform) and generates your infrastructure as code on Terraform configuration
 */
export const terracognita = mkPackage(
  nixRaw`pkgs.terracognita`,
  "Reads from existing Cloud Providers (reverse Terraform) and generates your infrastructure as code on Terraform configuration",
);

/**
 * Tool for building, changing, and versioning infrastructure
 */
export const terraform = mkPackage(
  nixRaw`pkgs.terraform`,
  "Tool for building, changing, and versioning infrastructure",
);

/**
 * Tool for building, changing, and versioning infrastructure
 */
export const terraform_1 = mkPackage(
  nixRaw`pkgs.terraform_1`,
  "Tool for building, changing, and versioning infrastructure",
);

/**
 * Terraform HTTP Backend implementation that uses Git repository as storage
 */
export const terraform_backend_git = mkPackage(
  nixRaw`pkgs.terraform-backend-git`,
  "Terraform HTTP Backend implementation that uses Git repository as storage",
);

/**
 * BDD test framework for terraform
 */
export const terraform_compliance = mkPackage(
  nixRaw`pkgs.terraform-compliance`,
  "BDD test framework for terraform",
);

/**
 * A utility to generate documentation from Terraform modules in various output formats
 */
export const terraform_docs = mkPackage(
  nixRaw`pkgs.terraform-docs`,
  "A utility to generate documentation from Terraform modules in various output formats",
);

/**
 * Terraform state to ansible inventory adapter
 */
export const terraform_inventory = mkPackage(
  nixRaw`pkgs.terraform-inventory`,
  "Terraform state to ansible inventory adapter",
);

/**
 * Improve Terraform's plan output to be easier to read and understand
 */
export const terraform_landscape = mkPackage(
  nixRaw`pkgs.terraform-landscape`,
  "Improve Terraform's plan output to be easier to read and understand",
);

/**
 * Terraform Language Server (official)
 */
export const terraform_ls = mkPackage(
  nixRaw`pkgs.terraform-ls`,
  "Terraform Language Server (official)",
);

/**
 * Language Server Protocol for Terraform
 */
export const terraform_lsp = mkPackage(
  nixRaw`pkgs.terraform-lsp`,
  "Language Server Protocol for Terraform",
);

export const terraform_plugins_test = mkPackage(
  nixRaw`pkgs.terraform_plugins_test`,
  "",
);

/**
 * CLI tool to generate terraform files from existing infrastructure (reverse Terraform). Infrastructure to Code
 */
export const terraformer = mkPackage(
  nixRaw`pkgs.terraformer`,
  "CLI tool to generate terraform files from existing infrastructure (reverse Terraform). Infrastructure to Code",
);

/**
 * Export existing AWS resources to Terraform style (tf, tfstate)
 */
export const terraforming = mkPackage(
  nixRaw`pkgs.terraforming`,
  "Export existing AWS resources to Terraform style (tf, tfstate)",
);

/**
 * A thin wrapper for Terraform that supports locking for Terraform state and enforces best practices
 */
export const terragrunt = mkPackage(
  nixRaw`pkgs.terragrunt`,
  "A thin wrapper for Terraform that supports locking for Terraform state and enforces best practices",
);

/**
 * Adds code generation, stacks, orchestration, change detection, data sharing and more to Terraform
 */
export const terramate = mkPackage(
  nixRaw`pkgs.terramate`,
  "Adds code generation, stacks, orchestration, change detection, data sharing and more to Terraform",
);

/**
 * A NixOS like terraform-json generator
 */
export const terranix = mkPackage(
  nixRaw`pkgs.terranix`,
  "A NixOS like terraform-json generator",
);

/**
 * Dedicated server for Terraria, a 2D action-adventure sandbox
 */
export const terraria_server = mkPackage(
  nixRaw`pkgs.terraria-server`,
  "Dedicated server for Terraria, a 2D action-adventure sandbox",
);

/**
 * Detect compliance and security violations across Infrastructure
 */
export const terrascan = mkPackage(
  nixRaw`pkgs.terrascan`,
  "Detect compliance and security violations across Infrastructure",
);

/**
 * Terraform framework that provides an organized structure, and keeps your code DRY
 */
export const terraspace = mkPackage(
  nixRaw`pkgs.terraspace`,
  "Terraform framework that provides an organized structure, and keeps your code DRY",
);

/**
 * JavaScript parser, mangler and compressor toolkit for ES6+
 */
export const terser = mkPackage(
  nixRaw`pkgs.terser`,
  "JavaScript parser, mangler and compressor toolkit for ES6+",
);

/**
 * A command line tool for examining and modifying plugins for the Elder Scrolls game Morrowind by Bethesda Softworks
 */
export const tes3cmd = mkPackage(
  nixRaw`pkgs.tes3cmd`,
  "A command line tool for examining and modifying plugins for the Elder Scrolls game Morrowind by Bethesda Softworks",
);

/**
 * Escape sequence illuminator
 */
export const teseq = mkPackage(
  nixRaw`pkgs.teseq`,
  "Escape sequence illuminator",
);

export const tesh = mkPackage(
  nixRaw`pkgs.tesh`,
  "",
);

/**
 * An interactive menu to autotype and copy Pass and GoPass data
 */
export const tessen = mkPackage(
  nixRaw`pkgs.tessen`,
  "An interactive menu to autotype and copy Pass and GoPass data",
);

/**
 * Enterprise Implementation of Quorum's transaction manager
 */
export const tessera = mkPackage(
  nixRaw`pkgs.tessera`,
  "Enterprise Implementation of Quorum's transaction manager",
);

/**
 * OCR engine
 */
export const tesseract = mkPackage(
  nixRaw`pkgs.tesseract`,
  "OCR engine",
);

/**
 * OCR engine
 */
export const tesseract3 = mkPackage(
  nixRaw`pkgs.tesseract3`,
  "OCR engine",
);

/**
 * OCR engine
 */
export const tesseract4 = mkPackage(
  nixRaw`pkgs.tesseract4`,
  "OCR engine",
);

/**
 * OCR engine
 */
export const tesseract5 = mkPackage(
  nixRaw`pkgs.tesseract5`,
  "OCR engine",
);

/**
 * Procedural Fortran testing framework
 */
export const test_drive = mkPackage(
  nixRaw`pkgs.test-drive`,
  "Procedural Fortran testing framework",
);

/**
 * Data recovery utilities
 */
export const testdisk = mkPackage(
  nixRaw`pkgs.testdisk`,
  "Data recovery utilities",
);

/**
 * Data recovery utilities
 */
export const testdisk_qt = mkPackage(
  nixRaw`pkgs.testdisk-qt`,
  "Data recovery utilities",
);

export const tests_stdenv_gcc_stageCompare = mkPackage(
  nixRaw`pkgs.tests-stdenv-gcc-stageCompare`,
  "",
);

/**
 * CLI tool to check a server's TLS/SSL capabilities
 */
export const testssl = mkPackage(
  nixRaw`pkgs.testssl`,
  "CLI tool to check a server's TLS/SSL capabilities",
);

/**
 * The Test Environment Toolkit is used in test applications like The Open Group's UNIX Certification program and the Free Standards Group's LSB Certification program
 */
export const tet = mkPackage(
  nixRaw`pkgs.tet`,
  "The Test Environment Toolkit is used in test applications like The Open Group's UNIX Certification program and the Free Standards Group's LSB Certification program",
);

/**
 * A full-featured (La)TeX distribution
 */
export const tetex = mkPackage(
  nixRaw`pkgs.tetex`,
  "A full-featured (La)TeX distribution",
);

/**
 * Quality Tetrahedral Mesh Generator and 3D Delaunay Triangulator
 */
export const tetgen = mkPackage(
  nixRaw`pkgs.tetgen`,
  "Quality Tetrahedral Mesh Generator and 3D Delaunay Triangulator",
);

/**
 * Quality Tetrahedral Mesh Generator and 3D Delaunay Triangulator
 */
export const tetgen_1_4 = mkPackage(
  nixRaw`pkgs.tetgen_1_4`,
  "Quality Tetrahedral Mesh Generator and 3D Delaunay Triangulator",
);

/**
 * Converts the A-format signals from a tetrahedral Ambisonic microphone into B-format signals ready for recording
 */
export const tetraproc = mkPackage(
  nixRaw`pkgs.tetraproc`,
  "Converts the A-format signals from a tetrahedral Ambisonic microphone into B-format signals ready for recording",
);

/**
 * Share your internet connection from your device to your PC and vice versa through a USB cable
 */
export const tetrd = mkPackage(
  nixRaw`pkgs.tetrd`,
  "Share your internet connection from your device to your PC and vice versa through a USB cable",
);

/**
 * TETR.IO desktop client
 */
export const tetrio_desktop = mkPackage(
  nixRaw`pkgs.tetrio-desktop`,
  "TETR.IO desktop client",
);

/**
 * A high dynamic range (HDR) image comparison tool
 */
export const tev = mkPackage(
  nixRaw`pkgs.tev`,
  "A high dynamic range (HDR) image comparison tool",
);

/**
 * An event system based on the talloc memory management library
 */
export const tevent = mkPackage(
  nixRaw`pkgs.tevent`,
  "An event system based on the talloc memory management library",
);

/**
 * A nice bitmap font, readable even at small sizes
 */
export const tewi_font = mkPackage(
  nixRaw`pkgs.tewi-font`,
  "A nice bitmap font, readable even at small sizes",
);

/**
 * Cowsay replacement with unicode and partial ansi escape support
 */
export const tewisay = mkPackage(
  nixRaw`pkgs.tewisay`,
  "Cowsay replacement with unicode and partial ansi escape support",
);

/**
 * Search through over 1000 different LaTeX symbols by sketching. A desktop version of detexify
 */
export const tex_match = mkPackage(
  nixRaw`pkgs.tex-match`,
  "Search through over 1000 different LaTeX symbols by sketching. A desktop version of detexify",
);

/**
 * Perl script which converts Texinfo source files to HTML output
 */
export const texi2html = mkPackage(
  nixRaw`pkgs.texi2html`,
  "Perl script which converts Texinfo source files to HTML output",
);

/**
 * converter from Texinfo into mdoc
 */
export const texi2mdoc = mkPackage(
  nixRaw`pkgs.texi2mdoc`,
  "converter from Texinfo into mdoc",
);

/**
 * The GNU documentation system
 */
export const texinfo = mkPackage(
  nixRaw`pkgs.texinfo`,
  "The GNU documentation system",
);

/**
 * The GNU documentation system
 */
export const texinfo4 = mkPackage(
  nixRaw`pkgs.texinfo4`,
  "The GNU documentation system",
);

/**
 * The GNU documentation system
 */
export const texinfo413 = mkPackage(
  nixRaw`pkgs.texinfo413`,
  "The GNU documentation system",
);

/**
 * The GNU documentation system
 */
export const texinfo5 = mkPackage(
  nixRaw`pkgs.texinfo5`,
  "The GNU documentation system",
);

/**
 * The GNU documentation system
 */
export const texinfo6 = mkPackage(
  nixRaw`pkgs.texinfo6`,
  "The GNU documentation system",
);

/**
 * The GNU documentation system
 */
export const texinfo6_5 = mkPackage(
  nixRaw`pkgs.texinfo6_5`,
  "The GNU documentation system",
);

/**
 * The GNU documentation system
 */
export const texinfo6_7 = mkPackage(
  nixRaw`pkgs.texinfo6_7`,
  "The GNU documentation system",
);

/**
 * The GNU documentation system
 */
export const texinfo7 = mkPackage(
  nixRaw`pkgs.texinfo7`,
  "The GNU documentation system",
);

/**
 * The GNU documentation system
 */
export const texinfoInteractive = mkPackage(
  nixRaw`pkgs.texinfoInteractive`,
  "The GNU documentation system",
);

/**
 * An implementation of the Language Server Protocol for LaTeX
 */
export const texlab = mkPackage(
  nixRaw`pkgs.texlab`,
  "An implementation of the Language Server Protocol for LaTeX",
);

/**
 * WYSIWYW editing platform with special features for scientists
 */
export const texmacs = mkPackage(
  nixRaw`pkgs.texmacs`,
  "WYSIWYW editing platform with special features for scientists",
);

/**
 * TeX and LaTeX editor
 */
export const texmaker = mkPackage(
  nixRaw`pkgs.texmaker`,
  "TeX and LaTeX editor",
);

/**
 * TeX and LaTeX editor
 */
export const texstudio = mkPackage(
  nixRaw`pkgs.texstudio`,
  "TeX and LaTeX editor",
);

/**
 * Rich text framework for GTK
 */
export const text_engine = mkPackage(
  nixRaw`pkgs.text-engine`,
  "Rich text framework for GTK",
);

/**
 * An extensible text editor based on Scintilla with Lua scripting.
 */
export const textadept = mkPackage(
  nixRaw`pkgs.textadept`,
  "An extensible text editor based on Scintilla with Lua scripting.",
);

/**
 * Aroania, Anaktoria, Alexander, Avdira and Asea
 */
export const textfonts = mkPackage(
  nixRaw`pkgs.textfonts`,
  "Aroania, Anaktoria, Alexander, Avdira and Asea",
);

/**
 * Terminal plotting written in Rust
 */
export const textplots = mkPackage(
  nixRaw`pkgs.textplots`,
  "Terminal plotting written in Rust",
);

/**
 * Execute SQL against structured text like CSV or TSV
 */
export const textql = mkPackage(
  nixRaw`pkgs.textql`,
  "Execute SQL against structured text like CSV or TSV",
);

/**
 * Copy Text from Images with ease, Perform OCR operations in seconds
 */
export const textsnatcher = mkPackage(
  nixRaw`pkgs.textsnatcher`,
  "Copy Text from Images with ease, Perform OCR operations in seconds",
);

/**
 * A TUI image editor inspired by MS Paint
 */
export const textual_paint = mkPackage(
  nixRaw`pkgs.textual-paint`,
  "A TUI image editor inspired by MS Paint",
);

/**
 * Example-based texture synthesis written in Rust
 */
export const texture_synthesis = mkPackage(
  nixRaw`pkgs.texture-synthesis`,
  "Example-based texture synthesis written in Rust",
);

/**
 * Simple TeX front-end program inspired by TeXShop
 */
export const texworks = mkPackage(
  nixRaw`pkgs.texworks`,
  "Simple TeX front-end program inspired by TeXShop",
);

/**
 * An efficient implementation of the Lambda Prolog language
 */
export const teyjus = mkPackage(
  nixRaw`pkgs.teyjus`,
  "An efficient implementation of the Lambda Prolog language",
);

export const tezos_rust_libs = mkPackage(
  nixRaw`pkgs.tezos-rust-libs`,
  "",
);

/**
 * Convert Terraform projects to Pulumi TypeScript programs
 */
export const tf2pulumi = mkPackage(
  nixRaw`pkgs.tf2pulumi`,
  "Convert Terraform projects to Pulumi TypeScript programs",
);

/**
 * Command-line utility to print the summary of the terraform plan
 */
export const tf_summarize = mkPackage(
  nixRaw`pkgs.tf-summarize`,
  "Command-line utility to print the summary of the terraform plan",
);

/**
 * When refactoring a Terraform codebase, you often need to write moved blocks. This can be tedious. Let tfautomv do it for you
 */
export const tfautomv = mkPackage(
  nixRaw`pkgs.tfautomv`,
  "When refactoring a Terraform codebase, you often need to write moved blocks. This can be tedious. Let tfautomv do it for you",
);

/**
 * An utility to convert Kubernetes YAML manifests to Terraform's HCL format
 */
export const tfk8s = mkPackage(
  nixRaw`pkgs.tfk8s`,
  "An utility to convert Kubernetes YAML manifests to Terraform's HCL format",
);

/**
 * Terraform linter focused on possible errors, best practices, and so on
 */
export const tflint = mkPackage(
  nixRaw`pkgs.tflint`,
  "Terraform linter focused on possible errors, best practices, and so on",
);

/**
 * Generate and validate Terraform plugin/provider documentation
 */
export const tfplugindocs = mkPackage(
  nixRaw`pkgs.tfplugindocs`,
  "Generate and validate Terraform plugin/provider documentation",
);

/**
 * Static analysis powered security scanner for terraform code
 */
export const tfsec = mkPackage(
  nixRaw`pkgs.tfsec`,
  "Static analysis powered security scanner for terraform code",
);

/**
 * A command line tool to switch between different versions of terraform
 */
export const tfswitch = mkPackage(
  nixRaw`pkgs.tfswitch`,
  "A command line tool to switch between different versions of terraform",
);

/**
 * TFTP tools - a lot of fixes on top of BSD TFTP
 */
export const tftp_hpa = mkPackage(
  nixRaw`pkgs.tftp-hpa`,
  "TFTP tools - a lot of fixes on top of BSD TFTP",
);

/**
 * Update version constraints in your Terraform configurations
 */
export const tfupdate = mkPackage(
  nixRaw`pkgs.tfupdate`,
  "Update version constraints in your Terraform configurations",
);

/**
 * Terminal client for telegram
 */
export const tg = mkPackage(
  nixRaw`pkgs.tg`,
  "Terminal client for telegram",
);

/**
 * ChatGPT in terminal without needing API keys
 */
export const tgpt = mkPackage(
  nixRaw`pkgs.tgpt`,
  "ChatGPT in terminal without needing API keys",
);

/**
 * Command line tool to switch between different versions of terragrunt
 */
export const tgswitch = mkPackage(
  nixRaw`pkgs.tgswitch`,
  "Command line tool to switch between different versions of terragrunt",
);

/**
 * iSCSI Target daemon with RDMA support
 */
export const tgt = mkPackage(
  nixRaw`pkgs.tgt`,
  "iSCSI Target daemon with RDMA support",
);

/**
 * Highly available Prometheus setup with long term storage capabilities
 */
export const thanos = mkPackage(
  nixRaw`pkgs.thanos`,
  "Highly available Prometheus setup with long term storage capabilities",
);

/**
 * A very fast network logon cracker which support many different services
 */
export const thc_hydra = mkPackage(
  nixRaw`pkgs.thc-hydra`,
  "A very fast network logon cracker which support many different services",
);

/**
 * IPv6 attack toolkit
 */
export const thc_ipv6 = mkPackage(
  nixRaw`pkgs.thc-ipv6`,
  "IPv6 attack toolkit",
);

/**
 * Opinionated C11 library for low-level functionality
 */
export const the_foundation = mkPackage(
  nixRaw`pkgs.the-foundation`,
  "Opinionated C11 library for low-level functionality",
);

/**
 * A 2D platform game with a persistent world
 */
export const the_legend_of_edgar = mkPackage(
  nixRaw`pkgs.the-legend-of-edgar`,
  "A 2D platform game with a persistent world",
);

/**
 * Tré Seals’ first open-source font, a typeface based on the Chicago Freedom Movement
 */
export const the_neue_black = mkPackage(
  nixRaw`pkgs.the-neue-black`,
  "Tré Seals’ first open-source font, a typeface based on the Chicago Freedom Movement",
);

/**
 * A free 2D physics sandbox game
 */
export const the_powder_toy = mkPackage(
  nixRaw`pkgs.the-powder-toy`,
  "A free 2D physics sandbox game",
);

/**
 * Terminal code snippets manager
 */
export const the_way = mkPackage(
  nixRaw`pkgs.the-way`,
  "Terminal code snippets manager",
);

/**
 * An old-style font designed from historic samples
 */
export const theano = mkPackage(
  nixRaw`pkgs.theano`,
  "An old-style font designed from historic samples",
);

/**
 * Mastodon/Misskey Client for PC
 */
export const thedesk = mkPackage(
  nixRaw`pkgs.thedesk`,
  "Mastodon/Misskey Client for PC",
);

/**
 * Modern "Jedi Engine" replacement supporting Dark Forces, mods, and in the future Outlaws.
 */
export const theforceengine = mkPackage(
  nixRaw`pkgs.theforceengine`,
  "Modern \"Jedi Engine\" replacement supporting Dark Forces, mods, and in the future Outlaws.",
);

/**
 * A C library for property-based testing
 */
export const theft = mkPackage(
  nixRaw`pkgs.theft`,
  "A C library for property-based testing",
);

/**
 * Magnificent app which corrects your previous console command
 */
export const thefuck = mkPackage(
  nixRaw`pkgs.thefuck`,
  "Magnificent app which corrects your previous console command",
);

/**
 * Gather E-mails, subdomains and names from different public sources
 */
export const theharvester = mkPackage(
  nixRaw`pkgs.theharvester`,
  "Gather E-mails, subdomains and names from different public sources",
);

/**
 * Modern, responsive, cross-platform, self-hosted web IRC client
 */
export const thelounge = mkPackage(
  nixRaw`pkgs.thelounge`,
  "Modern, responsive, cross-platform, self-hosted web IRC client",
);

/**
 * Based on Linux Mint theme with dark menus and more intensive green
 */
export const theme_jade1 = mkPackage(
  nixRaw`pkgs.theme-jade1`,
  "Based on Linux Mint theme with dark menus and more intensive green",
);

/**
 * Gnome theme based upon Adwaita-Maia dark skin
 */
export const theme_obsidian2 = mkPackage(
  nixRaw`pkgs.theme-obsidian2`,
  "Gnome theme based upon Adwaita-Maia dark skin",
);

/**
 * A script which lets you set your $terminal theme
 */
export const theme_sh = mkPackage(
  nixRaw`pkgs.theme-sh`,
  "A script which lets you set your $terminal theme",
);

/**
 * Theme for GTK 3, GTK 2, Gnome-Shell, and Cinnamon
 */
export const theme_vertex = mkPackage(
  nixRaw`pkgs.theme-vertex`,
  "Theme for GTK 3, GTK 2, Gnome-Shell, and Cinnamon",
);

/**
 * A theme changing utility for Linux
 */
export const themechanger = mkPackage(
  nixRaw`pkgs.themechanger`,
  "A theme changing utility for Linux",
);

/**
 * Toolkit for High Energy Physics Event Generation
 */
export const thepeg = mkPackage(
  nixRaw`pkgs.thepeg`,
  "Toolkit for High Energy Physics Event Generation",
);

/**
 * Therion – cave surveying software
 */
export const therion = mkPackage(
  nixRaw`pkgs.therion`,
  "Therion – cave surveying software",
);

/**
 * Thermal Daemon
 */
export const thermald = mkPackage(
  nixRaw`pkgs.thermald`,
  "Thermal Daemon",
);

/**
 * A better one-line git log
 */
export const thicket = mkPackage(
  nixRaw`pkgs.thicket`,
  "A better one-line git log",
);

/**
 * Markdown & Fountain editor that helps with organization and management
 */
export const thiefmd = mkPackage(
  nixRaw`pkgs.thiefmd`,
  "Markdown & Fountain editor that helps with organization and management",
);

/**
 * A suite of tools for manipulating the metadata of the dm-thin device-mapper target
 */
export const thin_provisioning_tools = mkPackage(
  nixRaw`pkgs.thin-provisioning-tools`,
  "A suite of tools for manipulating the metadata of the dm-thin device-mapper target",
);

/**
 * A simple, lightweight fan control program
 */
export const thinkfan = mkPackage(
  nixRaw`pkgs.thinkfan`,
  "A simple, lightweight fan control program",
);

/**
 * Task management system
 */
export const thinkingRock = mkPackage(
  nixRaw`pkgs.thinkingRock`,
  "Task management system",
);

/**
 * Screen rotation, docking and other scripts for ThinkPad® X220 and X230 Tablet
 */
export const thinkpad_scripts = mkPackage(
  nixRaw`pkgs.thinkpad-scripts`,
  "Screen rotation, docking and other scripts for ThinkPad® X220 and X230 Tablet",
);

/**
 * A typing tui with visualized results and historical logging
 */
export const thokr = mkPackage(
  nixRaw`pkgs.thokr`,
  "A typing tui with visualized results and historical logging",
);

/**
 * Python IDE for beginners
 */
export const thonny = mkPackage(
  nixRaw`pkgs.thonny`,
  "Python IDE for beginners",
);

/**
 * Framework for end-to-end testing threat detection rules
 */
export const threatest = mkPackage(
  nixRaw`pkgs.threatest`,
  "Framework for end-to-end testing threat detection rules",
);

/**
 * Desktop client for Threema, a privacy-focused end-to-end encrypted mobile messenger
 */
export const threema_desktop = mkPackage(
  nixRaw`pkgs.threema-desktop`,
  "Desktop client for Threema, a privacy-focused end-to-end encrypted mobile messenger",
);

/**
 * Library for scalable cross-language services
 */
export const thrift = mkPackage(
  nixRaw`pkgs.thrift`,
  "Library for scalable cross-language services",
);

/**
 * Library for scalable cross-language services
 */
export const thrift_0_10 = mkPackage(
  nixRaw`pkgs.thrift-0_10`,
  "Library for scalable cross-language services",
);

/**
 * Fix for Intel CPU throttling issues
 */
export const throttled = mkPackage(
  nixRaw`pkgs.throttled`,
  "Fix for Intel CPU throttling issues",
);

/**
 * Chromium-based cross-platform / cross-language application framework
 */
export const thrust = mkPackage(
  nixRaw`pkgs.thrust`,
  "Chromium-based cross-platform / cross-language application framework",
);

/**
 * Tiny/turbo/throttling HTTP server
 */
export const thttpd = mkPackage(
  nixRaw`pkgs.thttpd`,
  "Tiny/turbo/throttling HTTP server",
);

/**
 * Generate directory thumbnails for GTK-based file browsers from images inside them
 */
export const thud = mkPackage(
  nixRaw`pkgs.thud`,
  "Generate directory thumbnails for GTK-based file browsers from images inside them",
);

/**
 * USB mass storage emulator for Linux handhelds
 */
export const thumbdrives = mkPackage(
  nixRaw`pkgs.thumbdrives`,
  "USB mass storage emulator for Linux handhelds",
);

/**
 * A lightning fast version copy/pasting like vimium/vimperator
 */
export const thumbs = mkPackage(
  nixRaw`pkgs.thumbs`,
  "A lightning fast version copy/pasting like vimium/vimperator",
);

/**
 * A full-featured e-mail client
 */
export const thunderbird = mkPackage(
  nixRaw`pkgs.thunderbird`,
  "A full-featured e-mail client",
);

/**
 * Mozilla Thunderbird, a full-featured email client (binary package)
 */
export const thunderbird_bin = mkPackage(
  nixRaw`pkgs.thunderbird-bin`,
  "Mozilla Thunderbird, a full-featured email client (binary package)",
);

/**
 * Mozilla Thunderbird, a full-featured email client (binary package)
 */
export const thunderbird_bin_unwrapped = mkPackage(
  nixRaw`pkgs.thunderbird-bin-unwrapped`,
  "Mozilla Thunderbird, a full-featured email client (binary package)",
);

/**
 * A full-featured e-mail client
 */
export const thunderbird_unwrapped = mkPackage(
  nixRaw`pkgs.thunderbird-unwrapped`,
  "A full-featured e-mail client",
);

/**
 * Thunderbolt(TM) user-space components
 */
export const thunderbolt = mkPackage(
  nixRaw`pkgs.thunderbolt`,
  "Thunderbolt(TM) user-space components",
);

/**
 * Tibetan Machine - an OpenType Tibetan, Dzongkha and Ladakhi font
 */
export const tibetan_machine = mkPackage(
  nixRaw`pkgs.tibetan-machine`,
  "Tibetan Machine - an OpenType Tibetan, Dzongkha and Ladakhi font",
);

/**
 * Top-down MMORPG set in a fantasy world
 */
export const tibia = mkPackage(
  nixRaw`pkgs.tibia`,
  "Top-down MMORPG set in a fantasy world",
);

/**
 * Terminal stock ticker with live updates and position tracking
 */
export const ticker = mkPackage(
  nixRaw`pkgs.ticker`,
  "Terminal stock ticker with live updates and position tracking",
);

/**
 * Realtime ticker data in your terminal
 */
export const tickrs = mkPackage(
  nixRaw`pkgs.tickrs`,
  "Realtime ticker data in your terminal",
);

/**
 * A powerful to-do & task management app with seamless cloud synchronization across all your devices
 */
export const ticktick = mkPackage(
  nixRaw`pkgs.ticktick`,
  "A powerful to-do & task management app with seamless cloud synchronization across all your devices",
);

/**
 * Interface to TinyXML
 */
export const ticpp = mkPackage(
  nixRaw`pkgs.ticpp`,
  "Interface to TinyXML",
);

/**
 * An application that lets you download videos and tracks from Tidal
 */
export const tidal_dl = mkPackage(
  nixRaw`pkgs.tidal-dl`,
  "An application that lets you download videos and tracks from Tidal",
);

/**
 * The web version of Tidal running in electron with hifi support thanks to widevine
 */
export const tidal_hifi = mkPackage(
  nixRaw`pkgs.tidal-hifi`,
  "The web version of Tidal running in electron with hifi support thanks to widevine",
);

/**
 * An open-source, cloud-native, distributed, MySQL-Compatible database for elastic scale and real-time analytics
 */
export const tidb = mkPackage(
  nixRaw`pkgs.tidb`,
  "An open-source, cloud-native, distributed, MySQL-Compatible database for elastic scale and real-time analytics",
);

/**
 * A cross-platform CLI csv pretty printer that uses column styling to maximize viewer enjoyment
 */
export const tidy_viewer = mkPackage(
  nixRaw`pkgs.tidy-viewer`,
  "A cross-platform CLI csv pretty printer that uses column styling to maximize viewer enjoyment",
);

/**
 * A program that can validate your HTML, as well as modify it to be more clean and standard
 */
export const tidyp = mkPackage(
  nixRaw`pkgs.tidyp`,
  "A program that can validate your HTML, as well as modify it to be more clean and standard",
);

/**
 * Allow multiple web change files
 */
export const tie = mkPackage(
  nixRaw`pkgs.tie`,
  "Allow multiple web change files",
);

/**
 * Text-mode interface for git
 */
export const tig = mkPackage(
  nixRaw`pkgs.tig`,
  "Text-mode interface for git",
);

/**
 * Fork of tightVNC, made in cooperation with VirtualGL
 */
export const tigervnc = mkPackage(
  nixRaw`pkgs.tigervnc`,
  "Fork of tightVNC, made in cooperation with VirtualGL",
);

/**
 * Improved version of VNC
 */
export const tightvnc = mkPackage(
  nixRaw`pkgs.tightvnc`,
  "Improved version of VNC",
);

/**
 * Lightweight, keyboard-oriented IDE for the masses
 */
export const tijolo = mkPackage(
  nixRaw`pkgs.tijolo`,
  "Lightweight, keyboard-oriented IDE for the masses",
);

/**
 * A graphical tool for rapidly creating graphs and diagrams using PGF/TikZ
 */
export const tikzit = mkPackage(
  nixRaw`pkgs.tikzit`,
  "A graphical tool for rapidly creating graphs and diagrams using PGF/TikZ",
);

/**
 * A Gtk based drop down terminal for Linux and Unix
 */
export const tilda = mkPackage(
  nixRaw`pkgs.tilda`,
  "A Gtk based drop down terminal for Linux and Unix",
);

/**
 * Real-time Geospatial and Geofencing
 */
export const tile38 = mkPackage(
  nixRaw`pkgs.tile38`,
  "Real-time Geospatial and Geofencing",
);

/**
 * Free, easy to use and flexible tile map editor
 */
export const tiled = mkPackage(
  nixRaw`pkgs.tiled`,
  "Free, easy to use and flexible tile map editor",
);

/**
 * TileDB allows you to manage the massive dense and sparse multi-dimensional array data
 */
export const tiledb = mkPackage(
  nixRaw`pkgs.tiledb`,
  "TileDB allows you to manage the massive dense and sparse multi-dimensional array data",
);

/**
 * Emulator and debugger for Texas Instruments Z80-based graphing calculators
 */
export const tilem = mkPackage(
  nixRaw`pkgs.tilem`,
  "Emulator and debugger for Texas Instruments Z80-based graphing calculators",
);

/**
 * Make OpenStreetMap vector tiles without the stack
 */
export const tilemaker = mkPackage(
  nixRaw`pkgs.tilemaker`,
  "Make OpenStreetMap vector tiles without the stack",
);

/**
 * Tiling terminal emulator following the Gnome Human Interface Guidelines
 */
export const tilix = mkPackage(
  nixRaw`pkgs.tilix`,
  "Tiling terminal emulator following the Gnome Human Interface Guidelines",
);

/**
 * Local development tool to manage your developer instance when your team deploys to Kubernetes in production
 */
export const tilt = mkPackage(
  nixRaw`pkgs.tilt`,
  "Local development tool to manage your developer instance when your team deploys to Kubernetes in production",
);

/**
 * A collection of audio feature analysis externals for puredata
 */
export const timbreid = mkPackage(
  nixRaw`pkgs.timbreid`,
  "A collection of audio feature analysis externals for puredata",
);

/**
 * Tool that runs programs and summarizes the system resources they use
 */
export const time = mkPackage(
  nixRaw`pkgs.time`,
  "Tool that runs programs and summarizes the system resources they use",
);

/**
 * Timestamp and date decoder
 */
export const time_decode = mkPackage(
  nixRaw`pkgs.time-decode`,
  "Timestamp and date decoder",
);

/**
 * Analyze GHC .dump-timings files
 */
export const time_ghc_modules = mkPackage(
  nixRaw`pkgs.time-ghc-modules`,
  "Analyze GHC .dump-timings files",
);

/**
 * Simple script to deflicker images taken for timelapses
 */
export const timelapse_deflicker = mkPackage(
  nixRaw`pkgs.timelapse-deflicker`,
  "Simple script to deflicker images taken for timelapses",
);

/**
 * A open source project for creating visual timelines
 */
export const timelens = mkPackage(
  nixRaw`pkgs.timelens`,
  "A open source project for creating visual timelines",
);

/**
 * Execute a command and terminates the spawned process after a given time with a given signal
 */
export const timelimit = mkPackage(
  nixRaw`pkgs.timelimit`,
  "Execute a command and terminates the spawned process after a given time with a given signal",
);

/**
 * Display and navigate information on a timeline
 */
export const timeline = mkPackage(
  nixRaw`pkgs.timeline`,
  "Display and navigate information on a timeline",
);

/**
 * Chip modeling/mapping benchmarking framework
 */
export const timeloop = mkPackage(
  nixRaw`pkgs.timeloop`,
  "Chip modeling/mapping benchmarking framework",
);

/**
 * JACK audio recorder
 */
export const timemachine = mkPackage(
  nixRaw`pkgs.timemachine`,
  "JACK audio recorder",
);

/**
 * A `sleep` with progress
 */
export const timer = mkPackage(
  nixRaw`pkgs.timer`,
  "A `sleep` with progress",
);

/**
 * A font that looks just like Times New Roman, except each character is 5-10% wider
 */
export const times_newer_roman = mkPackage(
  nixRaw`pkgs.times-newer-roman`,
  "A font that looks just like Times New Roman, except each character is 5-10% wider",
);

/**
 * Bulk, parallel insert of CSV records into PostgreSQL
 */
export const timescaledb_parallel_copy = mkPackage(
  nixRaw`pkgs.timescaledb-parallel-copy`,
  "Bulk, parallel insert of CSV records into PostgreSQL",
);

/**
 * A tool for tuning your TimescaleDB for better performance
 */
export const timescaledb_tune = mkPackage(
  nixRaw`pkgs.timescaledb-tune`,
  "A tool for tuning your TimescaleDB for better performance",
);

/**
 * A system restore tool for Linux
 */
export const timeshift = mkPackage(
  nixRaw`pkgs.timeshift`,
  "A system restore tool for Linux",
);

/**
 * A system restore tool for Linux (without runtime dependencies)
 */
export const timeshift_minimal = mkPackage(
  nixRaw`pkgs.timeshift-minimal`,
  "A system restore tool for Linux (without runtime dependencies)",
);

/**
 * A system restore tool for Linux
 */
export const timeshift_unwrapped = mkPackage(
  nixRaw`pkgs.timeshift-unwrapped`,
  "A system restore tool for Linux",
);

/**
 * Library to interact with TimeTagger
 */
export const timetagger = mkPackage(
  nixRaw`pkgs.timetagger`,
  "Library to interact with TimeTagger",
);

/**
 * Track your time from the command-line 
 */
export const timetagger_cli = mkPackage(
  nixRaw`pkgs.timetagger_cli`,
  "Track your time from the command-line ",
);

/**
 * A simple command line time tracker written in ruby
 */
export const timetrap = mkPackage(
  nixRaw`pkgs.timetrap`,
  "A simple command line time tracker written in ruby",
);

/**
 * Timetracking by flipping 8-sided dice
 */
export const timeular = mkPackage(
  nixRaw`pkgs.timeular`,
  "Timetracking by flipping 8-sided dice",
);

/**
 * Server component of timewarrior synchronization application
 */
export const timew_sync_server = mkPackage(
  nixRaw`pkgs.timew-sync-server`,
  "Server component of timewarrior synchronization application",
);

/**
 * A command-line time tracker
 */
export const timewarrior = mkPackage(
  nixRaw`pkgs.timewarrior`,
  "A command-line time tracker",
);

/**
 * A GTK+3 Timezone Map Widget
 */
export const timezonemap = mkPackage(
  nixRaw`pkgs.timezonemap`,
  "A GTK+3 Timezone Map Widget",
);

/**
 * A terminal image and video viewer
 */
export const timg = mkPackage(
  nixRaw`pkgs.timg`,
  "A terminal image and video viewer",
);

/**
 * A software MIDI renderer
 */
export const timidity = mkPackage(
  nixRaw`pkgs.timidity`,
  "A software MIDI renderer",
);

/**
 * A package manager for Kubernetes, powered by CUE and inspired by Helm
 */
export const timoni = mkPackage(
  nixRaw`pkgs.timoni`,
  "A package manager for Kubernetes, powered by CUE and inspired by Helm",
);

/**
 * VPN daemon with full mesh routing
 */
export const tinc = mkPackage(
  nixRaw`pkgs.tinc`,
  "VPN daemon with full mesh routing",
);

/**
 * VPN daemon with full mesh routing
 */
export const tinc_pre = mkPackage(
  nixRaw`pkgs.tinc_pre`,
  "VPN daemon with full mesh routing",
);

/**
 * A tiny but valid init for containers
 */
export const tini = mkPackage(
  nixRaw`pkgs.tini`,
  "A tiny but valid init for containers",
);

/**
 * Simple panel/taskbar unintrusive and light (memory, cpu, aestetic)
 */
export const tint2 = mkPackage(
  nixRaw`pkgs.tint2`,
  "Simple panel/taskbar unintrusive and light (memory, cpu, aestetic)",
);

/**
 * A free MUD client for macOS, Linux and Windows
 */
export const tintin = mkPackage(
  nixRaw`pkgs.tintin`,
  "A free MUD client for macOS, Linux and Windows",
);

/**
 * A console IRC client
 */
export const tiny = mkPackage(
  nixRaw`pkgs.tiny`,
  "A console IRC client",
);

/**
 * An open-source small 8086 emulator
 */
export const tiny8086 = mkPackage(
  nixRaw`pkgs.tiny8086`,
  "An open-source small 8086 emulator",
);

/**
 * Lightning fast C++/CUDA neural network framework
 */
export const tiny_cuda_nn = mkPackage(
  nixRaw`pkgs.tiny-cuda-nn`,
  "Lightning fast C++/CUDA neural network framework",
);

/**
 * Tiny library to interface with ALSA in the Linux kernel
 */
export const tinyalsa = mkPackage(
  nixRaw`pkgs.tinyalsa`,
  "Tiny library to interface with ALSA in the Linux kernel",
);

/**
 * Concise Binary Object Representation (CBOR) Library
 */
export const tinycbor = mkPackage(
  nixRaw`pkgs.tinycbor`,
  "Concise Binary Object Representation (CBOR) Library",
);

/**
 * Small, fast, and embeddable C compiler and interpreter
 */
export const tinycc = mkPackage(
  nixRaw`pkgs.tinycc`,
  "Small, fast, and embeddable C compiler and interpreter",
);

/**
 * utility to manipulate constant databases (cdb)
 */
export const tinycdb = mkPackage(
  nixRaw`pkgs.tinycdb`,
  "utility to manipulate constant databases (cdb)",
);

/**
 * a userspace library for anyone who wants to use the ALSA compressed APIs
 */
export const tinycompress = mkPackage(
  nixRaw`pkgs.tinycompress`,
  "a userspace library for anyone who wants to use the ALSA compressed APIs",
);

/**
 * A system emulator for the RISC-V and x86 architectures
 */
export const tinyemu = mkPackage(
  nixRaw`pkgs.tinyemu`,
  "A system emulator for the RISC-V and x86 architectures",
);

/**
 * A VPN Designed for Lossy Links, with Build-in Forward Error Correction(FEC) Support
 */
export const tinyfecvpn = mkPackage(
  nixRaw`pkgs.tinyfecvpn`,
  "A VPN Designed for Lossy Links, with Build-in Forward Error Correction(FEC) Support",
);

/**
 * A terminal UI, screen-oriented MUD client
 */
export const tinyfugue = mkPackage(
  nixRaw`pkgs.tinyfugue`,
  "A terminal UI, screen-oriented MUD client",
);

/**
 * Go compiler for small places
 */
export const tinygo = mkPackage(
  nixRaw`pkgs.tinygo`,
  "Go compiler for small places",
);

/**
 * Tiny but powerful single file wavefront obj loader
 */
export const tinyobjloader = mkPackage(
  nixRaw`pkgs.tinyobjloader`,
  "Tiny but powerful single file wavefront obj loader",
);

/**
 * Programmer for FPGA boards using the TinyFPGA USB Bootloader
 */
export const tinyprog = mkPackage(
  nixRaw`pkgs.tinyprog`,
  "Programmer for FPGA boards using the TinyFPGA USB Bootloader",
);

/**
 * A light-weight HTTP/HTTPS proxy daemon for POSIX operating systems
 */
export const tinyproxy = mkPackage(
  nixRaw`pkgs.tinyproxy`,
  "A light-weight HTTP/HTTPS proxy daemon for POSIX operating systems",
);

/**
 * Lightweight Scheme implementation
 */
export const tinyscheme = mkPackage(
  nixRaw`pkgs.tinyscheme`,
  "Lightweight Scheme implementation",
);

/**
 * Minimalistic SSH server
 */
export const tinyssh = mkPackage(
  nixRaw`pkgs.tinyssh`,
  "Minimalistic SSH server",
);

/**
 * A static HTML status page generator written in pure shell
 */
export const tinystatus = mkPackage(
  nixRaw`pkgs.tinystatus`,
  "A static HTML status page generator written in pure shell",
);

/**
 * A "minimum viable product" Wayland compositor based on wlroots
 */
export const tinywl = mkPackage(
  nixRaw`pkgs.tinywl`,
  "A \"minimum viable product\" Wayland compositor based on wlroots",
);

/**
 * A tiny window manager for X11
 */
export const tinywm = mkPackage(
  nixRaw`pkgs.tinywm`,
  "A tiny window manager for X11",
);

/**
 * Simple, small, C++ XML parser that can be easily integrating into other programs
 */
export const tinyxml = mkPackage(
  nixRaw`pkgs.tinyxml`,
  "Simple, small, C++ XML parser that can be easily integrating into other programs",
);

/**
 * Simple, small, C++ XML parser that can be easily integrating into other programs
 */
export const tinyxml2 = mkPackage(
  nixRaw`pkgs.tinyxml2`,
  "Simple, small, C++ XML parser that can be easily integrating into other programs",
);

/**
 * A simple, small, efficient, C++ XML parser
 */
export const tinyxml_2 = mkPackage(
  nixRaw`pkgs.tinyxml-2`,
  "A simple, small, efficient, C++ XML parser",
);

/**
 * Serial console TTY
 */
export const tio = mkPackage(
  nixRaw`pkgs.tio`,
  "Serial console TTY",
);

/**
 * Phonetic font for TeX
 */
export const tipa = mkPackage(
  nixRaw`pkgs.tipa`,
  "Phonetic font for TeX",
);

/**
 * Learn and train typing with the ten-finger system
 */
export const tipp10 = mkPackage(
  nixRaw`pkgs.tipp10`,
  "Learn and train typing with the ten-finger system",
);

/**
 * Build vector tilesets from large collections of GeoJSON features
 */
export const tippecanoe = mkPackage(
  nixRaw`pkgs.tippecanoe`,
  "Build vector tilesets from large collections of GeoJSON features",
);

/**
 * Performance monitoring tool for Linux
 */
export const tiptop = mkPackage(
  nixRaw`pkgs.tiptop`,
  "Performance monitoring tool for Linux",
);

/**
 * Desktop notifications, the UNIX way
 */
export const tiramisu = mkPackage(
  nixRaw`pkgs.tiramisu`,
  "Desktop notifications, the UNIX way",
);

/**
 * The Linux sources and UVC firmwares for The Imaging Source cameras
 */
export const tiscamera = mkPackage(
  nixRaw`pkgs.tiscamera`,
  "The Linux sources and UVC firmwares for The Imaging Source cameras",
);

/**
 * Strike down super high-velocity swooping insects
 */
export const titanion = mkPackage(
  nixRaw`pkgs.titanion`,
  "Strike down super high-velocity swooping insects",
);

/**
 * Command Line Tool for creating and building Titanium Mobile applications and modules
 */
export const titanium = mkPackage(
  nixRaw`pkgs.titanium`,
  "Command Line Tool for creating and building Titanium Mobile applications and modules",
);

/**
 * MVC framework for the Appcelerator Titanium SDK
 */
export const titanium_alloy = mkPackage(
  nixRaw`pkgs.titanium-alloy`,
  "MVC framework for the Appcelerator Titanium SDK",
);

/**
 * Small C++ program to display images in a (modern) terminal using RGB ANSI codes and unicode block graphics characters
 */
export const tiv = mkPackage(
  nixRaw`pkgs.tiv`,
  "Small C++ program to display images in a (modern) terminal using RGB ANSI codes and unicode block graphics characters",
);

/**
 * Converts a .TiVo file (produced by TiVoToGo) to a normal MPEG file
 */
export const tivodecode = mkPackage(
  nixRaw`pkgs.tivodecode`,
  "Converts a .TiVo file (produced by TiVoToGo) to a normal MPEG file",
);

/**
 * A widget library for Tcl/Tk
 */
export const tix = mkPackage(
  nixRaw`pkgs.tix`,
  "A widget library for Tcl/Tk",
);

/**
 * A widget toolkit that provides a library of basic elements for building a GUI in many different programming languages
 */
export const tk = mkPackage(
  nixRaw`pkgs.tk`,
  "A widget toolkit that provides a library of basic elements for building a GUI in many different programming languages",
);

/**
 * A widget toolkit that provides a library of basic elements for building a GUI in many different programming languages
 */
export const tk_8_5 = mkPackage(
  nixRaw`pkgs.tk-8_5`,
  "A widget toolkit that provides a library of basic elements for building a GUI in many different programming languages",
);

/**
 * A widget toolkit that provides a library of basic elements for building a GUI in many different programming languages
 */
export const tk_8_6 = mkPackage(
  nixRaw`pkgs.tk-8_6`,
  "A widget toolkit that provides a library of basic elements for building a GUI in many different programming languages",
);

/**
 * A graphical front end to the diff program
 */
export const tkdiff = mkPackage(
  nixRaw`pkgs.tkdiff`,
  "A graphical front end to the diff program",
);

/**
 * Event driven digital circuit simulator with a TCL/TK-based graphical editor
 */
export const tkgate = mkPackage(
  nixRaw`pkgs.tkgate`,
  "Event driven digital circuit simulator with a TCL/TK-based graphical editor",
);

/**
 * The Img package adds several image formats to Tcl/Tk
 */
export const tkimg = mkPackage(
  nixRaw`pkgs.tkimg`,
  "The Img package adds several image formats to Tcl/Tk",
);

/**
 * Graphical, hypertext manual page and Texinfo browser for UNIX
 */
export const tkman = mkPackage(
  nixRaw`pkgs.tkman`,
  "Graphical, hypertext manual page and Texinfo browser for UNIX",
);

/**
 * TCL/TK GUI for cvs and subversion
 */
export const tkrev = mkPackage(
  nixRaw`pkgs.tkrev`,
  "TCL/TK GUI for cvs and subversion",
);

/**
 * A set of implementations of DBM
 */
export const tkrzw = mkPackage(
  nixRaw`pkgs.tkrzw`,
  "A set of implementations of DBM",
);

/**
 * C++11/14/17 std::expected with functional-style extensions
 */
export const tl_expected = mkPackage(
  nixRaw`pkgs.tl-expected`,
  "C++11/14/17 std::expected with functional-style extensions",
);

/**
 * GNU Arch (aka. `tla'), a distributed revision control system
 */
export const tla = mkPackage(
  nixRaw`pkgs.tla`,
  "GNU Arch (aka. `tla'), a distributed revision control system",
);

/**
 * An algorithm specification language with model checking tools
 */
export const tlaplus = mkPackage(
  nixRaw`pkgs.tlaplus`,
  "An algorithm specification language with model checking tools",
);

/**
 * An algorithm specification language with model checking tools
 */
export const tlaplus18 = mkPackage(
  nixRaw`pkgs.tlaplus18`,
  "An algorithm specification language with model checking tools",
);

/**
 * IDE for the TLA+ tools
 */
export const tlaplusToolbox = mkPackage(
  nixRaw`pkgs.tlaplusToolbox`,
  "IDE for the TLA+ tools",
);

/**
 * Mechanically check TLA+ proofs
 */
export const tlaps = mkPackage(
  nixRaw`pkgs.tlaps`,
  "Mechanically check TLA+ proofs",
);

/**
 * Simplified and community-driven man pages
 */
export const tldr = mkPackage(
  nixRaw`pkgs.tldr`,
  "Simplified and community-driven man pages",
);

/**
 * Haskell tldr client
 */
export const tldr_hs = mkPackage(
  nixRaw`pkgs.tldr-hs`,
  "Haskell tldr client",
);

/**
 * Advanced ham radio logging and contest program
 */
export const tlf = mkPackage(
  nixRaw`pkgs.tlf`,
  "Advanced ham radio logging and contest program",
);

/**
 * C header file only implementation of a typed linked list
 */
export const tllist = mkPackage(
  nixRaw`pkgs.tllist`,
  "C header file only implementation of a typed linked list",
);

/**
 * Advanced Power Management for Linux
 */
export const tlp = mkPackage(
  nixRaw`pkgs.tlp`,
  "Advanced Power Management for Linux",
);

/**
 * tlsclient command line utility
 */
export const tlsclient = mkPackage(
  nixRaw`pkgs.tlsclient`,
  "tlsclient command line utility",
);

/**
 * TLS grabber focused on TLS based data collection
 */
export const tlsx = mkPackage(
  nixRaw`pkgs.tlsx`,
  "TLS grabber focused on TLS based data collection",
);

/**
 * A collection of Thai scalable fonts available under free licenses
 */
export const tlwg = mkPackage(
  nixRaw`pkgs.tlwg`,
  "A collection of Thai scalable fonts available under free licenses",
);

/**
 * Terminal mixer - multiplexer for the i/o of terminal applications
 */
export const tm = mkPackage(
  nixRaw`pkgs.tm`,
  "Terminal mixer - multiplexer for the i/o of terminal applications",
);

/**
 * Instant Terminal Sharing
 */
export const tmate = mkPackage(
  nixRaw`pkgs.tmate`,
  "Instant Terminal Sharing",
);

/**
 * tmate SSH Server
 */
export const tmate_ssh_server = mkPackage(
  nixRaw`pkgs.tmate-ssh-server`,
  "tmate SSH Server",
);

/**
 * Terminal based replica of the digital rain from The Matrix
 */
export const tmatrix = mkPackage(
  nixRaw`pkgs.tmatrix`,
  "Terminal based replica of the digital rain from The Matrix",
);

/**
 * A tiny markup language for terminal output
 */
export const tml = mkPackage(
  nixRaw`pkgs.tml`,
  "A tiny markup language for terminal output",
);

/**
 * A temporary email right from your terminal written in POSIX sh 
 */
export const tmpmail = mkPackage(
  nixRaw`pkgs.tmpmail`,
  "A temporary email right from your terminal written in POSIX sh ",
);

/**
 * Recursively searches through specified directories and removes files which have not been accessed in a specified period of time
 */
export const tmpwatch = mkPackage(
  nixRaw`pkgs.tmpwatch`,
  "Recursively searches through specified directories and removes files which have not been accessed in a specified period of time",
);

/**
 * A tool for tagging your files using a virtual filesystem
 */
export const tmsu = mkPackage(
  nixRaw`pkgs.tmsu`,
  "A tool for tagging your files using a virtual filesystem",
);

/**
 * Terminal multiplexer
 */
export const tmux = mkPackage(
  nixRaw`pkgs.tmux`,
  "Terminal multiplexer",
);

/**
 * SSH to multiple hosts at the same time using tmux
 */
export const tmux_cssh = mkPackage(
  nixRaw`pkgs.tmux-cssh`,
  "SSH to multiple hosts at the same time using tmux",
);

/**
 * CPU, RAM, and load monitor for use with tmux
 */
export const tmux_mem_cpu_load = mkPackage(
  nixRaw`pkgs.tmux-mem-cpu-load`,
  "CPU, RAM, and load monitor for use with tmux",
);

/**
 * The fastest way to manage projects as tmux sessions
 */
export const tmux_sessionizer = mkPackage(
  nixRaw`pkgs.tmux-sessionizer`,
  "The fastest way to manage projects as tmux sessions",
);

/**
 * tmux-based terminal divider
 */
export const tmux_xpanes = mkPackage(
  nixRaw`pkgs.tmux-xpanes`,
  "tmux-based terminal divider",
);

/**
 * Powerful session, window & pane management for Tmux
 */
export const tmuxifier = mkPackage(
  nixRaw`pkgs.tmuxifier`,
  "Powerful session, window & pane management for Tmux",
);

/**
 * Manage complex tmux sessions easily
 */
export const tmuxinator = mkPackage(
  nixRaw`pkgs.tmuxinator`,
  "Manage complex tmux sessions easily",
);

/**
 * tmux session manager
 */
export const tmuxp = mkPackage(
  nixRaw`pkgs.tmuxp`,
  "tmux session manager",
);

/**
 * IPv4 to IPv6 interceptor
 */
export const tnat64 = mkPackage(
  nixRaw`pkgs.tnat64`,
  "IPv4 to IPv6 interceptor",
);

/**
 * Attach KISS TNC devices as network interfaces
 */
export const tncattach = mkPackage(
  nixRaw`pkgs.tncattach`,
  "Attach KISS TNC devices as network interfaces",
);

/**
 * Unpacks MIME attachments of type application/ms-tnef
 */
export const tnef = mkPackage(
  nixRaw`pkgs.tnef`,
  "Unpacks MIME attachments of type application/ms-tnef",
);

/**
 * Template Numerical Toolkit: C++ headers for array and matrices
 */
export const tnt = mkPackage(
  nixRaw`pkgs.tnt`,
  "Template Numerical Toolkit: C++ headers for array and matrices",
);

/**
 * C++ library which makes accessing SQL databases easy and robust
 */
export const tntdb = mkPackage(
  nixRaw`pkgs.tntdb`,
  "C++ library which makes accessing SQL databases easy and robust",
);

/**
 * Web server which allows users to develop web applications using C++
 */
export const tntnet = mkPackage(
  nixRaw`pkgs.tntnet`,
  "Web server which allows users to develop web applications using C++",
);

/**
 * Terminal wrapper for rendering a terminal on a website by converting ANSI escape sequences to HTML.
 */
export const to_html = mkPackage(
  nixRaw`pkgs.to-html`,
  "Terminal wrapper for rendering a terminal on a website by converting ANSI escape sequences to HTML.",
);

/**
 * Containerize your development and continuous integration environments
 */
export const toast = mkPackage(
  nixRaw`pkgs.toast`,
  "Containerize your development and continuous integration environments",
);

/**
 * A commandline tool that shows desktop notifications using notify-rust
 */
export const toastify = mkPackage(
  nixRaw`pkgs.toastify`,
  "A commandline tool that shows desktop notifications using notify-rust",
);

/**
 * Tool for programming Tock onto hardware boards
 */
export const tockloader = mkPackage(
  nixRaw`pkgs.tockloader`,
  "Tool for programming Tock onto hardware boards",
);

/**
 * Human-readable diff for todo.txt files
 */
export const todiff = mkPackage(
  nixRaw`pkgs.todiff`,
  "Human-readable diff for todo.txt files",
);

/**
 * Simple todo cli program written in rust
 */
export const todo = mkPackage(
  nixRaw`pkgs.todo`,
  "Simple todo cli program written in rust",
);

/**
 * Simple plaintext todo list manager
 */
export const todo_txt_cli = mkPackage(
  nixRaw`pkgs.todo-txt-cli`,
  "Simple plaintext todo list manager",
);

/**
 * Todo-txt + Rofi = Todofi.sh
 */
export const todofi_sh = mkPackage(
  nixRaw`pkgs.todofi-sh`,
  "Todo-txt + Rofi = Todofi.sh",
);

/**
 * Todoist CLI Client
 */
export const todoist = mkPackage(
  nixRaw`pkgs.todoist`,
  "Todoist CLI Client",
);

/**
 * The official Todoist electron app
 */
export const todoist_electron = mkPackage(
  nixRaw`pkgs.todoist-electron`,
  "The official Todoist electron app",
);

/**
 * Standards-based task manager based on iCalendar
 */
export const todoman = mkPackage(
  nixRaw`pkgs.todoman`,
  "Standards-based task manager based on iCalendar",
);

/**
 * Tiny dynamic menu for Wayland
 */
export const tofi = mkPackage(
  nixRaw`pkgs.tofi`,
  "Tiny dynamic menu for Wayland",
);

/**
 * Workflow engine written in pure Python
 */
export const toil = mkPackage(
  nixRaw`pkgs.toil`,
  "Workflow engine written in pure Python",
);

/**
 * Display large colourful characters in text mode
 */
export const toilet = mkPackage(
  nixRaw`pkgs.toilet`,
  "Display large colourful characters in text mode",
);

/**
 * Trusty terminal typing tester
 */
export const toipe = mkPackage(
  nixRaw`pkgs.toipe`,
  "Trusty terminal typing tester",
);

/**
 * A program that allows you to count your code, quickly
 */
export const tokei = mkPackage(
  nixRaw`pkgs.tokei`,
  "A program that allows you to count your code, quickly",
);

/**
 * A debugger for asynchronous Rust code
 */
export const tokio_console = mkPackage(
  nixRaw`pkgs.tokio-console`,
  "A debugger for asynchronous Rust code",
);

/**
 * A GTK theme based on the Tokyo Night colour palette.
 */
export const tokyo_night_gtk = mkPackage(
  nixRaw`pkgs.tokyo-night-gtk`,
  "A GTK theme based on the Tokyo Night colour palette.",
);

/**
 * Tokyo Cabinet: a modern implementation of DBM
 */
export const tokyocabinet = mkPackage(
  nixRaw`pkgs.tokyocabinet`,
  "Tokyo Cabinet: a modern implementation of DBM",
);

/**
 * Network interface of the Tokyo Cabinet DBM
 */
export const tokyotyrant = mkPackage(
  nixRaw`pkgs.tokyotyrant`,
  "Network interface of the Tokyo Cabinet DBM",
);

/**
 * A tool to integrate C/Cpp code with Lua
 */
export const toluapp = mkPackage(
  nixRaw`pkgs.toluapp`,
  "A tool to integrate C/Cpp code with Lua",
);

/**
 *  A pomodoro timer written in pure C
 */
export const tomato_c = mkPackage(
  nixRaw`pkgs.tomato-c`,
  " A pomodoro timer written in pure C",
);

/**
 * File encryption on GNU/Linux
 */
export const tomb = mkPackage(
  nixRaw`pkgs.tomb`,
  "File encryption on GNU/Linux",
);

/**
 * An implementation of the Java Servlet and JavaServer Pages technologies
 */
export const tomcat10 = mkPackage(
  nixRaw`pkgs.tomcat10`,
  "An implementation of the Java Servlet and JavaServer Pages technologies",
);

/**
 * An implementation of the Java Servlet and JavaServer Pages technologies
 */
export const tomcat9 = mkPackage(
  nixRaw`pkgs.tomcat9`,
  "An implementation of the Java Servlet and JavaServer Pages technologies",
);

/**
 * Provides web server plugins to connect web servers with Tomcat
 */
export const tomcat_connectors = mkPackage(
  nixRaw`pkgs.tomcat_connectors`,
  "Provides web server plugins to connect web servers with Tomcat",
);

export const tomcat_mysql_jdbc = mkPackage(
  nixRaw`pkgs.tomcat_mysql_jdbc`,
  "",
);

/**
 * An optional component for use with Apache Tomcat that allows Tomcat to use certain native resources for performance, compatibility, etc
 */
export const tomcat_native = mkPackage(
  nixRaw`pkgs.tomcat-native`,
  "An optional component for use with Apache Tomcat that allows Tomcat to use certain native resources for performance, compatibility, etc",
);

/**
 * A dungeon crawler similar to Angband, based on the works of Tolkien
 */
export const tome2 = mkPackage(
  nixRaw`pkgs.tome2`,
  "A dungeon crawler similar to Angband, based on the works of Tolkien",
);

/**
 * Tales of Maj'eyal (rogue-like game)
 */
export const tome4 = mkPackage(
  nixRaw`pkgs.tome4`,
  "Tales of Maj'eyal (rogue-like game)",
);

/**
 * TOML for Modern C++
 */
export const toml11 = mkPackage(
  nixRaw`pkgs.toml11`,
  "TOML for Modern C++",
);

/**
 * A very small CLI for converting TOML to JSON
 */
export const toml2json = mkPackage(
  nixRaw`pkgs.toml2json`,
  "A very small CLI for converting TOML to JSON",
);

/**
 * A tool to convert TOML files to Nix expressions
 */
export const toml2nix = mkPackage(
  nixRaw`pkgs.toml2nix`,
  "A tool to convert TOML files to Nix expressions",
);

/**
 * TOML parser implementation for data serialization and deserialization in Fortran
 */
export const toml_f = mkPackage(
  nixRaw`pkgs.toml-f`,
  "TOML parser implementation for data serialization and deserialization in Fortran",
);

/**
 * TOML v1.0.0-compliant library written in C99
 */
export const tomlc99 = mkPackage(
  nixRaw`pkgs.tomlc99`,
  "TOML v1.0.0-compliant library written in C99",
);

/**
 * No fanfare TOML C++ Library
 */
export const tomlcpp = mkPackage(
  nixRaw`pkgs.tomlcpp`,
  "No fanfare TOML C++ Library",
);

/**
 * Header-only TOML config file parser and serializer for C++17
 */
export const tomlplusplus = mkPackage(
  nixRaw`pkgs.tomlplusplus`,
  "Header-only TOML config file parser and serializer for C++17",
);

/**
 * A fully decentralized layer-1 blockchain designed by Telegram
 */
export const ton = mkPackage(
  nixRaw`pkgs.ton`,
  "A fully decentralized layer-1 blockchain designed by Telegram",
);

/**
 * A cross platform utility to dump and modify audio metadata for a wide variety of formats
 */
export const tone = mkPackage(
  nixRaw`pkgs.tone`,
  "A cross platform utility to dump and modify audio metadata for a wide variety of formats",
);

/**
 * Tonelib GFX is an amp and effects modeling software for electric guitar and bass.
 */
export const tonelib_gfx = mkPackage(
  nixRaw`pkgs.tonelib-gfx`,
  "Tonelib GFX is an amp and effects modeling software for electric guitar and bass.",
);

/**
 * ToneLib Jam – the learning and practice software for guitar players
 */
export const tonelib_jam = mkPackage(
  nixRaw`pkgs.tonelib-jam`,
  "ToneLib Jam – the learning and practice software for guitar players",
);

/**
 * ToneLib Metal – Guitar amp simulator targeted at metal players
 */
export const tonelib_metal = mkPackage(
  nixRaw`pkgs.tonelib-metal`,
  "ToneLib Metal – Guitar amp simulator targeted at metal players",
);

/**
 * ToneLib NoiseReducer – two-unit noise reduction rack effect plugin
 */
export const tonelib_noisereducer = mkPackage(
  nixRaw`pkgs.tonelib-noisereducer`,
  "ToneLib NoiseReducer – two-unit noise reduction rack effect plugin",
);

/**
 * ToneLib Zoom – change and save all the settings in your Zoom(r) guitar pedal
 */
export const tonelib_zoom = mkPackage(
  nixRaw`pkgs.tonelib-zoom`,
  "ToneLib Zoom – change and save all the settings in your Zoom(r) guitar pedal",
);

/**
 * Pitch and note annotation of unaccompanied melody
 */
export const tony = mkPackage(
  nixRaw`pkgs.tony`,
  "Pitch and note annotation of unaccompanied melody",
);

/**
 * Tool for containerized command line environments on Linux
 */
export const toolbox = mkPackage(
  nixRaw`pkgs.toolbox`,
  "Tool for containerized command line environments on Linux",
);

/**
 * Mastodon CLI interface
 */
export const toot = mkPackage(
  nixRaw`pkgs.toot`,
  "Mastodon CLI interface",
);

/**
 * Simple Mastodon client designed for elementary OS
 */
export const tootle = mkPackage(
  nixRaw`pkgs.tootle`,
  "Simple Mastodon client designed for elementary OS",
);

/**
 * TopGit manages large amount of interdependent topic branches
 */
export const top_git = mkPackage(
  nixRaw`pkgs.top-git`,
  "TopGit manages large amount of interdependent topic branches",
);

/**
 * Finds the fields (or combinations of fields) which appear most often in a stream of records
 */
export const topfew = mkPackage(
  nixRaw`pkgs.topfew`,
  "Finds the fields (or combinations of fields) which appear most often in a stream of records",
);

/**
 * Rust implementation of Tim Bray's topfew tool
 */
export const topfew_rs = mkPackage(
  nixRaw`pkgs.topfew-rs`,
  "Rust implementation of Tim Bray's topfew tool",
);

/**
 * Upgrade all the things
 */
export const topgrade = mkPackage(
  nixRaw`pkgs.topgrade`,
  "Upgrade all the things",
);

/**
 * A uniform formatter for simple languages, as part of the Tree-sitter ecosystem
 */
export const topiary = mkPackage(
  nixRaw`pkgs.topiary`,
  "A uniform formatter for simple languages, as part of the Tree-sitter ecosystem",
);

/**
 * A tool for easy, declarative management of Kafka topics
 */
export const topicctl = mkPackage(
  nixRaw`pkgs.topicctl`,
  "A tool for easy, declarative management of Kafka topics",
);

/**
 * Jump and run game, reimplementation of Tower Toppler/Nebulus
 */
export const toppler = mkPackage(
  nixRaw`pkgs.toppler`,
  "Jump and run game, reimplementation of Tower Toppler/Nebulus",
);

/**
 * A cli todo application compatible with the todo.txt format
 */
export const topydo = mkPackage(
  nixRaw`pkgs.topydo`,
  "A cli todo application compatible with the todo.txt format",
);

/**
 * Anonymizing overlay network
 */
export const tor = mkPackage(
  nixRaw`pkgs.tor`,
  "Anonymizing overlay network",
);

/**
 * Privacy-focused browser routing traffic through the Tor network
 */
export const tor_browser = mkPackage(
  nixRaw`pkgs.tor-browser`,
  "Privacy-focused browser routing traffic through the Tor network",
);

/**
 * Tora SQL tool
 */
export const tora = mkPackage(
  nixRaw`pkgs.tora`,
  "Tora SQL tool",
);

/**
 * Car racing game
 */
export const torcs = mkPackage(
  nixRaw`pkgs.torcs`,
  "Car racing game",
);

/**
 * Capital management tool for lightning network nodes
 */
export const torq = mkPackage(
  nixRaw`pkgs.torq`,
  "Capital management tool for lightning network nodes",
);

/**
 * Resource management system for submitting and controlling jobs on supercomputers, clusters, and grids
 */
export const torque = mkPackage(
  nixRaw`pkgs.torque`,
  "Resource management system for submitting and controlling jobs on supercomputers, clusters, and grids",
);

/**
 * A fork of torrent7z, viz a derivative of 7zip that produces invariant .7z archives for torrenting
 */
export const torrent7z = mkPackage(
  nixRaw`pkgs.torrent7z`,
  "A fork of torrent7z, viz a derivative of 7zip that produces invariant .7z archives for torrenting",
);

/**
 * Download torrents in style with this speedy, minimalist torrent client for elementary OS
 */
export const torrential = mkPackage(
  nixRaw`pkgs.torrential`,
  "Download torrents in style with this speedy, minimalist torrent client for elementary OS",
);

/**
 * A CLI tool for creating, inspecting and modifying BitTorrent metafiles
 */
export const torrenttools = mkPackage(
  nixRaw`pkgs.torrenttools`,
  "A CLI tool for creating, inspecting and modifying BitTorrent metafiles",
);

/**
 * Wrapper to safely torify applications
 */
export const torsocks = mkPackage(
  nixRaw`pkgs.torsocks`,
  "Wrapper to safely torify applications",
);

/**
 * Qt based graphical tool for working with Mercurial
 */
export const tortoisehg = mkPackage(
  nixRaw`pkgs.tortoisehg`,
  "Qt based graphical tool for working with Mercurial",
);

/**
 * Fast-paced abstract scrolling shooter game
 */
export const torus_trooper = mkPackage(
  nixRaw`pkgs.torus-trooper`,
  "Fast-paced abstract scrolling shooter game",
);

/**
 * Dead simple LAN file transfers from the command line
 */
export const toss = mkPackage(
  nixRaw`pkgs.toss`,
  "Dead simple LAN file transfers from the command line",
);

/**
 * Simple GObject-based library to parse and save a host of playlist formats
 */
export const totem_pl_parser = mkPackage(
  nixRaw`pkgs.totem-pl-parser`,
  "Simple GObject-based library to parse and save a host of playlist formats",
);

/**
 * Linux multi-touch gesture recognizer
 */
export const touchegg = mkPackage(
  nixRaw`pkgs.touchegg`,
  "Linux multi-touch gesture recognizer",
);

/**
 * Next generation modular control surface
 */
export const touchosc = mkPackage(
  nixRaw`pkgs.touchosc`,
  "Next generation modular control surface",
);

/**
 * A server application to run tox node written in pure Rust
 */
export const tox_node = mkPackage(
  nixRaw`pkgs.tox-node`,
  "A server application to run tox node written in pure Rust",
);

/**
 * Reference CLI for Tox
 */
export const toxic = mkPackage(
  nixRaw`pkgs.toxic`,
  "Reference CLI for Tox",
);

/**
 * Proxy for for simulating network conditions
 */
export const toxiproxy = mkPackage(
  nixRaw`pkgs.toxiproxy`,
  "Proxy for for simulating network conditions",
);

/**
 * A powerful tool that allows one to make tunneled point to point connections over Tox
 */
export const toxvpn = mkPackage(
  nixRaw`pkgs.toxvpn`,
  "A powerful tool that allows one to make tunneled point to point connections over Tox",
);

/**
 * Lightweight implementation of some Unix command line utilities
 */
export const toybox = mkPackage(
  nixRaw`pkgs.toybox`,
  "Lightweight implementation of some Unix command line utilities",
);

/**
 * Auto toggle keyboard back-lighting on Thinkpads (and maybe other laptops) for Linux
 */
export const tp_auto_kbbl = mkPackage(
  nixRaw`pkgs.tp-auto-kbbl`,
  "Auto toggle keyboard back-lighting on Thinkpads (and maybe other laptops) for Linux",
);

/**
 * Tool to set battery charging thresholds on Lenovo Thinkpad
 */
export const tpacpi_bat = mkPackage(
  nixRaw`pkgs.tpacpi-bat`,
  "Tool to set battery charging thresholds on Lenovo Thinkpad",
);

/**
 * TPM2 resource manager, accessible via D-Bus
 */
export const tpm2_abrmd = mkPackage(
  nixRaw`pkgs.tpm2-abrmd`,
  "TPM2 resource manager, accessible via D-Bus",
);

/**
 * A PKCS#11 interface for TPM2 hardware
 */
export const tpm2_pkcs11 = mkPackage(
  nixRaw`pkgs.tpm2-pkcs11`,
  "A PKCS#11 interface for TPM2 hardware",
);

/**
 * Command line tools that provide access to a TPM 2.0 compatible device
 */
export const tpm2_tools = mkPackage(
  nixRaw`pkgs.tpm2-tools`,
  "Command line tools that provide access to a TPM 2.0 compatible device",
);

/**
 * Attest the trustworthiness of a device against a human using time-based one-time passwords
 */
export const tpm2_totp = mkPackage(
  nixRaw`pkgs.tpm2-totp`,
  "Attest the trustworthiness of a device against a human using time-based one-time passwords",
);

/**
 * OSS implementation of the TCG TPM2 Software Stack (TSS2)
 */
export const tpm2_tss = mkPackage(
  nixRaw`pkgs.tpm2-tss`,
  "OSS implementation of the TCG TPM2 Software Stack (TSS2)",
);

/**
 * LUKS key storage in TPM NVRAM
 */
export const tpm_luks = mkPackage(
  nixRaw`pkgs.tpm-luks`,
  "LUKS key storage in TPM NVRAM",
);

/**
 * A collection of programs that provide support for TPM based attestation using the TPM quote mechanism
 */
export const tpm_quote_tools = mkPackage(
  nixRaw`pkgs.tpm-quote-tools`,
  "A collection of programs that provide support for TPM based attestation using the TPM quote mechanism",
);

/**
 * Management tools for TPM hardware
 */
export const tpm_tools = mkPackage(
  nixRaw`pkgs.tpm-tools`,
  "Management tools for TPM hardware",
);

/**
 * Tool for managing the TPM
 */
export const tpmmanager = mkPackage(
  nixRaw`pkgs.tpmmanager`,
  "Tool for managing the TPM",
);

/**
 * Thousands of problems for theorem provers and tools
 */
export const tptp = mkPackage(
  nixRaw`pkgs.tptp`,
  "Thousands of problems for theorem provers and tools",
);

/**
 * Software for using the ARRL Logbook of the World
 */
export const tqsl = mkPackage(
  nixRaw`pkgs.tqsl`,
  "Software for using the ARRL Logbook of the World",
);

/**
 * Allow to update dependancies of the Tamriel-Data mod for morrowind
 */
export const tr_patcher = mkPackage(
  nixRaw`pkgs.tr-patcher`,
  "Allow to update dependancies of the Tamriel-Data mod for morrowind",
);

/**
 * User-space tools for the Linux kernel ftrace subsystem
 */
export const trace_cmd = mkPackage(
  nixRaw`pkgs.trace-cmd`,
  "User-space tools for the Linux kernel ftrace subsystem",
);

/**
 * A middlebox detection tool
 */
export const tracebox = mkPackage(
  nixRaw`pkgs.tracebox`,
  "A middlebox detection tool",
);

/**
 * Linux Runtime Security and Forensics using eBPF
 */
export const tracee = mkPackage(
  nixRaw`pkgs.tracee`,
  "Linux Runtime Security and Forensics using eBPF",
);

/**
 * Automatically generate all types of basic memory management operations and write into trace files
 */
export const tracefilegen = mkPackage(
  nixRaw`pkgs.tracefilegen`,
  "Automatically generate all types of basic memory management operations and write into trace files",
);

/**
 * Ease the analysis of existing memory management techniques, as well as the prototyping of new memory management techniques
 */
export const tracefilesim = mkPackage(
  nixRaw`pkgs.tracefilesim`,
  "Ease the analysis of existing memory management techniques, as well as the prototyping of new memory management techniques",
);

/**
 * Tracks the route taken by packets over an IP network
 */
export const traceroute = mkPackage(
  nixRaw`pkgs.traceroute`,
  "Tracks the route taken by packets over an IP network",
);

/**
 * 3D Marble Madness clone
 */
export const trackballs = mkPackage(
  nixRaw`pkgs.trackballs`,
  "3D Marble Madness clone",
);

/**
 * Desktop-neutral user information store, search tool and indexer
 */
export const tracker = mkPackage(
  nixRaw`pkgs.tracker`,
  "Desktop-neutral user information store, search tool and indexer",
);

/**
 * Desktop-neutral user information store, search tool and indexer
 */
export const tracker_miners = mkPackage(
  nixRaw`pkgs.tracker-miners`,
  "Desktop-neutral user information store, search tool and indexer",
);

/**
 * Open multi-site list manager for Unix-like systems (ex-wMAL)
 */
export const trackma = mkPackage(
  nixRaw`pkgs.trackma`,
  "Open multi-site list manager for Unix-like systems (ex-wMAL)",
);

/**
 * Open multi-site list manager for Unix-like systems (ex-wMAL)
 */
export const trackma_curses = mkPackage(
  nixRaw`pkgs.trackma-curses`,
  "Open multi-site list manager for Unix-like systems (ex-wMAL)",
);

/**
 * Open multi-site list manager for Unix-like systems (ex-wMAL)
 */
export const trackma_gtk = mkPackage(
  nixRaw`pkgs.trackma-gtk`,
  "Open multi-site list manager for Unix-like systems (ex-wMAL)",
);

/**
 * Open multi-site list manager for Unix-like systems (ex-wMAL)
 */
export const trackma_qt = mkPackage(
  nixRaw`pkgs.trackma-qt`,
  "Open multi-site list manager for Unix-like systems (ex-wMAL)",
);

/**
 * A real time, nanosecond resolution, remote telemetry frame profiler for games and other applications
 */
export const tracy = mkPackage(
  nixRaw`pkgs.tracy`,
  "A real time, nanosecond resolution, remote telemetry frame profiler for games and other applications",
);

/**
 * A traditional (K&R-style) C macro preprocessor
 */
export const tradcpp = mkPackage(
  nixRaw`pkgs.tradcpp`,
  "A traditional (K&R-style) C macro preprocessor",
);

/**
 * Charting platform for traders and investors
 */
export const tradingview = mkPackage(
  nixRaw`pkgs.tradingview`,
  "Charting platform for traders and investors",
);

/**
 * A modern reverse proxy
 */
export const traefik = mkPackage(
  nixRaw`pkgs.traefik`,
  "A modern reverse proxy",
);

/**
 * dump ACME data from traefik to certificates
 */
export const traefik_certs_dumper = mkPackage(
  nixRaw`pkgs.traefik-certs-dumper`,
  "dump ACME data from traefik to certificates",
);

/**
 * Fast, scalable, and extensible HTTP caching proxy server
 */
export const trafficserver = mkPackage(
  nixRaw`pkgs.trafficserver`,
  "Fast, scalable, and extensible HTTP caching proxy server",
);

/**
 * Automatic Linux privilege escalation
 */
export const traitor = mkPackage(
  nixRaw`pkgs.traitor`,
  "Automatic Linux privilege escalation",
);

/**
 * Securely transfer and send anything between computers with TUI
 */
export const tran = mkPackage(
  nixRaw`pkgs.tran`,
  "Securely transfer and send anything between computers with TUI",
);

/**
 * Suite of command line utilities for transcoding video and audio codecs, and for converting between different container formats
 */
export const transcode = mkPackage(
  nixRaw`pkgs.transcode`,
  "Suite of command line utilities for transcoding video and audio codecs, and for converting between different container formats",
);

/**
 * Software to help transcribe recorded music
 */
export const transcribe = mkPackage(
  nixRaw`pkgs.transcribe`,
  "Software to help transcribe recorded music",
);

/**
 * Transparently encrypt files within a Git repository
 */
export const transcrypt = mkPackage(
  nixRaw`pkgs.transcrypt`,
  "Transparently encrypt files within a Git repository",
);

/**
 * A cross platform front-end for the Transmission BitTorrent client
 */
export const transgui = mkPackage(
  nixRaw`pkgs.transgui`,
  "A cross platform front-end for the Transmission BitTorrent client",
);

/**
 * The Transifex command-line client
 */
export const transifex_cli = mkPackage(
  nixRaw`pkgs.transifex-cli`,
  "The Transifex command-line client",
);

/**
 * Transifex translation service client
 */
export const transifex_client = mkPackage(
  nixRaw`pkgs.transifex-client`,
  "Transifex translation service client",
);

/**
 * Command-line translator using Google Translate, Bing Translator, Yandex.Translate, and Apertium
 */
export const translate_shell = mkPackage(
  nixRaw`pkgs.translate-shell`,
  "Command-line translator using Google Translate, Bing Translator, Yandex.Translate, and Apertium",
);

/**
 * Fast and secure translation on your local machine, powered by marian and Bergamot.
 */
export const translatelocally = mkPackage(
  nixRaw`pkgs.translatelocally`,
  "Fast and secure translation on your local machine, powered by marian and Bergamot.",
);

/**
 * A module grouping multiple translation APIs
 */
export const translatepy = mkPackage(
  nixRaw`pkgs.translatepy`,
  "A module grouping multiple translation APIs",
);

/**
 * A fast, easy and free BitTorrent client
 */
export const transmission = mkPackage(
  nixRaw`pkgs.transmission`,
  "A fast, easy and free BitTorrent client",
);

/**
 * A fast, easy and free BitTorrent client
 */
export const transmission_4 = mkPackage(
  nixRaw`pkgs.transmission_4`,
  "A fast, easy and free BitTorrent client",
);

/**
 * A fast, easy and free BitTorrent client
 */
export const transmission_4_gtk = mkPackage(
  nixRaw`pkgs.transmission_4-gtk`,
  "A fast, easy and free BitTorrent client",
);

/**
 * A fast, easy and free BitTorrent client
 */
export const transmission_4_qt = mkPackage(
  nixRaw`pkgs.transmission_4-qt`,
  "A fast, easy and free BitTorrent client",
);

/**
 * A fast, easy and free BitTorrent client
 */
export const transmission_gtk = mkPackage(
  nixRaw`pkgs.transmission-gtk`,
  "A fast, easy and free BitTorrent client",
);

/**
 * A fast, easy and free BitTorrent client
 */
export const transmission_noSystemd = mkPackage(
  nixRaw`pkgs.transmission_noSystemd`,
  "A fast, easy and free BitTorrent client",
);

/**
 * A fast, easy and free BitTorrent client
 */
export const transmission_qt = mkPackage(
  nixRaw`pkgs.transmission-qt`,
  "A fast, easy and free BitTorrent client",
);

/**
 * GTK remote control for the Transmission BitTorrent client
 */
export const transmission_remote_gtk = mkPackage(
  nixRaw`pkgs.transmission-remote-gtk`,
  "GTK remote control for the Transmission BitTorrent client",
);

/**
 * Add torrents to transmission based on RSS list
 */
export const transmission_rss = mkPackage(
  nixRaw`pkgs.transmission-rss`,
  "Add torrents to transmission based on RSS list",
);

/**
 * Command line interface to the freedesktop.org trashcan
 */
export const trash_cli = mkPackage(
  nixRaw`pkgs.trash-cli`,
  "Command line interface to the freedesktop.org trashcan",
);

/**
 * A simple, fast, and featureful alternative to rm and trash-cli
 */
export const trashy = mkPackage(
  nixRaw`pkgs.trashy`,
  "A simple, fast, and featureful alternative to rm and trash-cli",
);

/**
 * Cross-platform multitrack audio recording and audio editing suite
 */
export const traverso = mkPackage(
  nixRaw`pkgs.traverso`,
  "Cross-platform multitrack audio recording and audio editing suite",
);

/**
 * CLI and Ruby client library for Travis CI
 */
export const travis = mkPackage(
  nixRaw`pkgs.travis`,
  "CLI and Ruby client library for Travis CI",
);

/**
 * A lightweight GTK2-based systray for UNIX desktop
 */
export const trayer = mkPackage(
  nixRaw`pkgs.trayer`,
  "A lightweight GTK2-based systray for UNIX desktop",
);

/**
 * An unofficial GUI wrapper around the Tailscale CLI client
 */
export const trayscale = mkPackage(
  nixRaw`pkgs.trayscale`,
  "An unofficial GUI wrapper around the Tailscale CLI client",
);

        /**
         * The universal solution for delivering your software updates securely from
a trusted The Update Framework (TUF) repository

         */
export const trdl_client = mkPackage(
  nixRaw`pkgs.trdl-client`,
  "The universal solution for delivering your software updates securely from\na trusted The Update Framework (TUF) repository\n",
);

/**
 * Lightweight and robust POSIX compliant regexp matching library
 */
export const tre = mkPackage(
  nixRaw`pkgs.tre`,
  "Lightweight and robust POSIX compliant regexp matching library",
);

/**
 * Tree command, improved
 */
export const tre_command = mkPackage(
  nixRaw`pkgs.tre-command`,
  "Tree command, improved",
);

/**
 * A compact, efficient Prolog interpreter written in ANSI C
 */
export const trealla = mkPackage(
  nixRaw`pkgs.trealla`,
  "A compact, efficient Prolog interpreter written in ANSI C",
);

/**
 * Command to produce a depth indented directory listing
 */
export const tree = mkPackage(
  nixRaw`pkgs.tree`,
  "Command to produce a depth indented directory listing",
);

/**
 * Create file hierarchies from media tags
 */
export const tree_from_tags = mkPackage(
  nixRaw`pkgs.tree-from-tags`,
  "Create file hierarchies from media tags",
);

/**
 * A parser generator tool and an incremental parsing library
 */
export const tree_sitter = mkPackage(
  nixRaw`pkgs.tree-sitter`,
  "A parser generator tool and an incremental parsing library",
);

/**
 * one CLI to format the code tree
 */
export const treefmt = mkPackage(
  nixRaw`pkgs.treefmt`,
  "one CLI to format the code tree",
);

/**
 * Inference of patterns of population splitting and mixing from genome-wide allele frequency data
 */
export const treemix = mkPackage(
  nixRaw`pkgs.treemix`,
  "Inference of patterns of population splitting and mixing from genome-wide allele frequency data",
);

/**
 * Free Form Data Organizer
 */
export const treesheets = mkPackage(
  nixRaw`pkgs.treesheets`,
  "Free Form Data Organizer",
);

/**
 * Documentation and bitstream tools for Lattice ECP5 FPGAs
 */
export const trellis = mkPackage(
  nixRaw`pkgs.trellis`,
  "Documentation and bitstream tools for Lattice ECP5 FPGAs",
);

/**
 * Curses interface for transmission
 */
export const tremc = mkPackage(
  nixRaw`pkgs.tremc`,
  "Curses interface for transmission",
);

/**
 * Fixed-point version of the Ogg Vorbis decoder
 */
export const tremor = mkPackage(
  nixRaw`pkgs.tremor`,
  "Fixed-point version of the Ogg Vorbis decoder",
);

/**
 * Tremor Language Server (Trill)
 */
export const tremor_language_server = mkPackage(
  nixRaw`pkgs.tremor-language-server`,
  "Tremor Language Server (Trill)",
);

        /**
         * Early stage event processing system for unstructured data with rich
support for structural pattern matching, filtering and transformation

         */
export const tremor_rs = mkPackage(
  nixRaw`pkgs.tremor-rs`,
  "Early stage event processing system for unstructured data with rich\nsupport for structural pattern matching, filtering and transformation\n",
);

/**
 * Remote GUI for transmission-daemon
 */
export const tremotesf = mkPackage(
  nixRaw`pkgs.tremotesf`,
  "Remote GUI for transmission-daemon",
);

/**
 * Level editor for Quake-engine based games
 */
export const trenchbroom = mkPackage(
  nixRaw`pkgs.trenchbroom`,
  "Level editor for Quake-engine based games",
);

/**
 * Using Trezor as hardware SSH agent
 */
export const trezor_agent = mkPackage(
  nixRaw`pkgs.trezor_agent`,
  "Using Trezor as hardware SSH agent",
);

/**
 * Trezor Suite - Desktop App for managing crypto
 */
export const trezor_suite = mkPackage(
  nixRaw`pkgs.trezor-suite`,
  "Trezor Suite - Desktop App for managing crypto",
);

/**
 * Udev rules for Trezor
 */
export const trezor_udev_rules = mkPackage(
  nixRaw`pkgs.trezor-udev-rules`,
  "Udev rules for Trezor",
);

/**
 * Python library for communicating with Trezor Hardware Wallet
 */
export const trezorctl = mkPackage(
  nixRaw`pkgs.trezorctl`,
  "Python library for communicating with Trezor Hardware Wallet",
);

/**
 * Trezor Communication Daemon aka Trezor Bridge
 */
export const trezord = mkPackage(
  nixRaw`pkgs.trezord`,
  "Trezor Communication Daemon aka Trezor Bridge",
);

/**
 * Tandem Repeats Finder: a program to analyze DNA sequences
 */
export const trf = mkPackage(
  nixRaw`pkgs.trf`,
  "Tandem Repeats Finder: a program to analyze DNA sequences",
);

/**
 * Decentralised P2P filesharing client based on the Bittorrent protocol
 */
export const tribler = mkPackage(
  nixRaw`pkgs.tribler`,
  "Decentralised P2P filesharing client based on the Bittorrent protocol",
);

/**
 * Lightweight userspace bandwidth shaper
 */
export const trickle = mkPackage(
  nixRaw`pkgs.trickle`,
  "Lightweight userspace bandwidth shaper",
);

/**
 * Reverse proxy cache and time series dashboard accelerator
 */
export const trickster = mkPackage(
  nixRaw`pkgs.trickster`,
  "Reverse proxy cache and time series dashboard accelerator",
);

/**
 * Native messenger for Tridactyl, a vim-like Firefox webextension
 */
export const tridactyl_native = mkPackage(
  nixRaw`pkgs.tridactyl-native`,
  "Native messenger for Tridactyl, a vim-like Firefox webextension",
);

/**
 * Order-preserving minimal perfect hash function generator
 */
export const triehash = mkPackage(
  nixRaw`pkgs.triehash`,
  "Order-preserving minimal perfect hash function generator",
);

/**
 * A fast-paced single-player racing game
 */
export const trigger = mkPackage(
  nixRaw`pkgs.trigger`,
  "A fast-paced single-player racing game",
);

/**
 * Control the dualsense's triggers on Linux (and Windows) with a gui and C++ api
 */
export const trigger_control = mkPackage(
  nixRaw`pkgs.trigger-control`,
  "Control the dualsense's triggers on Linux (and Windows) with a gui and C++ api",
);

/**
 * A lightweight hotkey daemon
 */
export const triggerhappy = mkPackage(
  nixRaw`pkgs.triggerhappy`,
  "A lightweight hotkey daemon",
);

/**
 * Engineering and scientific problems algorithms
 */
export const trilinos = mkPackage(
  nixRaw`pkgs.trilinos`,
  "Engineering and scientific problems algorithms",
);

/**
 * Engineering and scientific problems algorithms
 */
export const trilinos_mpi = mkPackage(
  nixRaw`pkgs.trilinos-mpi`,
  "Engineering and scientific problems algorithms",
);

/**
 * Hierarchical note taking application with focus on building large personal knowledge bases
 */
export const trilium_desktop = mkPackage(
  nixRaw`pkgs.trilium-desktop`,
  "Hierarchical note taking application with focus on building large personal knowledge bases",
);

/**
 * Hierarchical note taking application with focus on building large personal knowledge bases
 */
export const trilium_server = mkPackage(
  nixRaw`pkgs.trilium-server`,
  "Hierarchical note taking application with focus on building large personal knowledge bases",
);

/**
 * A transparent, highly scalable and cryptographically verifiable data store.
 */
export const trillian = mkPackage(
  nixRaw`pkgs.trillian`,
  "A transparent, highly scalable and cryptographically verifiable data store.",
);

/**
 * Modern instant messaging for home and work that prioritizes chat interoperability and security
 */
export const trillian_im = mkPackage(
  nixRaw`pkgs.trillian-im`,
  "Modern instant messaging for home and work that prioritizes chat interoperability and security",
);

/**
 * A cross-platform tool for optimizing PNG and JPG files
 */
export const trimage = mkPackage(
  nixRaw`pkgs.trimage`,
  "A cross-platform tool for optimizing PNG and JPG files",
);

/**
 * A tool for the automated removal of spurious sequences or poorly aligned regions from a multiple sequence alignment
 */
export const trimal = mkPackage(
  nixRaw`pkgs.trimal`,
  "A tool for the automated removal of spurious sequences or poorly aligned regions from a multiple sequence alignment",
);

/**
 * A flexible read trimming tool for Illumina NGS data
 */
export const trimmomatic = mkPackage(
  nixRaw`pkgs.trimmomatic`,
  "A flexible read trimming tool for Illumina NGS data",
);

/**
 * A Linux System call fuzz tester
 */
export const trinity = mkPackage(
  nixRaw`pkgs.trinity`,
  "A Linux System call fuzz tester",
);

/**
 * The Trino CLI provides a terminal-based, interactive shell for running queries
 */
export const trino_cli = mkPackage(
  nixRaw`pkgs.trino-cli`,
  "The Trino CLI provides a terminal-based, interactive shell for running queries",
);

/**
 * Trinsic CLI
 */
export const trinsic_cli = mkPackage(
  nixRaw`pkgs.trinsic-cli`,
  "Trinsic CLI",
);

/**
 * A network diagnostic tool
 */
export const trippy = mkPackage(
  nixRaw`pkgs.trippy`,
  "A network diagnostic tool",
);

/**
 * TritonDataCenter Client CLI and Node.js SDK
 */
export const triton = mkPackage(
  nixRaw`pkgs.triton`,
  "TritonDataCenter Client CLI and Node.js SDK",
);

/**
 * A simple and comprehensive vulnerability scanner for containers, suitable for CI
 */
export const trivy = mkPackage(
  nixRaw`pkgs.trivy`,
  "A simple and comprehensive vulnerability scanner for containers, suitable for CI",
);

/**
 * A Qt IMAP e-mail client
 */
export const trojita = mkPackage(
  nixRaw`pkgs.trojita`,
  "A Qt IMAP e-mail client",
);

/**
 * Header only C++14 mocking framework
 */
export const trompeloeil = mkPackage(
  nixRaw`pkgs.trompeloeil`,
  "Header only C++14 mocking framework",
);

/**
 * Trusted computing software stack
 */
export const trousers = mkPackage(
  nixRaw`pkgs.trousers`,
  "Trusted computing software stack",
);

/**
 * TrueCrack is a brute-force password cracker for TrueCrypt volumes. It works on Linux and it is optimized for Nvidia Cuda technology.
 */
export const truecrack = mkPackage(
  nixRaw`pkgs.truecrack`,
  "TrueCrack is a brute-force password cracker for TrueCrypt volumes. It works on Linux and it is optimized for Nvidia Cuda technology.",
);

/**
 * Non-decompiling Android vulnerability scanner
 */
export const trueseeing = mkPackage(
  nixRaw`pkgs.trueseeing`,
  "Non-decompiling Android vulnerability scanner",
);

/**
 * Find credentials all over the place
 */
export const trufflehog = mkPackage(
  nixRaw`pkgs.trufflehog`,
  "Find credentials all over the place",
);

/**
 * Build, bundle & ship your Rust WASM application to the web
 */
export const trunk = mkPackage(
  nixRaw`pkgs.trunk`,
  "Build, bundle & ship your Rust WASM application to the web",
);

/**
 * Developer experience toolkit used to check, test, merge, and monitor code
 */
export const trunk_io = mkPackage(
  nixRaw`pkgs.trunk-io`,
  "Developer experience toolkit used to check, test, merge, and monitor code",
);

/**
 * Build, bundle & ship your Rust WASM application to the web
 */
export const trunk_ng = mkPackage(
  nixRaw`pkgs.trunk-ng`,
  "Build, bundle & ship your Rust WASM application to the web",
);

/**
 * A command line tool for URL parsing and manipulation
 */
export const trurl = mkPackage(
  nixRaw`pkgs.trurl`,
  "A command line tool for URL parsing and manipulation",
);

/**
 * A Rust based DNS client, server, and resolver
 */
export const trust_dns = mkPackage(
  nixRaw`pkgs.trust-dns`,
  "A Rust based DNS client, server, and resolver",
);

/**
 * Software for using the ARRL Logbook of the World
 */
export const trustedqsl = mkPackage(
  nixRaw`pkgs.trustedqsl`,
  "Software for using the ARRL Logbook of the World",
);

/**
 * Tool to scan domains and return data based on trustworthy email best practices
 */
export const trustymail = mkPackage(
  nixRaw`pkgs.trustymail`,
  "Tool to scan domains and return data based on trustworthy email best practices",
);

/**
 * Structural variant comparison tool for VCFs
 */
export const truvari = mkPackage(
  nixRaw`pkgs.truvari`,
  "Structural variant comparison tool for VCFs",
);

/**
 * A simple toolset for broadcasting live audio using RTP/UDP and Opus
 */
export const trx = mkPackage(
  nixRaw`pkgs.trx`,
  "A simple toolset for broadcasting live audio using RTP/UDP and Opus",
);

/**
 * Lets you run a command and inspect its effects before changing your live system
 */
export const try_ = mkPackage(
  nixRaw`pkgs.try`,
  "Lets you run a command and inspect its effects before changing your live system",
);

/**
 * The client of the Tryton application platform
 */
export const tryton = mkPackage(
  nixRaw`pkgs.tryton`,
  "The client of the Tryton application platform",
);

/**
 * The server of the Tryton application platform
 */
export const trytond = mkPackage(
  nixRaw`pkgs.trytond`,
  "The server of the Tryton application platform",
);

/**
 * Task spooler - batch queue
 */
export const ts = mkPackage(
  nixRaw`pkgs.ts`,
  "Task spooler - batch queue",
);

/**
 * The MPEG Transport Stream Toolkit
 */
export const tsduck = mkPackage(
  nixRaw`pkgs.tsduck`,
  "The MPEG Transport Stream Toolkit",
);

/**
 * Powerful network protocol analyzer
 */
export const tshark = mkPackage(
  nixRaw`pkgs.tshark`,
  "Powerful network protocol analyzer",
);

/**
 * IBM Storage Protect (Tivoli Storage Manager) CLI and API
 */
export const tsm_client = mkPackage(
  nixRaw`pkgs.tsm-client`,
  "IBM Storage Protect (Tivoli Storage Manager) CLI and API",
);

/**
 * IBM Storage Protect (Tivoli Storage Manager) CLI and API
 */
export const tsm_client_withGui = mkPackage(
  nixRaw`pkgs.tsm-client-withGui`,
  "IBM Storage Protect (Tivoli Storage Manager) CLI and API",
);

/**
 * Transparent SOCKS v4 proxying library
 */
export const tsocks = mkPackage(
  nixRaw`pkgs.tsocks`,
  "Transparent SOCKS v4 proxying library",
);

/**
 * Show off your most used shell commands.
 */
export const tsukae = mkPackage(
  nixRaw`pkgs.tsukae`,
  "Show off your most used shell commands.",
);

/**
 * A high-performance benchmark framework for various protocols including HTTP, XMPP, LDAP, etc
 */
export const tsung = mkPackage(
  nixRaw`pkgs.tsung`,
  "A high-performance benchmark framework for various protocols including HTTP, XMPP, LDAP, etc",
);

/**
 * An advanced, open source, hyperrealistic, multilingual typewriter font for a new decade
 */
export const tt2020 = mkPackage(
  nixRaw`pkgs.tt2020`,
  "An advanced, open source, hyperrealistic, multilingual typewriter font for a new decade",
);

/**
 * Web-based news feed (RSS/Atom) aggregator
 */
export const tt_rss = mkPackage(
  nixRaw`pkgs.tt-rss`,
  "Web-based news feed (RSS/Atom) aggregator",
);

/**
 * Plugin for TT-RSS to authenticate users via ldap
 */
export const tt_rss_plugin_auth_ldap = mkPackage(
  nixRaw`pkgs.tt-rss-plugin-auth-ldap`,
  "Plugin for TT-RSS to authenticate users via ldap",
);

/**
 * Evolution of ttrss_plugin-af_feedmod
 */
export const tt_rss_plugin_feediron = mkPackage(
  nixRaw`pkgs.tt-rss-plugin-feediron`,
  "Evolution of ttrss_plugin-af_feedmod",
);

/**
 * Plugin for Tiny Tiny RSS that allows to fetch posts from Instagram user sites
 */
export const tt_rss_plugin_ff_instagram = mkPackage(
  nixRaw`pkgs.tt-rss-plugin-ff-instagram`,
  "Plugin for Tiny Tiny RSS that allows to fetch posts from Instagram user sites",
);

/**
 * Feedly theme for Tiny Tiny RSS
 */
export const tt_rss_theme_feedly = mkPackage(
  nixRaw`pkgs.tt-rss-theme-feedly`,
  "Feedly theme for Tiny Tiny RSS",
);

/**
 * Generate tags using tree-sitter
 */
export const ttags = mkPackage(
  nixRaw`pkgs.ttags`,
  "Generate tags using tree-sitter",
);

/**
 * Connect to a Twitch channel's chat from your terminal
 */
export const ttchat = mkPackage(
  nixRaw`pkgs.ttchat`,
  "Connect to a Twitch channel's chat from your terminal",
);

/**
 * A CLI tool to manage todo lists in todo.txt format
 */
export const ttdl = mkPackage(
  nixRaw`pkgs.ttdl`,
  "A CLI tool to manage todo lists in todo.txt format",
);

/**
 * True Type to Postscript Type 3 converter, fpdf
 */
export const ttf2pt1 = mkPackage(
  nixRaw`pkgs.ttf2pt1`,
  "True Type to Postscript Type 3 converter, fpdf",
);

export const ttf_bitstream_vera = mkPackage(
  nixRaw`pkgs.ttf_bitstream_vera`,
  "",
);

/**
 * Free scalable coding font by DamienG
 */
export const ttf_envy_code_r = mkPackage(
  nixRaw`pkgs.ttf-envy-code-r`,
  "Free scalable coding font by DamienG",
);

/**
 * Set of KAI and SONG fonts from the Ministry of Education of Taiwan
 */
export const ttf_tw_moe = mkPackage(
  nixRaw`pkgs.ttf-tw-moe`,
  "Set of KAI and SONG fonts from the Ministry of Education of Taiwan",
);

/**
 * An automatic hinter for TrueType fonts
 */
export const ttfautohint = mkPackage(
  nixRaw`pkgs.ttfautohint`,
  "An automatic hinter for TrueType fonts",
);

/**
 * An automatic hinter for TrueType fonts
 */
export const ttfautohint_nox = mkPackage(
  nixRaw`pkgs.ttfautohint-nox`,
  "An automatic hinter for TrueType fonts",
);

/**
 * CLI-Tool to measure the TTFB (time to first byte) of HTTP(S) requests
 */
export const ttfb = mkPackage(
  nixRaw`pkgs.ttfb`,
  "CLI-Tool to measure the TTFB (time to first byte) of HTTP(S) requests",
);

/**
 * An md5sum-alike program that works with Tiger/THEX hashes
 */
export const tthsum = mkPackage(
  nixRaw`pkgs.tthsum`,
  "An md5sum-alike program that works with Tiger/THEX hashes",
);

/**
 * Create fonts.dir for TTF font directory
 */
export const ttmkfdir = mkPackage(
  nixRaw`pkgs.ttmkfdir`,
  "Create fonts.dir for TTF font directory",
);

/**
 * Top-like system monitoring tool
 */
export const ttop = mkPackage(
  nixRaw`pkgs.ttop`,
  "Top-like system monitoring tool",
);

/**
 * Template Text Parser
 */
export const ttp = mkPackage(
  nixRaw`pkgs.ttp`,
  "Template Text Parser",
);

/**
 * Deep learning toolkit for Text-to-Speech, battle-tested in research and production
 */
export const tts = mkPackage(
  nixRaw`pkgs.tts`,
  "Deep learning toolkit for Text-to-Speech, battle-tested in research and production",
);

/**
 * Linux TomTom GPS Watch Utilities
 */
export const ttwatch = mkPackage(
  nixRaw`pkgs.ttwatch`,
  "Linux TomTom GPS Watch Utilities",
);

/**
 * Digital clock in ncurses
 */
export const tty_clock = mkPackage(
  nixRaw`pkgs.tty-clock`,
  "Digital clock in ncurses",
);

/**
 * Share terminal via browser for remote work or shared sessions
 */
export const tty_share = mkPackage(
  nixRaw`pkgs.tty-share`,
  "Share terminal via browser for remote work or shared sessions",
);

/**
 * Klondike Solitaire in your ncurses terminal
 */
export const tty_solitaire = mkPackage(
  nixRaw`pkgs.tty-solitaire`,
  "Klondike Solitaire in your ncurses terminal",
);

/**
 * Share your terminal over the web
 */
export const ttyd = mkPackage(
  nixRaw`pkgs.ttyd`,
  "Share your terminal over the web",
);

/**
 * Convert terminal recordings to animated gifs
 */
export const ttygif = mkPackage(
  nixRaw`pkgs.ttygif`,
  "Convert terminal recordings to animated gifs",
);

/**
 * Simple serial port logger
 */
export const ttylog = mkPackage(
  nixRaw`pkgs.ttylog`,
  "Simple serial port logger",
);

/**
 * Terminal-based typing test
 */
export const ttyper = mkPackage(
  nixRaw`pkgs.ttyper`,
  "Terminal-based typing test",
);

/**
 * A simple general purpose plotting utility for tty with data input from stdin
 */
export const ttyplot = mkPackage(
  nixRaw`pkgs.ttyplot`,
  "A simple general purpose plotting utility for tty with data input from stdin",
);

/**
 * Browse the Fediverse
 */
export const tuba = mkPackage(
  nixRaw`pkgs.tuba`,
  "Browse the Fediverse",
);

/**
 * Kubectl alternative with quick context switching
 */
export const tubekit = mkPackage(
  nixRaw`pkgs.tubekit`,
  "Kubectl alternative with quick context switching",
);

/**
 * Kubectl alternative with quick context switching
 */
export const tubekit_unwrapped = mkPackage(
  nixRaw`pkgs.tubekit-unwrapped`,
  "Kubectl alternative with quick context switching",
);

/**
 * When cut doesn't cut it
 */
export const tuc = mkPackage(
  nixRaw`pkgs.tuc`,
  "When cut doesn't cut it",
);

/**
 * A super powered replacement for GNU Stow
 */
export const tuckr = mkPackage(
  nixRaw`pkgs.tuckr`,
  "A super powered replacement for GNU Stow",
);

/**
 * ncurses-based hierarchical todo list manager with vim-like keybindings
 */
export const tudu = mkPackage(
  nixRaw`pkgs.tudu`,
  "ncurses-based hierarchical todo list manager with vim-like keybindings",
);

/**
 * DBus daemon to access Wacom SmartPad devices
 */
export const tuhi = mkPackage(
  nixRaw`pkgs.tuhi`,
  "DBus daemon to access Wacom SmartPad devices",
);

/**
 * Your journal app if you live in a terminl
 */
export const tui_journal = mkPackage(
  nixRaw`pkgs.tui-journal`,
  "Your journal app if you live in a terminl",
);

/**
 * Delicately-TUICed 0-RTT proxy protocol
 */
export const tuic = mkPackage(
  nixRaw`pkgs.tuic`,
  "Delicately-TUICed 0-RTT proxy protocol",
);

/**
 * A terminal feed reader with a fancy UI
 */
export const tuifeed = mkPackage(
  nixRaw`pkgs.tuifeed`,
  "A terminal feed reader with a fancy UI",
);

/**
 * A cross-platform terminal-based termux-oriented file manager
 */
export const tuifimanager = mkPackage(
  nixRaw`pkgs.tuifimanager`,
  "A cross-platform terminal-based termux-oriented file manager",
);

/**
 * Browse Reddit from your Terminal (fork of rtv)
 */
export const tuir = mkPackage(
  nixRaw`pkgs.tuir`,
  "Browse Reddit from your Terminal (fork of rtv)",
);

/**
 * A visualization framework for the analysis and visualization of relational data
 */
export const tulip = mkPackage(
  nixRaw`pkgs.tulip`,
  "A visualization framework for the analysis and visualization of relational data",
);

/**
 * Sticky 2D shooter
 */
export const tumiki_fighters = mkPackage(
  nixRaw`pkgs.tumiki-fighters`,
  "Sticky 2D shooter",
);

/**
 * tun2socks - powered by gVisor TCP/IP stack
 */
export const tun2socks = mkPackage(
  nixRaw`pkgs.tun2socks`,
  "tun2socks - powered by gVisor TCP/IP stack",
);

/**
 * Thread and IRQ affinity setting GUI and cmd line tool
 */
export const tuna = mkPackage(
  nixRaw`pkgs.tuna`,
  "Thread and IRQ affinity setting GUI and cmd line tool",
);

/**
 * Utility to set up and maintain TUN/TAP network interfaces
 */
export const tunctl = mkPackage(
  nixRaw`pkgs.tunctl`,
  "Utility to set up and maintain TUN/TAP network interfaces",
);

/**
 * Virtual analog synthesizer LV2 plugin
 */
export const tunefish = mkPackage(
  nixRaw`pkgs.tunefish`,
  "Virtual analog synthesizer LV2 plugin",
);

/**
 * An app to discover and play internet radio stations
 */
export const tuner = mkPackage(
  nixRaw`pkgs.tuner`,
  "An app to discover and play internet radio stations",
);

/**
 * Expose your local web server to the internet with a public URL
 */
export const tunnelto = mkPackage(
  nixRaw`pkgs.tunnelto`,
  "Expose your local web server to the internet with a public URL",
);

/**
 * A program for drawing cave surveys in 2D
 */
export const tunnelx = mkPackage(
  nixRaw`pkgs.tunnelx`,
  "A program for drawing cave surveys in 2D",
);

/**
 * Tunnel TCP connections over the Tox protocol
 */
export const tuntox = mkPackage(
  nixRaw`pkgs.tuntox`,
  "Tunnel TCP connections over the Tox protocol",
);

/**
 * Secure private tunnel to your local servers
 */
export const tunwg = mkPackage(
  nixRaw`pkgs.tunwg`,
  "Secure private tunnel to your local servers",
);

/**
 * A fast, file-based build system
 */
export const tup = mkPackage(
  nixRaw`pkgs.tup`,
  "A fast, file-based build system",
);

/**
 * Total uptime & downtime statistics utility
 */
export const tuptime = mkPackage(
  nixRaw`pkgs.tuptime`,
  "Total uptime & downtime statistics utility",
);

/**
 * High-performance build system for JavaScript and TypeScript codebases
 */
export const turbo = mkPackage(
  nixRaw`pkgs.turbo`,
  "High-performance build system for JavaScript and TypeScript codebases",
);

/**
 * Keep your git workflow clean without headache.
 */
export const turbogit = mkPackage(
  nixRaw`pkgs.turbogit`,
  "Keep your git workflow clean without headache.",
);

/**
 * High-speed version of VNC derived from TightVNC
 */
export const turbovnc = mkPackage(
  nixRaw`pkgs.turbovnc`,
  "High-speed version of VNC derived from TightVNC",
);

/**
 * A Twitter client for the console
 */
export const turses = mkPackage(
  nixRaw`pkgs.turses`,
  "A Twitter client for the console",
);

/**
 * This is the command line interface (CLI) to Turso.
 */
export const turso_cli = mkPackage(
  nixRaw`pkgs.turso-cli`,
  "This is the command line interface (CLI) to Turso.",
);

/**
 * Ninja-compatible build system for high-level programming languages written in Rust
 */
export const turtle_build = mkPackage(
  nixRaw`pkgs.turtle-build`,
  "Ninja-compatible build system for high-level programming languages written in Rust",
);

/**
 * Tus 1.0.0 client protocol implementation for bash
 */
export const tusc_sh = mkPackage(
  nixRaw`pkgs.tusc-sh`,
  "Tus 1.0.0 client protocol implementation for bash",
);

/**
 * Refined Evernote desktop app
 */
export const tusk = mkPackage(
  nixRaw`pkgs.tusk`,
  "Refined Evernote desktop app",
);

/**
 * A TUI for Mastodon with vim inspired keys
 */
export const tut = mkPackage(
  nixRaw`pkgs.tut`,
  "A TUI for Mastodon with vim inspired keys",
);

/**
 * Tutanota official desktop client
 */
export const tutanota_desktop = mkPackage(
  nixRaw`pkgs.tutanota-desktop`,
  "Tutanota official desktop client",
);

/**
 * Rust utilities for interacting with hardware from TUXEDO Computers
 */
export const tuxedo_rs = mkPackage(
  nixRaw`pkgs.tuxedo-rs`,
  "Rust utilities for interacting with hardware from TUXEDO Computers",
);

/**
 * A multitrack guitar tablature editor
 */
export const tuxguitar = mkPackage(
  nixRaw`pkgs.tuxguitar`,
  "A multitrack guitar tablature editor",
);

/**
 * Tmux session manager
 */
export const tuxmux = mkPackage(
  nixRaw`pkgs.tuxmux`,
  "Tmux session manager",
);

/**
 * Open Source Drawing Software for Children
 */
export const tuxpaint = mkPackage(
  nixRaw`pkgs.tuxpaint`,
  "Open Source Drawing Software for Children",
);

/**
 * An Educational Typing Tutor Game Starring Tux, the Linux Penguin
 */
export const tuxtype = mkPackage(
  nixRaw`pkgs.tuxtype`,
  "An Educational Typing Tutor Game Starring Tux, the Linux Penguin",
);

/**
 * Format json into table view
 */
export const tv = mkPackage(
  nixRaw`pkgs.tv`,
  "Format json into table view",
);

/**
 * Electronic TV Program Guide
 */
export const tvbrowser = mkPackage(
  nixRaw`pkgs.tvbrowser`,
  "Electronic TV Program Guide",
);

/**
 * TV streaming server and digital video recorder
 */
export const tvheadend = mkPackage(
  nixRaw`pkgs.tvheadend`,
  "TV streaming server and digital video recorder",
);

/**
 * An End to End Deep Learning Compiler Stack for CPUs, GPUs and accelerators
 */
export const tvm = mkPackage(
  nixRaw`pkgs.tvm`,
  "An End to End Deep Learning Compiler Stack for CPUs, GPUs and accelerators",
);

/**
 * Automatic TV episode file renamer, uses data from thetvdb.com via tvdb_api.
 */
export const tvnamer = mkPackage(
  nixRaw`pkgs.tvnamer`,
  "Automatic TV episode file renamer, uses data from thetvdb.com via tvdb_api.",
);

/**
 * A tiny web auditor with strong opinions
 */
export const twa = mkPackage(
  nixRaw`pkgs.twa`,
  "A tiny web auditor with strong opinions",
);

/**
 * An efficient hex editor
 */
export const tweak = mkPackage(
  nixRaw`pkgs.tweak`,
  "An efficient hex editor",
);

/**
 * A modern C++ tweening library
 */
export const tweeny = mkPackage(
  nixRaw`pkgs.tweeny`,
  "A modern C++ tweening library",
);

/**
 * Command-line tool for twitter
 */
export const tweet_hs = mkPackage(
  nixRaw`pkgs.tweet-hs`,
  "Command-line tool for twitter",
);

/**
 * Logic proof assistant
 */
export const twelf = mkPackage(
  nixRaw`pkgs.twelf`,
  "Logic proof assistant",
);

/**
 * Color emoji SVGinOT font using Twitter Unicode 10 emoji with diversity and country flags
 */
export const twemoji_color_font = mkPackage(
  nixRaw`pkgs.twemoji-color-font`,
  "Color emoji SVGinOT font using Twitter Unicode 10 emoji with diversity and country flags",
);

/**
 * A code size profiler for Wasm
 */
export const twiggy = mkPackage(
  nixRaw`pkgs.twiggy`,
  "A code size profiler for Wasm",
);

/**
 * Redo of IRIX twilight backdrop in old school OpenGL
 */
export const twilight = mkPackage(
  nixRaw`pkgs.twilight`,
  "Redo of IRIX twilight backdrop in old school OpenGL",
);

/**
 * Unleash the power of Twilio from your command prompt
 */
export const twilio_cli = mkPackage(
  nixRaw`pkgs.twilio-cli`,
  "Unleash the power of Twilio from your command prompt",
);

/**
 * Collection of utilities for interacting with PyPI
 */
export const twine = mkPackage(
  nixRaw`pkgs.twine`,
  "Collection of utilities for interacting with PyPI",
);

/**
 * Twingate Client
 */
export const twingate = mkPackage(
  nixRaw`pkgs.twingate`,
  "Twingate Client",
);

/**
 * A SIP-based VoIP client
 */
export const twinkle = mkPackage(
  nixRaw`pkgs.twinkle`,
  "A SIP-based VoIP client",
);

/**
 * Twitch Chat Downloader
 */
export const twitch_chat_downloader = mkPackage(
  nixRaw`pkgs.twitch-chat-downloader`,
  "Twitch Chat Downloader",
);

/**
 * The official Twitch CLI to make developing on Twitch easier
 */
export const twitch_cli = mkPackage(
  nixRaw`pkgs.twitch-cli`,
  "The official Twitch CLI to make developing on Twitch easier",
);

/**
 * CLI tool for downloading videos from Twitch
 */
export const twitch_dl = mkPackage(
  nixRaw`pkgs.twitch-dl`,
  "CLI tool for downloading videos from Twitch",
);

/**
 * Twitch chat in the terminal
 */
export const twitch_tui = mkPackage(
  nixRaw`pkgs.twitch-tui`,
  "Twitch chat in the terminal",
);

/**
 * Front-end framework for faster and easier web development
 */
export const twitterBootstrap = mkPackage(
  nixRaw`pkgs.twitterBootstrap`,
  "Front-end framework for faster and easier web development",
);

/**
 * Color emoji font with a flat visual style, designed and used by Twitter
 */
export const twitter_color_emoji = mkPackage(
  nixRaw`pkgs.twitter-color-emoji`,
  "Color emoji font with a flat visual style, designed and used by Twitter",
);

/**
 * A customizable workspace manager for tmux
 */
export const twm = mkPackage(
  nixRaw`pkgs.twm`,
  "A customizable workspace manager for tmux",
);

/**
 * A notification system for tiling window managers
 */
export const twmn = mkPackage(
  nixRaw`pkgs.twmn`,
  "A notification system for tiling window managers",
);

/**
 * A MP2 encoder
 */
export const twolame = mkPackage(
  nixRaw`pkgs.twolame`,
  "A MP2 encoder",
);

/**
 * Script to monitor & download Twitter Spaces 24/7
 */
export const twspace_crawler = mkPackage(
  nixRaw`pkgs.twspace-crawler`,
  "Script to monitor & download Twitter Spaces 24/7",
);

/**
 * A python module to download twitter spaces
 */
export const twspace_dl = mkPackage(
  nixRaw`pkgs.twspace-dl`,
  "A python module to download twitter spaces",
);

/**
 * Decentralised, minimalist microblogging service for hackers
 */
export const twtxt = mkPackage(
  nixRaw`pkgs.twtxt`,
  "Decentralised, minimalist microblogging service for hackers",
);

/**
 * OAuth-enabled curl for the Twitter API
 */
export const twurl = mkPackage(
  nixRaw`pkgs.twurl`,
  "OAuth-enabled curl for the Twitter API",
);

/**
 * An Original, New Programming Language for Convenient Data Munging
 */
export const txr = mkPackage(
  nixRaw`pkgs.txr`,
  "An Original, New Programming Language for Convenient Data Munging",
);

/**
 * Convert flat ASCII text to man page format
 */
export const txt2man = mkPackage(
  nixRaw`pkgs.txt2man`,
  "Convert flat ASCII text to man page format",
);

/**
 * Convert between markup languages
 */
export const txt2tags = mkPackage(
  nixRaw`pkgs.txt2tags`,
  "Convert between markup languages",
);

/**
 * Formatter for text proto files
 */
export const txtpbfmt = mkPackage(
  nixRaw`pkgs.txtpbfmt`,
  "Formatter for text proto files",
);

/**
 * Compute text widths
 */
export const txtw = mkPackage(
  nixRaw`pkgs.txtw`,
  "Compute text widths",
);

/**
 * Shortcut menu-based task runner, inspired by Emacs Hydra
 */
export const tydra = mkPackage(
  nixRaw`pkgs.tydra`,
  "Shortcut menu-based task runner, inspired by Emacs Hydra",
);

/**
 * Lua-configurable terminal emulator
 */
export const tym = mkPackage(
  nixRaw`pkgs.tym`,
  "Lua-configurable terminal emulator",
);

/**
 * Typing test in your terminal
 */
export const typer = mkPackage(
  nixRaw`pkgs.typer`,
  "Typing test in your terminal",
);

/**
 * A superset of JavaScript that compiles to clean JavaScript output
 */
export const typescript = mkPackage(
  nixRaw`pkgs.typescript`,
  "A superset of JavaScript that compiles to clean JavaScript output",
);

/**
 * Typesense is a fast, typo-tolerant search engine for building delightful search experiences.
 */
export const typesense = mkPackage(
  nixRaw`pkgs.typesense`,
  "Typesense is a fast, typo-tolerant search engine for building delightful search experiences.",
);

/**
 * Command Line Tool for generating language files with typeshare
 */
export const typeshare = mkPackage(
  nixRaw`pkgs.typeshare`,
  "Command Line Tool for generating language files with typeshare",
);

/**
 * A curses based typing game
 */
export const typespeed = mkPackage(
  nixRaw`pkgs.typespeed`,
  "A curses based typing game",
);

/**
 * Data interchange with algebraic data types
 */
export const typical = mkPackage(
  nixRaw`pkgs.typical`,
  "Data interchange with algebraic data types",
);

/**
 * Cozy typing speed tester in terminal
 */
export const typioca = mkPackage(
  nixRaw`pkgs.typioca`,
  "Cozy typing speed tester in terminal",
);

/**
 * A markdown editor, a markdown reader
 */
export const typora = mkPackage(
  nixRaw`pkgs.typora`,
  "A markdown editor, a markdown reader",
);

/**
 * Source code spell checker
 */
export const typos = mkPackage(
  nixRaw`pkgs.typos`,
  "Source code spell checker",
);

/**
 * A new markup-based typesetting system that is powerful and easy to learn
 */
export const typst = mkPackage(
  nixRaw`pkgs.typst`,
  "A new markup-based typesetting system that is powerful and easy to learn",
);

/**
 * Hot reloading for your typst files
 */
export const typst_live = mkPackage(
  nixRaw`pkgs.typst-live`,
  "Hot reloading for your typst files",
);

/**
 * A brand-new language server for Typst
 */
export const typst_lsp = mkPackage(
  nixRaw`pkgs.typst-lsp`,
  "A brand-new language server for Typst",
);

/**
 * A formatter for the Typst language
 */
export const typstfmt = mkPackage(
  nixRaw`pkgs.typstfmt`,
  "A formatter for the Typst language",
);

/**
 * TypeScript as a configuration language
 */
export const tyson = mkPackage(
  nixRaw`pkgs.tyson`,
  "TypeScript as a configuration language",
);

/**
 * Collection of tools to manage Teensy boards
 */
export const tytools = mkPackage(
  nixRaw`pkgs.tytools`,
  "Collection of tools to manage Teensy boards",
);

/**
 * A time zone helper
 */
export const tz = mkPackage(
  nixRaw`pkgs.tz`,
  "A time zone helper",
);

/**
 * Database of current and historical time zones
 */
export const tzdata = mkPackage(
  nixRaw`pkgs.tzdata`,
  "Database of current and historical time zones",
);

/**
 * Update timezone information based on geoip
 */
export const tzupdate = mkPackage(
  nixRaw`pkgs.tzupdate`,
  "Update timezone information based on geoip",
);

/**
 * A Univers-like typeface that comes with GhostPDL made by URW++
 */
export const u001_font = mkPackage(
  nixRaw`pkgs.u001-font`,
  "A Univers-like typeface that comes with GhostPDL made by URW++",
);

/**
 * Unicode text to postscript converter
 */
export const u2ps = mkPackage(
  nixRaw`pkgs.u2ps`,
  "Unicode text to postscript converter",
);

/**
 * Tool for controlling the special features of a 'U3 smart drive' USB Flash disk
 */
export const u3_tool = mkPackage(
  nixRaw`pkgs.u3-tool`,
  "Tool for controlling the special features of a 'U3 smart drive' USB Flash disk",
);

/**
 * Serve 9P from Unix
 */
export const u9fs = mkPackage(
  nixRaw`pkgs.u9fs`,
  "Serve 9P from Unix",
);

/**
 * Universal Aggregator
 */
export const ua = mkPackage(
  nixRaw`pkgs.ua`,
  "Universal Aggregator",
);

/**
 * ACMEv2 client written in plain C with minimal dependencies
 */
export const uacme = mkPackage(
  nixRaw`pkgs.uacme`,
  "ACMEv2 client written in plain C with minimal dependencies",
);

/**
 * Plays old Amiga tunes through UAE emulation and cloned m68k-assembler Eagleplayer API
 */
export const uade = mkPackage(
  nixRaw`pkgs.uade`,
  "Plays old Amiga tunes through UAE emulation and cloned m68k-assembler Eagleplayer API",
);

/**
 * Ultimate/Unix/Unusable Amiga Emulator
 */
export const uae = mkPackage(
  nixRaw`pkgs.uae`,
  "Ultimate/Unix/Unusable Amiga Emulator",
);

/**
 * An extensible pomodoro timer
 */
export const uair = mkPackage(
  nixRaw`pkgs.uair`,
  "An extensible pomodoro timer",
);

/**
 * universal Association Rule Mining Solver
 */
export const uarmsolver = mkPackage(
  nixRaw`pkgs.uarmsolver`,
  "universal Association Rule Mining Solver",
);

/**
 * A free MASM-compatible assembler based on JWasm
 */
export const uasm = mkPackage(
  nixRaw`pkgs.uasm`,
  "A free MASM-compatible assembler based on JWasm",
);

/**
 * Open source wireless development platform suitable for Bluetooth experimentation
 */
export const ubertooth = mkPackage(
  nixRaw`pkgs.ubertooth`,
  "Open source wireless development platform suitable for Bluetooth experimentation",
);

/**
 * Collection of Python scripts for reading information about and extracting data from UBI and UBIFS images
 */
export const ubi_reader = mkPackage(
  nixRaw`pkgs.ubi_reader`,
  "Collection of Python scripts for reading information about and extracting data from UBI and UBIFS images",
);

/**
 * View or extract the contents of UBIFS images
 */
export const ubidump = mkPackage(
  nixRaw`pkgs.ubidump`,
  "View or extract the contents of UBIFS images",
);

/**
 * Boot loader for embedded systems
 */
export const ubootA20OlinuxinoLime = mkPackage(
  nixRaw`pkgs.ubootA20OlinuxinoLime`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootA20OlinuxinoLime2EMMC = mkPackage(
  nixRaw`pkgs.ubootA20OlinuxinoLime2EMMC`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootAmx335xEVM = mkPackage(
  nixRaw`pkgs.ubootAmx335xEVM`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootBananaPi = mkPackage(
  nixRaw`pkgs.ubootBananaPi`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootBananaPim3 = mkPackage(
  nixRaw`pkgs.ubootBananaPim3`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootBananaPim64 = mkPackage(
  nixRaw`pkgs.ubootBananaPim64`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootClearfog = mkPackage(
  nixRaw`pkgs.ubootClearfog`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootCubieboard2 = mkPackage(
  nixRaw`pkgs.ubootCubieboard2`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootGuruplug = mkPackage(
  nixRaw`pkgs.ubootGuruplug`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootJetsonTK1 = mkPackage(
  nixRaw`pkgs.ubootJetsonTK1`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootLibreTechCC = mkPackage(
  nixRaw`pkgs.ubootLibreTechCC`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootNanoPCT4 = mkPackage(
  nixRaw`pkgs.ubootNanoPCT4`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootNovena = mkPackage(
  nixRaw`pkgs.ubootNovena`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootOdroidC2 = mkPackage(
  nixRaw`pkgs.ubootOdroidC2`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootOdroidXU3 = mkPackage(
  nixRaw`pkgs.ubootOdroidXU3`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootOlimexA64Olinuxino = mkPackage(
  nixRaw`pkgs.ubootOlimexA64Olinuxino`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootOrangePi3 = mkPackage(
  nixRaw`pkgs.ubootOrangePi3`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootOrangePiPc = mkPackage(
  nixRaw`pkgs.ubootOrangePiPc`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootOrangePiZero = mkPackage(
  nixRaw`pkgs.ubootOrangePiZero`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootOrangePiZero2 = mkPackage(
  nixRaw`pkgs.ubootOrangePiZero2`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootOrangePiZeroPlus2H5 = mkPackage(
  nixRaw`pkgs.ubootOrangePiZeroPlus2H5`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootPcduino3Nano = mkPackage(
  nixRaw`pkgs.ubootPcduino3Nano`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootPine64 = mkPackage(
  nixRaw`pkgs.ubootPine64`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootPine64LTS = mkPackage(
  nixRaw`pkgs.ubootPine64LTS`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootPinebook = mkPackage(
  nixRaw`pkgs.ubootPinebook`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootPinebookPro = mkPackage(
  nixRaw`pkgs.ubootPinebookPro`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootQemuAarch64 = mkPackage(
  nixRaw`pkgs.ubootQemuAarch64`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootQemuArm = mkPackage(
  nixRaw`pkgs.ubootQemuArm`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootQemuRiscv64Smode = mkPackage(
  nixRaw`pkgs.ubootQemuRiscv64Smode`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootQemuX86 = mkPackage(
  nixRaw`pkgs.ubootQemuX86`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootROCPCRK3399 = mkPackage(
  nixRaw`pkgs.ubootROCPCRK3399`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootRaspberryPi = mkPackage(
  nixRaw`pkgs.ubootRaspberryPi`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootRaspberryPi2 = mkPackage(
  nixRaw`pkgs.ubootRaspberryPi2`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootRaspberryPi3_32bit = mkPackage(
  nixRaw`pkgs.ubootRaspberryPi3_32bit`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootRaspberryPi3_64bit = mkPackage(
  nixRaw`pkgs.ubootRaspberryPi3_64bit`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootRaspberryPi4_32bit = mkPackage(
  nixRaw`pkgs.ubootRaspberryPi4_32bit`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootRaspberryPi4_64bit = mkPackage(
  nixRaw`pkgs.ubootRaspberryPi4_64bit`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootRaspberryPiZero = mkPackage(
  nixRaw`pkgs.ubootRaspberryPiZero`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootRock64 = mkPackage(
  nixRaw`pkgs.ubootRock64`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootRockPi4 = mkPackage(
  nixRaw`pkgs.ubootRockPi4`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootRockPro64 = mkPackage(
  nixRaw`pkgs.ubootRockPro64`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootSheevaplug = mkPackage(
  nixRaw`pkgs.ubootSheevaplug`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootSopine = mkPackage(
  nixRaw`pkgs.ubootSopine`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootTools = mkPackage(
  nixRaw`pkgs.ubootTools`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootUtilite = mkPackage(
  nixRaw`pkgs.ubootUtilite`,
  "Boot loader for embedded systems",
);

/**
 * Boot loader for embedded systems
 */
export const ubootWandboard = mkPackage(
  nixRaw`pkgs.ubootWandboard`,
  "Boot loader for embedded systems",
);

/**
 * Universal Blood Pressure Manager
 */
export const ubpm = mkPackage(
  nixRaw`pkgs.ubpm`,
  "Universal Blood Pressure Manager",
);

/**
 * A tool to build click packages. Mainly used for Ubuntu Touch.
 */
export const ubports_click = mkPackage(
  nixRaw`pkgs.ubports-click`,
  "A tool to build click packages. Mainly used for Ubuntu Touch.",
);

/**
 * Bridge for UDP tunnels, Ethernet, TAP, and VMnet interfaces
 */
export const ubridge = mkPackage(
  nixRaw`pkgs.ubridge`,
  "Bridge for UDP tunnels, Ethernet, TAP, and VMnet interfaces",
);

/**
 * Ubuntu Font Family
 */
export const ubuntu_font_family = mkPackage(
  nixRaw`pkgs.ubuntu_font_family`,
  "Ubuntu Font Family",
);

/**
 * Ubuntu monochrome and Suru icon themes, Ambiance and Radiance themes, and Ubuntu artwork
 */
export const ubuntu_themes = mkPackage(
  nixRaw`pkgs.ubuntu-themes`,
  "Ubuntu monochrome and Suru icon themes, Ambiance and Radiance themes, and Ubuntu artwork",
);

/**
 * OpenWrt system message/RPC bus
 */
export const ubus = mkPackage(
  nixRaw`pkgs.ubus`,
  "OpenWrt system message/RPC bus",
);

/**
 * Userspace implementation of CARP
 */
export const ucarp = mkPackage(
  nixRaw`pkgs.ucarp`,
  "Userspace implementation of CARP",
);

/**
 * Collective communication operations API
 */
export const ucc = mkPackage(
  nixRaw`pkgs.ucc`,
  "Collective communication operations API",
);

/**
 * Grep-like tool for searching large bodies of source code
 */
export const ucg = mkPackage(
  nixRaw`pkgs.ucg`,
  "Grep-like tool for searching large bodies of source code",
);

/**
 * Play chess against UCI engines in your terminal.
 */
export const uchess = mkPackage(
  nixRaw`pkgs.uchess`,
  "Play chess against UCI engines in your terminal.",
);

/**
 * OpenWrt Unified Configuration Interface
 */
export const uci = mkPackage(
  nixRaw`pkgs.uci`,
  "OpenWrt Unified Configuration Interface",
);

/**
 * Portable lossless data compression library
 */
export const ucl = mkPackage(
  nixRaw`pkgs.ucl`,
  "Portable lossless data compression library",
);

/**
 * Embedded C library
 */
export const uclibc = mkPackage(
  nixRaw`pkgs.uclibc`,
  "Embedded C library",
);

/**
 * Embedded C library
 */
export const uclibcCross = mkPackage(
  nixRaw`pkgs.uclibcCross`,
  "Embedded C library",
);

/**
 * Embedded C library
 */
export const uclibc_ng = mkPackage(
  nixRaw`pkgs.uclibc-ng`,
  "Embedded C library",
);

/**
 * Embedded C library
 */
export const uclibc_ng_cross = mkPackage(
  nixRaw`pkgs.uclibc-ng-cross`,
  "Embedded C library",
);

/**
 * Tiny OpenWrt fork of libnl
 */
export const uclient = mkPackage(
  nixRaw`pkgs.uclient`,
  "Tiny OpenWrt fork of libnl",
);

/**
 * C++ library to facilitate using C++ design patterns
 */
export const ucommon = mkPackage(
  nixRaw`pkgs.ucommon`,
  "C++ library to facilitate using C++ design patterns",
);

/**
 * Unicode bitmap fonts
 */
export const ucs_fonts = mkPackage(
  nixRaw`pkgs.ucs-fonts`,
  "Unicode bitmap fonts",
);

/**
 * Command-line tools for building TCP client-server applications
 */
export const ucspi_tcp = mkPackage(
  nixRaw`pkgs.ucspi-tcp`,
  "Command-line tools for building TCP client-server applications",
);

/**
 * Unified Communication X library
 */
export const ucx = mkPackage(
  nixRaw`pkgs.ucx`,
  "Unified Communication X library",
);

/**
 * Tool for de-duplication URLs
 */
export const uddup = mkPackage(
  nixRaw`pkgs.uddup`,
  "Tool for de-duplication URLs",
);

/**
 * A system and service manager for Linux
 */
export const udev = mkPackage(
  nixRaw`pkgs.udev`,
  "A system and service manager for Linux",
);

/**
 * A programming font that combines BIZ UD Gothic and JetBrains Mono
 */
export const udev_gothic = mkPackage(
  nixRaw`pkgs.udev-gothic`,
  "A programming font that combines BIZ UD Gothic and JetBrains Mono",
);

/**
 * A programming font that combines BIZ UD Gothic, JetBrains Mono and nerd-fonts
 */
export const udev_gothic_nf = mkPackage(
  nixRaw`pkgs.udev-gothic-nf`,
  "A programming font that combines BIZ UD Gothic, JetBrains Mono and nerd-fonts",
);

/**
 * Mount without password
 */
export const udevil = mkPackage(
  nixRaw`pkgs.udevil`,
  "Mount without password",
);

/**
 * UDF tools
 */
export const udftools = mkPackage(
  nixRaw`pkgs.udftools`,
  "UDF tools",
);

/**
 * Urban Dictionary CLI - written in Rust
 */
export const udict = mkPackage(
  nixRaw`pkgs.udict`,
  "Urban Dictionary CLI - written in Rust",
);

/**
 * User-friendly Desktop Internet GIS
 */
export const udig = mkPackage(
  nixRaw`pkgs.udig`,
  "User-friendly Desktop Internet GIS",
);

/**
 * Easy-to-use, minimalistic x86 disassembler library (libudis86)

 */
export const udis86 = mkPackage(
  nixRaw`pkgs.udis86`,
  "Easy-to-use, minimalistic x86 disassembler library (libudis86)\n",
);

/**
 * Removable disk automounter for udisks
 */
export const udiskie = mkPackage(
  nixRaw`pkgs.udiskie`,
  "Removable disk automounter for udisks",
);

/**
 * A daemon, tools and libraries to access and manipulate disks, storage devices and technologies
 */
export const udisks = mkPackage(
  nixRaw`pkgs.udisks`,
  "A daemon, tools and libraries to access and manipulate disks, storage devices and technologies",
);

/**
 * A daemon, tools and libraries to access and manipulate disks, storage devices and technologies
 */
export const udisks2 = mkPackage(
  nixRaw`pkgs.udisks2`,
  "A daemon, tools and libraries to access and manipulate disks, storage devices and technologies",
);

/**
 * Async-capable DNS stub resolver library
 */
export const udns = mkPackage(
  nixRaw`pkgs.udns`,
  "Async-capable DNS stub resolver library",
);

/**
 * basic user tool to execute simple docker containers in user space without root privileges
 */
export const udocker = mkPackage(
  nixRaw`pkgs.udocker`,
  "basic user tool to execute simple docker containers in user space without root privileges",
);

/**
 * A tunnel which turns UDP traffic into encrypted UDP/FakeTCP/ICMP traffic by using a raw socket
 */
export const udp2raw = mkPackage(
  nixRaw`pkgs.udp2raw`,
  "A tunnel which turns UDP traffic into encrypted UDP/FakeTCP/ICMP traffic by using a raw socket",
);

/**
 * Replay UDP packets from a pcap file
 */
export const udpreplay = mkPackage(
  nixRaw`pkgs.udpreplay`,
  "Replay UDP packets from a pcap file",
);

/**
 * A lightweight UDP torrent tracker
 */
export const udpt = mkPackage(
  nixRaw`pkgs.udpt`,
  "A lightweight UDP torrent tracker",
);

/**
 * Tunnels TCP over UDP packets
 */
export const udptunnel = mkPackage(
  nixRaw`pkgs.udptunnel`,
  "Tunnels TCP over UDP packets",
);

/**
 * Single-packet UDP scanner
 */
export const udpx = mkPackage(
  nixRaw`pkgs.udpx`,
  "Single-packet UDP scanner",
);

/**
 * A C-based package for the programatic handling of units of physical quantities
 */
export const udunits = mkPackage(
  nixRaw`pkgs.udunits`,
  "A C-based package for the programatic handling of units of physical quantities",
);

/**
 * An alternative for w3mimgdisplay
 */
export const ueberzug = mkPackage(
  nixRaw`pkgs.ueberzug`,
  "An alternative for w3mimgdisplay",
);

/**
 * Drop in replacement for ueberzug written in C++
 */
export const ueberzugpp = mkPackage(
  nixRaw`pkgs.ueberzugpp`,
  "Drop in replacement for ueberzug written in C++",
);

/**
 * Parse BIOS/Intel ME/UEFI firmware related structures: Volumes, FileSystems, Files, etc
 */
export const uefi_firmware_parser = mkPackage(
  nixRaw`pkgs.uefi-firmware-parser`,
  "Parse BIOS/Intel ME/UEFI firmware related structures: Volumes, FileSystems, Files, etc",
);

/**
 * Directly run UEFI applications in qemu
 */
export const uefi_run = mkPackage(
  nixRaw`pkgs.uefi-run`,
  "Directly run UEFI applications in qemu",
);

/**
 * UEFI firmware image viewer and editor
 */
export const uefitool = mkPackage(
  nixRaw`pkgs.uefitool`,
  "UEFI firmware image viewer and editor",
);

/**
 * Low-level disk formatting utility for USB floppy drives
 */
export const ufiformat = mkPackage(
  nixRaw`pkgs.ufiformat`,
  "Low-level disk formatting utility for USB floppy drives",
);

/**
 * Safe, atomic formatting with black and usort
 */
export const ufmt = mkPackage(
  nixRaw`pkgs.ufmt`,
  "Safe, atomic formatting with black and usort",
);

/**
 * A squad-based tactical strategy game in the tradition of X-Com
 */
export const ufoai = mkPackage(
  nixRaw`pkgs.ufoai`,
  "A squad-based tactical strategy game in the tradition of X-Com",
);

/**
 * Encrypted UDP based FTP with multicast
 */
export const uftp = mkPackage(
  nixRaw`pkgs.uftp`,
  "Encrypted UDP based FTP with multicast",
);

/**
 * FTP/TFTP server for Linux that just works™
 */
export const uftpd = mkPackage(
  nixRaw`pkgs.uftpd`,
  "FTP/TFTP server for Linux that just works™",
);

/**
 * Function (graph) tracer for user-space
 */
export const uftrace = mkPackage(
  nixRaw`pkgs.uftrace`,
  "Function (graph) tracer for user-space",
);

/**
 * A backup/archival system based around content-addressible storage
 */
export const ugarit = mkPackage(
  nixRaw`pkgs.ugarit`,
  "A backup/archival system based around content-addressible storage",
);

/**
 * A tool for generating import manifests for Ugarit
 */
export const ugarit_manifest_maker = mkPackage(
  nixRaw`pkgs.ugarit-manifest-maker`,
  "A tool for generating import manifests for Ugarit",
);

/**
 * Download manager using GTK and libcurl
 */
export const uget = mkPackage(
  nixRaw`pkgs.uget`,
  "Download manager using GTK and libcurl",
);

/**
 * Native messaging host to integrate uGet Download Manager with web browsers
 */
export const uget_integrator = mkPackage(
  nixRaw`pkgs.uget-integrator`,
  "Native messaging host to integrate uGet Download Manager with web browsers",
);

/**
 * Ultra fast grep with interactive query UI
 */
export const ugrep = mkPackage(
  nixRaw`pkgs.ugrep`,
  "Ultra fast grep with interactive query UI",
);

/**
 * A cross-platform G-Code sender for GRBL, Smoothieware, TinyG and G2core.
 */
export const ugs = mkPackage(
  nixRaw`pkgs.ugs`,
  "A cross-platform G-Code sender for GRBL, Smoothieware, TinyG and G2core.",
);

/**
 * The Universal Elite Game Trainer for CLI (Linux game trainer research project)
 */
export const ugtrain = mkPackage(
  nixRaw`pkgs.ugtrain`,
  "The Universal Elite Game Trainer for CLI (Linux game trainer research project)",
);

/**
 * USRP Hardware Driver (for Software Defined Radio)
 */
export const uhd = mkPackage(
  nixRaw`pkgs.uhd`,
  "USRP Hardware Driver (for Software Defined Radio)",
);

/**
 * USRP Hardware Driver (for Software Defined Radio)
 */
export const uhdMinimal = mkPackage(
  nixRaw`pkgs.uhdMinimal`,
  "USRP Hardware Driver (for Software Defined Radio)",
);

/**
 * Universal Hardware Data Model
 */
export const uhdm = mkPackage(
  nixRaw`pkgs.uhdm`,
  "Universal Hardware Data Model",
);

/**
 * A cross-platform port of Hexen II game
 */
export const uhexen2 = mkPackage(
  nixRaw`pkgs.uhexen2`,
  "A cross-platform port of Hexen II game",
);

/**
 * Agent is the configuration application of the Ultimate Hacking Keyboard
 */
export const uhk_agent = mkPackage(
  nixRaw`pkgs.uhk-agent`,
  "Agent is the configuration application of the Ultimate Hacking Keyboard",
);

/**
 * udev rules for UHK keyboards from https://ultimatehackingkeyboard.com
 */
export const uhk_udev_rules = mkPackage(
  nixRaw`pkgs.uhk-udev-rules`,
  "udev rules for UHK keyboards from https://ultimatehackingkeyboard.com",
);

/**
 * Project for mocking web service APIs which use HTTP or HTTPS
 */
export const uhttpmock = mkPackage(
  nixRaw`pkgs.uhttpmock`,
  "Project for mocking web service APIs which use HTTP or HTTPS",
);

/**
 * High performance peer-to-peer hub for the ADC network
 */
export const uhub = mkPackage(
  nixRaw`pkgs.uhub`,
  "High performance peer-to-peer hub for the ADC network",
);

/**
 * Utility to control USB power per-port on smart USB hubs
 */
export const uhubctl = mkPackage(
  nixRaw`pkgs.uhubctl`,
  "Utility to control USB power per-port on smart USB hubs",
);

/**
 * A wrapper for the user, group and hosts NSS API
 */
export const uid_wrapper = mkPackage(
  nixRaw`pkgs.uid_wrapper`,
  "A wrapper for the user, group and hosts NSS API",
);

/**
 * Tool for converting single/multi part UIF image files to ISO
 */
export const uif2iso = mkPackage(
  nixRaw`pkgs.uif2iso`,
  "Tool for converting single/multi part UIF image files to ISO",
);

/**
 * A multilingual input method framework
 */
export const uim = mkPackage(
  nixRaw`pkgs.uim`,
  "A multilingual input method framework",
);

/**
 * Tool for AVR microcontrollers which can interface to many hardware in-system programmers
 */
export const uisp = mkPackage(
  nixRaw`pkgs.uisp`,
  "Tool for AVR microcontrollers which can interface to many hardware in-system programmers",
);

/**
 * A stack-oriented array programming language with a focus on simplicity, beauty, and tacit code
 */
export const uiua = mkPackage(
  nixRaw`pkgs.uiua`,
  "A stack-oriented array programming language with a focus on simplicity, beauty, and tacit code",
);

/**
 * An Uiua font
 */
export const uiua386 = mkPackage(
  nixRaw`pkgs.uiua386`,
  "An Uiua font",
);

/**
 * Cross-platform GUI for neovim based on electron
 */
export const uivonim = mkPackage(
  nixRaw`pkgs.uivonim`,
  "Cross-platform GUI for neovim based on electron",
);

/**
 * A new mod manager for The Legend of Zelda: Breath of the Wild
 */
export const ukmm = mkPackage(
  nixRaw`pkgs.ukmm`,
  "A new mod manager for The Legend of Zelda: Breath of the Wild",
);

/**
 * A fast application launcher for Linux, written in Python, using GTK
 */
export const ulauncher = mkPackage(
  nixRaw`pkgs.ulauncher`,
  "A fast application launcher for Linux, written in Python, using GTK",
);

/**
 * Universally Unique Lexicographically Sortable Identifier (ULID) in Go
 */
export const ulid = mkPackage(
  nixRaw`pkgs.ulid`,
  "Universally Unique Lexicographically Sortable Identifier (ULID) in Go",
);

/**
 * Userspace logging daemon for netfilter/iptables
 */
export const ulogd = mkPackage(
  nixRaw`pkgs.ulogd`,
  "Userspace logging daemon for netfilter/iptables",
);

/**
 * The Ultimate Oldschool PC Font Pack (TTF Fonts)
 */
export const ultimate_oldschool_pc_font_pack = mkPackage(
  nixRaw`pkgs.ultimate-oldschool-pc-font-pack`,
  "The Ultimate Oldschool PC Font Pack (TTF Fonts)",
);

/**
 * Remake of the popular racing DOS-game Stunts
 */
export const ultimatestunts = mkPackage(
  nixRaw`pkgs.ultimatestunts`,
  "Remake of the popular racing DOS-game Stunts",
);

/**
 * User-friendly Lightweight TPM Remote Attestation over Bluetooth
 */
export const ultrablue_server = mkPackage(
  nixRaw`pkgs.ultrablue-server`,
  "User-friendly Lightweight TPM Remote Attestation over Bluetooth",
);

/**
 * Simple GTD-style todo list for the command line
 */
export const ultralist = mkPackage(
  nixRaw`pkgs.ultralist`,
  "Simple GTD-style todo list for the command line",
);

/**
 * Ultrastar karaoke song creation tool
 */
export const ultrastar_creator = mkPackage(
  nixRaw`pkgs.ultrastar-creator`,
  "Ultrastar karaoke song creation tool",
);

/**
 * Ultrastar karaoke song manager
 */
export const ultrastar_manager = mkPackage(
  nixRaw`pkgs.ultrastar-manager`,
  "Ultrastar karaoke song manager",
);

/**
 * Free and open source karaoke game
 */
export const ultrastardx = mkPackage(
  nixRaw`pkgs.ultrastardx`,
  "Free and open source karaoke game",
);

/**
 * Free, open-source UML tool with a simple user interface
 */
export const umlet = mkPackage(
  nixRaw`pkgs.umlet`,
  "Free, open-source UML tool with a simple user interface",
);

/**
 * umoci modifies Open Container images
 */
export const umoci = mkPackage(
  nixRaw`pkgs.umoci`,
  "umoci modifies Open Container images",
);

/**
 * Mock hardware devices for creating unit tests
 */
export const umockdev = mkPackage(
  nixRaw`pkgs.umockdev`,
  "Mock hardware devices for creating unit tests",
);

/**
 * The Dungeons of Moria - the original roguelike
 */
export const umoria = mkPackage(
  nixRaw`pkgs.umoria`,
  "The Dungeons of Moria - the original roguelike",
);

export const umount = mkPackage(
  nixRaw`pkgs.umount`,
  "",
);

/**
 * A userspace debugging and diagnostic tool for AMD GPUs
 */
export const umr = mkPackage(
  nixRaw`pkgs.umr`,
  "A userspace debugging and diagnostic tool for AMD GPUs",
);

/**
 * Universal Media Server: a DLNA-compliant UPnP Media Server
 */
export const ums = mkPackage(
  nixRaw`pkgs.ums`,
  "Universal Media Server: a DLNA-compliant UPnP Media Server",
);

/**
 * Minimalistic Murmur (Mumble server)
 */
export const umurmur = mkPackage(
  nixRaw`pkgs.umurmur`,
  "Minimalistic Murmur (Mumble server)",
);

/**
 * An archive unpacker program
 */
export const unar = mkPackage(
  nixRaw`pkgs.unar`,
  "An archive unpacker program",
);

/**
 * An ebook to self-contained-HTML converter
 */
export const unbook = mkPackage(
  nixRaw`pkgs.unbook`,
  "An ebook to self-contained-HTML converter",
);

/**
 * Validating, recursive, and caching DNS resolver
 */
export const unbound = mkPackage(
  nixRaw`pkgs.unbound`,
  "Validating, recursive, and caching DNS resolver",
);

/**
 * Validating, recursive, and caching DNS resolver
 */
export const unbound_full = mkPackage(
  nixRaw`pkgs.unbound-full`,
  "Validating, recursive, and caching DNS resolver",
);

/**
 * Validating, recursive, and caching DNS resolver
 */
export const unbound_with_systemd = mkPackage(
  nixRaw`pkgs.unbound-with-systemd`,
  "Validating, recursive, and caching DNS resolver",
);

/**
 * An open-source Android/Desktop remake of Civ V
 */
export const unciv = mkPackage(
  nixRaw`pkgs.unciv`,
  "An open-source Android/Desktop remake of Civ V",
);

/**
 * Hides mouse pointer while not in use
 */
export const unclutter = mkPackage(
  nixRaw`pkgs.unclutter`,
  "Hides mouse pointer while not in use",
);

/**
 * Rewrite of unclutter using the X11 Xfixes extension
 */
export const unclutter_xfixes = mkPackage(
  nixRaw`pkgs.unclutter-xfixes`,
  "Rewrite of unclutter using the X11 Xfixes extension",
);

/**
 * Remove unnecessary type conversions from Go source
 */
export const unconvert = mkPackage(
  nixRaw`pkgs.unconvert`,
  "Remove unnecessary type conversions from Go source",
);

/**
 * API wrapper to search for exposed hosts
 */
export const uncover = mkPackage(
  nixRaw`pkgs.uncover`,
  "API wrapper to search for exposed hosts",
);

/**
 * Source code beautifier for C, C++, C#, ObjectiveC, D, Java, Pawn and VALA
 */
export const uncrustify = mkPackage(
  nixRaw`pkgs.uncrustify`,
  "Source code beautifier for C, C++, C#, ObjectiveC, D, Java, Pawn and VALA",
);

/**
 * Tiny helper utility to force programs which insist on daemonizing themselves to run in the foreground
 */
export const undaemonize = mkPackage(
  nixRaw`pkgs.undaemonize`,
  "Tiny helper utility to force programs which insist on daemonizing themselves to run in the foreground",
);

/**
 * A pixel grid-based monospace typeface
 */
export const undefined_medium = mkPackage(
  nixRaw`pkgs.undefined-medium`,
  "A pixel grid-based monospace typeface",
);

/**
 * A program for undervolting Intel CPUs on Linux
 */
export const undervolt = mkPackage(
  nixRaw`pkgs.undervolt`,
  "A program for undervolting Intel CPUs on Linux",
);

/**
 * Notifies you when long-running terminal commands complete
 */
export const undistract_me = mkPackage(
  nixRaw`pkgs.undistract-me`,
  "Notifies you when long-running terminal commands complete",
);

/**
 * Extract a DMG file
 */
export const undmg = mkPackage(
  nixRaw`pkgs.undmg`,
  "Extract a DMG file",
);

/**
 * A CLI tool to convert a Docker image to a flattened rootfs tarball
 */
export const undocker = mkPackage(
  nixRaw`pkgs.undocker`,
  "A CLI tool to convert a Docker image to a flattened rootfs tarball",
);

/**
 * A tool to create bootable live USB drives from ISO images
 */
export const unetbootin = mkPackage(
  nixRaw`pkgs.unetbootin`,
  "A tool to create bootable live USB drives from ISO images",
);

/**
 * A command line tool for fast frame accurate audio image + cue sheet splitting
 */
export const unflac = mkPackage(
  nixRaw`pkgs.unflac`,
  "A command line tool for fast frame accurate audio image + cue sheet splitting",
);

/**
 * Korean Hangul typeface collection
 */
export const unfonts_core = mkPackage(
  nixRaw`pkgs.unfonts-core`,
  "Korean Hangul typeface collection",
);

/**
 * User-space NFSv3 file system server
 */
export const unfs3 = mkPackage(
  nixRaw`pkgs.unfs3`,
  "User-space NFSv3 file system server",
);

/**
 * Pull out bits of URLs provided on stdin
 */
export const unfurl = mkPackage(
  nixRaw`pkgs.unfurl`,
  "Pull out bits of URLs provided on stdin",
);

/**
 * Git made easy
 */
export const ungit = mkPackage(
  nixRaw`pkgs.ungit`,
  "Git made easy",
);

/**
 * An open source web browser from Google, with dependencies on Google web services removed
 */
export const ungoogled_chromium = mkPackage(
  nixRaw`pkgs.ungoogled-chromium`,
  "An open source web browser from Google, with dependencies on Google web services removed",
);

/**
 * Query the Unicode database from the commandline, with good support for emojis
 */
export const uni = mkPackage(
  nixRaw`pkgs.uni`,
  "Query the Unicode database from the commandline, with good support for emojis",
);

/**
 * Converts between UTF-8 and many 7-bit ASCII equivalents and back
 */
export const uni2ascii = mkPackage(
  nixRaw`pkgs.uni2ascii`,
  "Converts between UTF-8 and many 7-bit ASCII equivalents and back",
);

/**
 * Unicode VGA font
 */
export const uni_vga = mkPackage(
  nixRaw`pkgs.uni-vga`,
  "Unicode VGA font",
);

/**
 * A very basic terminfo library
 */
export const unibilium = mkPackage(
  nixRaw`pkgs.unibilium`,
  "A very basic terminfo library",
);

/**
 * Universal video capture API
 */
export const unicap = mkPackage(
  nixRaw`pkgs.unicap`,
  "Universal video capture API",
);

/**
 * Unicode Character Database
 */
export const unicode_character_database = mkPackage(
  nixRaw`pkgs.unicode-character-database`,
  "Unicode Character Database",
);

/**
 * Unicode Emoji Data Files
 */
export const unicode_emoji = mkPackage(
  nixRaw`pkgs.unicode-emoji`,
  "Unicode Emoji Data Files",
);

/**
 * Display unicode character properties
 */
export const unicode_paracode = mkPackage(
  nixRaw`pkgs.unicode-paracode`,
  "Display unicode character properties",
);

/**
 * A very high level, goal-directed, object-oriented, general purpose applications language
 */
export const unicon_lang = mkPackage(
  nixRaw`pkgs.unicon-lang`,
  "A very high level, goal-directed, object-oriented, general purpose applications language",
);

/**
 * Lightweight multi-platform CPU emulator library
 */
export const unicorn = mkPackage(
  nixRaw`pkgs.unicorn`,
  "Lightweight multi-platform CPU emulator library",
);

/**
 * Glyphs and Icons for blocks of The Unicode Standard
 */
export const unidings = mkPackage(
  nixRaw`pkgs.unidings`,
  "Glyphs and Icons for blocks of The Unicode Standard",
);

/**
 * Selectively remove C preprocessor conditionals
 */
export const unifdef = mkPackage(
  nixRaw`pkgs.unifdef`,
  "Selectively remove C preprocessor conditionals",
);

/**
 * Controller for Ubiquiti UniFi access points
 */
export const unifi = mkPackage(
  nixRaw`pkgs.unifi`,
  "Controller for Ubiquiti UniFi access points",
);

/**
 * Controller for Ubiquiti UniFi access points
 */
export const unifi5 = mkPackage(
  nixRaw`pkgs.unifi5`,
  "Controller for Ubiquiti UniFi access points",
);

/**
 * Controller for Ubiquiti UniFi access points
 */
export const unifi6 = mkPackage(
  nixRaw`pkgs.unifi6`,
  "Controller for Ubiquiti UniFi access points",
);

/**
 * Controller for Ubiquiti UniFi access points
 */
export const unifi7 = mkPackage(
  nixRaw`pkgs.unifi7`,
  "Controller for Ubiquiti UniFi access points",
);

/**
 * Controller for Ubiquiti UniFi access points
 */
export const unifiLTS = mkPackage(
  nixRaw`pkgs.unifiLTS`,
  "Controller for Ubiquiti UniFi access points",
);

/**
 * Python tool to backup unifi event clips in realtime
 */
export const unifi_protect_backup = mkPackage(
  nixRaw`pkgs.unifi-protect-backup`,
  "Python tool to backup unifi event clips in realtime",
);

/**
 * Unifi Video NVR (aka Airvision) is a software package for controlling Unifi cameras
 */
export const unifi_video = mkPackage(
  nixRaw`pkgs.unifi-video`,
  "Unifi Video NVR (aka Airvision) is a software package for controlling Unifi cameras",
);

/**
 * A set of rewrite proxies and gateways for UnifiedPush
 */
export const unifiedpush_common_proxies = mkPackage(
  nixRaw`pkgs.unifiedpush-common-proxies`,
  "A set of rewrite proxies and gateways for UnifiedPush",
);

/**
 * Unicode font for Base Multilingual Plane
 */
export const unifont = mkPackage(
  nixRaw`pkgs.unifont`,
  "Unicode font for Base Multilingual Plane",
);

/**
 * Unicode font for glyphs above the Unicode Basic Multilingual Plane
 */
export const unifont_upper = mkPackage(
  nixRaw`pkgs.unifont_upper`,
  "Unicode font for glyphs above the Unicode Basic Multilingual Plane",
);

/**
 * Modifies strings to all use the same quote where possible
 */
export const unify = mkPackage(
  nixRaw`pkgs.unify`,
  "Modifies strings to all use the same quote where possible",
);

/**
 * The Unigine Heaven GPU benchmarking tool
 */
export const unigine_heaven = mkPackage(
  nixRaw`pkgs.unigine-heaven`,
  "The Unigine Heaven GPU benchmarking tool",
);

/**
 * The Unigine Heaven GPU benchmarking tool
 */
export const unigine_sanctuary = mkPackage(
  nixRaw`pkgs.unigine-sanctuary`,
  "The Unigine Heaven GPU benchmarking tool",
);

/**
 * The Unigine Superposition GPU benchmarking tool
 */
export const unigine_superposition = mkPackage(
  nixRaw`pkgs.unigine-superposition`,
  "The Unigine Superposition GPU benchmarking tool",
);

/**
 * The Unigine Heaven GPU benchmarking tool
 */
export const unigine_tropics = mkPackage(
  nixRaw`pkgs.unigine-tropics`,
  "The Unigine Heaven GPU benchmarking tool",
);

/**
 * The Unigine Valley GPU benchmarking tool
 */
export const unigine_valley = mkPackage(
  nixRaw`pkgs.unigine-valley`,
  "The Unigine Valley GPU benchmarking tool",
);

/**
 * Unicode Han Database
 */
export const unihan_database = mkPackage(
  nixRaw`pkgs.unihan-database`,
  "Unicode Han Database",
);

/**
 * Scan only once by IP address and reduce scan times with Nmap for large amounts of data
 */
export const unimap = mkPackage(
  nixRaw`pkgs.unimap`,
  "Scan only once by IP address and reduce scan times with Nmap for large amounts of data",
);

/**
 * FUSE UnionFS implementation
 */
export const unionfs_fuse = mkPackage(
  nixRaw`pkgs.unionfs-fuse`,
  "FUSE UnionFS implementation",
);

/**
 * A CLI utility for searching unicode characters by description and optionally copying them to clipboard
 */
export const unipicker = mkPackage(
  nixRaw`pkgs.unipicker`,
  "A CLI utility for searching unicode characters by description and optionally copying them to clipboard",
);

/**
 * Explains Unicode characters/code points: Displays their name, category, and shows compositions
 */
export const uniscribe = mkPackage(
  nixRaw`pkgs.uniscribe`,
  "Explains Unicode characters/code points: Displays their name, category, and shows compositions",
);

/**
 * Bidirectional file synchronizer
 */
export const unison = mkPackage(
  nixRaw`pkgs.unison`,
  "Bidirectional file synchronizer",
);

/**
 * Modern, statically-typed purely functional language
 */
export const unison_ucm = mkPackage(
  nixRaw`pkgs.unison-ucm`,
  "Modern, statically-typed purely functional language",
);

/**
 * Dynamic web and application server, designed to run applications in multiple languages
 */
export const unit = mkPackage(
  nixRaw`pkgs.unit`,
  "Dynamic web and application server, designed to run applications in multiple languages",
);

/**
 * Unit conversion tool
 */
export const units = mkPackage(
  nixRaw`pkgs.units`,
  "Unit conversion tool",
);

/**
 * Lightweight unit testing framework for C++
 */
export const unittest_cpp = mkPackage(
  nixRaw`pkgs.unittest-cpp`,
  "Lightweight unit testing framework for C++",
);

/**
 * Official Unity3D app to download and manage Unity Projects and installations
 */
export const unityhub = mkPackage(
  nixRaw`pkgs.unityhub`,
  "Official Unity3D app to download and manage Unity Projects and installations",
);

/**
 * A maintained ctags implementation
 */
export const universal_ctags = mkPackage(
  nixRaw`pkgs.universal-ctags`,
  "A maintained ctags implementation",
);

/**
 * ODBC driver manager for Unix
 */
export const unixODBC = mkPackage(
  nixRaw`pkgs.unixODBC`,
  "ODBC driver manager for Unix",
);

/**
 * A basic indicator of the performance of a Unix-like system
 */
export const unixbench = mkPackage(
  nixRaw`pkgs.unixbench`,
  "A basic indicator of the performance of a Unix-like system",
);

/**
 * sound characters as Morse code on the soundcard or console speaker
 */
export const unixcw = mkPackage(
  nixRaw`pkgs.unixcw`,
  "sound characters as Morse code on the soundcard or console speaker",
);

/**
 * Invert scroll direction for physical scroll wheels
 */
export const unnaturalscrollwheels = mkPackage(
  nixRaw`pkgs.unnaturalscrollwheels`,
  "Invert scroll direction for physical scroll wheels",
);

/**
 * Fork of NetHack
 */
export const unnethack = mkPackage(
  nixRaw`pkgs.unnethack`,
  "Fork of NetHack",
);

/**
 * Convert between any document format supported by LibreOffice/OpenOffice
 */
export const unoconv = mkPackage(
  nixRaw`pkgs.unoconv`,
  "Convert between any document format supported by LibreOffice/OpenOffice",
);

/**
 * Command line tool for unpacking archives easily
 */
export const unp = mkPackage(
  nixRaw`pkgs.unp`,
  "Command line tool for unpacking archives easily",
);

/**
 * Extracts downloads for Radarr, Sonarr, Lidarr - Deletes extracted files after import
 */
export const unpackerr = mkPackage(
  nixRaw`pkgs.unpackerr`,
  "Extracts downloads for Radarr, Sonarr, Lidarr - Deletes extracted files after import",
);

/**
 * Post-processing tool for scanned sheets of paper
 */
export const unpaper = mkPackage(
  nixRaw`pkgs.unpaper`,
  "Post-processing tool for scanned sheets of paper",
);

/**
 * Find unused parameters in Go
 */
export const unparam = mkPackage(
  nixRaw`pkgs.unparam`,
  "Find unused parameters in Go",
);

/**
 * 9P2000.L server implementation in Rust
 */
export const unpfs = mkPackage(
  nixRaw`pkgs.unpfs`,
  "9P2000.L server implementation in Rust",
);

/**
 * Collect ALL UniFi Controller, Site, Device & Client Data - Export to InfluxDB or Prometheus
 */
export const unpoller = mkPackage(
  nixRaw`pkgs.unpoller`,
  "Collect ALL UniFi Controller, Site, Device & Client Data - Export to InfluxDB or Prometheus",
);

/**
 * Self-contained, serverless, zero-conf, transactional NoSQL DB library
 */
export const unqlite = mkPackage(
  nixRaw`pkgs.unqlite`,
  "Self-contained, serverless, zero-conf, transactional NoSQL DB library",
);

/**
 * Utility for RAR archives
 */
export const unrar = mkPackage(
  nixRaw`pkgs.unrar`,
  "Utility for RAR archives",
);

/**
 * Backwards compatibility between unar and unrar
 */
export const unrar_wrapper = mkPackage(
  nixRaw`pkgs.unrar-wrapper`,
  "Backwards compatibility between unar and unrar",
);

/**
 * A program to extract files from the RPA archive format
 */
export const unrpa = mkPackage(
  nixRaw`pkgs.unrpa`,
  "A program to extract files from the RPA archive format",
);

/**
 * A converter from Rich Text Format to other formats
 */
export const unrtf = mkPackage(
  nixRaw`pkgs.unrtf`,
  "A converter from Rich Text Format to other formats",
);

/**
 * Less buggy replacement for the glibc name service cache daemon
 */
export const unscd = mkPackage(
  nixRaw`pkgs.unscd`,
  "Less buggy replacement for the glibc name service cache daemon",
);

/**
 * Bitmapped character-art-friendly Unicode fonts
 */
export const unscii = mkPackage(
  nixRaw`pkgs.unscii`,
  "Bitmapped character-art-friendly Unicode fonts",
);

/**
 * Tool and library to extract CAB files from InstallShield installers
 */
export const unshield = mkPackage(
  nixRaw`pkgs.unshield`,
  "Tool and library to extract CAB files from InstallShield installers",
);

/**
 * Silently eats chmod commands forbidden by Nix
 */
export const unstick = mkPackage(
  nixRaw`pkgs.unstick`,
  "Silently eats chmod commands forbidden by Nix",
);

/**
 * open-source toolkit designed to make it easy to prepare unstructured data like PDFs, HTML and Word Documents for downstream data science tasks
 */
export const unstructured_api = mkPackage(
  nixRaw`pkgs.unstructured-api`,
  "open-source toolkit designed to make it easy to prepare unstructured data like PDFs, HTML and Word Documents for downstream data science tasks",
);

/**
 * A utility which removes LaTeX commands from input
 */
export const untex = mkPackage(
  nixRaw`pkgs.untex`,
  "A utility which removes LaTeX commands from input",
);

/**
 * A tool to run processes untied from some of the namespaces
 */
export const untie = mkPackage(
  nixRaw`pkgs.untie`,
  "A tool to run processes untied from some of the namespaces",
);

/**
 * Restore a truncated mp4/mov (improved version of ponchio/untrunc)
 */
export const untrunc_anthwlock = mkPackage(
  nixRaw`pkgs.untrunc-anthwlock`,
  "Restore a truncated mp4/mov (improved version of ponchio/untrunc)",
);

/**
 * A tool to identify potentially unused code
 */
export const unused = mkPackage(
  nixRaw`pkgs.unused`,
  "A tool to identify potentially unused code",
);

/**
 * Tools for working with Google's bazel buildtool. Includes buildifier, buildozer, and unused_deps
 */
export const unused_deps = mkPackage(
  nixRaw`pkgs.unused_deps`,
  "Tools for working with Google's bazel buildtool. Includes buildifier, buildozer, and unused_deps",
);

/**
 * A fast paced, first person strategy game
 */
export const unvanquished = mkPackage(
  nixRaw`pkgs.unvanquished`,
  "A fast paced, first person strategy game",
);

/**
 * An extraction utility for archives compressed in .zip format
 */
export const unzip = mkPackage(
  nixRaw`pkgs.unzip`,
  "An extraction utility for archives compressed in .zip format",
);

/**
 * An extraction utility for archives compressed in .zip format
 */
export const unzipNLS = mkPackage(
  nixRaw`pkgs.unzipNLS`,
  "An extraction utility for archives compressed in .zip format",
);

/**
 * Manipulate archives of files in Zoo compressed form
 */
export const unzoo = mkPackage(
  nixRaw`pkgs.unzoo`,
  "Manipulate archives of files in Zoo compressed form",
);

/**
 * Unzip implementation, support for parallel decompression, automatic detection encoding
 */
export const unzrip = mkPackage(
  nixRaw`pkgs.unzrip`,
  "Unzip implementation, support for parallel decompression, automatic detection encoding",
);

/**
 * Ultimate Plumber is a tool for writing Linux pipes with instant live preview
 */
export const up = mkPackage(
  nixRaw`pkgs.up`,
  "Ultimate Plumber is a tool for writing Linux pipes with instant live preview",
);

/**
 * CLI for interacting with Upbound Cloud, Upbound Enterprise, and Universal Crossplane (UXP)
 */
export const upbound = mkPackage(
  nixRaw`pkgs.upbound`,
  "CLI for interacting with Upbound Cloud, Upbound Enterprise, and Universal Crossplane (UXP)",
);

export const updateAutotoolsGnuConfigScriptsHook = mkPackage(
  nixRaw`pkgs.updateAutotoolsGnuConfigScriptsHook`,
  "",
);

/**
 * Generic modularized configuration file manager
 */
export const update_dotdee = mkPackage(
  nixRaw`pkgs.update-dotdee`,
  "Generic modularized configuration file manager",
);

/**
 * A program to update fetchgit values in Nix expressions
 */
export const update_nix_fetchgit = mkPackage(
  nixRaw`pkgs.update-nix-fetchgit`,
  "A program to update fetchgit values in Nix expressions",
);

export const update_python_libraries = mkPackage(
  nixRaw`pkgs.update-python-libraries`,
  "",
);

/**
 * Script to update your /etc/resolv.conf with DNS settings that come from the received push dhcp-options
 */
export const update_resolv_conf = mkPackage(
  nixRaw`pkgs.update-resolv-conf`,
  "Script to update your /etc/resolv.conf with DNS settings that come from the received push dhcp-options",
);

/**
 * Helper script for OpenVPN to directly update the DNS settings of a link through systemd-resolved via DBus
 */
export const update_systemd_resolved = mkPackage(
  nixRaw`pkgs.update-systemd-resolved`,
  "Helper script for OpenVPN to directly update the DNS settings of a link through systemd-resolved via DBus",
);

/**
 * A very simple PDF parser
 */
export const updfparser = mkPackage(
  nixRaw`pkgs.updfparser`,
  "A very simple PDF parser",
);

/**
 * Updog is a replacement for Python's SimpleHTTPServer
 */
export const updog = mkPackage(
  nixRaw`pkgs.updog`,
  "Updog is a replacement for Python's SimpleHTTPServer",
);

/**
 * A Piano in your terminal
 */
export const upiano = mkPackage(
  nixRaw`pkgs.upiano`,
  "A Piano in your terminal",
);

/**
 * Upload OS images to cloud provider
 */
export const uplosi = mkPackage(
  nixRaw`pkgs.uplosi`,
  "Upload OS images to cloud provider",
);

/**
 * Access some parameters of the router and manage port forwarding
 */
export const upnp_router_control = mkPackage(
  nixRaw`pkgs.upnp-router-control`,
  "Access some parameters of the router and manage port forwarding",
);

/**
 * A D-Bus service for power management
 */
export const upower = mkPackage(
  nixRaw`pkgs.upower`,
  "A D-Bus service for power management",
);

/**
 * OAuth helper and remote fetcher for Uppy's (https://uppy.io) extensible file upload widget with support for drag&drop, resumable uploads, previews, restrictions, file processing/encoding, remote providers like Dropbox and Google Drive, S3 and more :dog:
 */
export const uppy_companion = mkPackage(
  nixRaw`pkgs.uppy-companion`,
  "OAuth helper and remote fetcher for Uppy's (https://uppy.io) extensible file upload widget with support for drag&drop, resumable uploads, previews, restrictions, file processing/encoding, remote providers like Dropbox and Google Drive, S3 and more :dog:",
);

/**
 * Free and Open Source AI Image Upscaler
 */
export const upscayl = mkPackage(
  nixRaw`pkgs.upscayl`,
  "Free and Open Source AI Image Upscaler",
);

/**
 * A global name space for storing data akin to a filesystem
 */
export const upspin = mkPackage(
  nixRaw`pkgs.upspin`,
  "A global name space for storing data akin to a filesystem",
);

/**
 * Secure terminal-session sharing
 */
export const upterm = mkPackage(
  nixRaw`pkgs.upterm`,
  "Secure terminal-session sharing",
);

/**
 * A fancy self-hosted monitoring tool
 */
export const uptime_kuma = mkPackage(
  nixRaw`pkgs.uptime-kuma`,
  "A fancy self-hosted monitoring tool",
);

/**
 * Uptime record daemon
 */
export const uptimed = mkPackage(
  nixRaw`pkgs.uptimed`,
  "Uptime record daemon",
);

/**
 * Online freelancing platform desktop application for time tracking
 */
export const upwork = mkPackage(
  nixRaw`pkgs.upwork`,
  "Online freelancing platform desktop application for time tracking",
);

/**
 * The Ultimate Packer for eXecutables
 */
export const upx = mkPackage(
  nixRaw`pkgs.upx`,
  "The Ultimate Packer for eXecutables",
);

/**
 * A simple, user-friendly alternative to sort | uniq
 */
export const uq = mkPackage(
  nixRaw`pkgs.uq`,
  "A simple, user-friendly alternative to sort | uniq",
);

/**
 * Remake of Star Control II
 */
export const uqm = mkPackage(
  nixRaw`pkgs.uqm`,
  "Remake of Star Control II",
);

/**
 * Tiny QMI command line utility
 */
export const uqmi = mkPackage(
  nixRaw`pkgs.uqmi`,
  "Tiny QMI command line utility",
);

/**
 * An easy to setup Open Source client/server backup system
 */
export const urbackup_client = mkPackage(
  nixRaw`pkgs.urbackup-client`,
  "An easy to setup Open Source client/server backup system",
);

/**
 * A multiplayer tactical FPS on top of Quake 3 engine
 */
export const urbanterror = mkPackage(
  nixRaw`pkgs.urbanterror`,
  "A multiplayer tactical FPS on top of Quake 3 engine",
);

/**
 * An operating function
 */
export const urbit = mkPackage(
  nixRaw`pkgs.urbit`,
  "An operating function",
);

/**
 * Provides core data structures and a simple XML parser for populating the class data structures from an URDF file
 */
export const urdfdom = mkPackage(
  nixRaw`pkgs.urdfdom`,
  "Provides core data structures and a simple XML parser for populating the class data structures from an URDF file",
);

/**
 * URDF (U-Robot Description Format) headers provides core data structure headers for URDF
 */
export const urdfdom_headers = mkPackage(
  nixRaw`pkgs.urdfdom-headers`,
  "URDF (U-Robot Description Format) headers provides core data structure headers for URDF",
);

/**
 * Universal Radio Hacker: investigate wireless protocols like a boss
 */
export const urh = mkPackage(
  nixRaw`pkgs.urh`,
  "Universal Radio Hacker: investigate wireless protocols like a boss",
);

/**
 * C++ URI library
 */
export const uri = mkPackage(
  nixRaw`pkgs.uri`,
  "C++ URI library",
);

/**
 * Strictly RFC 3986 compliant URI parsing library
 */
export const uriparser = mkPackage(
  nixRaw`pkgs.uriparser`,
  "Strictly RFC 3986 compliant URI parsing library",
);

/**
 * Universal JTAG library, server and tools
 */
export const urjtag = mkPackage(
  nixRaw`pkgs.urjtag`,
  "Universal JTAG library, server and tools",
);

/**
 * Simple command-line URL parser
 */
export const url_parser = mkPackage(
  nixRaw`pkgs.url-parser`,
  "Simple command-line URL parser",
);

/**
 * A CLI utility for URL-encoding or -decoding strings
 */
export const urlencode = mkPackage(
  nixRaw`pkgs.urlencode`,
  "A CLI utility for URL-encoding or -decoding strings",
);

/**
 * Recon tool that allows searching shortened URLs
 */
export const urlhunter = mkPackage(
  nixRaw`pkgs.urlhunter`,
  "Recon tool that allows searching shortened URLs",
);

/**
 * Mutt and terminal url selector (similar to urlview)
 */
export const urlscan = mkPackage(
  nixRaw`pkgs.urlscan`,
  "Mutt and terminal url selector (similar to urlview)",
);

/**
 * Extract URLs from text
 */
export const urlview = mkPackage(
  nixRaw`pkgs.urlview`,
  "Extract URLs from text",
);

/**
 * A tool for monitoring webpages for updates
 */
export const urlwatch = mkPackage(
  nixRaw`pkgs.urlwatch`,
  "A tool for monitoring webpages for updates",
);

/**
 * Yet another Lisp variant which compiles to Lua
 */
export const urn = mkPackage(
  nixRaw`pkgs.urn`,
  "Yet another Lisp variant which compiles to Lua",
);

/**
 * Split tracker / timer for speedrunning with GTK+ frontend
 */
export const urn_timer = mkPackage(
  nixRaw`pkgs.urn-timer`,
  "Split tracker / timer for speedrunning with GTK+ frontend",
);

/**
 * Tool for monitoring and profiling single processes
 */
export const uroboros = mkPackage(
  nixRaw`pkgs.uroboros`,
  "Tool for monitoring and profiling single processes",
);

/**
 * Trigram database written in C++, suited for malware indexing
 */
export const ursadb = mkPackage(
  nixRaw`pkgs.ursadb`,
  "Trigram database written in C++, suited for malware indexing",
);

/**
 * The one-and-only remote for your computer
 */
export const urserver = mkPackage(
  nixRaw`pkgs.urserver`,
  "The one-and-only remote for your computer",
);

/**
 * Advanced purely-functional web programming language
 */
export const urweb = mkPackage(
  nixRaw`pkgs.urweb`,
  "Advanced purely-functional web programming language",
);

/**
 * udev rules that give NixOS permission to communicate with usb blasters
 */
export const usb_blaster_udev_rules = mkPackage(
  nixRaw`pkgs.usb-blaster-udev-rules`,
  "udev rules that give NixOS permission to communicate with usb blasters",
);

/**
 * A mode switching tool for controlling 'multi-mode' USB devices
 */
export const usb_modeswitch = mkPackage(
  nixRaw`pkgs.usb-modeswitch`,
  "A mode switching tool for controlling 'multi-mode' USB devices",
);

/**
 * Device database and the rules file for 'multi-mode' USB devices
 */
export const usb_modeswitch_data = mkPackage(
  nixRaw`pkgs.usb-modeswitch-data`,
  "Device database and the rules file for 'multi-mode' USB devices",
);

/**
 * Perform a bus reset on a USB device using its vendor and product ID
 */
export const usb_reset = mkPackage(
  nixRaw`pkgs.usb-reset`,
  "Perform a bus reset on a USB device using its vendor and product ID",
);

/**
 * The USBGuard software framework helps to protect your computer against BadUSB
 */
export const usbguard = mkPackage(
  nixRaw`pkgs.usbguard`,
  "The USBGuard software framework helps to protect your computer against BadUSB",
);

/**
 * Notifications for detecting usbguard policy and device presence changes
 */
export const usbguard_notifier = mkPackage(
  nixRaw`pkgs.usbguard-notifier`,
  "Notifications for detecting usbguard policy and device presence changes",
);

/**
 * A very minimal GUI app that can write compressed disk images to USB drives
 */
export const usbimager = mkPackage(
  nixRaw`pkgs.usbimager`,
  "A very minimal GUI app that can write compressed disk images to USB drives",
);

/**
 * A socket daemon to multiplex connections from and to iOS devices
 */
export const usbmuxd = mkPackage(
  nixRaw`pkgs.usbmuxd`,
  "A socket daemon to multiplex connections from and to iOS devices",
);

/**
 * A socket daemon to multiplex connections from and to iOS devices
 */
export const usbmuxd2 = mkPackage(
  nixRaw`pkgs.usbmuxd2`,
  "A socket daemon to multiplex connections from and to iOS devices",
);

/**
 * USB traffic redirection protocol
 */
export const usbredir = mkPackage(
  nixRaw`pkgs.usbredir`,
  "USB traffic redirection protocol",
);

/**
 * Tool to control USB HID relays
 */
export const usbrelay = mkPackage(
  nixRaw`pkgs.usbrelay`,
  "Tool to control USB HID relays",
);

/**
 * USB Relay MQTT service
 */
export const usbrelayd = mkPackage(
  nixRaw`pkgs.usbrelayd`,
  "USB Relay MQTT service",
);

/**
 * Tool to track the history of USB events
 */
export const usbrip = mkPackage(
  nixRaw`pkgs.usbrip`,
  "Tool to track the history of USB events",
);

/**
 * Control software for the LXA USB-SD-Mux
 */
export const usbsdmux = mkPackage(
  nixRaw`pkgs.usbsdmux`,
  "Control software for the LXA USB-SD-Mux",
);

/**
 * A top utility that shows an estimated instantaneous bandwidth on USB buses and devices
 */
export const usbtop = mkPackage(
  nixRaw`pkgs.usbtop`,
  "A top utility that shows an estimated instantaneous bandwidth on USB buses and devices",
);

/**
 * Tools for working with USB devices, such as lsusb
 */
export const usbutils = mkPackage(
  nixRaw`pkgs.usbutils`,
  "Tools for working with USB devices, such as lsusb",
);

/**
 * USB viewer for Linux
 */
export const usbview = mkPackage(
  nixRaw`pkgs.usbview`,
  "USB viewer for Linux",
);

export const useOldCXXAbi = mkPackage(
  nixRaw`pkgs.useOldCXXAbi`,
  "",
);

/**
 * A libc wrapper providing per-user hosts file
 */
export const userhosts = mkPackage(
  nixRaw`pkgs.userhosts`,
  "A libc wrapper providing per-user hosts file",
);

/**
 * A simple tool to automatically mount removable drives using UDisks2 and D-Bus
 */
export const usermount = mkPackage(
  nixRaw`pkgs.usermount`,
  "A simple tool to automatically mount removable drives using UDisks2 and D-Bus",
);

/**
 * Safe, minimal import sorting for Python projects
 */
export const usort = mkPackage(
  nixRaw`pkgs.usort`,
  "Safe, minimal import sorting for Python projects",
);

/**
 * Universal command-line interface for SQL databases
 */
export const usql = mkPackage(
  nixRaw`pkgs.usql`,
  "Universal command-line interface for SQL databases",
);

/**
 * A portable SCTP userland stack
 */
export const usrsctp = mkPackage(
  nixRaw`pkgs.usrsctp`,
  "A portable SCTP userland stack",
);

/**
 * Micro String API for C language
 */
export const ustr = mkPackage(
  nixRaw`pkgs.ustr`,
  "Micro String API for C language",
);

/**
 * ustream SSL wrapper
 */
export const ustream_ssl = mkPackage(
  nixRaw`pkgs.ustream-ssl`,
  "ustream SSL wrapper",
);

/**
 * ustream SSL wrapper
 */
export const ustream_ssl_mbedtls = mkPackage(
  nixRaw`pkgs.ustream-ssl-mbedtls`,
  "ustream SSL wrapper",
);

/**
 * ustream SSL wrapper
 */
export const ustream_ssl_wolfssl = mkPackage(
  nixRaw`pkgs.ustream-ssl-wolfssl`,
  "ustream SSL wrapper",
);

/**
 * Lightweight and fast MJPG-HTTP streamer
 */
export const ustreamer = mkPackage(
  nixRaw`pkgs.ustreamer`,
  "Lightweight and fast MJPG-HTTP streamer",
);

/**
 * A simple site-to-site synchronization tool
 */
export const usync = mkPackage(
  nixRaw`pkgs.usync`,
  "A simple site-to-site synchronization tool",
);

export const ut2004demo = mkPackage(
  nixRaw`pkgs.ut2004demo`,
  "",
);

/**
 * UTF-8 with C++ in a Portable Way
 */
export const utf8cpp = mkPackage(
  nixRaw`pkgs.utf8cpp`,
  "UTF-8 with C++ in a Portable Way",
);

/**
 * A clean C library for processing UTF-8 Unicode data
 */
export const utf8proc = mkPackage(
  nixRaw`pkgs.utf8proc`,
  "A clean C library for processing UTF-8 Unicode data",
);

/**
 * A hash table for C structures
 */
export const uthash = mkPackage(
  nixRaw`pkgs.uthash`,
  "A hash table for C structures",
);

/**
 * A small cross-platform library for verifying Authenticode digital signatures.
 */
export const uthenticode = mkPackage(
  nixRaw`pkgs.uthenticode`,
  "A small cross-platform library for verifying Authenticode digital signatures.",
);

/**
 * A set of system utilities for Linux
 */
export const util_linux = mkPackage(
  nixRaw`pkgs.util-linux`,
  "A set of system utilities for Linux",
);

/**
 * A set of system utilities for Linux
 */
export const util_linuxMinimal = mkPackage(
  nixRaw`pkgs.util-linuxMinimal`,
  "A set of system utilities for Linux",
);

/**
 * Full featured system emulator and virtual machine host for iOS and macOS
 */
export const utm = mkPackage(
  nixRaw`pkgs.utm`,
  "Full featured system emulator and virtual machine host for iOS and macOS",
);

/**
 * A secure utmpx and wtmp implementation
 */
export const utmps = mkPackage(
  nixRaw`pkgs.utmps`,
  "A secure utmpx and wtmp implementation",
);

/**
 * Lightweight Tox client
 */
export const utox = mkPackage(
  nixRaw`pkgs.utox`,
  "Lightweight Tox client",
);

/**
 * SANE utsushi backend for some Epson scanners
 */
export const utsushi = mkPackage(
  nixRaw`pkgs.utsushi`,
  "SANE utsushi backend for some Epson scanners",
);

/**
 * Network scan plugin for ImageScan v3
 */
export const utsushi_networkscan = mkPackage(
  nixRaw`pkgs.utsushi-networkscan`,
  "Network scan plugin for ImageScan v3",
);

/**
 * Attribute Grammar System of Universiteit Utrecht
 */
export const uuagc = mkPackage(
  nixRaw`pkgs.uuagc`,
  "Attribute Grammar System of Universiteit Utrecht",
);

/**
 * Unix-unix cp over serial line, also includes cu program
 */
export const uucp = mkPackage(
  nixRaw`pkgs.uucp`,
  "Unix-unix cp over serial line, also includes cu program",
);

/**
 * The Nice and Friendly Decoder
 */
export const uudeview = mkPackage(
  nixRaw`pkgs.uudeview`,
  "The Nice and Friendly Decoder",
);

/**
 * Cross-platform Rust rewrite of the GNU coreutils
 */
export const uutils_coreutils = mkPackage(
  nixRaw`pkgs.uutils-coreutils`,
  "Cross-platform Rust rewrite of the GNU coreutils",
);

/**
 * Cross-platform Rust rewrite of the GNU coreutils
 */
export const uutils_coreutils_noprefix = mkPackage(
  nixRaw`pkgs.uutils-coreutils-noprefix`,
  "Cross-platform Rust rewrite of the GNU coreutils",
);

/**
 * Capture image from USB webcam at a specified interval
 */
export const uvccapture = mkPackage(
  nixRaw`pkgs.uvccapture`,
  "Capture image from USB webcam at a specified interval",
);

/**
 * A simple interface for devices supported by the linux UVC driver
 */
export const uvcdynctrl = mkPackage(
  nixRaw`pkgs.uvcdynctrl`,
  "A simple interface for devices supported by the linux UVC driver",
);

/**
 * Monospace bitmap screen fonts for X11
 */
export const uw_ttyp0 = mkPackage(
  nixRaw`pkgs.uw-ttyp0`,
  "Monospace bitmap screen fonts for X11",
);

/**
 * Like wc, but unicode-aware, and with per-line mode
 */
export const uwc = mkPackage(
  nixRaw`pkgs.uwc`,
  "Like wc, but unicode-aware, and with per-line mode",
);

/**
 * UW IMAP toolkit - IMAP-supporting software developed by the UW
 */
export const uwimap = mkPackage(
  nixRaw`pkgs.uwimap`,
  "UW IMAP toolkit - IMAP-supporting software developed by the UW",
);

/**
 * A fast, self-healing and developer/sysadmin-friendly application container server coded in pure C
 */
export const uwsgi = mkPackage(
  nixRaw`pkgs.uwsgi`,
  "A fast, self-healing and developer/sysadmin-friendly application container server coded in pure C",
);

/**
 * A meme system info tool for Linux
 */
export const uwufetch = mkPackage(
  nixRaw`pkgs.uwufetch`,
  "A meme system info tool for Linux",
);

/**
 * Fast text uwuifier
 */
export const uwuify = mkPackage(
  nixRaw`pkgs.uwuify`,
  "Fast text uwuifier",
);

/**
 * An assembler and emulator for the Uxn stack machine
 */
export const uxn = mkPackage(
  nixRaw`pkgs.uxn`,
  "An assembler and emulator for the Uxn stack machine",
);

/**
 * AirPlay Unix mirroring server
 */
export const uxplay = mkPackage(
  nixRaw`pkgs.uxplay`,
  "AirPlay Unix mirroring server",
);

/**
 * A platform for building proxies to bypass network restrictions
 */
export const v2ray = mkPackage(
  nixRaw`pkgs.v2ray`,
  "A platform for building proxies to bypass network restrictions",
);

/**
 * community managed domain list
 */
export const v2ray_domain_list_community = mkPackage(
  nixRaw`pkgs.v2ray-domain-list-community`,
  "community managed domain list",
);

/**
 * GeoIP for V2Ray
 */
export const v2ray_geoip = mkPackage(
  nixRaw`pkgs.v2ray-geoip`,
  "GeoIP for V2Ray",
);

/**
 * A Linux web GUI client of Project V which supports V2Ray, Xray, SS, SSR, Trojan and Pingtunnel
 */
export const v2raya = mkPackage(
  nixRaw`pkgs.v2raya`,
  "A Linux web GUI client of Project V which supports V2Ray, Xray, SS, SSR, Trojan and Pingtunnel",
);

/**
 * Streaming relay for v4l2loopback using GStreamer
 */
export const v4l2_relayd = mkPackage(
  nixRaw`pkgs.v4l2-relayd`,
  "Streaming relay for v4l2loopback using GStreamer",
);

/**
 * V4L utils and libv4l, provide common image formats regardless of the v4l device
 */
export const v4l_utils = mkPackage(
  nixRaw`pkgs.v4l-utils`,
  "V4L utils and libv4l, provide common image formats regardless of the v4l device",
);

/**
 * Google's open source JavaScript engine
 */
export const v8 = mkPackage(
  nixRaw`pkgs.v8`,
  "Google's open source JavaScript engine",
);

/**
 * VDPAU driver for the VAAPI library
 */
export const vaapiVdpau = mkPackage(
  nixRaw`pkgs.vaapiVdpau`,
  "VDPAU driver for the VAAPI library",
);

/**
 * Intel driver for the VAAPI library with partial HW acceleration
 */
export const vaapi_intel_hybrid = mkPackage(
  nixRaw`pkgs.vaapi-intel-hybrid`,
  "Intel driver for the VAAPI library with partial HW acceleration",
);

/**
 * An XMPP client fully composed of plugins
 */
export const vacuum = mkPackage(
  nixRaw`pkgs.vacuum`,
  "An XMPP client fully composed of plugins",
);

/**
 * A tool for building complete development environments
 */
export const vagrant = mkPackage(
  nixRaw`pkgs.vagrant`,
  "A tool for building complete development environments",
);

/**
 * Compiler for GObject type system
 */
export const vala = mkPackage(
  nixRaw`pkgs.vala`,
  "Compiler for GObject type system",
);

/**
 * Compiler for GObject type system
 */
export const vala_0_48 = mkPackage(
  nixRaw`pkgs.vala_0_48`,
  "Compiler for GObject type system",
);

/**
 * Compiler for GObject type system
 */
export const vala_0_54 = mkPackage(
  nixRaw`pkgs.vala_0_54`,
  "Compiler for GObject type system",
);

/**
 * Compiler for GObject type system
 */
export const vala_0_56 = mkPackage(
  nixRaw`pkgs.vala_0_56`,
  "Compiler for GObject type system",
);

/**
 * Code Intelligence for Vala & Genie
 */
export const vala_language_server = mkPackage(
  nixRaw`pkgs.vala-language-server`,
  "Code Intelligence for Vala & Genie",
);

/**
 * Check Vala code files for code-style errors
 */
export const vala_lint = mkPackage(
  nixRaw`pkgs.vala-lint`,
  "Check Vala code files for code-style errors",
);

/**
 * A syntax-aware linter for prose built with speed and extensibility in mind
 */
export const vale = mkPackage(
  nixRaw`pkgs.vale`,
  "A syntax-aware linter for prose built with speed and extensibility in mind",
);

/**
 * An implementation of the KDE Connect protocol, built on GNOME platform libraries
 */
export const valent = mkPackage(
  nixRaw`pkgs.valent`,
  "An implementation of the KDE Connect protocol, built on GNOME platform libraries",
);

/**
 * An open source sewing pattern drafting software
 */
export const valentina = mkPackage(
  nixRaw`pkgs.valentina`,
  "An open source sewing pattern drafting software",
);

/**
 * A WiFi mapping companion app for Valetudo
 */
export const valeronoi = mkPackage(
  nixRaw`pkgs.valeronoi`,
  "A WiFi mapping companion app for Valetudo",
);

/**
 * Debugging and profiling tool suite
 */
export const valgrind = mkPackage(
  nixRaw`pkgs.valgrind`,
  "Debugging and profiling tool suite",
);

/**
 * Debugging and profiling tool suite
 */
export const valgrind_light = mkPackage(
  nixRaw`pkgs.valgrind-light`,
  "Debugging and profiling tool suite",
);

/**
 * Open Source Routing Engine for OpenStreetMap
 */
export const valhalla = mkPackage(
  nixRaw`pkgs.valhalla`,
  "Open Source Routing Engine for OpenStreetMap",
);

export const validatePkgConfig = mkPackage(
  nixRaw`pkgs.validatePkgConfig`,
  "",
);

/**
 * Helps you catch problems in your HTML/CSS/SVG
 */
export const validator_nu = mkPackage(
  nixRaw`pkgs.validator-nu`,
  "Helps you catch problems in your HTML/CSS/SVG",
);

/**
 * NNPDF analysis framework
 */
export const validphys2 = mkPackage(
  nixRaw`pkgs.validphys2`,
  "NNPDF analysis framework",
);

/**
 * Helm-like configuration values loader with support for various sources
 */
export const vals = mkPackage(
  nixRaw`pkgs.vals`,
  "Helm-like configuration values loader with support for various sources",
);

/**
 * Audio processing plugin system for plugins that extract descriptive information from audio data
 */
export const vamp_plugin_sdk = mkPackage(
  nixRaw`pkgs.vamp-plugin-sdk`,
  "Audio processing plugin system for plugins that extract descriptive information from audio data",
);

/**
 * The Vampire Theorem Prover
 */
export const vampire = mkPackage(
  nixRaw`pkgs.vampire`,
  "The Vampire Theorem Prover",
);

/**
 * A style neutral scalable cursor theme
 */
export const vanilla_dmz = mkPackage(
  nixRaw`pkgs.vanilla-dmz`,
  "A style neutral scalable cursor theme",
);

/**
 * A video processing framework with the future in mind
 */
export const vapoursynth = mkPackage(
  nixRaw`pkgs.vapoursynth`,
  "A video processing framework with the future in mind",
);

export const vapoursynth_editor = mkPackage(
  nixRaw`pkgs.vapoursynth-editor`,
  "",
);

/**
 * A set of filters for motion estimation and compensation
 */
export const vapoursynth_mvtools = mkPackage(
  nixRaw`pkgs.vapoursynth-mvtools`,
  "A set of filters for motion estimation and compensation",
);

/**
 * A wallpaper manager for Linux systems
 */
export const variety = mkPackage(
  nixRaw`pkgs.variety`,
  "A wallpaper manager for Linux systems",
);

/**
 * Web application accelerator also known as a caching HTTP reverse proxy
 */
export const varnish = mkPackage(
  nixRaw`pkgs.varnish`,
  "Web application accelerator also known as a caching HTTP reverse proxy",
);

/**
 * Web application accelerator also known as a caching HTTP reverse proxy
 */
export const varnish60 = mkPackage(
  nixRaw`pkgs.varnish60`,
  "Web application accelerator also known as a caching HTTP reverse proxy",
);

/**
 * Web application accelerator also known as a caching HTTP reverse proxy
 */
export const varnish74 = mkPackage(
  nixRaw`pkgs.varnish74`,
  "Web application accelerator also known as a caching HTTP reverse proxy",
);

/**
 * Variant calling and somatic mutation/CNV detection for next-generation sequencing data
 */
export const varscan = mkPackage(
  nixRaw`pkgs.varscan`,
  "Variant calling and somatic mutation/CNV detection for next-generation sequencing data",
);

/**
 * A free, open-source boardgame engine
 */
export const vassal = mkPackage(
  nixRaw`pkgs.vassal`,
  "A free, open-source boardgame engine",
);

/**
 * A tool for managing secrets
 */
export const vault = mkPackage(
  nixRaw`pkgs.vault`,
  "A tool for managing secrets",
);

/**
 * A tool for managing secrets, this binary includes the UI
 */
export const vault_bin = mkPackage(
  nixRaw`pkgs.vault-bin`,
  "A tool for managing secrets, this binary includes the UI",
);

/**
 * A cli tool for importing and exporting Hashicorp Vault secrets
 */
export const vault_medusa = mkPackage(
  nixRaw`pkgs.vault-medusa`,
  "A cli tool for importing and exporting Hashicorp Vault secrets",
);

/**
 * Automatically use HashiCorp Vault SSH Client Key Signing with ssh(1)
 */
export const vault_ssh_plus = mkPackage(
  nixRaw`pkgs.vault-ssh-plus`,
  "Automatically use HashiCorp Vault SSH Client Key Signing with ssh(1)",
);

/**
 * Runs processes with secrets from HashiCorp Vault
 */
export const vaultenv = mkPackage(
  nixRaw`pkgs.vaultenv`,
  "Runs processes with secrets from HashiCorp Vault",
);

/**
 * Unofficial Bitwarden compatible server written in Rust
 */
export const vaultwarden = mkPackage(
  nixRaw`pkgs.vaultwarden`,
  "Unofficial Bitwarden compatible server written in Rust",
);

/**
 * Unofficial Bitwarden compatible server written in Rust
 */
export const vaultwarden_mysql = mkPackage(
  nixRaw`pkgs.vaultwarden-mysql`,
  "Unofficial Bitwarden compatible server written in Rust",
);

/**
 * Unofficial Bitwarden compatible server written in Rust
 */
export const vaultwarden_postgresql = mkPackage(
  nixRaw`pkgs.vaultwarden-postgresql`,
  "Unofficial Bitwarden compatible server written in Rust",
);

/**
 * Unofficial Bitwarden compatible server written in Rust
 */
export const vaultwarden_sqlite = mkPackage(
  nixRaw`pkgs.vaultwarden-sqlite`,
  "Unofficial Bitwarden compatible server written in Rust",
);

/**
 * A Persian (farsi) Monospaced Font for coding
 */
export const vazir_code_font = mkPackage(
  nixRaw`pkgs.vazir-code-font`,
  "A Persian (farsi) Monospaced Font for coding",
);

/**
 * A Persian (Farsi) Font - قلم (فونت) فارسی وزیر
 */
export const vazir_fonts = mkPackage(
  nixRaw`pkgs.vazir-fonts`,
  "A Persian (Farsi) Font - قلم (فونت) فارسی وزیر",
);

/**
 * A merge of the original Visual Boy Advance forks
 */
export const vbam = mkPackage(
  nixRaw`pkgs.vbam`,
  "A merge of the original Visual Boy Advance forks",
);

/**
 * Video BIOS execution tool
 */
export const vbetool = mkPackage(
  nixRaw`pkgs.vbetool`,
  "Video BIOS execution tool",
);

/**
 * A terminal visual binary diff viewer
 */
export const vbindiff = mkPackage(
  nixRaw`pkgs.vbindiff`,
  "A terminal visual binary diff viewer",
);

/**
 * Chrome OS partitioning and kernel signing tools
 */
export const vboot_reference = mkPackage(
  nixRaw`pkgs.vboot_reference`,
  "Chrome OS partitioning and kernel signing tools",
);

/**
 * Library for multiprecision complex arithmetic with exact rounding
 */
export const vc = mkPackage(
  nixRaw`pkgs.vc`,
  "Library for multiprecision complex arithmetic with exact rounding",
);

export const vc4_newlib = mkPackage(
  nixRaw`pkgs.vc4-newlib`,
  "",
);

/**
 * Library for multiprecision complex arithmetic with exact rounding
 */
export const vc_0_7 = mkPackage(
  nixRaw`pkgs.vc_0_7`,
  "Library for multiprecision complex arithmetic with exact rounding",
);

/**
 * Parser for VCalendar and ICalendar files, usable from the command line
 */
export const vcal = mkPackage(
  nixRaw`pkgs.vcal`,
  "Parser for VCalendar and ICalendar files, usable from the command line",
);

/**
 * vCard validator, class and utility functions
 */
export const vcard = mkPackage(
  nixRaw`pkgs.vcard`,
  "vCard validator, class and utility functions",
);

/**
 * Full-featured mastering suite for authoring, disassembling and analyzing Video CDs and Super Video CDs
 */
export const vcdimager = mkPackage(
  nixRaw`pkgs.vcdimager`,
  "Full-featured mastering suite for authoring, disassembling and analyzing Video CDs and Super Video CDs",
);

/**
 * A set of tools written in Perl and C++ for working with VCF files, such as those generated by the 1000 Genomes Project
 */
export const vcftools = mkPackage(
  nixRaw`pkgs.vcftools`,
  "A set of tools written in Perl and C++ for working with VCF files, such as those generated by the 1000 Genomes Project",
);

/**
 * C++ library for manipulation, processing and displaying with OpenGL of triangle and tetrahedral meshes
 */
export const vcg = mkPackage(
  nixRaw`pkgs.vcg`,
  "C++ library for manipulation, processing and displaying with OpenGL of triangle and tetrahedral meshes",
);

/**
 * Create fully functional virtual Kubernetes clusters
 */
export const vcluster = mkPackage(
  nixRaw`pkgs.vcluster`,
  "Create fully functional virtual Kubernetes clusters",
);

/**
 * An open-source engine for Heroes of Might and Magic III
 */
export const vcmi = mkPackage(
  nixRaw`pkgs.vcmi`,
  "An open-source engine for Heroes of Might and Magic III",
);

        /**
         * A little C program that prints a short string with barebones information
about the current working directory for various version control systems

         */
export const vcprompt = mkPackage(
  nixRaw`pkgs.vcprompt`,
  "A little C program that prints a short string with barebones information\nabout the current working directory for various version control systems\n",
);

/**
 * Generates contact sheets from video files
 */
export const vcs = mkPackage(
  nixRaw`pkgs.vcs`,
  "Generates contact sheets from video files",
);

/**
 * eMail query-command to use vCards in mutt and Vim
 */
export const vcs_query = mkPackage(
  nixRaw`pkgs.vcs_query`,
  "eMail query-command to use vCards in mutt and Vim",
);

/**
 * Version Control System for $HOME
 */
export const vcsh = mkPackage(
  nixRaw`pkgs.vcsh`,
  "Version Control System for $HOME",
);

/**
 * Create video contact sheets
 */
export const vcsi = mkPackage(
  nixRaw`pkgs.vcsi`,
  "Create video contact sheets",
);

/**
 * Provides a command line tool to invoke vcs commands on multiple repositories
 */
export const vcstool = mkPackage(
  nixRaw`pkgs.vcstool`,
  "Provides a command line tool to invoke vcs commands on multiple repositories",
);

/**
 * Open-source virtual modular synthesizer
 */
export const vcv_rack = mkPackage(
  nixRaw`pkgs.vcv-rack`,
  "Open-source virtual modular synthesizer",
);

/**
 * Virtual Distributed Ethernet, an Ethernet compliant virtual network
 */
export const vde2 = mkPackage(
  nixRaw`pkgs.vde2`,
  "Virtual Distributed Ethernet, an Ethernet compliant virtual network",
);

/**
 * Synchronize calendars and contacts
 */
export const vdirsyncer = mkPackage(
  nixRaw`pkgs.vdirsyncer`,
  "Synchronize calendars and contacts",
);

/**
 * A program that adds error correction blocks
 */
export const vdmfec = mkPackage(
  nixRaw`pkgs.vdmfec`,
  "A program that adds error correction blocks",
);

/**
 * A set of userspace tools for managing pools of deduplicated and/or compressed block storage
 */
export const vdo = mkPackage(
  nixRaw`pkgs.vdo`,
  "A set of userspace tools for managing pools of deduplicated and/or compressed block storage",
);

/**
 * Tool to query the Video Decode and Presentation API for Unix (VDPAU) abilities of the system
 */
export const vdpauinfo = mkPackage(
  nixRaw`pkgs.vdpauinfo`,
  "Tool to query the Video Decode and Presentation API for Unix (VDPAU) abilities of the system",
);

/**
 * Video Disc Recorder
 */
export const vdr = mkPackage(
  nixRaw`pkgs.vdr`,
  "Video Disc Recorder",
);

/**
 * Car racing game
 */
export const vdrift = mkPackage(
  nixRaw`pkgs.vdrift`,
  "Car racing game",
);

/**
 * Car racing game
 */
export const vdrift_bin = mkPackage(
  nixRaw`pkgs.vdrift-bin`,
  "Car racing game",
);

/**
 * DejaVu fonts with additional symbols used by VDR
 */
export const vdrsymbols = mkPackage(
  nixRaw`pkgs.vdrsymbols`,
  "DejaVu fonts with additional symbols used by VDR",
);

/**
 * A high-performance observability data pipeline
 */
export const vector = mkPackage(
  nixRaw`pkgs.vector`,
  "A high-performance observability data pipeline",
);

/**
 * Clone of the classic arcade game Asteroids by Atari
 */
export const vectoroids = mkPackage(
  nixRaw`pkgs.vectoroids`,
  "Clone of the classic arcade game Asteroids by Atari",
);

/**
 * A portable fork of the high-performance regular expression matching library
 */
export const vectorscan = mkPackage(
  nixRaw`pkgs.vectorscan`,
  "A portable fork of the high-performance regular expression matching library",
);

/**
 * Versatile HTTP load testing tool
 */
export const vegeta = mkPackage(
  nixRaw`pkgs.vegeta`,
  "Versatile HTTP load testing tool",
);

/**
 * A humanist sans serif font
 */
export const vegur = mkPackage(
  nixRaw`pkgs.vegur`,
  "A humanist sans serif font",
);

/**
 * Configuration tool for the VEIKK Linux driver
 */
export const veikk_linux_driver_gui = mkPackage(
  nixRaw`pkgs.veikk-linux-driver-gui`,
  "Configuration tool for the VEIKK Linux driver",
);

/**
 * An open-source, peer-to-peer, mobile-first, networked application framework
 */
export const veilid = mkPackage(
  nixRaw`pkgs.veilid`,
  "An open-source, peer-to-peer, mobile-first, networked application framework",
);

/**
 * A utility for managing disaster recovery, specifically for your Kubernetes cluster resources and persistent volumes
 */
export const velero = mkPackage(
  nixRaw`pkgs.velero`,
  "A utility for managing disaster recovery, specifically for your Kubernetes cluster resources and persistent volumes",
);

/**
 * Vencord web extension
 */
export const vencord = mkPackage(
  nixRaw`pkgs.vencord`,
  "Vencord web extension",
);

/**
 * Vencord web extension
 */
export const vencord_web_extension = mkPackage(
  nixRaw`pkgs.vencord-web-extension`,
  "Vencord web extension",
);

/**
 * CLI tool to vendor portions of git repos, github releases, helm charts, docker image contents, etc. declaratively
 */
export const vendir = mkPackage(
  nixRaw`pkgs.vendir`,
  "CLI tool to vendor portions of git repos, github releases, helm charts, docker image contents, etc. declaratively",
);

/**
 * Tools from the vengi voxel engine, including a thumbnailer, a converter, and the VoxEdit voxel editor
 */
export const vengi_tools = mkPackage(
  nixRaw`pkgs.vengi-tools`,
  "Tools from the vengi voxel engine, including a thumbnailer, a converter, and the VoxEdit voxel editor",
);

/**
 * Gtk theme based on windows 10 style
 */
export const venta = mkPackage(
  nixRaw`pkgs.venta`,
  "Gtk theme based on windows 10 style",
);

/**
 * A New Bootable USB Solution
 */
export const ventoy = mkPackage(
  nixRaw`pkgs.ventoy`,
  "A New Bootable USB Solution",
);

/**
 * A New Bootable USB Solution
 */
export const ventoy_full = mkPackage(
  nixRaw`pkgs.ventoy-full`,
  "A New Bootable USB Solution",
);

/**
 * Free Open-Source filesystem on-the-fly encryption
 */
export const veracrypt = mkPackage(
  nixRaw`pkgs.veracrypt`,
  "Free Open-Source filesystem on-the-fly encryption",
);

/**
 * French and Italian verb conjugator
 */
export const verbiste = mkPackage(
  nixRaw`pkgs.verbiste`,
  "French and Italian verb conjugator",
);

/**
 * Package your Node.js project into an executable
 */
export const vercel_pkg = mkPackage(
  nixRaw`pkgs.vercel-pkg`,
  "Package your Node.js project into an executable",
);

/**
 * A simple Git/Mercurial/PlasticSCM tui client based on keyboard shortcuts
 */
export const verco = mkPackage(
  nixRaw`pkgs.verco`,
  "A simple Git/Mercurial/PlasticSCM tui client based on keyboard shortcuts",
);

/**
 * An open, trustable and efficient SMT-solver
 */
export const veriT = mkPackage(
  nixRaw`pkgs.veriT`,
  "An open, trustable and efficient SMT-solver",
);

/**
 * Suite of SystemVerilog developer tools. Including a style-linter, indexer, formatter, and language server.
 */
export const verible = mkPackage(
  nixRaw`pkgs.verible`,
  "Suite of SystemVerilog developer tools. Including a style-linter, indexer, formatter, and language server.",
);

/**
 * Verification for C and Java programs via separation logic
 */
export const verifast = mkPackage(
  nixRaw`pkgs.verifast`,
  "Verification for C and Java programs via separation logic",
);

/**
 * Cryptographic protocol analysis for students and engineers
 */
export const verifpal = mkPackage(
  nixRaw`pkgs.verifpal`,
  "Cryptographic protocol analysis for students and engineers",
);

/**
 * Fast and robust (System)Verilog simulator/compiler and linter
 */
export const verilator = mkPackage(
  nixRaw`pkgs.verilator`,
  "Fast and robust (System)Verilog simulator/compiler and linter",
);

/**
 * Icarus Verilog compiler
 */
export const verilog = mkPackage(
  nixRaw`pkgs.verilog`,
  "Icarus Verilog compiler",
);

/**
 * Benchmark multiple API endpoints against each other
 */
export const versus = mkPackage(
  nixRaw`pkgs.versus`,
  "Benchmark multiple API endpoints against each other",
);

/**
 * A digital currency with mining decentralisation and ASIC resistance as a key focus
 */
export const vertcoin = mkPackage(
  nixRaw`pkgs.vertcoin`,
  "A digital currency with mining decentralisation and ASIC resistance as a key focus",
);

/**
 * A digital currency with mining decentralisation and ASIC resistance as a key focus
 */
export const vertcoind = mkPackage(
  nixRaw`pkgs.vertcoind`,
  "A digital currency with mining decentralisation and ASIC resistance as a key focus",
);

/**
 * Speeding up the estimation of phylogenetic trees for large alignments through parallelization and vectorization strategies
 */
export const veryfasttree = mkPackage(
  nixRaw`pkgs.veryfasttree`,
  "Speeding up the estimation of phylogenetic trees for large alignments through parallelization and vectorization strategies",
);

/**
 * An alternate client for Discord with Vencord built-in
 */
export const vesktop = mkPackage(
  nixRaw`pkgs.vesktop`,
  "An alternate client for Discord with Vencord built-in",
);

/**
 * A fluid physics based puzzle game
 */
export const vessel = mkPackage(
  nixRaw`pkgs.vessel`,
  "A fluid physics based puzzle game",
);

/**
 * A scientific plotting and graphing program with a GUI
 */
export const veusz = mkPackage(
  nixRaw`pkgs.veusz`,
  "A scientific plotting and graphing program with a GUI",
);

/**
 * A tool to attest VEX impact statements
 */
export const vexctl = mkPackage(
  nixRaw`pkgs.vexctl`,
  "A tool to attest VEX impact statements",
);

/**
 * New VGMPlay, based on libvgm
 */
export const vgmplay_libvgm = mkPackage(
  nixRaw`pkgs.vgmplay-libvgm`,
  "New VGMPlay, based on libvgm",
);

/**
 * A library for playback of various streamed audio formats used in video games
 */
export const vgmstream = mkPackage(
  nixRaw`pkgs.vgmstream`,
  "A library for playback of various streamed audio formats used in video games",
);

/**
 * A collection of tools for the VGM file format
 */
export const vgmtools = mkPackage(
  nixRaw`pkgs.vgmtools`,
  "A collection of tools for the VGM file format",
);

/**
 * User-friendly pager for grep/git-grep/ripgrep
 */
export const vgrep = mkPackage(
  nixRaw`pkgs.vgrep`,
  "User-friendly pager for grep/git-grep/ripgrep",
);

/**
 * VHDL to Verilog converter
 */
export const vhd2vl = mkPackage(
  nixRaw`pkgs.vhd2vl`,
  "VHDL to Verilog converter",
);

/**
 * A fast VHDL language server
 */
export const vhdl_ls = mkPackage(
  nixRaw`pkgs.vhdl-ls`,
  "A fast VHDL language server",
);

/**
 * A tool for generating terminal GIFs with code
 */
export const vhs = mkPackage(
  nixRaw`pkgs.vhs`,
  "A tool for generating terminal GIFs with code",
);

/**
 * Yet another keyboard configurator
 */
export const via = mkPackage(
  nixRaw`pkgs.via`,
  "Yet another keyboard configurator",
);

/**
 * An Open-source GUI and QMK fork for configuring your keyboard in real time
 */
export const vial = mkPackage(
  nixRaw`pkgs.vial`,
  "An Open-source GUI and QMK fork for configuring your keyboard in real time",
);

/**
 * An instant messaging and Voice over IP (VoIP) app
 */
export const viber = mkPackage(
  nixRaw`pkgs.viber`,
  "An instant messaging and Voice over IP (VoIP) app",
);

/**
 * Emulators for a variety of 8-bit Commodore computers
 */
export const vice = mkPackage(
  nixRaw`pkgs.vice`,
  "Emulators for a variety of 8-bit Commodore computers",
);

/**
 * Viceroy provides local testing for developers working with Compute@Edge
 */
export const viceroy = mkPackage(
  nixRaw`pkgs.viceroy`,
  "Viceroy provides local testing for developers working with Compute@Edge",
);

/**
 * Free programming font with cursive italics and ligatures
 */
export const victor_mono = mkPackage(
  nixRaw`pkgs.victor-mono`,
  "Free programming font with cursive italics and ligatures",
);

/**
 * fast, cost-effective and scalable time series database, long-term remote storage for Prometheus
 */
export const victoriametrics = mkPackage(
  nixRaw`pkgs.victoriametrics`,
  "fast, cost-effective and scalable time series database, long-term remote storage for Prometheus",
);

/**
 * Video stabilization library
 */
export const vid_stab = mkPackage(
  nixRaw`pkgs.vid-stab`,
  "Video stabilization library",
);

/**
 * A modern watch command
 */
export const viddy = mkPackage(
  nixRaw`pkgs.viddy`,
  "A modern watch command",
);

/**
 * Youtube synthesia video to midi conversion tool
 */
export const video2midi = mkPackage(
  nixRaw`pkgs.video2midi`,
  "Youtube synthesia video to midi conversion tool",
);

/**
 * Trim videos quickly
 */
export const video_trimmer = mkPackage(
  nixRaw`pkgs.video-trimmer`,
  "Trim videos quickly",
);

/**
 * Vim Inspired Electron Browser
 */
export const vieb = mkPackage(
  nixRaw`pkgs.vieb`,
  "Vim Inspired Electron Browser",
);

/**
 * Prediction and comparison of RNA secondary structures
 */
export const viennarna = mkPackage(
  nixRaw`pkgs.viennarna`,
  "Prediction and comparison of RNA secondary structures",
);

/**
 * Fast and simple image viewer
 */
export const viewnior = mkPackage(
  nixRaw`pkgs.viewnior`,
  "Fast and simple image viewer",
);

/**
 * A vi-like file manager
 */
export const vifm = mkPackage(
  nixRaw`pkgs.vifm`,
  "A vi-like file manager",
);

/**
 * A vi-like file manager; Includes support for optional features
 */
export const vifm_full = mkPackage(
  nixRaw`pkgs.vifm-full`,
  "A vi-like file manager; Includes support for optional features",
);

/**
 * Novel computer vision C++ library with customizable algorithms and data structures
 */
export const vigra = mkPackage(
  nixRaw`pkgs.vigra`,
  "Novel computer vision C++ library with customizable algorithms and data structures",
);

/**
 * GPS data editor and analyzer
 */
export const viking = mkPackage(
  nixRaw`pkgs.viking`,
  "GPS data editor and analyzer",
);

/**
 * API of the Vikunja to-do list app
 */
export const vikunja_api = mkPackage(
  nixRaw`pkgs.vikunja-api`,
  "API of the Vikunja to-do list app",
);

/**
 * Frontend of the Vikunja to-do list app
 */
export const vikunja_frontend = mkPackage(
  nixRaw`pkgs.vikunja-frontend`,
  "Frontend of the Vikunja to-do list app",
);

/**
 * The most popular clone of the VI editor
 */
export const vim = mkPackage(
  nixRaw`pkgs.vim`,
  "The most popular clone of the VI editor",
);

export const vimPluginsUpdater = mkPackage(
  nixRaw`pkgs.vimPluginsUpdater`,
  "",
);

export const vim_darwin = mkPackage(
  nixRaw`pkgs.vim-darwin`,
  "",
);

/**
 * The most popular clone of the VI editor
 */
export const vim_full = mkPackage(
  nixRaw`pkgs.vim-full`,
  "The most popular clone of the VI editor",
);

/**
 * Fast and Highly Extensible Vim script Language Lint implemented by Python
 */
export const vim_vint = mkPackage(
  nixRaw`pkgs.vim-vint`,
  "Fast and Highly Extensible Vim script Language Lint implemented by Python",
);

/**
 * Vim-Improved eMACS: Emacs emulation for Vim
 */
export const vimacs = mkPackage(
  nixRaw`pkgs.vimacs`,
  "Vim-Improved eMACS: Emacs emulation for Vim",
);

/**
 * A Vim-like browser
 */
export const vimb = mkPackage(
  nixRaw`pkgs.vimb`,
  "A Vim-like browser",
);

/**
 * A Vim-like browser
 */
export const vimb_unwrapped = mkPackage(
  nixRaw`pkgs.vimb-unwrapped`,
  "A Vim-like browser",
);

        /**
         * A convenience wrapper for gvim/mvim --remote(-tab)-silent to open files
in an existing instance of GVim or MacVim.

         */
export const vimer = mkPackage(
  nixRaw`pkgs.vimer`,
  "A convenience wrapper for gvim/mvim --remote(-tab)-silent to open files\nin an existing instance of GVim or MacVim.\n",
);

/**
 * A game that tests Vim efficiency
 */
export const vimgolf = mkPackage(
  nixRaw`pkgs.vimgolf`,
  "A game that tests Vim efficiency",
);

/**
 * Image viewer with Vim-like keybindings (Qt port)
 */
export const vimiv_qt = mkPackage(
  nixRaw`pkgs.vimiv-qt`,
  "Image viewer with Vim-like keybindings (Qt port)",
);

/**
 * Flat Material Design theme for GTK based desktop environments
 */
export const vimix_gtk_themes = mkPackage(
  nixRaw`pkgs.vimix-gtk-themes`,
  "Flat Material Design theme for GTK based desktop environments",
);

/**
 * A Material Design icon theme based on Paper icon theme
 */
export const vimix_icon_theme = mkPackage(
  nixRaw`pkgs.vimix-icon-theme`,
  "A Material Design icon theme based on Paper icon theme",
);

/**
 * Use Vim as PAGER
 */
export const vimpager = mkPackage(
  nixRaw`pkgs.vimpager`,
  "Use Vim as PAGER",
);

/**
 * Use Vim as PAGER
 */
export const vimpager_latest = mkPackage(
  nixRaw`pkgs.vimpager-latest`,
  "Use Vim as PAGER",
);

/**
 * A vi/vim inspired client for the Music Player Daemon (mpd)
 */
export const vimpc = mkPackage(
  nixRaw`pkgs.vimpc`,
  "A vi/vim inspired client for the Music Player Daemon (mpd)",
);

/**
 * Batch-rename files using Vim
 */
export const vimv = mkPackage(
  nixRaw`pkgs.vimv`,
  "Batch-rename files using Vim",
);

/**
 * Command line utility for batch-renaming files
 */
export const vimv_rs = mkPackage(
  nixRaw`pkgs.vimv-rs`,
  "Command line utility for batch-renaming files",
);

/**
 * Vimwiki markdown plugin
 */
export const vimwiki_markdown = mkPackage(
  nixRaw`pkgs.vimwiki-markdown`,
  "Vimwiki markdown plugin",
);

/**
 * An in-development indie sandbox game about innovation and exploration
 */
export const vintagestory = mkPackage(
  nixRaw`pkgs.vintagestory`,
  "An in-development indie sandbox game about innovation and exploration",
);

/**
 * An Adaptive Digital Sound Processor
 */
export const viper4linux = mkPackage(
  nixRaw`pkgs.viper4linux`,
  "An Adaptive Digital Sound Processor",
);

/**
 * Official UI for Viper4Linux2
 */
export const viper4linux_gui = mkPackage(
  nixRaw`pkgs.viper4linux-gui`,
  "Official UI for Viper4Linux2",
);

/**
 * Image processing system for large images
 */
export const vips = mkPackage(
  nixRaw`pkgs.vips`,
  "Image processing system for large images",
);

/**
 * Tiny image viewer with libvips
 */
export const vipsdisp = mkPackage(
  nixRaw`pkgs.vipsdisp`,
  "Tiny image viewer with libvips",
);

/**
 * A virtual 3D GPU library that allows a qemu guest to use the host GPU for accelerated 3D rendering
 */
export const virglrenderer = mkPackage(
  nixRaw`pkgs.virglrenderer`,
  "A virtual 3D GPU library that allows a qemu guest to use the host GPU for accelerated 3D rendering",
);

/**
 * Desktop user interface for managing virtual machines
 */
export const virt_manager = mkPackage(
  nixRaw`pkgs.virt-manager`,
  "Desktop user interface for managing virtual machines",
);

/**
 * Desktop user interface for managing virtual machines (QT)
 */
export const virt_manager_qt = mkPackage(
  nixRaw`pkgs.virt-manager-qt`,
  "Desktop user interface for managing virtual machines (QT)",
);

/**
 * A top-like utility for showing stats of virtualized domains
 */
export const virt_top = mkPackage(
  nixRaw`pkgs.virt-top`,
  "A top-like utility for showing stats of virtualized domains",
);

/**
 * A viewer for remote virtual machines
 */
export const virt_viewer = mkPackage(
  nixRaw`pkgs.virt-viewer`,
  "A viewer for remote virtual machines",
);

/**
 * Detect if running in a virtual machine and prints its type
 */
export const virt_what = mkPackage(
  nixRaw`pkgs.virt-what`,
  "Detect if running in a virtual machine and prints its type",
);

/**
 * A command line tool for simple creation and cloning of virtual machines based on libvirt
 */
export const virter = mkPackage(
  nixRaw`pkgs.virter`,
  "A command line tool for simple creation and cloning of virtual machines based on libvirt",
);

/**
 * Windows VirtIO Drivers
 */
export const virtio_win = mkPackage(
  nixRaw`pkgs.virtio-win`,
  "Windows VirtIO Drivers",
);

/**
 * vhost-user virtio-fs device backend written in Rust
 */
export const virtiofsd = mkPackage(
  nixRaw`pkgs.virtiofsd`,
  "vhost-user virtio-fs device backend written in Rust",
);

/**
 * Make your iPad/tablet/computer as a secondary monitor on Linux
 */
export const virtscreen = mkPackage(
  nixRaw`pkgs.virtscreen`,
  "Make your iPad/tablet/computer as a secondary monitor on Linux",
);

/**
 * Photoelectronic microtonal/spectral musical instrument
 */
export const virtual_ans = mkPackage(
  nixRaw`pkgs.virtual-ans`,
  "Photoelectronic microtonal/spectral musical instrument",
);

/**
 * PC emulator
 */
export const virtualbox = mkPackage(
  nixRaw`pkgs.virtualbox`,
  "PC emulator",
);

/**
 * Oracle Extension pack for VirtualBox
 */
export const virtualboxExtpack = mkPackage(
  nixRaw`pkgs.virtualboxExtpack`,
  "Oracle Extension pack for VirtualBox",
);

/**
 * PC emulator
 */
export const virtualboxHardened = mkPackage(
  nixRaw`pkgs.virtualboxHardened`,
  "PC emulator",
);

/**
 * PC emulator
 */
export const virtualboxHeadless = mkPackage(
  nixRaw`pkgs.virtualboxHeadless`,
  "PC emulator",
);

/**
 * PC emulator
 */
export const virtualboxWithExtpack = mkPackage(
  nixRaw`pkgs.virtualboxWithExtpack`,
  "PC emulator",
);

/**
 * A tool to create isolated Python environments
 */
export const virtualenv = mkPackage(
  nixRaw`pkgs.virtualenv`,
  "A tool to create isolated Python environments",
);

/**
 * Script to clone virtualenvs
 */
export const virtualenv_clone = mkPackage(
  nixRaw`pkgs.virtualenv-clone`,
  "Script to clone virtualenvs",
);

export const virtualgl = mkPackage(
  nixRaw`pkgs.virtualgl`,
  "",
);

/**
 * X11 GL rendering in a remote computer with full 3D hw acceleration
 */
export const virtualglLib = mkPackage(
  nixRaw`pkgs.virtualglLib`,
  "X11 GL rendering in a remote computer with full 3D hw acceleration",
);

/**
 * Loadable dynamic extension to both SQLite and SpatiaLite
 */
export const virtualpg = mkPackage(
  nixRaw`pkgs.virtualpg`,
  "Loadable dynamic extension to both SQLite and SpatiaLite",
);

/**
 * A vim like editor
 */
export const vis = mkPackage(
  nixRaw`pkgs.vis`,
  "A vim like editor",
);

/**
 * Interactive terminal multitool for tabular data
 */
export const visidata = mkPackage(
  nixRaw`pkgs.visidata`,
  "Interactive terminal multitool for tabular data",
);

/**
 * Some TrueType fonts from Microsoft Windows Vista (Calibri, Cambria, Candara, Consolas, Constantia, Corbel)
 */
export const vistafonts = mkPackage(
  nixRaw`pkgs.vistafonts`,
  "Some TrueType fonts from Microsoft Windows Vista (Calibri, Cambria, Candara, Consolas, Constantia, Corbel)",
);

/**
 * TrueType fonts from Microsoft Windows Vista For Simplified Chinese (Microsoft YaHei)
 */
export const vistafonts_chs = mkPackage(
  nixRaw`pkgs.vistafonts-chs`,
  "TrueType fonts from Microsoft Windows Vista For Simplified Chinese (Microsoft YaHei)",
);

/**
 * TrueType fonts from Microsoft Windows Vista For Traditional Chinese (Microsoft JhengHei)
 */
export const vistafonts_cht = mkPackage(
  nixRaw`pkgs.vistafonts-cht`,
  "TrueType fonts from Microsoft Windows Vista For Traditional Chinese (Microsoft JhengHei)",
);

/**
 * A visual interface for viewing information about Java applications
 */
export const visualvm = mkPackage(
  nixRaw`pkgs.visualvm`,
  "A visual interface for viewing information about Java applications",
);

/**
 * Visual Interactive Taskwarrior
 */
export const vit = mkPackage(
  nixRaw`pkgs.vit`,
  "Visual Interactive Taskwarrior",
);

/**
 * Spectral warping wavetable synth
 */
export const vital = mkPackage(
  nixRaw`pkgs.vital`,
  "Spectral warping wavetable synth",
);

/**
 * Visual Trace Explorer (ViTE), a tool to visualize execution traces
 */
export const vite = mkPackage(
  nixRaw`pkgs.vite`,
  "Visual Trace Explorer (ViTE), a tool to visualize execution traces",
);

/**
 * A database clustering system for horizontal scaling of MySQL
 */
export const vitess = mkPackage(
  nixRaw`pkgs.vitess`,
  "A database clustering system for horizontal scaling of MySQL",
);

/**
 * Terminal-based Tetris clone by Victor Nilsson
 */
export const vitetris = mkPackage(
  nixRaw`pkgs.vitetris`,
  "Terminal-based Tetris clone by Victor Nilsson",
);

/**
 * A command-line application to view images from the terminal written in Rust
 */
export const viu = mkPackage(
  nixRaw`pkgs.viu`,
  "A command-line application to view images from the terminal written in Rust",
);

/**
 * A Browser for our Friends, powerful and personal
 */
export const vivaldi = mkPackage(
  nixRaw`pkgs.vivaldi`,
  "A Browser for our Friends, powerful and personal",
);

/**
 * Additional support for proprietary codecs for Vivaldi
 */
export const vivaldi_ffmpeg_codecs = mkPackage(
  nixRaw`pkgs.vivaldi-ffmpeg-codecs`,
  "Additional support for proprietary codecs for Vivaldi",
);

/**
 * An easy to use tool for subjective comparison of the visual quality of different encodings of the same video source
 */
export const vivictpp = mkPackage(
  nixRaw`pkgs.vivictpp`,
  "An easy to use tool for subjective comparison of the visual quality of different encodings of the same video source",
);

/**
 * A generator for LS_COLORS with support for multiple color themes
 */
export const vivid = mkPackage(
  nixRaw`pkgs.vivid`,
  "A generator for LS_COLORS with support for multiple color themes",
);

/**
 * Python disassembler, debugger, emulator, and static analysis framework
 */
export const vivisect = mkPackage(
  nixRaw`pkgs.vivisect`,
  "Python disassembler, debugger, emulator, and static analysis framework",
);

/**
 * VI Worsened, a fun and light clone of VI
 */
export const viw = mkPackage(
  nixRaw`pkgs.viw`,
  "VI Worsened, a fun and light clone of VI",
);

/**
 * Visual Interface heXadecimal dump 
 */
export const vix = mkPackage(
  nixRaw`pkgs.vix`,
  "Visual Interface heXadecimal dump ",
);

/**
 * Vulkan Bootstrapping Library
 */
export const vk_bootstrap = mkPackage(
  nixRaw`pkgs.vk-bootstrap`,
  "Vulkan Bootstrapping Library",
);

/**
 * A console (ncurses) client for vk.com written in D
 */
export const vk_cli = mkPackage(
  nixRaw`pkgs.vk-cli`,
  "A console (ncurses) client for vk.com written in D",
);

/**
 * Simple and Convenient Messaging App for VK
 */
export const vk_messenger = mkPackage(
  nixRaw`pkgs.vk-messenger`,
  "Simple and Convenient Messaging App for VK",
);

/**
 * A Vulkan post processing layer for Linux
 */
export const vkbasalt = mkPackage(
  nixRaw`pkgs.vkbasalt`,
  "A Vulkan post processing layer for Linux",
);

/**
 * Command-line utility for vkBasalt
 */
export const vkbasalt_cli = mkPackage(
  nixRaw`pkgs.vkbasalt-cli`,
  "Command-line utility for vkBasalt",
);

/**
 * A 3D graphics library with an API very similar, but not identical, to Direct3D 12
 */
export const vkd3d = mkPackage(
  nixRaw`pkgs.vkd3d`,
  "A 3D graphics library with an API very similar, but not identical, to Direct3D 12",
);

/**
 * A fork of VKD3D, which aims to implement the full Direct3D 12 API on top of Vulkan
 */
export const vkd3d_proton = mkPackage(
  nixRaw`pkgs.vkd3d-proton`,
  "A fork of VKD3D, which aims to implement the full Direct3D 12 API on top of Vulkan",
);

/**
 * Print displays and modes enumerated with the Vulkan function vkGetPhysicalDeviceDisplayPropertiesKHR
 */
export const vkdisplayinfo = mkPackage(
  nixRaw`pkgs.vkdisplayinfo`,
  "Print displays and modes enumerated with the Vulkan function vkGetPhysicalDeviceDisplayPropertiesKHR",
);

/**
 * A vulkan-powered raw image processor
 */
export const vkdt = mkPackage(
  nixRaw`pkgs.vkdt`,
  "A vulkan-powered raw image processor",
);

/**
 * A vulkan-powered raw image processor
 */
export const vkdt_wayland = mkPackage(
  nixRaw`pkgs.vkdt-wayland`,
  "A vulkan-powered raw image processor",
);

/**
 * Virtual MIDI keyboard
 */
export const vkeybd = mkPackage(
  nixRaw`pkgs.vkeybd`,
  "Virtual MIDI keyboard",
);

/**
 * An extensible Vulkan benchmarking suite
 */
export const vkmark = mkPackage(
  nixRaw`pkgs.vkmark`,
  "An extensible Vulkan benchmarking suite",
);

/**
 * Vulkan Quake port based on QuakeSpasm
 */
export const vkquake = mkPackage(
  nixRaw`pkgs.vkquake`,
  "Vulkan Quake port based on QuakeSpasm",
);

/**
 * User mode programs to enable VLANs on Ethernet devices
 */
export const vlan = mkPackage(
  nixRaw`pkgs.vlan`,
  "User mode programs to enable VLANs on Ethernet devices",
);

/**
 * Simple, fast, safe, compiled language for developing maintainable software
 */
export const vlang = mkPackage(
  nixRaw`pkgs.vlang`,
  "Simple, fast, safe, compiled language for developing maintainable software",
);

/**
 * Cross-platform media player and streaming server
 */
export const vlc = mkPackage(
  nixRaw`pkgs.vlc`,
  "Cross-platform media player and streaming server",
);

/**
 * Virtual console locking program
 */
export const vlock = mkPackage(
  nixRaw`pkgs.vlock`,
  "Virtual console locking program",
);

/**
 * VictoriaMetrics metrics scraper
 */
export const vmagent = mkPackage(
  nixRaw`pkgs.vmagent`,
  "VictoriaMetrics metrics scraper",
);

/**
 * FUSE-based VMFS (vmware) file system tools
 */
export const vmfs_tools = mkPackage(
  nixRaw`pkgs.vmfs-tools`,
  "FUSE-based VMFS (vmware) file system tools",
);

/**
 * Free mail library for C++
 */
export const vmime = mkPackage(
  nixRaw`pkgs.vmime`,
  "Free mail library for C++",
);

/**
 * A vector and matrix math library implemented using C++ templates
 */
export const vmmlib = mkPackage(
  nixRaw`pkgs.vmmlib`,
  "A vector and matrix math library implemented using C++ templates",
);

/**
 * Virtual MIDI Piano Keyboard
 */
export const vmpk = mkPackage(
  nixRaw`pkgs.vmpk`,
  "Virtual MIDI Piano Keyboard",
);

/**
 * The ancestor of all expand/explore/exploit/exterminate games
 */
export const vms_empire = mkPackage(
  nixRaw`pkgs.vms-empire`,
  "The ancestor of all expand/explore/exploit/exterminate games",
);

/**
 * Portable file system cache diagnostics and control
 */
export const vmtouch = mkPackage(
  nixRaw`pkgs.vmtouch`,
  "Portable file system cache diagnostics and control",
);

/**
 * Allows you to connect to your VMware Horizon virtual desktop
 */
export const vmware_horizon_client = mkPackage(
  nixRaw`pkgs.vmware-horizon-client`,
  "Allows you to connect to your VMware Horizon virtual desktop",
);

/**
 * Industry standard desktop hypervisor for x86-64 architecture
 */
export const vmware_workstation = mkPackage(
  nixRaw`pkgs.vmware-workstation`,
  "Industry standard desktop hypervisor for x86-64 architecture",
);

/**
 * A command line VNC client and python library
 */
export const vncdo = mkPackage(
  nixRaw`pkgs.vncdo`,
  "A command line VNC client and python library",
);

/**
 * VNC recorder
 */
export const vncrec = mkPackage(
  nixRaw`pkgs.vncrec`,
  "VNC recorder",
);

/**
 * Stupid golang vendoring tool, inspired by docker vendor script
 */
export const vndr = mkPackage(
  nixRaw`pkgs.vndr`,
  "Stupid golang vendoring tool, inspired by docker vendor script",
);

/**
 * A pleasant note-taking platform
 */
export const vnote = mkPackage(
  nixRaw`pkgs.vnote`,
  "A pleasant note-taking platform",
);

/**
 * Console-based network statistics utility for Linux
 */
export const vnstat = mkPackage(
  nixRaw`pkgs.vnstat`,
  "Console-based network statistics utility for Linux",
);

/**
 * VisualOn AAC encoder library
 */
export const vo_aacenc = mkPackage(
  nixRaw`pkgs.vo-aacenc`,
  "VisualOn AAC encoder library",
);

/**
 * VisualOn Adaptive Multi Rate Wideband (AMR-WB) encoder
 */
export const vo_amrwbenc = mkPackage(
  nixRaw`pkgs.vo-amrwbenc`,
  "VisualOn Adaptive Multi Rate Wideband (AMR-WB) encoder",
);

/**
 * Copies DVD .vob files to harddisk, decrypting them on the way
 */
export const vobcopy = mkPackage(
  nixRaw`pkgs.vobcopy`,
  "Copies DVD .vob files to harddisk, decrypting them on the way",
);

/**
 * Converts VobSub subtitles into SRT subtitles
 */
export const vobsub2srt = mkPackage(
  nixRaw`pkgs.vobsub2srt`,
  "Converts VobSub subtitles into SRT subtitles",
);

/**
 * The podcast client for the modern free desktop
 */
export const vocal = mkPackage(
  nixRaw`pkgs.vocal`,
  "The podcast client for the modern free desktop",
);

/**
 * An LV2 plugin for pitch shifting (with or without formant correction), vocoding, automatic pitch correction and harmonizing of singing voice (harmonizer)
 */
export const vocproc = mkPackage(
  nixRaw`pkgs.vocproc`,
  "An LV2 plugin for pitch shifting (with or without formant correction), vocoding, automatic pitch correction and harmonizing of singing voice (harmonizer)",
);

/**
 * Terminal-based personal organizer
 */
export const void_ = mkPackage(
  nixRaw`pkgs.void`,
  "Terminal-based personal organizer",
);

/**
 * Simple GUI screencast recorder, using ffmpeg
 */
export const vokoscreen = mkPackage(
  nixRaw`pkgs.vokoscreen`,
  "Simple GUI screencast recorder, using ffmpeg",
);

/**
 * User friendly Open Source screencaster for Linux and Windows
 */
export const vokoscreen_ng = mkPackage(
  nixRaw`pkgs.vokoscreen-ng`,
  "User friendly Open Source screencaster for Linux and Windows",
);

/**
 * Classic cursor theme with a flying style
 */
export const volantes_cursors = mkPackage(
  nixRaw`pkgs.volantes-cursors`,
  "Classic cursor theme with a flying style",
);

/**
 * Volatile memory extraction frameworks
 */
export const volatility3 = mkPackage(
  nixRaw`pkgs.volatility3`,
  "Volatile memory extraction frameworks",
);

/**
 * PulseAudio enabled volume control featuring per-app sliders
 */
export const volctl = mkPackage(
  nixRaw`pkgs.volctl`,
  "PulseAudio enabled volume control featuring per-app sliders",
);

/**
 * The Vector Optimized Library of Kernels
 */
export const volk = mkPackage(
  nixRaw`pkgs.volk`,
  "The Vector Optimized Library of Kernels",
);

/**
 * The free and healthy typeface for bread and butter use
 */
export const vollkorn = mkPackage(
  nixRaw`pkgs.vollkorn`,
  "The free and healthy typeface for bread and butter use",
);

/**
 * Lightweight volume notification for Linux
 */
export const volnoti = mkPackage(
  nixRaw`pkgs.volnoti`,
  "Lightweight volume notification for Linux",
);

/**
 * The Hassle-Free JavaScript Tool Manager
 */
export const volta = mkPackage(
  nixRaw`pkgs.volta`,
  "The Hassle-Free JavaScript Tool Manager",
);

/**
 * A library for manipulating storage volume encryption keys and storing them separately from volumes to handle forgotten passphrases, and the associated command-line tool
 */
export const volume_key = mkPackage(
  nixRaw`pkgs.volume_key`,
  "A library for manipulating storage volume encryption keys and storing them separately from volumes to handle forgotten passphrases, and the associated command-line tool",
);

/**
 * A lightweight volume control that sits in your systray
 */
export const volumeicon = mkPackage(
  nixRaw`pkgs.volumeicon`,
  "A lightweight volume control that sits in your systray",
);

/**
 * The C/C++ VOMS server, client and APIs v2.x
 */
export const voms = mkPackage(
  nixRaw`pkgs.voms`,
  "The C/C++ VOMS server, client and APIs v2.x",
);

/**
 * Run applications through VPN connections in network namespaces
 */
export const vopono = mkPackage(
  nixRaw`pkgs.vopono`,
  "Run applications through VPN connections in network namespaces",
);

/**
 * Extra tools for Ogg-Vorbis audio codec
 */
export const vorbis_tools = mkPackage(
  nixRaw`pkgs.vorbis-tools`,
  "Extra tools for Ogg-Vorbis audio codec",
);

/**
 * A utility that corrects the volume of an Ogg Vorbis file to a predefined standardized loudness
 */
export const vorbisgain = mkPackage(
  nixRaw`pkgs.vorbisgain`,
  "A utility that corrects the volume of an Ogg Vorbis file to a predefined standardized loudness",
);

/**
 * Desktop Backup Client for Borg
 */
export const vorta = mkPackage(
  nixRaw`pkgs.vorta`,
  "Desktop Backup Client for Borg",
);

/**
 * An SSO and OAuth / OIDC login solution for NGINX using the auth_request module
 */
export const vouch_proxy = mkPackage(
  nixRaw`pkgs.vouch-proxy`,
  "An SSO and OAuth / OIDC login solution for NGINX using the auth_request module",
);

/**
 * Machine learning system focused on online reinforcement learning
 */
export const vowpal_wabbit = mkPackage(
  nixRaw`pkgs.vowpal-wabbit`,
  "Machine learning system focused on online reinforcement learning",
);

/**
 * Infinite-world block sandbox game based on Minetest
 */
export const voxelands = mkPackage(
  nixRaw`pkgs.voxelands`,
  "Infinite-world block sandbox game based on Minetest",
);

/**
 * SDL based picture viewer/slideshow
 */
export const vp = mkPackage(
  nixRaw`pkgs.vp`,
  "SDL based picture viewer/slideshow",
);

/**
 * A simple virtual PC simulator
 */
export const vpcs = mkPackage(
  nixRaw`pkgs.vpcs`,
  "A simple virtual PC simulator",
);

/**
 * vpnc-script replacement for easy and secure split-tunnel VPN setup
 */
export const vpn_slice = mkPackage(
  nixRaw`pkgs.vpn-slice`,
  "vpnc-script replacement for easy and secure split-tunnel VPN setup",
);

/**
 * Virtual private network (VPN) client for Cisco's VPN concentrators
 */
export const vpnc = mkPackage(
  nixRaw`pkgs.vpnc`,
  "Virtual private network (VPN) client for Cisco's VPN concentrators",
);

/**
 * Script for vpnc to configure the network routing and name service
 */
export const vpnc_scripts = mkPackage(
  nixRaw`pkgs.vpnc-scripts`,
  "Script for vpnc to configure the network routing and name service",
);

/**
 * Ruby API and CLI for the vpsFree.cz API
 */
export const vpsfree_client = mkPackage(
  nixRaw`pkgs.vpsfree-client`,
  "Ruby API and CLI for the vpsFree.cz API",
);

/**
 * Image viewer for image processing experts
 */
export const vpv = mkPackage(
  nixRaw`pkgs.vpv`,
  "Image viewer for image processing experts",
);

/**
 * A virtual ring buffer library written in C
 */
export const vrb = mkPackage(
  nixRaw`pkgs.vrb`,
  "A virtual ring buffer library written in C",
);

/**
 * Command line client of VRChat Package Manager, the main feature of VRChat Creator Companion (VCC)
 */
export const vrc_get = mkPackage(
  nixRaw`pkgs.vrc-get`,
  "Command line client of VRChat Package Manager, the main feature of VRChat Creator Companion (VCC)",
);

/**
 * Virtual Reality Peripheral Network
 */
export const vrpn = mkPackage(
  nixRaw`pkgs.vrpn`,
  "Virtual Reality Peripheral Network",
);

/**
 * Tool testing variable refresh rates
 */
export const vrrtest = mkPackage(
  nixRaw`pkgs.vrrtest`,
  "Tool testing variable refresh rates",
);

/**
 * A CLI tool for leetcode.com
 */
export const vsc_leetcode_cli = mkPackage(
  nixRaw`pkgs.vsc-leetcode-cli`,
  "A CLI tool for leetcode.com",
);

/**
 * Visual Studio Code Extension Manager
 */
export const vsce = mkPackage(
  nixRaw`pkgs.vsce`,
  "Visual Studio Code Extension Manager",
);

        /**
         * Open source source code editor developed by Microsoft for Windows,
Linux and macOS

         */
export const vscode = mkPackage(
  nixRaw`pkgs.vscode`,
  "Open source source code editor developed by Microsoft for Windows,\nLinux and macOS\n",
);

        /**
         * Wrapped variant of vscode which launches in a FHS compatible environment.
Should allow for easy usage of extensions without nix-specific modifications.

         */
export const vscode_fhs = mkPackage(
  nixRaw`pkgs.vscode-fhs`,
  "Wrapped variant of vscode which launches in a FHS compatible environment.\nShould allow for easy usage of extensions without nix-specific modifications.\n",
);

/**
 * HTML/CSS/JSON/ESLint language servers extracted from vscode
 */
export const vscode_langservers_extracted = mkPackage(
  nixRaw`pkgs.vscode-langservers-extracted`,
  "HTML/CSS/JSON/ESLint language servers extracted from vscode",
);

        /**
         * Open source source code editor developed by Microsoft for Windows,
Linux and macOS

         */
export const vscode_with_extensions = mkPackage(
  nixRaw`pkgs.vscode-with-extensions`,
  "Open source source code editor developed by Microsoft for Windows,\nLinux and macOS\n",
);

        /**
         * Open source source code editor developed by Microsoft for Windows,
Linux and macOS (VS Code without MS branding/telemetry/licensing)

         */
export const vscodium = mkPackage(
  nixRaw`pkgs.vscodium`,
  "Open source source code editor developed by Microsoft for Windows,\nLinux and macOS (VS Code without MS branding/telemetry/licensing)\n",
);

        /**
         * Wrapped variant of vscodium which launches in a FHS compatible environment.
Should allow for easy usage of extensions without nix-specific modifications.

         */
export const vscodium_fhs = mkPackage(
  nixRaw`pkgs.vscodium-fhs`,
  "Wrapped variant of vscodium which launches in a FHS compatible environment.\nShould allow for easy usage of extensions without nix-specific modifications.\n",
);

/**
 * A very secure FTP daemon
 */
export const vsftpd = mkPackage(
  nixRaw`pkgs.vsftpd`,
  "A very secure FTP daemon",
);

/**
 * HashiCorp Vault interactive shell
 */
export const vsh = mkPackage(
  nixRaw`pkgs.vsh`,
  "HashiCorp Vault interactive shell",
);

/**
 * A next-gen mail transfer agent (MTA) written in Rust
 */
export const vsmtp = mkPackage(
  nixRaw`pkgs.vsmtp`,
  "A next-gen mail transfer agent (MTA) written in Rust",
);

/**
 * C++ wrapper library for sqlite
 */
export const vsqlite = mkPackage(
  nixRaw`pkgs.vsqlite`,
  "C++ wrapper library for sqlite",
);

/**
 * VirusTotal Command Line Interface
 */
export const vt_cli = mkPackage(
  nixRaw`pkgs.vt-cli`,
  "VirusTotal Command Line Interface",
);

/**
 * A tool to list content of virtual tables in a C++ shared library
 */
export const vtable_dumper = mkPackage(
  nixRaw`pkgs.vtable-dumper`,
  "A tool to list content of virtual tables in a C++ shared library",
);

/**
 * A library implementing a terminal emulator widget for GTK
 */
export const vte = mkPackage(
  nixRaw`pkgs.vte`,
  "A library implementing a terminal emulator widget for GTK",
);

/**
 * A library implementing a terminal emulator widget for GTK
 */
export const vte_gtk4 = mkPackage(
  nixRaw`pkgs.vte-gtk4`,
  "A library implementing a terminal emulator widget for GTK",
);

/**
 * Open source libraries for 3D computer graphics, image processing and visualization
 */
export const vtk = mkPackage(
  nixRaw`pkgs.vtk`,
  "Open source libraries for 3D computer graphics, image processing and visualization",
);

/**
 * Open source libraries for 3D computer graphics, image processing and visualization
 */
export const vtkWithQt5 = mkPackage(
  nixRaw`pkgs.vtkWithQt5`,
  "Open source libraries for 3D computer graphics, image processing and visualization",
);

/**
 * Open source libraries for 3D computer graphics, image processing and visualization
 */
export const vtk_9 = mkPackage(
  nixRaw`pkgs.vtk_9`,
  "Open source libraries for 3D computer graphics, image processing and visualization",
);

/**
 * Open source libraries for 3D computer graphics, image processing and visualization
 */
export const vtk_9_withQt5 = mkPackage(
  nixRaw`pkgs.vtk_9_withQt5`,
  "Open source libraries for 3D computer graphics, image processing and visualization",
);

/**
 * Terminal multiplexer with window manager and session sharing
 */
export const vtm = mkPackage(
  nixRaw`pkgs.vtm`,
  "Terminal multiplexer with window manager and session sharing",
);

/**
 * Tests the compatibility of so-called 'VT100-compatible' terminals
 */
export const vttest = mkPackage(
  nixRaw`pkgs.vttest`,
  "Tests the compatibility of so-called 'VT100-compatible' terminals",
);

/**
 * Visual Understanding Environment - mind mapping software
 */
export const vue = mkPackage(
  nixRaw`pkgs.vue`,
  "Visual Understanding Environment - mind mapping software",
);

/**
 * Latin Vulgate Bible on the Command Line
 */
export const vul = mkPackage(
  nixRaw`pkgs.vul`,
  "Latin Vulgate Bible on the Command Line",
);

/**
 * Vulkan hardware capability viewer
 */
export const vulkan_caps_viewer = mkPackage(
  nixRaw`pkgs.vulkan-caps-viewer`,
  "Vulkan hardware capability viewer",
);

/**
 * Khronos Vulkan Conformance Tests
 */
export const vulkan_cts = mkPackage(
  nixRaw`pkgs.vulkan-cts`,
  "Khronos Vulkan Conformance Tests",
);

/**
 * Layers providing Vulkan features when native support is unavailable
 */
export const vulkan_extension_layer = mkPackage(
  nixRaw`pkgs.vulkan-extension-layer`,
  "Layers providing Vulkan features when native support is unavailable",
);

/**
 * Vulkan Header files and API registry
 */
export const vulkan_headers = mkPackage(
  nixRaw`pkgs.vulkan-headers`,
  "Vulkan Header files and API registry",
);

/**
 * A simple CLI app used to interface with basic Vulkan APIs
 */
export const vulkan_helper = mkPackage(
  nixRaw`pkgs.vulkan-helper`,
  "A simple CLI app used to interface with basic Vulkan APIs",
);

/**
 * LunarG Vulkan loader
 */
export const vulkan_loader = mkPackage(
  nixRaw`pkgs.vulkan-loader`,
  "LunarG Vulkan loader",
);

/**
 * Khronos official Vulkan Tools and Utilities
 */
export const vulkan_tools = mkPackage(
  nixRaw`pkgs.vulkan-tools`,
  "Khronos official Vulkan Tools and Utilities",
);

/**
 * LunarG Vulkan Tools and Utilities
 */
export const vulkan_tools_lunarg = mkPackage(
  nixRaw`pkgs.vulkan-tools-lunarg`,
  "LunarG Vulkan Tools and Utilities",
);

/**
 * A set of utility libraries for Vulkan
 */
export const vulkan_utility_libraries = mkPackage(
  nixRaw`pkgs.vulkan-utility-libraries`,
  "A set of utility libraries for Vulkan",
);

/**
 * The official Khronos Vulkan validation layers
 */
export const vulkan_validation_layers = mkPackage(
  nixRaw`pkgs.vulkan-validation-layers`,
  "The official Khronos Vulkan validation layers",
);

/**
 * NixOS vulnerability scanner
 */
export const vulnix = mkPackage(
  nixRaw`pkgs.vulnix`,
  "NixOS vulnerability scanner",
);

/**
 * Vultr CLI and API client library
 */
export const vultr = mkPackage(
  nixRaw`pkgs.vultr`,
  "Vultr CLI and API client library",
);

/**
 * Official command line tool for Vultr services
 */
export const vultr_cli = mkPackage(
  nixRaw`pkgs.vultr-cli`,
  "Official command line tool for Vultr services",
);

/**
 * Torrent client
 */
export const vuze = mkPackage(
  nixRaw`pkgs.vuze`,
  "Torrent client",
);

/**
 * A retro-styled platform game
 */
export const vvvvvv = mkPackage(
  nixRaw`pkgs.vvvvvv`,
  "A retro-styled platform game",
);

/**
 * Dynamic window manager for the console
 */
export const vwm = mkPackage(
  nixRaw`pkgs.vwm`,
  "Dynamic window manager for the console",
);

/**
 * C++ Libraries for Computer Vision Research and Implementation
 */
export const vxl = mkPackage(
  nixRaw`pkgs.vxl`,
  "C++ Libraries for Computer Vision Research and Implementation",
);

/**
 * A mind-mapping software
 */
export const vym = mkPackage(
  nixRaw`pkgs.vym`,
  "A mind-mapping software",
);

/**
 * Pythonic Smart Contract Language for the EVM
 */
export const vyper = mkPackage(
  nixRaw`pkgs.vyper`,
  "Pythonic Smart Contract Language for the EVM",
);

/**
 * A text-mode web browser
 */
export const w3m = mkPackage(
  nixRaw`pkgs.w3m`,
  "A text-mode web browser",
);

/**
 * A text-mode web browser
 */
export const w3m_batch = mkPackage(
  nixRaw`pkgs.w3m-batch`,
  "A text-mode web browser",
);

/**
 * A text-mode web browser
 */
export const w3m_full = mkPackage(
  nixRaw`pkgs.w3m-full`,
  "A text-mode web browser",
);

/**
 * A text-mode web browser
 */
export const w3m_nographics = mkPackage(
  nixRaw`pkgs.w3m-nographics`,
  "A text-mode web browser",
);

/**
 * A text-mode web browser
 */
export const w3m_nox = mkPackage(
  nixRaw`pkgs.w3m-nox`,
  "A text-mode web browser",
);

/**
 * Small CLI utility to scan DVB and ATSC transmissions
 */
export const w_scan = mkPackage(
  nixRaw`pkgs.w_scan`,
  "Small CLI utility to scan DVB and ATSC transmissions",
);

/**
 * A small channel scan tool which generates ATSC, DVB-C, DVB-S/S2 and DVB-T/T2 channels.conf files
 */
export const w_scan2 = mkPackage(
  nixRaw`pkgs.w_scan2`,
  "A small channel scan tool which generates ATSC, DVB-C, DVB-S/S2 and DVB-T/T2 channels.conf files",
);

/**
 * The Microsoft Azure Linux Agent (waagent)
           manages Linux provisioning and VM interaction with the Azure
           Fabric Controller
 */
export const waagent = mkPackage(
  nixRaw`pkgs.waagent`,
  "The Microsoft Azure Linux Agent (waagent)\n                   manages Linux provisioning and VM interaction with the Azure\n                   Fabric Controller",
);

/**
 * The WebAssembly Binary Toolkit
 */
export const wabt = mkPackage(
  nixRaw`pkgs.wabt`,
  "The WebAssembly Binary Toolkit",
);

/**
 * KDE Configuration Module for Wacom Graphics Tablets
 */
export const wacomtablet = mkPackage(
  nixRaw`pkgs.wacomtablet`,
  "KDE Configuration Module for Wacom Graphics Tablets",
);

/**
 * Tool for detecting technologies used by web applications
 */
export const wad = mkPackage(
  nixRaw`pkgs.wad`,
  "Tool for detecting technologies used by web applications",
);

/**
 * The meta build system
 */
export const waf = mkPackage(
  nixRaw`pkgs.waf`,
  "The meta build system",
);

/**
 * A setup hook for using Waf in Nixpkgs
 */
export const wafHook = mkPackage(
  nixRaw`pkgs.wafHook`,
  "A setup hook for using Waf in Nixpkgs",
);

/**
 * Tool to test Web Application Firewalls (WAFs)
 */
export const waf_tester = mkPackage(
  nixRaw`pkgs.waf-tester`,
  "Tool to test Web Application Firewalls (WAFs)",
);

/**
 * A cross-platform C library that allows one to defer selection of an OpenGL API and window system until runtime
 */
export const waffle = mkPackage(
  nixRaw`pkgs.waffle`,
  "A cross-platform C library that allows one to defer selection of an OpenGL API and window system until runtime",
);

/**
 * Tool to identify and fingerprint Web Application Firewalls (WAF)
 */
export const wafw00f = mkPackage(
  nixRaw`pkgs.wafw00f`,
  "Tool to identify and fingerprint Web Application Firewalls (WAF)",
);

/**
 * Rust library for generating cryptocurrency wallets
 */
export const wagyu = mkPackage(
  nixRaw`pkgs.wagyu`,
  "Rust library for generating cryptocurrency wallets",
);

/**
 * Improved fork of Waifu2X C++ using OpenCL and OpenCV
 */
export const waifu2x_converter_cpp = mkPackage(
  nixRaw`pkgs.waifu2x-converter-cpp`,
  "Improved fork of Waifu2X C++ using OpenCL and OpenCV",
);

/**
 * Build applications using Go + HTML + CSS + JS
 */
export const wails = mkPackage(
  nixRaw`pkgs.wails`,
  "Build applications using Go + HTML + CSS + JS",
);

/**
 * Wait4X allows you to wait for a port or a service to enter the requested state
 */
export const wait4x = mkPackage(
  nixRaw`pkgs.wait4x`,
  "Wait4X allows you to wait for a port or a service to enter the requested state",
);

/**
 * A minimalist self-hosted WakaTime-compatible backend for coding statistics
 */
export const wakapi = mkPackage(
  nixRaw`pkgs.wakapi`,
  "A minimalist self-hosted WakaTime-compatible backend for coding statistics",
);

/**
 * WakaTime command line interface
 */
export const wakatime = mkPackage(
  nixRaw`pkgs.wakatime`,
  "WakaTime command line interface",
);

/**
 * Send a wake-on-lan packet
 */
export const wakelan = mkPackage(
  nixRaw`pkgs.wakelan`,
  "Send a wake-on-lan packet",
);

/**
 * Perl script for waking up computers via Wake-On-LAN magic packets
 */
export const wakeonlan = mkPackage(
  nixRaw`pkgs.wakeonlan`,
  "Perl script for waking up computers via Wake-On-LAN magic packets",
);

/**
 * A Postgres WAL-shipping disaster recovery and replication toolkit
 */
export const wal_e = mkPackage(
  nixRaw`pkgs.wal_e`,
  "A Postgres WAL-shipping disaster recovery and replication toolkit",
);

/**
 * An archival restoration tool for PostgreSQL
 */
export const wal_g = mkPackage(
  nixRaw`pkgs.wal-g`,
  "An archival restoration tool for PostgreSQL",
);

/**
 * Terminal file manager
 */
export const walk = mkPackage(
  nixRaw`pkgs.walk`,
  "Terminal file manager",
);

export const wall = mkPackage(
  nixRaw`pkgs.wall`,
  "",
);

/**
 * wallabag is a self hostable application for saving web pages
 */
export const wallabag = mkPackage(
  nixRaw`pkgs.wallabag`,
  "wallabag is a self hostable application for saving web pages",
);

/**
 * A better pywal
 */
export const wallust = mkPackage(
  nixRaw`pkgs.wallust`,
  "A better pywal",
);

/**
 * Utilities for handling monitors, resolutions, and (timed) wallpapers
 */
export const wallutils = mkPackage(
  nixRaw`pkgs.wallutils`,
  "Utilities for handling monitors, resolutions, and (timed) wallpapers",
);

/**
 * A tool to flash firmware to mechanical keyboards
 */
export const wally_cli = mkPackage(
  nixRaw`pkgs.wally-cli`,
  "A tool to flash firmware to mechanical keyboards",
);

/**
 * All-in-one tool to convert decimal/bin/oct/hex and interpret bits as integers
 */
export const wambo = mkPackage(
  nixRaw`pkgs.wambo`,
  "All-in-one tool to convert decimal/bin/oct/hex and interpret bits as integers",
);

/**
 * WebAssembly Micro Runtime
 */
export const wamr = mkPackage(
  nixRaw`pkgs.wamr`,
  "WebAssembly Micro Runtime",
);

/**
 * Terminal app/TUI for HashiCorp Nomad
 */
export const wander = mkPackage(
  nixRaw`pkgs.wander`,
  "Terminal app/TUI for HashiCorp Nomad",
);

/**
 * An open-source C++ networking library
 */
export const wangle = mkPackage(
  nixRaw`pkgs.wangle`,
  "An open-source C++ networking library",
);

/**
 * A Wave-to-Notes transcriber
 */
export const waon = mkPackage(
  nixRaw`pkgs.waon`,
  "A Wave-to-Notes transcriber",
);

/**
 * Web application vulnerability scanner
 */
export const wapiti = mkPackage(
  nixRaw`pkgs.wapiti`,
  "Web application vulnerability scanner",
);

/**
 * A package manager for WebAssembly modules
 */
export const wapm_cli = mkPackage(
  nixRaw`pkgs.wapm-cli`,
  "A package manager for WebAssembly modules",
);

/**
 * A framework for writing web applications in Tcl
 */
export const wapp = mkPackage(
  nixRaw`pkgs.wapp`,
  "A framework for writing web applications in Tcl",
);

/**
 * Importer and scripts for Warcraft II: Tides of Darkness, the expansion Beyond the Dark Portal, and Aleonas Tales
 */
export const wargus = mkPackage(
  nixRaw`pkgs.wargus`,
  "Importer and scripts for Warcraft II: Tides of Darkness, the expansion Beyond the Dark Portal, and Aleonas Tales",
);

/**
 * Ballistics turn-based battle game between teams - unofficial copy
 */
export const warmux = mkPackage(
  nixRaw`pkgs.warmux`,
  "Ballistics turn-based battle game between teams - unofficial copy",
);

/**
 * Fast and secure file transfer
 */
export const warp = mkPackage(
  nixRaw`pkgs.warp`,
  "Fast and secure file transfer",
);

/**
 * A modal keyboard driven interface for mouse manipulation.
 */
export const warpd = mkPackage(
  nixRaw`pkgs.warpd`,
  "A modal keyboard driven interface for mouse manipulation.",
);

/**
 * Multiplayer FPS game designed for competitive gaming
 */
export const warsow = mkPackage(
  nixRaw`pkgs.warsow`,
  "Multiplayer FPS game designed for competitive gaming",
);

/**
 * Multiplayer FPS game designed for competitive gaming (engine only)
 */
export const warsow_engine = mkPackage(
  nixRaw`pkgs.warsow-engine`,
  "Multiplayer FPS game designed for competitive gaming (engine only)",
);

/**
 * A free RTS game, originally developed by Pumpkin Studios
 */
export const warzone2100 = mkPackage(
  nixRaw`pkgs.warzone2100`,
  "A free RTS game, originally developed by Pumpkin Studios",
);

/**
 * Backend for the Wasabi Wallet
 */
export const wasabibackend = mkPackage(
  nixRaw`pkgs.wasabibackend`,
  "Backend for the Wasabi Wallet",
);

/**
 * Privacy focused Bitcoin wallet
 */
export const wasabiwallet = mkPackage(
  nixRaw`pkgs.wasabiwallet`,
  "Privacy focused Bitcoin wallet",
);

/**
 * WASI libc implementation for WebAssembly
 */
export const wasilibc = mkPackage(
  nixRaw`pkgs.wasilibc`,
  "WASI libc implementation for WebAssembly",
);

/**
 * An executable and OCaml library to run, read and write Web Assembly (wasm) files and manipulate their AST
 */
export const wasm = mkPackage(
  nixRaw`pkgs.wasm`,
  "An executable and OCaml library to run, read and write Web Assembly (wasm) files and manipulate their AST",
);

/**
 * The fastest WebAssembly interpreter, and the most universal runtime.
 */
export const wasm3 = mkPackage(
  nixRaw`pkgs.wasm3`,
  "The fastest WebAssembly interpreter, and the most universal runtime.",
);

/**
 * Facilitating high-level interactions between wasm modules and JavaScript
 */
export const wasm_bindgen_cli = mkPackage(
  nixRaw`pkgs.wasm-bindgen-cli`,
  "Facilitating high-level interactions between wasm modules and JavaScript",
);

/**
 * A utility that builds rust-generated WebAssembly package
 */
export const wasm_pack = mkPackage(
  nixRaw`pkgs.wasm-pack`,
  "A utility that builds rust-generated WebAssembly package",
);

/**
 * > Strips custom sections
 */
export const wasm_strip = mkPackage(
  nixRaw`pkgs.wasm-strip`,
  "> Strips custom sections",
);

/**
 * Emit documentation/code for your WASM binary Edit
 */
export const wasm_text_gen = mkPackage(
  nixRaw`pkgs.wasm-text-gen`,
  "Emit documentation/code for your WASM binary Edit",
);

/**
 * Low level tooling for WebAssembly in Rust
 */
export const wasm_tools = mkPackage(
  nixRaw`pkgs.wasm-tools`,
  "Low level tooling for WebAssembly in Rust",
);

/**
 * A lightweight, high-performance, and extensible WebAssembly runtime for cloud native, edge, and decentralized applications
 */
export const wasmedge = mkPackage(
  nixRaw`pkgs.wasmedge`,
  "A lightweight, high-performance, and extensible WebAssembly runtime for cloud native, edge, and decentralized applications",
);

/**
 * The Universal WebAssembly Runtime
 */
export const wasmer = mkPackage(
  nixRaw`pkgs.wasmer`,
  "The Universal WebAssembly Runtime",
);

/**
 * Import your WebAssembly code just like any other dependency
 */
export const wasmer_pack = mkPackage(
  nixRaw`pkgs.wasmer-pack`,
  "Import your WebAssembly code just like any other dependency",
);

/**
 * An efficient WebAssembly interpreter
 */
export const wasmi = mkPackage(
  nixRaw`pkgs.wasmi`,
  "An efficient WebAssembly interpreter",
);

/**
 * An HTTP server for testing Wasm
 */
export const wasmserve = mkPackage(
  nixRaw`pkgs.wasmserve`,
  "An HTTP server for testing Wasm",
);

/**
 * Standalone JIT-style runtime for WebAssembly, using Cranelift
 */
export const wasmtime = mkPackage(
  nixRaw`pkgs.wasmtime`,
  "Standalone JIT-style runtime for WebAssembly, using Cranelift",
);

/**
 * WAST refmt
 */
export const wast_refmt = mkPackage(
  nixRaw`pkgs.wast-refmt`,
  "WAST refmt",
);

/**
 * WebAssembly translation tools for various languages
 */
export const wasynth = mkPackage(
  nixRaw`pkgs.wasynth`,
  "WebAssembly translation tools for various languages",
);

export const watch = mkPackage(
  nixRaw`pkgs.watch`,
  "",
);

/**
 * Executes commands in response to file modifications
 */
export const watchexec = mkPackage(
  nixRaw`pkgs.watchexec`,
  "Executes commands in response to file modifications",
);

/**
 * Easier monitoring of live logs
 */
export const watchlog = mkPackage(
  nixRaw`pkgs.watchlog`,
  "Easier monitoring of live logs",
);

/**
 * Watches files and takes action when they change
 */
export const watchman = mkPackage(
  nixRaw`pkgs.watchman`,
  "Watches files and takes action when they change",
);

/**
 * PineTime smart watch companion app for Linux phone and desktop
 */
export const watchmate = mkPackage(
  nixRaw`pkgs.watchmate`,
  "PineTime smart watch companion app for Linux phone and desktop",
);

/**
 * A simple wayland native screenshot tool
 */
export const watershot = mkPackage(
  nixRaw`pkgs.watershot`,
  "A simple wayland native screenshot tool",
);

/**
 * A wonderful CLI to track your time!
 */
export const watson = mkPackage(
  nixRaw`pkgs.watson`,
  "A wonderful CLI to track your time!",
);

/**
 * An inline issue manager
 */
export const watson_ruby = mkPackage(
  nixRaw`pkgs.watson-ruby`,
  "An inline issue manager",
);

/**
 * Wavebox messaging application
 */
export const wavebox = mkPackage(
  nixRaw`pkgs.wavebox`,
  "Wavebox messaging application",
);

/**
 * A generator of bitmaps that are locally similar to the input bitmap
 */
export const wavefunctioncollapse = mkPackage(
  nixRaw`pkgs.wavefunctioncollapse`,
  "A generator of bitmaps that are locally similar to the input bitmap",
);

/**
 * ReplayGain for wave files
 */
export const wavegain = mkPackage(
  nixRaw`pkgs.wavegain`,
  "ReplayGain for wave files",
);

/**
 * Ncurses-based monitoring application for wireless network devices
 */
export const wavemon = mkPackage(
  nixRaw`pkgs.wavemon`,
  "Ncurses-based monitoring application for wireless network devices",
);

/**
 * WebAssembly Virtual Machine
 */
export const wavm = mkPackage(
  nixRaw`pkgs.wavm`,
  "WebAssembly Virtual Machine",
);

/**
 * Hybrid audio compression format
 */
export const wavpack = mkPackage(
  nixRaw`pkgs.wavpack`,
  "Hybrid audio compression format",
);

/**
 * Convert .wav files into sound files for Lego NXT brick
 */
export const wavrsocvt = mkPackage(
  nixRaw`pkgs.wavrsocvt`,
  "Convert .wav files into sound files for Lego NXT brick",
);

/**
 * Auto Manage Your Wayland Displays
 */
export const way_displays = mkPackage(
  nixRaw`pkgs.way-displays`,
  "Auto Manage Your Wayland Displays",
);

/**
 * An archiving tool with an IM-style interface
 */
export const wayback = mkPackage(
  nixRaw`pkgs.wayback`,
  "An archiving tool with an IM-style interface",
);

/**
 * A Python script to submit web pages to the Wayback Machine for archiving
 */
export const wayback_machine_archiver = mkPackage(
  nixRaw`pkgs.wayback-machine-archiver`,
  "A Python script to submit web pages to the Wayback Machine for archiving",
);

/**
 * Download websites from the Internet Archive Wayback Machine
 */
export const wayback_machine_downloader = mkPackage(
  nixRaw`pkgs.wayback_machine_downloader`,
  "Download websites from the Internet Archive Wayback Machine",
);

/**
 * Highly customizable Wayland bar for Sway and Wlroots based compositors
 */
export const waybar = mkPackage(
  nixRaw`pkgs.waybar`,
  "Highly customizable Wayland bar for Sway and Wlroots based compositors",
);

/**
 * A waybar component/utility for displaying and controlling MPRIS2 compliant media players individually
 */
export const waybar_mpris = mkPackage(
  nixRaw`pkgs.waybar-mpris`,
  "A waybar component/utility for displaying and controlling MPRIS2 compliant media players individually",
);

/**
 * An openbox clone on Wayland
 */
export const waybox = mkPackage(
  nixRaw`pkgs.waybox`,
  "An openbox clone on Wayland",
);

/**
 * Simple GUI that displays the protocols implemented by a Wayland compositor
 */
export const waycheck = mkPackage(
  nixRaw`pkgs.waycheck`,
  "Simple GUI that displays the protocols implemented by a Wayland compositor",
);

/**
 * Hot corners for Wayland
 */
export const waycorner = mkPackage(
  nixRaw`pkgs.waycorner`,
  "Hot corners for Wayland",
);

/**
 * Waydroid is a container-based approach to boot a full Android system on a regular GNU/Linux system like Ubuntu
 */
export const waydroid = mkPackage(
  nixRaw`pkgs.waydroid`,
  "Waydroid is a container-based approach to boot a full Android system on a regular GNU/Linux system like Ubuntu",
);

/**
 * 3D Wayland compositor
 */
export const wayfire = mkPackage(
  nixRaw`pkgs.wayfire`,
  "3D Wayland compositor",
);

/**
 * 3D Wayland compositor
 */
export const wayfire_with_plugins = mkPackage(
  nixRaw`pkgs.wayfire-with-plugins`,
  "3D Wayland compositor",
);

/**
 * Execute a program when a Wayland compositor reports being N seconds idle
 */
export const wayidle = mkPackage(
  nixRaw`pkgs.wayidle`,
  "Execute a program when a Wayland compositor reports being N seconds idle",
);

/**
 * Core Wayland window system code and protocol
 */
export const wayland = mkPackage(
  nixRaw`pkgs.wayland`,
  "Core Wayland window system code and protocol",
);

/**
 * A utility designed to kill a single instance of a wayland compositor

 */
export const wayland_logout = mkPackage(
  nixRaw`pkgs.wayland-logout`,
  "A utility designed to kill a single instance of a wayland compositor\n",
);

/**
 * Wayland protocol extensions
 */
export const wayland_protocols = mkPackage(
  nixRaw`pkgs.wayland-protocols`,
  "Wayland protocol extensions",
);

/**
 * Proxy Wayland connections across a VM boundary
 */
export const wayland_proxy_virtwl = mkPackage(
  nixRaw`pkgs.wayland-proxy-virtwl`,
  "Proxy Wayland connections across a VM boundary",
);

/**
 * Core Wayland window system code and protocol
 */
export const wayland_scanner = mkPackage(
  nixRaw`pkgs.wayland-scanner`,
  "Core Wayland window system code and protocol",
);

/**
 * Wayland utilities (wayland-info)
 */
export const wayland_utils = mkPackage(
  nixRaw`pkgs.wayland-utils`,
  "Wayland utilities (wayland-info)",
);

/**
 * Wayland C++ binding
 */
export const waylandpp = mkPackage(
  nixRaw`pkgs.waylandpp`,
  "Wayland C++ binding",
);

/**
 * A tool to print wayland toplevels and other compositor info
 */
export const waylevel = mkPackage(
  nixRaw`pkgs.waylevel`,
  "A tool to print wayland toplevels and other compositor info",
);

/**
 * A small screenlocker for Wayland compositors
 */
export const waylock = mkPackage(
  nixRaw`pkgs.waylock`,
  "A small screenlocker for Wayland compositors",
);

/**
 * A graphical logout/suspend/reboot/shutdown dialog for wayland
 */
export const waylogout = mkPackage(
  nixRaw`pkgs.waylogout`,
  "A graphical logout/suspend/reboot/shutdown dialog for wayland",
);

/**
 * On screen lyrics for Wayland with NetEase Music source
 */
export const waylyrics = mkPackage(
  nixRaw`pkgs.waylyrics`,
  "On screen lyrics for Wayland with NetEase Music source",
);

/**
 * A synergy client for Wayland compositors
 */
export const waynergy = mkPackage(
  nixRaw`pkgs.waynergy`,
  "A synergy client for Wayland compositors",
);

/**
 * Simple output management tool for wlroots based compositors implementing
 */
export const wayout = mkPackage(
  nixRaw`pkgs.wayout`,
  "Simple output management tool for wlroots based compositors implementing",
);

/**
 * GUI wallpaper setter for Wayland-based window managers
 */
export const waypaper = mkPackage(
  nixRaw`pkgs.waypaper`,
  "GUI wallpaper setter for Wayland-based window managers",
);

/**
 * A network proxy for Wayland clients (applications)
 */
export const waypipe = mkPackage(
  nixRaw`pkgs.waypipe`,
  "A network proxy for Wayland clients (applications)",
);

/**
 * A tool to build, deploy, and release any application on any platform
 */
export const waypoint = mkPackage(
  nixRaw`pkgs.waypoint`,
  "A tool to build, deploy, and release any application on any platform",
);

/**
 * A native, blazing-fast screenshot tool for wlroots based compositors such as sway and river
 */
export const wayshot = mkPackage(
  nixRaw`pkgs.wayshot`,
  "A native, blazing-fast screenshot tool for wlroots based compositors such as sway and river",
);

/**
 * A simple terminal emulator
 */
export const wayst = mkPackage(
  nixRaw`pkgs.wayst`,
  "A simple terminal emulator",
);

/**
 * A gesture control for X11
 */
export const wayv = mkPackage(
  nixRaw`pkgs.wayv`,
  "A gesture control for X11",
);

/**
 * A VNC server for wlroots based Wayland compositors
 */
export const wayvnc = mkPackage(
  nixRaw`pkgs.wayvnc`,
  "A VNC server for wlroots based Wayland compositors",
);

/**
 * A zero dependency WebAssembly runtime for Go developers
 */
export const wazero = mkPackage(
  nixRaw`pkgs.wazero`,
  "A zero dependency WebAssembly runtime for Go developers",
);

/**
 * USB programmer for downloading and uploading firmware to/from USB devices.
 */
export const wb32_dfu_updater = mkPackage(
  nixRaw`pkgs.wb32-dfu-updater`,
  "USB programmer for downloading and uploading firmware to/from USB devices.",
);

/**
 * Wallpaper application for Wayland compositors
 */
export const wbg = mkPackage(
  nixRaw`pkgs.wbg`,
  "Wallpaper application for Wayland compositors",
);

/**
 * A simple HTTP benchmarking tool
 */
export const wbox = mkPackage(
  nixRaw`pkgs.wbox`,
  "A simple HTTP benchmarking tool",
);

/**
 * A command line calculator
 */
export const wcalc = mkPackage(
  nixRaw`pkgs.wcalc`,
  "A command line calculator",
);

/**
 * Witchcraft compiler collection: tools to convert and script ELF files
 */
export const wcc = mkPackage(
  nixRaw`pkgs.wcc`,
  "Witchcraft compiler collection: tools to convert and script ELF files",
);

/**
 * Firmware programmer for WCH microcontrollers over USB
 */
export const wch_isp = mkPackage(
  nixRaw`pkgs.wch-isp`,
  "Firmware programmer for WCH microcontrollers over USB",
);

/**
 * Worst-Case Peak-Gain library
 */
export const wcpg = mkPackage(
  nixRaw`pkgs.wcpg`,
  "Worst-Case Peak-Gain library",
);

/**
 * World Coordinate System library for astronomy
 */
export const wcslib = mkPackage(
  nixRaw`pkgs.wcslib`,
  "World Coordinate System library for astronomy",
);

/**
 * User-space filesystem that allows to mount a webdav share
 */
export const wdfs = mkPackage(
  nixRaw`pkgs.wdfs`,
  "User-space filesystem that allows to mount a webdav share",
);

/**
 * Comparing files on a word by word basis
 */
export const wdiff = mkPackage(
  nixRaw`pkgs.wdiff`,
  "Comparing files on a word by word basis",
);

/**
 * A graphical application for configuring displays in Wayland compositors
 */
export const wdisplays = mkPackage(
  nixRaw`pkgs.wdisplays`,
  "A graphical application for configuring displays in Wayland compositors",
);

/**
 * Mirrors an output of a wlroots compositor to a window
 */
export const wdomirror = mkPackage(
  nixRaw`pkgs.wdomirror`,
  "Mirrors an output of a wlroots compositor to a window",
);

/**
 * Warp speed Data Transfer
 */
export const wdt = mkPackage(
  nixRaw`pkgs.wdt`,
  "Warp speed Data Transfer",
);

/**
 * Quick access to current weather conditions and forecasts
 */
export const weather = mkPackage(
  nixRaw`pkgs.weather`,
  "Quick access to current weather conditions and forecasts",
);

/**
 * Weather Icons
 */
export const weather_icons = mkPackage(
  nixRaw`pkgs.weather-icons`,
  "Weather Icons",
);

/**
 * Weave Gitops CLI
 */
export const weave_gitops = mkPackage(
  nixRaw`pkgs.weave-gitops`,
  "Weave Gitops CLI",
);

/**
 * The ML-first vector search engine
 */
export const weaviate = mkPackage(
  nixRaw`pkgs.weaviate`,
  "The ML-first vector search engine",
);

/**
 * signing and authentication operations with smart cards for the Web eID browser extension
 */
export const web_eid_app = mkPackage(
  nixRaw`pkgs.web-eid-app`,
  "signing and authentication operations with smart cards for the Web eID browser extension",
);

/**
 * A command line tool to help build, run, and test web extensions
 */
export const web_ext = mkPackage(
  nixRaw`pkgs.web-ext`,
  "A command line tool to help build, run, and test web extensions",
);

/**
 * Web server log file analysis program
 */
export const webalizer = mkPackage(
  nixRaw`pkgs.webalizer`,
  "Web server log file analysis program",
);

/**
 * Tool to uncover technologies used on websites
 */
export const webanalyze = mkPackage(
  nixRaw`pkgs.webanalyze`,
  "Tool to uncover technologies used on websites",
);

/**
 * Toolbox for WebAssembly
 */
export const webassemblyjs_cli = mkPackage(
  nixRaw`pkgs.webassemblyjs-cli`,
  "Toolbox for WebAssembly",
);

/**
 * WebAssembly REPL
 */
export const webassemblyjs_repl = mkPackage(
  nixRaw`pkgs.webassemblyjs-repl`,
  "WebAssembly REPL",
);

/**
 * Webcam Capture Software
 */
export const webcamoid = mkPackage(
  nixRaw`pkgs.webcamoid`,
  "Webcam Capture Software",
);

/**
 * The lightweight swiss army knife for websockets
 */
export const webcat = mkPackage(
  nixRaw`pkgs.webcat`,
  "The lightweight swiss army knife for websockets",
);

/**
 * A Discord and SpaceBar electron-based client implemented without Discord API
 */
export const webcord = mkPackage(
  nixRaw`pkgs.webcord`,
  "A Discord and SpaceBar electron-based client implemented without Discord API",
);

/**
 * Webcord with Vencord web extension
 */
export const webcord_vencord = mkPackage(
  nixRaw`pkgs.webcord-vencord`,
  "Webcord with Vencord web extension",
);

/**
 * Simple WebDAV server
 */
export const webdav = mkPackage(
  nixRaw`pkgs.webdav`,
  "Simple WebDAV server",
);

/**
 * An implementation of WebDAV server in Rust
 */
export const webdav_server_rs = mkPackage(
  nixRaw`pkgs.webdav-server-rs`,
  "An implementation of WebDAV server in Rust",
);

/**
 * A Redis HTTP interface with JSON output
 */
export const webdis = mkPackage(
  nixRaw`pkgs.webdis`,
  "A Redis HTTP interface with JSON output",
);

/**
 * The all-in-one app to call, meet, message, and get work done
 */
export const webex = mkPackage(
  nixRaw`pkgs.webex`,
  "The all-in-one app to call, meet, message, and get work done",
);

/**
 * Webfont Kit Generator is a simple utility that allows you to generate woff, woff2 and the necessary CSS boilerplate from non-web font formats (otf & ttf)
 */
export const webfontkitgenerator = mkPackage(
  nixRaw`pkgs.webfontkitgenerator`,
  "Webfont Kit Generator is a simple utility that allows you to generate woff, woff2 and the necessary CSS boilerplate from non-web font formats (otf & ttf)",
);

/**
 * HTTP server for purely static content
 */
export const webfs = mkPackage(
  nixRaw`pkgs.webfs`,
  "HTTP server for purely static content",
);

/**
 * Incoming webhook server that executes shell commands
 */
export const webhook = mkPackage(
  nixRaw`pkgs.webhook`,
  "Incoming webhook server that executes shell commands",
);

/**
 * C# bindings for WebKit 2 with GTK+ 3
 */
export const webkit2_sharp = mkPackage(
  nixRaw`pkgs.webkit2-sharp`,
  "C# bindings for WebKit 2 with GTK+ 3",
);

/**
 * Web content rendering engine, GTK port
 */
export const webkitgtk = mkPackage(
  nixRaw`pkgs.webkitgtk`,
  "Web content rendering engine, GTK port",
);

/**
 * Web content rendering engine, GTK port
 */
export const webkitgtk_4_1 = mkPackage(
  nixRaw`pkgs.webkitgtk_4_1`,
  "Web content rendering engine, GTK port",
);

/**
 * Web content rendering engine, GTK port
 */
export const webkitgtk_6_0 = mkPackage(
  nixRaw`pkgs.webkitgtk_6_0`,
  "Web content rendering engine, GTK port",
);

/**
 * Keyboard-based web browser with Emacs/conkeror heritage
 */
export const webmacs = mkPackage(
  nixRaw`pkgs.webmacs`,
  "Keyboard-based web browser with Emacs/conkeror heritage",
);

/**
 * A simple, distributed, zero-configuration WireGuard mesh provider
 */
export const webmesh = mkPackage(
  nixRaw`pkgs.webmesh`,
  "A simple, distributed, zero-configuration WireGuard mesh provider",
);

/**
 * Simple relay server for broadcasting a WebM stream
 */
export const webmetro = mkPackage(
  nixRaw`pkgs.webmetro`,
  "Simple relay server for broadcasting a WebM stream",
);

/**
 * WebP GDK Pixbuf Loader library
 */
export const webp_pixbuf_loader = mkPackage(
  nixRaw`pkgs.webp-pixbuf-loader`,
  "WebP GDK Pixbuf Loader library",
);

/**
 * A more Linux packaging friendly copy of the AudioProcessing module from the WebRTC project
 */
export const webrtc_audio_processing = mkPackage(
  nixRaw`pkgs.webrtc-audio-processing`,
  "A more Linux packaging friendly copy of the AudioProcessing module from the WebRTC project",
);

/**
 * A more Linux packaging friendly copy of the AudioProcessing module from the WebRTC project
 */
export const webrtc_audio_processing_0_3 = mkPackage(
  nixRaw`pkgs.webrtc-audio-processing_0_3`,
  "A more Linux packaging friendly copy of the AudioProcessing module from the WebRTC project",
);

/**
 * A more Linux packaging friendly copy of the AudioProcessing module from the WebRTC project
 */
export const webrtc_audio_processing_1 = mkPackage(
  nixRaw`pkgs.webrtc-audio-processing_1`,
  "A more Linux packaging friendly copy of the AudioProcessing module from the WebRTC project",
);

/**
 * Command-line client for WebSockets (like netcat/socat)
 */
export const websocat = mkPackage(
  nixRaw`pkgs.websocat`,
  "Command-line client for WebSockets (like netcat/socat)",
);

/**
 * Turn any program that uses STDIN/STDOUT into a WebSocket server
 */
export const websocketd = mkPackage(
  nixRaw`pkgs.websocketd`,
  "Turn any program that uses STDIN/STDOUT into a WebSocket server",
);

/**
 * C++/Boost Asio based websocket client/server library
 */
export const websocketpp = mkPackage(
  nixRaw`pkgs.websocketpp`,
  "C++/Boost Asio based websocket client/server library",
);

/**
 * A high level MITM framework
 */
export const websploit = mkPackage(
  nixRaw`pkgs.websploit`,
  "A high level MITM framework",
);

/**
 * Web based SSH client
 */
export const webssh = mkPackage(
  nixRaw`pkgs.webssh`,
  "Web based SSH client",
);

/**
 * Streaming torrent app for Mac, Windows, and Linux
 */
export const webtorrent_desktop = mkPackage(
  nixRaw`pkgs.webtorrent_desktop`,
  "Streaming torrent app for Mac, Windows, and Linux",
);

/**
 * Send files using peer authenticated WebRTC
 */
export const webwormhole = mkPackage(
  nixRaw`pkgs.webwormhole`,
  "Send files using peer authenticated WebRTC",
);

/**
 * A fast, light and extensible chat client
 */
export const weechat = mkPackage(
  nixRaw`pkgs.weechat`,
  "A fast, light and extensible chat client",
);

/**
 * A fast, light and extensible chat client
 */
export const weechat_unwrapped = mkPackage(
  nixRaw`pkgs.weechat-unwrapped`,
  "A fast, light and extensible chat client",
);

/**
 * Weggli is a fast and robust semantic search tool for C and C++ codebases
 */
export const weggli = mkPackage(
  nixRaw`pkgs.weggli`,
  "Weggli is a fast and robust semantic search tool for C and C++ codebases",
);

/**
 * Weather app for the terminal
 */
export const wego = mkPackage(
  nixRaw`pkgs.wego`,
  "Weather app for the terminal",
);

/**
 * InfinityEngine Modding Engine
 */
export const weidu = mkPackage(
  nixRaw`pkgs.weidu`,
  "InfinityEngine Modding Engine",
);

/**
 * Collection of machine learning algorithms for data mining tasks
 */
export const weka = mkPackage(
  nixRaw`pkgs.weka`,
  "Collection of machine learning algorithms for data mining tasks",
);

/**
 * An RDF visualizer
 */
export const welkin = mkPackage(
  nixRaw`pkgs.welkin`,
  "An RDF visualizer",
);

/**
 * A DAB/DAB+ Software Radio
 */
export const welle_io = mkPackage(
  nixRaw`pkgs.welle-io`,
  "A DAB/DAB+ Software Radio",
);

/**
 * Multi-user tmux made easy
 */
export const wemux = mkPackage(
  nixRaw`pkgs.wemux`,
  "Multi-user tmux made easy",
);

/**
 * GitOps delivery tool
 */
export const werf = mkPackage(
  nixRaw`pkgs.werf`,
  "GitOps delivery tool",
);

/**
 * Wireguard overlay mesh network manager
 */
export const wesher = mkPackage(
  nixRaw`pkgs.wesher`,
  "Wireguard overlay mesh network manager",
);

/**
 * The Battle for Wesnoth, a free, turn-based strategy game with a fantasy theme
 */
export const wesnoth = mkPackage(
  nixRaw`pkgs.wesnoth`,
  "The Battle for Wesnoth, a free, turn-based strategy game with a fantasy theme",
);

/**
 * The Battle for Wesnoth, a free, turn-based strategy game with a fantasy theme
 */
export const wesnoth_dev = mkPackage(
  nixRaw`pkgs.wesnoth-dev`,
  "The Battle for Wesnoth, a free, turn-based strategy game with a fantasy theme",
);

/**
 * A lightweight and functional Wayland compositor
 */
export const weston = mkPackage(
  nixRaw`pkgs.weston`,
  "A lightweight and functional Wayland compositor",
);

/**
 * A lightweight and functional Wayland compositor
 */
export const westonLite = mkPackage(
  nixRaw`pkgs.westonLite`,
  "A lightweight and functional Wayland compositor",
);

/**
 * Wayland event viewer
 */
export const wev = mkPackage(
  nixRaw`pkgs.wev`,
  "Wayland event viewer",
);

/**
 * Use your tablet as graphic tablet/touch screen on your computer
 */
export const weylus = mkPackage(
  nixRaw`pkgs.weylus`,
  "Use your tablet as graphic tablet/touch screen on your computer",
);

/**
 * GPU-accelerated cross-platform terminal emulator and multiplexer written by @wez and implemented in Rust
 */
export const wezterm = mkPackage(
  nixRaw`pkgs.wezterm`,
  "GPU-accelerated cross-platform terminal emulator and multiplexer written by @wez and implemented in Rust",
);

/**
 * Library for managing configuration files, written for Wayfire
 */
export const wf_config = mkPackage(
  nixRaw`pkgs.wf-config`,
  "Library for managing configuration files, written for Wayfire",
);

/**
 * Utility program for screen recording of wlroots-based compositors
 */
export const wf_recorder = mkPackage(
  nixRaw`pkgs.wf-recorder`,
  "Utility program for screen recording of wlroots-based compositors",
);

/**
 * Wavefront alignment algorithm library v2
 */
export const wfa2_lib = mkPackage(
  nixRaw`pkgs.wfa2-lib`,
  "Wavefront alignment algorithm library v2",
);

/**
 * Web content fuzzer to facilitate web applications assessments
 */
export const wfuzz = mkPackage(
  nixRaw`pkgs.wfuzz`,
  "Web content fuzzer to facilitate web applications assessments",
);

/**
 * Wireguard configuration manager
 */
export const wg_bond = mkPackage(
  nixRaw`pkgs.wg-bond`,
  "Wireguard configuration manager",
);

/**
 * Small shellscript that makes it possible to give peers a friendlier and more readable name in the `wg` peer list
 */
export const wg_friendly_peer_names = mkPackage(
  nixRaw`pkgs.wg-friendly-peer-names`,
  "Small shellscript that makes it possible to give peers a friendlier and more readable name in the `wg` peer list",
);

/**
 * Wireguard network manager
 */
export const wg_netmanager = mkPackage(
  nixRaw`pkgs.wg-netmanager`,
  "Wireguard network manager",
);

/**
 * A simple utility to help connect wireguard nodes together in a full mesh topology
 */
export const wgautomesh = mkPackage(
  nixRaw`pkgs.wgautomesh`,
  "A simple utility to help connect wireguard nodes together in a full mesh topology",
);

/**
 * Cross-platform, unofficial CLI for Cloudflare Warp
 */
export const wgcf = mkPackage(
  nixRaw`pkgs.wgcf`,
  "Cross-platform, unofficial CLI for Cloudflare Warp",
);

/**
 * Tool for retrieving files using HTTP, HTTPS, and FTP
 */
export const wget = mkPackage(
  nixRaw`pkgs.wget`,
  "Tool for retrieving files using HTTP, HTTPS, and FTP",
);

/**
 * successor of GNU Wget, a file and recursive website downloader.
 */
export const wget2 = mkPackage(
  nixRaw`pkgs.wget2`,
  "successor of GNU Wget, a file and recursive website downloader.",
);

/**
 * Command-line interface to various pastebins
 */
export const wgetpaste = mkPackage(
  nixRaw`pkgs.wgetpaste`,
  "Command-line interface to various pastebins",
);

/**
 * A NordVPN Wireguard (NordLynx) client in POSIX shell
 */
export const wgnord = mkPackage(
  nixRaw`pkgs.wgnord`,
  "A NordVPN Wireguard (NordLynx) client in POSIX shell",
);

/**
 * Live reload for Go apps
 */
export const wgo = mkPackage(
  nixRaw`pkgs.wgo`,
  "Live reload for Go apps",
);

/**
 * Safe and portable GPU abstraction in Rust, implementing WebGPU API.
 */
export const wgpu_utils = mkPackage(
  nixRaw`pkgs.wgpu-utils`,
  "Safe and portable GPU abstraction in Rust, implementing WebGPU API.",
);

/**
 * Electron based Mastodon, Pleroma and Misskey client for Windows, Mac and Linux
 */
export const whalebird = mkPackage(
  nixRaw`pkgs.whalebird`,
  "Electron based Mastodon, Pleroma and Misskey client for Windows, Mac and Linux",
);

/**
 * Info on your IP
 */
export const whatip = mkPackage(
  nixRaw`pkgs.whatip`,
  "Info on your IP",
);

/**
 * WhatsApp database parser
 */
export const whatsapp_chat_exporter = mkPackage(
  nixRaw`pkgs.whatsapp-chat-exporter`,
  "WhatsApp database parser",
);

/**
 * WhatsApp Emoji for GNU/Linux
 */
export const whatsapp_emoji_font = mkPackage(
  nixRaw`pkgs.whatsapp-emoji-font`,
  "WhatsApp Emoji for GNU/Linux",
);

/**
 * Whatsapp desktop messaging app
 */
export const whatsapp_for_linux = mkPackage(
  nixRaw`pkgs.whatsapp-for-linux`,
  "Whatsapp desktop messaging app",
);

/**
 * Find a code format style that fits given source files
 */
export const whatstyle = mkPackage(
  nixRaw`pkgs.whatstyle`,
  "Find a code format style that fits given source files",
);

/**
 * Next generation web scanner
 */
export const whatweb = mkPackage(
  nixRaw`pkgs.whatweb`,
  "Next generation web scanner",
);

/**
 * The most minimalistic SDDM theme among all themes
 */
export const where_is_my_sddm_theme = mkPackage(
  nixRaw`pkgs.where-is-my-sddm-theme`,
  "The most minimalistic SDDM theme among all themes",
);

/**
 * Locate the current executable and running module/library
 */
export const whereami = mkPackage(
  nixRaw`pkgs.whereami`,
  "Locate the current executable and running module/library",
);

/**
 * Shows the full path of (shell) commands
 */
export const which = mkPackage(
  nixRaw`pkgs.which`,
  "Shows the full path of (shell) commands",
);

/**
 * A CD ripper aiming for accuracy over speed
 */
export const whipper = mkPackage(
  nixRaw`pkgs.whipper`,
  "A CD ripper aiming for accuracy over speed",
);

/**
 * Short read sequence mapper
 */
export const whisper = mkPackage(
  nixRaw`pkgs.whisper`,
  "Short read sequence mapper",
);

/**
 * Whisper command line client compatible with original OpenAI client based on CTranslate2
 */
export const whisper_ctranslate2 = mkPackage(
  nixRaw`pkgs.whisper-ctranslate2`,
  "Whisper command line client compatible with original OpenAI client based on CTranslate2",
);

/**
 * Tool to identify hardcoded secrets in static structured text
 */
export const whispers = mkPackage(
  nixRaw`pkgs.whispers`,
  "Tool to identify hardcoded secrets in static structured text",
);

/**
 * HTTP, HTTP2, HTTPS, Websocket debugging proxy
 */
export const whistle = mkPackage(
  nixRaw`pkgs.whistle`,
  "HTTP, HTTP2, HTTPS, Websocket debugging proxy",
);

/**
 * Online collaborative whiteboard that is simple, free, easy to use and to deploy
 */
export const whitebophir = mkPackage(
  nixRaw`pkgs.whitebophir`,
  "Online collaborative whiteboard that is simple, free, easy to use and to deploy",
);

/**
 * An advanced geospatial data analysis platform
 */
export const whitebox_tools = mkPackage(
  nixRaw`pkgs.whitebox-tools`,
  "An advanced geospatial data analysis platform",
);

/**
 * An x-cursor theme inspired by macOS and based on capitaine-cursors
 */
export const whitesur_cursors = mkPackage(
  nixRaw`pkgs.whitesur-cursors`,
  "An x-cursor theme inspired by macOS and based on capitaine-cursors",
);

/**
 * MacOS Big Sur like theme for Gnome desktops
 */
export const whitesur_gtk_theme = mkPackage(
  nixRaw`pkgs.whitesur-gtk-theme`,
  "MacOS Big Sur like theme for Gnome desktops",
);

/**
 * MacOS Big Sur style icon theme for Linux desktops
 */
export const whitesur_icon_theme = mkPackage(
  nixRaw`pkgs.whitesur-icon-theme`,
  "MacOS Big Sur style icon theme for Linux desktops",
);

/**
 * A MacOS big sur like theme for KDE Plasma desktop
 */
export const whitesur_kde = mkPackage(
  nixRaw`pkgs.whitesur-kde`,
  "A MacOS big sur like theme for KDE Plasma desktop",
);

/**
 * Intelligent WHOIS client from Debian
 */
export const whois = mkPackage(
  nixRaw`pkgs.whois`,
  "Intelligent WHOIS client from Debian",
);

/**
 * Packet sniffer for 802.15.4 wireless networks
 */
export const whsniff = mkPackage(
  nixRaw`pkgs.whsniff`,
  "Packet sniffer for 802.15.4 wireless networks",
);

/**
 * A platform for deductive program verification
 */
export const why3 = mkPackage(
  nixRaw`pkgs.why3`,
  "A platform for deductive program verification",
);

/**
 * Quick-and-dirty wrapper to run 32-bit windows EXEs on linux
 */
export const wibo = mkPackage(
  nixRaw`pkgs.wibo`,
  "Quick-and-dirty wrapper to run 32-bit windows EXEs on linux",
);

/**
 * RTS with multiple-goods economy
 */
export const widelands = mkPackage(
  nixRaw`pkgs.widelands`,
  "RTS with multiple-goods economy",
);

/**
 * Widevine CDM
 */
export const widevine_cdm = mkPackage(
  nixRaw`pkgs.widevine-cdm`,
  "Widevine CDM",
);

/**
 * Get the password of the wifi you're on
 */
export const wifi_password = mkPackage(
  nixRaw`pkgs.wifi-password`,
  "Get the password of the wifi you're on",
);

/**
 * Simple wifi shell script for linux
 */
export const wifish = mkPackage(
  nixRaw`pkgs.wifish`,
  "Simple wifi shell script for linux",
);

/**
 * Rewrite of the popular wireless network auditor, wifite
 */
export const wifite2 = mkPackage(
  nixRaw`pkgs.wifite2`,
  "Rewrite of the popular wireless network auditor, wifite",
);

/**
 * Tool for applying patches with conflicts
 */
export const wiggle = mkPackage(
  nixRaw`pkgs.wiggle`,
  "Tool for applying patches with conflicts",
);

/**
 * Load homebrew apps over network/usbgecko to your Wii
 */
export const wiiload = mkPackage(
  nixRaw`pkgs.wiiload`,
  "Load homebrew apps over network/usbgecko to your Wii",
);

/**
 * A set of command line tools to manipulate Wii and GameCube ISO images and WBFS containers
 */
export const wiimms_iso_tools = mkPackage(
  nixRaw`pkgs.wiimms-iso-tools`,
  "A set of command line tools to manipulate Wii and GameCube ISO images and WBFS containers",
);

/**
 * Feature complete cross-platform Wii Remote access library
 */
export const wiiuse = mkPackage(
  nixRaw`pkgs.wiiuse`,
  "Feature complete cross-platform Wii Remote access library",
);

/**
 * Wikipedia Reader for the GNOME Desktop
 */
export const wike = mkPackage(
  nixRaw`pkgs.wike`,
  "Wikipedia Reader for the GNOME Desktop",
);

/**
 * A modern and powerful wiki app built on Node.js
 */
export const wiki_js = mkPackage(
  nixRaw`pkgs.wiki-js`,
  "A modern and powerful wiki app built on Node.js",
);

/**
 * A simple and easy to use Wikipedia Text User Interface
 */
export const wiki_tui = mkPackage(
  nixRaw`pkgs.wiki-tui`,
  "A simple and easy to use Wikipedia Text User Interface",
);

/**
 * A simple curses interface for MediaWiki sites such as Wikipedia
 */
export const wikicurses = mkPackage(
  nixRaw`pkgs.wikicurses`,
  "A simple curses interface for MediaWiki sites such as Wikipedia",
);

/**
 * Software MIDI player and library
 */
export const wildmidi = mkPackage(
  nixRaw`pkgs.wildmidi`,
  "Software MIDI player and library",
);

/**
 * An emulation of ACME
 */
export const wily = mkPackage(
  nixRaw`pkgs.wily`,
  "An emulation of ACME",
);

/**
 * Windows Imaging Format bootloader
 */
export const wimboot = mkPackage(
  nixRaw`pkgs.wimboot`,
  "Windows Imaging Format bootloader",
);

/**
 * A library and program to extract, create, and modify WIM files
 */
export const wimlib = mkPackage(
  nixRaw`pkgs.wimlib`,
  "A library and program to extract, create, and modify WIM files",
);

/**
 * Xen Subproject: Windows PV Drivers
 */
export const win_pvdrivers = mkPackage(
  nixRaw`pkgs.win-pvdrivers`,
  "Xen Subproject: Windows PV Drivers",
);

/**
 * Windows SPICE Drivers
 */
export const win_spice = mkPackage(
  nixRaw`pkgs.win-spice`,
  "Windows SPICE Drivers",
);

/**
 * Graphical configuration utility for RouterOS-based devices
 */
export const winbox = mkPackage(
  nixRaw`pkgs.winbox`,
  "Graphical configuration utility for RouterOS-based devices",
);

/**
 * Open-source developer platform to turn scripts into workflows and UIs
 */
export const windmill = mkPackage(
  nixRaw`pkgs.windmill`,
  "Open-source developer platform to turn scripts into workflows and UIs",
);

/**
 * A stacking window manager that cooks windows with orders from the Waitron
 */
export const windowchef = mkPackage(
  nixRaw`pkgs.windowchef`,
  "A stacking window manager that cooks windows with orders from the Waitron",
);

/**
 * Small and simple stacking window manager
 */
export const windowlab = mkPackage(
  nixRaw`pkgs.windowlab`,
  "Small and simple stacking window manager",
);

/**
 * NeXTSTEP-like window manager
 */
export const windowmaker = mkPackage(
  nixRaw`pkgs.windowmaker`,
  "NeXTSTEP-like window manager",
);

/**
 * An Open Source implementation of the Windows API on top of X, OpenGL, and Unix
 */
export const wine = mkPackage(
  nixRaw`pkgs.wine`,
  "An Open Source implementation of the Windows API on top of X, OpenGL, and Unix",
);

/**
 * An Open Source implementation of the Windows API on top of X, OpenGL, and Unix
 */
export const wine64 = mkPackage(
  nixRaw`pkgs.wine64`,
  "An Open Source implementation of the Windows API on top of X, OpenGL, and Unix",
);

/**
 * An Open Source implementation of the Windows API on top of X, OpenGL, and Unix (with staging patches)
 */
export const wine_staging = mkPackage(
  nixRaw`pkgs.wine-staging`,
  "An Open Source implementation of the Windows API on top of X, OpenGL, and Unix (with staging patches)",
);

/**
 * An Open Source implementation of the Windows API on top of OpenGL and Unix (with experimental Wayland support)
 */
export const wine_wayland = mkPackage(
  nixRaw`pkgs.wine-wayland`,
  "An Open Source implementation of the Windows API on top of OpenGL and Unix (with experimental Wayland support)",
);

/**
 * ASIO to JACK driver for WINE
 */
export const wineasio = mkPackage(
  nixRaw`pkgs.wineasio`,
  "ASIO to JACK driver for WINE",
);

/**
 * A script to install DLLs needed to work around problems in Wine
 */
export const winetricks = mkPackage(
  nixRaw`pkgs.winetricks`,
  "A script to install DLLs needed to work around problems in Wine",
);

/**
 * Ayatana Compatibility Indicator for Wingpanel
 */
export const wingpanel_indicator_ayatana = mkPackage(
  nixRaw`pkgs.wingpanel-indicator-ayatana`,
  "Ayatana Compatibility Indicator for Wingpanel",
);

/**
 * Subdivision modeler inspired by Nendo and Mirai from Izware
 */
export const wings = mkPackage(
  nixRaw`pkgs.wings`,
  "Subdivision modeler inspired by Nendo and Mirai from Izware",
);

/**
 * CGI module for Linux, Solaris, MacOS X and AIX to read Windows Help Files
 */
export const winhelpcgi = mkPackage(
  nixRaw`pkgs.winhelpcgi`,
  "CGI module for Linux, Solaris, MacOS X and AIX to read Windows Help Files",
);

/**
 * Secure file wiping utility
 */
export const wipe = mkPackage(
  nixRaw`pkgs.wipe`,
  "Secure file wiping utility",
);

/**
 * A program which will securely wipe the free space
 */
export const wipefreespace = mkPackage(
  nixRaw`pkgs.wipefreespace`,
  "A program which will securely wipe the free space",
);

/**
 * A re-implementation of the 1995 PSX game wipEout
 */
export const wipeout_rewrite = mkPackage(
  nixRaw`pkgs.wipeout-rewrite`,
  "A re-implementation of the 1995 PSX game wipEout",
);

/**
 * A code generation tool that automates connecting components using dependency injection
 */
export const wire = mkPackage(
  nixRaw`pkgs.wire`,
  "A code generation tool that automates connecting components using dependency injection",
);

/**
 * A modern, secure messenger for everyone
 */
export const wire_desktop = mkPackage(
  nixRaw`pkgs.wire-desktop`,
  "A modern, secure messenger for everyone",
);

/**
 * 
 */
export const wiredtiger = mkPackage(
  nixRaw`pkgs.wiredtiger`,
  "",
);

/**
 * Userspace Go implementation of WireGuard
 */
export const wireguard_go = mkPackage(
  nixRaw`pkgs.wireguard-go`,
  "Userspace Go implementation of WireGuard",
);

/**
 * Tools for the WireGuard secure network tunnel
 */
export const wireguard_tools = mkPackage(
  nixRaw`pkgs.wireguard-tools`,
  "Tools for the WireGuard secure network tunnel",
);

/**
 * Find Wireguard VPN keypairs with a specific readable string
 */
export const wireguard_vanity_address = mkPackage(
  nixRaw`pkgs.wireguard-vanity-address`,
  "Find Wireguard VPN keypairs with a specific readable string",
);

/**
 * Wireless regulatory database for CRDA
 */
export const wireless_regdb = mkPackage(
  nixRaw`pkgs.wireless-regdb`,
  "Wireless regulatory database for CRDA",
);

/**
 * Wireless tools for Linux
 */
export const wirelesstools = mkPackage(
  nixRaw`pkgs.wirelesstools`,
  "Wireless tools for Linux",
);

/**
 * A flexible tool for building mock APIs
 */
export const wiremock = mkPackage(
  nixRaw`pkgs.wiremock`,
  "A flexible tool for building mock APIs",
);

/**
 * A modular session / policy manager for PipeWire
 */
export const wireplumber = mkPackage(
  nixRaw`pkgs.wireplumber`,
  "A modular session / policy manager for PipeWire",
);

/**
 * Wireguard client that exposes itself as a socks5 proxy
 */
export const wireproxy = mkPackage(
  nixRaw`pkgs.wireproxy`,
  "Wireguard client that exposes itself as a socks5 proxy",
);

/**
 * Powerful network protocol analyzer
 */
export const wireshark = mkPackage(
  nixRaw`pkgs.wireshark`,
  "Powerful network protocol analyzer",
);

/**
 * Powerful network protocol analyzer
 */
export const wireshark_cli = mkPackage(
  nixRaw`pkgs.wireshark-cli`,
  "Powerful network protocol analyzer",
);

/**
 * Powerful network protocol analyzer
 */
export const wireshark_qt = mkPackage(
  nixRaw`pkgs.wireshark-qt`,
  "Powerful network protocol analyzer",
);

/**
 * Fascinating electronics logic puzzles, game where you'll learn how to build clocks, diodes, and logic gates
 */
export const wireworld = mkPackage(
  nixRaw`pkgs.wireworld`,
  "Fascinating electronics logic puzzles, game where you'll learn how to build clocks, diodes, and logic gates",
);

/**
 * Gordon's Arduino wiring-like WiringPi Library for the Raspberry Pi (Unofficial Mirror for WiringPi bindings)
 */
export const wiringpi = mkPackage(
  nixRaw`pkgs.wiringpi`,
  "Gordon's Arduino wiring-like WiringPi Library for the Raspberry Pi (Unofficial Mirror for WiringPi bindings)",
);

/**
 * Manipulate a Wishbone device over some sort of bridge
 */
export const wishbone_tool = mkPackage(
  nixRaw`pkgs.wishbone-tool`,
  "Manipulate a Wishbone device over some sort of bridge",
);

/**
 * A single entrypoint for multiple SSH endpoints
 */
export const wishlist = mkPackage(
  nixRaw`pkgs.wishlist`,
  "A single entrypoint for multiple SSH endpoints",
);

/**
 * A language binding generator for WebAssembly interface types
 */
export const wit_bindgen = mkPackage(
  nixRaw`pkgs.wit-bindgen`,
  "A language binding generator for WebAssembly interface types",
);

/**
 * Command prefixing for continuous workflow using a single tool
 */
export const with_shell = mkPackage(
  nixRaw`pkgs.with-shell`,
  "Command prefixing for continuous workflow using a single tool",
);

/**
 * A pluggable framework for software supply chain security. Witness prevents tampering of build materials and verifies the integrity of the build process from source to target
 */
export const witness = mkPackage(
  nixRaw`pkgs.witness`,
  "A pluggable framework for software supply chain security. Witness prevents tampering of build materials and verifies the integrity of the build process from source to target",
);

/**
 * The WebAssembly pre-initializer
 */
export const wizer = mkPackage(
  nixRaw`pkgs.wizer`,
  "The WebAssembly pre-initializer",
);

/**
 * Tools for rendering web pages to PDF or images
 */
export const wkhtmltopdf = mkPackage(
  nixRaw`pkgs.wkhtmltopdf`,
  "Tools for rendering web pages to PDF or images",
);

/**
 * Tools for rendering web pages to PDF or images (binary package)
 */
export const wkhtmltopdf_bin = mkPackage(
  nixRaw`pkgs.wkhtmltopdf-bin`,
  "Tools for rendering web pages to PDF or images (binary package)",
);

/**
 * Keep Wayland clipboard even after programs close
 */
export const wl_clip_persist = mkPackage(
  nixRaw`pkgs.wl-clip-persist`,
  "Keep Wayland clipboard even after programs close",
);

/**
 * Command-line copy/paste utilities for Wayland
 */
export const wl_clipboard = mkPackage(
  nixRaw`pkgs.wl-clipboard`,
  "Command-line copy/paste utilities for Wayland",
);

/**
 * A wrapper to use wl-clipboard as a drop-in replacement for X11 clipboard tools
 */
export const wl_clipboard_x11 = mkPackage(
  nixRaw`pkgs.wl-clipboard-x11`,
  "A wrapper to use wl-clipboard as a drop-in replacement for X11 clipboard tools",
);

/**
 * Wayland color picker that also works on wlroots
 */
export const wl_color_picker = mkPackage(
  nixRaw`pkgs.wl-color-picker`,
  "Wayland color picker that also works on wlroots",
);

/**
 * Contrast, brightness, and gamma adjustments for Wayland
 */
export const wl_gammactl = mkPackage(
  nixRaw`pkgs.wl-gammactl`,
  "Contrast, brightness, and gamma adjustments for Wayland",
);

/**
 * Mirrors an output onto a Wayland surface.
 */
export const wl_mirror = mkPackage(
  nixRaw`pkgs.wl-mirror`,
  "Mirrors an output onto a Wayland surface.",
);

/**
 * High performance wlroots screen recording, featuring hardware encoding
 */
export const wl_screenrec = mkPackage(
  nixRaw`pkgs.wl-screenrec`,
  "High performance wlroots screen recording, featuring hardware encoding",
);

/**
 * Yet Another GB-Z80/Z80/6502/65C02/6510/65816/HUC6280/SPC-700 Multi Platform Cross Assembler Package
 */
export const wla_dx = mkPackage(
  nixRaw`pkgs.wla-dx`,
  "Yet Another GB-Z80/Z80/6502/65C02/6510/65816/HUC6280/SPC-700 Multi Platform Cross Assembler Package",
);

/**
 * Graphical output management for Wayland
 */
export const wlay = mkPackage(
  nixRaw`pkgs.wlay`,
  "Graphical output management for Wayland",
);

/**
 * wlc is a Weblate commandline client using Weblate's REST API.
 */
export const wlc = mkPackage(
  nixRaw`pkgs.wlc`,
  "wlc is a Weblate commandline client using Weblate's REST API.",
);

/**
 * A digital analog clock for Wayland desktops
 */
export const wlclock = mkPackage(
  nixRaw`pkgs.wlclock`,
  "A digital analog clock for Wayland desktops",
);

/**
 * Wayland Conformance Test Suite
 */
export const wlcs = mkPackage(
  nixRaw`pkgs.wlcs`,
  "Wayland Conformance Test Suite",
);

/**
 * A Wayland-native logout script written in GTK3
 */
export const wleave = mkPackage(
  nixRaw`pkgs.wleave`,
  "A Wayland-native logout script written in GTK3",
);

/**
 * A wrapper script to build whole-program LLVM bitcode files
 */
export const wllvm = mkPackage(
  nixRaw`pkgs.wllvm`,
  "A wrapper script to build whole-program LLVM bitcode files",
);

/**
 * A wayland based logout menu
 */
export const wlogout = mkPackage(
  nixRaw`pkgs.wlogout`,
  "A wayland based logout menu",
);

/**
 * Simple client implementing zwlr-output-power-management-v1
 */
export const wlopm = mkPackage(
  nixRaw`pkgs.wlopm`,
  "Simple client implementing zwlr-output-power-management-v1",
);

/**
 * An xprop clone for wlroots based compositors
 */
export const wlprop = mkPackage(
  nixRaw`pkgs.wlprop`,
  "An xprop clone for wlroots based compositors",
);

/**
 * Wayland roots protocol extensions
 */
export const wlr_protocols = mkPackage(
  nixRaw`pkgs.wlr-protocols`,
  "Wayland roots protocol extensions",
);

/**
 * An xrandr clone for wlroots compositors
 */
export const wlr_randr = mkPackage(
  nixRaw`pkgs.wlr-randr`,
  "An xrandr clone for wlroots compositors",
);

/**
 * Keymap manager for wlroots-based compositors
 */
export const wlr_which_key = mkPackage(
  nixRaw`pkgs.wlr-which-key`,
  "Keymap manager for wlroots-based compositors",
);

/**
 * Command line utility for miscellaneous wlroots Wayland extensions
 */
export const wlrctl = mkPackage(
  nixRaw`pkgs.wlrctl`,
  "Command line utility for miscellaneous wlroots Wayland extensions",
);

/**
 * A modular Wayland compositor library
 */
export const wlroots = mkPackage(
  nixRaw`pkgs.wlroots`,
  "A modular Wayland compositor library",
);

/**
 * A modular Wayland compositor library
 */
export const wlroots_0_15 = mkPackage(
  nixRaw`pkgs.wlroots_0_15`,
  "A modular Wayland compositor library",
);

/**
 * A modular Wayland compositor library
 */
export const wlroots_0_16 = mkPackage(
  nixRaw`pkgs.wlroots_0_16`,
  "A modular Wayland compositor library",
);

/**
 * Day/night gamma adjustments for Wayland
 */
export const wlsunset = mkPackage(
  nixRaw`pkgs.wlsunset`,
  "Day/night gamma adjustments for Wayland",
);

/**
 * Automatic brightness adjustment based on screen contents and ALS
 */
export const wluma = mkPackage(
  nixRaw`pkgs.wluma`,
  "Automatic brightness adjustment based on screen contents and ALS",
);

/**
 * CLI tool to interact with EWMH/NetWM compatible X Window Managers
 */
export const wmctrl = mkPackage(
  nixRaw`pkgs.wmctrl`,
  "CLI tool to interact with EWMH/NetWM compatible X Window Managers",
);

/**
 * Modern and minimal X11 tiling window manager
 */
export const wmderland = mkPackage(
  nixRaw`pkgs.wmderland`,
  "Modern and minimal X11 tiling window manager",
);

/**
 * A tiny program to interact with wmderland
 */
export const wmderlandc = mkPackage(
  nixRaw`pkgs.wmderlandc`,
  "A tiny program to interact with wmderland",
);

/**
 * An efficient dynamic menu for Sway and wlroots based Wayland compositors
 */
export const wmenu = mkPackage(
  nixRaw`pkgs.wmenu`,
  "An efficient dynamic menu for Sway and wlroots based Wayland compositors",
);

/**
 * Visually focus windows by label
 */
export const wmfocus = mkPackage(
  nixRaw`pkgs.wmfocus`,
  "Visually focus windows by label",
);

/**
 * Window manager from scratch
 */
export const wmfs = mkPackage(
  nixRaw`pkgs.wmfs`,
  "Window manager from scratch",
);

/**
 * WMI client for Linux (binary)
 */
export const wmic_bin = mkPackage(
  nixRaw`pkgs.wmic-bin`,
  "WMI client for Linux (binary)",
);

/**
 * A small, scriptable window manager, with a 9P filesystem interface and an acme-like layout
 */
export const wmii = mkPackage(
  nixRaw`pkgs.wmii`,
  "A small, scriptable window manager, with a 9P filesystem interface and an acme-like layout",
);

/**
 * Off-line HTML generation toolkit for Unix
 */
export const wml = mkPackage(
  nixRaw`pkgs.wml`,
  "Off-line HTML generation toolkit for Unix",
);

/**
 * Prints or set the window manager name property of the root window
 */
export const wmname = mkPackage(
  nixRaw`pkgs.wmname`,
  "Prints or set the window manager name property of the root window",
);

/**
 * Set of window manipulation tools
 */
export const wmutils_core = mkPackage(
  nixRaw`pkgs.wmutils-core`,
  "Set of window manipulation tools",
);

/**
 * A small library for X window manipulation
 */
export const wmutils_libwm = mkPackage(
  nixRaw`pkgs.wmutils-libwm`,
  "A small library for X window manipulation",
);

/**
 * Optional addons to wmutils
 */
export const wmutils_opt = mkPackage(
  nixRaw`pkgs.wmutils-opt`,
  "Optional addons to wmutils",
);

/**
 * A lightweight overlay bar for Wayland
 */
export const wob = mkPackage(
  nixRaw`pkgs.wob`,
  "A lightweight overlay bar for Wayland",
);

/**
 * Create bootable USB disks from Windows ISO images
 */
export const woeusb = mkPackage(
  nixRaw`pkgs.woeusb`,
  "Create bootable USB disks from Windows ISO images",
);

/**
 * A tool to create a Windows USB stick installer from a real Windows DVD or image
 */
export const woeusb_ng = mkPackage(
  nixRaw`pkgs.woeusb-ng`,
  "A tool to create a Windows USB stick installer from a real Windows DVD or image",
);

/**
 * Webfont compression reference code
 */
export const woff2 = mkPackage(
  nixRaw`pkgs.woff2`,
  "Webfont compression reference code",
);

/**
 * A launcher/menu program for wlroots based wayland compositors such as sway
 */
export const wofi = mkPackage(
  nixRaw`pkgs.wofi`,
  "A launcher/menu program for wlroots based wayland compositors such as sway",
);

/**
 * Simple emoji selector for Wayland using wofi and wl-clipboard
 */
export const wofi_emoji = mkPackage(
  nixRaw`pkgs.wofi-emoji`,
  "Simple emoji selector for Wayland using wofi and wl-clipboard",
);

/**
 * Implements Wake On LAN functionality in a small program
 */
export const wol = mkPackage(
  nixRaw`pkgs.wol`,
  "Implements Wake On LAN functionality in a small program",
);

/**
 * Waveshaper plugin with spline-based graph editor
 */
export const wolf_shaper = mkPackage(
  nixRaw`pkgs.wolf-shaper`,
  "Waveshaper plugin with spline-based graph editor",
);

/**
 * Quick and easy file sharing
 */
export const wolfebin = mkPackage(
  nixRaw`pkgs.wolfebin`,
  "Quick and easy file sharing",
);

/**
 * Wolfram Engine computational software system
 */
export const wolfram_engine = mkPackage(
  nixRaw`pkgs.wolfram-engine`,
  "Wolfram Engine computational software system",
);

export const wolfram_notebook = mkPackage(
  nixRaw`pkgs.wolfram-notebook`,
  "",
);

/**
 * A small, fast, portable implementation of TLS/SSL for embedded devices
 */
export const wolfssl = mkPackage(
  nixRaw`pkgs.wolfssl`,
  "A small, fast, portable implementation of TLS/SSL for embedded devices",
);

/**
 * Utility to extract Wolfstone data from Wolfenstein II
 */
export const wolfstoneextract = mkPackage(
  nixRaw`pkgs.wolfstoneextract`,
  "Utility to extract Wolfstone data from Wolfenstein II",
);

/**
 * A mapmaking tool for Tabletop Roleplaying Games, designed for city, region, or world scale
 */
export const wonderdraft = mkPackage(
  nixRaw`pkgs.wonderdraft`,
  "A mapmaking tool for Tabletop Roleplaying Games, designed for city, region, or world scale",
);

/**
 * Woodpecker Continuous Integration agent
 */
export const woodpecker_agent = mkPackage(
  nixRaw`pkgs.woodpecker-agent`,
  "Woodpecker Continuous Integration agent",
);

/**
 * Command line client for the Woodpecker Continuous Integration server
 */
export const woodpecker_cli = mkPackage(
  nixRaw`pkgs.woodpecker-cli`,
  "Command line client for the Woodpecker Continuous Integration server",
);

/**
 * Utility to convert different pipelines to Woodpecker CI pipelines
 */
export const woodpecker_pipeline_transform = mkPackage(
  nixRaw`pkgs.woodpecker-pipeline-transform`,
  "Utility to convert different pipelines to Woodpecker CI pipelines",
);

/**
 * Woodpecker plugin for cloning Git repositories.
 */
export const woodpecker_plugin_git = mkPackage(
  nixRaw`pkgs.woodpecker-plugin-git`,
  "Woodpecker plugin for cloning Git repositories.",
);

/**
 * Woodpecker Continuous Integration server
 */
export const woodpecker_server = mkPackage(
  nixRaw`pkgs.woodpecker-server`,
  "Woodpecker Continuous Integration server",
);

/**
 * Web Offer One File - Command-line utility to easily exchange files over a local network
 */
export const woof = mkPackage(
  nixRaw`pkgs.woof`,
  "Web Offer One File - Command-line utility to easily exchange files over a local network",
);

/**
 * A customization and management software for Wooting keyboards
 */
export const wootility = mkPackage(
  nixRaw`pkgs.wootility`,
  "A customization and management software for Wooting keyboards",
);

/**
 * udev rules that give NixOS permission to communicate with Wooting keyboards
 */
export const wooting_udev_rules = mkPackage(
  nixRaw`pkgs.wooting-udev-rules`,
  "udev rules that give NixOS permission to communicate with Wooting keyboards",
);

/**
 * Offline English-English dictionary application built for GNOME
 */
export const wordbook = mkPackage(
  nixRaw`pkgs.wordbook`,
  "Offline English-English dictionary application built for GNOME",
);

/**
 * Text-based word processor
 */
export const wordgrinder = mkPackage(
  nixRaw`pkgs.wordgrinder`,
  "Text-based word processor",
);

/**
 * Lexical database for the English language
 */
export const wordnet = mkPackage(
  nixRaw`pkgs.wordnet`,
  "Lexical database for the English language",
);

/**
 * WordPress is open source software you can use to create a beautiful website, blog, or app
 */
export const wordpress = mkPackage(
  nixRaw`pkgs.wordpress`,
  "WordPress is open source software you can use to create a beautiful website, blog, or app",
);

/**
 * WordPress is open source software you can use to create a beautiful website, blog, or app
 */
export const wordpress6_3 = mkPackage(
  nixRaw`pkgs.wordpress6_3`,
  "WordPress is open source software you can use to create a beautiful website, blog, or app",
);

/**
 * A grotesque sans
 */
export const work_sans = mkPackage(
  nixRaw`pkgs.work-sans`,
  "A grotesque sans",
);

/**
 * Framework for interpreted graph modeling, verification and synthesis
 */
export const workcraft = mkPackage(
  nixRaw`pkgs.workcraft`,
  "Framework for interpreted graph modeling, verification and synthesis",
);

/**
 * A two-pane file manager with advanced file manipulation features
 */
export const worker = mkPackage(
  nixRaw`pkgs.worker`,
  "A two-pane file manager with advanced file manipulation features",
);

/**
 * This is a tool to be used as a custom build command for a Cloudflare Workers `workers-rs` project.
 */
export const worker_build = mkPackage(
  nixRaw`pkgs.worker-build`,
  "This is a tool to be used as a custom build command for a Cloudflare Workers `workers-rs` project.",
);

/**
 * A program to help prevent Repetitive Strain Injury
 */
export const workrave = mkPackage(
  nixRaw`pkgs.workrave`,
  "A program to help prevent Repetitive Strain Injury",
);

/**
 * Sway workspaces with style
 */
export const workstyle = mkPackage(
  nixRaw`pkgs.workstyle`,
  "Sway workspaces with style",
);

/**
 * A physics based puzzle game
 */
export const worldofgoo = mkPackage(
  nixRaw`pkgs.worldofgoo`,
  "A physics based puzzle game",
);

/**
 * End-to-end encrypted file transfers
 */
export const wormhole_william = mkPackage(
  nixRaw`pkgs.wormhole-william`,
  "End-to-end encrypted file transfers",
);

        /**
         * A privacy-centric memecoin that was fairly launched on April 1, 2018 with
no pre-mine, stealth-mine or ICO

         */
export const wownero = mkPackage(
  nixRaw`pkgs.wownero`,
  "A privacy-centric memecoin that was fairly launched on April 1, 2018 with\nno pre-mine, stealth-mine or ICO\n",
);

/**
 * Packaging helper for Wordpress themes and plugins
 */
export const wp4nix = mkPackage(
  nixRaw`pkgs.wp4nix`,
  "Packaging helper for Wordpress themes and plugins",
);

/**
 * A command line interface for WordPress
 */
export const wp_cli = mkPackage(
  nixRaw`pkgs.wp-cli`,
  "A command line interface for WordPress",
);

/**
 * A tool for connecting to WPA and WPA2-protected wireless networks
 */
export const wpa_supplicant = mkPackage(
  nixRaw`pkgs.wpa_supplicant`,
  "A tool for connecting to WPA and WPA2-protected wireless networks",
);

/**
 * Qt-based GUI for wpa_supplicant
 */
export const wpa_supplicant_gui = mkPackage(
  nixRaw`pkgs.wpa_supplicant_gui`,
  "Qt-based GUI for wpa_supplicant",
);

/**
 * A tool for connecting to WPA and WPA2-protected wireless networks
 */
export const wpa_supplicant_ro_ssids = mkPackage(
  nixRaw`pkgs.wpa_supplicant_ro_ssids`,
  "A tool for connecting to WPA and WPA2-protected wireless networks",
);

/**
 * Minimal wallpaper daemon for Wayland
 */
export const wpaperd = mkPackage(
  nixRaw`pkgs.wpaperd`,
  "Minimal wallpaper daemon for Wayland",
);

/**
 * Template based wallpaper/colorscheme generator and manager
 */
export const wpgtk = mkPackage(
  nixRaw`pkgs.wpgtk`,
  "Template based wallpaper/colorscheme generator and manager",
);

/**
 * Console app for measuring typing speed in words per minute (WPM)
 */
export const wpm = mkPackage(
  nixRaw`pkgs.wpm`,
  "Console app for measuring typing speed in words per minute (WPM)",
);

/**
 * WordPress vulnerability recognition tool
 */
export const wprecon = mkPackage(
  nixRaw`pkgs.wprecon`,
  "WordPress vulnerability recognition tool",
);

/**
 * Black box WordPress vulnerability scanner
 */
export const wpscan = mkPackage(
  nixRaw`pkgs.wpscan`,
  "Black box WordPress vulnerability scanner",
);

/**
 * Office suite, formerly Kingsoft Office
 */
export const wpsoffice = mkPackage(
  nixRaw`pkgs.wpsoffice`,
  "Office suite, formerly Kingsoft Office",
);

/**
 * Office suite, formerly Kingsoft Office
 */
export const wpsoffice_cn = mkPackage(
  nixRaw`pkgs.wpsoffice-cn`,
  "Office suite, formerly Kingsoft Office",
);

/**
 * A (mainly) Chinese Unicode font
 */
export const wqy_microhei = mkPackage(
  nixRaw`pkgs.wqy_microhei`,
  "A (mainly) Chinese Unicode font",
);

/**
 * A (mainly) Chinese Unicode font
 */
export const wqy_zenhei = mkPackage(
  nixRaw`pkgs.wqy_zenhei`,
  "A (mainly) Chinese Unicode font",
);

/**
 * An IRC channel management bot written purely in C/C++
 */
export const wraith = mkPackage(
  nixRaw`pkgs.wraith`,
  "An IRC channel management bot written purely in C/C++",
);

/**
 * Command-line interface for all things Cloudflare Workers
 */
export const wrangler = mkPackage(
  nixRaw`pkgs.wrangler`,
  "Command-line interface for all things Cloudflare Workers",
);

/**
 * A CLI tool designed for folks who are interested in using Cloudflare Workers
 */
export const wrangler_1 = mkPackage(
  nixRaw`pkgs.wrangler_1`,
  "A CLI tool designed for folks who are interested in using Cloudflare Workers",
);

/**
 * A Fountain export tool with some extras
 */
export const wrap = mkPackage(
  nixRaw`pkgs.wrap`,
  "A Fountain export tool with some extras",
);

export const wrapGAppsHook = mkPackage(
  nixRaw`pkgs.wrapGAppsHook`,
  "",
);

export const wrapGAppsHook4 = mkPackage(
  nixRaw`pkgs.wrapGAppsHook4`,
  "",
);

export const wrapGAppsNoGuiHook = mkPackage(
  nixRaw`pkgs.wrapGAppsNoGuiHook`,
  "",
);

/**
 * Video Disc Recorder (with plugins: )
 */
export const wrapVdr = mkPackage(
  nixRaw`pkgs.wrapVdr`,
  "Video Disc Recorder (with plugins: )",
);

/**
 * Extract content from websites using CSS Selectors and XPath
 */
export const wring = mkPackage(
  nixRaw`pkgs.wring`,
  "Extract content from websites using CSS Selectors and XPath",
);

export const writeDarwinBundle = mkPackage(
  nixRaw`pkgs.writeDarwinBundle`,
  "",
);

/**
 * Naive linter for English prose
 */
export const write_good = mkPackage(
  nixRaw`pkgs.write-good`,
  "Naive linter for English prose",
);

/**
 * Write is a word processor for handwriting
 */
export const write_stylus = mkPackage(
  nixRaw`pkgs.write_stylus`,
  "Write is a word processor for handwriting",
);

/**
 * Small utility for writing a disk image to a USB drive
 */
export const writedisk = mkPackage(
  nixRaw`pkgs.writedisk`,
  "Small utility for writing a disk image to a USB drive",
);

/**
 * Build a digital writing community
 */
export const writefreely = mkPackage(
  nixRaw`pkgs.writefreely`,
  "Build a digital writing community",
);

/**
 * HTTP benchmarking tool
 */
export const wrk = mkPackage(
  nixRaw`pkgs.wrk`,
  "HTTP benchmarking tool",
);

/**
 * Constant throughput, correct latency recording variant of wrk
 */
export const wrk2 = mkPackage(
  nixRaw`pkgs.wrk2`,
  "Constant throughput, correct latency recording variant of wrk",
);

/**
 * A Web Service Discovery (WSD) host daemon for SMB/Samba
 */
export const wsdd = mkPackage(
  nixRaw`pkgs.wsdd`,
  "A Web Service Discovery (WSD) host daemon for SMB/Samba",
);

/**
 * Displays keys being pressed on a Wayland session
 */
export const wshowkeys = mkPackage(
  nixRaw`pkgs.wshowkeys`,
  "Displays keys being pressed on a Wayland session",
);

/**
 * Weak-signal digital communication modes for amateur radio
 */
export const wsjtx = mkPackage(
  nixRaw`pkgs.wsjtx`,
  "Weak-signal digital communication modes for amateur radio",
);

/**
 * Open files with xdg-open from Windows Subsystem for Linux (WSL) in Windows applications
 */
export const wsl_open = mkPackage(
  nixRaw`pkgs.wsl-open`,
  "Open files with xdg-open from Windows Subsystem for Linux (WSL) in Windows applications",
);

/**
 * Provides network connectivity to Windows Subsystem for Linux (WSL) when blocked by VPN
 */
export const wsl_vpnkit = mkPackage(
  nixRaw`pkgs.wsl-vpnkit`,
  "Provides network connectivity to Windows Subsystem for Linux (WSL) when blocked by VPN",
);

/**
 * A collection of utilities for Windows Subsystem for Linux
 */
export const wslu = mkPackage(
  nixRaw`pkgs.wslu`,
  "A collection of utilities for Windows Subsystem for Linux",
);

/**
 * Openwsman command-line client
 */
export const wsmancli = mkPackage(
  nixRaw`pkgs.wsmancli`,
  "Openwsman command-line client",
);

/**
 * Tunneling program over websocket protocol
 */
export const wstunnel = mkPackage(
  nixRaw`pkgs.wstunnel`,
  "Tunneling program over websocket protocol",
);

/**
 * A windows task manager clone for Linux
 */
export const wsysmon = mkPackage(
  nixRaw`pkgs.wsysmon`,
  "A windows task manager clone for Linux",
);

/**
 * C++ library for developing web applications
 */
export const wt = mkPackage(
  nixRaw`pkgs.wt`,
  "C++ library for developing web applications",
);

/**
 * C++ library for developing web applications
 */
export const wt4 = mkPackage(
  nixRaw`pkgs.wt4`,
  "C++ library for developing web applications",
);

/**
 * The personal information dashboard for your terminal
 */
export const wtf = mkPackage(
  nixRaw`pkgs.wtf`,
  "The personal information dashboard for your terminal",
);

/**
 * Passive hostname, domain and IP lookup tool for non-robots
 */
export const wtfis = mkPackage(
  nixRaw`pkgs.wtfis`,
  "Passive hostname, domain and IP lookup tool for non-robots",
);

/**
 * Weather companion for the terminal
 */
export const wthrr = mkPackage(
  nixRaw`pkgs.wthrr`,
  "Weather companion for the terminal",
);

/**
 * A simple but detailed weather indicator for Waybar using wttr.in
 */
export const wttrbar = mkPackage(
  nixRaw`pkgs.wttrbar`,
  "A simple but detailed weather indicator for Waybar using wttr.in",
);

/**
 * Terminal user interface for Twitch
 */
export const wtwitch = mkPackage(
  nixRaw`pkgs.wtwitch`,
  "Terminal user interface for Twitch",
);

/**
 * xdotool type for wayland
 */
export const wtype = mkPackage(
  nixRaw`pkgs.wtype`,
  "xdotool type for wayland",
);

/**
 * Interactive cli tool for HTTP inspection
 */
export const wuzz = mkPackage(
  nixRaw`pkgs.wuzz`,
  "Interactive cli tool for HTTP inspection",
);

/**
 * Converter from Microsoft Word formats to human-editable ones
 */
export const wv = mkPackage(
  nixRaw`pkgs.wv`,
  "Converter from Microsoft Word formats to human-editable ones",
);

/**
 * Excellent MS Word filter lib, used in most Office suites
 */
export const wv2 = mkPackage(
  nixRaw`pkgs.wv2`,
  "Excellent MS Word filter lib, used in most Office suites",
);

/**
 * On-screen keyboard for wlroots
 */
export const wvkbd = mkPackage(
  nixRaw`pkgs.wvkbd`,
  "On-screen keyboard for wlroots",
);

/**
 * What would cron do? Read crontab entries from stdin and print time of next execution(s)
 */
export const wwcd = mkPackage(
  nixRaw`pkgs.wwcd`,
  "What would cron do? Read crontab entries from stdin and print time of next execution(s)",
);

/**
 * A Cross-Platform C++ GUI Library
 */
export const wxGTK31 = mkPackage(
  nixRaw`pkgs.wxGTK31`,
  "A Cross-Platform C++ GUI Library",
);

/**
 * A Cross-Platform C++ GUI Library
 */
export const wxGTK32 = mkPackage(
  nixRaw`pkgs.wxGTK32`,
  "A Cross-Platform C++ GUI Library",
);

/**
 * A SVG manipulation library built with wxWidgets
 */
export const wxSVG = mkPackage(
  nixRaw`pkgs.wxSVG`,
  "A SVG manipulation library built with wxWidgets",
);

/**
 * RAD tool for wxWidgets GUI design
 */
export const wxformbuilder = mkPackage(
  nixRaw`pkgs.wxformbuilder`,
  "RAD tool for wxWidgets GUI design",
);

/**
 * Hex Editor / Disk Editor for Huge Files or Devices
 */
export const wxhexeditor = mkPackage(
  nixRaw`pkgs.wxhexeditor`,
  "Hex Editor / Disk Editor for Huge Files or Devices",
);

/**
 * Graphical user interface for GAMESS-US
 */
export const wxmacmolplt = mkPackage(
  nixRaw`pkgs.wxmacmolplt`,
  "Graphical user interface for GAMESS-US",
);

/**
 * Cross platform GUI for the computer algebra system Maxima
 */
export const wxmaxima = mkPackage(
  nixRaw`pkgs.wxmaxima`,
  "Cross platform GUI for the computer algebra system Maxima",
);

/**
 * A C++ wrapper around the public domain SQLite 3.x for wxWidgets
 */
export const wxsqlite3 = mkPackage(
  nixRaw`pkgs.wxsqlite3`,
  "A C++ wrapper around the public domain SQLite 3.x for wxWidgets",
);

/**
 * A simple SQLite database browser built with wxWidgets
 */
export const wxsqliteplus = mkPackage(
  nixRaw`pkgs.wxsqliteplus`,
  "A simple SQLite database browser built with wxWidgets",
);

/**
 * Wyoming Server for Faster Whisper
 */
export const wyoming_faster_whisper = mkPackage(
  nixRaw`pkgs.wyoming-faster-whisper`,
  "Wyoming Server for Faster Whisper",
);

/**
 * An open source voice assistant toolkit for many human languages
 */
export const wyoming_openwakeword = mkPackage(
  nixRaw`pkgs.wyoming-openwakeword`,
  "An open source voice assistant toolkit for many human languages",
);

/**
 * Wyoming Server for Piper
 */
export const wyoming_piper = mkPackage(
  nixRaw`pkgs.wyoming-piper`,
  "Wyoming Server for Piper",
);

/**
 * A text-based front-end to Remind
 */
export const wyrd = mkPackage(
  nixRaw`pkgs.wyrd`,
  "A text-based front-end to Remind",
);

/**
 * A simple CLI client for installing and maintaining linux GOG games
 */
export const wyvern = mkPackage(
  nixRaw`pkgs.wyvern`,
  "A simple CLI client for installing and maintaining linux GOG games",
);

/**
 * Lightweight passphrase dialog for OpenSSH or other open variants of SSH
 */
export const x11_ssh_askpass = mkPackage(
  nixRaw`pkgs.x11_ssh_askpass`,
  "Lightweight passphrase dialog for OpenSSH or other open variants of SSH",
);

/**
 * A Basic interpreter and compiler with graphics capabilities
 */
export const x11basic = mkPackage(
  nixRaw`pkgs.x11basic`,
  "A Basic interpreter and compiler with graphics capabilities",
);

/**
 * Run graphical applications with Docker
 */
export const x11docker = mkPackage(
  nixRaw`pkgs.x11docker`,
  "Run graphical applications with Docker",
);

/**
 * Compute consecutive idle time for current X11 session with millisecond resolution

 */
export const x11idle = mkPackage(
  nixRaw`pkgs.x11idle`,
  "Compute consecutive idle time for current X11 session with millisecond resolution\n",
);

/**
 * Enable a running X11 desktop to be available via a Spice server
 */
export const x11spice = mkPackage(
  nixRaw`pkgs.x11spice`,
  "Enable a running X11 desktop to be available via a Spice server",
);

/**
 * A VNC server connected to a real X11 screen
 */
export const x11vnc = mkPackage(
  nixRaw`pkgs.x11vnc`,
  "A VNC server connected to a real X11 screen",
);

/**
 * The official emulator of CommanderX16 8-bit computer
 */
export const x16_emulator = mkPackage(
  nixRaw`pkgs.x16-emulator`,
  "The official emulator of CommanderX16 8-bit computer",
);

/**
 * ROM file for CommanderX16 8-bit computer
 */
export const x16_rom = mkPackage(
  nixRaw`pkgs.x16-rom`,
  "ROM file for CommanderX16 8-bit computer",
);

export const x16_run = mkPackage(
  nixRaw`pkgs.x16-run`,
  "",
);

/**
 * Library for encoding H264/AVC video streams
 */
export const x264 = mkPackage(
  nixRaw`pkgs.x264`,
  "Library for encoding H264/AVC video streams",
);

/**
 * Library for encoding H.265/HEVC video streams
 */
export const x265 = mkPackage(
  nixRaw`pkgs.x265`,
  "Library for encoding H.265/HEVC video streams",
);

/**
 * Graphical NoMachine NX3 remote desktop client
 */
export const x2goclient = mkPackage(
  nixRaw`pkgs.x2goclient`,
  "Graphical NoMachine NX3 remote desktop client",
);

/**
 * Remote desktop application, server component
 */
export const x2goserver = mkPackage(
  nixRaw`pkgs.x2goserver`,
  "Remote desktop application, server component",
);

/**
 * A program to control a remote VNC server
 */
export const x2vnc = mkPackage(
  nixRaw`pkgs.x2vnc`,
  "A program to control a remote VNC server",
);

/**
 * Allows the keyboard, mouse on one X display to be used to control another X display
 */
export const x2x = mkPackage(
  nixRaw`pkgs.x2x`,
  "Allows the keyboard, mouse on one X display to be used to control another X display",
);

/**
 * IBM 3270 terminal emulator for the X Window System
 */
export const x3270 = mkPackage(
  nixRaw`pkgs.x3270`,
  "IBM 3270 terminal emulator for the X Window System",
);

/**
 * Editor for the Behringer X32 digital mixer
 */
export const x32edit = mkPackage(
  nixRaw`pkgs.x32edit`,
  "Editor for the Behringer X32 digital mixer",
);

/**
 * Drum sample player LV2 plugin dedicated to Glen MacArthur's AVLdrums
 */
export const x42_avldrums = mkPackage(
  nixRaw`pkgs.x42-avldrums`,
  "Drum sample player LV2 plugin dedicated to Glen MacArthur's AVLdrums",
);

/**
 * Chris Colins' General User soundfont player LV2 plugin
 */
export const x42_gmsynth = mkPackage(
  nixRaw`pkgs.x42-gmsynth`,
  "Chris Colins' General User soundfont player LV2 plugin",
);

/**
 * Collection of LV2 plugins by Robin Gareus
 */
export const x42_plugins = mkPackage(
  nixRaw`pkgs.x42-plugins`,
  "Collection of LV2 plugins by Robin Gareus",
);

/**
 * Identification utility for the x86 series of processors
 */
export const x86info = mkPackage(
  nixRaw`pkgs.x86info`,
  "Identification utility for the x86 series of processors",
);

/**
 * Creates an undecorated black window and prevents the mouse from entering that window
 */
export const x_create_mouse_void = mkPackage(
  nixRaw`pkgs.x-create-mouse-void`,
  "Creates an undecorated black window and prevents the mouse from entering that window",
);

/**
 * Andre Fachat's open-source 6502 cross assembler
 */
export const xa = mkPackage(
  nixRaw`pkgs.xa`,
  "Andre Fachat's open-source 6502 cross assembler",
);

/**
 * A XSLT processor for transforming XML documents
 */
export const xalanc = mkPackage(
  nixRaw`pkgs.xalanc`,
  "A XSLT processor for transforming XML documents",
);

/**
 * Lightweight CalDAV/CardDAV server
 */
export const xandikos = mkPackage(
  nixRaw`pkgs.xandikos`,
  "Lightweight CalDAV/CardDAV server",
);

/**
 * A tool to scribble over X windows
 */
export const xannotate = mkPackage(
  nixRaw`pkgs.xannotate`,
  "A tool to scribble over X windows",
);

/**
 * Real-time interactive fractal zoomer
 */
export const xaos = mkPackage(
  nixRaw`pkgs.xaos`,
  "Real-time interactive fractal zoomer",
);

/**
 * Search engine library
 */
export const xapian = mkPackage(
  nixRaw`pkgs.xapian`,
  "Search engine library",
);

/**
 * Search engine library
 */
export const xapian_1_4 = mkPackage(
  nixRaw`pkgs.xapian_1_4`,
  "Search engine library",
);

/**
 * Indexer and CGI search front-end built on Xapian library
 */
export const xapian_omega = mkPackage(
  nixRaw`pkgs.xapian-omega`,
  "Indexer and CGI search front-end built on Xapian library",
);

/**
 * Extensible Archiver
 */
export const xar = mkPackage(
  nixRaw`pkgs.xar`,
  "Extensible Archiver",
);

/**
 * A GTK front-end for command line archiving tools
 */
export const xarchive = mkPackage(
  nixRaw`pkgs.xarchive`,
  "A GTK front-end for command line archiving tools",
);

/**
 * GTK frontend to 7z,zip,rar,tar,bzip2, gzip,arj, lha, rpm and deb (open and extract only)
 */
export const xarchiver = mkPackage(
  nixRaw`pkgs.xarchiver`,
  "GTK frontend to 7z,zip,rar,tar,bzip2, gzip,arj, lha, rpm and deb (open and extract only)",
);

/**
 * Graphical APRS client
 */
export const xastir = mkPackage(
  nixRaw`pkgs.xastir`,
  "Graphical APRS client",
);

/**
 * Autoclicker application, which enables you to automatically click the left mousebutton
 */
export const xautoclick = mkPackage(
  nixRaw`pkgs.xautoclick`,
  "Autoclicker application, which enables you to automatically click the left mousebutton",
);

/**
 * Launch a given program when your X session has been idle for a given time
 */
export const xautolock = mkPackage(
  nixRaw`pkgs.xautolock`,
  "Launch a given program when your X session has been idle for a given time",
);

/**
 * Control X from the command line for scripts, and do "visual scraping" to find things on the screen
 */
export const xautomation = mkPackage(
  nixRaw`pkgs.xautomation`,
  "Control X from the command line for scripts, and do \"visual scraping\" to find things on the screen",
);

/**
 * AVS encoder and decoder
 */
export const xavs = mkPackage(
  nixRaw`pkgs.xavs`,
  "AVS encoder and decoder",
);

/**
 * TV application for Linux with apps and tools such as a teletext browser
 */
export const xawtv = mkPackage(
  nixRaw`pkgs.xawtv`,
  "TV application for Linux with apps and tools such as a teletext browser",
);

/**
 * Hides mouse pointer while not in use
 */
export const xbanish = mkPackage(
  nixRaw`pkgs.xbanish`,
  "Hides mouse pointer while not in use",
);

/**
 * C++ class library formerly known as XDB
 */
export const xbase = mkPackage(
  nixRaw`pkgs.xbase`,
  "C++ class library formerly known as XDB",
);

/**
 * Display battery status in X11
 */
export const xbattbar = mkPackage(
  nixRaw`pkgs.xbattbar`,
  "Display battery status in X11",
);

/**
 * Protect a computer network from getting infected
 */
export const xbill = mkPackage(
  nixRaw`pkgs.xbill`,
  "Protect a computer network from getting infected",
);

/**
 * Launch shell commands with your keyboard or your mouse under X Window
 */
export const xbindkeys = mkPackage(
  nixRaw`pkgs.xbindkeys`,
  "Launch shell commands with your keyboard or your mouse under X Window",
);

/**
 * Graphical interface for configuring xbindkeys
 */
export const xbindkeys_config = mkPackage(
  nixRaw`pkgs.xbindkeys-config`,
  "Graphical interface for configuring xbindkeys",
);

/**
 * GUI for chess engines
 */
export const xboard = mkPackage(
  nixRaw`pkgs.xboard`,
  "GUI for chess engines",
);

/**
 * Minesweeper for X11 with various grid sizes and shapes
 */
export const xbomb = mkPackage(
  nixRaw`pkgs.xbomb`,
  "Minesweeper for X11 with various grid sizes and shapes",
);

/**
 * Active window border replacement for window managers
 */
export const xborders = mkPackage(
  nixRaw`pkgs.xborders`,
  "Active window border replacement for window managers",
);

/**
 * Xbox/Xbox360 (and more) gamepad driver for Linux that works in userspace
 */
export const xboxdrv = mkPackage(
  nixRaw`pkgs.xboxdrv`,
  "Xbox/Xbox360 (and more) gamepad driver for Linux that works in userspace",
);

/**
 * The X Binary Package System
 */
export const xbps = mkPackage(
  nixRaw`pkgs.xbps`,
  "The X Binary Package System",
);

/**
 * X11 brigthness and gamma software control
 */
export const xbrightness = mkPackage(
  nixRaw`pkgs.xbrightness`,
  "X11 brigthness and gamma software control",
);

/**
 * Qi tools to access the Ben Nanonote USB_BOOT mode
 */
export const xbursttools = mkPackage(
  nixRaw`pkgs.xbursttools`,
  "Qi tools to access the Ben Nanonote USB_BOOT mode",
);

/**
 * Markdown defined task runner
 */
export const xc = mkPackage(
  nixRaw`pkgs.xc`,
  "Markdown defined task runner",
);

/**
 * Command-line tools for programming FPGAs, microcontrollers and PROMs via JTAG
 */
export const xc3sprog = mkPackage(
  nixRaw`pkgs.xc3sprog`,
  "Command-line tools for programming FPGAs, microcontrollers and PROMs via JTAG",
);

/**
 * An x509 certificate generation tool, handling RSA, DSA and EC keys, certificate signing requests (PKCS#10) and CRLs
 */
export const xca = mkPackage(
  nixRaw`pkgs.xca`,
  "An x509 certificate generation tool, handling RSA, DSA and EC keys, certificate signing requests (PKCS#10) and CRLs",
);

/**
 * Build Caddy with plugins
 */
export const xcaddy = mkPackage(
  nixRaw`pkgs.xcaddy`,
  "Build Caddy with plugins",
);

/**
 * A tiny monitor calibration loader for X and MS-Windows
 */
export const xcalib = mkPackage(
  nixRaw`pkgs.xcalib`,
  "A tiny monitor calibration loader for X and MS-Windows",
);

/**
 * Utility to configure modifier keys to act as other keys
 */
export const xcape = mkPackage(
  nixRaw`pkgs.xcape`,
  "Utility to configure modifier keys to act as other keys",
);

/**
 * XPath injection tool
 */
export const xcat = mkPackage(
  nixRaw`pkgs.xcat`,
  "XPath injection tool",
);

/**
 * input method development support for xcb
 */
export const xcb_imdkit = mkPackage(
  nixRaw`pkgs.xcb-imdkit`,
  "input method development support for xcb",
);

export const xcb_util_cursor = mkPackage(
  nixRaw`pkgs.xcb-util-cursor`,
  "",
);

/**
 * XCB cursor library (libxcursor port)
 */
export const xcb_util_cursor_HEAD = mkPackage(
  nixRaw`pkgs.xcb-util-cursor-HEAD`,
  "XCB cursor library (libxcursor port)",
);

/**
 * Xcode-compatible build tool
 */
export const xcbuild = mkPackage(
  nixRaw`pkgs.xcbuild`,
  "Xcode-compatible build tool",
);

export const xcbuild6Hook = mkPackage(
  nixRaw`pkgs.xcbuild6Hook`,
  "",
);

export const xcbuildHook = mkPackage(
  nixRaw`pkgs.xcbuildHook`,
  "",
);

/**
 * XCB utility functions for the X resource manager
 */
export const xcbutilxrm = mkPackage(
  nixRaw`pkgs.xcbutilxrm`,
  "XCB utility functions for the X resource manager",
);

/**
 * Colorized hexdump tool
 */
export const xcd = mkPackage(
  nixRaw`pkgs.xcd`,
  "Colorized hexdump tool",
);

/**
 * Command-line tools for converting Gimp XCF files
 */
export const xcftools = mkPackage(
  nixRaw`pkgs.xcftools`,
  "Command-line tools for converting Gimp XCF files",
);

/**
 * A library of exchange-correlation functionals with arbitrary-order derivatives
 */
export const xcfun = mkPackage(
  nixRaw`pkgs.xcfun`,
  "A library of exchange-correlation functionals with arbitrary-order derivatives",
);

/**
 * A standalone X11 program to create chained key bindings
 */
export const xchainkeys = mkPackage(
  nixRaw`pkgs.xchainkeys`,
  "A standalone X11 program to create chained key bindings",
);

/**
 * A viewer for Microsoft HTML Help files
 */
export const xchm = mkPackage(
  nixRaw`pkgs.xchm`,
  "A viewer for Microsoft HTML Help files",
);

/**
 * Generic drawing program tailored to circuit diagrams
 */
export const xcircuit = mkPackage(
  nixRaw`pkgs.xcircuit`,
  "Generic drawing program tailored to circuit diagrams",
);

/**
 * Tool to access the X clipboard from a console application
 */
export const xclip = mkPackage(
  nixRaw`pkgs.xclip`,
  "Tool to access the X clipboard from a console application",
);

/**
 * Install and update your Xcodes automatically
 */
export const xcode_install = mkPackage(
  nixRaw`pkgs.xcode-install`,
  "Install and update your Xcodes automatically",
);

/**
 * Xcode-compatible build tool
 */
export const xcodebuild = mkPackage(
  nixRaw`pkgs.xcodebuild`,
  "Xcode-compatible build tool",
);

/**
 * Xcode-compatible build tool
 */
export const xcodebuild6 = mkPackage(
  nixRaw`pkgs.xcodebuild6`,
  "Xcode-compatible build tool",
);

/**
 * Command-line tool to install and switch between multiple versions of Xcode
 */
export const xcodes = mkPackage(
  nixRaw`pkgs.xcodes`,
  "Command-line tool to install and switch between multiple versions of Xcode",
);

/**
 * Lightweight color picker for X11
 */
export const xcolor = mkPackage(
  nixRaw`pkgs.xcolor`,
  "Lightweight color picker for X11",
);

export const xcompmgr = mkPackage(
  nixRaw`pkgs.xcompmgr`,
  "",
);

/**
 * A programmable turn-based strategy game
 */
export const xconq = mkPackage(
  nixRaw`pkgs.xconq`,
  "A programmable turn-based strategy game",
);

/**
 * Tool to display a cute cow and messages
 */
export const xcowsay = mkPackage(
  nixRaw`pkgs.xcowsay`,
  "Tool to display a cute cow and messages",
);

/**
 * An extended cp(1)
 */
export const xcp = mkPackage(
  nixRaw`pkgs.xcp`,
  "An extended cp(1)",
);

/**
 * A portable Amstrad CPC 464/664/6128 emulator written in C
 */
export const xcpc = mkPackage(
  nixRaw`pkgs.xcpc`,
  "A portable Amstrad CPC 464/664/6128 emulator written in C",
);

/**
 * Flexible and fast xcodebuild formatter
 */
export const xcpretty = mkPackage(
  nixRaw`pkgs.xcpretty`,
  "Flexible and fast xcodebuild formatter",
);

/**
 * A CLI utility to recursively crawl webpages
 */
export const xcrawl3r = mkPackage(
  nixRaw`pkgs.xcrawl3r`,
  "A CLI utility to recursively crawl webpages",
);

/**
 * Filesystem visualization utility
 */
export const xcruiser = mkPackage(
  nixRaw`pkgs.xcruiser`,
  "Filesystem visualization utility",
);

/**
 * Convert X cursors to PNG images
 */
export const xcur2png = mkPackage(
  nixRaw`pkgs.xcur2png`,
  "Convert X cursors to PNG images",
);

/**
 * A simple tool which print the current working directory of the currently focused window

 */
export const xcwd = mkPackage(
  nixRaw`pkgs.xcwd`,
  "A simple tool which print the current working directory of the currently focused window\n",
);

/**
 * i2p bittorrent client
 */
export const xd = mkPackage(
  nixRaw`pkgs.xd`,
  "i2p bittorrent client",
);

/**
 * A clock application that morphs digits when they are changed
 */
export const xdaliclock = mkPackage(
  nixRaw`pkgs.xdaliclock`,
  "A clock application that morphs digits when they are changed",
);

/**
 * Binary differential compression in VCDIFF (RFC 3284) format
 */
export const xdelta = mkPackage(
  nixRaw`pkgs.xdelta`,
  "Binary differential compression in VCDIFF (RFC 3284) format",
);

/**
 * Binary differential compression in VCDIFF (RFC 3284) format
 */
export const xdeltaUnstable = mkPackage(
  nixRaw`pkgs.xdeltaUnstable`,
  "Binary differential compression in VCDIFF (RFC 3284) format",
);

/**
 * DBus proxy for Flatpak and others
 */
export const xdg_dbus_proxy = mkPackage(
  nixRaw`pkgs.xdg-dbus-proxy`,
  "DBus proxy for Flatpak and others",
);

/**
 * Desktop integration portals for sandboxed apps
 */
export const xdg_desktop_portal = mkPackage(
  nixRaw`pkgs.xdg-desktop-portal`,
  "Desktop integration portals for sandboxed apps",
);

/**
 * Backend implementation for xdg-desktop-portal for the GNOME desktop environment
 */
export const xdg_desktop_portal_gnome = mkPackage(
  nixRaw`pkgs.xdg-desktop-portal-gnome`,
  "Backend implementation for xdg-desktop-portal for the GNOME desktop environment",
);

/**
 * Desktop integration portals for sandboxed apps
 */
export const xdg_desktop_portal_gtk = mkPackage(
  nixRaw`pkgs.xdg-desktop-portal-gtk`,
  "Desktop integration portals for sandboxed apps",
);

/**
 * xdg-desktop-portal backend for Hyprland
 */
export const xdg_desktop_portal_hyprland = mkPackage(
  nixRaw`pkgs.xdg-desktop-portal-hyprland`,
  "xdg-desktop-portal backend for Hyprland",
);

/**
 * xdg-desktop-portal backend for wlroots
 */
export const xdg_desktop_portal_wlr = mkPackage(
  nixRaw`pkgs.xdg-desktop-portal-wlr`,
  "xdg-desktop-portal backend for wlroots",
);

/**
 * Backend implementation for xdg-desktop-portal for Cinnamon, MATE, Xfce
 */
export const xdg_desktop_portal_xapp = mkPackage(
  nixRaw`pkgs.xdg-desktop-portal-xapp`,
  "Backend implementation for xdg-desktop-portal for Cinnamon, MATE, Xfce",
);

/**
 * A command line XDG compliant launcher and tools
 */
export const xdg_launch = mkPackage(
  nixRaw`pkgs.xdg-launch`,
  "A command line XDG compliant launcher and tools",
);

/**
 * A shell script which checks your $HOME for unwanted files and directories
 */
export const xdg_ninja = mkPackage(
  nixRaw`pkgs.xdg-ninja`,
  "A shell script which checks your $HOME for unwanted files and directories",
);

/**
 * A tool to help manage well known user directories like the desktop folder and the music folder
 */
export const xdg_user_dirs = mkPackage(
  nixRaw`pkgs.xdg-user-dirs`,
  "A tool to help manage well known user directories like the desktop folder and the music folder",
);

/**
 * A set of command line tools that assist applications with a variety of desktop integration tasks
 */
export const xdg_utils = mkPackage(
  nixRaw`pkgs.xdg-utils`,
  "A set of command line tools that assist applications with a variety of desktop integration tasks",
);

/**
 * Command line tool that generates XDG menus for several window managers
 */
export const xdgmenumaker = mkPackage(
  nixRaw`pkgs.xdgmenumaker`,
  "Command line tool that generates XDG menus for several window managers",
);

/**
 * Program to show you what is using up all your disk space
 */
export const xdiskusage = mkPackage(
  nixRaw`pkgs.xdiskusage`,
  "Program to show you what is using up all your disk space",
);

/**
 * Small X utility to perform elementary actions on windows
 */
export const xdo = mkPackage(
  nixRaw`pkgs.xdo`,
  "Small X utility to perform elementary actions on windows",
);

/**
 * An interactive viewer for graphs written in Graphviz's dot
 */
export const xdot = mkPackage(
  nixRaw`pkgs.xdot`,
  "An interactive viewer for graphs written in Graphviz's dot",
);

/**
 * Fake keyboard/mouse input, window management, and more
 */
export const xdotool = mkPackage(
  nixRaw`pkgs.xdotool`,
  "Fake keyboard/mouse input, window management, and more",
);

/**
 * Library and utilities for use with XDP
 */
export const xdp_tools = mkPackage(
  nixRaw`pkgs.xdp-tools`,
  "Library and utilities for use with XDP",
);

/**
 * Simple drag-and-drop source/sink for X (called dragon in upstream)
 */
export const xdragon = mkPackage(
  nixRaw`pkgs.xdragon`,
  "Simple drag-and-drop source/sink for X (called dragon in upstream)",
);

export const xdummy = mkPackage(
  nixRaw`pkgs.xdummy`,
  "",
);

/**
 * Tool to convert XDXF dictionary files to slob format
 */
export const xdxf2slob = mkPackage(
  nixRaw`pkgs.xdxf2slob`,
  "Tool to convert XDXF dictionary files to slob format",
);

/**
 * Simple xargs and apply replacement
 */
export const xe = mkPackage(
  nixRaw`pkgs.xe`,
  "Simple xargs and apply replacement",
);

/**
 * XenServer guest utilities
 */
export const xe_guest_utilities = mkPackage(
  nixRaw`pkgs.xe-guest-utilities`,
  "XenServer guest utilities",
);

/**
 * sets the X root window to an image of the Earth
 */
export const xearth = mkPackage(
  nixRaw`pkgs.xearth`,
  "sets the X root window to an image of the Earth",
);

/**
 * Intel X86 Encoder Decoder (Intel XED)
 */
export const xed = mkPackage(
  nixRaw`pkgs.xed`,
  "Intel X86 Encoder Decoder (Intel XED)",
);

/**
 * Light weight text editor from Linux Mint
 */
export const xed_editor = mkPackage(
  nixRaw`pkgs.xed-editor`,
  "Light weight text editor from Linux Mint",
);

/**
 * Simple graphical text editor using Athena Widgets (Xaw)
 */
export const xedit = mkPackage(
  nixRaw`pkgs.xedit`,
  "Simple graphical text editor using Athena Widgets (Xaw)",
);

/**
 * Original Xbox emulator
 */
export const xemu = mkPackage(
  nixRaw`pkgs.xemu`,
  "Original Xbox emulator",
);

/**
 * Xen hypervisor and related components (vanilla)
 */
export const xen = mkPackage(
  nixRaw`pkgs.xen`,
  "Xen hypervisor and related components (vanilla)",
);

/**
 * Xen hypervisor and related components (vanilla)
 */
export const xen_4_15 = mkPackage(
  nixRaw`pkgs.xen_4_15`,
  "Xen hypervisor and related components (vanilla)",
);

/**
 * Xen hypervisor and related components (light)
 */
export const xen_4_15_light = mkPackage(
  nixRaw`pkgs.xen_4_15-light`,
  "Xen hypervisor and related components (light)",
);

/**
 * Xen hypervisor and related components (slim)
 */
export const xen_4_15_slim = mkPackage(
  nixRaw`pkgs.xen_4_15-slim`,
  "Xen hypervisor and related components (slim)",
);

/**
 * Xen hypervisor and related components (light)
 */
export const xen_light = mkPackage(
  nixRaw`pkgs.xen-light`,
  "Xen hypervisor and related components (light)",
);

/**
 * Xen hypervisor and related components (slim)
 */
export const xen_slim = mkPackage(
  nixRaw`pkgs.xen-slim`,
  "Xen hypervisor and related components (slim)",
);

/**
 * A utility for post processing mapped reads that have been aligned to a primary genome and a secondary genome and binning reads into species specific, multimapping in each species, unmapped and unassigned bins
 */
export const xenomapper = mkPackage(
  nixRaw`pkgs.xenomapper`,
  "A utility for post processing mapped reads that have been aligned to a primary genome and a secondary genome and binning reads into species specific, multimapping in each species, unmapped and unassigned bins",
);

/**
 * Validating XML parser written in a portable subset of C++
 */
export const xercesc = mkPackage(
  nixRaw`pkgs.xercesc`,
  "Validating XML parser written in a portable subset of C++",
);

/**
 * C++ implementation of the Jupyter Kernel protocol
 */
export const xeus = mkPackage(
  nixRaw`pkgs.xeus`,
  "C++ implementation of the Jupyter Kernel protocol",
);

/**
 * ZeroMQ-based middleware for xeus
 */
export const xeus_zmq = mkPackage(
  nixRaw`pkgs.xeus-zmq`,
  "ZeroMQ-based middleware for xeus",
);

/**
 * Chromebook touchpad driver
 */
export const xf86_input_cmt = mkPackage(
  nixRaw`pkgs.xf86_input_cmt`,
  "Chromebook touchpad driver",
);

/**
 * Wacom digitizer driver for X11
 */
export const xf86_input_wacom = mkPackage(
  nixRaw`pkgs.xf86_input_wacom`,
  "Wacom digitizer driver for X11",
);

/**
 * A driver to run Xorg on top of Xorg or something else
 */
export const xf86_video_nested = mkPackage(
  nixRaw`pkgs.xf86_video_nested`,
  "A driver to run Xorg on top of Xorg or something else",
);

/**
 * MS-Explorer like file manager for X
 */
export const xfe = mkPackage(
  nixRaw`pkgs.xfe`,
  "MS-Explorer like file manager for X",
);

/**
 * An interactive drawing tool for X11
 */
export const xfig = mkPackage(
  nixRaw`pkgs.xfig`,
  "An interactive drawing tool for X11",
);

/**
 * The xFitter project is an open source QCD fit framework ready to extract PDFs and assess the impact of new data
 */
export const xfitter = mkPackage(
  nixRaw`pkgs.xfitter`,
  "The xFitter project is an open source QCD fit framework ready to extract PDFs and assess the impact of new data",
);

/**
 * An analysis tool for airfoils, wings and planes
 */
export const xflr5 = mkPackage(
  nixRaw`pkgs.xflr5`,
  "An analysis tool for airfoils, wings and planes",
);

/**
 * Adjusts your screen to emit warmer light at night
 */
export const xflux = mkPackage(
  nixRaw`pkgs.xflux`,
  "Adjusts your screen to emit warmer light at night",
);

/**
 * Better lighting for Linux. Open source GUI for xflux
 */
export const xflux_gui = mkPackage(
  nixRaw`pkgs.xflux-gui`,
  "Better lighting for Linux. Open source GUI for xflux",
);

/**
 * Allows testing the fonts available in an X server
 */
export const xfontsel = mkPackage(
  nixRaw`pkgs.xfontsel`,
  "Allows testing the fonts available in an X server",
);

/**
 * 
 */
export const xfractint = mkPackage(
  nixRaw`pkgs.xfractint`,
  "",
);

/**
 * XFS filesystem incremental dump utility
 */
export const xfsdump = mkPackage(
  nixRaw`pkgs.xfsdump`,
  "XFS filesystem incremental dump utility",
);

/**
 * SGI XFS utilities
 */
export const xfsprogs = mkPackage(
  nixRaw`pkgs.xfsprogs`,
  "SGI XFS utilities",
);

/**
 * Torture test suite for filesystems
 */
export const xfstests = mkPackage(
  nixRaw`pkgs.xfstests`,
  "Torture test suite for filesystems",
);

/**
 * XGalaga++ is a classic single screen vertical shoot ’em up. It is inspired by XGalaga and reuses most of its sprites.
 */
export const xgalagapp = mkPackage(
  nixRaw`pkgs.xgalagapp`,
  "XGalaga++ is a classic single screen vertical shoot ’em up. It is inspired by XGalaga and reuses most of its sprites.",
);

/**
 * Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library
 */
export const xgboost = mkPackage(
  nixRaw`pkgs.xgboost`,
  "Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library",
);

/**
 * Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library
 */
export const xgboostWithCuda = mkPackage(
  nixRaw`pkgs.xgboostWithCuda`,
  "Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library",
);

/**
 * Select a region with mouse and prints geometry information (x/y/w/h)
 */
export const xgeometry_select = mkPackage(
  nixRaw`pkgs.xgeometry-select`,
  "Select a region with mouse and prints geometry information (x/y/w/h)",
);

/**
 * Friendly and fast tool for sending HTTP requests
 */
export const xh = mkPackage(
  nixRaw`pkgs.xh`,
  "Friendly and fast tool for sending HTTP requests",
);

/**
 * DTDs for XHTML 1.0, the Extensible HyperText Markup Language
 */
export const xhtml1 = mkPackage(
  nixRaw`pkgs.xhtml1`,
  "DTDs for XHTML 1.0, the Extensible HyperText Markup Language",
);

/**
 * Lightweight Virtualization on macOS Based on bhyve
 */
export const xhyve = mkPackage(
  nixRaw`pkgs.xhyve`,
  "Lightweight Virtualization on macOS Based on bhyve",
);

/**
 * Compiles CocoaTouch .xib files into .nib
 */
export const xib2nib = mkPackage(
  nixRaw`pkgs.xib2nib`,
  "Compiles CocoaTouch .xib files into .nib",
);

/**
 * X color profile daemon
 */
export const xiccd = mkPackage(
  nixRaw`pkgs.xiccd`,
  "X color profile daemon",
);

/**
 * Command line tool to download and extract data from HTML/XML pages as well as JSON APIs
 */
export const xidel = mkPackage(
  nixRaw`pkgs.xidel`,
  "Command line tool to download and extract data from HTML/XML pages as well as JSON APIs",
);

/**
 * xautolock rewrite in Rust, with a few extra features
 */
export const xidlehook = mkPackage(
  nixRaw`pkgs.xidlehook`,
  "xautolock rewrite in Rust, with a few extra features",
);

/**
 * Generate Boot Images for Xilinx Zynq and ZU+ SoCs
 */
export const xilinx_bootgen = mkPackage(
  nixRaw`pkgs.xilinx-bootgen`,
  "Generate Boot Images for Xilinx Zynq and ZU+ SoCs",
);

/**
 * A high-performance, portable and reusable multimedia playback engine
 */
export const xine_lib = mkPackage(
  nixRaw`pkgs.xine-lib`,
  "A high-performance, portable and reusable multimedia playback engine",
);

/**
 * Xlib-based frontend for Xine video player
 */
export const xine_ui = mkPackage(
  nixRaw`pkgs.xine-ui`,
  "Xlib-based frontend for Xine video player",
);

/**
 * Secure replacement for inetd
 */
export const xinetd = mkPackage(
  nixRaw`pkgs.xinetd`,
  "Secure replacement for inetd",
);

/**
 * A generic touchscreen calibration program for X.Org
 */
export const xinput_calibrator = mkPackage(
  nixRaw`pkgs.xinput_calibrator`,
  "A generic touchscreen calibration program for X.Org",
);

/**
 * A GTK Bible study tool
 */
export const xiphos = mkPackage(
  nixRaw`pkgs.xiphos`,
  "A GTK Bible study tool",
);

/**
 * OpenType implementation of STIX fonts with math support
 */
export const xits_math = mkPackage(
  nixRaw`pkgs.xits-math`,
  "OpenType implementation of STIX fonts with math support",
);

/**
 * Custom launcher for FFXIV
 */
export const xivlauncher = mkPackage(
  nixRaw`pkgs.xivlauncher`,
  "Custom launcher for FFXIV",
);

/**
 * The X Jack Video Monitor
 */
export const xjadeo = mkPackage(
  nixRaw`pkgs.xjadeo`,
  "The X Jack Video Monitor",
);

/**
 * A program which reads job descriptions line by line and executes them in parallel
 */
export const xjobs = mkPackage(
  nixRaw`pkgs.xjobs`,
  "A program which reads job descriptions line by line and executes them in parallel",
);

/**
 * The falling tower game
 */
export const xjump = mkPackage(
  nixRaw`pkgs.xjump`,
  "The falling tower game",
);

/**
 * Switch your X keyboard layouts from the command line
 */
export const xkb_switch = mkPackage(
  nixRaw`pkgs.xkb-switch`,
  "Switch your X keyboard layouts from the command line",
);

/**
 * Switch your X keyboard layouts from the command line(i3 edition)
 */
export const xkb_switch_i3 = mkPackage(
  nixRaw`pkgs.xkb-switch-i3`,
  "Switch your X keyboard layouts from the command line(i3 edition)",
);

/**
 * onscreen soft keyboard for X11
 */
export const xkbd = mkPackage(
  nixRaw`pkgs.xkbd`,
  "onscreen soft keyboard for X11",
);

/**
 * A small command-line program to get/set the current XKB keyboard layout
 */
export const xkblayout_state = mkPackage(
  nixRaw`pkgs.xkblayout-state`,
  "A small command-line program to get/set the current XKB keyboard layout",
);

/**
 * Command-line keyboard layout monitor for X11
 */
export const xkbmon = mkPackage(
  nixRaw`pkgs.xkbmon`,
  "Command-line keyboard layout monitor for X11",
);

/**
 * Program to help manage many of XKB features of X window
 */
export const xkbset = mkPackage(
  nixRaw`pkgs.xkbset`,
  "Program to help manage many of XKB features of X window",
);

/**
 * NixOS tool to validate X keyboard configuration
 */
export const xkbvalidate = mkPackage(
  nixRaw`pkgs.xkbvalidate`,
  "NixOS tool to validate X keyboard configuration",
);

/**
 * The xkcd font
 */
export const xkcd_font = mkPackage(
  nixRaw`pkgs.xkcd-font`,
  "The xkcd font",
);

/**
 * Generate secure multiword passwords/passphrases, inspired by XKCD
 */
export const xkcdpass = mkPackage(
  nixRaw`pkgs.xkcdpass`,
  "Generate secure multiword passwords/passphrases, inspired by XKCD",
);

export const xkeyboard_config = mkPackage(
  nixRaw`pkgs.xkeyboard_config`,
  "",
);

/**
 * Yet another keyboard remapping tool for X environment
 */
export const xkeysnail = mkPackage(
  nixRaw`pkgs.xkeysnail`,
  "Yet another keyboard remapping tool for X environment",
);

/**
 * Layer 2 Tunnelling Protocol Daemon (RFC 2661)
 */
export const xl2tpd = mkPackage(
  nixRaw`pkgs.xl2tpd`,
  "Layer 2 Tunnelling Protocol Daemon (RFC 2661)",
);

/**
 * Detects and arranges linux display outputs, using XRandR for detection and xrandr for arrangement
 */
export const xlayoutdisplay = mkPackage(
  nixRaw`pkgs.xlayoutdisplay`,
  "Detects and arranges linux display outputs, using XRandR for detection and xrandr for arrangement",
);

/**
 * Touch calibrator for libinput
 */
export const xlibinput_calibrator = mkPackage(
  nixRaw`pkgs.xlibinput-calibrator`,
  "Touch calibrator for libinput",
);

/**
 * Conway's Game of Life and other cellular automata, for X
 */
export const xlife = mkPackage(
  nixRaw`pkgs.xlife`,
  "Conway's Game of Life and other cellular automata, for X",
);

/**
 * xLights is a sequencer for Lights. xLights has usb and E1.31 drivers. You can create sequences in this object oriented program. You can create playlists, schedule them, test your hardware, convert between different sequencers.
 */
export const xlights = mkPackage(
  nixRaw`pkgs.xlights`,
  "xLights is a sequencer for Lights. xLights has usb and E1.31 drivers. You can create sequences in this object oriented program. You can create playlists, schedule them, test your hardware, convert between different sequencers.",
);

/**
 * Graphics file viewer under X11
 */
export const xloadimage = mkPackage(
  nixRaw`pkgs.xloadimage`,
  "Graphics file viewer under X11",
);

/**
 * Screen locker for the X Window System
 */
export const xlockmore = mkPackage(
  nixRaw`pkgs.xlockmore`,
  "Screen locker for the X Window System",
);

/**
 * An amateur radio logging program
 */
export const xlog = mkPackage(
  nixRaw`pkgs.xlog`,
  "An amateur radio logging program",
);

/**
 * X Window System logo display demo
 */
export const xlogo = mkPackage(
  nixRaw`pkgs.xlogo`,
  "X Window System logo display demo",
);

export const xlsfonts = mkPackage(
  nixRaw`pkgs.xlsfonts`,
  "",
);

/**
 * C++/C library to construct Excel .xls files in code
 */
export const xlslib = mkPackage(
  nixRaw`pkgs.xlslib`,
  "C++/C library to construct Excel .xls files in code",
);

/**
 * Convert xlsx to csv
 */
export const xlsx2csv = mkPackage(
  nixRaw`pkgs.xlsx2csv`,
  "Convert xlsx to csv",
);

/**
 * CLI tool to search text in XLSX and XLS files. It works similarly to Unix/GNU Linux grep
 */
export const xlsxgrep = mkPackage(
  nixRaw`pkgs.xlsxgrep`,
  "CLI tool to search text in XLSX and XLS files. It works similarly to Unix/GNU Linux grep",
);

export const xmacro = mkPackage(
  nixRaw`pkgs.xmacro`,
  "",
);

/**
 * Magic Another Game Engine
 */
export const xmage = mkPackage(
  nixRaw`pkgs.xmage`,
  "Magic Another Game Engine",
);

/**
 * Tiny screen magnifier for X11
 */
export const xmagnify = mkPackage(
  nixRaw`pkgs.xmagnify`,
  "Tiny screen magnifier for X11",
);

/**
 * A cross-platform build utility based on Lua
 */
export const xmake = mkPackage(
  nixRaw`pkgs.xmake`,
  "A cross-platform build utility based on Lua",
);

/**
 * Public domain cross-platform semantic versioning in c99
 */
export const xmake_core_sv = mkPackage(
  nixRaw`pkgs.xmake-core-sv`,
  "Public domain cross-platform semantic versioning in c99",
);

/**
 * Tiny color picker for X11
 */
export const xmcp = mkPackage(
  nixRaw`pkgs.xmcp`,
  "Tiny color picker for X11",
);

/**
 * An open source toolkit for medical image conversion 
 */
export const xmedcon = mkPackage(
  nixRaw`pkgs.xmedcon`,
  "An open source toolkit for medical image conversion ",
);

/**
 * A menu utility for X
 */
export const xmenu = mkPackage(
  nixRaw`pkgs.xmenu`,
  "A menu utility for X",
);

/**
 * Mind-mapping software
 */
export const xmind = mkPackage(
  nixRaw`pkgs.xmind`,
  "Mind-mapping software",
);

/**
 * Tools for command line processing of XML, HTML, and CSV
 */
export const xml2 = mkPackage(
  nixRaw`pkgs.xml2`,
  "Tools for command line processing of XML, HTML, and CSV",
);

/**
 * Tool generating IETF RFCs and drafts from XML sources
 */
export const xml2rfc = mkPackage(
  nixRaw`pkgs.xml2rfc`,
  "Tool generating IETF RFCs and drafts from XML sources",
);

/**
 * C++ Implementation of W3C security standards for XML
 */
export const xml_security_c = mkPackage(
  nixRaw`pkgs.xml-security-c`,
  "C++ Implementation of W3C security standards for XML",
);

/**
 * A low-level library that provides a high level interface to XML processing for OpenSAML 2
 */
export const xml_tooling_c = mkPackage(
  nixRaw`pkgs.xml-tooling-c`,
  "A low-level library that provides a high level interface to XML processing for OpenSAML 2",
);

/**
 * XML/Ada: An XML parser for Ada
 */
export const xmlada = mkPackage(
  nixRaw`pkgs.xmlada`,
  "XML/Ada: An XML parser for Ada",
);

/**
 * Java library for accessing XML by binding it to Java types
 */
export const xmlbeans = mkPackage(
  nixRaw`pkgs.xmlbeans`,
  "Java library for accessing XML by binding it to Java types",
);

/**
 * XML parser for Vala and C programs
 */
export const xmlbird = mkPackage(
  nixRaw`pkgs.xmlbird`,
  "XML parser for Vala and C programs",
);

/**
 * A fast, free, validating XML editor
 */
export const xmlcopyeditor = mkPackage(
  nixRaw`pkgs.xmlcopyeditor`,
  "A fast, free, validating XML editor",
);

/**
 * A library and command line utility for diffing xml
 */
export const xmldiff = mkPackage(
  nixRaw`pkgs.xmldiff`,
  "A library and command line utility for diffing xml",
);

/**
 * a configurable formatter (or 'pretty-printer') for XML documents
 */
export const xmlformat = mkPackage(
  nixRaw`pkgs.xmlformat`,
  "a configurable formatter (or 'pretty-printer') for XML documents",
);

/**
 * XML stream reformatter
 */
export const xmlindent = mkPackage(
  nixRaw`pkgs.xmlindent`,
  "XML stream reformatter",
);

/**
 * wtf is my docbook broken?
 */
export const xmloscopy = mkPackage(
  nixRaw`pkgs.xmloscopy`,
  "wtf is my docbook broken?",
);

/**
 * XSL Formatter
 */
export const xmlroff = mkPackage(
  nixRaw`pkgs.xmlroff`,
  "XSL Formatter",
);

/**
 * A lightweight RPC library based on XML and HTTP
 */
export const xmlrpc_c = mkPackage(
  nixRaw`pkgs.xmlrpc_c`,
  "A lightweight RPC library based on XML and HTTP",
);

/**
 * XML Security Library in C based on libxml2
 */
export const xmlsec = mkPackage(
  nixRaw`pkgs.xmlsec`,
  "XML Security Library in C based on libxml2",
);

/**
 * SAX filter for sorting elements in XML
 */
export const xmlsort = mkPackage(
  nixRaw`pkgs.xmlsort`,
  "SAX filter for sorting elements in XML",
);

/**
 * A command line tool for manipulating and querying XML data
 */
export const xmlstarlet = mkPackage(
  nixRaw`pkgs.xmlstarlet`,
  "A command line tool for manipulating and querying XML data",
);

/**
 * Front-end to an XSL toolchain
 */
export const xmlto = mkPackage(
  nixRaw`pkgs.xmlto`,
  "Front-end to an XSL toolchain",
);

/**
 * A Minimalistic Text Based Status Bar
 */
export const xmobar = mkPackage(
  nixRaw`pkgs.xmobar`,
  "A Minimalistic Text Based Status Bar",
);

/**
 * xmonad DBus monitoring solution
 */
export const xmonad_log = mkPackage(
  nixRaw`pkgs.xmonad-log`,
  "xmonad DBus monitoring solution",
);

/**
 * An applet that will display XMonad log information (mate version)
 */
export const xmonad_log_applet_mate = mkPackage(
  nixRaw`pkgs.xmonad_log_applet_mate`,
  "An applet that will display XMonad log information (mate version)",
);

export const xmonad_with_packages = mkPackage(
  nixRaw`pkgs.xmonad-with-packages`,
  "",
);

/**
 * Send commands to a running instance of xmonad
 */
export const xmonadctl = mkPackage(
  nixRaw`pkgs.xmonadctl`,
  "Send commands to a running instance of xmonad",
);

/**
 * A challenging 2D motocross platform game, where physics play an important role
 */
export const xmoto = mkPackage(
  nixRaw`pkgs.xmoto`,
  "A challenging 2D motocross platform game, where physics play an important role",
);

/**
 * X11 based fractal landscape generator
 */
export const xmountains = mkPackage(
  nixRaw`pkgs.xmountains`,
  "X11 based fractal landscape generator",
);

/**
 * Middle mouse button primary X selection/clipboard paste disabler
 */
export const xmousepasteblock = mkPackage(
  nixRaw`pkgs.xmousepasteblock`,
  "Middle mouse button primary X selection/clipboard paste disabler",
);

/**
 * Extended module player
 */
export const xmp = mkPackage(
  nixRaw`pkgs.xmp`,
  "Extended module player",
);

/**
 * Command Line Interface Tool for XMPP
 */
export const xmppc = mkPackage(
  nixRaw`pkgs.xmppc`,
  "Command Line Interface Tool for XMPP",
);

/**
 * Unified All-in-one Monero miner
 */
export const xmr_stak = mkPackage(
  nixRaw`pkgs.xmr-stak`,
  "Unified All-in-one Monero miner",
);

/**
 * Monero (XMR) CPU miner
 */
export const xmrig = mkPackage(
  nixRaw`pkgs.xmrig`,
  "Monero (XMR) CPU miner",
);

/**
 * A fork of the XMRig CPU miner with support for algorithm switching
 */
export const xmrig_mo = mkPackage(
  nixRaw`pkgs.xmrig-mo`,
  "A fork of the XMRig CPU miner with support for algorithm switching",
);

/**
 * Monero (XMR) Stratum protocol proxy
 */
export const xmrig_proxy = mkPackage(
  nixRaw`pkgs.xmrig-proxy`,
  "Monero (XMR) Stratum protocol proxy",
);

/**
 * Yet another NBD (Network Block Device) server program
 */
export const xnbd = mkPackage(
  nixRaw`pkgs.xnbd`,
  "Yet another NBD (Network Block Device) server program",
);

/**
 * Graphical antenna simulation
 */
export const xnec2c = mkPackage(
  nixRaw`pkgs.xnec2c`,
  "Graphical antenna simulation",
);

/**
 * X11 event recording and replay tool
 */
export const xnee = mkPackage(
  nixRaw`pkgs.xnee`,
  "X11 event recording and replay tool",
);

/**
 * Utility for switching between keyboard layouts
 */
export const xneur = mkPackage(
  nixRaw`pkgs.xneur`,
  "Utility for switching between keyboard layouts",
);

/**
 * A tool to read notifications from stdin and pop them up on the screen
 */
export const xnotify = mkPackage(
  nixRaw`pkgs.xnotify`,
  "A tool to read notifications from stdin and pop them up on the screen",
);

/**
 * A lightweight overlay bar for the X Window System
 */
export const xob = mkPackage(
  nixRaw`pkgs.xob`,
  "A lightweight overlay bar for the X Window System",
);

/**
 * A free fast-paced first-person shooter
 */
export const xonotic = mkPackage(
  nixRaw`pkgs.xonotic`,
  "A free fast-paced first-person shooter",
);

export const xonotic_data = mkPackage(
  nixRaw`pkgs.xonotic-data`,
  "",
);

/**
 * A free fast-paced first-person shooter
 */
export const xonotic_dedicated = mkPackage(
  nixRaw`pkgs.xonotic-dedicated`,
  "A free fast-paced first-person shooter",
);

export const xonotic_dedicated_unwrapped = mkPackage(
  nixRaw`pkgs.xonotic-dedicated-unwrapped`,
  "",
);

/**
 * A free fast-paced first-person shooter
 */
export const xonotic_glx = mkPackage(
  nixRaw`pkgs.xonotic-glx`,
  "A free fast-paced first-person shooter",
);

export const xonotic_glx_unwrapped = mkPackage(
  nixRaw`pkgs.xonotic-glx-unwrapped`,
  "",
);

/**
 * A free fast-paced first-person shooter
 */
export const xonotic_sdl = mkPackage(
  nixRaw`pkgs.xonotic-sdl`,
  "A free fast-paced first-person shooter",
);

export const xonotic_sdl_unwrapped = mkPackage(
  nixRaw`pkgs.xonotic-sdl-unwrapped`,
  "",
);

/**
 * A Python-ish, BASHwards-compatible shell
 */
export const xonsh = mkPackage(
  nixRaw`pkgs.xonsh`,
  "A Python-ish, BASHwards-compatible shell",
);

/**
 * A Python-ish, BASHwards-compatible shell
 */
export const xonsh_unwrapped = mkPackage(
  nixRaw`pkgs.xonsh-unwrapped`,
  "A Python-ish, BASHwards-compatible shell",
);

/**
 * XOR Key Extractor
 */
export const xorex = mkPackage(
  nixRaw`pkgs.xorex`,
  "XOR Key Extractor",
);

/**
 * GNU autoconf macros shared across X.Org projects
 */
export const xorg_autoconf = mkPackage(
  nixRaw`pkgs.xorg-autoconf`,
  "GNU autoconf macros shared across X.Org projects",
);

/**
 * X11 colorname to RGB mapping database
 */
export const xorg_rgb = mkPackage(
  nixRaw`pkgs.xorg-rgb`,
  "X11 colorname to RGB mapping database",
);

export const xorg_sys_opengl = mkPackage(
  nixRaw`pkgs.xorg_sys_opengl`,
  "",
);

/**
 * ISO 9660 Rock Ridge file system manipulator
 */
export const xorriso = mkPackage(
  nixRaw`pkgs.xorriso`,
  "ISO 9660 Rock Ridge file system manipulator",
);

/**
 * Tool to analyze multi-byte XOR cipher
 */
export const xortool = mkPackage(
  nixRaw`pkgs.xortool`,
  "Tool to analyze multi-byte XOR cipher",
);

/**
 * Oscilloscope through the sound card
 */
export const xoscope = mkPackage(
  nixRaw`pkgs.xoscope`,
  "Oscilloscope through the sound card",
);

/**
 * Displays text on your screen
 */
export const xosd = mkPackage(
  nixRaw`pkgs.xosd`,
  "Displays text on your screen",
);

/**
 * A classic system monitoring tool
 */
export const xosview = mkPackage(
  nixRaw`pkgs.xosview`,
  "A classic system monitoring tool",
);

/**
 * Lightweight graphical operating system monitor
 */
export const xosview2 = mkPackage(
  nixRaw`pkgs.xosview2`,
  "Lightweight graphical operating system monitor",
);

/**
 * Note-taking application (supposes stylus)
 */
export const xournal = mkPackage(
  nixRaw`pkgs.xournal`,
  "Note-taking application (supposes stylus)",
);

/**
 * Xournal++ is a handwriting Notetaking software with PDF annotation support
 */
export const xournalpp = mkPackage(
  nixRaw`pkgs.xournalpp`,
  "Xournal++ is a handwriting Notetaking software with PDF annotation support",
);

/**
 * Xbox One wireless dongle firmware
 */
export const xow_dongle_firmware = mkPackage(
  nixRaw`pkgs.xow_dongle-firmware`,
  "Xbox One wireless dongle firmware",
);

/**
 * Drivers for the XP-PEN Deco 01 v2 drawing tablet
 */
export const xp_pen_deco_01_v2_driver = mkPackage(
  nixRaw`pkgs.xp-pen-deco-01-v2-driver`,
  "Drivers for the XP-PEN Deco 01 v2 drawing tablet",
);

/**
 * Driver for XP-PEN Pentablet drawing tablets
 */
export const xp_pen_g430_driver = mkPackage(
  nixRaw`pkgs.xp-pen-g430-driver`,
  "Driver for XP-PEN Pentablet drawing tablets",
);

/**
 * A sticky note application for jotting down things to remember
 */
export const xpad = mkPackage(
  nixRaw`pkgs.xpad`,
  "A sticky note application for jotting down things to remember",
);

/**
 * A panorama stitching tool
 */
export const xpano = mkPackage(
  nixRaw`pkgs.xpano`,
  "A panorama stitching tool",
);

/**
 * Paste text into X windows that don't work with selections
 */
export const xpaste = mkPackage(
  nixRaw`pkgs.xpaste`,
  "Paste text into X windows that don't work with selections",
);

/**
 * Viewer for Portable Document Format (PDF) files
 */
export const xpdf = mkPackage(
  nixRaw`pkgs.xpdf`,
  "Viewer for Portable Document Format (PDF) files",
);

/**
 * A multiplayer X11 space combat game
 */
export const xpilot_ng = mkPackage(
  nixRaw`pkgs.xpilot-ng`,
  "A multiplayer X11 space combat game",
);

/**
 * Renders an image of the earth or other planets into the X root window
 */
export const xplanet = mkPackage(
  nixRaw`pkgs.xplanet`,
  "Renders an image of the earth or other planets into the X root window",
);

/**
 * A generic media player from Linux Mint
 */
export const xplayer = mkPackage(
  nixRaw`pkgs.xplayer`,
  "A generic media player from Linux Mint",
);

/**
 * A customizable, modern file manager
 */
export const xplorer = mkPackage(
  nixRaw`pkgs.xplorer`,
  "A customizable, modern file manager",
);

/**
 * A hackable, minimal, fast TUI file explorer
 */
export const xplr = mkPackage(
  nixRaw`pkgs.xplr`,
  "A hackable, minimal, fast TUI file explorer",
);

/**
 * A UNIX daemon that executes a script on X input and RandR changes
 */
export const xplugd = mkPackage(
  nixRaw`pkgs.xplugd`,
  "A UNIX daemon that executes a script on X input and RandR changes",
);

/**
 * Create X11 pointer barriers around your working area
 */
export const xpointerbarrier = mkPackage(
  nixRaw`pkgs.xpointerbarrier`,
  "Create X11 pointer barriers around your working area",
);

/**
 * Persistent remote applications for X
 */
export const xpra = mkPackage(
  nixRaw`pkgs.xpra`,
  "Persistent remote applications for X",
);

/**
 * Persistent remote applications for X
 */
export const xpraWithNvenc = mkPackage(
  nixRaw`pkgs.xpraWithNvenc`,
  "Persistent remote applications for X",
);

/**
 * A utility that queries the X server for the user's idle time and prints it to stdout
 */
export const xprintidle = mkPackage(
  nixRaw`pkgs.xprintidle`,
  "A utility that queries the X server for the user's idle time and prints it to stdout",
);

/**
 * A command-line tool to print idle time from libXss
 */
export const xprintidle_ng = mkPackage(
  nixRaw`pkgs.xprintidle-ng`,
  "A command-line tool to print idle time from libXss",
);

/**
 * A dmenu rip-off with contextual completion
 */
export const xprompt = mkPackage(
  nixRaw`pkgs.xprompt`,
  "A dmenu rip-off with contextual completion",
);

/**
 * Custom NOR firmware loader/IPSW generator for the iPhone
 */
export const xpwn = mkPackage(
  nixRaw`pkgs.xpwn`,
  "Custom NOR firmware loader/IPSW generator for the iPhone",
);

/**
 * Pure rust implementation of jq
 */
export const xq = mkPackage(
  nixRaw`pkgs.xq`,
  "Pure rust implementation of jq",
);

/**
 * Command-line XML and HTML beautifier and content extractor
 */
export const xq_xml = mkPackage(
  nixRaw`pkgs.xq-xml`,
  "Command-line XML and HTML beautifier and content extractor",
);

/**
 * An XQuery and XPath 2 library and command line utility written in C++, implemented on top of the Xerces-C library
 */
export const xqilla = mkPackage(
  nixRaw`pkgs.xqilla`,
  "An XQuery and XPath 2 library and command line utility written in C++, implemented on top of the Xerces-C library",
);

export const xquartz = mkPackage(
  nixRaw`pkgs.xquartz`,
  "",
);

/**
 * Inverts the colors of your screen
 */
export const xrandr_invert_colors = mkPackage(
  nixRaw`pkgs.xrandr-invert-colors`,
  "Inverts the colors of your screen",
);

/**
 * A platform for building proxies to bypass network restrictions. A replacement for v2ray-core, with XTLS support and fully compatible configuration
 */
export const xray = mkPackage(
  nixRaw`pkgs.xray`,
  "A platform for building proxies to bypass network restrictions. A replacement for v2ray-core, with XTLS support and fully compatible configuration",
);

/**
 * An open source RDP server
 */
export const xrdp = mkPackage(
  nixRaw`pkgs.xrdp`,
  "An open source RDP server",
);

/**
 * Print the geometry of a rectangular screen region
 */
export const xrectsel = mkPackage(
  nixRaw`pkgs.xrectsel`,
  "Print the geometry of a rectangular screen region",
);

/**
 * A 'top' like tool for monitoring X Client server resource usage
 */
export const xrestop = mkPackage(
  nixRaw`pkgs.xrestop`,
  "A 'top' like tool for monitoring X Client server resource usage",
);

/**
 * An OpenXR example using Vulkan for rendering
 */
export const xrgears = mkPackage(
  nixRaw`pkgs.xrgears`,
  "An OpenXR example using Vulkan for rendering",
);

/**
 * High performance, scalable fault tolerant data access
 */
export const xrootd = mkPackage(
  nixRaw`pkgs.xrootd`,
  "High performance, scalable fault tolerant data access",
);

/**
 * X utility for querying xrdb
 */
export const xrq = mkPackage(
  nixRaw`pkgs.xrq`,
  "X utility for querying xrdb",
);

/**
 * Graphical scanning frontend for sane
 */
export const xsane = mkPackage(
  nixRaw`pkgs.xsane`,
  "Graphical scanning frontend for sane",
);

/**
 * Screencasts of windows with list of keystrokes overlayed
 */
export const xscast = mkPackage(
  nixRaw`pkgs.xscast`,
  "Screencasts of windows with list of keystrokes overlayed",
);

/**
 * Schematic capture and netlisting EDA tool
 */
export const xschem = mkPackage(
  nixRaw`pkgs.xschem`,
  "Schematic capture and netlisting EDA tool",
);

/**
 * program to monitor X11/Client conversations
 */
export const xscope = mkPackage(
  nixRaw`pkgs.xscope`,
  "program to monitor X11/Client conversations",
);

/**
 * A set of screensavers
 */
export const xscreensaver = mkPackage(
  nixRaw`pkgs.xscreensaver`,
  "A set of screensavers",
);

/**
 * Set color temperature of screen
 */
export const xsct = mkPackage(
  nixRaw`pkgs.xsct`,
  "Set color temperature of screen",
);

/**
 * An open-source, cross-platform W3C XML Schema to C++ data binding compiler
 */
export const xsd = mkPackage(
  nixRaw`pkgs.xsd`,
  "An open-source, cross-platform W3C XML Schema to C++ data binding compiler",
);

/**
 * X11 screen lock utility with security in mind
 */
export const xsecurelock = mkPackage(
  nixRaw`pkgs.xsecurelock`,
  "X11 screen lock utility with security in mind",
);

/**
 * Command-line program for getting and setting the contents of the X selection
 */
export const xsel = mkPackage(
  nixRaw`pkgs.xsel`,
  "Command-line program for getting and setting the contents of the X selection",
);

export const xsensors = mkPackage(
  nixRaw`pkgs.xsensors`,
  "",
);

/**
 * Provides settings to X11 applications via the XSETTINGS specification
 */
export const xsettingsd = mkPackage(
  nixRaw`pkgs.xsettingsd`,
  "Provides settings to X11 applications via the XSETTINGS specification",
);

/**
 * C++ wrappers for SIMD intrinsics
 */
export const xsimd = mkPackage(
  nixRaw`pkgs.xsimd`,
  "C++ wrappers for SIMD intrinsics",
);

/**
 * C++ wrappers for SIMD intrinsics
 */
export const xsimd10 = mkPackage(
  nixRaw`pkgs.xsimd10`,
  "C++ wrappers for SIMD intrinsics",
);

/**
 * Famous german card game
 */
export const xskat = mkPackage(
  nixRaw`pkgs.xskat`,
  "Famous german card game",
);

/**
 * An X-windows application that will let it snow on the root, in between and on windows
 */
export const xsnow = mkPackage(
  nixRaw`pkgs.xsnow`,
  "An X-windows application that will let it snow on the root, in between and on windows",
);

/**
 * A generic Sokoban game for X11
 */
export const xsok = mkPackage(
  nixRaw`pkgs.xsok`,
  "A generic Sokoban game for X11",
);

/**
 * X sokoban
 */
export const xsokoban = mkPackage(
  nixRaw`pkgs.xsokoban`,
  "X sokoban",
);

/**
 * Summarize system info from sosreports
 */
export const xsos = mkPackage(
  nixRaw`pkgs.xsos`,
  "Summarize system info from sosreports",
);

/**
 * A MIPS32 simulator
 */
export const xspim = mkPackage(
  nixRaw`pkgs.xspim`,
  "A MIPS32 simulator",
);

/**
 * Use external locker (such as i3lock) as X screen saver
 */
export const xss_lock = mkPackage(
  nixRaw`pkgs.xss-lock`,
  "Use external locker (such as i3lock) as X screen saver",
);

/**
 * Automatic framework to detect, exploit and report XSS vulnerabilities in web-based applications
 */
export const xsser = mkPackage(
  nixRaw`pkgs.xsser`,
  "Automatic framework to detect, exploit and report XSS vulnerabilities in web-based applications",
);

/**
 * Forward freedesktop.org Idle Inhibition Service calls to Xss
 */
export const xssproxy = mkPackage(
  nixRaw`pkgs.xssproxy`,
  "Forward freedesktop.org Idle Inhibition Service calls to Xss",
);

/**
 * A simple tool to retrieve the X screensaver state
 */
export const xssstate = mkPackage(
  nixRaw`pkgs.xssstate`,
  "A simple tool to retrieve the X screensaver state",
);

/**
 * Simple terminal fork that can load config from Xresources
 */
export const xst = mkPackage(
  nixRaw`pkgs.xst`,
  "Simple terminal fork that can load config from Xresources",
);

/**
 * A replacement of GNU Stow written in C++
 */
export const xstow = mkPackage(
  nixRaw`pkgs.xstow`,
  "A replacement of GNU Stow written in C++",
);

/**
 * CLI utility to find subdomains from curated passive online sources
 */
export const xsubfind3r = mkPackage(
  nixRaw`pkgs.xsubfind3r`,
  "CLI utility to find subdomains from curated passive online sources",
);

/**
 * Auto-suspend inactive X11 applications
 */
export const xsuspender = mkPackage(
  nixRaw`pkgs.xsuspender`,
  "Auto-suspend inactive X11 applications",
);

/**
 * A fast CSV toolkit written in Rust
 */
export const xsv = mkPackage(
  nixRaw`pkgs.xsv`,
  "A fast CSV toolkit written in Rust",
);

/**
 * A slide show presentation tool
 */
export const xsw = mkPackage(
  nixRaw`pkgs.xsw`,
  "A slide show presentation tool",
);

/**
 * Classic-analog (VCOs-VCF-VCA) style software synthesizer
 */
export const xsynth_dssi = mkPackage(
  nixRaw`pkgs.xsynth_dssi`,
  "Classic-analog (VCOs-VCF-VCA) style software synthesizer",
);

/**
 * Cuddly teddy bear for your X desktop
 */
export const xteddy = mkPackage(
  nixRaw`pkgs.xteddy`,
  "Cuddly teddy bear for your X desktop",
);

/**
 * Multi-dimensional arrays with broadcasting and lazy computing.
 */
export const xtensor = mkPackage(
  nixRaw`pkgs.xtensor`,
  "Multi-dimensional arrays with broadcasting and lazy computing.",
);

export const xterm = mkPackage(
  nixRaw`pkgs.xterm`,
  "",
);

/**
 * Enables dynamic control of xterm properties
 */
export const xtermcontrol = mkPackage(
  nixRaw`pkgs.xtermcontrol`,
  "Enables dynamic control of xterm properties",
);

/**
 * M3U Proxy for Plex DVR and Emby Live TV
 */
export const xteve = mkPackage(
  nixRaw`pkgs.xteve`,
  "M3U Proxy for Plex DVR and Emby Live TV",
);

/**
 * Outputs X window titles
 */
export const xtitle = mkPackage(
  nixRaw`pkgs.xtitle`,
  "Outputs X window titles",
);

/**
 * Basic tools (containers, algorithms) used by other quantstack packages
 */
export const xtl = mkPackage(
  nixRaw`pkgs.xtl`,
  "Basic tools (containers, algorithms) used by other quantstack packages",
);

/**
 * Tool to trace X11 protocol connections
 */
export const xtrace = mkPackage(
  nixRaw`pkgs.xtrace`,
  "Tool to trace X11 protocol connections",
);

/**
 * A distributed filesystem
 */
export const xtreemfs = mkPackage(
  nixRaw`pkgs.xtreemfs`,
  "A distributed filesystem",
);

/**
 * A multi-player version of the classical game of Tetris, for the X Window system
 */
export const xtris = mkPackage(
  nixRaw`pkgs.xtris`,
  "A multi-player version of the classical game of Tetris, for the X Window system",
);

/**
 * PAM based X11 screen locker
 */
export const xtrlock_pam = mkPackage(
  nixRaw`pkgs.xtrlock-pam`,
  "PAM based X11 screen locker",
);

/**
 * easy-to-use X protocol tracing program
 */
export const xtruss = mkPackage(
  nixRaw`pkgs.xtruss`,
  "easy-to-use X protocol tracing program",
);

/**
 * Tuner for Jack Audio Connection Kit
 */
export const xtuner = mkPackage(
  nixRaw`pkgs.xtuner`,
  "Tuner for Jack Audio Connection Kit",
);

/**
 * A web browser built from Firefox source tree
 */
export const xulrunner = mkPackage(
  nixRaw`pkgs.xulrunner`,
  "A web browser built from Firefox source tree",
);

/**
 * Extract urls from text
 */
export const xurls = mkPackage(
  nixRaw`pkgs.xurls`,
  "Extract urls from text",
);

/**
 * Classic image viewer and editor for X.
 */
export const xv = mkPackage(
  nixRaw`pkgs.xv`,
  "Classic image viewer and editor for X.",
);

/**
 * Tool for converting Xen images to raw and back
 */
export const xva_img = mkPackage(
  nixRaw`pkgs.xva-img`,
  "Tool for converting Xen images to raw and back",
);

/**
 * Convenience script to run a virtualized X-Server
 */
export const xvfb_run = mkPackage(
  nixRaw`pkgs.xvfb-run`,
  "Convenience script to run a virtualized X-Server",
);

/**
 * MPEG-4 video codec for PC
 */
export const xvidcore = mkPackage(
  nixRaw`pkgs.xvidcore`,
  "MPEG-4 video codec for PC",
);

/**
 * Virtual keyboard for X window system
 */
export const xvkbd = mkPackage(
  nixRaw`pkgs.xvkbd`,
  "Virtual keyboard for X window system",
);

/**
 * Utility for setting wallpapers in X
 */
export const xwallpaper = mkPackage(
  nixRaw`pkgs.xwallpaper`,
  "Utility for setting wallpapers in X",
);

/**
 * An X server for interfacing X11 apps with the Wayland protocol
 */
export const xwayland = mkPackage(
  nixRaw`pkgs.xwayland`,
  "An X server for interfacing X11 apps with the Wayland protocol",
);

/**
 * Utility to allow streaming Wayland windows to X applications
 */
export const xwaylandvideobridge = mkPackage(
  nixRaw`pkgs.xwaylandvideobridge`,
  "Utility to allow streaming Wayland windows to X applications",
);

/**
 * Userspace utilities to control connected Nintendo Wii Remotes
 */
export const xwiimote = mkPackage(
  nixRaw`pkgs.xwiimote`,
  "Userspace utilities to control connected Nintendo Wii Remotes",
);

/**
 * X window switcher drawing a colourful grid
 */
export const xwinmosaic = mkPackage(
  nixRaw`pkgs.xwinmosaic`,
  "X window switcher drawing a colourful grid",
);

/**
 * A utility that allows you to use an animated X window as the wallpaper
 */
export const xwinwrap = mkPackage(
  nixRaw`pkgs.xwinwrap`,
  "A utility that allows you to use an animated X window as the wallpaper",
);

/**
 * Extremely fast hash algorithm
 */
export const xxHash = mkPackage(
  nixRaw`pkgs.xxHash`,
  "Extremely fast hash algorithm",
);

export const xxd = mkPackage(
  nixRaw`pkgs.xxd`,
  "",
);

/**
 * Graphical file and directories comparator and merge tool
 */
export const xxdiff = mkPackage(
  nixRaw`pkgs.xxdiff`,
  "Graphical file and directories comparator and merge tool",
);

/**
 * Graphical file and directories comparator and merge tool
 */
export const xxdiff_tip = mkPackage(
  nixRaw`pkgs.xxdiff-tip`,
  "Graphical file and directories comparator and merge tool",
);

/**
 * Strictly validating, near WYSIWYG, XML editor with DocBook support
 */
export const xxe_pe = mkPackage(
  nixRaw`pkgs.xxe-pe`,
  "Strictly validating, near WYSIWYG, XML editor with DocBook support",
);

/**
 * A simple but powerful graphical interface to gdb
 */
export const xxgdb = mkPackage(
  nixRaw`pkgs.xxgdb`,
  "A simple but powerful graphical interface to gdb",
);

/**
 * Bring your favorite shell wherever you go through SSH
 */
export const xxh = mkPackage(
  nixRaw`pkgs.xxh`,
  "Bring your favorite shell wherever you go through SSH",
);

/**
 * A keyboard layout indicator and switcher
 */
export const xxkb = mkPackage(
  nixRaw`pkgs.xxkb`,
  "A keyboard layout indicator and switcher",
);

/**
 * A visual hex viewer for the terminal
 */
export const xxv = mkPackage(
  nixRaw`pkgs.xxv`,
  "A visual hex viewer for the terminal",
);

/**
 * High-performance analog circuit simulator
 */
export const xyce = mkPackage(
  nixRaw`pkgs.xyce`,
  "High-performance analog circuit simulator",
);

/**
 * High-performance analog circuit simulator
 */
export const xyce_parallel = mkPackage(
  nixRaw`pkgs.xyce-parallel`,
  "High-performance analog circuit simulator",
);

/**
 * Weather Forecast Visualization
 */
export const xygrib = mkPackage(
  nixRaw`pkgs.xygrib`,
  "Weather Forecast Visualization",
);

/**
 * Portable library for reading files that contain x-y data from powder diffraction, spectroscopy and other experimental methods
 */
export const xylib = mkPackage(
  nixRaw`pkgs.xylib`,
  "Portable library for reading files that contain x-y data from powder diffraction, spectroscopy and other experimental methods",
);

/**
 * A general-purpose data compression software, successor of LZMA
 */
export const xz = mkPackage(
  nixRaw`pkgs.xz`,
  "A general-purpose data compression software, successor of LZMA",
);

/**
 * Picture viewer for X with a thumbnail-based selector
 */
export const xzgv = mkPackage(
  nixRaw`pkgs.xzgv`,
  "Picture viewer for X with a thumbnail-based selector",
);

/**
 * An X11 screen zoom tool
 */
export const xzoom = mkPackage(
  nixRaw`pkgs.xzoom`,
  "An X11 screen zoom tool",
);

/**
 * A modern and lightweight status bar for X window managers
 */
export const yabar = mkPackage(
  nixRaw`pkgs.yabar`,
  "A modern and lightweight status bar for X window managers",
);

/**
 * A modern and lightweight status bar for X window managers
 */
export const yabar_unstable = mkPackage(
  nixRaw`pkgs.yabar-unstable`,
  "A modern and lightweight status bar for X window managers",
);

/**
 * Yet another BASIC
 */
export const yabasic = mkPackage(
  nixRaw`pkgs.yabasic`,
  "Yet another BASIC",
);

/**
 * An open-source Sega Saturn emulator
 */
export const yabause = mkPackage(
  nixRaw`pkgs.yabause`,
  "An open-source Sega Saturn emulator",
);

/**
 * A modern and transparent way to use Windows VST2 and VST3 plugins on Linux
 */
export const yabridge = mkPackage(
  nixRaw`pkgs.yabridge`,
  "A modern and transparent way to use Windows VST2 and VST3 plugins on Linux",
);

/**
 * A small, optional utility to help set up and update yabridge for several directories at once
 */
export const yabridgectl = mkPackage(
  nixRaw`pkgs.yabridgectl`,
  "A small, optional utility to help set up and update yabridge for several directories at once",
);

/**
 * Easy to use, general purpose Computer Algebra System
 */
export const yacas = mkPackage(
  nixRaw`pkgs.yacas`,
  "Easy to use, general purpose Computer Algebra System",
);

/**
 * Easy to use, general purpose Computer Algebra System, built with GUI.
 */
export const yacas_gui = mkPackage(
  nixRaw`pkgs.yacas-gui`,
  "Easy to use, general purpose Computer Algebra System, built with GUI.",
);

/**
 * A comic reader for cross-platform reading and managing your digital comic collection
 */
export const yacreader = mkPackage(
  nixRaw`pkgs.yacreader`,
  "A comic reader for cross-platform reading and managing your digital comic collection",
);

/**
 * GUI dialog tool for shell scripts
 */
export const yad = mkPackage(
  nixRaw`pkgs.yad`,
  "GUI dialog tool for shell scripts",
);

/**
 * Yet Another Dotfiles Manager
 */
export const yadm = mkPackage(
  nixRaw`pkgs.yadm`,
  "Yet Another Dotfiles Manager",
);

/**
 * A Go interpreter
 */
export const yaegi = mkPackage(
  nixRaw`pkgs.yaegi`,
  "A Go interpreter",
);

/**
 * Yet another fetch clone written in C++
 */
export const yafetch = mkPackage(
  nixRaw`pkgs.yafetch`,
  "Yet another fetch clone written in C++",
);

/**
 * Yet another framebuffer terminal
 */
export const yaft = mkPackage(
  nixRaw`pkgs.yaft`,
  "Yet another framebuffer terminal",
);

/**
 * Your AI powered terminal assistant
 */
export const yai = mkPackage(
  nixRaw`pkgs.yai`,
  "Your AI powered terminal assistant",
);

/**
 * Yet Another JSON Library
 */
export const yajl = mkPackage(
  nixRaw`pkgs.yajl`,
  "Yet Another JSON Library",
);

/**
 * Yet Another JSON Schema Validator
 */
export const yajsv = mkPackage(
  nixRaw`pkgs.yajsv`,
  "Yet Another JSON Schema Validator",
);

/**
 * Callbacks for YARA rule matches
 */
export const yallback = mkPackage(
  nixRaw`pkgs.yallback`,
  "Callbacks for YARA rule matches",
);

/**
 * A schema and validator for YAML
 */
export const yamale = mkPackage(
  nixRaw`pkgs.yamale`,
  "A schema and validator for YAML",
);

/**
 * Modular status panel for X11 and Wayland
 */
export const yambar = mkPackage(
  nixRaw`pkgs.yambar`,
  "Modular status panel for X11 and Wayland",
);

/**
 * Enable Yambar to show Hyprland workspaces
 */
export const yambar_hyprland_wses = mkPackage(
  nixRaw`pkgs.yambar-hyprland-wses`,
  "Enable Yambar to show Hyprland workspaces",
);

/**
 * Yet Another MetaData Injector for FLV
 */
export const yamdi = mkPackage(
  nixRaw`pkgs.yamdi`,
  "Yet Another MetaData Injector for FLV",
);

/**
 * Convert yaml to json
 */
export const yaml2json = mkPackage(
  nixRaw`pkgs.yaml2json`,
  "Convert yaml to json",
);

/**
 * A YAML parser and emitter for C++
 */
export const yaml_cpp = mkPackage(
  nixRaw`pkgs.yaml-cpp`,
  "A YAML parser and emitter for C++",
);

/**
 * A YAML parser and emitter for C++
 */
export const yaml_cpp_0_3 = mkPackage(
  nixRaw`pkgs.yaml-cpp_0_3`,
  "A YAML parser and emitter for C++",
);

/**
 * Language Server for YAML Files
 */
export const yaml_language_server = mkPackage(
  nixRaw`pkgs.yaml-language-server`,
  "Language Server for YAML Files",
);

/**
 * Merge YAML data files
 */
export const yaml_merge = mkPackage(
  nixRaw`pkgs.yaml-merge`,
  "Merge YAML data files",
);

/**
 * Python YAML formatter that keeps your comments
 */
export const yamlfix = mkPackage(
  nixRaw`pkgs.yamlfix`,
  "Python YAML formatter that keeps your comments",
);

/**
 * An extensible command line tool or library to format yaml files.
 */
export const yamlfmt = mkPackage(
  nixRaw`pkgs.yamlfmt`,
  "An extensible command line tool or library to format yaml files.",
);

/**
 * A linter for YAML files
 */
export const yamllint = mkPackage(
  nixRaw`pkgs.yamllint`,
  "A linter for YAML files",
);

/**
 * Command-line processors for YAML/JSON/Compatible data
 */
export const yamlpath = mkPackage(
  nixRaw`pkgs.yamlpath`,
  "Command-line processors for YAML/JSON/Compatible data",
);

/**
 * Last.FM scrobbler for MPD
 */
export const yams = mkPackage(
  nixRaw`pkgs.yams`,
  "Last.FM scrobbler for MPD",
);

/**
 * Yandex Web Browser
 */
export const yandex_browser = mkPackage(
  nixRaw`pkgs.yandex-browser`,
  "Yandex Web Browser",
);

/**
 * A free cloud file storage service
 */
export const yandex_disk = mkPackage(
  nixRaw`pkgs.yandex-disk`,
  "A free cloud file storage service",
);

/**
 * Yank terminal output to clipboard
 */
export const yank = mkPackage(
  nixRaw`pkgs.yank`,
  "Yank terminal output to clipboard",
);

/**
 * The free font classic
 */
export const yanone_kaffeesatz = mkPackage(
  nixRaw`pkgs.yanone-kaffeesatz`,
  "The free font classic",
);

/**
 * A ISO-compatible high-performance Prolog compiler
 */
export const yap = mkPackage(
  nixRaw`pkgs.yap`,
  "A ISO-compatible high-performance Prolog compiler",
);

/**
 * Multiplatform Commodore 64 and 264 family emulator
 */
export const yapesdl = mkPackage(
  nixRaw`pkgs.yapesdl`,
  "Multiplatform Commodore 64 and 264 family emulator",
);

/**
 * Yet Another Python Formatter
 */
export const yapf = mkPackage(
  nixRaw`pkgs.yapf`,
  "Yet Another Python Formatter",
);

/**
 * A generator for YARA rules
 */
export const yarGen = mkPackage(
  nixRaw`pkgs.yarGen`,
  "A generator for YARA rules",
);

/**
 * The pattern matching swiss knife for malware researchers
 */
export const yara = mkPackage(
  nixRaw`pkgs.yara`,
  "The pattern matching swiss knife for malware researchers",
);

/**
 * Tool to visually inspect and force decode YARA and regex matches
 */
export const yaralyzer = mkPackage(
  nixRaw`pkgs.yaralyzer`,
  "Tool to visually inspect and force decode YARA and regex matches",
);

/**
 * Fast, reliable, and secure dependency management for javascript
 */
export const yarn = mkPackage(
  nixRaw`pkgs.yarn`,
  "Fast, reliable, and secure dependency management for javascript",
);

/**
 * Convert packages.json and yarn.lock into a Nix expression that downloads all the dependencies
 */
export const yarn2nix = mkPackage(
  nixRaw`pkgs.yarn2nix`,
  "Convert packages.json and yarn.lock into a Nix expression that downloads all the dependencies",
);

/**
 * Bash completion for Yarn
 */
export const yarn_bash_completion = mkPackage(
  nixRaw`pkgs.yarn-bash-completion`,
  "Bash completion for Yarn",
);

/**
 * Fast, reliable, and secure dependency management.
 */
export const yarn_berry = mkPackage(
  nixRaw`pkgs.yarn-berry`,
  "Fast, reliable, and secure dependency management.",
);

/**
 * Converts modern Yarn v2+ yarn.lock files into a Yarn v1 format
 */
export const yarn_lock_converter = mkPackage(
  nixRaw`pkgs.yarn-lock-converter`,
  "Converts modern Yarn v2+ yarn.lock files into a Yarn v1 format",
);

/**
 * Yet Another Robot Platform
 */
export const yarp = mkPackage(
  nixRaw`pkgs.yarp`,
  "Yet Another Robot Platform",
);

/**
 * Yet another rss reader
 */
export const yarr = mkPackage(
  nixRaw`pkgs.yarr`,
  "Yet another rss reader",
);

/**
 * Fork of the Yaru GTK theme
 */
export const yaru_remix_theme = mkPackage(
  nixRaw`pkgs.yaru-remix-theme`,
  "Fork of the Yaru GTK theme",
);

/**
 * Ubuntu community theme 'yaru' - default Ubuntu theme since 18.10
 */
export const yaru_theme = mkPackage(
  nixRaw`pkgs.yaru-theme`,
  "Ubuntu community theme 'yaru' - default Ubuntu theme since 18.10",
);

/**
 * Yet Another Serialization
 */
export const yas = mkPackage(
  nixRaw`pkgs.yas`,
  "Yet Another Serialization",
);

/**
 * Yet Another Screen Library (curses replacement for daemons and embedded apps)
 */
export const yascreen = mkPackage(
  nixRaw`pkgs.yascreen`,
  "Yet Another Screen Library (curses replacement for daemons and embedded apps)",
);

/**
 * Yet another POSIX-compliant shell
 */
export const yash = mkPackage(
  nixRaw`pkgs.yash`,
  "Yet another POSIX-compliant shell",
);

/**
 * Complete rewrite of the NASM assembler
 */
export const yasm = mkPackage(
  nixRaw`pkgs.yasm`,
  "Complete rewrite of the NASM assembler",
);

/**
 * A general-purpose console screen reader
 */
export const yasr = mkPackage(
  nixRaw`pkgs.yasr`,
  "A general-purpose console screen reader",
);

/**
 * Tool to audit AWS infrastructure for misconfiguration or potential security issues
 */
export const yatas = mkPackage(
  nixRaw`pkgs.yatas`,
  "Tool to audit AWS infrastructure for misconfiguration or potential security issues",
);

/**
 * Yet another telephony engine
 */
export const yate = mkPackage(
  nixRaw`pkgs.yate`,
  "Yet another telephony engine",
);

/**
 * Yet Another UPnP Portmapper
 */
export const yaup = mkPackage(
  nixRaw`pkgs.yaup`,
  "Yet Another UPnP Portmapper",
);

/**
 * A webserver for dynamic content written in Erlang.
 */
export const yaws = mkPackage(
  nixRaw`pkgs.yaws`,
  "A webserver for dynamic content written in Erlang.",
);

/**
 * Yet Another X Grabber script
 */
export const yaxg = mkPackage(
  nixRaw`pkgs.yaxg`,
  "Yet Another X Grabber script",
);

/**
 * Yet another youtube down loader
 */
export const yaydl = mkPackage(
  nixRaw`pkgs.yaydl`,
  "Yet another youtube down loader",
);

/**
 * Blazing fast terminal file manager written in Rust, based on async I/O
 */
export const yazi = mkPackage(
  nixRaw`pkgs.yazi`,
  "Blazing fast terminal file manager written in Rust, based on async I/O",
);

/**
 * A code-completion and comprehension server
 */
export const ycmd = mkPackage(
  nixRaw`pkgs.ycmd`,
  "A code-completion and comprehension server",
);

/**
 * Logging library for C applications
 */
export const yder = mkPackage(
  nixRaw`pkgs.yder`,
  "Logging library for C applications",
);

/**
 * Yet another command-line Youdao Chinese dictionary
 */
export const ydict = mkPackage(
  nixRaw`pkgs.ydict`,
  "Yet another command-line Youdao Chinese dictionary",
);

/**
 * View colored, incremental diff in workspace or from stdin with side by side and auto pager support (Was "cdiff")
 */
export const ydiff = mkPackage(
  nixRaw`pkgs.ydiff`,
  "View colored, incremental diff in workspace or from stdin with side by side and auto pager support (Was \"cdiff\")",
);

/**
 * Generic Linux command-line automation tool
 */
export const ydotool = mkPackage(
  nixRaw`pkgs.ydotool`,
  "Generic Linux command-line automation tool",
);

/**
 * An X window manager based on evilwm and aewm
 */
export const yeahwm = mkPackage(
  nixRaw`pkgs.yeahwm`,
  "An X window manager based on evilwm and aewm",
);

/**
 * A powerful desktop application that can be used to quickly and effectively generate high-quality diagrams
 */
export const yed = mkPackage(
  nixRaw`pkgs.yed`,
  "A powerful desktop application that can be used to quickly and effectively generate high-quality diagrams",
);

/**
 * gif effects CLI. single binary, no dependencies. linux, osx, windows. #1 workplace productivity booster. #yeetgif #eggplant #golang
 */
export const yeetgif = mkPackage(
  nixRaw`pkgs.yeetgif`,
  "gif effects CLI. single binary, no dependencies. linux, osx, windows. #1 workplace productivity booster. #yeetgif #eggplant #golang",
);

/**
 * The help viewer in Gnome
 */
export const yelp = mkPackage(
  nixRaw`pkgs.yelp`,
  "The help viewer in Gnome",
);

/**
 * Small programs that help you create, edit, manage, and publish your Mallard or DocBook documentation
 */
export const yelp_tools = mkPackage(
  nixRaw`pkgs.yelp-tools`,
  "Small programs that help you create, edit, manage, and publish your Mallard or DocBook documentation",
);

/**
 * A framework for layer 2 attacks
 */
export const yersinia = mkPackage(
  nixRaw`pkgs.yersinia`,
  "A framework for layer 2 attacks",
);

export const yeshup = mkPackage(
  nixRaw`pkgs.yeshup`,
  "",
);

/**
 * A good-looking third-party netease cloud music player
 */
export const yesplaymusic = mkPackage(
  nixRaw`pkgs.yesplaymusic`,
  "A good-looking third-party netease cloud music player",
);

/**
 * Terminal based YouTube player and downloader, forked from mps-youtube
 */
export const yewtube = mkPackage(
  nixRaw`pkgs.yewtube`,
  "Terminal based YouTube player and downloader, forked from mps-youtube",
);

/**
 * A functional scripting language written in rust
 */
export const yex_lang = mkPackage(
  nixRaw`pkgs.yex-lang`,
  "A functional scripting language written in rust",
);

/**
 * An experiment in scalable routing as an encrypted IPv6 overlay network
 */
export const yggdrasil = mkPackage(
  nixRaw`pkgs.yggdrasil`,
  "An experiment in scalable routing as an encrypted IPv6 overlay network",
);

/**
 * A high-performance theorem prover and SMT solver
 */
export const yices = mkPackage(
  nixRaw`pkgs.yices`,
  "A high-performance theorem prover and SMT solver",
);

/**
 * Convert YAML <=> TOML <=> JSON <=> HCL
 */
export const yj = mkPackage(
  nixRaw`pkgs.yj`,
  "Convert YAML <=> TOML <=> JSON <=> HCL",
);

/**
 * Downloads videos from Yle (Finnish Broadcasting Company) servers
 */
export const yle_dl = mkPackage(
  nixRaw`pkgs.yle-dl`,
  "Downloads videos from Yle (Finnish Broadcasting Company) servers",
);

/**
 * Standalone MPD Web GUI written in C, utilizing Websockets and Bootstrap/JS
 */
export const ympd = mkPackage(
  nixRaw`pkgs.ympd`,
  "Standalone MPD Web GUI written in C, utilizing Websockets and Bootstrap/JS",
);

/**
 * GTK client for Music Player Daemon (MPD)
 */
export const ymuse = mkPackage(
  nixRaw`pkgs.ymuse`,
  "GTK client for Music Player Daemon (MPD)",
);

/**
 * CLI tool for running Yeoman generators
 */
export const yo = mkPackage(
  nixRaw`pkgs.yo`,
  "CLI tool for running Yeoman generators",
);

/**
 * Provides small set of data analysis (specifically histogramming) classes
 */
export const yoda = mkPackage(
  nixRaw`pkgs.yoda`,
  "Provides small set of data analysis (specifically histogramming) classes",
);

/**
 * Provides small set of data analysis (specifically histogramming) classes
 */
export const yoda_with_root = mkPackage(
  nixRaw`pkgs.yoda-with-root`,
  "Provides small set of data analysis (specifically histogramming) classes",
);

/**
 * A package that implements a pre-document language and tools to process it
 */
export const yodl = mkPackage(
  nixRaw`pkgs.yodl`,
  "A package that implements a pre-document language and tools to process it",
);

/**
 * A network library for client/server games with dedicated servers
 */
export const yojimbo = mkPackage(
  nixRaw`pkgs.yojimbo`,
  "A network library for client/server games with dedicated servers",
);

/**
 * A command line oriented, sqlite powered, todo-list
 */
export const yokadi = mkPackage(
  nixRaw`pkgs.yokadi`,
  "A command line oriented, sqlite powered, todo-list",
);

/**
 * Extensible auto-tagger for your IaC files. The ultimate way to link entities in the cloud back to the codified resource which created it.
 */
export const yor = mkPackage(
  nixRaw`pkgs.yor`,
  "Extensible auto-tagger for your IaC files. The ultimate way to link entities in the cloud back to the codified resource which created it.",
);

/**
 * High quality software synthesizer based on ZynAddSubFX
 */
export const yoshimi = mkPackage(
  nixRaw`pkgs.yoshimi`,
  "High quality software synthesizer based on ZynAddSubFX",
);

/**
 * Open RTL synthesis framework and tools
 */
export const yosys = mkPackage(
  nixRaw`pkgs.yosys`,
  "Open RTL synthesis framework and tools",
);

/**
 * Bluespec plugin for Yosys
 */
export const yosys_bluespec = mkPackage(
  nixRaw`pkgs.yosys-bluespec`,
  "Bluespec plugin for Yosys",
);

/**
 * GHDL plugin for Yosys
 */
export const yosys_ghdl = mkPackage(
  nixRaw`pkgs.yosys-ghdl`,
  "GHDL plugin for Yosys",
);

/**
 * SystemVerilog support plugin for Yosys
 */
export const yosys_synlig = mkPackage(
  nixRaw`pkgs.yosys-synlig`,
  "SystemVerilog support plugin for Yosys",
);

/**
 * A tiny command line utility to download media contents from the web
 */
export const you_get = mkPackage(
  nixRaw`pkgs.you-get`,
  "A tiny command line utility to download media contents from the web",
);

/**
 * A container runtime written in Rust
 */
export const youki = mkPackage(
  nixRaw`pkgs.youki`,
  "A container runtime written in Rust",
);

/**
 * Your-editor (yed) is a small and simple terminal editor core that is meant to be extended through a powerful plugin architecture
 */
export const your_editor = mkPackage(
  nixRaw`pkgs.your-editor`,
  "Your-editor (yed) is a small and simple terminal editor core that is meant to be extended through a powerful plugin architecture",
);

/**
 * Issue tracking and project management tool for developers
 */
export const youtrack = mkPackage(
  nixRaw`pkgs.youtrack`,
  "Issue tracking and project management tool for developers",
);

/**
 * Command-line tool to download videos from YouTube.com and other sites
 */
export const youtube_dl = mkPackage(
  nixRaw`pkgs.youtube-dl`,
  "Command-line tool to download videos from YouTube.com and other sites",
);

/**
 * Command-line tool to download videos from YouTube.com and other sites
 */
export const youtube_dl_light = mkPackage(
  nixRaw`pkgs.youtube-dl-light`,
  "Command-line tool to download videos from YouTube.com and other sites",
);

/**
 * Electron wrapper around YouTube Music
 */
export const youtube_music = mkPackage(
  nixRaw`pkgs.youtube-music`,
  "Electron wrapper around YouTube Music",
);

/**
 * An aesthetically pleasing YouTube TUI written in Rust
 */
export const youtube_tui = mkPackage(
  nixRaw`pkgs.youtube-tui`,
  "An aesthetically pleasing YouTube TUI written in Rust",
);

/**
 * A lightweight application for searching and streaming videos from YouTube
 */
export const youtube_viewer = mkPackage(
  nixRaw`pkgs.youtube-viewer`,
  "A lightweight application for searching and streaming videos from YouTube",
);

/**
 * Command-line YAML/XML/TOML processor - jq wrapper for YAML, XML, TOML documents
 */
export const yq = mkPackage(
  nixRaw`pkgs.yq`,
  "Command-line YAML/XML/TOML processor - jq wrapper for YAML, XML, TOML documents",
);

/**
 * Portable command-line YAML processor
 */
export const yq_go = mkPackage(
  nixRaw`pkgs.yq-go`,
  "Portable command-line YAML processor",
);

/**
 * Yamagi Quake II client
 */
export const yquake2 = mkPackage(
  nixRaw`pkgs.yquake2`,
  "Yamagi Quake II client",
);

/**
 * Yamagi Quake II with all add-on games
 */
export const yquake2_all_games = mkPackage(
  nixRaw`pkgs.yquake2-all-games`,
  "Yamagi Quake II with all add-on games",
);

/**
 * 'Capture The Flag' for Yamagi Quake II
 */
export const yquake2_ctf = mkPackage(
  nixRaw`pkgs.yquake2-ctf`,
  "'Capture The Flag' for Yamagi Quake II",
);

/**
 * 'Ground Zero' for Yamagi Quake II
 */
export const yquake2_ground_zero = mkPackage(
  nixRaw`pkgs.yquake2-ground-zero`,
  "'Ground Zero' for Yamagi Quake II",
);

/**
 * 'The Reckoning' for Yamagi Quake II
 */
export const yquake2_the_reckoning = mkPackage(
  nixRaw`pkgs.yquake2-the-reckoning`,
  "'The Reckoning' for Yamagi Quake II",
);

/**
 * Cjdns swiss army knife
 */
export const yrd = mkPackage(
  nixRaw`pkgs.yrd`,
  "Cjdns swiss army knife",
);

/**
 * Command-line tool to download videos from YouTube.com and other sites (youtube-dl fork)
 */
export const yt_dlp = mkPackage(
  nixRaw`pkgs.yt-dlp`,
  "Command-line tool to download videos from YouTube.com and other sites (youtube-dl fork)",
);

/**
 * Command-line tool to download videos from YouTube.com and other sites (youtube-dl fork)
 */
export const yt_dlp_light = mkPackage(
  nixRaw`pkgs.yt-dlp-light`,
  "Command-line tool to download videos from YouTube.com and other sites (youtube-dl fork)",
);

/**
 * A terminal based talk client
 */
export const ytalk = mkPackage(
  nixRaw`pkgs.ytalk`,
  "A terminal based talk client",
);

/**
 * Garbage Youtube livestream downloader
 */
export const ytarchive = mkPackage(
  nixRaw`pkgs.ytarchive`,
  "Garbage Youtube livestream downloader",
);

/**
 * A tool to cast YouTube videos from the command-line
 */
export const ytcast = mkPackage(
  nixRaw`pkgs.ytcast`,
  "A tool to cast YouTube videos from the command-line",
);

/**
 * Command Line tool to keep track of your favourite YouTube channels without signing up for a Google account
 */
export const ytcc = mkPackage(
  nixRaw`pkgs.ytcc`,
  "Command Line tool to keep track of your favourite YouTube channels without signing up for a Google account",
);

/**
 * A posix script to find and watch youtube videos from the terminal
 */
export const ytfzf = mkPackage(
  nixRaw`pkgs.ytfzf`,
  "A posix script to find and watch youtube videos from the terminal",
);

/**
 * A Desktop App for YouTube Music
 */
export const ytmdesktop = mkPackage(
  nixRaw`pkgs.ytmdesktop`,
  "A Desktop App for YouTube Music",
);

/**
 * YouTube Music Downloader
 */
export const ytmdl = mkPackage(
  nixRaw`pkgs.ytmdl`,
  "YouTube Music Downloader",
);

/**
 * A curses-based file manager similar to DOS Xtree(TM)
 */
export const ytree = mkPackage(
  nixRaw`pkgs.ytree`,
  "A curses-based file manager similar to DOS Xtree(TM)",
);

/**
 * YAML templating tool that allows configuration of complex software via reusable templates with user-provided values
 */
export const ytt = mkPackage(
  nixRaw`pkgs.ytt`,
  "YAML templating tool that allows configuration of complex software via reusable templates with user-provided values",
);

/**
 * Youtube client in terminal for music
 */
export const ytui_music = mkPackage(
  nixRaw`pkgs.ytui-music`,
  "Youtube client in terminal for music",
);

/**
 * Yubico PAM module
 */
export const yubico_pam = mkPackage(
  nixRaw`pkgs.yubico-pam`,
  "Yubico PAM module",
);

        /**
         * Used for interacting with the Privilege and Identification Card (PIV)
application on a YubiKey

         */
export const yubico_piv_tool = mkPackage(
  nixRaw`pkgs.yubico-piv-tool`,
  "Used for interacting with the Privilege and Identification Card (PIV)\napplication on a YubiKey\n",
);

/**
 * yubihsm-connector performs the communication between the YubiHSM 2 and applications that use it
 */
export const yubihsm_connector = mkPackage(
  nixRaw`pkgs.yubihsm-connector`,
  "yubihsm-connector performs the communication between the YubiHSM 2 and applications that use it",
);

/**
 * yubihsm-shell and libyubihsm
 */
export const yubihsm_shell = mkPackage(
  nixRaw`pkgs.yubihsm-shell`,
  "yubihsm-shell and libyubihsm",
);

/**
 * A seamless ssh-agent for YubiKeys
 */
export const yubikey_agent = mkPackage(
  nixRaw`pkgs.yubikey-agent`,
  "A seamless ssh-agent for YubiKeys",
);

/**
 * Command line tool for configuring any YubiKey over all USB transports
 */
export const yubikey_manager = mkPackage(
  nixRaw`pkgs.yubikey-manager`,
  "Command line tool for configuring any YubiKey over all USB transports",
);

/**
 * Previous release of command line tool for configuring any YubiKey over all USB transports
 */
export const yubikey_manager4 = mkPackage(
  nixRaw`pkgs.yubikey-manager4`,
  "Previous release of command line tool for configuring any YubiKey over all USB transports",
);

/**
 * Cross-platform application for configuring any YubiKey over all USB interfaces
 */
export const yubikey_manager_qt = mkPackage(
  nixRaw`pkgs.yubikey-manager-qt`,
  "Cross-platform application for configuring any YubiKey over all USB interfaces",
);

/**
 * A library and command line tool to personalize YubiKeys
 */
export const yubikey_personalization = mkPackage(
  nixRaw`pkgs.yubikey-personalization`,
  "A library and command line tool to personalize YubiKeys",
);

/**
 * A QT based cross-platform utility designed to facilitate reconfiguration of the Yubikey
 */
export const yubikey_personalization_gui = mkPackage(
  nixRaw`pkgs.yubikey-personalization-gui`,
  "A QT based cross-platform utility designed to facilitate reconfiguration of the Yubikey",
);

/**
 * A tool to detect when your YubiKey is waiting for a touch (to send notification or display a visual indicator on the screen).
 */
export const yubikey_touch_detector = mkPackage(
  nixRaw`pkgs.yubikey-touch-detector`,
  "A tool to detect when your YubiKey is waiting for a touch (to send notification or display a visual indicator on the screen).",
);

/**
 * Yubico Authenticator for Desktop
 */
export const yubioath_flutter = mkPackage(
  nixRaw`pkgs.yubioath-flutter`,
  "Yubico Authenticator for Desktop",
);

/**
 * A JavaScript and CSS minifier
 */
export const yuicompressor = mkPackage(
  nixRaw`pkgs.yuicompressor`,
  "A JavaScript and CSS minifier",
);

/**
 * A Bilibili downloader
 */
export const yutto = mkPackage(
  nixRaw`pkgs.yutto`,
  "A Bilibili downloader",
);

/**
 * YUV Viewer and Analysis Tool
 */
export const yuview = mkPackage(
  nixRaw`pkgs.yuview`,
  "YUV Viewer and Analysis Tool",
);

/**
 * The early-access branch of an experimental Nintendo Switch emulator written in C++
 */
export const yuzu_early_access = mkPackage(
  nixRaw`pkgs.yuzu-early-access`,
  "The early-access branch of an experimental Nintendo Switch emulator written in C++",
);

/**
 * The mainline branch of an experimental Nintendo Switch emulator written in C++
 */
export const yuzu_mainline = mkPackage(
  nixRaw`pkgs.yuzu-mainline`,
  "The mainline branch of an experimental Nintendo Switch emulator written in C++",
);

/**
 * YAML Data Extraction Tool
 */
export const yx = mkPackage(
  nixRaw`pkgs.yx`,
  "YAML Data Extraction Tool",
);

/**
 * The fastest JSON library in C
 */
export const yyjson = mkPackage(
  nixRaw`pkgs.yyjson`,
  "The fastest JSON library in C",
);

/**
 * A high-performance theorem prover and SMT solver
 */
export const z3 = mkPackage(
  nixRaw`pkgs.z3`,
  "A high-performance theorem prover and SMT solver",
);

/**
 * A high-performance theorem prover and SMT solver
 */
export const z3_4_11 = mkPackage(
  nixRaw`pkgs.z3_4_11`,
  "A high-performance theorem prover and SMT solver",
);

/**
 * A high-performance theorem prover and SMT solver
 */
export const z3_4_12 = mkPackage(
  nixRaw`pkgs.z3_4_12`,
  "A high-performance theorem prover and SMT solver",
);

/**
 * A high-performance theorem prover and SMT solver
 */
export const z3_4_8 = mkPackage(
  nixRaw`pkgs.z3_4_8`,
  "A high-performance theorem prover and SMT solver",
);

/**
 * A high-performance theorem prover and SMT solver
 */
export const z3_4_8_5 = mkPackage(
  nixRaw`pkgs.z3_4_8_5`,
  "A high-performance theorem prover and SMT solver",
);

/**
 * TPTP wrapper for Z3 prover
 */
export const z3_tptp = mkPackage(
  nixRaw`pkgs.z3-tptp`,
  "TPTP wrapper for Z3 prover",
);

/**
 * z80 Development Kit
 */
export const z88dk = mkPackage(
  nixRaw`pkgs.z88dk`,
  "z80 Development Kit",
);

/**
 * A new cd command that helps you navigate faster by learning your habits
 */
export const z_lua = mkPackage(
  nixRaw`pkgs.z-lua`,
  "A new cd command that helps you navigate faster by learning your habits",
);

/**
 * Command-line interface for Zabbix
 */
export const zabbix_cli = mkPackage(
  nixRaw`pkgs.zabbix-cli`,
  "Command-line interface for Zabbix",
);

/**
 * Most effective way for operating in Zabbix Server
 */
export const zabbixctl = mkPackage(
  nixRaw`pkgs.zabbixctl`,
  "Most effective way for operating in Zabbix Server",
);

/**
 * Icon pack flat with light colors
 */
export const zafiro_icons = mkPackage(
  nixRaw`pkgs.zafiro-icons`,
  "Icon pack flat with light colors",
);

/**
 * Read stdin and corrupt it with combining diacritics
 */
export const zalgo = mkPackage(
  nixRaw`pkgs.zalgo`,
  "Read stdin and corrupt it with combining diacritics",
);

/**
 * A collection of LV2/LADSPA/VST/JACK audio plugins by ZamAudio
 */
export const zam_plugins = mkPackage(
  nixRaw`pkgs.zam-plugins`,
  "A collection of LV2/LADSPA/VST/JACK audio plugins by ZamAudio",
);

/**
 * Zammad, a web-based, open source user support/ticketing solution.
 */
export const zammad = mkPackage(
  nixRaw`pkgs.zammad`,
  "Zammad, a web-based, open source user support/ticketing solution.",
);

/**
 * Multiplayer oriented port, based off Skulltag, for Doom and Doom II by id Software
 */
export const zandronum = mkPackage(
  nixRaw`pkgs.zandronum`,
  "Multiplayer oriented port, based off Skulltag, for Doom and Doom II by id Software",
);

/**
 * Multiplayer oriented port, based off Skulltag, for Doom and Doom II by id Software
 */
export const zandronum_server = mkPackage(
  nixRaw`pkgs.zandronum-server`,
  "Multiplayer oriented port, based off Skulltag, for Doom and Doom II by id Software",
);

/**
 * Java application for web penetration testing
 */
export const zap = mkPackage(
  nixRaw`pkgs.zap`,
  "Java application for web penetration testing",
);

/**
 * File archive format supporting random-access reads
 */
export const zarchive = mkPackage(
  nixRaw`pkgs.zarchive`,
  "File archive format supporting random-access reads",
);

/**
 * DevSecOps for Air Gap & Limited-Connection Systems. https://zarf.dev
 */
export const zarf = mkPackage(
  nixRaw`pkgs.zarf`,
  "DevSecOps for Air Gap & Limited-Connection Systems. https://zarf.dev",
);

/**
 * Z80 / 8080 / Z180 assembler (for unix-style OS)
 */
export const zasm = mkPackage(
  nixRaw`pkgs.zasm`,
  "Z80 / 8080 / Z180 assembler (for unix-style OS)",
);

/**
 * A highly customizable and functional PDF viewer
 */
export const zathura = mkPackage(
  nixRaw`pkgs.zathura`,
  "A highly customizable and functional PDF viewer",
);

/**
 * A puzzle game about arranging balls in triplets, like Luxor, Zuma, or Puzzle Bobble
 */
export const zaz = mkPackage(
  nixRaw`pkgs.zaz`,
  "A puzzle game about arranging balls in triplets, like Luxor, Zuma, or Puzzle Bobble",
);

/**
 * A versatile deduplicating backup tool
 */
export const zbackup = mkPackage(
  nixRaw`pkgs.zbackup`,
  "A versatile deduplicating backup tool",
);

/**
 * Bar code reader
 */
export const zbar = mkPackage(
  nixRaw`pkgs.zbar`,
  "Bar code reader",
);

/**
 * The command line interface to interact with Camunda 8 and Zeebe
 */
export const zbctl = mkPackage(
  nixRaw`pkgs.zbctl`,
  "The command line interface to interact with Camunda 8 and Zeebe",
);

/**
 * Peer-to-peer, anonymous electronic cash system
 */
export const zcash = mkPackage(
  nixRaw`pkgs.zcash`,
  "Peer-to-peer, anonymous electronic cash system",
);

/**
 * A zero-configuration fan daemon for ThinkPads
 */
export const zcfan = mkPackage(
  nixRaw`pkgs.zcfan`,
  "A zero-configuration fan daemon for ThinkPads",
);

/**
 * Accelerated SAT Solver from Princeton
 */
export const zchaff = mkPackage(
  nixRaw`pkgs.zchaff`,
  "Accelerated SAT Solver from Princeton",
);

/**
 * File format designed for highly efficient deltas while maintaining good compression
 */
export const zchunk = mkPackage(
  nixRaw`pkgs.zchunk`,
  "File format designed for highly efficient deltas while maintaining good compression",
);

/**
 * Firmware for the ZyDAS ZD1211(b) 802.11a/b/g USB WLAN chip
 */
export const zd1211fw = mkPackage(
  nixRaw`pkgs.zd1211fw`,
  "Firmware for the ZyDAS ZD1211(b) 802.11a/b/g USB WLAN chip",
);

/**
 * ZDoom's internal node builder for DOOM maps
 */
export const zdbsp = mkPackage(
  nixRaw`pkgs.zdbsp`,
  "ZDoom's internal node builder for DOOM maps",
);

export const zdelta = mkPackage(
  nixRaw`pkgs.zdelta`,
  "",
);

/**
 * CLI DNS lookup tool
 */
export const zdns = mkPackage(
  nixRaw`pkgs.zdns`,
  "CLI DNS lookup tool",
);

/**
 * Enhanced port of the official DOOM source code
 */
export const zdoom = mkPackage(
  nixRaw`pkgs.zdoom`,
  "Enhanced port of the official DOOM source code",
);

/**
 * A simple offline API documentation browser
 */
export const zeal = mkPackage(
  nixRaw`pkgs.zeal`,
  "A simple offline API documentation browser",
);

/**
 * A simple offline API documentation browser
 */
export const zeal_qt5 = mkPackage(
  nixRaw`pkgs.zeal-qt5`,
  "A simple offline API documentation browser",
);

/**
 * A simple offline API documentation browser
 */
export const zeal_qt6 = mkPackage(
  nixRaw`pkgs.zeal-qt6`,
  "A simple offline API documentation browser",
);

/**
 * A fully featured shielded wallet for Zcash
 */
export const zecwallet_lite = mkPackage(
  nixRaw`pkgs.zecwallet-lite`,
  "A fully featured shielded wallet for Zcash",
);

/**
 * A novel data lake based on super-structured data
 */
export const zed = mkPackage(
  nixRaw`pkgs.zed`,
  "A novel data lake based on super-structured data",
);

/**
 * A modern text editor for the terminal written in Rust
 */
export const zee = mkPackage(
  nixRaw`pkgs.zee`,
  "A modern text editor for the terminal written in Rust",
);

/**
 * Network analysis framework much different from a typical IDS
 */
export const zeek = mkPackage(
  nixRaw`pkgs.zeek`,
  "Network analysis framework much different from a typical IDS",
);

/**
 * A Zeek script formatter and analyzer
 */
export const zeekscript = mkPackage(
  nixRaw`pkgs.zeekscript`,
  "A Zeek script formatter and analyzer",
);

/**
 * Raku / Perl6 Module Management
 */
export const zef = mkPackage(
  nixRaw`pkgs.zef`,
  "Raku / Perl6 Module Management",
);

/**
 * An open source math plotter
 */
export const zegrapher = mkPackage(
  nixRaw`pkgs.zegrapher`,
  "An open source math plotter",
);

/**
 * A service which logs the users’s activities and events
 */
export const zeitgeist = mkPackage(
  nixRaw`pkgs.zeitgeist`,
  "A service which logs the users’s activities and events",
);

/**
 * A terminal workspace with batteries included
 */
export const zellij = mkPackage(
  nixRaw`pkgs.zellij`,
  "A terminal workspace with batteries included",
);

/**
 * Sort of like top or htop but with zoom-able charts, network, and disk usage
 */
export const zenith = mkPackage(
  nixRaw`pkgs.zenith`,
  "Sort of like top or htop but with zoom-able charts, network, and disk usage",
);

/**
 * Sort of like top or htop but with zoom-able charts, network, and disk usage, and NVIDIA GPU usage
 */
export const zenith_nvidia = mkPackage(
  nixRaw`pkgs.zenith-nvidia`,
  "Sort of like top or htop but with zoom-able charts, network, and disk usage, and NVIDIA GPU usage",
);

/**
 * Monitoring software for AMD Zen-based CPUs
 */
export const zenmonitor = mkPackage(
  nixRaw`pkgs.zenmonitor`,
  "Monitoring software for AMD Zen-based CPUs",
);

/**
 * Linux utility for Ryzen processors and motherboards
 */
export const zenstates = mkPackage(
  nixRaw`pkgs.zenstates`,
  "Linux utility for Ryzen processors and motherboards",
);

/**
 * A free, open-source game of ancient warfare
 */
export const zeroad = mkPackage(
  nixRaw`pkgs.zeroad`,
  "A free, open-source game of ancient warfare",
);

/**
 * A client side encrypted pastebin
 */
export const zerobin = mkPackage(
  nixRaw`pkgs.zerobin`,
  "A client side encrypted pastebin",
);

/**
 * The internet communications engine
 */
export const zeroc_ice = mkPackage(
  nixRaw`pkgs.zeroc-ice`,
  "The internet communications engine",
);

/**
 * The internet communications engine
 */
export const zeroc_ice_cpp11 = mkPackage(
  nixRaw`pkgs.zeroc-ice-cpp11`,
  "The internet communications engine",
);

/**
 * Zero free blocks from ext2, ext3 and ext4 file-systems
 */
export const zerofree = mkPackage(
  nixRaw`pkgs.zerofree`,
  "Zero free blocks from ext2, ext3 and ext4 file-systems",
);

/**
 * The Intelligent Transport Layer
 */
export const zeromq = mkPackage(
  nixRaw`pkgs.zeromq`,
  "The Intelligent Transport Layer",
);

/**
 * The Intelligent Transport Layer
 */
export const zeromq4 = mkPackage(
  nixRaw`pkgs.zeromq4`,
  "The Intelligent Transport Layer",
);

/**
 * Decentralized websites using Bitcoin crypto and BitTorrent network
 */
export const zeronet = mkPackage(
  nixRaw`pkgs.zeronet`,
  "Decentralized websites using Bitcoin crypto and BitTorrent network",
);

/**
 * A fork/continuation of the ZeroNet project
 */
export const zeronet_conservancy = mkPackage(
  nixRaw`pkgs.zeronet-conservancy`,
  "A fork/continuation of the ZeroNet project",
);

/**
 * Create flat virtual Ethernet networks of almost unlimited size
 */
export const zerotierone = mkPackage(
  nixRaw`pkgs.zerotierone`,
  "Create flat virtual Ethernet networks of almost unlimited size",
);

/**
 *  ZX Second-Emulator And Released for UniX
 */
export const zesarux = mkPackage(
  nixRaw`pkgs.zesarux`,
  " ZX Second-Emulator And Released for UniX",
);

/**
 * CLI utility to find the union, intersection, set difference, etc of files considered as sets of lines
 */
export const zet = mkPackage(
  nixRaw`pkgs.zet`,
  "CLI utility to find the union, intersection, set difference, etc of files considered as sets of lines",
);

/**
 * A markdown editor for writing academic texts and taking notes
 */
export const zettlr = mkPackage(
  nixRaw`pkgs.zettlr`,
  "A markdown editor for writing academic texts and taking notes",
);

/**
 * A markdown editor for writing academic texts and taking notes
 */
export const zettlr_beta = mkPackage(
  nixRaw`pkgs.zettlr-beta`,
  "A markdown editor for writing academic texts and taking notes",
);

/**
 * The swiss army knife for puredata
 */
export const zexy = mkPackage(
  nixRaw`pkgs.zexy`,
  "The swiss army knife for puredata",
);

/**
 * Utility program to automatically encrypt outgoing emails with GPG
 */
export const zeyple = mkPackage(
  nixRaw`pkgs.zeyple`,
  "Utility program to automatically encrypt outgoing emails with GPG",
);

/**
 * A commandline fuzzy finder that prioritizes matches on filenames
 */
export const zf = mkPackage(
  nixRaw`pkgs.zf`,
  "A commandline fuzzy finder that prioritizes matches on filenames",
);

/**
 * Library for random-access compression of floating-point arrays
 */
export const zfp = mkPackage(
  nixRaw`pkgs.zfp`,
  "Library for random-access compression of floating-point arrays",
);

/**
 * ZFS Filesystem Linux Kernel module
 */
export const zfs = mkPackage(
  nixRaw`pkgs.zfs`,
  "ZFS Filesystem Linux Kernel module",
);

/**
 * ZFS Filesystem Linux Kernel module
 */
export const zfsStable = mkPackage(
  nixRaw`pkgs.zfsStable`,
  "ZFS Filesystem Linux Kernel module",
);

/**
 * ZFS Filesystem Linux Kernel module
 */
export const zfsUnstable = mkPackage(
  nixRaw`pkgs.zfsUnstable`,
  "ZFS Filesystem Linux Kernel module",
);

/**
 * ZFS backup, replicationand snapshot tool
 */
export const zfs_autobackup = mkPackage(
  nixRaw`pkgs.zfs-autobackup`,
  "ZFS backup, replicationand snapshot tool",
);

/**
 * Remove snapshots from one or more zpools that match given criteria
 */
export const zfs_prune_snapshots = mkPackage(
  nixRaw`pkgs.zfs-prune-snapshots`,
  "Remove snapshots from one or more zpools that match given criteria",
);

/**
 * ZFS Snapshot Replication
 */
export const zfs_replicate = mkPackage(
  nixRaw`pkgs.zfs-replicate`,
  "ZFS Snapshot Replication",
);

/**
 * Backup ZFS snapshots to cloud storage such as Google, Amazon, Azure, etc
 */
export const zfsbackup = mkPackage(
  nixRaw`pkgs.zfsbackup`,
  "Backup ZFS snapshots to cloud storage such as Google, Amazon, Azure, etc",
);

/**
 * A portable, performant script to make rolling ZFS snapshots easy
 */
export const zfsnap = mkPackage(
  nixRaw`pkgs.zfsnap`,
  "A portable, performant script to make rolling ZFS snapshots easy",
);

/**
 * OpenSolaris-compatible auto-snapshotting script for ZFS
 */
export const zfstools = mkPackage(
  nixRaw`pkgs.zfstools`,
  "OpenSolaris-compatible auto-snapshotting script for ZFS",
);

/**
 * fetch top for gen Z with X written by bubbletea enjoyer
 */
export const zfxtop = mkPackage(
  nixRaw`pkgs.zfxtop`,
  "fetch top for gen Z with X written by bubbletea enjoyer",
);

/**
 * Web application scanner
 */
export const zgrab2 = mkPackage(
  nixRaw`pkgs.zgrab2`,
  "Web application scanner",
);

/**
 * GraphViz graph viewer/navigator
 */
export const zgrviewer = mkPackage(
  nixRaw`pkgs.zgrviewer`,
  "GraphViz graph viewer/navigator",
);

/**
 * Picture viewer with a thumbnail-based selector
 */
export const zgv = mkPackage(
  nixRaw`pkgs.zgv`,
  "Picture viewer with a thumbnail-based selector",
);

/**
 * A Swiss Army Knife for Zsh - Unix Shell
 */
export const zi = mkPackage(
  nixRaw`pkgs.zi`,
  "A Swiss Army Knife for Zsh - Unix Shell",
);

/**
 * General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software
 */
export const zig = mkPackage(
  nixRaw`pkgs.zig`,
  "General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software",
);

/**
 * General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software
 */
export const zig_0_10 = mkPackage(
  nixRaw`pkgs.zig_0_10`,
  "General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software",
);

/**
 * General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software
 */
export const zig_0_11 = mkPackage(
  nixRaw`pkgs.zig_0_11`,
  "General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software",
);

/**
 * General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software
 */
export const zig_0_9 = mkPackage(
  nixRaw`pkgs.zig_0_9`,
  "General-purpose programming language and toolchain for maintaining robust, optimal, and reusable software",
);

/**
 * Shell completions for the Zig compiler
 */
export const zig_shell_completions = mkPackage(
  nixRaw`pkgs.zig-shell-completions`,
  "Shell completions for the Zig compiler",
);

/**
 * Zigbee to MQTT bridge using zigbee-shepherd
 */
export const zigbee2mqtt = mkPackage(
  nixRaw`pkgs.zigbee2mqtt`,
  "Zigbee to MQTT bridge using zigbee-shepherd",
);

/**
 * Zile Implements Lua Editors
 */
export const zile = mkPackage(
  nixRaw`pkgs.zile`,
  "Zile Implements Lua Editors",
);

/**
 * Zilla Slab fonts
 */
export const zilla_slab = mkPackage(
  nixRaw`pkgs.zilla-slab`,
  "Zilla Slab fonts",
);

/**
 * A desktop wiki
 */
export const zim = mkPackage(
  nixRaw`pkgs.zim`,
  "A desktop wiki",
);

/**
 * Various ZIM command line tools
 */
export const zim_tools = mkPackage(
  nixRaw`pkgs.zim-tools`,
  "Various ZIM command line tools",
);

/**
 * The Zsh configuration framework with blazing speed and modular extensions
 */
export const zimfw = mkPackage(
  nixRaw`pkgs.zimfw`,
  "The Zsh configuration framework with blazing speed and modular extensions",
);

/**
 * Scaling, colorspace conversion and dithering library
 */
export const zimg = mkPackage(
  nixRaw`pkgs.zimg`,
  "Scaling, colorspace conversion and dithering library",
);

/**
 * Library for reading and writing ZIM files
 */
export const zimlib = mkPackage(
  nixRaw`pkgs.zimlib`,
  "Library for reading and writing ZIM files",
);

/**
 * A lightweight alternative to elasticsearch that requires minimal resources, written in Go
 */
export const zincsearch = mkPackage(
  nixRaw`pkgs.zincsearch`,
  "A lightweight alternative to elasticsearch that requires minimal resources, written in Go",
);

/**
 * A simple and opinionated tool to build your own magazine
 */
export const zine = mkPackage(
  nixRaw`pkgs.zine`,
  "A simple and opinionated tool to build your own magazine",
);

/**
 * Flexible zsh plugin manager
 */
export const zinit = mkPackage(
  nixRaw`pkgs.zinit`,
  "Flexible zsh plugin manager",
);

/**
 * Online hand recognition system with machine learning
 */
export const zinnia = mkPackage(
  nixRaw`pkgs.zinnia`,
  "Online hand recognition system with machine learning",
);

/**
 * A barcode generating tool and library
 */
export const zint = mkPackage(
  nixRaw`pkgs.zint`,
  "A barcode generating tool and library",
);

/**
 * Compressor/archiver for creating and modifying zipfiles
 */
export const zip = mkPackage(
  nixRaw`pkgs.zip`,
  "Compressor/archiver for creating and modifying zipfiles",
);

/**
 * Zipkin distributed tracing system
 */
export const zipkin = mkPackage(
  nixRaw`pkgs.zipkin`,
  "Zipkin distributed tracing system",
);

/**
 * Connect additional ALSA devices to JACK
 */
export const zita_ajbridge = mkPackage(
  nixRaw`pkgs.zita-ajbridge`,
  "Connect additional ALSA devices to JACK",
);

/**
 * The successor of clalsadrv, provides easy access to ALSA PCM devices
 */
export const zita_alsa_pcmi = mkPackage(
  nixRaw`pkgs.zita-alsa-pcmi`,
  "The successor of clalsadrv, provides easy access to ALSA PCM devices",
);

/**
 * Autotuner Jack application to correct the pitch of vocal tracks
 */
export const zita_at1 = mkPackage(
  nixRaw`pkgs.zita-at1`,
  "Autotuner Jack application to correct the pitch of vocal tracks",
);

/**
 * Convolution library by Fons Adriaensen
 */
export const zita_convolver = mkPackage(
  nixRaw`pkgs.zita-convolver`,
  "Convolution library by Fons Adriaensen",
);

/**
 * command line Jack clients to transmit full quality multichannel audio over a local IP network
 */
export const zita_njbridge = mkPackage(
  nixRaw`pkgs.zita-njbridge`,
  "command line Jack clients to transmit full quality multichannel audio over a local IP network",
);

/**
 * Resample library by Fons Adriaensen
 */
export const zita_resampler = mkPackage(
  nixRaw`pkgs.zita-resampler`,
  "Resample library by Fons Adriaensen",
);

/**
 * Identity and access management platform
 */
export const zitadel = mkPackage(
  nixRaw`pkgs.zitadel`,
  "Identity and access management platform",
);

/**
 * Helper tools for zitadel
 */
export const zitadel_tools = mkPackage(
  nixRaw`pkgs.zitadel-tools`,
  "Helper tools for zitadel",
);

/**
 * A lightweight C99 portability and data structure library
 */
export const zix = mkPackage(
  nixRaw`pkgs.zix`,
  "A lightweight C99 portability and data structure library",
);

/**
 * A zettelkasten plain text note-taking assistant
 */
export const zk = mkPackage(
  nixRaw`pkgs.zk`,
  "A zettelkasten plain text note-taking assistant",
);

/**
 * A powerful & scriptable shell for Apache ZooKeeper
 */
export const zk_shell = mkPackage(
  nixRaw`pkgs.zk-shell`,
  "A powerful & scriptable shell for Apache ZooKeeper",
);

/**
 * Java serialization protocol analysis tool
 */
export const zkar = mkPackage(
  nixRaw`pkgs.zkar`,
  "Java serialization protocol analysis tool",
);

export const zkfuse = mkPackage(
  nixRaw`pkgs.zkfuse`,
  "",
);

/**
 * A small tool to display Znodes in Zookeeper in tree structure.
 */
export const zktree = mkPackage(
  nixRaw`pkgs.zktree`,
  "A small tool to display Znodes in Zookeeper in tree structure.",
);

/**
 * A faster version of Apple's linker
 */
export const zld = mkPackage(
  nixRaw`pkgs.zld`,
  "A faster version of Apple's linker",
);

/**
 * Lossless data-compression library
 */
export const zlib = mkPackage(
  nixRaw`pkgs.zlib`,
  "Lossless data-compression library",
);

/**
 * zlib data compression library for the next generation systems
 */
export const zlib_ng = mkPackage(
  nixRaw`pkgs.zlib-ng`,
  "zlib data compression library for the next generation systems",
);

/**
 * X.509 Certificate Linter focused on Web PKI standards and requirements
 */
export const zlint = mkPackage(
  nixRaw`pkgs.zlint`,
  "X.509 Certificate Linter focused on Web PKI standards and requirements",
);

/**
 * Reliable, high-performance, thread safe, flexible, clear-model, pure C logging library
 */
export const zlog = mkPackage(
  nixRaw`pkgs.zlog`,
  "Reliable, high-performance, thread safe, flexible, clear-model, pure C logging library",
);

/**
 * Zig LSP implementation + Zig Language Server
 */
export const zls = mkPackage(
  nixRaw`pkgs.zls`,
  "Zig LSP implementation + Zig Language Server",
);

/**
 * Fast single packet network scanner designed for Internet-wide network surveys
 */
export const zmap = mkPackage(
  nixRaw`pkgs.zmap`,
  "Fast single packet network scanner designed for Internet-wide network surveys",
);

/**
 * C++ wrapper for czmq. Aims to be minimal, simple and consistent
 */
export const zmqpp = mkPackage(
  nixRaw`pkgs.zmqpp`,
  "C++ wrapper for czmq. Aims to be minimal, simple and consistent",
);

/**
 * GZDoom's music system as a standalone library
 */
export const zmusic = mkPackage(
  nixRaw`pkgs.zmusic`,
  "GZDoom's music system as a standalone library",
);

/**
 * Polynomial arithmetic over Z/nZ
 */
export const zn_poly = mkPackage(
  nixRaw`pkgs.zn_poly`,
  "Polynomial arithmetic over Z/nZ",
);

/**
 * High performance open source ZFS backup with mbuffer and ssh support
 */
export const znapzend = mkPackage(
  nixRaw`pkgs.znapzend`,
  "High performance open source ZFS backup with mbuffer and ssh support",
);

/**
 * Advanced IRC bouncer
 */
export const znc = mkPackage(
  nixRaw`pkgs.znc`,
  "Advanced IRC bouncer",
);

/**
 * Multiplayer remake of ZED
 */
export const zod = mkPackage(
  nixRaw`pkgs.zod`,
  "Multiplayer remake of ZED",
);

/**
 * Fast trigram based code search
 */
export const zoekt = mkPackage(
  nixRaw`pkgs.zoekt`,
  "Fast trigram based code search",
);

/**
 * A fast static site generator with everything built-in
 */
export const zola = mkPackage(
  nixRaw`pkgs.zola`,
  "A fast static site generator with everything built-in",
);

/**
 * Convert the dependencies in `build.zig.zon` to a Nix expression
 */
export const zon2nix = mkPackage(
  nixRaw`pkgs.zon2nix`,
  "Convert the dependencies in `build.zig.zon` to a Nix expression",
);

/**
 * Run Zonemaster tests from the command line
 */
export const zonemaster_cli = mkPackage(
  nixRaw`pkgs.zonemaster-cli`,
  "Run Zonemaster tests from the command line",
);

/**
 * Video surveillance software system
 */
export const zoneminder = mkPackage(
  nixRaw`pkgs.zoneminder`,
  "Video surveillance software system",
);

/**
 * Apache Zookeeper
 */
export const zookeeper = mkPackage(
  nixRaw`pkgs.zookeeper`,
  "Apache Zookeeper",
);

/**
 * Apache Zookeeper
 */
export const zookeeper_mt = mkPackage(
  nixRaw`pkgs.zookeeper_mt`,
  "Apache Zookeeper",
);

/**
 * Player for Z-Code, TADS and HUGO stories or games
 */
export const zoom = mkPackage(
  nixRaw`pkgs.zoom`,
  "Player for Z-Code, TADS and HUGO stories or games",
);

/**
 * zoom.us video conferencing application
 */
export const zoom_us = mkPackage(
  nixRaw`pkgs.zoom-us`,
  "zoom.us video conferencing application",
);

/**
 * Very good, but slow, deflate or zlib compression
 */
export const zopfli = mkPackage(
  nixRaw`pkgs.zopfli`,
  "Very good, but slow, deflate or zlib compression",
);

/**
 * Collect, organize, cite, and share your research sources
 */
export const zotero = mkPackage(
  nixRaw`pkgs.zotero`,
  "Collect, organize, cite, and share your research sources",
);

/**
 * A Node.js-based server to run Zotero translators
 */
export const zotero_translation_server = mkPackage(
  nixRaw`pkgs.zotero-translation-server`,
  "A Node.js-based server to run Zotero translators",
);

/**
 * A fast cd command that learns your habits
 */
export const zoxide = mkPackage(
  nixRaw`pkgs.zoxide`,
  "A fast cd command that learns your habits",
);

/**
 * Incremental journaling backup utility and archiver
 */
export const zpaq = mkPackage(
  nixRaw`pkgs.zpaq`,
  "Incremental journaling backup utility and archiver",
);

/**
 * ZPAQ archive (de)compressor and algorithm development tool
 */
export const zpaqd = mkPackage(
  nixRaw`pkgs.zpaqd`,
  "ZPAQ archive (de)compressor and algorithm development tool",
);

/**
 * Advanced multiversioned deduplicating archiver, with HW acceleration, encryption and paranoid-level tests
 */
export const zpaqfranz = mkPackage(
  nixRaw`pkgs.zpaqfranz`,
  "Advanced multiversioned deduplicating archiver, with HW acceleration, encryption and paranoid-level tests",
);

/**
 * A next-generation plugin manager for zsh
 */
export const zplug = mkPackage(
  nixRaw`pkgs.zplug`,
  "A next-generation plugin manager for zsh",
);

/**
 * A tool that aims to expand all partitions in a specified zpool to fill the available space
 */
export const zpool_auto_expand_partitions = mkPackage(
  nixRaw`pkgs.zpool-auto-expand-partitions`,
  "A tool that aims to expand all partitions in a specified zpool to fill the available space",
);

/**
 * "zpool iostats" for humans; find the slow parts of your ZFS pool
 */
export const zpool_iostat_viz = mkPackage(
  nixRaw`pkgs.zpool-iostat-viz`,
  "\"zpool iostats\" for humans; find the slow parts of your ZFS pool",
);

/**
 * Clojure/EDN source code formatter and pretty printer
 */
export const zprint = mkPackage(
  nixRaw`pkgs.zprint`,
  "Clojure/EDN source code formatter and pretty printer",
);

/**
 * A small utility for listing and reaping zombie processes on GNU/Linux
 */
export const zps = mkPackage(
  nixRaw`pkgs.zps`,
  "A small utility for listing and reaping zombie processes on GNU/Linux",
);

/**
 * Systemd unit generator for zram devices
 */
export const zram_generator = mkPackage(
  nixRaw`pkgs.zram-generator`,
  "Systemd unit generator for zram devices",
);

/**
 * A one-stop, integrated solution for ZFS replication
 */
export const zrepl = mkPackage(
  nixRaw`pkgs.zrepl`,
  "A one-stop, integrated solution for ZFS replication",
);

/**
 * Geo-scale, next-generation sharing platform built on top of OpenZiti
 */
export const zrok = mkPackage(
  nixRaw`pkgs.zrok`,
  "Geo-scale, next-generation sharing platform built on top of OpenZiti",
);

/**
 * Automated and intuitive digital audio workstation
 */
export const zrythm = mkPackage(
  nixRaw`pkgs.zrythm`,
  "Automated and intuitive digital audio workstation",
);

/**
 * APC SPDU control utility
 */
export const zs_apc_spdu_ctl = mkPackage(
  nixRaw`pkgs.zs-apc-spdu-ctl`,
  "APC SPDU control utility",
);

/**
 * Wait for a host to come up/go down
 */
export const zs_wait4host = mkPackage(
  nixRaw`pkgs.zs-wait4host`,
  "Wait for a host to come up/go down",
);

/**
 * udev rules for ZSA devices
 */
export const zsa_udev_rules = mkPackage(
  nixRaw`pkgs.zsa-udev-rules`,
  "udev rules for ZSA devices",
);

/**
 * A text scroller for use with panels and shells
 */
export const zscroll = mkPackage(
  nixRaw`pkgs.zscroll`,
  "A text scroller for use with panels and shells",
);

/**
 * The Z shell
 */
export const zsh = mkPackage(
  nixRaw`pkgs.zsh`,
  "The Z shell",
);

/**
 * The zsh manager for auto-expanding abbreviations, inspired by fish shell
 */
export const zsh_abbr = mkPackage(
  nixRaw`pkgs.zsh-abbr`,
  "The zsh manager for auto-expanding abbreviations, inspired by fish shell",
);

/**
 * Real-time type-ahead completion for Zsh. Asynchronous find-as-you-type autocompletion
 */
export const zsh_autocomplete = mkPackage(
  nixRaw`pkgs.zsh-autocomplete`,
  "Real-time type-ahead completion for Zsh. Asynchronous find-as-you-type autocompletion",
);

/**
 * Automatically sources whitelisted .autoenv.zsh files
 */
export const zsh_autoenv = mkPackage(
  nixRaw`pkgs.zsh-autoenv`,
  "Automatically sources whitelisted .autoenv.zsh files",
);

/**
 * A plugin that auto-closes, deletes and skips over matching delimiters in zsh intelligently
 */
export const zsh_autopair = mkPackage(
  nixRaw`pkgs.zsh-autopair`,
  "A plugin that auto-closes, deletes and skips over matching delimiters in zsh intelligently",
);

/**
 * Fish shell autosuggestions for Zsh
 */
export const zsh_autosuggestions = mkPackage(
  nixRaw`pkgs.zsh-autosuggestions`,
  "Fish shell autosuggestions for Zsh",
);

/**
 * Jump back to a specific directory, without doing `cd ../../..` 
 */
export const zsh_bd = mkPackage(
  nixRaw`pkgs.zsh-bd`,
  "Jump back to a specific directory, without doing `cd ../../..` ",
);

/**
 * Better completion for npm
 */
export const zsh_better_npm_completion = mkPackage(
  nixRaw`pkgs.zsh-better-npm-completion`,
  "Better completion for npm",
);

/**
 * Ohmyzsh plugin that integrates kill-ring with system clipboard
 */
export const zsh_clipboard = mkPackage(
  nixRaw`pkgs.zsh-clipboard`,
  "Ohmyzsh plugin that integrates kill-ring with system clipboard",
);

/**
 * Plugin that output time: xx after long commands
 */
export const zsh_command_time = mkPackage(
  nixRaw`pkgs.zsh-command-time`,
  "Plugin that output time: xx after long commands",
);

/**
 * Additional completion definitions for zsh
 */
export const zsh_completions = mkPackage(
  nixRaw`pkgs.zsh-completions`,
  "Additional completion definitions for zsh",
);

/**
 * Deferred execution of zsh commands
 */
export const zsh_defer = mkPackage(
  nixRaw`pkgs.zsh-defer`,
  "Deferred execution of zsh commands",
);

/**
 * A set of powerful extensions to the Zsh command line editor
 */
export const zsh_edit = mkPackage(
  nixRaw`pkgs.zsh-edit`,
  "A set of powerful extensions to the Zsh command line editor",
);

/**
 * Feature-rich Syntax Highlighting for Zsh
 */
export const zsh_f_sy_h = mkPackage(
  nixRaw`pkgs.zsh-f-sy-h`,
  "Feature-rich Syntax Highlighting for Zsh",
);

/**
 * Syntax-highlighting for Zshell
 */
export const zsh_fast_syntax_highlighting = mkPackage(
  nixRaw`pkgs.zsh-fast-syntax-highlighting`,
  "Syntax-highlighting for Zshell",
);

/**
 * A utility tool powered by fzf for using git interactively
 */
export const zsh_forgit = mkPackage(
  nixRaw`pkgs.zsh-forgit`,
  "A utility tool powered by fzf for using git interactively",
);

/**
 * A simple zsh plugin that replaces Ctrl+R with an fzf-driven select which includes date/times
 */
export const zsh_fzf_history_search = mkPackage(
  nixRaw`pkgs.zsh-fzf-history-search`,
  "A simple zsh plugin that replaces Ctrl+R with an fzf-driven select which includes date/times",
);

/**
 * Replace zsh's default completion selection menu with fzf!
 */
export const zsh_fzf_tab = mkPackage(
  nixRaw`pkgs.zsh-fzf-tab`,
  "Replace zsh's default completion selection menu with fzf!",
);

/**
 * Informative git prompt for zsh
 */
export const zsh_git_prompt = mkPackage(
  nixRaw`pkgs.zsh-git-prompt`,
  "Informative git prompt for zsh",
);

/**
 * A CLI to provide enhanced history for your ZSH shell
 */
export const zsh_history = mkPackage(
  nixRaw`pkgs.zsh-history`,
  "A CLI to provide enhanced history for your ZSH shell",
);

/**
 * Multi-word, syntax highlighted history searching for Zsh
 */
export const zsh_history_search_multi_word = mkPackage(
  nixRaw`pkgs.zsh-history-search-multi-word`,
  "Multi-word, syntax highlighted history searching for Zsh",
);

/**
 * Fish shell history-substring-search for Zsh
 */
export const zsh_history_substring_search = mkPackage(
  nixRaw`pkgs.zsh-history-substring-search`,
  "Fish shell history-substring-search for Zsh",
);

/**
 * Bring your ZSH history to Fish shell
 */
export const zsh_history_to_fish = mkPackage(
  nixRaw`pkgs.zsh-history-to-fish`,
  "Bring your ZSH history to Fish shell",
);

/**
 * Curses-based tools for ZSH
 */
export const zsh_navigation_tools = mkPackage(
  nixRaw`pkgs.zsh-navigation-tools`,
  "Curses-based tools for ZSH",
);

/**
 * zsh plugin that lets you use zsh in nix-shell shell
 */
export const zsh_nix_shell = mkPackage(
  nixRaw`pkgs.zsh-nix-shell`,
  "zsh plugin that lets you use zsh in nix-shell shell",
);

/**
 * A fast reimplementation of Powerlevel9k ZSH theme
 */
export const zsh_powerlevel10k = mkPackage(
  nixRaw`pkgs.zsh-powerlevel10k`,
  "A fast reimplementation of Powerlevel9k ZSH theme",
);

/**
 * A beautiful theme for zsh
 */
export const zsh_powerlevel9k = mkPackage(
  nixRaw`pkgs.zsh-powerlevel9k`,
  "A beautiful theme for zsh",
);

/**
 * The configuration framework for Zsh
 */
export const zsh_prezto = mkPackage(
  nixRaw`pkgs.zsh-prezto`,
  "The configuration framework for Zsh",
);

/**
 * Fish shell like syntax highlighting for Zsh
 */
export const zsh_syntax_highlighting = mkPackage(
  nixRaw`pkgs.zsh-syntax-highlighting`,
  "Fish shell like syntax highlighting for Zsh",
);

/**
 * A plugin that adds key bindings support for ZLE (Zsh Line Editor) clipboard operations for vi emulation keymaps
 */
export const zsh_system_clipboard = mkPackage(
  nixRaw`pkgs.zsh-system-clipboard`,
  "A plugin that adds key bindings support for ZLE (Zsh Line Editor) clipboard operations for vi emulation keymaps",
);

/**
 * A better and friendly vi(vim) mode plugin for ZSH.
 */
export const zsh_vi_mode = mkPackage(
  nixRaw`pkgs.zsh-vi-mode`,
  "A better and friendly vi(vim) mode plugin for ZSH.",
);

/**
 * ZSH plugin that reminds you to use existing aliases for commands you just typed
 */
export const zsh_you_should_use = mkPackage(
  nixRaw`pkgs.zsh-you-should-use`,
  "ZSH plugin that reminds you to use existing aliases for commands you just typed",
);

/**
 * Jump quickly to directories that you have visited frequently in the past, or recently
 */
export const zsh_z = mkPackage(
  nixRaw`pkgs.zsh-z`,
  "Jump quickly to directories that you have visited frequently in the past, or recently",
);

/**
 * A Super Nintendo Entertainment System Emulator
 */
export const zsnes = mkPackage(
  nixRaw`pkgs.zsnes`,
  "A Super Nintendo Entertainment System Emulator",
);

/**
 * A maintained fork of zsnes
 */
export const zsnes2 = mkPackage(
  nixRaw`pkgs.zsnes2`,
  "A maintained fork of zsnes",
);

/**
 * SSH and Telnet client with ZMODEM file transfer capability
 */
export const zssh = mkPackage(
  nixRaw`pkgs.zssh`,
  "SSH and Telnet client with ZMODEM file transfer capability",
);

/**
 * Zstandard real-time compression algorithm
 */
export const zstd = mkPackage(
  nixRaw`pkgs.zstd`,
  "Zstandard real-time compression algorithm",
);

/**
 * Detect stegano-hidden data in PNG & BMP.
 */
export const zsteg = mkPackage(
  nixRaw`pkgs.zsteg`,
  "Detect stegano-hidden data in PNG & BMP.",
);

/**
 * utilities to deal with text based name service databases
 */
export const zstxtns_utils = mkPackage(
  nixRaw`pkgs.zstxtns-utils`,
  "utilities to deal with text based name service databases",
);

/**
 * World's fastest (simd) CSV parser, with an extensible CLI
 */
export const zsv = mkPackage(
  nixRaw`pkgs.zsv`,
  "World's fastest (simd) CSV parser, with an extensible CLI",
);

/**
 * File distribution system using the rsync algorithm
 */
export const zsync = mkPackage(
  nixRaw`pkgs.zsync`,
  "File distribution system using the rsync algorithm",
);

/**
 * Generate tags files for Zig projects
 */
export const ztags = mkPackage(
  nixRaw`pkgs.ztags`,
  "Generate tags files for Zig projects",
);

/**
 * A program that throttles a pipeline, only letting a line through at most every $1 seconds.
 */
export const zthrottle = mkPackage(
  nixRaw`pkgs.zthrottle`,
  "A program that throttles a pipeline, only letting a line through at most every $1 seconds.",
);

/**
 * Themes for GTK, gnome-shell and Xfce
 */
export const zuki_themes = mkPackage(
  nixRaw`pkgs.zuki-themes`,
  "Themes for GTK, gnome-shell and Xfce",
);

/**
 * Desktop client for Zulip Chat
 */
export const zulip = mkPackage(
  nixRaw`pkgs.zulip`,
  "Desktop client for Zulip Chat",
);

/**
 * Zulip's official terminal client
 */
export const zulip_term = mkPackage(
  nixRaw`pkgs.zulip-term`,
  "Zulip's official terminal client",
);

/**
 * Certified builds of OpenJDK
 */
export const zulu = mkPackage(
  nixRaw`pkgs.zulu`,
  "Certified builds of OpenJDK",
);

/**
 * Certified builds of OpenJDK
 */
export const zulu11 = mkPackage(
  nixRaw`pkgs.zulu11`,
  "Certified builds of OpenJDK",
);

/**
 * Certified builds of OpenJDK
 */
export const zulu17 = mkPackage(
  nixRaw`pkgs.zulu17`,
  "Certified builds of OpenJDK",
);

/**
 * Certified builds of OpenJDK
 */
export const zulu21 = mkPackage(
  nixRaw`pkgs.zulu21`,
  "Certified builds of OpenJDK",
);

/**
 * Certified builds of OpenJDK
 */
export const zulu8 = mkPackage(
  nixRaw`pkgs.zulu8`,
  "Certified builds of OpenJDK",
);

/**
 * A Tiny Racket for Scripting
 */
export const zuo = mkPackage(
  nixRaw`pkgs.zuo`,
  "A Tiny Racket for Scripting",
);

/**
 * Tool for writing scripts using JavaScript
 */
export const zx = mkPackage(
  nixRaw`pkgs.zx`,
  "Tool for writing scripts using JavaScript",
);

/**
 * A C/C++ implementation of the zxcvbn password strength estimation
 */
export const zxcvbn_c = mkPackage(
  nixRaw`pkgs.zxcvbn-c`,
  "A C/C++ implementation of the zxcvbn password strength estimation",
);

/**
 * A popular script for managing ZFS snapshot replication
 */
export const zxfer = mkPackage(
  nixRaw`pkgs.zxfer`,
  "A popular script for managing ZFS snapshot replication",
);

/**
 * 1D and 2D code reading library
 */
export const zxing = mkPackage(
  nixRaw`pkgs.zxing`,
  "1D and 2D code reading library",
);

/**
 * C++ port of zxing (a Java barcode image processing library)
 */
export const zxing_cpp = mkPackage(
  nixRaw`pkgs.zxing-cpp`,
  "C++ port of zxing (a Java barcode image processing library)",
);

/**
 * Shell scripts made simple
 */
export const zxpy = mkPackage(
  nixRaw`pkgs.zxpy`,
  "Shell scripts made simple",
);

/**
 * Fast and lightweight x86/x86-64 disassembler library
 */
export const zydis = mkPackage(
  nixRaw`pkgs.zydis`,
  "Fast and lightweight x86/x86-64 disassembler library",
);

/**
 * High quality software synthesizer (Zyn-Fusion GUI)
 */
export const zynaddsubfx = mkPackage(
  nixRaw`pkgs.zynaddsubfx`,
  "High quality software synthesizer (Zyn-Fusion GUI)",
);

/**
 * High quality software synthesizer (FLTK GUI)
 */
export const zynaddsubfx_fltk = mkPackage(
  nixRaw`pkgs.zynaddsubfx-fltk`,
  "High quality software synthesizer (FLTK GUI)",
);

/**
 * High quality software synthesizer (NTK GUI)
 */
export const zynaddsubfx_ntk = mkPackage(
  nixRaw`pkgs.zynaddsubfx-ntk`,
  "High quality software synthesizer (NTK GUI)",
);

/**
 * ZetZ a zymbolic verifier and tranzpiler to bare metal C
 */
export const zz = mkPackage(
  nixRaw`pkgs.zz`,
  "ZetZ a zymbolic verifier and tranzpiler to bare metal C",
);

/**
 * Library to extract data from files archived in a zip file
 */
export const zziplib = mkPackage(
  nixRaw`pkgs.zziplib`,
  "Library to extract data from files archived in a zip file",
);

/**
 * Transparent application input fuzzer
 */
export const zzuf = mkPackage(
  nixRaw`pkgs.zzuf`,
  "Transparent application input fuzzer",
);
